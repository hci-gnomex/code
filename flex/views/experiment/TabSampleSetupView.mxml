<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="Sample Details" 
		   xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:util="views.util.*" 
		   xmlns:renderers="views.renderers.*"
		   horizontalScrollPolicy="off"
		   width="100%" height="100%" show="{init();}" >
	
	<mx:HTTPService  
		id="getQCChipTypePriceList" 
		url="GetQCChipTypePriceList.gx"
		concurrency="multiple"
		destination="getQCChipTypePriceList" 
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetQCChipTypePriceList(event)"
		fault="parentApplication.onFailHttpRequest('Unable to get QC Chip Type price list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>
	
	<mx:Script>
		<![CDATA[
		import mx.collections.Sort;
		import mx.events.ListEvent;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;

		import views.renderers.CheckBoxIsSelectedChipType;
		import views.util.OrganismAddEvent;
		import views.util.OrganismEvent;

		private var validNumberOfSamples:Boolean = true;
		private var validConcentration:Boolean = true;

		private var addOrganismOpen:Boolean = false;

		private var currencyFormatter:CurrencyFormatter = new CurrencyFormatter();
		public var configuredCodeRequestCategory:String = "";
		private var configuredEditState:String = "";

		private var loadedPriceIdLab:String = "";
		private var loadedPriceCodeRequestCategory:String = "";
		private var selectedPriceIdLab:String = "";
		private var selectedPriceCodeRequestCategory:String = "";
		private var selectedQCApplication:Object = null;
		[Bindable]
		private var filteredChipTypeList:XMLListCollection = null;
		private var priceMap:Dictionary = null;
		public var application:Object = null;

		[Bindable]
		private var sampleType:Object = null;

		private const DNA:String = 'DNA';
		private const RNA:String = 'RNA';
		private const BOTH:String = 'BOTH';

		private function init():void {
			var results:Array = mx.validators.Validator.validateAll(new Array(samplePrepValidator));
			this.application = null;
			if (sampleTypeRadioGroup.selectedValue == null) {
				sampleType = null;
				sampleTypeDNARNAHBox.styleName = 'requiredBox';
			}
			this.verticalScrollPosition = 0;
			if (parentDocument.getRequestCategory().@isIlluminaType == 'Y') {
				initIllumina();
			}
			if (qcInstructions != null) {
				var qcInstText:String = parentApplication.getRequestCategoryProperty(parentDocument.getRequestCategory().@idCoreFacility, parentDocument.getRequestCategory().@codeRequestCategory, parentApplication.PROPERTY_QC_INSTRUCTIONS);
				if (qcInstText != null && qcInstText != '') {
					qcInstructions.text = qcInstText;
					hbox5.visible = true;
					hbox5.includeInLayout = true;
				} else {
					hbox5.visible = false;
					hbox5.includeInLayout = false;
				}
			}

			this.pickSequenomType();
		}

		private function initIllumina():void {
			currencyFormatter.currencySymbol = "$";
			currencyFormatter.precision = 2;
			currencyFormatter.useThousandsSeparator;

			//Since old values are not cleared out when creating second experiment in same session
			//Check to make sure that the old values are valid enough to enable the next button right away.
			parentDocument.enableNextButtons();
		}

		public function initQC():void {
			this.currentState = 'QCSetupState';
			this.chipTypeVBox.visible = false;
			this.chipTypeVBox.includeInLayout = false;
			this.selectedQCApplication = null;
			this.loadedPriceIdLab = "";
			this.loadedPriceCodeRequestCategory = "";
			var hideBufferStrength:String = parentApplication.getCoreFacilityProperty(parentDocument.coreFacility.@idCoreFacility, parentApplication.PROPERTY_QC_ASSAY_HIDE_BUFFER_STRENGTH);
			if (hideBufferStrength != null && hideBufferStrength == "Y") {
				this.maxSampleBufferStrengthCol.visible = false;
			} else {
				this.maxSampleBufferStrengthCol.visible = true;
			}
			var hideWellsPerChip:String = parentApplication.getCoreFacilityProperty(parentDocument.coreFacility.@idCoreFacility, parentApplication.PROPERTY_QC_ASSAY_HIDE_WELLS_PER_CHIP);
			if (hideWellsPerChip != null && hideWellsPerChip == "Y") {
				this.sampleWellsPerChipCol.visible = false;
			} else {
				this.sampleWellsPerChipCol.visible = true;
			}
		}

		public function setCoreFacilityNoteVisibility(vis:Boolean):void {
			coreNotesBox.visible = vis;
			coreNotesBox.includeInLayout = vis;
		}

		public function setExternalNoteVisibility():void {
			if (!parentApplication.isInternalExperimentSubmission) {
				if (parentDocument.request.@corePrepInstructions == null || parentDocument.request.@corePrepInstructions == "") {
					setCoreFacilityNoteVisibility(false);
				} else {
					setCoreFacilityNoteVisibility(true);
				}
			} else {
				if (parentDocument.isEditState()) {
					setCoreFacilityNoteVisibility(false);
				} else {
					setCoreFacilityNoteVisibility(true);
				}
			}
		}

		private function buildChipTypeKey(obj:Object):String {
			var key:String = "";
			if (obj != null) {
				key = obj.@codeApplication.toString() + "&" + obj.@codeBioanalyzerChipType.toString();
			}
			return key;
		}

		public function setPrimerDefaults():void {
			if (parentDocument.isMitSeqState()) {
				// Set defaults for primers
				var idx:int = 0;
				for each(var primer:Object in this.primerCollection) {
					if (primer.@display == '15819F') {
						primer1Combo.selectedIndex = idx;
					}
					if (primer.@display == '16213F') {
						primer2Combo.selectedIndex = idx;
					}
					if (primer.@display == '48F') {
						primer3Combo.selectedIndex = idx;
					}
					if (primer.@display == 'S4') {
						primer4Combo.selectedIndex = idx;
					}
					if (primer.@display == '58R') {
						primer5Combo.selectedIndex = idx;
					}
					if (primer.@display == '653R') {
						primer6Combo.selectedIndex = idx;
					}
					idx++;
				}
			}
		}

		public function applicationHasChipTypes():Boolean {
			if (selectedQCApplication == null || selectedQCApplication.@hasChipTypes != 'Y') {
				return false;
			} else {
				return true;
			}
		}

		public function getSelectedCodeBioanalyzerChipType():String {
			var selectedCode:String = '';
			if (applicationHasChipTypes()) {
				for each(var item:Object in this.bioanalyzerChipTypeGrid.dataProvider) {
					if (item.@isSelected != null && item.@isSelected == "true") {
						selectedCode = item.@value;
						break;
					}
				}
			}
			return selectedCode;
		}

		private function propagateReagent():void {
			parentDocument.request.@reagent = reagentInput.text;
		}

		private function propagateElutionBuffer():void {
			parentDocument.request.@elutionBuffer = elutionBufferInput.text;
		}

		private function propagateDnase():void {
			if (this.dnaseCheckBox.selected) {
				parentDocument.request.@usedDnase = 'Y';
			} else {
				parentDocument.request.@usedDnase = 'N';
			}
		}

		private function propagateRnase():void {
			if (this.rnaseCheckBox.selected) {
				parentDocument.request.@usedRnase = 'Y';
			} else {
				parentDocument.request.@usedRnase = 'N';
			}
		}

		private function propagateKeepSamples():void {
			parentDocument.request.@keepSamples = retrieveSamplesRadioGroup.selectedValue;
		}

		public function propagateChipType():void {
			var codeChipType:String = "";
			if (this.applicationHasChipTypes()) {
				codeChipType = this.getSelectedCodeBioanalyzerChipType();
			}
			for each (var sample:Object in parentDocument.samples) {
				sample.@codeBioanalyzerChipType = codeChipType;
			}
		}

		private function propagateSampleSource():void {
			for each (var sample:Object in parentDocument.samples) {
				if (this.sampleSourceCombo.selectedItem != null &&
						this.sampleSourceCombo.selectedItem.@idSampleSource != null &&
						this.sampleSourceCombo.selectedItem.@idSampleSource != '') {
					sample.@idSampleSource = this.sampleSourceCombo.selectedItem.@idSampleSource;
				} else {
					sample.@idSampleSource = "";
				}
			}
		}

		private function propagateSampleType():void {
			for each (var sample:Object in parentDocument.samples) {
				if (this.sampleTypeRadioGroup.selectedValue != null) {
					sample.@idSampleType = this.sampleTypeRadioGroup.selectedValue;
				} else {
					sample.@idSampleType = "";
				}
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}

		private function propagateOtherSamplePrepMethod():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@otherSamplePrepMethod = otherSamplePrepMethod.text;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);

		}

		public function propagateSampleOrganism():void {
			for each (var sample:Object in parentDocument.samples) {
				if (sampleOrganismCombo.selectedItem != null) {
					sample.@idOrganism = this.sampleOrganismCombo.selectedItem.@value;
				}
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}

		private function propagateOtherSampleOrganism():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@otherOrganism = otherOrganism.text;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);

		}

		public function toggleOtherChipTypeSelections(codeSelected:String):void {

			for each(var item:Object in this.bioanalyzerChipTypeGrid.dataProvider) {
				if (item.@value != codeSelected) {
					item.@isSelected = "false";
				}
			}
		}

		private function selectDefaultGenomeBuild():void {
			if (parentDocument.isSolexaState()) {
				this.parentDocument.bioinformaticsView.selectDefaultGenomeBuild();
			}
		}

		private function toggleChipTypeCheck(event:ListEvent):void {
			if (event.columnIndex == 0) {
				return;
			}
			if (bioanalyzerChipTypeGrid.selectedItem.@isSelected == "true") {
				bioanalyzerChipTypeGrid.selectedItem.@isSelected = "false";
			} else {
				bioanalyzerChipTypeGrid.selectedItem.@isSelected = "true";
			}
			toggleOtherChipTypeSelections(bioanalyzerChipTypeGrid.selectedItem.@value);
			// initialize the samples grid
			parentDocument.samplesView.initializeSamplesGrid();
			// propagate selected chip type to samples
			propagateChipType();

			checkRequiredChipType();
		}

		private function onNumberOfSamplesChanged():void {
			if (parentDocument.isIScanState()) {
				numberOfSamplesValidator.maxValue = 600;
			} else if (parentDocument.isCapSeqState()) {
				numberOfSamplesValidator.maxValue = 384;
			} else {
				// This is an arbitrary limit
				numberOfSamplesValidator.maxValue = 9999;
			}
			if (this.numberOfSamples != null && this.numberOfSamples.text != '' &&
					parseInt(this.numberOfSamples.text) < numberOfSamplesValidator.maxValue && parseInt(this.numberOfSamples.text) > 0) {
				validNumberOfSamples = true;
			} else {
				validNumberOfSamples = false;
			}
			parentDocument.samplesView.initializeSamplesGrid();
		}

		public function checkRequiredChipType():void {
			// Required field
			if (this.getSelectedCodeBioanalyzerChipType() == '') {
				chipTypeBox.styleName = "requiredBoxThick";
			} else {
				chipTypeBox.styleName = "normalBoxThick";
			}
		}

		public function checkSampleSetupCompleteness():Boolean {
			var isComplete:Boolean = false;
			if (parentDocument == null) {
				return isComplete;
			}

			parentDocument.userWarningsSampleSetup = "";
			if (parentDocument.isEditState()) {
				isComplete = true;
			} else if (parentDocument.isGenericState()) {
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
						this.sampleTypeRadioGroup.selectedValue &&
						hasOrganism()) {

					isComplete = true;
				}
				if (parentDocument.filteredAppList.length > 0) {
					if (this.radioGroupApp.selectedValue == null) {
						isComplete = false;
					}
				}
				if (currentState == 'DigitalPCRState') {
					isComplete = isComplete && otherSamplePrepMethod.text.length > 0;
				}
			} else if (currentState == 'MicroarrayAmendState') {
				if (this.sampleTypeRadioGroup.selectedValue != null && hasOrganism() && otherSamplePrepMethod.text.length > 0) {
					isComplete = true;
				}
			} else if (parentDocument.isSolexaAmendState()) {
				if (hasOrganism() &&
						this.sampleTypeRadioGroup.selectedValue &&
						otherSamplePrepMethod.text.length > 0) {

					isComplete = true;
				}
			} else if (parentDocument.isSolexaState()) {
				if (this.currentState == 'MDMiSeqState') {
					if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
							this.sampleTypeRadioGroup.selectedValue &&
							hasOrganism() && this.otherSamplePrepMethod.text.length > 0) {

						isComplete = true;
						parentDocument.seqLibProtocolList.refresh();
					}
				} else {
					if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
							this.sampleTypeRadioGroup.selectedValue &&
							hasOrganism() && reagentInput.text != '' &&
							elutionBufferInput.text != '' &&
							retrieveSamplesRadioGroup.selectedValue != null) {

						isComplete = true;
					}
				}

			} else if (parentDocument.isNanoStringState()) {
				isComplete = this.sampleTypeRadioGroup.selectedValue;
				isComplete = isComplete && (hasOrganism() && this.otherSamplePrepMethod.text.length > 0);
				parentDocument.seqLibProtocolList.refresh();

			} else if (parentDocument.isQCState()) {
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
						this.sampleTypeRadioGroup.selectedValue &&
						this.otherSamplePrepMethod.text.length > 0) {

					// Only need to check if chip type selected if this is
					// a bioanalyzer qc request.
					if (applicationHasChipTypes()) {
						for each(var chipType:Object in this.bioanalyzerChipTypeGrid.dataProvider) {
							if (chipType.@isSelected == "true") {
								isComplete = true;
								break;
							}
						}
					} else {
						isComplete = true;
					}
				}
			} else if (parentDocument.isCapSeqState()) {
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
						this.sampleDropOffLocationCombo.selectedItem != null && this.sampleDropOffLocationCombo.selectedItem.@value != '') {
					isComplete = true;
					if (this.containerTypePlate.selected) {
						if (this.capSeqNumPlatesRadioGroup.selectedValue == null) {
							isComplete = false;
						}
					}
				}
			} else if (parentDocument.isFragAnalState()) {
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '') {
					var num:int = Number(this.numberOfSamples.text);
					if (num > 0 && num < 97) {
						for (var x:int = 0; x < assayCheckBox.length; x++) {
							if (assayCheckBox[x].selected) {
								isComplete = true;
								break;
							}
						}
					}
				}
			} else if (parentDocument.isMitSeqState()) {
				this.primer1Combo.setStyle("fillColors", ["white", "white"]);
				this.primer2Combo.setStyle("fillColors", ["white", "white"]);
				this.primer3Combo.setStyle("fillColors", ["white", "white"]);
				this.primer4Combo.setStyle("fillColors", ["white", "white"]);
				this.primer5Combo.setStyle("fillColors", ["white", "white"]);
				this.primer6Combo.setStyle("fillColors", ["white", "white"]);
				var foundDupe:Boolean = false;
				if (this.primer1Combo.selectedItem.@value == primer2Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer1Combo.setStyle("fillColors", ["red", "white"]);
					this.primer2Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer1Combo.selectedItem.@value == primer3Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer1Combo.setStyle("fillColors", ["red", "white"]);
					this.primer3Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer1Combo.selectedItem.@value == primer4Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer1Combo.setStyle("fillColors", ["red", "white"]);
					this.primer4Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer1Combo.selectedItem.@value == primer5Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer1Combo.setStyle("fillColors", ["red", "white"]);
					this.primer5Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer1Combo.selectedItem.@value == primer6Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer1Combo.setStyle("fillColors", ["red", "white"]);
					this.primer6Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer2Combo.selectedItem.@value == primer3Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer2Combo.setStyle("fillColors", ["red", "white"]);
					this.primer3Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer2Combo.selectedItem.@value == primer4Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer2Combo.setStyle("fillColors", ["red", "white"]);
					this.primer4Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer2Combo.selectedItem.@value == primer5Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer2Combo.setStyle("fillColors", ["red", "white"]);
					this.primer5Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer2Combo.selectedItem.@value == primer6Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer2Combo.setStyle("fillColors", ["red", "white"]);
					this.primer6Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer3Combo.selectedItem.@value == primer4Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer3Combo.setStyle("fillColors", ["red", "white"]);
					this.primer4Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer3Combo.selectedItem.@value == primer5Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer3Combo.setStyle("fillColors", ["red", "white"]);
					this.primer5Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer3Combo.selectedItem.@value == primer6Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer3Combo.setStyle("fillColors", ["red", "white"]);
					this.primer6Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer4Combo.selectedItem.@value == primer5Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer4Combo.setStyle("fillColors", ["red", "white"]);
					this.primer5Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer4Combo.selectedItem.@value == primer6Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer4Combo.setStyle("fillColors", ["red", "white"]);
					this.primer6Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer5Combo.selectedItem.@value == primer6Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer5Combo.setStyle("fillColors", ["red", "white"]);
					this.primer6Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
						this.primer1Combo.selectedItem != null && this.primer1Combo.selectedItem.@value != '' &&
						this.primer2Combo.selectedItem != null && this.primer2Combo.selectedItem.@value != '' &&
						this.primer3Combo.selectedItem != null && this.primer3Combo.selectedItem.@value != '' &&
						this.primer4Combo.selectedItem != null && this.primer4Combo.selectedItem.@value != '' &&
						this.primer5Combo.selectedItem != null && this.primer5Combo.selectedItem.@value != '' &&
						this.primer6Combo.selectedItem != null && this.primer6Combo.selectedItem.@value != '') {
					if (!foundDupe) {
						isComplete = true;
					}
				}
			} else if (parentDocument.isCherryPickState()) {
				var cherryNumPlates:int = Number(this.cherryNumSourcePlates.text);
				if (cherryNumPlates > 0 && cherryNumPlates < 13
						&& this.cherryNumDestinationWellsRadioGroup.selectedValue != null && this.cherryNumDestinationWellsRadioGroup.selectedValue != ''
						&& (cherryNumPlates < 1 || (cherryPlate1Name.text != null && cherryPlate1Name.text != ''))
						&& (cherryNumPlates < 2 || (cherryPlate2Name.text != null && cherryPlate2Name.text != ''))
						&& (cherryNumPlates < 3 || (cherryPlate3Name.text != null && cherryPlate3Name.text != ''))
						&& (cherryNumPlates < 4 || (cherryPlate4Name.text != null && cherryPlate4Name.text != ''))
						&& (cherryNumPlates < 5 || (cherryPlate5Name.text != null && cherryPlate5Name.text != ''))
						&& (cherryNumPlates < 6 || (cherryPlate6Name.text != null && cherryPlate6Name.text != ''))
						&& (cherryNumPlates < 7 || (cherryPlate7Name.text != null && cherryPlate7Name.text != ''))
						&& (cherryNumPlates < 8 || (cherryPlate8Name.text != null && cherryPlate8Name.text != ''))
						&& (cherryNumPlates < 9 || (cherryPlate9Name.text != null && cherryPlate9Name.text != ''))
						&& (cherryNumPlates < 10 || (cherryPlate10Name.text != null && cherryPlate10Name.text != ''))
						&& (cherryNumPlates < 11 || (cherryPlate11Name.text != null && cherryPlate11Name.text != ''))
						&& (cherryNumPlates < 12 || (cherryPlate12Name.text != null && cherryPlate12Name.text != ''))) {
					isComplete = true;
				}
			} else if (parentDocument.isIScanState()) {
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '') {
					isComplete = true;
				}

				if (this.iScanNumSourcePlates == null || this.iScanNumSourcePlates.text == ''
						|| parseInt(this.iScanNumSourcePlates.text) > 12 || parseInt(this.iScanNumSourcePlates.text) < 1) {
					isComplete = false;
				}

			} else if (parentDocument.isSequenomState()) {
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '') {
					if (this.radioGroupSeqApp.selectedValue != null && this.radioGroupSeqApp.selectedValue == "OTHER") {
						if (this.sequenomApplicationDesc.text != null && this.sequenomApplicationDesc.text != '') {
							isComplete = true;
						}
					} else if (this.radioGroupSeqApp.selectedValue != null) {
						isComplete = true;
					}
					isComplete = isComplete && this.sampleTypeRadioGroup.selectedValue;
				}

			} else if (parentDocument.isClinicalSequenomState()) {
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '') {
					isComplete = this.sampleTypeRadioGroup.selectedValue;
				}
				parentDocument.confirmView.enabled = isComplete;
			} else if (parentDocument.isIsolationState()) {
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
						this.isolationTypeRadioGroup.selectedValue && isolationTypeRadioGroup.selectedValue != null && extractionTypeRadioGroup.selectedValue != null) {
					isComplete = true;
				} else if (parentDocument.isolationTypeList.length == 0) {
					isComplete = true;
				}
			}
		else
		{
			if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
					this.sampleTypeRadioGroup.selectedValue &&
					hasOrganism() &&
					this.otherSamplePrepMethod.text.length > 0) {
				isComplete = true;
			}
		}

		if (!this.parentDocument.isCherryPickState() &&
				(!this.validNumberOfSamples || !this.validConcentration)) {
			isComplete = false;
		}

		if (parentDocument.isSolexaState() || parentDocument.isNanoStringState()) {
			parentDocument.seqSetupView.enabled = isComplete;
		}

		if (parentDocument.theTab.contains(parentDocument.annotationView)) {
			parentDocument.annotationView.enabled = isComplete;
		}

		generateSampleSizeWarnings();

		callLater(postSampleSetupCompleteness, [isComplete]);

		return isComplete;
		}

		private function generateSampleSizeWarnings():void {
			sampleSizeWarning.text = "";

			// Check if product use quantity is matched with sample count
			var batchByProductUseQuantity:Boolean = false;
			var productUseWarning:String = "";
			var productUseQty:Number = parentDocument.productsView.getUseQuantityOfSelectedProduct();
			if (productUseQty > 0 && numberOfSamples.text != '' && int(numberOfSamples.text) % productUseQty != 0) {
				productUseWarning = " The selected product has a use quantity of " + productUseQty.toString() + ". Unused product will be lost.";
				if (parentDocument.productsView.batchSamplesByUseQuantity()) {
					batchByProductUseQuantity = true;
				}
			}
			sampleSizeWarning.text += " " + productUseWarning;

			//Check if we have a sample batch size restriction.  If so warn user.  Check on application level first and then requestCategory level
			var sampleBatchWarning:String = "";
			if (batchByProductUseQuantity) {
				var warningProp:String = parentApplication.getCoreFacilityProperty(parentDocument.getRequestCategory().@idCoreFacility, parentApplication.PROPERTY_PRODUCT_SAMPLE_BATCH_WARNING);
				if (warningProp != null) {
					sampleBatchWarning = warningProp;
				}
			} else {
				var hasBatchSampleSize:String = parentApplication.getRequestCategoryProperty(parentDocument.getRequestCategory().@idCoreFacility, parentDocument.getRequestCategory().@codeRequestCategory, parentApplication.PROPERTY_SAMPLE_BATCH_WARNING);
				if (application != null && application.@samplesPerBatch != null && application.@samplesPerBatch != '') {
					var appSampleSize:int = int(application.@samplesPerBatch);
					if (numberOfSamples.text != "" && int(numberOfSamples.text) % appSampleSize != 0) {
						if (hasBatchSampleSize != "") {
							sampleBatchWarning = hasBatchSampleSize;
						} else {
							sampleBatchWarning = " You have selected a panel which runs in batches of " + appSampleSize + " samples. Please note you will be responsible to pay for unused wells.";
						}
					}
				} else if (parentDocument.getRequestCategory().@sampleBatchSize != null && parentDocument.getRequestCategory().@sampleBatchSize != '') {
					var reqCatSampleSize:int = int(parentDocument.getRequestCategory().@sampleBatchSize);
					if (numberOfSamples.text != "" && int(numberOfSamples.text) % reqCatSampleSize != 0) {
						if (hasBatchSampleSize != "") {
							sampleBatchWarning = hasBatchSampleSize;
						} else {
							sampleBatchWarning = " You have selected a request category which runs in batches of " + reqCatSampleSize + " samples. Please note you will be responsible to pay for unused wells.";
						}
					}
				}
			}
			sampleSizeWarning.text += " " + sampleBatchWarning;
		}


		private function hasOrganism():Boolean {
			if (this.sampleOrganismCombo.selectedItem != null && this.sampleOrganismCombo.selectedItem.@display == 'Other' && this.otherOrganism.text != '') {
				return true;
			} else if (this.sampleOrganismCombo.selectedItem != null && this.sampleOrganismCombo.selectedItem.@value != '' && this.sampleOrganismCombo.selectedItem.@display != 'Other') {
				return true;
			} else {
				return false;
			}
		}

		private function postSampleSetupCompleteness(isComplete:Boolean):void {

			if (parentDocument == null) {
				return;
			}
			if (!isComplete) {
				parentDocument.samplesView.enabled = false;
				if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
					parentDocument.hybSetupView.enabled = false;
				}

				if (parentDocument.theTab.contains(parentDocument.hybsView)) {
					parentDocument.hybsView.enabled = false;
				}

				if (parentDocument.theTab.contains(parentDocument.confirmView)) {
					parentDocument.confirmView.enabled = false;
				}
			} else {
				if (parentDocument.isSolexaState()) {
					parentDocument.seqSetupView.checkSeqAppSetupCompleteness();
				} else {
					// In edit state samples view enabling/disabling is handled elsewhere.
					if (!parentDocument.isEditState()) {
						parentDocument.samplesView.enabled = true;
					}
					if (parentDocument.samplesView.visible == true) {
						parentDocument.samplesView.checkSamplesCompleteness();
					}
				}
			}
			parentDocument.enableNextButtons();
		}

		private function handleInvalidConcentration(eventObject:Event):void {
			this.validConcentration = false;
			this.checkSampleSetupCompleteness();
		}

		private function handleValidConcentration(eventObject:Event):void {
			this.validConcentration = true;
			this.checkSampleSetupCompleteness();
		}

		private function pickQCApp(evt:Event):void {
			this.selectedQCApplication = RadioButton(evt.currentTarget).getRepeaterItem();
			if (applicationHasChipTypes()) {
				this.chipTypeVBox.visible = true;
				this.chipTypeVBox.includeInLayout = true;
				this.parentDocument.confirmView.chipTypeConfirmColumn.visible = true;
				filteredChipTypeList.refresh();
			} else {
				this.chipTypeVBox.visible = false;
				this.chipTypeVBox.includeInLayout = false;
				this.parentDocument.confirmView.chipTypeConfirmColumn.visible = false;
				parentDocument.request.@codeBioanalyzerChipType = '';
				parentDocument.samplesView.initializeSamplesGrid();
				this.propagateChipType();
			}

			if (this.radioGroupQCApp.selectedValue != null) {
				this.qcAppBox.styleName = 'normalBox';
				this.parentDocument.applicationName = selectedQCApplication.@display;
				this.parentDocument.request.@codeApplication = selectedQCApplication.@value;
			} else {
				this.qcAppBox.styleName = 'requiredBox';
				this.parentDocument.applicationName = '';
				this.parentDocument.request.@codeApplication = '';
			}

			this.checkSampleSetupCompleteness();
		}

		private function pickSequenomApp():void {
			if (this.radioGroupSeqApp.selectedValue != null && this.radioGroupSeqApp.selectedValue == "OTHER") {
				sequenomPanelContainer.visible = true;
				sequenomPanelContainer.includeInLayout = true;
				sequenomApplicationDesc.styleName = 'requiredBox';
			} else {
				sequenomPanelContainer.visible = false;
				sequenomPanelContainer.includeInLayout = false;
				sequenomApplicationDesc.styleName = 'normalBox';
				sequenomApplicationDesc.text = '';
			}
			if (this.radioGroupSeqApp.selectedValue != null) {
				this.seqAppBox.styleName = 'normalBox';
				this.application = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', radioGroupSeqApp.selectedValue);
				this.parentDocument.applicationName = application.@display;
			} else {
				this.seqAppBox.styleName = 'requiredBox';
				this.parentDocument.applicationName = '';
			}
			if (this.checkSampleSetupCompleteness()) {
				parentDocument.samplesView.initializeSamplesGrid();
			}
		}

		private function pickApp():void {
			if (this.radioGroupApp.selectedValue != null && this.radioGroupApp.selectedValue == "OTHER") {
				panelContainer.visible = true;
				panelContainer.includeInLayout = true;
				applicationDesc.styleName = 'requiredBox';
			} else {
				panelContainer.visible = false;
				panelContainer.includeInLayout = false;
				applicationDesc.styleName = 'normalBox';
				applicationDesc.text = '';
			}
			if (this.radioGroupApp.selectedValue != null) {
				this.appBox.styleName = 'normalBox';
				this.application = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', radioGroupApp.selectedValue);
				this.parentDocument.applicationName = application.@display;
			} else {
				this.appBox.styleName = 'requiredBox';
				this.parentDocument.applicationName = '';
			}
			if (this.checkSampleSetupCompleteness()) {
				parentDocument.samplesView.initializeSamplesGrid();
			}
		}

		private function pickSampleType():void {
			if (sampleTypeRadioGroup.selectedValue != null) {
				sampleTypeDNARNAHBox.styleName = '';
			}

			getSampleType();

			propagateSampleType();

			if (sampleType != null) {
				if (sampleType.@codeNucleotideType == 'DNA') {
					rnaseBox.includeInLayout = true;
					rnaseBox.visible = true;
					dnaseBox.includeInLayout = false;
					dnaseBox.visible = false;
				} else if (sampleType.@codeNucleotideType == 'RNA') {
					dnaseBox.includeInLayout = true;
					dnaseBox.visible = true;
					rnaseBox.includeInLayout = false;
					rnaseBox.visible = false;
				} else {
					dnaseBox.includeInLayout = false;
					dnaseBox.visible = false;
					rnaseBox.includeInLayout = false;
					rnaseBox.visible = false;
				}
			}

			parentDocument.samplesView.initializeSamplesGrid();

			if (parentDocument.isSequenomState() || parentDocument.isClinicalSequenomState()) {
				return;
			}
			// Select the default organism on sample setup if the request category specifies one
			if (!parentDocument.isQCState()) {
				if (sampleOrganismCombo.selectedItem == null || sampleOrganismCombo.selectedItem.@value == '') {
					var requestCategory:Object = parentDocument.getRequestCategory();
					if (requestCategory.@idOrganism != '') {
						var organism:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.OrganismLite', requestCategory.@idOrganism);
						if (organism is XMLList) {
							this.sampleOrganismCombo.selectedItem = organism[0];
							return;

						} else {
							this.sampleOrganismCombo.selectedItem = organism;
							return;
						}
					}

				}
			}

		}

		private function getSampleType():void {
			sampleType = null;
			if (sampleTypeRadioGroup.selectedValue != null && sampleTypeRadioGroup.selectedValue != '') {
				sampleType = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SampleType', sampleTypeRadioGroup.selectedValue);
			}
		}


		private function pickOrganism():void {

			// kludge because close event is fired twice for combo box.
			if (addOrganismOpen) {
				return;
			}

			if (sampleOrganismCombo.selectedItem == null && sampleOrganismCombo.text != null && sampleOrganismCombo.text.length > 0 && sampleOrganismCombo.text != sampleOrganismCombo.prompt) {
				addOrganismOpen = true;
				var oName:String = sampleOrganismCombo.text;
				sampleOrganismCombo.text = '';
				propagateOtherSampleOrganism();
				callLater(addOrganism, [oName]);
				return;
			}

			// Clear other organism if non 'Other' selected
			if (this.sampleOrganismCombo.selectedItem == null || sampleOrganismCombo.selectedItem.@display != 'Other') {
				otherOrganism.text = '';
				propagateOtherSampleOrganism();
			}

			if (parentDocument.annotationView != null && parentDocument.annotationView.visible) {
				parentDocument.annotationView.onPropertyRefreshed(null);
			}

			if (parentDocument.isMicroarrayState()) {
				parentDocument.hybSetupView.checkForSlideProductWarning();
			}

			propagateSampleOrganism();
			parentDocument.samplesView.initializeSamplesGrid();


			if (this.currentState == 'SolexaSetupState' ||
					this.currentState == 'SolexaSetupPreppedState' ||
					this.currentState == 'SolexaAmendState' ||
					this.currentState == 'SolexaAmendPreppedState' ||
					this.currentState == 'MDMiSeqState') {
				parentDocument.filteredGenomeBuildList.refresh();
				//selectDefaultGenomeBuild();
			}

		}

		private function pickContainerType():void {
			var minSamplesString:String = parentApplication.getProperty(parentApplication.PROPERTY_MIN_SAMPLES_ALLOWED_FOR_PLATE_SUBMISSION);
			var minSamplesAllowedForPlate:int = 32;
			if (minSamplesString != null && parseInt(minSamplesString) >= 0) {
				minSamplesAllowedForPlate = parseInt(minSamplesString);
			}
			if (this.numberOfSamples.text == '') {
				this.containerTypeRadioGroup.selectedValue = "TUBE";
				this.containerTypePlate.enabled = true;
				this.containerTypeTube.enabled = true;
			} else {
				var sampleCount:int = parseInt(numberOfSamples.text);
				if (sampleCount < minSamplesAllowedForPlate) {
					this.containerTypeRadioGroup.selectedValue = "TUBE";
					this.containerTypeTube.enabled = true;
					this.containerTypePlate.enabled = false;
				} else {
					this.containerTypePlate.enabled = true;
					this.containerTypeTube.enabled = true;
				}
			}
			callLater(onContainerTypeChange);

		}

		private function onContainerTypeChange():void {
			parentDocument.request.@containerType = this.containerTypeRadioGroup.selectedValue;
			if (containerTypeRadioGroup.selectedValue == 'PLATE') {
				if (this.capSeqNumPlatesRadioGroup.selectedValue == null || this.capSeqNumPlatesRadioGroup.selectedValue == '') {
					this.capSeqNumPlatesRadioGroup.selectedValue = "1";
					this.onCapSeqNumPlatesChanged();
				}
			} else {
				this.capSeqNumPlatesRadioGroup.selection = null;
				this.capSeqNumPlatesRadioGroup.selectedValue = null;
				showFourPlateWarning();
			}
			parentDocument.samplesView.propagateContainerType(containerTypeRadioGroup.selectedValue == 'PLATE' ? 'Plate' : 'Tube');
			parentDocument.samplesView.initializeSamplesGrid();
			parentDocument.samplesView.showHideColumns();

			if (parentDocument.theTab.contains(parentDocument.confirmView)) {
				parentDocument.confirmView.showHideColumns();
			}
		}

		private function onCapSeqNumPlatesChanged():void {
			if (capSeqNumPlatesRadioGroup.selectedValue != null) {
				parentDocument.numCapSeqPlates = this.capSeqNumPlatesRadioGroup.selectedValue;
				showFourPlateWarning();
				parentDocument.samplesView.initializeSamplesGrid();
			}
		}

		private function showFourPlateWarning():void {
			if (this.containerTypeRadioGroup.selectedValue == 'PLATE' && parentDocument.numCapSeqPlates == 4) {
				this.fourPlateWarningLabel.visible = true;
				this.fourPlateWarningLabel.includeInLayout = true;
			} else {
				this.fourPlateWarningLabel.visible = false;
				this.fourPlateWarningLabel.includeInLayout = false;
			}
		}

		private function onSequenomContainerTypeChange():void {
			parentDocument.request.@containerType = this.sequenomContainerTypeRadioGrp.selectedValue;
			if (sequenomContainerTypeRadioGrp.selectedValue == 'PLATE') {
				if (this.sequenomNumSourcePlates.text == null || this.sequenomNumSourcePlates.text == '') {
					this.sequenomNumSourcePlates.text = "1";

					this.onSequenomNumSourcePlatesChanged();
				}
			} else {
				// SET ALL PLATE NAMES TO '' AND PROPOGATE TO THE SAMPLES
				this.sequenomNumSourcePlates.text = '';
			}
			parentDocument.samplesView.propagateContainerType(sequenomContainerTypeRadioGrp.selectedValue == 'PLATE' ? 'Plate' : 'Tube');
			parentDocument.samplesView.initializeSamplesGrid();
			parentDocument.samplesView.showHideColumns();
			if (parentDocument.theTab.contains(parentDocument.confirmView)) {
				parentDocument.confirmView.showHideColumns();
			}
		}

		public function getSamplePrimerList():String {
			var list:String = "";
			list = addPrimerToList(list, this.primer1Combo);
			list = addPrimerToList(list, this.primer2Combo);
			list = addPrimerToList(list, this.primer3Combo);
			list = addPrimerToList(list, this.primer4Combo);
			list = addPrimerToList(list, this.primer5Combo);
			list = addPrimerToList(list, this.primer6Combo);
			return list;
		}

		private function addPrimerToList(list:String, combo:ComboBox):String {
			if (combo.selectedItem != null && combo.selectedItem.@value != '') {
				if (list.length > 0) {
					list += ", ";
				}
				list += combo.selectedItem.@display;
			}
			return list;
		}

		private function getPlateName(idx:int):String {
			if (idx == 1) return this.cherryPlate1Name.text
			if (idx == 2) return this.cherryPlate2Name.text
			if (idx == 3) return this.cherryPlate3Name.text
			if (idx == 4) return this.cherryPlate4Name.text
			if (idx == 5) return this.cherryPlate5Name.text
			if (idx == 6) return this.cherryPlate6Name.text
			if (idx == 7) return this.cherryPlate7Name.text
			if (idx == 8) return this.cherryPlate8Name.text
			if (idx == 9) return this.cherryPlate9Name.text
			if (idx == 10) return this.cherryPlate10Name.text
			if (idx == 11) return this.cherryPlate11Name.text
			if (idx == 12) return this.cherryPlate12Name.text
			return '';
		}

		public function onCherryNumSourcePlatesChanged():void {
			var numPlates:int = Number(this.cherryNumSourcePlates.text);
			this.cherryPlate1Box.visible = (numPlates > 0);
			this.cherryPlate2Box.visible = (numPlates > 1);
			this.cherryPlate3Box.visible = (numPlates > 2);
			this.cherryPlate4Box.visible = (numPlates > 3);
			this.cherryPlate5Box.visible = (numPlates > 4);
			this.cherryPlate6Box.visible = (numPlates > 5);
			this.cherryPlate7Box.visible = (numPlates > 6);
			this.cherryPlate8Box.visible = (numPlates > 7);
			this.cherryPlate9Box.visible = (numPlates > 8);
			this.cherryPlate10Box.visible = (numPlates > 9);
			this.cherryPlate11Box.visible = (numPlates > 10);
			this.cherryPlate12Box.visible = (numPlates > 11);
			parentDocument.samplesView.initializeSamplesGrid();
			while (parentDocument.cherryPlateListCollection.length > numPlates) {
				parentDocument.cherryPlateListCollection.removeItemAt(parentDocument.cherryPlateListCollection.length - 1);
			}
			var startIdx:int = parentDocument.cherryPlateListCollection.length;
			for (var idx:int = startIdx; idx < numPlates + 1; idx++) {
				var node:XML = new XML("<Plate name='" + getPlateName(idx) + "'/>");
				parentDocument.cherryPlateListCollection.addItem(node);
			}
			parentDocument.cherryPlateList = parentDocument.cherryPlateListCollection.copy();
		}

		private function onCherryPlateNameChanged():void {
			var numPlates:int = Number(this.cherryNumSourcePlates.text);
			var idx:int = 0;
			for each (var plate:Object in parentDocument.cherryPlateListCollection) {
				plate.@name = getPlateName(idx);
				idx++;
			}

			parentDocument.samplesView.initializeSamplesGrid();
			parentDocument.cherryPlateList = parentDocument.cherryPlateListCollection.copy();
		}

		public function updateIScanPlateList(plateList:XMLList):void {
			if (plateList == null || parentDocument == null) {
				return;
			}
			parentDocument.iScanPlateList = plateList;
			parentDocument.iScanPlateListCollection.source = plateList;
			parentDocument.numIScanPlates = plateList.length();
			this.iScanNumSourcePlates.text = plateList.length();
			this.updatePlateNames();
			this.onIScanNumSourcePlatesChanged();
		}

		public function updatePlateNames():void {
			var idx:int = 1;
			for each (var plate:Object in parentDocument.iScanPlateListCollection) {
				setIScanPlateName(idx, plate.@name);
				idx++;
			}
		}

		public function getIScanPlateName(idx:int):String {
			if (idx == 1) return this.iScanPlate1Name.text
			if (idx == 2) return this.iScanPlate2Name.text
			if (idx == 3) return this.iScanPlate3Name.text
			if (idx == 4) return this.iScanPlate4Name.text
			if (idx == 5) return this.iScanPlate5Name.text
			if (idx == 6) return this.iScanPlate6Name.text
			if (idx == 7) return this.iScanPlate7Name.text
			if (idx == 8) return this.iScanPlate8Name.text
			if (idx == 9) return this.iScanPlate9Name.text
			if (idx == 10) return this.iScanPlate10Name.text
			if (idx == 11) return this.iScanPlate11Name.text
			if (idx == 12) return this.iScanPlate12Name.text
			return '';
		}

		public function setIScanPlateName(idx:int, name:String):void {
			if (idx == 1) this.iScanPlate1Name.text = name;
			if (idx == 2) this.iScanPlate2Name.text = name;
			if (idx == 3) this.iScanPlate3Name.text = name;
			if (idx == 4) this.iScanPlate4Name.text = name;
			if (idx == 5) this.iScanPlate5Name.text = name;
			if (idx == 6) this.iScanPlate6Name.text = name;
			if (idx == 7) this.iScanPlate7Name.text = name;
			if (idx == 8) this.iScanPlate8Name.text = name;
			if (idx == 9) this.iScanPlate9Name.text = name;
			if (idx == 10) this.iScanPlate10Name.text = name;
			if (idx == 11) this.iScanPlate11Name.text = name;
			if (idx == 12) this.iScanPlate12Name.text = name;
		}

		public function getSequenomPlateName(idx:int):String {
			if (idx == 1) return this.sequenomPlate1Name.text
			if (idx == 2) return this.sequenomPlate2Name.text
			if (idx == 3) return this.sequenomPlate3Name.text
			if (idx == 4) return this.sequenomPlate4Name.text
			if (idx == 5) return this.sequenomPlate5Name.text
			if (idx == 6) return this.sequenomPlate6Name.text
			if (idx == 7) return this.sequenomPlate7Name.text
			if (idx == 8) return this.sequenomPlate8Name.text
			if (idx == 9) return this.sequenomPlate9Name.text
			if (idx == 10) return this.sequenomPlate10Name.text
			if (idx == 11) return this.sequenomPlate11Name.text
			if (idx == 12) return this.sequenomPlate12Name.text
			return '';
		}

		public function setSequenomPlateName(idx:int, name:String):void {
			if (idx == 1) this.sequenomPlate1Name.text = name;
			if (idx == 2) this.sequenomPlate2Name.text = name;
			if (idx == 3) this.sequenomPlate3Name.text = name;
			if (idx == 4) this.sequenomPlate4Name.text = name;
			if (idx == 5) this.sequenomPlate5Name.text = name;
			if (idx == 6) this.sequenomPlate6Name.text = name;
			if (idx == 7) this.sequenomPlate7Name.text = name;
			if (idx == 8) this.sequenomPlate8Name.text = name;
			if (idx == 9) this.sequenomPlate9Name.text = name;
			if (idx == 10) this.sequenomPlate10Name.text = name;
			if (idx == 11) this.sequenomPlate11Name.text = name;
			if (idx == 12) this.sequenomPlate12Name.text = name;
		}

		public function onIScanNumSourcePlatesChanged():void {
			var numPlates:int = Number(this.iScanNumSourcePlates.text);
			parentDocument.numIScanPlates = numPlates;
			this.iScanPlate1Box.visible = (numPlates > 0);
			this.iScanPlate2Box.visible = (numPlates > 1);
			this.iScanPlate3Box.visible = (numPlates > 2);
			this.iScanPlate4Box.visible = (numPlates > 3);
			this.iScanPlate5Box.visible = (numPlates > 4);
			this.iScanPlate6Box.visible = (numPlates > 5);
			this.iScanPlate7Box.visible = (numPlates > 6);
			this.iScanPlate8Box.visible = (numPlates > 7);
			this.iScanPlate9Box.visible = (numPlates > 8);
			this.iScanPlate10Box.visible = (numPlates > 9);
			this.iScanPlate11Box.visible = (numPlates > 10);
			this.iScanPlate12Box.visible = (numPlates > 11);

			parentDocument.iScanPlateListCollection.removeAll();

			var startIdx:int = 1;
			for (var idx:int = startIdx; idx < numPlates + 1; idx++) {
				var node:XML = new XML("<Plate name='" + getIScanPlateName(idx) + "'/>");
				parentDocument.iScanPlateListCollection.addItem(node);
			}
			parentDocument.iScanPlateList = parentDocument.iScanPlateListCollection.copy();
		}

		public function onSequenomNumSourcePlatesChanged():void {
			var numPlates:int = Number(this.sequenomNumSourcePlates.text);
			parentDocument.numIScanPlates = numPlates;
			this.sequenomPlate1Box.visible = (numPlates > 0);
			this.sequenomPlate2Box.visible = (numPlates > 1);
			this.sequenomPlate3Box.visible = (numPlates > 2);
			this.sequenomPlate4Box.visible = (numPlates > 3);
			this.sequenomPlate5Box.visible = (numPlates > 4);
			this.sequenomPlate6Box.visible = (numPlates > 5);
			this.sequenomPlate7Box.visible = (numPlates > 6);
			this.sequenomPlate8Box.visible = (numPlates > 7);
			this.sequenomPlate9Box.visible = (numPlates > 8);
			this.sequenomPlate10Box.visible = (numPlates > 9);
			this.sequenomPlate11Box.visible = (numPlates > 10);
			this.sequenomPlate12Box.visible = (numPlates > 11);

			parentDocument.iScanPlateListCollection.removeAll();

			var startIdx:int = 1;
			for (var idx:int = startIdx; idx < numPlates + 1; idx++) {
				var node:XML = new XML("<Plate name='" + getSequenomPlateName(idx) + "'/>");
				parentDocument.iScanPlateListCollection.addItem(node);
			}
			parentDocument.iScanPlateList = parentDocument.iScanPlateListCollection.copy();
		}

		public function propogatePlateNames(plateNumber:int):void {
			if (!parentDocument.isIScanState() && !parentDocument.isSequenomState()) {
				return;
			}
			if (plateNumber < 0 || plateNumber > 11) {
				return;
			}
			var startInd:int = plateNumber * 96;
			for (var psIdx:int = startInd; psIdx < startInd + 96; psIdx++) {
				var y:int = psIdx / 96;
				y = y + 1;
				var plateSample:Object = parentDocument.samples.getItemAt(psIdx);
				plateSample.@plateName = parentDocument.isIScanState() ? getIScanPlateName(y) : getSequenomPlateName(y);
			}
		}

		private function onIScanPlateNameChanged(plateNumber:int):void {
			var numPlates:int = Number(this.iScanNumSourcePlates.text);
			var idx:int = 1;
			for each (var plate:Object in parentDocument.iScanPlateListCollection) {
				plate.@name = getIScanPlateName(idx);
				idx++;
			}
			propogatePlateNames(plateNumber);
			parentDocument.iScanPlateList = parentDocument.iScanPlateListCollection.copy();
			parentDocument.samplesView.initializeSamplesGrid();

		}

		private function onSequenomPlateNameChanged(plateNumber:int):void {
			var numPlates:int = Number(this.sequenomNumSourcePlates.text);
			var idx:int = 1;
			for each (var plate:Object in parentDocument.iScanPlateListCollection) {
				plate.@name = getSequenomPlateName(idx);
				idx++;
			}
			propogatePlateNames(plateNumber);
			parentDocument.iScanPlateList = parentDocument.iScanPlateListCollection.copy();
			parentDocument.samplesView.initializeSamplesGrid();
		}

		private function onAssayCheckBoxChanged():void {
			parentDocument.selectedAssaysCollection.removeAll();
			for (var x:int = 0; x < assayCheckBox.length; x++) {
				if (assayCheckBox[x].selected) {
					var assay:Object = parentDocument.assayCollection.getItemAt(x);
					var assayXML:XML = new XML("<Assay name='" + assay.@display + "' id='" + assay.@value + "'/>");
					parentDocument.selectedAssaysCollection.addItem(assayXML);
				}
			}

			parentDocument.samplesView.initializeSamplesGrid();
		}

		private function onIncludeBisulfideConversionCheckBoxChanged():void {
			parentDocument.request.@includeBisulfideConversion = bisulfideConversionCheckBox.selected ? 'Y' : 'N';

			if (this.checkSampleSetupCompleteness()) {
				parentDocument.samplesView.initializeSamplesGrid();
			}
		}

		private function onIncludeQubitConcentrationCheckBoxChanged():void {
			parentDocument.request.@includeQubitConcentration = QubitConcentrationCheckBox.selected ? 'Y' : 'N';

			if (this.checkSampleSetupCompleteness()) {
				parentDocument.samplesView.initializeSamplesGrid();
			}
		}

		private function onBMPPickupCheckBox():void {
			parentDocument.request.@includeQubitConcentration = BMPPickupCheckBox.selected ? 'Y' : 'N';

			if (this.checkSampleSetupCompleteness()) {
				parentDocument.samplesView.initializeSamplesGrid();
			}
		}

		private function onSampleSourceChanged():void {
			propagateSampleSource();
			if (this.checkSampleSetupCompleteness()) {
				parentDocument.samplesView.initializeSamplesGrid();
			}
		}

		private function onAppDescChanged():void {
			if (this.radioGroupSeqApp.selectedValue != null && this.radioGroupSeqApp.selectedValue == "OTHER") {
				parentDocument.request.@applicationDescription = this.sequenomApplicationDesc != null ? this.sequenomApplicationDesc.text : "";
				if (this.sequenomApplicationDesc.text != '') {
					this.sequenomApplicationDesc.styleName = "normalBox";
				} else {
					this.sequenomApplicationDesc.styleName = "requiredBox";
				}
			} else if (this.radioGroupSeqApp.selectedValue != null) {
				parentDocument.request.@applicationDescription = "";
			}
			if (this.checkSampleSetupCompleteness()) {
				parentDocument.samplesView.initializeSamplesGrid();
			}
		}

		private function onGenAppDescChanged():void {
			if (this.radioGroupApp.selectedValue != null && this.radioGroupApp.selectedValue == "OTHER") {
				parentDocument.request.@applicationDescription = this.applicationDesc != null ? this.applicationDesc.text : "";
				if (this.applicationDesc.text != '') {
					this.applicationDesc.styleName = "normalBox";
				} else {
					this.applicationDesc.styleName = "requiredBox";
				}
			} else if (this.radioGroupApp.selectedValue != null) {
				parentDocument.request.@applicationDescription = "";
			}
			if (this.checkSampleSetupCompleteness()) {
				parentDocument.samplesView.initializeSamplesGrid();
			}
		}

		private function pickIsolationType():void {
			if (this.extractionTypeRadioGroup.selectedValue == this.DNA) {
				parentDocument.request.@coreToExtractDNA = 'Y';
				parentDocument.request.@codeIsolationPrepType = isolationTypeRadioGroup.selectedValue != null ? isolationTypeRadioGroup.selectedValue : '';
			} else {
				parentDocument.request.@codeIsolationPrepType = isolationTypeRadioGroup.selectedValue != null ? isolationTypeRadioGroup.selectedValue : '';
				parentDocument.request.@coreToExtractDNA = '';
			}

			if (this.checkSampleSetupCompleteness()) {
				parentDocument.samplesView.initializeSamplesGrid();
				parentDocument.samplesView.showHideColumns();
				if (parentDocument.theTab.contains(parentDocument.confirmView)) {
					parentDocument.confirmView.showHideColumns();
				}
			}
		}

		public function pickSequenomType():void {
			if (this.bisulfideConversionBox != null) {
				if (parentDocument.getRequestCategory() != null && parentDocument.getRequestCategory().@codeRequestCategory == 'SEQEPI') {
					this.bisulfideConversionBox.visible = true;
					this.bisulfideConversionBox.includeInLayout = true;
				} else {
					this.bisulfideConversionBox.visible = false;
					this.bisulfideConversionBox.includeInLayout = false;
					parentDocument.request.@includeBisulfideConversion = 'N';
				}
			} else {
				parentDocument.request.@includeBisulfideConversion = 'N';
			}
		}

		private function addOrganism(oName:String):void {
			var addOrganismWindow:AddOrganismWindow = AddOrganismWindow(PopUpManager.createPopUp(parentApplication.theBody, AddOrganismWindow, true));
			PopUpManager.centerPopUp(addOrganismWindow);
			addOrganismWindow.oName.text = oName;

			this.systemManager.removeEventListener(OrganismAddEvent.ORGANISM_ADD_EVENT, onOrganismRefreshed);
			this.systemManager.addEventListener(OrganismAddEvent.ORGANISM_ADD_EVENT, onOrganismRefreshed);

			addOrganismOpen = false;
		}

		private function onOrganismRefreshed(event:OrganismAddEvent):void {
			this.sampleOrganismCombo.dataProvider = parentApplication.activeOrganismList;
			this.systemManager.removeEventListener(OrganismAddEvent.ORGANISM_ADD_EVENT, onOrganismRefreshed);

			for each (var o:Object in sampleOrganismCombo.dataProvider) {
				if (o.@organism == event.nameAdded) {
					sampleOrganismCombo.selectedItem = o;
					break;
				}
			}
		}

		private function filterChipTypeList(item:Object):Boolean {
			if (selectedQCApplication == null) {
				return false;
			}
			var codeApplication:String = this.selectedQCApplication.@codeApplication;
			if (item.@value == "" || item.@price == '' || item.@isActive != 'Y' || item.@codeApplication != codeApplication) {
				return false;
			}

			return true;
		}

		public function loadPriceList(idLab:String, codeRequestCategory:String):void {
			if (idLab != null && codeRequestCategory != null && (loadedPriceIdLab != idLab || loadedPriceCodeRequestCategory != codeRequestCategory)) {
				priceMap = new Dictionary();
				var parms:Object = new Object();
				parms.idLab = idLab;
				parms.codeRequestCategory = codeRequestCategory;
				getQCChipTypePriceList.send(parms);
				selectedPriceIdLab = idLab;
				selectedPriceCodeRequestCategory = codeRequestCategory;
			}
		}

		private function onGetQCChipTypePriceList(event:ResultEvent):void {
			priceMap = new Dictionary();
			for each (var price:Object in getQCChipTypePriceList.lastResult.Price) {
				var key:String = buildChipTypeKey(price);
				priceMap[key] = currencyFormatter.format(price.@price.toString());
			}

			loadedPriceIdLab = selectedPriceIdLab;
			loadedPriceCodeRequestCategory = selectedPriceCodeRequestCategory;
			initChipTypeList();
		}

		private function initChipTypeList():void {
			filteredChipTypeList = new XMLListCollection();
			for each(var i:Object in parentApplication.dictionaryManager.getEntries('hci.gnomex.model.BioanalyzerChipType')) {
				var item:Object = i.copy();
				var key:String = buildChipTypeKey(item);
				if (priceMap != null && priceMap[key] != null) {
					item.@price = priceMap[key];
				} else {
					item.@price = "";
				}

				filteredChipTypeList.addItem(item);
			}
			var chipSort:Sort = new Sort();
			chipSort.compareFunction = sortChipType;
			filteredChipTypeList.filterFunction = filterChipTypeList;
			filteredChipTypeList.refresh();
			filteredChipTypeList.sort = chipSort;
			filteredChipTypeList.refresh();
		}

		private function sortChipType(obj1:Object, obj2:Object, fields:Array = null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var order1:int = obj1.@sortOrder;
				var order2:int = obj2.@sortOrder;
				var disp1:String = obj1.@display;
				var disp2:String = obj2.@display;

				if (obj1.@value == '') {
					return -1;
				} else if (obj2.@value == '') {
					return 1;
				} else {
					if (order1 < order2) {
						return -1;
					} else if (order1 > order2) {
						return 1;
					} else {
						if (disp1 < disp2) {
							return -1;
						} else if (disp1 > disp2) {
							return 1;
						} else {
							return 0;
						}
					}
				}
			}
		}

		private function setReagentBoxStyle(styleName:String):void {
			this.reagentBox.styleName = styleName;
			this.reagentInput.styleName = styleName;
		}

		private function setBufferBoxStyle(styleName:String):void {
			this.elutionBox.styleName = styleName;
			this.elutionBufferInput.styleName = styleName;
		}
		]]>
	</mx:Script>
	<mx:XMLListCollection id="primerCollection" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Primer').DictionaryEntry.(@display != '')}"/>
	<mx:NumberValidator enabled="true" 
						id="numberOfSamplesValidator" source="{numberOfSamples}" property="text" 
						requiredFieldError="Please enter the number of samples you are submitting."
						required="true" 
						lowerThanMinError="You must submit at least 1 sample." minValue="1" allowNegative="false" domain="int" maxValue="384" />	
	<mx:NumberValidator id="organismValidator"
						source="{this.sampleOrganismCombo}"
						lowerThanMinError="This field is required."
						property="selectedIndex"
						minValue="0" />
	<mx:NumberValidator id="sampleTypeValidator"
						source="{this.sampleTypeRadioGroup}"						
						property="selectedValue"						
						minValue = "0"
						required="true"						
						/>
	<mx:NumberValidator id="sampleDropOffLocationValidator"
						source="{this.sampleDropOffLocationCombo}"
						lowerThanMinError="This field is required."
						property="selectedIndex"
						minValue="1" />
	<mx:StringValidator	id="samplePrepValidator"
						source="{this.otherSamplePrepMethod}"
						property="text"
						required ="true"
						/>
	
	<mx:CurrencyFormatter id="dollarFormatter" currencySymbol="$" precision="2" decimalSeparatorTo="." thousandsSeparatorTo="," useThousandsSeparator="true"/> 
	
	<mx:VBox width="100%" height="100%" verticalGap="2" horizontalScrollPolicy="off" verticalScrollPolicy="off" >
		<mx:VBox paddingTop="2" verticalGap="5" id="sampleSetupContainer" width="100%">
			<mx:HBox horizontalGap="0" id="hbox3" verticalAlign="middle" width="100%">
				<util:ContextHelp context1="SampleDetailsNumSamples" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Number of Samples Help"
								  label="(1) How many samples will be sequenced in this experiment order?" labelPlacement="left" id="label5" width="350"/>
				<mx:TextInput width="40" id="numberOfSamples" >
					<mx:focusOut>onNumberOfSamplesChanged()</mx:focusOut>
				</mx:TextInput>
				<mx:HBox width="100%">
					<mx:Text id="sampleSizeWarning" fontStyle="italic" fontSize="10"  textAlign="left" width="100%" color="green"/>
				</mx:HBox>
			</mx:HBox>
			<mx:HBox horizontalGap="0" verticalAlign="top" id="sampleTypeHBox" width="100%">
				<util:ContextHelp context1="SampleDetailsSampleCategory" context2="{parentDocument.coreFacility.@idCoreFacility}"
								  context3="{(parentDocument.requestType == 'MISEQ') ? 'HISEQ' : parentDocument.requestType}"
								  showEdit="{parentApplication.isAdminState}" title="Sample Category Help"
								  label="(2) Which category best describes your samples?" labelPlacement="left" id="label8" width="350"/>
				<mx:RadioButtonGroup id = "sampleTypeRadioGroup" />
				<mx:HBox verticalGap="0" paddingTop="0" paddingBottom="0" styleName="requiredBox" id="sampleTypeDNARNAHBox">
					<mx:VBox verticalGap="0" paddingTop="0" paddingBottom="0" id="sampleTypeBox">
						<mx:Label text="DNA" styleName="formLabelLarge"
								  visible="{parentDocument.filteredSampleTypeListDna.length > 0 &amp;&amp; parentDocument.filteredSampleTypeListRna.length > 0}"
								  includeInLayout="{parentDocument.filteredSampleTypeListDna.length > 0 &amp;&amp; parentDocument.filteredSampleTypeListRna.length > 0}"/>
						<mx:Repeater id="sampleTypeDnaRepeater" dataProvider="{parentDocument.filteredSampleTypeListDna}">
							<mx:RadioButton id="sampleTypeDnaBtn" groupName="sampleTypeRadioGroup"
											label="{sampleTypeDnaRepeater.currentItem.@display}"
											value="{sampleTypeDnaRepeater.currentItem.@value}"
											click="{pickSampleType()}" fontSize="11" paddingTop="0" paddingBottom="0"
											width="250" />
						</mx:Repeater>
						<mx:RadioButton id="sampleTypeDNANull" groupName="sampleTypeRadioGroup"
										label="" value="{null}" width="0" height="0" visible="false" includeInLayout="false" />
					</mx:VBox>
					<mx:VBox verticalGap="0" paddingTop="0" paddingBottom="0">
						<mx:Label text="RNA" styleName="formLabelLarge"
								  visible="{parentDocument.filteredSampleTypeListRna.length > 0 &amp;&amp; parentDocument.filteredSampleTypeListDna.length > 0}"
								  includeInLayout="{parentDocument.filteredSampleTypeListRna.length > 0 &amp;&amp; parentDocument.filteredSampleTypeListDna.length > 0}"/>
						<mx:Repeater id="sampleTypeRnaRepeater" dataProvider="{parentDocument.filteredSampleTypeListRna}">
							<mx:RadioButton id="sampleTypeRnaBtn" groupName="sampleTypeRadioGroup"
											label="{sampleTypeRnaRepeater.currentItem.@display}"
											value="{sampleTypeRnaRepeater.currentItem.@value}"
											click="{pickSampleType()}" fontSize="11" paddingTop="0" paddingBottom="0"
											width="250" />
						</mx:Repeater>
					</mx:VBox>
				</mx:HBox>
				<mx:TextArea id="sampleTypeNotes"
							 htmlText="{sampleType.@notes}"
							 editable="false"
							 textAlign="left"
							 borderStyle="none"
							 visible="{sampleTypeRadioGroup.selectedValue != null &amp;&amp; sampleTypeRadioGroup.selectedValue != '' &amp;&amp; sampleType != null &amp;&amp; sampleType.@notes != null &amp;&amp; sampleType.@notes != ''}"
							 includeInLayout="{sampleTypeRadioGroup.selectedValue != null &amp;&amp; sampleTypeRadioGroup.selectedValue != '' &amp;&amp; sampleType != null &amp;&amp; sampleType.@notes != null &amp;&amp; sampleType.@notes != ''}"
							 width="250" height="100%"
							 paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0"
							 borderThickness="0"
							 styleName="readOnly"
							 backgroundColor="#FFFFFF"/>
			</mx:HBox>
			<mx:HBox horizontalGap="0" id="sampleOrganismContainer" paddingRight="4" verticalAlign="middle">
				<util:ContextHelp context1="SampleDetailsOrganism" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Sample Organism Help"
								  label="(3) Which organism is the source for these samples?" labelPlacement="left" id="label7" width="350"/>
				<renderers:FilterComboBox labelField="@combinedName"
										  prompt="Organism..."
										  close="pickOrganism()"
										  id="sampleOrganismCombo"
										  dataProvider="{parentApplication.activeOrganismList}"
										  width="{sampleOrganismCombo.selectedItem != null &amp;&amp; sampleOrganismCombo.selectedItem.@display == 'Other' ? 75 : 300}"/>
				<mx:Label text="Please specify" paddingLeft="6">
					<mx:visible>{sampleOrganismCombo.selectedItem != null &amp;&amp; sampleOrganismCombo.selectedItem.@display == 'Other'}</mx:visible>
				</mx:Label>
				<mx:TextInput width="200" id="otherOrganism" focusOut="{propagateOtherSampleOrganism();checkSampleSetupCompleteness()}" maxChars="200">
					<mx:visible>{sampleOrganismCombo.selectedItem != null &amp;&amp; sampleOrganismCombo.selectedItem.@display == 'Other'}</mx:visible>
				</mx:TextInput>
			</mx:HBox>
			<mx:HBox horizontalGap="0" id="samplePurificationContainer" paddingRight="4" verticalAlign="top">
				<mx:Text text="(4) Please provide details on Sample Purification methods:" width="300"/>
				<mx:VBox verticalAlign="middle">
					<mx:HBox styleName="requiredBox" id="reagentBox">
						<mx:Label text="(a) Specify the kit or reagents used for purification of the samples you will be submitting"/>
					</mx:HBox>
					<mx:VBox>
						<mx:HBox>
							<mx:TextInput styleName="requiredBox" id="reagentInput" focusOut="{propagateReagent(); this.checkSampleSetupCompleteness(); reagentInput.text.length > 0 ? this.setReagentBoxStyle('normalBox') : setReagentBoxStyle('requiredBox')}" width="800" maxChars="100"/>
						</mx:HBox>
					</mx:VBox>
					<mx:HBox styleName="requiredBox" id="elutionBox">
						<mx:Label text="(b) Specify the Elution Buffer used for purification of the samples you will be submitting"/>
					</mx:HBox>
					<mx:VBox>
						<mx:HBox>
							<mx:TextInput styleName="requiredBox" id="elutionBufferInput" focusOut="{propagateElutionBuffer(); this.checkSampleSetupCompleteness(); elutionBufferInput.text.length > 0 ? this.setBufferBoxStyle('normalBox') : this.setBufferBoxStyle('requiredBox')}" width="800" maxChars="100"/>
						</mx:HBox>
					</mx:VBox>
					<mx:HBox styleName="requiredBox" id="dnaseBox" includeInLayout="false" visible="false">
						<mx:Label text="(c) Click if RNA samples were treated with DNase" id="dnaseLabel"/>
						<mx:CheckBox id="dnaseCheckBox" click="{propagateDnase()}" change="{this.checkSampleSetupCompleteness()}"/>
					</mx:HBox>
					<mx:HBox styleName="requiredBox" id="rnaseBox" includeInLayout="false" visible="false">
						<mx:Label text="(c) Click if DNA samples were treated with RNase" id="rnaseLabel"/>
						<mx:CheckBox id="rnaseCheckBox" click="{propagateRnase()}" change="{this.checkSampleSetupCompleteness()}"/>
					</mx:HBox>
				</mx:VBox>
			</mx:HBox>
			<mx:HBox horizontalGap="0" id="leftOverSampleContainer" paddingRight="4" verticalAlign="top">
				<mx:Text text="(5) Would you like to retrieve leftover sample from the core facility following completion of the work?" width="300"/>
				<mx:VBox styleName="requiredBox" id="retrieveSamplesBox">
					<mx:RadioButtonGroup id="retrieveSamplesRadioGroup" change="{propagateKeepSamples(); this.checkSampleSetupCompleteness(); retrieveSamplesRadioGroup.selectedValue != null ? retrieveSamplesBox.styleName = 'normalBox' : retrieveSamplesBox.styleName = 'requiredBox' }"/>
					<mx:RadioButton groupName="retrieveSamplesRadioGroup" value="Y" label="Yes (leftover samples will be retained for 90 days)" id="keep"/>
					<mx:RadioButton groupName="retrieveSamplesRadioGroup" value="N" label="No (leftover samples will be discarded)" id="dontKeep"/>
				</mx:VBox>
			</mx:HBox>
			<mx:HBox horizontalGap="0" id="samplePrepContainer" paddingRight="4" verticalAlign="middle">
				<util:ContextHelp context1="sampleDetailsNucleicAcidExtraction" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Nucleic Acid Extraction Help"
								  label="(6) Specify the nucleic acid extraction method." labelPlacement="left" id="label2" width="350"/>
				<mx:HBox styleName="requiredBox">
					<mx:TextInput width="300" id="otherSamplePrepMethod"
								  change="{propagateOtherSamplePrepMethod();checkSampleSetupCompleteness();parentDocument.samplesView.initializeSamplesGrid();}"
								  maxChars="50"/>
				</mx:HBox>
			</mx:HBox>
		</mx:VBox>
		<mx:Spacer height="10" />
		<mx:HBox width="100%" id="coreNotesBox">
				<mx:VBox height="140" width="825" id="coreFacilityNoteVBox" verticalGap="0" paddingBottom="2" paddingTop="2" paddingLeft="2" paddingRight="2">
					<util:ContextHelp context1="coreFacilityNoteHelp" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Core Facility Note Help"
									  label="Enter a note for the Core Facility (optional)." labelPlacement="left" id="coreFacilityNoteLabel"/>
					<util:TextAreaWorkaround id="coreFacilityNoteText" text="{parentDocument.request.@corePrepInstructions}"
											 focusOut="parentDocument.request.@corePrepInstructions = coreFacilityNoteText.text"
											 width ="100%" height="100%"/>
				</mx:VBox>
		</mx:HBox>

	</mx:VBox>

	
	<mx:states>
		<mx:State name="QCSetupState">
			<mx:SetProperty target="{sampleOrganismContainer}" name="visible" value="false"/>
			<mx:SetProperty target="{sampleOrganismContainer}" name="includeInLayout" value="false"/>
			<mx:RemoveChild target="{samplePurificationContainer}"/>
			<mx:RemoveChild target="{leftOverSampleContainer}"/>
			<mx:SetProperty target="{label2}" name="label" value="(4) Specify the nucleic acid extraction method. (required)."/>
			<mx:AddChild  relativeTo="{sampleSetupContainer}">
				<mx:VBox id="bioanalyzerContainer" visible="true" width="100%" height="100%">
					<mx:VBox width="100%" horizontalGap="0" id="chipTypeVBox">
						<util:ContextHelp context1="sampleDetailsSamplePooling" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Bioanalyzer Chip Type Help"
										  label="(5) Select a QC Assay." labelPlacement="left" id="bioanalyzerChipTypeLabel" width="350"/>
						<mx:HBox id="chipTypeBox"  width="100%" height="100%" styleName="requiredBoxThick" >							
							<mx:DataGrid width="100%" height="100%" fontSize="10" visible="true" id="bioanalyzerChipTypeGrid"  backgroundAlpha="0"   itemClick="toggleChipTypeCheck(event)">
								<mx:dataProvider>{filteredChipTypeList}</mx:dataProvider>
								<mx:columns>
									<mx:DataGridColumn id = "isSelectedChipType" headerText=" " 
													   width="20" 
													   editable="true"                        	
													   dataField="@isSelected" 
													   editorDataField="selected"
													   itemRenderer="{views.renderers.CheckBoxIsSelectedChipType.create()}" />
									<mx:DataGridColumn headerText="Chip Type" dataField="@bioanalyzerChipType"/>
									<mx:DataGridColumn headerText="Concentration Range" dataField="@concentrationRange"/>
									<mx:DataGridColumn headerText="Max Sample Buffer Strength" dataField="@maxSampleBufferStrength" id="maxSampleBufferStrengthCol"/>
									<mx:DataGridColumn headerText="Cost per Sample" dataField="@price"/>
									<mx:DataGridColumn headerText="Sample Wells per Chip" dataField="@sampleWellsPerChip" id="sampleWellsPerChipCol"/>
									
								</mx:columns>
							</mx:DataGrid>
						</mx:HBox>
					</mx:VBox>
					<mx:HBox width="100%" horizontalAlign="center"  id="hbox5">
						<mx:HBox borderStyle="none" backgroundColor="#ffffff" width="90%" verticalAlign="middle" 
								 horizontalAlign="center" paddingLeft="10" paddingRight="10" paddingBottom="5" paddingTop="5">
							<mx:Text width="100%" id="qcInstructions" styleName="submitNote">									
							</mx:Text>
						</mx:HBox>
					</mx:HBox>
					
				</mx:VBox>
				
			</mx:AddChild>
			<mx:SetProperty target="{label5}" name="label" value="(2) How many samples will be sequenced in this experiment order?"/>
			<mx:SetProperty target="{label8}" name="label" value="(3) Which category best describes your samples?"/>
			<mx:SetProperty target="{label2}" name="label">
				<mx:value>(6) Specify the nucleic acid extraction method. (required)</mx:value>
			</mx:SetProperty>
			<mx:SetProperty target="{label5}" name="width" value="340"/>
			<mx:SetProperty target="{label2}" name="width" value="340"/>
			<mx:SetProperty target="{label8}" name="width" value="340"/>
			<mx:AddChild relativeTo="{hbox3}" position="before">
				<mx:HBox width="100%" horizontalGap="0">
					<util:ContextHelp context1="sampleDetailsQCApplication" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Sample Quality Experiment Type Help"
									  label="(1) Select a sample quality Experiment Type." labelPlacement="left" id="labelQCApplication" width="350"/>
					<mx:VBox height="100%" verticalGap="0" paddingLeft="2" paddingRight="2" paddingBottom="0" paddingTop="0" styleName="requiredBox" id="qcAppBox">
						<mx:RadioButtonGroup id="radioGroupQCApp"/>
						<mx:Repeater id="qcAppRepeater" dataProvider="{parentDocument.filteredAppList}"> 
							<mx:RadioButton  label="{qcAppRepeater.currentItem.@display}" 
											 paddingLeft="1" paddingRight="1"
											 paddingTop="0" paddingBottom="0"
											 value="{qcAppRepeater.currentItem.@value}"
											 groupName="radioGroupQCApp"
											 click="{pickQCApp(event)}"/>
						</mx:Repeater>
					</mx:VBox>

				</mx:HBox>
			</mx:AddChild>			
		</mx:State>
		<mx:State name="SolexaSetupState">
			<mx:SetStyle target="{sampleSetupContainer}" name="verticalGap" value="14"/>
			<mx:SetStyle target="{numberOfSamples}" name="backgroundColor"/>
			<mx:SetProperty target="{label5}" name="width" value="305"/>
			<mx:SetProperty target="{label8}" name="width" value="305"/>
			<mx:SetProperty target="{label2}" name="width" value="305"/>
			<mx:SetProperty target="{label7}" name="width" value="305"/>
			<mx:SetProperty target="{samplePrepContainer}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{samplePrepContainer}" name="visible" value="false"/>
		</mx:State>
		<mx:State name="SolexaSetupPreppedState" basedOn="SolexaSetupState">
		</mx:State>
		<mx:State name="MicroarrayAmendState">
			<mx:SetProperty target="{label7}" name="label">
				<mx:value>(2) Which organism is the source for these samples?</mx:value>
			</mx:SetProperty>
			<mx:SetProperty target="{hbox3}" name="visible" value="false"/>
			<mx:SetProperty target="{hbox3}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{label8}" name="label" value="(1) Which category best describes your samples?"/>
			<mx:SetProperty target="{label2}" name="label" value="(3) Specify the nucleic acid extraction method. (required)."/>
			<mx:SetStyle target="{sampleSetupContainer}" name="paddingTop"/>
		</mx:State>
		<mx:State name="SolexaAmendState" basedOn="SolexaSetupState">
			<mx:SetProperty target="{hbox3}" name="visible" value="false"/>
			<mx:SetProperty target="{hbox3}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{label8}" name="label" value="(1) Which category best describes your samples?"/>
			<mx:SetProperty target="{label7}" name="label">
				<mx:value>(2) Which organism is the source for these samples?</mx:value>
			</mx:SetProperty>
			<mx:SetProperty target="{label2}" name="label" value="(3) Specify the nucleic acid extraction method. (required)."/>
			<mx:SetStyle target="{sampleSetupContainer}" name="paddingTop" value="38"/>
			<mx:SetStyle target="{sampleSetupContainer}" name="verticalGap" value="20"/>
			<mx:SetStyle target="{sampleOrganismContainer}" name="paddingTop" value="4"/>
		</mx:State>
		<mx:State name="SolexaAmendPreppedState" basedOn="SolexaSetupPreppedState">
		</mx:State>
		<mx:State name="CapSeqState">
			<mx:SetProperty target="{label5}" name="label" value="(1) How many samples will you be submitting?"/>
			<mx:SetProperty target="{sampleOrganismContainer}" name="visible" value="false"/>
			<mx:SetProperty target="{sampleOrganismContainer}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{samplePrepContainer}" name="visible" value="false"/>
			<mx:SetProperty target="{samplePrepContainer}" name="includeInLayout" value="false"/>
			<mx:RemoveChild target="{samplePurificationContainer}"/>
			<mx:RemoveChild target="{leftOverSampleContainer}"/>
			<mx:AddChild relativeTo="{sampleTypeHBox}" position="before">
				<mx:HBox width="100%" horizontalGap="0">
					<util:ContextHelp context1="sampleDetailsSampleContainer" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Container Help"
									  label="(2) The samples will be delivered in what container?" labelPlacement="left" id="label0" width="350"/>
					<mx:RadioButtonGroup id="containerTypeRadioGroup" selectedValue="TUBE" change="{callLater(onContainerTypeChange)}"/>
					<mx:RadioButton id="containerTypeTube" label="Tubes" value="TUBE" groupName="containerTypeRadioGroup"/>
					<mx:RadioButton id="containerTypePlate" label="Plate" value="PLATE" groupName="containerTypeRadioGroup" paddingLeft="20"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{sampleTypeHBox}" position="before">
				<mx:HBox horizontalGap="0" id="capSeqNumPlatesBox" verticalAlign="middle">
					<util:ContextHelp context1="sampleDetailsNumPlates" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Number Of Plates Help"
									  label="(3) If plates, how many plates will you be submitting?" labelPlacement="left" id="capSeqNumPlatesLabel" width="350"/>
					<mx:RadioButtonGroup id="capSeqNumPlatesRadioGroup"  change="onCapSeqNumPlatesChanged()" />
					<mx:RadioButton id="capSeqNumPlates1" label="1" value="1" groupName="capSeqNumPlatesRadioGroup" enabled="{containerTypePlate.selected}"/>
					<mx:Spacer width="20"/>
					<mx:RadioButton id="capSeqNumPlates4" label="4" value="4" groupName="capSeqNumPlatesRadioGroup" enabled="{containerTypePlate.selected}"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{sampleTypeHBox}" position="before">
				<mx:Label id="fourPlateWarningLabel" visible="false" includeInLayout="false" color="Green"
						  text="With Bulk pricing you ARE paying for the empty wells, so it is in your best interest to have the max 95 samples per plate to get the best pricing possible." />
			</mx:AddChild>
			<mx:SetProperty target="{label8}" name="label" value="(4) Which category best describes your samples?"/>
			<mx:SetEventHandler target="{numberOfSamples}" name="change" handler="pickContainerType();"/>
			<mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
				<mx:HBox horizontalGap="0" id="sampleDropOffLocationHbox" verticalAlign="middle">
					<util:ContextHelp context1="sampleDetailsDropOff" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Sample Drop Off Help"
									  label="(5) Where are you dropping off your samples?" labelPlacement="left" id="sampleDropOffLocationLabel" width="350"/>
					<mx:ComboBox labelField="@display" width="300" id="sampleDropOffLocationCombo"
								 change="parentDocument.samplesView.initializeSamplesGrid();" 
								 dataProvider="{parentDocument.filteredSampleDropOffLocationList}" 
								 close="parentDocument.samplesView.initializeSamplesGrid();"/>
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="FragAnalState">
			<mx:SetProperty target="{label5}" name="label" value="(1) How many samples will you be submitting?"/>
			<mx:SetProperty target="{sampleOrganismContainer}" name="visible" value="false"/>
			<mx:SetProperty target="{sampleOrganismContainer}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{samplePrepContainer}" name="visible" value="false"/>
			<mx:SetProperty target="{samplePrepContainer}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{sampleTypeHBox}" name="visible" value="false"/>
			<mx:SetProperty target="{sampleTypeHBox}" name="includeInLayout" value="false"/>
			<mx:RemoveChild target="{samplePurificationContainer}"/>
			<mx:RemoveChild target="{leftOverSampleContainer}"/>
			<mx:AddChild relativeTo="{sampleTypeHBox}" position="before">
				<mx:VBox width="100%" horizontalGap="0">
					<util:ContextHelp context1="sampleDetailsAssays" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Sample Assays Help"
									  label="(2) Choose the Assays to be used." labelPlacement="left" id="labelAssayHeader" width="310"/>
					<mx:Tile id="assayTile" direction="vertical" borderStyle="none"
							 paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0"
							 verticalGap="0" horizontalGap="0" tileWidth="200"> 
						<mx:Repeater id="assayRepeater" dataProvider="{parentDocument.assayCollection}">
							<mx:CheckBox label="{assayRepeater.currentItem.@display}" id="assayCheckBox" change="onAssayCheckBoxChanged()" width="100%"/>
						</mx:Repeater>
					</mx:Tile>
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="IsolationState" basedOn="SequenomState">
			<mx:SetProperty target="{sampleTypeHBox}" name="visible" value="false"/>
			<mx:SetProperty target="{sampleTypeHBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{hbox7}" name="visible" value="false"/>
			<mx:SetProperty target="{hbox7}" name="includeInLayout" value="false"/>
			
			<mx:AddChild relativeTo="{sequenomNumSourcePlatesBox}" position="before">
				<mx:HBox horizontalGap="0" verticalAlign="top" width="100%" id="extractionBox">
					<util:ContextHelp context1="sampleExtractionMethod" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Sample Extraction Method Help"
									  label="(2) Select the extraction type." labelPlacement="left" id="sampleExtractionLabel" width="455"/>
					<mx:RadioButtonGroup id = "extractionTypeRadioGroup" change="{this.isolationTypeRadioGroup.selectedValue = null}" />       	
					<mx:VBox verticalGap="0" paddingTop="0" paddingBottom="0" id="extractionTypeBox"  width="100%">
						<mx:RadioButton id="dnaButton" groupName="extractionTypeRadioGroup" label="{this.DNA}" value="{this.DNA}"  
											click="{parentDocument.filterIsolationTypeList(this.DNA); this.checkSampleSetupCompleteness();}" fontSize="11" paddingTop="0" paddingBottom="0"/>
						<mx:RadioButton id="rnaButton" groupName="extractionTypeRadioGroup" label="{this.RNA}" value="{this.RNA}"  
										click="{parentDocument.filterIsolationTypeList(this.RNA); this.checkSampleSetupCompleteness();}" fontSize="11" paddingTop="0" paddingBottom="0"/>
						<mx:RadioButton id="bothButton" groupName="extractionTypeRadioGroup" label="{this.BOTH}" value="{this.BOTH.toUpperCase()}"  
										click="{parentDocument.filterIsolationTypeList(this.BOTH); this.checkSampleSetupCompleteness();}" fontSize="11" paddingTop="0" paddingBottom="0"/>
					</mx:VBox>
				</mx:HBox>
			</mx:AddChild>
			
			<mx:AddChild relativeTo="{extractionBox}" position="after">
				<mx:HBox horizontalGap="0" id="hbox1" verticalAlign="top" width="100%">
					<util:ContextHelp context1="sampleDetailsIsolationMethod" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Sample Isolation Method Help"
									  label="(4) Select the isolation method." labelPlacement="left" id="sampleIsolationLabel" width="455"/>
					<mx:RadioButtonGroup id = "isolationTypeRadioGroup" />       	
					<mx:VBox verticalGap="0" paddingTop="0" paddingBottom="0" id="isolationTypeBox"  width="100%">
						<mx:Text id="noPrepTypes" fontStyle="italic" fontSize="10"  textAlign="left" width="100%" color="green" text="There are currently no prep types that use the selected extraction type" visible="{parentDocument.isolationTypeList.length == 0}" includeInLayout="{parentDocument.isolationTypeList.length == 0}" />
						<mx:Repeater id="isolationTypeRepeater" dataProvider="{parentDocument.isolationTypeList}">
							<mx:RadioButton id="isolationTypeBtn" groupName="isolationTypeRadioGroup" 
											label="{isolationTypeRepeater.currentItem.@display}" 
											value="{isolationTypeRepeater.currentItem.@value}" 
											click="{pickIsolationType(); this.checkSampleSetupCompleteness();}" fontSize="11" paddingTop="0" paddingBottom="0"/>						
						</mx:Repeater>
						<mx:RadioButton id="isolationTypeNull" groupName="isolationTypeRadioGroup" 
										label="" value="{null}" width="0" height="0" visible="false" includeInLayout="false" />	
					</mx:VBox>
				</mx:HBox>
			</mx:AddChild>
			
			<mx:SetProperty target="{label5}" name="label" value="(1) How many samples will you be submitting?"/>
			<mx:SetProperty target="{sequenomContainerTypePlate}" name="visible" value="false"/>
			<mx:SetProperty target="{sequenomContainerTypePlate}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{sequenomPlateNamesBox}" name="visible" value="false"/>
			<mx:SetProperty target="{sequenomPlateNamesBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{sequenomNumSourcePlatesBox}" name="visible" value="false"/>
			<mx:SetProperty target="{sequenomNumSourcePlatesBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{hbox8}" name="visible" value="false"/>
			<mx:SetProperty target="{hbox8}" name="includeInLayout" value="false"/>
			<mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
				<mx:HBox horizontalGap="0" id="hbox6" verticalAlign="middle" width="100%">
					<util:ContextHelp context1="sampleDetailsSampleSource" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Sample Source Help"
									  label="(5) Select the sample source." labelPlacement="left" id="sampleSourceLabel" width="455"/>
					<mx:RadioButtonGroup id = "isolationTypeRadioGroup0" />       	
					<mx:VBox verticalGap="0" paddingTop="0" paddingBottom="0" id="isolationTypeBox0">
						<mx:Repeater id="isolationTypeRepeater0" dataProvider="{parentDocument.isolationTypeList}">
						</mx:Repeater>
						<mx:RadioButton id="isolationTypeNull0" groupName="isolationTypeRadioGroup" 
										label="" value="{null}" width="0" height="0" visible="false" includeInLayout="false" />	
					</mx:VBox>
					<mx:ComboBox labelField="@display" width="245" id="sampleSourceCombo"
								 dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SampleSource').DictionaryEntry}"
								 change="{onSampleSourceChanged()}"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox1}" position="before">
				<mx:HBox horizontalGap="0"  verticalAlign="middle" id="qubitConcentrationBox">
					<util:ContextHelp context1="SampleDetailsIsolationQubitConcentration" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Qubit Concentration Help"
									  label="(3) Would you like the core to measure the concentration by Qubit Pico Green?" labelPlacement="left" id="sequenomQubitConcentrationLabel" width="456"/>
					<mx:CheckBox label="Yes" id="QubitConcentrationCheckBox" change="onIncludeQubitConcentrationCheckBoxChanged()" width="100%" paddingRight="9" selected="{parentDocument.request.@includeQubitConcentration == 'Y'}"/>	
				</mx:HBox>
			</mx:AddChild>

			<mx:AddChild relativeTo="{hbox1}" position="after">
				<mx:HBox horizontalGap="0"  verticalAlign="middle" id="BMPMPickupBox">
					<util:ContextHelp context1="BMPWillPickupSamples" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="BMP will pickup samples help"
									  label="(4A) Notify BMP to pickup samples when completed?" labelPlacement="left" id="BMPPickupLabel" width="456"/>
					<mx:CheckBox label="Yes" id="BMPPickupCheckBox" change="onBMPPickupCheckBox()" width="100%" paddingRight="9" selected="{parentDocument.isIsolationState()}"/>
				</mx:HBox>
			</mx:AddChild>

			<mx:SetProperty target="{bisulfideConversionBox}" name="visible" value="false"/>

			<mx:SetProperty target="{bisulfideConversionBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{label5}" name="width" value="455"/>
		</mx:State>
		<mx:State name="MitSeqState">
			<mx:SetProperty target="{label5}" name="label" value="(1) How many samples will you be submitting?"/>
			<mx:SetProperty target="{sampleOrganismContainer}" name="visible" value="false"/>
			<mx:SetProperty target="{sampleOrganismContainer}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{samplePrepContainer}" name="visible" value="false"/>
			<mx:SetProperty target="{samplePrepContainer}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{sampleTypeHBox}" name="visible" value="false"/>
			<mx:SetProperty target="{sampleTypeHBox}" name="includeInLayout" value="false"/>
			<mx:RemoveChild target="{samplePurificationContainer}"/>
			<mx:RemoveChild target="{leftOverSampleContainer}"/>
			<mx:AddChild relativeTo="{sampleTypeHBox}" position="before">
				<mx:VBox width="100%" horizontalGap="0">
					<util:ContextHelp context1="sampleDetailsPrimers" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Sample Primers Help"
									  label="(2) Choose the Primers to be used." labelPlacement="left" id="labelPrimerHeader" width="310"/>
					<mx:HBox width="100%" horizontalGap="5">
						<mx:VBox>
							<mx:Label text="Primer 1" id="labelPrimer1"/>
							<mx:ComboBox labelField="@display" width="150" id="primer1Combo"
										 dataProvider="{primerCollection}" 
										 change="checkSampleSetupCompleteness()"/>
						</mx:VBox>					   
						<mx:VBox>
							<mx:Label text="Primer 2" id="labelPrimer2"/>
							<mx:ComboBox labelField="@display" width="150" id="primer2Combo"
										 dataProvider="{primerCollection}" 
										 change="checkSampleSetupCompleteness()"/>
						</mx:VBox>					   
						<mx:VBox>
							<mx:Label text="Primer 3" id="labelPrimer3"/>
							<mx:ComboBox labelField="@display" width="150" id="primer3Combo"
										 dataProvider="{primerCollection}" 
										 change="checkSampleSetupCompleteness()"/>
						</mx:VBox>					   
						<mx:VBox>
							<mx:Label text="Primer 4" id="labelPrimer4"/>
							<mx:ComboBox labelField="@display" width="150" id="primer4Combo"
										 dataProvider="{primerCollection}" 
										 change="checkSampleSetupCompleteness()"/>
						</mx:VBox>					   
						<mx:VBox>
							<mx:Label text="Primer 5" id="labelPrimer5"/>
							<mx:ComboBox labelField="@display" width="150" id="primer5Combo"
										 dataProvider="{primerCollection}" 
										 change="checkSampleSetupCompleteness()"/>
						</mx:VBox>					   
						<mx:VBox>
							<mx:Label text="Primer 6" id="labelPrimer6"/>
							<mx:ComboBox labelField="@display" width="150" id="primer6Combo"
										 dataProvider="{primerCollection}" 
										 change="checkSampleSetupCompleteness()"/>
						</mx:VBox>					   
					</mx:HBox>
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="CherryPickState">
			<mx:SetProperty target="{sampleOrganismContainer}" name="visible" value="false"/>
			<mx:SetProperty target="{sampleOrganismContainer}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{samplePrepContainer}" name="visible" value="false"/>
			<mx:SetProperty target="{samplePrepContainer}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{sampleTypeHBox}" name="visible" value="false"/>
			<mx:SetProperty target="{sampleTypeHBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{hbox3}" name="visible" value="false"/>
			<mx:SetProperty target="{hbox3}" name="includeInLayout" value="false"/>
			<mx:RemoveChild target="{samplePurificationContainer}"/>
			<mx:RemoveChild target="{leftOverSampleContainer}"/>
			<mx:AddChild relativeTo="{sampleTypeHBox}" position="before">
				<mx:HBox width="100%" horizontalGap="0">
					<util:ContextHelp context1="sampleDetailsDestinationWells" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Sample Destination Wells Help"
									  label="(1) How many wells does the destination plate contain?" labelPlacement="left" id="cherryNumDestinationWells" width="350"/>
					<mx:RadioButtonGroup id="cherryNumDestinationWellsRadioGroup" change="parentDocument.samples.removeAll();parentDocument.samplesView.initializeSamplesGrid()"/>
					<mx:RadioButton id="cherryNumDestinationWells96" label="96" click="{callLater(checkSampleSetupCompleteness)}" value="96" groupName="cherryNumDestinationWellsRadioGroup"/>
					<mx:RadioButton id="cherryNumDestinationWells384" label="384" click="{callLater(checkSampleSetupCompleteness)}" value="384" groupName="cherryNumDestinationWellsRadioGroup"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{sampleTypeHBox}" position="before">
				<mx:HBox horizontalGap="0" id="cherryNumSourcePlatesBox" verticalAlign="middle">
					<util:ContextHelp context1="sampleDetailsNumSourcePlates" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Sample Source Plates Help"
									  label="(2) How many source plates will you be submitting?" labelPlacement="left" id="cherryNumSourcePlatesLabel" width="350"/>
					<mx:TextInput width="40" id="cherryNumSourcePlates" 
								  change="onCherryNumSourcePlatesChanged()">
					</mx:TextInput>							
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{sampleTypeHBox}" position="before">
				<mx:VBox horizontalGap="0" id="cherryPlateNamesBox" verticalAlign="middle">
					<util:ContextHelp context1="sampleDetailsPlateNames" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Sample Plate Names Help"
									  label="(3) Name your plates." labelPlacement="left" id="plateNamesLabel" width="350"/>
					<mx:HBox horizontalGap="10" verticalAlign="middle">
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate1Box" visible="false">
							<mx:Label text="Plate 1:"/>
							<mx:TextInput width="100" id="cherryPlate1Name" text="Plate 1"
										  change="onCherryPlateNameChanged()"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate2Box" visible="false">
							<mx:Label text="Plate 2:"/>
							<mx:TextInput width="100" id="cherryPlate2Name" text="Plate 2"
										  change="onCherryPlateNameChanged()"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate3Box" visible="false">
							<mx:Label text="Plate 3:"/>
							<mx:TextInput width="100" id="cherryPlate3Name" text="Plate 3"
										  change="onCherryPlateNameChanged()"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate4Box" visible="false">
							<mx:Label text="Plate 4:"/>
							<mx:TextInput width="100" id="cherryPlate4Name" text="Plate 4"
										  change="onCherryPlateNameChanged()"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate5Box" visible="false">
							<mx:Label text="Plate 5:"/>
							<mx:TextInput width="100" id="cherryPlate5Name" text="Plate 5"
										  change="onCherryPlateNameChanged()"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate6Box" visible="false">
							<mx:Label text="Plate 6:"/>
							<mx:TextInput width="100" id="cherryPlate6Name" text="Plate 6"
										  change="onCherryPlateNameChanged()"/>
						</mx:HBox>
					</mx:HBox>
					<mx:HBox horizontalGap="10" verticalAlign="middle">
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate7Box" visible="false">
							<mx:Label text="Plate 7:"/>
							<mx:TextInput width="100" id="cherryPlate7Name" text="Plate 7"
										  change="onCherryPlateNameChanged()"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate8Box" visible="false">
							<mx:Label text="Plate 8:"/>
							<mx:TextInput width="100" id="cherryPlate8Name" text="Plate 8"
										  change="onCherryPlateNameChanged()"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate9Box" visible="false">
							<mx:Label text="Plate 9:"/>
							<mx:TextInput width="100" id="cherryPlate9Name" text="Plate 9"
										  change="onCherryPlateNameChanged()"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate10Box" visible="false">
							<mx:Label text="Plate 10:"/>
							<mx:TextInput width="100" id="cherryPlate10Name" text="Plate 10"
										  change="onCherryPlateNameChanged()"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate11Box" visible="false">
							<mx:Label text="Plate 11:"/>
							<mx:TextInput width="100" id="cherryPlate11Name" text="Plate 11"
										  change="onCherryPlateNameChanged()"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate12Box" visible="false">
							<mx:Label text="Plate 12:"/>
							<mx:TextInput width="100" id="cherryPlate12Name" text="Plate 12"
										  change="onCherryPlateNameChanged()"/>
						</mx:HBox>
					</mx:HBox>
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="IScanState">
			<mx:SetProperty target="{sampleOrganismContainer}" name="visible" value="false"/>
			<mx:SetProperty target="{sampleOrganismContainer}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{samplePrepContainer}" name="visible" value="false"/>
			<mx:SetProperty target="{samplePrepContainer}" name="includeInLayout" value="false"/>
			<mx:RemoveChild target="{samplePurificationContainer}"/>
			<mx:RemoveChild target="{leftOverSampleContainer}"/>
			<mx:RemoveChild target="{hbox3}"/>
			<mx:AddChild relativeTo="{sampleTypeHBox}" position="before" target="{hbox3}"/>
			<mx:AddChild relativeTo="{sampleTypeHBox}" position="before">
				<mx:HBox horizontalGap="0" id="iScanNumSourcePlatesBox" verticalAlign="middle" includeInLayout="{parentDocument.request.@idRequest == '0'}" visible="{parentDocument.request.@idRequest == '0'}">
					<util:ContextHelp context1="SampleDetailsIScanNumSourcePlates" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="IScan Source Plates Help"
									  label="(2) How many source plates will you be submitting?" labelPlacement="left" id="iScanNumSourcePlatesLabel" width="350"/>
					<mx:TextInput width="40" id="iScanNumSourcePlates" 
								  change="onIScanNumSourcePlatesChanged()" focusOut="parentDocument.samplesView.initializeSamplesGrid();">
					</mx:TextInput>							
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{sampleTypeHBox}" position="before">
				<mx:VBox horizontalGap="0" id="iScanPlateNamesBox" verticalAlign="middle" visible="{parentDocument.request.@idRequest == '0'}" includeInLayout="{parentDocument.request.@idRequest == '0'}">
					<util:ContextHelp context1="SampleDetailsIScanNamePlates" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="IScan Plate Names Help"
									  label="(3) Name your plates." labelPlacement="left" id="iScanPlateNamesLabel" width="350"/>
					<mx:HBox horizontalGap="10" verticalAlign="middle">
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate1Box" visible="false">
							<mx:Label text="Plate 1:"/>
							<mx:TextInput width="100" id="iScanPlate1Name" text="Plate 1"
										  focusOut="onIScanPlateNameChanged(0)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate2Box" visible="false">
							<mx:Label text="Plate 2:"/>
							<mx:TextInput width="100" id="iScanPlate2Name" text="Plate 2"
										  focusOut="onIScanPlateNameChanged(1)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate3Box" visible="false">
							<mx:Label text="Plate 3:"/>
							<mx:TextInput width="100" id="iScanPlate3Name" text="Plate 3"
										  focusOut="onIScanPlateNameChanged(2)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate4Box" visible="false">
							<mx:Label text="Plate 4:"/>
							<mx:TextInput width="100" id="iScanPlate4Name" text="Plate 4"
										  focusOut="onIScanPlateNameChanged(3)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate5Box" visible="false">
							<mx:Label text="Plate 5:"/>
							<mx:TextInput width="100" id="iScanPlate5Name" text="Plate 5"
										  focusOut="onIScanPlateNameChanged(4)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate6Box" visible="false">
							<mx:Label text="Plate 6:"/>
							<mx:TextInput width="100" id="iScanPlate6Name" text="Plate 6"
										  focusOut="onIScanPlateNameChanged(5)"/>
						</mx:HBox>
					</mx:HBox>
					<mx:HBox horizontalGap="10" verticalAlign="middle">
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate7Box" visible="false">
							<mx:Label text="Plate 7:"/>
							<mx:TextInput width="100" id="iScanPlate7Name" text="Plate 7"
										  focusOut="onIScanPlateNameChanged(6)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate8Box" visible="false">
							<mx:Label text="Plate 8:"/>
							<mx:TextInput width="100" id="iScanPlate8Name" text="Plate 8"
										  focusOut="onIScanPlateNameChanged(7)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate9Box" visible="false">
							<mx:Label text="Plate 9:"/>
							<mx:TextInput width="100" id="iScanPlate9Name" text="Plate 9"
										  focusOut="onIScanPlateNameChanged(8)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate10Box" visible="false">
							<mx:Label text="Plate 10:"/>
							<mx:TextInput width="100" id="iScanPlate10Name" text="Plate 10"
										  focusOut="onIScanPlateNameChanged(9)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate11Box" visible="false">
							<mx:Label text="Plate 11:"/>
							<mx:TextInput width="100" id="iScanPlate11Name" text="Plate 11"
										  focusOut="onIScanPlateNameChanged(10)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate12Box" visible="false">
							<mx:Label text="Plate 12:"/>
							<mx:TextInput width="100" id="iScanPlate12Name" text="Plate 12"
										  focusOut="onIScanPlateNameChanged(11)"/>
						</mx:HBox>
					</mx:HBox>
				</mx:VBox>
			</mx:AddChild>
			<mx:SetProperty target="{sampleTypeHBox}" name="visible" value="false"/>
			<mx:SetProperty target="{sampleTypeHBox}" name="includeInLayout" value="false"/>
		</mx:State>
		<mx:State name="SequenomState">
			<mx:SetProperty target="{sampleOrganismContainer}" name="visible" value="false"/>
			<mx:SetProperty target="{sampleOrganismContainer}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{samplePrepContainer}" name="visible" value="false"/>
			<mx:SetProperty target="{samplePrepContainer}" name="includeInLayout" value="false"/>
            <mx:RemoveChild target="{samplePurificationContainer}"/>
            <mx:RemoveChild target="{leftOverSampleContainer}"/>
			<mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
				<mx:HBox width="100%" horizontalGap="0" id="hbox7">
					<util:ContextHelp context1="SampleDetailsSequenomSeqApplication" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Experiment Type Help"
									  label="(1) Select an experiment type." labelPlacement="left" id="labelSeqApplication" width="350"/>
					<mx:VBox verticalGap="2" id="appAndPanelContainerVBox">
						<mx:VBox height="100%" width="400" verticalGap="1" paddingLeft="2" paddingRight="2" paddingBottom="2" paddingTop="2" styleName="requiredBox" id="seqAppBox">
							<mx:RadioButtonGroup id="radioGroupSeqApp"/>
							<mx:Repeater id="seqAppRepeater" dataProvider="{parentDocument.filteredAppList}"> 
								<mx:HBox verticalAlign="middle">
									<mx:RadioButton  label="{seqAppRepeater.currentItem.@display}" 
													 paddingLeft="1" paddingRight="1"
													 value="{seqAppRepeater.currentItem.@value}"
													 groupName="radioGroupSeqApp"
													 click="{pickSequenomApp()}"
													 width="200"/>
									<mx:Label text="{seqAppRepeater.currentItem.@samplesPerBatch != '' ? seqAppRepeater.currentItem.@samplesPerBatch + ' samples/batch' : ''}" />
								</mx:HBox>
							</mx:Repeater>
						</mx:VBox>
						<mx:HBox id="sequenomPanelContainer" width="400" verticalAlign="middle" paddingBottom="5" >
							<mx:Spacer width="22"/>
							<mx:Label text="Please specify" id="seqPanelLabel"/>
							<mx:TextInput width="100%" id="sequenomApplicationDesc" styleName="requiredBox" focusOut="onAppDescChanged()" />
						</mx:HBox>
					</mx:VBox>
				</mx:HBox>
			</mx:AddChild>
			<mx:RemoveChild target="{hbox3}"/>
			<mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild" target="{hbox3}"/>
			<mx:SetProperty target="{label5}" name="label" value="(3) How many samples will you be submitting?"/>
			<mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
				<mx:HBox width="100%" horizontalGap="0" id="hbox8">
					<util:ContextHelp context1="SampleDetailsSequenomContainer" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Container Help"
									  label="(4) The samples will be delivered in what container?" labelPlacement="left" id="seqContLabel" width="350"/>
					<mx:RadioButtonGroup id="sequenomContainerTypeRadioGrp" selectedValue="TUBE" change="{callLater(onSequenomContainerTypeChange)}"/>
					<mx:RadioButton id="sequenomContainerTypeTube" label="Tubes" value="TUBE" groupName="sequenomContainerTypeRadioGrp"/>
					<mx:RadioButton id="sequenomContainerTypePlate" label="Plates" value="PLATE" groupName="sequenomContainerTypeRadioGrp" paddingLeft="20"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
				<mx:HBox horizontalGap="0" id="sequenomNumSourcePlatesBox" verticalAlign="middle" 
						 includeInLayout="{sequenomContainerTypeRadioGrp.selectedValue == 'PLATE' &amp;&amp; parentDocument.request.@idRequest == '0'}" 
						 visible="{sequenomContainerTypeRadioGrp.selectedValue == 'PLATE' &amp;&amp; parentDocument.request.@idRequest == '0'}">
					<util:ContextHelp context1="SampleDetailsSequenomNumSourcePlates" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Source Plates Help"
									  label="(5) How many source plates will you be submitting?" labelPlacement="left" id="sequenomNumSourcePlatesLabel" width="350"/>
					<mx:TextInput width="40" id="sequenomNumSourcePlates" 
								  change="onSequenomNumSourcePlatesChanged()" 
								  focusOut="onNumberOfSamplesChanged()">
					</mx:TextInput>							
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
				<mx:VBox horizontalGap="0" id="sequenomPlateNamesBox" verticalAlign="middle" 
						 visible="{sequenomContainerTypeRadioGrp.selectedValue == 'PLATE' &amp;&amp; parentDocument.request.@idRequest == '0'}" 
						 includeInLayout="{sequenomContainerTypeRadioGrp.selectedValue == 'PLATE' &amp;&amp; parentDocument.request.@idRequest == '0'}">
					<util:ContextHelp context1="SampleDetailsSequenomPlateNames" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Plate Name Help"
									  label="(6) Name your plates." labelPlacement="left" id="sequenomPlateNameLabel" width="350"/>
					<mx:HBox horizontalGap="10" verticalAlign="middle">
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate1Box" visible="false">
							<mx:Label text="Plate 1:"/>
							<mx:TextInput width="100" id="sequenomPlate1Name" text="Plate 1"
										  focusOut="onSequenomPlateNameChanged(0)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate2Box" visible="false">
							<mx:Label text="Plate 2:"/>
							<mx:TextInput width="100" id="sequenomPlate2Name" text="Plate 2"
										  focusOut="onSequenomPlateNameChanged(1)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate3Box" visible="false">
							<mx:Label text="Plate 3:"/>
							<mx:TextInput width="100" id="sequenomPlate3Name" text="Plate 3"
										  focusOut="onSequenomPlateNameChanged(2)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate4Box" visible="false">
							<mx:Label text="Plate 4:"/>
							<mx:TextInput width="100" id="sequenomPlate4Name" text="Plate 4"
										  focusOut="onSequenomPlateNameChanged(3)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate5Box" visible="false">
							<mx:Label text="Plate 5:"/>
							<mx:TextInput width="100" id="sequenomPlate5Name" text="Plate 5"
										  focusOut="onSequenomPlateNameChanged(4)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate6Box" visible="false">
							<mx:Label text="Plate 6:"/>
							<mx:TextInput width="100" id="sequenomPlate6Name" text="Plate 6"
										  focusOut="onSequenomPlateNameChanged(5)"/>
						</mx:HBox>
					</mx:HBox>
					<mx:HBox horizontalGap="10" verticalAlign="middle">
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate7Box" visible="false">
							<mx:Label text="Plate 7:"/>
							<mx:TextInput width="100" id="sequenomPlate7Name" text="Plate 7"
										  focusOut="onSequenomPlateNameChanged(6)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate8Box" visible="false">
							<mx:Label text="Plate 8:"/>
							<mx:TextInput width="100" id="sequenomPlate8Name" text="Plate 8"
										  focusOut="onSequenomPlateNameChanged(7)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate9Box" visible="false">
							<mx:Label text="Plate 9:"/>
							<mx:TextInput width="100" id="sequenomPlate9Name" text="Plate 9"
										  focusOut="onSequenomPlateNameChanged(8)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate10Box" visible="false">
							<mx:Label text="Plate 10:"/>
							<mx:TextInput width="100" id="sequenomPlate10Name" text="Plate 10"
										  focusOut="onSequenomPlateNameChanged(9)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate11Box" visible="false">
							<mx:Label text="Plate 11:"/>
							<mx:TextInput width="100" id="sequenomPlate11Name" text="Plate 11"
										  focusOut="onSequenomPlateNameChanged(10)"/>
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate12Box" visible="false">
							<mx:Label text="Plate 12:"/>
							<mx:TextInput width="100" id="sequenomPlate12Name" text="Plate 12"
										  focusOut="onSequenomPlateNameChanged(11)"/>
						</mx:HBox>
					</mx:HBox>
				</mx:VBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox3}" position="before">
				<mx:HBox horizontalGap="0"  verticalAlign="middle" id="bisulfideConversionBox">
					<util:ContextHelp context1="SampleDetailsSequenomBisulfideConversion" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Bisulfide Conversion Help"
									  label="(2) Would you like to include bisulfide conversion?" labelPlacement="left" id="sequenomBisulfideConversionLabel" width="350"/>
					<mx:CheckBox label="Yes" id="bisulfideConversionCheckBox" change="onIncludeBisulfideConversionCheckBoxChanged()" width="100%" paddingRight="9" selected="{parentDocument.request.@includeBisulfideConversion == 'Y'}"/>	
				</mx:HBox>
			</mx:AddChild>
			<mx:RemoveChild target="{sampleTypeHBox}"/>
		    <mx:AddChild relativeTo="{bisulfideConversionBox}" position="before" target="{sampleTypeHBox}"/>
			<mx:SetProperty target="{label8}" name="label" value="(2) Which category best describes your samples?"/>
<!--			<mx:AddChild relativeTo="{hbox3}" position="lastChild">
				<mx:HBox width="100%" id="hbox9">
					<mx:Text id="sampleCountWarning" fontStyle="italic" fontSize="10"  textAlign="left" width="100%" color="green"/>
				</mx:HBox>
			</mx:AddChild>-->
			<mx:SetStyle target="{sampleSetupContainer}" name="verticalGap" value="5"/>
		</mx:State>
		<mx:State name="ClinicalSequenomState" basedOn="SequenomState">
			<mx:AddChild relativeTo="{hbox7}" position="lastChild">
				<mx:Text text="{parentDocument.applicationName}" 
						 id="seqApplicationText"/>
			</mx:AddChild>
			<mx:SetProperty target="{appAndPanelContainerVBox}" name="visible" value="false"/>
			<mx:SetProperty target="{appAndPanelContainerVBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{hbox8}" name="visible" value="false"/>
			<mx:SetProperty target="{hbox8}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{sequenomNumSourcePlatesBox}" name="visible" value="false"/>
			<mx:SetProperty target="{sequenomNumSourcePlatesBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{sequenomPlateNamesBox}" name="visible" value="false"/>
			<mx:SetProperty target="{sequenomPlateNamesBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{hbox3}" name="visible" value="false"/>
			<mx:SetProperty target="{hbox3}" name="includeInLayout" value="false"/>
		</mx:State>
		<mx:State name="MDMiSeqState" basedOn="SolexaSetupState">
			<mx:SetProperty target="{label5}" name="width" value="340"/>
			<mx:SetProperty target="{label8}" name="width" value="340"/>
			<mx:SetProperty target="{label7}" name="width" value="340"/>
			<mx:SetProperty target="{label2}" name="width" value="340"/>
			<mx:SetProperty target="{label2}" name="width" value="340"/>
			<mx:SetProperty target="{label2}" name="label" value="(4) Specify the nucleic acid extraction method.(required)" />
			<mx:RemoveChild target="{samplePurificationContainer}"/>
			<mx:RemoveChild target="{leftOverSampleContainer}"/>
			<mx:SetProperty target="{samplePrepContainer}" name="includeInLayout" value="true"/>
			<mx:SetProperty target="{samplePrepContainer}" name="visible" value="true"/>
		</mx:State>
		<mx:State name="GenericState">
			<mx:SetProperty target="{samplePrepContainer}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{samplePrepContainer}" name="visible" value="false"/>
			<mx:RemoveChild target="{samplePurificationContainer}"/>
			<mx:RemoveChild target="{leftOverSampleContainer}"/>
			<mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
				<mx:HBox id="appListBox" width="100%" horizontalGap="0" visible="{parentDocument.filteredAppList.length&gt;0}" includeInLayout="{parentDocument.filteredAppList.length&gt;0}">
					<util:ContextHelp context1="SampleDetailsApplication" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Experiment Type Help"
									  label="(4) Select an experiment type." labelPlacement="left" id="labelApplication" width="350"/>
					<mx:VBox verticalGap="2" id="appContainerVBox">
						<mx:VBox height="100%" width="400" verticalGap="1" paddingLeft="2" paddingRight="2" paddingBottom="2" paddingTop="2" styleName="requiredBox" id="appBox">
							<mx:RadioButtonGroup id="radioGroupApp"/>
							<mx:Repeater id="appRepeater" dataProvider="{parentDocument.filteredAppList}"> 
								<mx:HBox verticalAlign="middle">
									<mx:RadioButton  label="{appRepeater.currentItem.@display}" 
													 paddingLeft="1" paddingRight="1"
													 value="{appRepeater.currentItem.@value}"
													 groupName="radioGroupApp"
													 click="{pickApp()}"
													 width="200"/>
								</mx:HBox>
							</mx:Repeater>
						</mx:VBox>
						<mx:HBox id="panelContainer" width="400" verticalAlign="middle" paddingBottom="5" visible="false" includeInLayout="false">
							<mx:Spacer width="22"/>
							<mx:Label text="Please specify" id="panelLabel"/>
							<mx:TextInput width="100%" id="applicationDesc" styleName="requiredBox" focusOut="onGenAppDescChanged()" />
						</mx:HBox>
					</mx:VBox>
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
        <mx:State name="NanoStringState" basedOn="MDMiSeqState"/> <!-- need this empty state because other tabs depend on it being here to make logic decisions !-->
		<mx:State name="DigitalPCRState" basedOn="GenericState">
			<mx:SetProperty target="{samplePrepContainer}" name="includeInLayout" value="true"/>
			<mx:SetProperty target="{samplePrepContainer}" name="visible" value="true"/>
			<mx:SetProperty target="{labelApplication}" name="label" value="(5) Select an experiment type."/>
			<mx:SetProperty target="{label2}" name="label" value="(4) Specify the nucleic acid extraction method.(required)" />
			<mx:RemoveChild target="{samplePurificationContainer}"/>
			<mx:RemoveChild target="{leftOverSampleContainer}"/>
		</mx:State>
	</mx:states>
	
	
	
</mx:Canvas>
