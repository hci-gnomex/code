<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" 
				xmlns:db="views.dashboard.*" 
				title="Metrix Server Status" 
				width="536" height="370"
				creationComplete="init()">   

	<mx:HTTPService 
		id="metrixInterface" 
		url="MetrixServerInterface.gx"
		resultFormat="e4x"
		destination="MetrixServerInterface"
		showBusyCursor="true"
		result="onGetMetrixInterface(event)"
		fault="parentApplication.onFailHttpRequest('Unable to get metrix interface result', event)"
		useProxy="false">
		
	</mx:HTTPService>

	
<mx:Style>
	.connected {
		fontWeight: bold;
		color: green;
	}
	
	.disconnected {
		fontWeight: bold;
		color: red;
	}
	
</mx:Style>				
	
	<mx:XMLListCollection id="MIList" source="{metrixInterface.lastResult.Summary}"/> 

<mx:Script>
	<![CDATA[
		
		// Imports
		import flash.events.TimerEvent;
		import flash.utils.Timer;
		
		import mx.collections.ArrayCollection;
		import mx.collections.Sort;
		import mx.collections.XMLListCollection;
		import mx.controls.Alert;
		import mx.controls.ProgressBar;
		import mx.events.CloseEvent;
		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;
		import mx.events.DragEvent;
		import mx.events.FlexEvent;
		import mx.events.ListEvent;
		import mx.managers.DragManager;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		import mx.utils.ObjectUtil;
		
		// Variables
		[Bindable]
		private var conStatus:Boolean = false;
				
		[Bindable]
		public var activeRuns:String = "0";
		
		[Bindable]
		private var finishedRuns:String = "0";
		
		[Bindable]
		private var haltedRuns:String = "0";
		
		[Bindable]
		private var turnRuns:String = "0";
		
		[Bindable]
		private var refreshTimer:Timer = new Timer(600000);
		
		public function init():void {
			// Retrieve initial SummaryCollection from MetrixServer using controller.
			metrixInterface.send();
			
			// Set Connection status default
			conLabel.text = "Disconnected";
			conLabel.setStyle("fontWeight", "bold");
			conLabel.setStyle("color", "red");
			conStatus = false;
		}
		
		public function refreshData(e:TimerEvent):void{
			metrixInterface.send();
			refreshTimer.removeEventListener(TimerEvent.TIMER, refreshData);
		}
		
		private function onGetMetrixInterface(event:ResultEvent):void {
			if(event.result.name() == "SummaryCollection"){
				conLabel.text = "Connected";
				conLabel.setStyle("fontWeight","bold");
				conLabel.setStyle("color","green");
				conStatus = true;
				
			 	if(MIList.length == 0){
					titleContainer.visible = false;
					noneActive.visible = true;
					refreshTimer.delay = 60000;
				}else{
					titleContainer.visible = true;
					noneActive.visible = false;
					refreshTimer.delay = 600000;
				}
				
			// Set counts for global status counters
				// activeRuns
				if(metrixInterface.lastResult.@active != ""){
					activeRuns = metrixInterface.lastResult.@active;
				}
				
				// finishedRuns
				if(metrixInterface.lastResult.@finished != ""){
					finishedRuns = metrixInterface.lastResult.@finished;
				}
				
				// haltedRuns
				if(metrixInterface.lastResult.@error != ""){
					haltedRuns = metrixInterface.lastResult.@error;
				}
				
				// turnRuns
				if(metrixInterface.lastResult.@turn != ""){
					turnRuns = metrixInterface.lastResult.@turn;
				}
			
				// Set timer -- Polling with 10 minute interval.

				refreshTimer.addEventListener(TimerEvent.TIMER, refreshData);
				refreshTimer.start();
		} else {
				Alert.show(event.result..ERROR.@message.toString(), "Error setting up Metrix Interface.");
			}
		}
		
		public function repeatHandler(event:Object, current:String, total:String):void
		{
			var cur:Number = Number(current);
			var tot:Number = Number(total);
			progress[event.target.instanceIndex].setProgress(cur,tot);
		}
		
	]]>
</mx:Script>
	
	<mx:VBox width="100%" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
		<mx:HBox width="100%" height="20" horizontalAlign="center">
			<mx:LinkButton id="reload" icon="@Embed('../../assets/refresh.png')" disabledIcon="@Embed('../../assets/refresh_disable.png')"  enabled="{conStatus ? false : true}" click="init();" toolTip="Reload" fontWeight="normal" textDecoration="underline"/>
			<mx:Label id="conLabel" />
			<mx:VRule />
			<mx:Label id="numActiveRuns" text="Active runs: {activeRuns}" />
			<mx:VRule />
			<mx:Label id="numFinishedRuns" text="Finished runs: {finishedRuns}" />
			<mx:VRule />
			<mx:Label id="numErrorRuns" text="Halted runs: {haltedRuns}" />
			<mx:VRule />
			<mx:Label id="numTurnRuns" text="Turn runs: {turnRuns}"/>
		</mx:HBox>
		<mx:HRule width="100%" />
			
			<mx:HBox id="titleContainer" width="100%" horizontalAlign="center" borderStyle="solid" borderThickness="1" visible="true">
				<mx:Label id="mainTitle" text="Current Active Sequencing Machines" fontSize="18" />
			</mx:HBox>
			<mx:HBox id="noneActive" width="100%" horizontalAlign="center" borderStyle="solid" borderThickness="1" visible="false">
				<mx:Label id="noneActiveLabel" text="No active runs" fontSize="18" />
			</mx:HBox>

		
			<mx:VBox id="main" width="100%">
				<mx:Repeater id="repStatus" dataProvider="{MIList}" count="3">
					<mx:VBox borderStyle="solid" borderThickness="1" paddingBottom="4" paddingLeft="2" paddingRight="2" paddingTop="6" width="100%">
						<mx:HBox id="runProgress" width="100%">
							<mx:Label id="seqMachine" text="Instrument: {repStatus.currentItem.instrument}" />
							
							<mx:ProgressBar id="progress" width="75%" label="{repStatus.currentItem.currentCycle} / {repStatus.currentItem.totalCycle} Cycles"
											labelPlacement="center" mode="manual" creationComplete="repeatHandler(event, event.currentTarget.getRepeaterItem().currentCycle, event.currentTarget.getRepeaterItem().totalCycle);" />
						</mx:HBox>
						<mx:HBox id="runInfo" width="100%">
							<mx:Label id="runId" text="Name: {repStatus.currentItem.runId}" /> <!-- Run identifier -->
							<mx:VRule height="20" />
							<mx:Label id="runType" text="Type: {repStatus.currentItem.runType}" />	<!-- Single End / Paired End-->
							<mx:VRule height="20" />
							<mx:Label id="runDate" text="Date: {repStatus.currentItem.runDate}" /> <!-- Start date of run -->
						</mx:HBox>
							<mx:Label id="lastUpdate" text="Last Update: {repStatus.currentItem.lastUpdated}" />
						
					</mx:VBox>					
					<!-- snippet here -->	
				</mx:Repeater>
			</mx:VBox>
	</mx:VBox>
</mx:TitleWindow>
