<?xml version="1.0" encoding="utf-8"?>
<!-- <mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" -->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:db="views.dashboard.*"
		   width="500" height="430" backgroundAlpha="1"
		   cornerRadius="12" creationComplete="init()"
		   horizontalScrollPolicy="off"
		   verticalScrollPolicy="off">   

	<mx:HTTPService 
		id="metrixInterface" 
		url="MetrixServerInterface.gx"
		resultFormat="e4x"
		destination="MetrixServerInterface"
		showBusyCursor="true"
		result="onGetMetrixInterface(event)"
		fault="parentApplication.onFailHttpRequest('Unable to get metrix interface result', event)"
		useProxy="false">
		
	</mx:HTTPService>

	<mx:XMLListCollection id="MIList" source="{metrixInterface.lastResult.Summary}"/> 

<mx:Script>
	<![CDATA[
		
		// Imports
		import flash.events.TimerEvent;
		import flash.utils.Timer;
		import mx.collections.ArrayCollection;
		import mx.collections.Sort;
		import mx.collections.SortField;
		import mx.collections.XMLListCollection;
		import mx.controls.Alert;
		import mx.controls.ProgressBar;
		import mx.events.CloseEvent;
		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;
		import mx.events.DragEvent;
		import mx.events.FlexEvent;
		import mx.events.ListEvent;
		import mx.managers.DragManager;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		import mx.utils.ObjectUtil;
		
		// Variables
		[Bindable]
		private var conStatus:Boolean = false;
				
		[Bindable]
		public var activeRuns:String = "0";
		
		[Bindable]
		private var finishedRuns:String = "0";
		
		[Bindable]
		private var haltedRuns:String = "0";
		
		[Bindable]
		private var turnRuns:String = "0";
		
		[Bindable]
		private var refreshTimer:Timer = new Timer(600000);
		
		public function init():void {
			// Retrieve initial SummaryCollection from MetrixServer using controller.
			metrixInterface.send();
			
			// Set Connection status default
			mainTitle.setStyle("fontWeight", "bold");
			mainTitle.setStyle("color", "red");
			conStatus = false;
		}
		
		public function refreshData(e:TimerEvent):void{
			metrixInterface.send();
			refreshTimer.removeEventListener(TimerEvent.TIMER, refreshData);
		}		
		
		private function onGetMetrixInterface(event:ResultEvent):void {
			if(event.result.name() == "SummaryCollection"){
				mainTitle.setStyle("fontWeight","bold");
				mainTitle.setStyle("color","green");
				conStatus = true;
				
				if(MIList.length == 0){
					refreshTimer.delay = 60000;
				}else{
					refreshTimer.delay = 600000;
				}
				
				// Set counts for global status counters
				// activeRuns
				if(metrixInterface.lastResult.@active != ""){
					activeRuns = metrixInterface.lastResult.@active;
				}
				
				// finishedRuns
				if(metrixInterface.lastResult.@finished != ""){
					finishedRuns = metrixInterface.lastResult.@finished;
				}
				
				// haltedRuns
				if(metrixInterface.lastResult.@error != ""){
					haltedRuns = metrixInterface.lastResult.@error;
				}
				
				// turnRuns
				if(metrixInterface.lastResult.@turn != ""){
					turnRuns = metrixInterface.lastResult.@turn;
				}
				
				// Set timer -- Polling with dynamic interval.
				refreshTimer.addEventListener(TimerEvent.TIMER, refreshData);
				refreshTimer.start();
			} else {
				Alert.show(event.result..ERROR.@message.toString(), "Error setting up Metrix Interface.");
			}
		}
	]]>
</mx:Script>
	<mx:VBox width="100%" height="100%">
		<mx:VBox width="90%" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
			<mx:HBox width="497" horizontalAlign="center" paddingTop="5">
				<mx:Label id="mainTitle" text="Sequencer Status" fontSize="18" />
			</mx:HBox>
		</mx:VBox>
		<mx:TabNavigator width="90%" height="90%" verticalGap="5" id="notificationTabs" paddingBottom="4" paddingRight="4" paddingLeft="4" paddingTop="2" backgroundColor="#DEDEDE">
			<mx:VBox verticalGap="6" label="Recent" width="90%" height="95%" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4" backgroundAlpha="1">
				<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle">
					<db:RunStatusTab filterState="0" />
				</mx:HBox>
			</mx:VBox>
			<mx:VBox verticalGap="6" label="Active ({activeRuns})" width="90%" height="95%" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4" backgroundAlpha="1">
				<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle">
					<db:RunStatusTab filterState="1" />
				</mx:HBox>
			</mx:VBox>
			<mx:VBox verticalGap="6" label="Halted ({haltedRuns})" width="90%" height="95%" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4" backgroundAlpha="1" includeInLayout="{parentApplication.isSuperAdmin}" enabled="{haltedRuns != '0'}">
				<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle">
					<db:RunStatusTab filterState="3" />
				</mx:HBox>
			</mx:VBox>
			<mx:VBox verticalGap="6" label="Finished ({finishedRuns})" width="90%" height="95%" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4" backgroundAlpha="1" includeInLayout="{parentApplication.isBillingAdmin}" enabled="{finishedRuns != '0'}" >
				<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle">
					<db:RunStatusTab filterState="2" />
				</mx:HBox>
			</mx:VBox>
			<mx:VBox verticalGap="6" label="Turn ({turnRuns})" width="90%" height="95%" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4" backgroundAlpha="1" includeInLayout="{parentApplication.isBillingAdmin}" enabled="{turnRuns != '0'}" >
				<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle">
					<db:RunStatusTab filterState="4" />
				</mx:HBox>
			</mx:VBox>
		</mx:TabNavigator>
	</mx:VBox>
</mx:Canvas>
