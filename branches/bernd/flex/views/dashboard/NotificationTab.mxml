<?xml version="1.0" encoding="utf-8"?>
<!-- <mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" -->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:db="views.dashboard.*"
		   width="480" height="340" backgroundAlpha="1"
		   cornerRadius="12" creationComplete="init()"
		   horizontalScrollPolicy="off"
		   verticalScrollPolicy="off">   

	<mx:HTTPService 
		id="notificationInterface" 
		url="GetNotification.gx"
		resultFormat="e4x"
		destination="NotificationInterface"
		showBusyCursor="true"
		result="onGetNotificationInterface(event)"
		fault="parentApplication.onFailHttpRequest('Unable to get notification interface result', event)"
		useProxy="false">
		
	</mx:HTTPService>

	<mx:XMLListCollection id="userData" />
	<mx:XMLListCollection id="workflowData" />
	<mx:XMLListCollection id="adminData" />
	<mx:XMLListCollection id="billingData" />
	<mx:XMLListCollection id="noteData" />

	<mx:Script>
		<![CDATA[
			import flash.events.TimerEvent;
			import flash.utils.Timer;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.menuClasses.MenuItemRenderer;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import views.workflow.NavWorkflowView;
			
			// Variables
			[Bindable]
			public var notificationState:int;
			
			[Bindable]
			public var userName:String;
			
			[Bindable]
			private var refreshTimer:Timer = new Timer(300000);
			
			public function init():void {
				notificationInterface.send();
			}
			
						
			public function refreshData(e:TimerEvent):void{
				notificationInterface.send();
				refreshTimer.removeEventListener(TimerEvent.TIMER, refreshData);
			}
			
			private function onGetNotificationInterface(event:ResultEvent):void {
				if(event.result.name() == "NotificationCollection"){
					
					// Set timer -- Polling with dynamic interval.
					refreshTimer.addEventListener(TimerEvent.TIMER, refreshData);
					refreshTimer.start();
					
					if(notificationState == 1){										// User Data
						userData.source = notificationInterface.lastResult.user;
						noteData = userData;
					}else if(notificationState == 2){								// Workflow Data
						workflowData.source = notificationInterface.lastResult.workflow;
					}else if(notificationState == 3){								// Admin Data
						adminData.source = notificationInterface.lastResult.admin;
						noteData = adminData;
					}else if(notificationState == 4){								// Billing Data
						billingData.source = notificationInterface.lastResult.billing;
						noteData = billingData;
					}

					var mySort:Sort = new Sort();
					var sortField:SortField = new SortField("@notificationId");
					sortField.descending = true;
					sortField.numeric = true;
					
					mySort.fields = [sortField];
					noteData.sort = mySort;
					noteData.refresh();
					
					userData.refresh();
					workflowData.refresh();

					if(noteData.length < 1 && notificationState == 1){
						emptyNote.visible = true;
						emptyNoteBox.visible = true;
						emptyNoteBox.includeInLayout = true;
						repStatus.includeInLayout = false;	
					}else{
						emptyNote.visible = false;
						emptyNote.includeInLayout = false;
						repStatus.includeInLayout = true;
					}
					
/*					if(workflowData.length == 0){
						emptyString.text = "No samples in Core Facility Workflow.";
						emptyNote.visible = true;
						repWorkflow.includeInLayout = false;
					}else{
						emptyNote.visible = false;
						repWorkflow.includeInLayout = true;
					}
					*/
				} else {
					Alert.show(event.result..ERROR.@message.toString(), "Error retrieving Notifications.");
				}
			}
			
			// Stringbuilder for notifications based on the tab-type (sourceType) and field values.
			public function repeatHandler(rep:Object):String
			{
				var notification:String;
				var sourceType:String = rep.currentItem.@sourceType;
				var state:String = rep.currentItem.@state;
				var type:String = rep.currentItem.@type;
				var expID:String = rep.currentItem.@expId;
				var fullname:String = rep.currentItem.@fullNameUser;
				
				if(sourceType == "USER"){
					notification = "Your";
					
					if(type == "REQUEST"){
						if(state == "NEW"){
							// A new request has been made.
							notification += " new request (" + expID + "R) has been received.";
						}else if(state == "EXIST"){
							// An existing request has been edited.
							notification += " existing request (" + expID + "R) revisions have been received.";
						}
					}else if(type == "ANALYSIS"){
						if(state == "NEW"){
							// A new analysis has been made.
							notification += " new analysis for " + expID + "R has been received.";							
						}else if(state == "EXIST"){
							// An existing analysis has been edited.
							notification += "n analysis for " + expID + "R has been edited.";
						}
					}
				}else if(sourceType == "WORKFLOW"){
					
				}else if(sourceType == "ADMIN"){
					notification = fullname;
					
					if(type == "REQUEST"){
						if(state == "NEW"){
							// A new request has been made.
							notification += " has submitted a new request (" + expID + "R).";
						}else if(state == "EXIST"){
							// An existing request has been edited.
							notification += " has edited an existing request (" + expID + "R).";
						}
					}else if(type == "ANALYSIS"){
						if(state == "NEW"){
							// A new analysis has been made.
							notification += " new analysis for " + expID + "R has been received.";							
						}else if(state == "EXIST"){
							// An existing analysis has been edited.
							notification += "n analysis for " + expID + " has been edited.";
						}
					}					
				}else if(sourceType == "BILLING"){
					if(state == "NEW"){
						// A new invoice has been made.
						notification = "The invoice for request " + expID + "R has been created.";
					}else if(state == "EXIST"){
						// An existing invoice has been edited.
						notification = "The invoice for " + expID + "R has been edited.";
					}					
				}
				
				return notification;
			}
			
			private function genXMLTag(item:Object):Object{
					var codeStep:String = item.@codeStep;
					var codeStepName:String = item.@codeStepName;

					if(codeStep.indexOf("QC") >= 0){
						codeStep = "QC";						
					}
					
					var outXml:String = '<menuitem label="'+ codeStepName + '" icon="iconLibPrep" codeStepNext="' + codeStep + '" />';
					var xml:XML = new XML(outXml);
					
					return xml;
			}
		]]>
	</mx:Script>
	
	<mx:VBox id="main" width="100%" paddingBottom="3" paddingLeft="3" paddingRight="3" paddingTop="6">
		<mx:VBox includeInLayout="{notificationState != 2 ? true : false}">
			<mx:Repeater id="repStatus" dataProvider="{noteData}" count="8">
				<mx:VBox  cornerRadius="7" borderStyle="solid" borderThickness="1" paddingBottom="4" paddingLeft="2" paddingRight="2" paddingTop="4" backgroundColor="#DEDEDE">
					<mx:HBox id="notificationItem" width="465">
						<mx:Label id="noteDate" text="{repStatus.currentItem.@date}" fontWeight="bold" />
						<mx:LinkButton id="noteButton" label="{repeatHandler(repStatus)}" click="Application.application.showExperimentById(event.currentTarget.getRepeaterItem().@expId);" />
					</mx:HBox>
				</mx:VBox>
			</mx:Repeater>
		</mx:VBox>
		<mx:VBox includeInLayout="{notificationState == 2 ? true : false}">
			<mx:Repeater id="repWorkflow" dataProvider="{workflowData}" count="8">
				<mx:HBox id="workflowItem" width="475"  cornerRadius="7" borderStyle="solid" borderThickness="1" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="4" backgroundColor="#DEDEDE">
					<mx:LinkButton id="wfStep" click="Application.application.showView(genXMLTag(event.currentTarget.getRepeaterItem()));" label="{repWorkflow.currentItem.@codeStepName}" fontWeight="bold" />
					<mx:Spacer width="100%" />
					<mx:Label id="wfCount" text="{repWorkflow.currentItem.@count}" />
				</mx:HBox>
			</mx:Repeater>
		</mx:VBox>
		
		<mx:VBox id="emptyNote"  height="200" width="351" visible="false" includeInLayout="false" verticalAlign="middle" fontSize="12" color="red" fontWeight="bold" paddingLeft="110">
			<mx:Spacer height="100" />
			<mx:HBox id="emptyNoteBox" horizontalAlign="center" visible="false" includeInLayout="false">
				<mx:Label id="emptyString" text="No available notifications." />
			</mx:HBox>
		</mx:VBox>
	</mx:VBox>
</mx:Canvas>