<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="Sample setup" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:util="views.util.*" 
	xmlns:renderers="views.renderers.*"
	 width="100%" height="100%" >
<mx:Script>
	<![CDATA[
		import mx.events.ListEvent;
		
		import views.renderers.CheckBoxIsSelectedChipType;
	
		private var validNumberOfSamples:Boolean = true;
		private var validConcentration:Boolean = true;

		
		[Bindable]
		public var barcodeQuestionVisible:Boolean = true;
	
		public function setPrimerDefaults():void {
			if (parentDocument.isMitSeqState()) {
				// Set defaults for primers				
				var idx:int = 0;
				for each(var primer:Object in this.primerCollection) {
					if (primer.@display == '15819F') {
						primer1Combo.selectedIndex = idx;
					}
					if (primer.@display == '16213F') {
						primer2Combo.selectedIndex = idx;
					}
					if (primer.@display == '48F') {
						primer3Combo.selectedIndex = idx;
					}
					if (primer.@display == 'S4') {
						primer4Combo.selectedIndex = idx;
					}
					if (primer.@display == '58R') {
						primer5Combo.selectedIndex = idx;
					}
					if (primer.@display == '653R') {
						primer6Combo.selectedIndex = idx;
					}
					idx++;
				} 
			}
		}
		
		public function getSelectedCodeBioanalyzerChipType():String {
			var selectedCode:String = '';
			if (this.currentState == 'QCSetupBioanalyzerState') {
				for each(var item:Object in this.bioanalyzerChipTypeGrid.dataProvider) {
					if (item.@isSelected != null && item.@isSelected == "true") {
						selectedCode = item.@value;
						break;
					}
				} 
			}
			return selectedCode;
		}
		public function propagateChipType():void {
       		var codeChipType:String = this.getSelectedCodeBioanalyzerChipType();
			for each (var sample:Object in parentDocument.samples) {
				sample.@codeBioanalyzerChipType = codeChipType;
			}
		}
		public function propagateSeqPrepByCore():void {
       		for each (var sample:Object in parentDocument.samples) {
				sample.@seqPrepByCore = (currentState == 'SolexaSetupState' ? 'Y' : 'N');
			}
		}
		
       	private function propagateSampleType():void {
			for each (var sample:Object in parentDocument.samples) {
				if (this.sampleTypeCombo.selectedItem != null) {
					sample.@idSampleType = this.sampleTypeCombo.selectedItem.@value;
				} else {
					sample.@idSampleType = null;
				}
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
		private function propagateOtherSamplePrepMethod():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@otherSamplePrepMethod = otherSamplePrepMethod.text;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
			
		}
       	private function propagateSeqLibProtocol():void {
			for each (var sample:Object in parentDocument.samples) {
				if (currentState == 'SolexaSetupPreppedState' || currentState == 'SolexaAmendPreppedState') {
					sample.@idSeqLibProtocol = this.seqLibProtocolCombo.selectedItem != null ? this.seqLibProtocolCombo.selectedItem.@value : '';
					sample.@seqPrepByCore = "N";
				} else {
					sample.@idSeqLibProtocol = '';
					sample.@seqPrepByCore = "Y";
				}
			}
			
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}		
       	public function propagateSampleOrganism():void {
			for each (var sample:Object in parentDocument.samples) {
				if (sampleOrganismCombo.selectedItem != null) {
					sample.@idOrganism = this.sampleOrganismCombo.selectedItem.@value;
				}
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
		private function propagateOtherSampleOrganism():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@otherOrganism = otherOrganism.text;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
			
		}
       	
		public function toggleOtherChipTypeSelections(codeSelected:String):void {
			
			for each(var item:Object in this.bioanalyzerChipTypeGrid.dataProvider) {
				if (item.@value != codeSelected) {
					item.@isSelected = "false";
				}
			}
		}
		
		private function propagateSeqRunType():void {
			if (parentDocument.isSolexaState()) {
				this.parentDocument.seqSetup1View.propagateSeqRunType();
			}
		}
		
		private function selectDefaultGenomeBuild():void {
			if (parentDocument.isSolexaState()) {
				this.parentDocument.seqSetup1View.selectDefaultGenomeBuild();
			}
		}

		
		public function getDefaultIdSeqRunType():String {
			var idSeqRunType:String = "";
			for each(var item:Object in this.parentDocument.seqSetup1View.seqRunRepeater.dataProvider) {
				if (item.@display.toUpperCase().indexOf("SINGLE") > -1) {
					idSeqRunType = item.@value;
					break;
				}
			}
			return idSeqRunType;
		}
		
		private function toggleChipTypeCheck(event:ListEvent):void {
   			if (event.columnIndex == 0) {
	   			return;
   			}
   			if (bioanalyzerChipTypeGrid.selectedItem.@isSelected == "true") {
				bioanalyzerChipTypeGrid.selectedItem.@isSelected = "false";
			} else {
				bioanalyzerChipTypeGrid.selectedItem.@isSelected = "true";
			}
			toggleOtherChipTypeSelections(bioanalyzerChipTypeGrid.selectedItem.@value);
          	// initialize the samples grid
          	parentDocument.samplesView.initializeSamplesGrid();
          	// propagate selected chip type to samples
          	propagateChipType();       	
          	
            checkRequiredChipType();
        }
		private function onNumberOfSamplesChanged():void {
			parentDocument.samplesView.initializeSamplesGrid();
			checkSampleSetupCompleteness();
		}
        
        public function checkRequiredChipType():void {
			// Required field
          	if (this.getSelectedCodeBioanalyzerChipType() == '') {
          		chipTypeBox.styleName = "requiredBoxThick";
          	} else {
          		chipTypeBox.styleName = "normalBoxThick";
          	}        	
        }
        
        public function checkForSampleTypeCompatibility():void {
        	if (!this.parentDocument.isSampleTypeCompatibile()) {
        		if (parentDocument.isEditState()) {
					var sampleType:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SampleType', parentDocument.request.@idSampleTypeDefault);
					var sampleTypeName:String = sampleType.@display.toString();
        			mx.controls.Alert.show('Sample type ' + sampleTypeName + 
	        		  ' cannot be used for ' + parentDocument.applicationName + 
	        		  ' experiments.  Please change the microarray application.',
	        		  'Warning');
        			
        		} else {
	        		this.parentDocument.userWarningsSampleSetup += 'Sample type ' + this.sampleTypeCombo.selectedItem.@display + 
	        		' cannot be used for ' + parentDocument.applicationName + 
	        		' experiments.  Please change the sample type or microarray application.';
        			
        		}        		
        	} 
        } 

      	public function checkSampleSetupCompleteness():Boolean {
        	var isComplete:Boolean = false;
        	if (parentDocument == null) {
        		return isComplete;
        	}
        	
        	parentDocument.userWarningsSampleSetup = "";
        	if (parentDocument.isEditState()) {
        		isComplete = true;
        	} else if (currentState == 'MicroarrayAmendState') {
	        	if (this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '' &&
	        	    hasOrganism()) {
		        	isComplete = true;
	        	 }
        	
        	} else if (parentDocument.isSolexaAmendState()) {
	        	if (this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '' &&
	        	    hasOrganism() &&
	        	    this.barcodeRadioGroup.selectedValue != null && this.barcodeRadioGroup.selectedValue != '') {
	        	    	
	        	    if (currentState == 'SolexaAmendPreppedState') {
 						if (this.seqLibProtocolCombo.selectedItem != null && this.seqLibProtocolCombo.selectedItem.@value != '') {
 							isComplete = true;
 						}	        	    	
	        	    } else {
		        	    isComplete = true;
	        	    }
	        	    
	        	 }
        	
        	} else if (parentDocument.isSolexaState()) {
	        	if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
	        	    this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '' &&
	        	    hasOrganism() &&
	        	    this.barcodeRadioGroup.selectedValue != null && this.barcodeRadioGroup.selectedValue != '') {
	        	    	
	        	    if (currentState == 'SolexaSetupPreppedState') {
 						if (this.seqLibProtocolCombo.selectedItem != null && this.seqLibProtocolCombo.selectedItem.@value != '') {
 							isComplete = true;
 						}	        	    	
	        	    } else {
		        	    isComplete = true;
	        	    }
	        	    
	        	 }
        	
        	} else if (parentDocument.isQCState()) {
	        	if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
	        	    this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '') {
	        	    	
	        	   	// Only need to check if chip type selected if this is 
	        	   	// a bioanalyzer qc request.
	        	    if (this.currentState == 'QCSetupBioanalyzerState') {
		        		for each(var chipType:Object in this.bioanalyzerChipTypeGrid.dataProvider) {
		        			if (chipType.@isSelected == "true") {
		        				isComplete = true;
		        				break;
		        			}
		        		}	        	    	
	        	    } else {
	        	    	isComplete = true;
	        	    }
	        	}
        	} else if (parentDocument.isCapSeqState()) {
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
					this.sampleDropOffLocationCombo.selectedItem != null && this.sampleDropOffLocationCombo.selectedItem.@value != '') {
					isComplete = true;
					if (this.containerTypePlate.selected) {
						if (this.capSeqNumPlatesRadioGroup.selectedValue == null) {
							isComplete = false;
						}
					}
				}
			} else if (parentDocument.isFragAnalState()) {
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '') {
					var num:int = Number(this.numberOfSamples.text);
					if (num > 0 && num < 97) {
						for (var x:int = 0; x < assayCheckBox.length; x++) {
							if (assayCheckBox[x].selected) {
								isComplete = true;
								break;
							}
						}
					}
				}
			} else if (parentDocument.isMitSeqState()) {
				this.primer1Combo.setStyle("fillColors", ["white", "white"]);
				this.primer2Combo.setStyle("fillColors", ["white", "white"]);
				this.primer3Combo.setStyle("fillColors", ["white", "white"]);
				this.primer4Combo.setStyle("fillColors", ["white", "white"]);
				this.primer5Combo.setStyle("fillColors", ["white", "white"]);
				this.primer6Combo.setStyle("fillColors", ["white", "white"]);
				var foundDupe:Boolean = false;
				if (this.primer1Combo.selectedItem.@value == primer2Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer1Combo.setStyle("fillColors", ["red", "white"]);
					this.primer2Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer1Combo.selectedItem.@value == primer3Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer1Combo.setStyle("fillColors", ["red", "white"]);
					this.primer3Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer1Combo.selectedItem.@value == primer4Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer1Combo.setStyle("fillColors", ["red", "white"]);
					this.primer4Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer1Combo.selectedItem.@value == primer5Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer1Combo.setStyle("fillColors", ["red", "white"]);
					this.primer5Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer1Combo.selectedItem.@value == primer6Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer1Combo.setStyle("fillColors", ["red", "white"]);
					this.primer6Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer2Combo.selectedItem.@value == primer3Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer2Combo.setStyle("fillColors", ["red", "white"]);
					this.primer3Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer2Combo.selectedItem.@value == primer4Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer2Combo.setStyle("fillColors", ["red", "white"]);
					this.primer4Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer2Combo.selectedItem.@value == primer5Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer2Combo.setStyle("fillColors", ["red", "white"]);
					this.primer5Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer2Combo.selectedItem.@value == primer6Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer2Combo.setStyle("fillColors", ["red", "white"]);
					this.primer6Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer3Combo.selectedItem.@value == primer4Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer3Combo.setStyle("fillColors", ["red", "white"]);
					this.primer4Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer3Combo.selectedItem.@value == primer5Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer3Combo.setStyle("fillColors", ["red", "white"]);
					this.primer5Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer3Combo.selectedItem.@value == primer6Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer3Combo.setStyle("fillColors", ["red", "white"]);
					this.primer6Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer4Combo.selectedItem.@value == primer5Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer4Combo.setStyle("fillColors", ["red", "white"]);
					this.primer5Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer4Combo.selectedItem.@value == primer6Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer4Combo.setStyle("fillColors", ["red", "white"]);
					this.primer6Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.primer5Combo.selectedItem.@value == primer6Combo.selectedItem.@value) {
					foundDupe = true;
					this.primer5Combo.setStyle("fillColors", ["red", "white"]);
					this.primer6Combo.setStyle("fillColors", ["red", "white"]);
				}
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
					this.primer1Combo.selectedItem  != null && this.primer1Combo.selectedItem.@value != '' &&
					this.primer2Combo.selectedItem  != null && this.primer2Combo.selectedItem.@value != '' &&
					this.primer3Combo.selectedItem  != null && this.primer3Combo.selectedItem.@value != '' &&
					this.primer4Combo.selectedItem  != null && this.primer4Combo.selectedItem.@value != '' &&
					this.primer5Combo.selectedItem  != null && this.primer5Combo.selectedItem.@value != '' &&
					this.primer6Combo.selectedItem  != null && this.primer6Combo.selectedItem.@value != '') {
					if (!foundDupe) {
						isComplete = true;
					}
				}
			} else if (parentDocument.isCherryPickState()) {
				var cherryNumPlates:int = Number(this.cherryNumSourcePlates.text);
				if (cherryNumPlates > 0 && cherryNumPlates < 13
					&& this.cherryNumDestinationWellsRadioGroup.selectedValue != null && this.cherryNumDestinationWellsRadioGroup.selectedValue != ''
					&& (cherryNumPlates < 1 || (cherryPlate1Name.text != null && cherryPlate1Name.text != ''))
					&& (cherryNumPlates < 2 || (cherryPlate2Name.text != null && cherryPlate2Name.text != ''))
					&& (cherryNumPlates < 3 || (cherryPlate3Name.text != null && cherryPlate3Name.text != ''))
					&& (cherryNumPlates < 4 || (cherryPlate4Name.text != null && cherryPlate4Name.text != ''))
					&& (cherryNumPlates < 5 || (cherryPlate5Name.text != null && cherryPlate5Name.text != ''))
					&& (cherryNumPlates < 6 || (cherryPlate6Name.text != null && cherryPlate6Name.text != ''))
					&& (cherryNumPlates < 7 || (cherryPlate7Name.text != null && cherryPlate7Name.text != ''))
					&& (cherryNumPlates < 8 || (cherryPlate8Name.text != null && cherryPlate8Name.text != ''))
					&& (cherryNumPlates < 9 || (cherryPlate9Name.text != null && cherryPlate9Name.text != ''))
					&& (cherryNumPlates < 10 || (cherryPlate10Name.text != null && cherryPlate10Name.text != ''))
					&& (cherryNumPlates < 11 || (cherryPlate11Name.text != null && cherryPlate11Name.text != ''))
					&& (cherryNumPlates < 12 || (cherryPlate12Name.text != null && cherryPlate12Name.text != ''))) {
					isComplete = true;	        	    	
	        	}
			}  else if (parentDocument.isIScanState()) {
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' ) {
					isComplete = true;
				}
			} else if (parentDocument.isSequenomState()) {
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
					this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '') {
					if (this.radioGroupSeqApp.selectedValue != null && this.radioGroupSeqApp.selectedValue == "OTHER") {
						if ( this.sequenomApplicationDesc.text != null && this.sequenomApplicationDesc.text != ''){
							isComplete = true;
						}
					} else if (this.radioGroupSeqApp.selectedValue != null ){
						isComplete = true;
					}
				}
			} else if (parentDocument.isClinicalSequenomState()) {
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
					this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '') {
					isComplete = true;	        	    	
				}
			} else {
				if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
					this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '' &&
					hasOrganism()) {
					isComplete = true;	        	    	
				}
			}
        	
        	if (!this.parentDocument.isCherryPickState() && 
				(!this.validNumberOfSamples || !this.validConcentration)) {
        		isComplete = false;    	
        	}
			        	
        	if (parentDocument.isSolexaState()) {
        		parentDocument.seqSetup1View.enabled = isComplete; 
        	}else {
	    		parentDocument.samplesView.enabled = isComplete; 
        	}
    			
			if (parentDocument.theTab.contains(parentDocument.annotationView)) {
				parentDocument.annotationView.enabled = isComplete;
	    	}
    		parentDocument.enableNextButtons();

        	callLater(postSampleSetupCompleteness, [isComplete]);
        	
    		return isComplete;
    	    	
        }
		
		private function hasOrganism():Boolean {
			if (this.sampleOrganismCombo.selectedItem != null && this.sampleOrganismCombo.selectedItem.@display == 'Other' && this.otherOrganism.text != '') {
				return true;
			} else if (this.sampleOrganismCombo.selectedItem != null && this.sampleOrganismCombo.selectedItem.@value != '' && this.sampleOrganismCombo.selectedItem.@display != 'Other') {
				return true;
			} else {
				return false;
			}
		}
        
        private function postSampleSetupCompleteness(isComplete:Boolean):void {
	    		
			if (parentDocument == null) {
				return;
			}
	    	if (!isComplete) {
	        	if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
		        	parentDocument.hybSetupView.enabled = false;
	        	} 
	
	        	if (parentDocument.theTab.contains(parentDocument.hybsView)) {
		        	parentDocument.hybsView.enabled = false;
	        	} 
	
				if (parentDocument.theTab.contains(parentDocument.confirmView)) {
	        		parentDocument.confirmView.enabled = false;
				}
    		} else {
    			if (parentDocument.isSolexaState()) {
        			parentDocument.seqSetup1View.checkSeqSetup1Completeness();				
    			} else {
	    			parentDocument.samplesView.checkSamplesCompleteness();
    			}
    		}
        	
        }
        
        private function handleInvalidNumberOfSamples(eventObject:Event):void {
        	this.validNumberOfSamples = false;
        	this.checkSampleSetupCompleteness();
        }
        private function handleValidNumberOfSamples(eventObject:Event):void {
        	this.validNumberOfSamples = true;
        	this.checkSampleSetupCompleteness();
        }
        private function handleInvalidConcentration(eventObject:Event):void {
        	this.validConcentration = false;
        	this.checkSampleSetupCompleteness();
        }
        private function handleValidConcentration(eventObject:Event):void {
        	this.validConcentration = true;
        	this.checkSampleSetupCompleteness();
        }

		public function pickSeqApp():void {
			
			this.sampleTypeCombo.selectedIndex = -1;
			parentDocument.filteredSampleTypeList.refresh();
			if (parentDocument.filteredSampleTypeList.length == 2) {
				this.sampleTypeCombo.selectedIndex = 1;
			}
			
			if (this.parentDocument.isSolexaState()) {
				parentDocument.seqLibProtocolList.refresh();				
			}
			
			this.pickDefaultSeqLibProtocol();
			
			this.checkSampleSetupCompleteness();
			
		}
		
		private function pickDefaultSeqLibProtocol():void {
			if (this.currentState == "SolexaSetupPreppedState" || this.currentState == 'SolexaAmendPreppedState') {
				this.seqLibProtocolCombo.visible = true;
			} else if (this.currentState == "SolexaSetupState" || this.currentState == "SolexaAmendState") {
				this.seqLibProtocolCombo.visible = false;
			} else {
				return;
			}
			
			this.seqLibProtocolCombo.selectedIndex = -1;
			if (parentDocument.seqLibProtocolList.length == 2) {
				this.seqLibProtocolCombo.selectedIndex = 1;
				this.propagateSeqLibProtocol();
			}			
		}
		
		public function pickRadioBarcoding():void {

			if (this.barcodeRadioGroup.selectedValue != null && this.barcodeRadioGroup.selectedValue == 'N') {
				this.clearBarcodingFields();				
			}
			this.checkSampleSetupCompleteness();
			this.parentDocument.seqSetup1View.pickBarcodeScheme();
		}
		
		private function pickQCApp():void {
			if (this.radioGroupQCApp.selectedValue != null && this.radioGroupQCApp.selectedValue == "BIOAN") {
				this.currentState = "QCSetupBioanalyzerState";
				this.parentDocument.samplesView.chipTypeColumn.visible = true;
				this.parentDocument.confirmView.chipTypeConfirmColumn.visible = true;
			} else {
				this.currentState = "QCSetupState";
				this.parentDocument.samplesView.chipTypeColumn.visible = false;
				this.parentDocument.confirmView.chipTypeConfirmColumn.visible = false;
			}
			
			if (this.radioGroupQCApp.selectedValue != null) {
				this.qcAppBox.styleName = 'normalBox';
				var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', radioGroupQCApp.selectedValue);
				this.parentDocument.applicationName = application.@display;
			} else {
				this.qcAppBox.styleName = 'requiredBox';
				this.parentDocument.applicationName = '';
			}
			this.sampleTypeCombo.selectedIndex = -1;
			parentDocument.filteredSampleTypeList.refresh();
			if (parentDocument.filteredSampleTypeList.length == 2) {
				this.sampleTypeCombo.selectedIndex = 1;
			}
			this.checkSampleSetupCompleteness();
		}
		
		private function pickSequenomApp():void {
			if (this.radioGroupSeqApp.selectedValue != null && this.radioGroupSeqApp.selectedValue == "OTHER") {
				sequenomPanelContainer.visible = true;
				sequenomPanelContainer.visible = true;
				sequenomApplicationDesc.styleName = 'requiredBox';
			} else {
				sequenomPanelContainer.visible = false;
				sequenomPanelContainer.visible = false;
				sequenomApplicationDesc.styleName = 'normalBox';
				sequenomApplicationDesc.text = '';
			}
			if (this.radioGroupSeqApp.selectedValue != null) {
				this.seqAppBox.styleName = 'normalBox';
				var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', radioGroupSeqApp.selectedValue);
				this.parentDocument.applicationName = application.@display;
			} else {
				this.seqAppBox.styleName = 'requiredBox';
				this.parentDocument.applicationName = '';
			}
			this.checkSampleSetupCompleteness();
		}
		
		private function pickSampleType():void {
			if (parentDocument.isSequenomState() || parentDocument.isClinicalSequenomState()) {
				
				propagateSampleType();
				parentDocument.samplesView.initializeSamplesGrid();

				checkSampleSetupCompleteness();
				return;
			}
			// Select the default organism on sample setup if the request category specifies one
			if (!parentDocument.isQCState()) {
				if (sampleOrganismCombo.selectedItem == null || sampleOrganismCombo.selectedItem.@value == '') {
					var requestCategory:Object = parentDocument.getRequestCategory();
					if (requestCategory.@idOrganism != '') {
						var organism:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.OrganismLite',requestCategory.@idOrganism);
						if (organism is XMLList) {
							this.sampleOrganismCombo.selectedItem = organism[0];
							return;
							
						} else {
							this.sampleOrganismCombo.selectedItem = organism;
							return;
						}
					} 
					
				}
			}
			
			propagateSampleType();
			parentDocument.samplesView.initializeSamplesGrid();

			checkSampleSetupCompleteness();
			this.checkForSampleTypeCompatibility();
		}
		
		private function pickSampleDropOffLocation():void {
			parentDocument.samplesView.initializeSamplesGrid();
			checkSampleSetupCompleteness();
		}
		
		private function pickOrganism():void {
			
			// Clear other organism if non 'Other' selected
			if (this.sampleOrganismCombo.selectedItem == null || sampleOrganismCombo.selectedItem.@display != 'Other') {
				otherOrganism.text = '';
				propagateOtherSampleOrganism();
			}			
			parentDocument.samplesView.initializeSamplesGrid();
			
			if (parentDocument.annotationView != null) {
				parentDocument.annotationView.onPropertyRefreshed(null);
			}
			
			if (parentDocument.isMicroarrayState()) {
				parentDocument.hybSetupView.checkForSlideProductWarning();
			}
			
			propagateSampleOrganism();
			checkSampleSetupCompleteness();

			if (this.currentState == 'SolexaSetupState' ||
			    this.currentState == 'SolexaSetupPreppedState' ||
			    this.currentState == 'SolexaAmendState' ||
			    this.currentState == 'SolexaAmendPreppedState') { 
				parentDocument.filteredGenomeBuildList.refresh();
				selectDefaultGenomeBuild();			
			}
			
		}
		
		private function pickSeqLibProtocol():void {
			parentDocument.samplesView.initializeSamplesGrid();
			propagateSeqLibProtocol();
			checkSampleSetupCompleteness();
			parentDocument.filteredSeqRunTypeList.refresh();	
			
			
		}
		
		private function clearBarcodingFields():void {
			if (parentDocument.isEditState() || parentDocument.isAmendState()) {
				return;
			}
			for each(var s:Object in parentDocument.samples) {
				s.@idOligoBarocode = '';
				s.@multiplexGroupNumber = '';
				s.@barcodeSequence = '';
			}
		}
		
		
		private function pickSeqPrepState():void {
			parentDocument.showHideBarcodingQuestion();
			if (seqPrepRadioGroup.selectedValue ==  null || seqPrepRadioGroup.selectedValue == 'Y') {
				if (parentDocument.isAmendState()) {
					currentState = 'SolexaAmendState';
				} else {
					currentState = 'SolexaSetupState';
				}
			} else {
				if (parentDocument.isAmendState()) {
					currentState = 'SolexaAmendPreppedState';				
				} else {
					currentState = 'SolexaSetupPreppedState';
				}
			}
			this.propagateSeqPrepByCore();
			pickDefaultSeqLibProtocol();
			propagateSeqLibProtocol();
			clearBarcodingFields();
			parentDocument.seqLibProtocolList.refresh();
			checkSampleSetupCompleteness();
			parentDocument.samplesView.showHideColumns();
			this.seqLibProtocolCombo.visible = samplesAlreadyPreppedCheckbox.selected; 
		}
		
		private function pickContainerType():void {
			
			if (this.numberOfSamples.text == '') {
				this.containerTypeRadioGroup.selectedValue = "TUBE";
				this.containerTypePlate.enabled = true;
				this.containerTypeTube.enabled = true;
			} else {
				var sampleCount:int = parseInt(numberOfSamples.text);
				if (sampleCount < 32) {
					this.containerTypeRadioGroup.selectedValue = "TUBE";
					this.containerTypeTube.enabled = true;
					this.containerTypePlate.enabled = false;
				} else {
					this.containerTypePlate.enabled = true;
					this.containerTypeTube.enabled = true;
				}
			} 
			callLater(onContainerTypeChange);

		}
		
		private function onContainerTypeChange():void {
			parentDocument.request.@containerType = this.containerTypeRadioGroup.selectedValue;
			if (containerTypeRadioGroup.selectedValue == 'PLATE') {
				if (this.capSeqNumPlatesRadioGroup.selectedValue == null || this.capSeqNumPlatesRadioGroup.selectedValue == '') {
					this.capSeqNumPlatesRadioGroup.selectedValue="1";
					this.onCapSeqNumPlatesChanged();
				}
			} else {
				this.capSeqNumPlatesRadioGroup.selection = null;
				this.capSeqNumPlatesRadioGroup.selectedValue = null;
				showFourPlateWarning();
			}
			parentDocument.samplesView.samplesGrid.dataProvider = null;
			parentDocument.samplesView.propagateContainerType(containerTypeRadioGroup.selectedValue == 'PLATE' ? 'Plate' : 'Tube');
			parentDocument.samplesView.showHideColumns();
			
			if (parentDocument.theTab.contains(parentDocument.confirmView)) {
				parentDocument.confirmView.showHideColumns();
			}
		}
		
		private function onCapSeqNumPlatesChanged():void {
			if (capSeqNumPlatesRadioGroup.selectedValue != null) {
				parentDocument.numCapSeqPlates = this.capSeqNumPlatesRadioGroup.selectedValue;
				showFourPlateWarning();
				parentDocument.samplesView.initializeSamplesGrid();
			}
		}
		
		private function showFourPlateWarning():void {
			if (this.containerTypeRadioGroup.selectedValue == 'PLATE' && parentDocument.numCapSeqPlates == 4) {
				this.fourPlateWarningLabel.visible = true;
				this.fourPlateWarningLabel.includeInLayout = true;
			} else {
				this.fourPlateWarningLabel.visible = false;
				this.fourPlateWarningLabel.includeInLayout = false;
			}
		}
		
		private function onSequenomContainerTypeChange():void {
			parentDocument.request.@containerType = this.sequenomContainerTypeRadioGrp.selectedValue;
			if (sequenomContainerTypeRadioGrp.selectedValue == 'PLATE') {
				if (this.sequenomNumSourcePlates.text == null || this.sequenomNumSourcePlates.text == '') {
					this.sequenomNumSourcePlates.text = "1";
					
					this.onSequenomNumSourcePlatesChanged();
				} 
			} else {
				// SET ALL PLATE NAMES TO '' AND PROPOGATE TO THE SAMPLES
				this.sequenomNumSourcePlates.text = '';
			}
			parentDocument.samplesView.samplesGrid.dataProvider = null;
			parentDocument.samplesView.propagateContainerType(sequenomContainerTypeRadioGrp.selectedValue == 'PLATE' ? 'Plate' : 'Tube');
			parentDocument.samplesView.showHideColumns();
			if (parentDocument.theTab.contains(parentDocument.confirmView)) {
				parentDocument.confirmView.showHideColumns();
			}
		}
		
		public function getSamplePrimerList():String {
			var list:String = "";
			list = addPrimerToList(list, this.primer1Combo);
			list = addPrimerToList(list, this.primer2Combo);
			list = addPrimerToList(list, this.primer3Combo);
			list = addPrimerToList(list, this.primer4Combo);
			list = addPrimerToList(list, this.primer5Combo);
			list = addPrimerToList(list, this.primer6Combo);
			return list;
		}
		
		private function addPrimerToList(list:String, combo:ComboBox):String {
			if (combo.selectedItem != null && combo.selectedItem.@value != '') {
				if (list.length > 0) {
					list += ", ";
				}
				list += combo.selectedItem.@display;
			}
			return list;
		}
		
		private function getPlateName(idx:int):String {
			if (idx == 1) return this.cherryPlate1Name.text
			if (idx == 2) return this.cherryPlate2Name.text
			if (idx == 3) return this.cherryPlate3Name.text
			if (idx == 4) return this.cherryPlate4Name.text
			if (idx == 5) return this.cherryPlate5Name.text
			if (idx == 6) return this.cherryPlate6Name.text
			if (idx == 7) return this.cherryPlate7Name.text
			if (idx == 8) return this.cherryPlate8Name.text
			if (idx == 9) return this.cherryPlate9Name.text
			if (idx == 10) return this.cherryPlate10Name.text
			if (idx == 11) return this.cherryPlate11Name.text
			if (idx == 12) return this.cherryPlate12Name.text
			return '';
		}
		
		public function onCherryNumSourcePlatesChanged():void {
			var numPlates:int = Number(this.cherryNumSourcePlates.text);
			this.cherryPlate1Box.visible = (numPlates > 0);
			this.cherryPlate2Box.visible = (numPlates > 1);
			this.cherryPlate3Box.visible = (numPlates > 2);
			this.cherryPlate4Box.visible = (numPlates > 3);
			this.cherryPlate5Box.visible = (numPlates > 4);
			this.cherryPlate6Box.visible = (numPlates > 5);
			this.cherryPlate7Box.visible = (numPlates > 6);
			this.cherryPlate8Box.visible = (numPlates > 7);
			this.cherryPlate9Box.visible = (numPlates > 8);
			this.cherryPlate10Box.visible = (numPlates > 9);
			this.cherryPlate11Box.visible = (numPlates > 10);
			this.cherryPlate12Box.visible = (numPlates > 11);
			parentDocument.samplesView.initializeSamplesGrid();
			while (parentDocument.cherryPlateListCollection.length > numPlates) {
				parentDocument.cherryPlateListCollection.removeItemAt(parentDocument.cherryPlateListCollection.length-1);
			}
			var startIdx:int = parentDocument.cherryPlateListCollection.length;
			for(var idx:int=startIdx; idx < numPlates+1; idx++) {
				var node:XML = new XML("<Plate name='" + getPlateName(idx) + "'/>");
				parentDocument.cherryPlateListCollection.addItem(node);
			}
			parentDocument.cherryPlateList = parentDocument.cherryPlateListCollection.copy();
		}
		
		private function onCherryPlateNameChanged():void {
			var numPlates:int = Number(this.cherryNumSourcePlates.text);
			var idx:int=0;
			for each (var plate:Object in parentDocument.cherryPlateListCollection) {
				plate.@name = getPlateName(idx);
				idx++;
			}
			checkSampleSetupCompleteness();
			parentDocument.samplesView.initializeSamplesGrid();		
			parentDocument.cherryPlateList = parentDocument.cherryPlateListCollection.copy();
		}
		
		public function updateIScanPlateList(plateList:XMLList):void {
			if ( plateList == null || parentDocument == null ) {
				return;
			}
			parentDocument.iScanPlateList = plateList;
			parentDocument.iScanPlateListCollection.source = plateList;
			parentDocument.numIScanPlates = plateList.length();
			this.iScanNumSourcePlates.text = plateList.length();
			this.updatePlateNames();
			this.onIScanNumSourcePlatesChanged();
		}
		
		public function updatePlateNames():void{
			var idx:int=1;
			for each (var plate:Object in parentDocument.iScanPlateListCollection) {
			    setIScanPlateName(idx, plate.@name);
				idx++;
			}
		}
		
		public function getIScanPlateName(idx:int):String {
			if (idx == 1) return this.iScanPlate1Name.text
			if (idx == 2) return this.iScanPlate2Name.text
			if (idx == 3) return this.iScanPlate3Name.text
			if (idx == 4) return this.iScanPlate4Name.text
			if (idx == 5) return this.iScanPlate5Name.text
			if (idx == 6) return this.iScanPlate6Name.text
			if (idx == 7) return this.iScanPlate7Name.text
			if (idx == 8) return this.iScanPlate8Name.text
			if (idx == 9) return this.iScanPlate9Name.text
			if (idx == 10) return this.iScanPlate10Name.text
			if (idx == 11) return this.iScanPlate11Name.text
			if (idx == 12) return this.iScanPlate12Name.text
			return '';
		}
		
		public function setIScanPlateName(idx:int, name:String):void {
			if (idx == 1)  this.iScanPlate1Name.text = name;
			if (idx == 2)  this.iScanPlate2Name.text = name;
			if (idx == 3)  this.iScanPlate3Name.text = name;
			if (idx == 4)  this.iScanPlate4Name.text = name;
			if (idx == 5)  this.iScanPlate5Name.text = name;
			if (idx == 6)  this.iScanPlate6Name.text = name;
			if (idx == 7)  this.iScanPlate7Name.text = name;
			if (idx == 8)  this.iScanPlate8Name.text = name;
			if (idx == 9)  this.iScanPlate9Name.text = name;
			if (idx == 10)  this.iScanPlate10Name.text = name;
			if (idx == 11)  this.iScanPlate11Name.text = name;
			if (idx == 12)  this.iScanPlate12Name.text = name;
		}
		
		public function getSequenomPlateName(idx:int):String {
			if (idx == 1) return this.sequenomPlate1Name.text
			if (idx == 2) return this.sequenomPlate2Name.text
			if (idx == 3) return this.sequenomPlate3Name.text
			if (idx == 4) return this.sequenomPlate4Name.text
			if (idx == 5) return this.sequenomPlate5Name.text
			if (idx == 6) return this.sequenomPlate6Name.text
			if (idx == 7) return this.sequenomPlate7Name.text
			if (idx == 8) return this.sequenomPlate8Name.text
			if (idx == 9) return this.sequenomPlate9Name.text
			if (idx == 10) return this.sequenomPlate10Name.text
			if (idx == 11) return this.sequenomPlate11Name.text
			if (idx == 12) return this.sequenomPlate12Name.text
			return '';
		}
		
		public function setSequenomPlateName(idx:int, name:String):void {
			if (idx == 1)  this.sequenomPlate1Name.text = name;
			if (idx == 2)  this.sequenomPlate2Name.text = name;
			if (idx == 3)  this.sequenomPlate3Name.text = name;
			if (idx == 4)  this.sequenomPlate4Name.text = name;
			if (idx == 5)  this.sequenomPlate5Name.text = name;
			if (idx == 6)  this.sequenomPlate6Name.text = name;
			if (idx == 7)  this.sequenomPlate7Name.text = name;
			if (idx == 8)  this.sequenomPlate8Name.text = name;
			if (idx == 9)  this.sequenomPlate9Name.text = name;
			if (idx == 10)  this.sequenomPlate10Name.text = name;
			if (idx == 11)  this.sequenomPlate11Name.text = name;
			if (idx == 12)  this.sequenomPlate12Name.text = name;
		}
		
		public function onIScanNumSourcePlatesChanged():void {
			var numPlates:int = Number(this.iScanNumSourcePlates.text);
			parentDocument.numIScanPlates = numPlates;
			this.iScanPlate1Box.visible = (numPlates > 0);
			this.iScanPlate2Box.visible = (numPlates > 1);
			this.iScanPlate3Box.visible = (numPlates > 2);
			this.iScanPlate4Box.visible = (numPlates > 3);
			this.iScanPlate5Box.visible = (numPlates > 4);
			this.iScanPlate6Box.visible = (numPlates > 5);
			this.iScanPlate7Box.visible = (numPlates > 6);
			this.iScanPlate8Box.visible = (numPlates > 7);
			this.iScanPlate9Box.visible = (numPlates > 8);
			this.iScanPlate10Box.visible = (numPlates > 9);
			this.iScanPlate11Box.visible = (numPlates > 10);
			this.iScanPlate12Box.visible = (numPlates > 11);
			
			parentDocument.iScanPlateListCollection.removeAll();

			var startIdx:int = 1;
			for(var idx:int=startIdx; idx < numPlates+1; idx++) {
				var node:XML = new XML("<Plate name='" + getIScanPlateName(idx) + "'/>");
				parentDocument.iScanPlateListCollection.addItem(node);
			}
			parentDocument.iScanPlateList = parentDocument.iScanPlateListCollection.copy();
		}
		
		public function onSequenomNumSourcePlatesChanged():void {
			var numPlates:int = Number(this.sequenomNumSourcePlates.text);
			parentDocument.numIScanPlates = numPlates;
			this.sequenomPlate1Box.visible = (numPlates > 0);
			this.sequenomPlate2Box.visible = (numPlates > 1);
			this.sequenomPlate3Box.visible = (numPlates > 2);
			this.sequenomPlate4Box.visible = (numPlates > 3);
			this.sequenomPlate5Box.visible = (numPlates > 4);
			this.sequenomPlate6Box.visible = (numPlates > 5);
			this.sequenomPlate7Box.visible = (numPlates > 6);
			this.sequenomPlate8Box.visible = (numPlates > 7);
			this.sequenomPlate9Box.visible = (numPlates > 8);
			this.sequenomPlate10Box.visible = (numPlates > 9);
			this.sequenomPlate11Box.visible = (numPlates > 10);
			this.sequenomPlate12Box.visible = (numPlates > 11);
			
			parentDocument.iScanPlateListCollection.removeAll();
			
			var startIdx:int = 1;
			for(var idx:int=startIdx; idx < numPlates+1; idx++) {
				var node:XML = new XML("<Plate name='" + getSequenomPlateName(idx) + "'/>");
				parentDocument.iScanPlateListCollection.addItem(node);
			}
			parentDocument.iScanPlateList = parentDocument.iScanPlateListCollection.copy();
			parentDocument.samplesView.initializeSamplesGrid();
		}
		
		public function propogatePlateNames(plateNumber:int):void {
			if ( !parentDocument.isIScanState() && !parentDocument.isSequenomState() ) {
				return;
			}
			if ( plateNumber < 0 || plateNumber > 11 ) {
				return;
			}
			var startInd:int = plateNumber * 96;
			for (var psIdx:int = startInd; psIdx < startInd+96; psIdx++) {
				var y:int = psIdx / 96;
				y = y + 1;
				var plateSample:Object = parentDocument.samples.getItemAt(psIdx);
				plateSample.@plateName = parentDocument.isIScanState() ? getIScanPlateName(y) : getSequenomPlateName(y);
			}
		}
		
		private function onIScanPlateNameChanged(plateNumber:int):void {
			var numPlates:int = Number(this.iScanNumSourcePlates.text);
			var idx:int=1;
			for each (var plate:Object in parentDocument.iScanPlateListCollection) {
				plate.@name = getIScanPlateName(idx);
				idx++;
			}
			propogatePlateNames(plateNumber);
			parentDocument.iScanPlateList = parentDocument.iScanPlateListCollection.copy();
			parentDocument.samplesView.initializeSamplesGrid();		
			
		}
		
		private function onSequenomPlateNameChanged(plateNumber:int):void {
			var numPlates:int = Number(this.sequenomNumSourcePlates.text);
			var idx:int=1;
			for each (var plate:Object in parentDocument.iScanPlateListCollection) {
				plate.@name = getSequenomPlateName(idx);
				idx++;
			}
			propogatePlateNames(plateNumber);
			parentDocument.iScanPlateList = parentDocument.iScanPlateListCollection.copy();
				parentDocument.samplesView.initializeSamplesGrid();		
		}
		
		private function onAssayCheckBoxChanged():void {
			parentDocument.selectedAssaysCollection.removeAll();
			for (var x:int = 0; x < assayCheckBox.length; x++) {
				if (assayCheckBox[x].selected) {
					var assay:Object = parentDocument.assayCollection.getItemAt(x);
					var assayXML:XML = new XML("<Assay name='" + assay.@display + "' id='" + assay.@value + "'/>");
					parentDocument.selectedAssaysCollection.addItem(assayXML);
				}
			}
			checkSampleSetupCompleteness();
			parentDocument.samplesView.initializeSamplesGrid();
		}
		
		private function onCoreToExtractDNACheckBoxChanged():void {
			parentDocument.request.@coreToExtractDNA = coreToExtractDNACheckBox.selected ? 'Y' : 'N';
			checkSampleSetupCompleteness();
		}
		
		private function onAppDescChanged():void{
			if (this.radioGroupSeqApp.selectedValue != null && this.radioGroupSeqApp.selectedValue == "OTHER") {
				parentDocument.request.@applicationDescription = this.sequenomApplicationDesc != null ? this.sequenomApplicationDesc.text : "";
				if ( this.sequenomApplicationDesc.text != '' ) {
					this.sequenomApplicationDesc.styleName = "normalBox";
				} else {
					this.sequenomApplicationDesc.styleName = "requiredBox";
				}
			} else if (this.radioGroupSeqApp.selectedValue != null ){
				parentDocument.request.@applicationDescription = "";
			}
			checkSampleSetupCompleteness();
		}
		
		[Bindable]
		private var maxNumberOfIScanSamples:int;
		
		private function pickChip():void {
			if (this.iScanChipRadioGroup.selectedValue != null && 
				(this.iScanChipRadioGroup.selectedValue.@idIScanChip != null && this.iScanChipRadioGroup.selectedValue.@idIScanChip != '')) {
				this.iScanChipBox.styleName = "normalBox";
				parentDocument.request.@idIScanChip = iScanChipRadioGroup.selectedValue.@idIScanChip;
			} else {
				this.iScanChipBox.styleName = "requiredBox";
			}
			
			this.checkIScanSampleCount();
		}
		
		public function checkIScanSampleCount():void {
			if (this.iScanChipRadioGroup.selectedValue != null && 
				(this.iScanChipRadioGroup.selectedValue.@samplesPerChip != null && this.iScanChipRadioGroup.selectedValue.@samplesPerChip != '')) {
				
				maxNumberOfIScanSamples = parseInt( iScanChipRadioGroup.selectedValue.@samplesPerChip ) * parseInt(numberOfChips.text);
				numberOfIScanSamplesValidator.maxValue = parseInt( iScanChipRadioGroup.selectedValue.@samplesPerChip ) * parseInt(numberOfChips.text);
				
				if ( this.numberOfSamples != null && this.numberOfSamples.text != '' && parseInt(this.numberOfSamples.text) <= this.maxNumberOfIScanSamples ) {
					validNumberOfSamples = true;
				} else {
					validNumberOfSamples = false;
				}
//				numberOfIScanSamplesValidator.validate();
				
				checkChipSetupCompleteness();
			} 
			
		}
		
		public function checkChipSetupCompleteness():Boolean {
			var isComplete:Boolean = false;
			if (parentDocument.isEditState() || parentDocument.isIScanState()) {
				if (this.iScanChipRadioGroup.selectedValue != null && 
					(this.iScanChipRadioGroup.selectedValue.@idIScanChip != null && this.iScanChipRadioGroup.selectedValue.@idIScanChip != '')) {
					if ( validNumberOfSamples ) {
						isComplete = true;
					}
				}
			} 
			
			if ( this.iScanNumSourcePlates != null && this.iScanNumSourcePlates.text != '' && parseInt(this.iScanNumSourcePlates.text) <= 12 ) {
				
			} else {
				isComplete = false;
			}
			numberOfChipsValidator.validate();
			iScanNumSourcePlatesValidator.validate();
			
			parentDocument.samplesView.enabled = isComplete; 
			
			if (!parentDocument.isAmendState() && validNumberOfSamples) {
				parentDocument.samplesView.initializeSamplesGrid();
			}
			
			if (parentDocument.theTab.contains(parentDocument.annotationView)) {
				parentDocument.annotationView.enabled = isComplete;        			
			}
			parentDocument.enableNextButtons();
			
			callLater(postChipSetupCompleteness, [isComplete]);
			
			return isComplete;
		}
		
		private function postChipSetupCompleteness(isComplete:Boolean):void {
			
			if (!isComplete) {
				parentDocument.confirmView.enabled = false;
			} else {
				parentDocument.samplesView.checkSamplesCompleteness();
			}
			
		}
		
		private function handleInvalidNumberOfIScanSamples():void {
			this.validNumberOfSamples = false;
			parentDocument.samplesView.enabled = validNumberOfSamples;
			this.checkIScanSampleCount();
		}
		private function handleValidNumberOfIScanSamples():void {
			this.validNumberOfSamples = true;
			this.checkIScanSampleCount();
		}
		
	]]>
</mx:Script>
	<mx:XMLListCollection id="primerCollection" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Primer').DictionaryEntry.(@display != '')}"/>
    <mx:NumberValidator enabled="{currentState!='IScanState'}" id="numberOfSamplesValidator" source="{numberOfSamples}" property="text" 
         required="true" allowNegative="false" domain="int" maxValue="384" />
    <mx:NumberValidator id="otherSamplePrepMethodValidator" source="{otherSamplePrepMethod}" property="text" 
         required="false" />
    <mx:NumberValidator id="organismValidator"
        source="{this.sampleOrganismCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="0" />
    <mx:NumberValidator id="sampleTypeValidator"
        source="{this.sampleTypeCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" />
	<mx:NumberValidator id="sampleDropOffLocationValidator"
						source="{this.sampleDropOffLocationCombo}"
						lowerThanMinError="This field is required."
						property="selectedIndex"
						minValue="1" />
	<mx:NumberValidator id="numberOfIScanSamplesValidator" enabled="{currentState=='IScanState'}" source="{numberOfSamples}" property="text" 
						required="true" allowNegative="false" domain="int" 
						requiredFieldError="Please enter the number of samples you are submitting."
						exceedsMaxError="{'This chip handles ' + iScanChipRadioGroup.selectedValue.@samplesPerChip + ' samples; you have requested ' + numberOfChips.text + ' chips. The maximum number of samples you can submit is ' + maxNumberOfIScanSamples.toString() + '.'}" />
	<mx:NumberValidator id="numberOfChipsValidator" source="{numberOfChips}" property="text" 
						required="true" allowNegative="false" domain="int"  maxValue="4" minValue="4"
						lowerThanMinError="A kit contains 4 chips; you must submit samples for all 4 chips."
						exceedsMaxError="A kit contains 4 chips; you cannot submit samples for more than 4 chips."
						requiredFieldError="Please enter the number of chips you want." />
	<mx:NumberValidator enabled="{currentState=='IScanState'}" id="iScanNumSourcePlatesValidator" source="{iScanNumSourcePlates}" property="text" 
						required="true" allowNegative="false" domain="int" maxValue="12"
						requiredFieldError="Please enter the number of plates you are submitting your samples on."
						exceedsMaxError="You can only submit up to 12 plates per order."/>
	
	<mx:CurrencyFormatter id="dollarFormatter" currencySymbol="$" precision="2" decimalSeparatorTo="." thousandsSeparatorTo="," useThousandsSeparator="true"/> 
        
  <mx:Canvas width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
        	
	<mx:VBox width="100%" height="100%" verticalGap="2" >
		<mx:VBox height="100%"  paddingTop="2"  verticalGap="12" id="sampleSetupContainer" width="100%">
			<mx:HBox horizontalGap="0" id="hbox3" verticalAlign="middle">
				<mx:Label text="(1) How many samples will you be submitting?" width="334"  id="label5"/>
				<mx:TextInput width="40" id="numberOfSamples" valid="handleValidNumberOfSamples(event)" invalid="handleInvalidNumberOfSamples(event)">
					<mx:focusOut>onNumberOfSamplesChanged()</mx:focusOut>
				</mx:TextInput>							
			</mx:HBox>
			<mx:HBox horizontalGap="0" id="hbox6" verticalAlign="middle">
				<mx:Label text="(2) Which category best describes your samples?" width="334" id="label8"/>
				<mx:ComboBox labelField="@display" width="300" id="sampleTypeCombo" 
					change="pickSampleType()" dataProvider="{parentDocument.filteredSampleTypeList}" close="pickSampleType()">							
				</mx:ComboBox>
			</mx:HBox>
			<mx:HBox horizontalGap="0" id="sampleOrganismContainer" paddingRight="4" verticalAlign="middle">
				<mx:Label text="(3) Which organism is the source for these samples?" width="334" id="label7"/>
				<renderers:FilterComboBox labelField="@display"
										  prompt="Organism..."
										  close="pickOrganism()"
										  id="sampleOrganismCombo"
										  dataProvider="{parentApplication.organismList.source}"
										  width="{sampleOrganismCombo.selectedItem != null &amp;&amp; sampleOrganismCombo.selectedItem.@display == 'Other' ? 75 : 250}">
				</renderers:FilterComboBox>
				<mx:Label text="Please specify" paddingLeft="6">
					<mx:visible>{sampleOrganismCombo.selectedItem != null &amp;&amp; sampleOrganismCombo.selectedItem.@display == 'Other'}</mx:visible>
				</mx:Label>
				<mx:TextInput width="450" id="otherOrganism" change="{propagateOtherSampleOrganism();checkSampleSetupCompleteness()}" maxChars="200">
					<mx:visible>{sampleOrganismCombo.selectedItem != null &amp;&amp; sampleOrganismCombo.selectedItem.@display == 'Other'}</mx:visible>
				</mx:TextInput>
			</mx:HBox>
			<mx:HBox horizontalGap="0" id="samplePrepContainer" paddingRight="4" verticalAlign="middle">
				<mx:Text text="(4) Specify the nucleic acid extraction method (optional)." width="334" id="label2"/>
				<mx:TextInput width="300" id="otherSamplePrepMethod" change="{propagateOtherSamplePrepMethod();checkSampleSetupCompleteness()}" maxChars="50"/>
			</mx:HBox>
			
		</mx:VBox>
		
	</mx:VBox>

	
  </mx:Canvas>

   <mx:states>
        <mx:State name="QCSetupState">
        	<mx:RemoveChild target="{sampleOrganismContainer}"/>
        	<mx:AddChild  relativeTo="{sampleSetupContainer}">
				<mx:VBox id="bioanalyzerContainer" visible="true" width="100%" height="100%">
					<mx:HBox width="100%" horizontalGap="0" id="hbox4">
					</mx:HBox>
					<mx:HBox width="100%" horizontalAlign="center"  id="hbox5">
						<mx:HBox borderStyle="none" backgroundColor="#ffffff" width="90%" verticalAlign="middle" 
							horizontalAlign="center" paddingLeft="10" paddingRight="10" paddingBottom="5" paddingTop="5">
							<mx:Text width="100%" id="qcInstructions" styleName="submitNote">									
								<mx:text>{parentApplication.getProperty(parentApplication.PROPERTY_QC_INSTRUCTIONS)}</mx:text>
							</mx:Text>
						</mx:HBox>
					</mx:HBox>
					
				</mx:VBox>
        		
        	</mx:AddChild>
        	<mx:SetProperty target="{label5}" name="text" value="(2) How many samples will you be submitting?"/>
        	<mx:SetProperty target="{label8}" name="text" value="(3) Which category best describes your samples?"/>
        	<mx:SetProperty target="{label2}" name="text">
        		<mx:value>(4) Specify the nucleic acid extraction method (optional).</mx:value>
        	</mx:SetProperty>
        	<mx:SetProperty target="{label5}" name="width" value="334"/>
        	<mx:SetProperty target="{label2}" name="width" value="334"/>
        	<mx:SetProperty target="{label8}" name="width" value="334"/>
        	<mx:AddChild relativeTo="{hbox3}" position="before">
        		<mx:HBox width="100%" horizontalGap="0">
        		    <mx:Text text="(1) Select a sample quality application." width="334" id="labelQCApplication"/>
                    <mx:VBox height="100%" verticalGap="1" paddingLeft="2" paddingRight="2" paddingBottom="2" paddingTop="2" styleName="requiredBox" id="qcAppBox">
                        <mx:RadioButtonGroup id="radioGroupQCApp"/>
						<mx:Repeater id="qcAppRepeater" dataProvider="{parentDocument.filteredAppList}"> 
				    		<mx:RadioButton  label="{qcAppRepeater.currentItem.@display}" 
				    			paddingLeft="1" paddingRight="1"
				    			value="{qcAppRepeater.currentItem.@value}"
				    	 	    groupName="radioGroupQCApp"
				    			click="{pickQCApp()}"/>
  						</mx:Repeater>
                    </mx:VBox>
        		    
        		</mx:HBox>
        	</mx:AddChild>
        	
        	
        </mx:State>
        <mx:State name="SolexaSetupState">
         	
            <mx:AddChild relativeTo="{sampleOrganismContainer}" position="after">
            
				<mx:HBox id="isPreppedContainer" width="100%" horizontalGap="0">
					<mx:Text text="(5) Do you want the Core Facility to perform library preparation on the samples?" width="305"  id="text1"/>
					<mx:VBox width="100%" verticalGap="0" paddingLeft="2">
                		<mx:RadioButtonGroup id="seqPrepRadioGroup"/>
					    <mx:HBox id="hbox2" width="100%">
							<mx:RadioButton id="samplesToBePreppedCheckbox"  value="Y" groupName="seqPrepRadioGroup"  label="Yes, please prep library" selected="true"
 click="{pickSeqPrepState()}">
							</mx:RadioButton>									    	
					    </mx:HBox>
					    
						<mx:HBox >
							<mx:RadioButton id="samplesAlreadyPreppedCheckbox"  value="N" groupName="seqPrepRadioGroup" label="No, library has already been prepped "
 click="{pickSeqPrepState()}">
							</mx:RadioButton>							
							<mx:ComboBox labelField="@display" width="300" id="seqLibProtocolCombo" dataProvider="{parentDocument.seqLibProtocolList}" visible="false">															
								<mx:change>{pickSeqLibProtocol()}</mx:change>
							</mx:ComboBox>								
						</mx:HBox>				
					</mx:VBox>
				</mx:HBox>            	
            </mx:AddChild>

            <mx:SetStyle target="{sampleSetupContainer}" name="verticalGap" value="14"/>
            <mx:SetStyle target="{numberOfSamples}" name="backgroundColor"/>
            <mx:SetProperty target="{label5}" name="width" value="305"/>
            <mx:SetProperty target="{label8}" name="width" value="305"/>
            <mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
                <mx:HBox id="barcodeContainer" width="100%" horizontalGap="0" visible="{barcodeQuestionVisible}">
                	<mx:Text text="(6) Should sequencing libraries be constructed with index tags for multiplexing capability?" width="305"  id="label13" visible="{barcodeQuestionVisible}"/>
                	<mx:VBox  height="100%" verticalGap="1" paddingLeft="2" paddingRight="2" paddingBottom="2" paddingTop="2" styleName="normalBox" id="barcodeRadioBox" visible="{barcodeQuestionVisible}">
                		<mx:RadioButtonGroup id="barcodeRadioGroup" selectedValue="Y"/>
                		<mx:RadioButton groupName="barcodeRadioGroup" value="Y" id="radioYesBarcoding" label="Yes, samples require index tags" paddingBottom="0" paddingTop="0" click="pickRadioBarcoding()" change="pickRadioBarcoding()" selected="true" visible="{barcodeQuestionVisible}">
                		</mx:RadioButton>
                		<mx:RadioButton groupName="barcodeRadioGroup" value="N" id="radioNoBarcoding" label="No, samples do not require index tags." paddingTop="0" paddingBottom="0" click="pickRadioBarcoding()" change="pickRadioBarcoding()" selected="false" visible="{barcodeQuestionVisible}">
                		</mx:RadioButton>
                	</mx:VBox>
                	<mx:Text width="300" id="barcodingNote" styleName="submitNote" height="40" paddingLeft="4" visible="{barcodeQuestionVisible}">									
                		<mx:text>{parentApplication.getProperty(parentApplication.PROPERTY_ILLUMINA_BARCODING_NOTE)}</mx:text>
                	</mx:Text>
				</mx:HBox>
            </mx:AddChild>
            <mx:RemoveChild target="{samplePrepContainer}"/>
            <mx:AddChild relativeTo="{isPreppedContainer}" position="before" target="{samplePrepContainer}"/>
            <mx:SetProperty target="{label2}" name="width" value="305"/>
            <mx:SetProperty target="{label7}" name="width" value="305"/>

			
        </mx:State>
        <mx:State name="SolexaSetupPreppedState" basedOn="SolexaSetupState">
            <mx:SetStyle target="{sampleSetupContainer}" name="verticalGap" value="14"/>
            <mx:SetProperty target="{samplesAlreadyPreppedCheckbox}" name="label">
                <mx:value>No, library has already been prepped using kit</mx:value>
            </mx:SetProperty>
            <mx:SetProperty target="{label13}" name="text">
                <mx:value>(6) How are sequencing libraries constructed with index tags for multiplexing capability?</mx:value>
            </mx:SetProperty>
            <mx:AddChild relativeTo="{radioNoBarcoding}" position="before">
                <mx:RadioButton groupName="barcodeRadioGroup" value="C" id="radioYesCustomBarcoding" label="Samples tagged with custom index tag sequence" paddingBottom="0" paddingTop="0" click="pickRadioBarcoding()" change="pickRadioBarcoding()" visible="{parentApplication.submitInternalExperiment()}">
                </mx:RadioButton>
            </mx:AddChild>
            <mx:SetProperty target="{radioYesBarcoding}" name="label" value="Samples tagged with Illumina multiplexing sequencing primers "/>
            <mx:SetProperty target="{label13}" name="visible" value="{parentApplication.isInternalExperimentSubmission}"/>
            <mx:SetProperty target="{barcodeRadioBox}" name="visible" value="{parentApplication.isInternalExperimentSubmission}"/>
            <mx:SetProperty target="{barcodingNote}" name="visible" value="{parentApplication.isInternalExperimentSubmission}"/>
            <mx:SetProperty target="{radioNoBarcoding}" name="visible" value="{parentApplication.isInternalExperimentSubmission}"/>
			<mx:SetProperty target="{radioYesBarcoding}" name="visible" value="{parentApplication.isInternalExperimentSubmission}"/>
            <mx:SetEventHandler target="{radioYesBarcoding}" name="change" handler="pickRadioBarcoding()"/>
			<mx:SetProperty target="{barcodeContainer}" name="visible" value="{parentApplication.isInternalExperimentSubmission}"/>
			<mx:SetProperty target="{radioNoBarcoding}" name="selected" value="{!parentApplication.isInternalExperimentSubmission}"/>
			<mx:SetProperty target="{radioYesBarcoding}" name="selected" value="{parentApplication.isInternalExperimentSubmission}"/>
        </mx:State>
        <mx:State name="QCSetupBioanalyzerState" basedOn="QCSetupState">
             <mx:AddChild relativeTo="{hbox4}" position="lastChild">
                  <mx:Label text="(5) Select a Bioanalyzer Chip Type." width="340"/>
             </mx:AddChild>
             <mx:AddChild relativeTo="{hbox5}" position="before">
                  <mx:HBox id="chipTypeBox"  width="100%" height="100%" styleName="requiredBoxThick" >							
                       <mx:DataGrid width="100%" height="100%" fontSize="10" visible="true" id="bioanalyzerChipTypeGrid"  backgroundAlpha="0"   itemClick="toggleChipTypeCheck(event)">
                       	<mx:dataProvider>{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.BioanalyzerChipType').DictionaryEntry.(@value != '' &amp;&amp; @costPerSample != &quot;&quot;)}</mx:dataProvider>
                       	<mx:columns>
                       	    <mx:DataGridColumn id = "isSelectedChipType" headerText=" " 
                       	        	width="20" 
                       	        	editable="true"                        	
                       	        	dataField="@isSelected" 
                       	        	editorDataField="selected"
                       	        	itemRenderer="{views.renderers.CheckBoxIsSelectedChipType.create()}" />
                       		<mx:DataGridColumn headerText="Chip Type" dataField="@bioanalyzerChipType"/>
                       		<mx:DataGridColumn headerText="Concentration Range" dataField="@concentrationRange"/>
                       		<mx:DataGridColumn headerText="Max Sample Buffer Strength" dataField="@maxSampleBufferStrength"/>
                       		<mx:DataGridColumn headerText="Cost per Sample" dataField="@costPerSample"/>
                       		<mx:DataGridColumn headerText="Sample Wells per Chip" dataField="@sampleWellsPerChip"/>
                       		
                       	</mx:columns>
                       </mx:DataGrid>
                  </mx:HBox>
             </mx:AddChild>
        </mx:State>
        <mx:State name="MicroarrayAmendState">
             <mx:SetProperty target="{label7}" name="text">
                  <mx:value>(2) Which organism is the source for these samples?</mx:value>
             </mx:SetProperty>
             <mx:RemoveChild target="{hbox3}"/>
             <mx:SetProperty target="{label8}" name="text" value="(1) Which category best describes your samples?"/>
             <mx:SetProperty target="{label2}" name="text" value="(3) Specify the nucleic acid extraction method (optional)."/>
             <mx:SetStyle target="{sampleSetupContainer}" name="paddingTop"/>
        </mx:State>
        <mx:State name="SolexaAmendState" basedOn="SolexaSetupState">
             <mx:RemoveChild target="{hbox3}"/>
             <mx:SetProperty target="{label8}" name="text" value="(1) Which category best describes your samples?"/>
             <mx:SetProperty target="{label7}" name="text">
                  <mx:value>(2) Which organism is the source for these samples?</mx:value>
             </mx:SetProperty>
             <mx:SetProperty target="{label2}" name="text" value="(3) Specify the nucleic acid extraction method (optional)."/>
             <mx:SetProperty target="{text1}" name="text">
                  <mx:value>(4) Do you want the Core Facility to perform library preparation on the samples?</mx:value>
             </mx:SetProperty>
             <mx:SetProperty target="{label13}" name="text">
                  <mx:value>(5) Should sequencing libraries be constructed with barcode tags for multiplexing capability?</mx:value>
             </mx:SetProperty>
             <mx:SetStyle target="{sampleSetupContainer}" name="paddingTop" value="38"/>
             <mx:SetStyle target="{sampleSetupContainer}" name="verticalGap" value="20"/>
             <mx:SetStyle target="{sampleOrganismContainer}" name="paddingTop" value="4"/>
        </mx:State>
        <mx:State name="SolexaAmendPreppedState" basedOn="SolexaSetupPreppedState">
             <mx:RemoveChild target="{hbox3}"/>
             <mx:SetProperty target="{label8}" name="text" value="(1) Which category best describes your samples?"/>
             <mx:SetProperty target="{label7}" name="text">
                  <mx:value>(2) Which organism is the source for these samples?</mx:value>
             </mx:SetProperty>
             <mx:SetProperty target="{label2}" name="text" value="(3) Specify the nucleic acid extraction method (optional)."/>
             <mx:SetProperty target="{text1}" name="text">
                  <mx:value>(4) Do you want the Core Facility to perform library preparation on the samples?</mx:value>
             </mx:SetProperty>
             <mx:SetProperty target="{label13}" name="text">
                  <mx:value>(5) Should sequencing libraries be constructed with barcode tags for multiplexing capability?</mx:value>
             </mx:SetProperty>
        </mx:State>
        <mx:State name="CapSeqState">
             <mx:RemoveChild target="{sampleOrganismContainer}"/>
             <mx:RemoveChild target="{samplePrepContainer}"/>
             <mx:AddChild relativeTo="{hbox6}" position="before">
                  <mx:HBox width="100%" horizontalGap="0">
                       <mx:Label text="(2) The samples will be delivered in what container?" width="334"  id="label0"/>
                       <mx:RadioButtonGroup id="containerTypeRadioGroup" selectedValue="TUBE" change="{callLater(onContainerTypeChange)}"/>
                       <mx:RadioButton id="containerTypeTube" label="Tubes" value="TUBE" groupName="containerTypeRadioGroup"/>
                       <mx:RadioButton id="containerTypePlate" label="Plate" value="PLATE" groupName="containerTypeRadioGroup" paddingLeft="20"/>
                  </mx:HBox>
             </mx:AddChild>
			<mx:AddChild relativeTo="{hbox6}" position="before">
				<mx:HBox horizontalGap="0" id="capSeqNumPlatesBox" verticalAlign="middle">
					<mx:Label text="(3) If plates, how many plates will you be submitting?" width="334"  id="capSeqNumPlatesLabel" enabled="{containerTypePlate.selected}"/>
					<mx:RadioButtonGroup id="capSeqNumPlatesRadioGroup"  change="onCapSeqNumPlatesChanged()" />
					<mx:RadioButton id="capSeqNumPlates1" label="1" value="1" groupName="capSeqNumPlatesRadioGroup" enabled="{containerTypePlate.selected}"/>
					<mx:Spacer width="20"/>
					<mx:RadioButton id="capSeqNumPlates4" label="4" value="4" groupName="capSeqNumPlatesRadioGroup" enabled="{containerTypePlate.selected}"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox6}" position="before">
				<mx:Label id="fourPlateWarningLabel" visible="false" includeInLayout="false" color="Green"
						  text="With Bulk pricing you ARE paying for the empty wells, so it is in your best interest to have the max 95 samples per plate to get the best pricing possible." />
			</mx:AddChild>
             <mx:SetProperty target="{label8}" name="text" value="(4) Which category best describes your samples?"/>
             <mx:SetEventHandler target="{numberOfSamples}" name="change" handler="pickContainerType();"/>
             <mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
                  <mx:HBox horizontalGap="0" id="sampleDropOffLocationHbox" verticalAlign="middle">
                  	<mx:Label text="(5) Where are you dropping off your samples?" width="334" id="sampleDropOffLocationLabel"/>
                  	<mx:ComboBox labelField="@display" width="300" id="sampleDropOffLocationCombo" 
                  				 change="pickSampleDropOffLocation()" dataProvider="{parentDocument.filteredSampleDropOffLocationList}" close="pickSampleDropOffLocation()">							
                  	</mx:ComboBox>
                  </mx:HBox>
             </mx:AddChild>
        </mx:State>
	   <mx:State name="FragAnalState">
		   <mx:RemoveChild target="{sampleOrganismContainer}"/>
		   <mx:RemoveChild target="{samplePrepContainer}"/>
		   <mx:RemoveChild target="{label8}"/>
		   <mx:RemoveChild target="{sampleTypeCombo}"/>
		   <mx:AddChild relativeTo="{hbox6}" position="before">
			   <mx:VBox width="100%" horizontalGap="0">
				   <mx:Label text="(2) Choose the Assays to be used." width="310"  id="labelAssayHeader"/>
				   <mx:Tile id="assayTile" direction="vertical" borderStyle="none"
							paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0"
							verticalGap="0" horizontalGap="0" tileWidth="200"> 
					   <mx:Repeater id="assayRepeater" dataProvider="{parentDocument.assayCollection}">
							<mx:CheckBox label="{assayRepeater.currentItem.@display}" id="assayCheckBox" change="onAssayCheckBoxChanged()" width="100%"/>
					   </mx:Repeater>
				   </mx:Tile>
			   </mx:VBox>
		   </mx:AddChild>
		   <!--<mx:SetEventHandler target="{numberOfSamples}" name="change" handler="checkSampleSetupCompleteness();"/>-->
	   </mx:State>
	   <mx:State name="MitSeqState">
		   <mx:RemoveChild target="{sampleOrganismContainer}"/>
		   <mx:RemoveChild target="{samplePrepContainer}"/>
		   <mx:RemoveChild target="{label8}"/>
		   <mx:RemoveChild target="{sampleTypeCombo}"/>
		   <mx:AddChild relativeTo="{hbox6}" position="before">
			   <mx:VBox width="100%" horizontalGap="0">
				   <mx:Label text="(2) Choose the Primers to be used." width="310"  id="labelPrimerHeader"/>
				   <mx:HBox width="100%" horizontalGap="5">
					   <mx:VBox>
						   <mx:Label text="Primer 1" id="labelPrimer1"/>
						   <mx:ComboBox labelField="@display" width="150" id="primer1Combo" 
										dataProvider="{primerCollection}" 
										change="checkSampleSetupCompleteness()">							
						   </mx:ComboBox>
					   </mx:VBox>					   
					   <mx:VBox>
						   <mx:Label text="Primer 2" id="labelPrimer2"/>
						   <mx:ComboBox labelField="@display" width="150" id="primer2Combo" 
										dataProvider="{primerCollection}" 
										change="checkSampleSetupCompleteness()">							
						   </mx:ComboBox>
					   </mx:VBox>					   
					   <mx:VBox>
						   <mx:Label text="Primer 3" id="labelPrimer3"/>
						   <mx:ComboBox labelField="@display" width="150" id="primer3Combo" 
										dataProvider="{primerCollection}" 
										change="checkSampleSetupCompleteness()">							
						   </mx:ComboBox>
					   </mx:VBox>					   
					   <mx:VBox>
						   <mx:Label text="Primer 4" id="labelPrimer4"/>
						   <mx:ComboBox labelField="@display" width="150" id="primer4Combo" 
										dataProvider="{primerCollection}" 
										change="checkSampleSetupCompleteness()">							
						   </mx:ComboBox>
					   </mx:VBox>					   
					   <mx:VBox>
						   <mx:Label text="Primer 5" id="labelPrimer5"/>
						   <mx:ComboBox labelField="@display" width="150" id="primer5Combo" 
										dataProvider="{primerCollection}" 
										change="checkSampleSetupCompleteness()">							
						   </mx:ComboBox>
					   </mx:VBox>					   
					   <mx:VBox>
						   <mx:Label text="Primer 6" id="labelPrimer6"/>
						   <mx:ComboBox labelField="@display" width="150" id="primer6Combo" 
										dataProvider="{primerCollection}" 
										change="checkSampleSetupCompleteness()">							
						   </mx:ComboBox>
					   </mx:VBox>					   
				   </mx:HBox>
			   </mx:VBox>
		   </mx:AddChild>
		   <!--<mx:SetEventHandler target="{numberOfSamples}" name="change" handler="checkSampleSetupCompleteness();"/>-->
	   </mx:State>
	   <mx:State name="CherryPickState">
		   <mx:RemoveChild target="{sampleOrganismContainer}"/>
		   <mx:RemoveChild target="{samplePrepContainer}"/>
		   <mx:RemoveChild target="{label8}"/>
		   <mx:RemoveChild target="{sampleTypeCombo}"/>
		   <mx:RemoveChild target="{hbox3}"/>
		   <mx:AddChild relativeTo="{hbox6}" position="before">
			   <mx:HBox width="100%" horizontalGap="0">
				   <mx:Label text="(1) How many wells does the destination plate contain?" width="334"  id="cherryNumDestinationWells"/>
				   <mx:RadioButtonGroup id="cherryNumDestinationWellsRadioGroup" change="parentDocument.samples.removeAll();parentDocument.samplesView.initializeSamplesGrid()"/>
				   <mx:RadioButton id="cherryNumDestinationWells96" label="96" click="{callLater(checkSampleSetupCompleteness)}" value="96" groupName="cherryNumDestinationWellsRadioGroup"/>
				   <mx:RadioButton id="cherryNumDestinationWells384" label="384" click="{callLater(checkSampleSetupCompleteness)}" value="384" groupName="cherryNumDestinationWellsRadioGroup"/>
			   </mx:HBox>
		   </mx:AddChild>
		   <mx:AddChild relativeTo="{hbox6}" position="before">
			   <mx:HBox horizontalGap="0" id="cherryNumSourcePlatesBox" verticalAlign="middle">
				   <mx:Label text="(2) How many source plates will you be submitting?" width="334"  id="cherryNumSourcePlatesLabel"/>
				   <mx:TextInput width="40" id="cherryNumSourcePlates" 
								 change="onCherryNumSourcePlatesChanged()">
				   </mx:TextInput>							
			   </mx:HBox>
		   </mx:AddChild>
		   <mx:AddChild relativeTo="{hbox6}" position="before">
			   <mx:VBox horizontalGap="0" id="cherryPlateNamesBox" verticalAlign="middle">
				   <mx:Label text="(3) Name your plates." width="334"/>
				   <mx:HBox horizontalGap="10" verticalAlign="middle">
					   	<mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate1Box" visible="false">
							<mx:Label text="Plate 1:"/>
							<mx:TextInput width="100" id="cherryPlate1Name" text="Plate 1"
										  change="onCherryPlateNameChanged()"/>
						</mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate2Box" visible="false">
						   <mx:Label text="Plate 2:"/>
						   <mx:TextInput width="100" id="cherryPlate2Name" text="Plate 2"
										  change="onCherryPlateNameChanged()"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate3Box" visible="false">
						   <mx:Label text="Plate 3:"/>
						   <mx:TextInput width="100" id="cherryPlate3Name" text="Plate 3"
										  change="onCherryPlateNameChanged()"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate4Box" visible="false">
						   <mx:Label text="Plate 4:"/>
						   <mx:TextInput width="100" id="cherryPlate4Name" text="Plate 4"
										  change="onCherryPlateNameChanged()"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate5Box" visible="false">
						   <mx:Label text="Plate 5:"/>
						   <mx:TextInput width="100" id="cherryPlate5Name" text="Plate 5"
										  change="onCherryPlateNameChanged()"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate6Box" visible="false">
						   <mx:Label text="Plate 6:"/>
						   <mx:TextInput width="100" id="cherryPlate6Name" text="Plate 6"
										  change="onCherryPlateNameChanged()"/>
					   </mx:HBox>
				   </mx:HBox>
				   <mx:HBox horizontalGap="10" verticalAlign="middle">
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate7Box" visible="false">
						   <mx:Label text="Plate 7:"/>
						   <mx:TextInput width="100" id="cherryPlate7Name" text="Plate 7"
										  change="onCherryPlateNameChanged()"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate8Box" visible="false">
						   <mx:Label text="Plate 8:"/>
						   <mx:TextInput width="100" id="cherryPlate8Name" text="Plate 8"
										  change="onCherryPlateNameChanged()"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate9Box" visible="false">
						   <mx:Label text="Plate 9:"/>
						   <mx:TextInput width="100" id="cherryPlate9Name" text="Plate 9"
										  change="onCherryPlateNameChanged()"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate10Box" visible="false">
						   <mx:Label text="Plate 10:"/>
						   <mx:TextInput width="100" id="cherryPlate10Name" text="Plate 10"
										  change="onCherryPlateNameChanged()"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate11Box" visible="false">
						   <mx:Label text="Plate 11:"/>
						   <mx:TextInput width="100" id="cherryPlate11Name" text="Plate 11"
										  change="onCherryPlateNameChanged()"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="cherryPlate12Box" visible="false">
						   <mx:Label text="Plate 12:"/>
						   <mx:TextInput width="100" id="cherryPlate12Name" text="Plate 12"
										  change="onCherryPlateNameChanged()"/>
					   </mx:HBox>
				   </mx:HBox>
			   </mx:VBox>
		   </mx:AddChild>
	   </mx:State>
	   <mx:State name="IScanState">
		   <mx:RemoveChild target="{samplePrepContainer}"/>
		  
		   <mx:RemoveChild target="{sampleOrganismContainer}"/>
		   <mx:RemoveChild target="{label8}"/>
		   <mx:RemoveChild target="{sampleTypeCombo}"/>
		   <mx:AddChild relativeTo="{hbox6}" position="before">
			   <mx:HBox id="iScanChipContainer" width="100%" horizontalGap="0">
				   <mx:Label text="(1) Select the desired chip:" width="334"  id="label10"/>
				   <mx:VBox verticalGap="0" id="iScanChipBox" width="100%" styleName="requiredBox">
					   <mx:HBox width="100%">
						   <mx:Label width="200" fontSize="10" fontWeight="bold" text="Chip" paddingLeft="25"/>
						   <mx:Label width="125" fontSize="10" fontWeight="bold"  text="Samples per Chip"/>
						   <mx:Label width="125" fontSize="10" fontWeight="bold" text="Markers per Sample" />
						   <mx:Label width="125" fontSize="10" fontWeight="bold" text="Cost per Sample" />
					   </mx:HBox>
					   <mx:RadioButtonGroup id="iScanChipRadioGroup"/>
					   <mx:Repeater id="iScanChipRepeater" dataProvider="{parentApplication.iScanChipList}"> 
						   <mx:HBox verticalAlign="middle" width="100%">
							   <mx:RadioButton  label="{iScanChipRepeater.currentItem.@name}" 
												paddingLeft="0" paddingRight="1"
												value="{iScanChipRepeater.currentItem}" 
												click="{pickChip()}"
												groupName="iScanChipRadioGroup" width="200"/>
							   <mx:Text width="125" fontSize="9" text="{iScanChipRepeater.currentItem.@samplesPerChip}" />
							   <mx:Text width="125" fontSize="9" text="{iScanChipRepeater.currentItem.@markersPerSample}" />
							   <mx:Text width="125" fontSize="9" 
										text="{iScanChipRepeater.currentItem.@costPerSampleDisplay!='0'&amp;&amp;iScanChipRepeater.currentItem.@costPerSampleDisplay!=''?dollarFormatter.format(iScanChipRepeater.currentItem.@costPerSampleDisplay):''}" />
						   </mx:HBox>
					   </mx:Repeater>
					   
				   </mx:VBox>
			   </mx:HBox>
		   </mx:AddChild>
		   <mx:AddChild relativeTo="{hbox6}" position="before">
			   <mx:HBox horizontalGap="0" verticalAlign="middle">
				   <mx:Label text="(2) How many chips do you want?" width="334" />
				   <mx:TextInput width="40" id="numberOfChips" change="checkIScanSampleCount();parentDocument.request.@numberIScanChips = numberOfChips.text;">
					   <mx:focusOut>checkIScanSampleCount();parentDocument.request.@numberIScanChips = numberOfChips.text;</mx:focusOut>
				   </mx:TextInput>							
			   </mx:HBox>
		   </mx:AddChild>
		   <mx:RemoveChild target="{hbox3}"/>
		   <mx:AddChild relativeTo="{hbox6}" position="before" target="{hbox3}"/>
		   <mx:SetProperty target="{label5}" name="text" value="(3) How many samples will you be submitting?"/>
		   <mx:AddChild relativeTo="{hbox6}" position="before">
			   <mx:HBox horizontalGap="0" id="iScanNumSourcePlatesBox" verticalAlign="middle" includeInLayout="{parentDocument.request.@idRequest == '0'}" visible="{parentDocument.request.@idRequest == '0'}">
				   <mx:Label text="(4) How many source plates will you be submitting?" width="334"  id="iScanNumSourcePlatesLabel"/>
				   <mx:TextInput width="40" id="iScanNumSourcePlates" 
								 change="onIScanNumSourcePlatesChanged()" focusOut="parentDocument.samplesView.initializeSamplesGrid();checkSampleSetupCompleteness()">
				   </mx:TextInput>							
			   </mx:HBox>
		   </mx:AddChild>
		   <mx:AddChild relativeTo="{hbox6}" position="before">
			   <mx:VBox horizontalGap="0" id="iScanPlateNamesBox" verticalAlign="middle" visible="{parentDocument.request.@idRequest == '0'}" includeInLayout="{parentDocument.request.@idRequest == '0'}">
				   <mx:Label text="(5) Name your plates." width="334"/>
				   <mx:HBox horizontalGap="10" verticalAlign="middle">
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate1Box" visible="false">
						   <mx:Label text="Plate 1:"/>
						   <mx:TextInput width="100" id="iScanPlate1Name" text="Plate 1"
										 focusOut="onIScanPlateNameChanged(0)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate2Box" visible="false">
						   <mx:Label text="Plate 2:"/>
						   <mx:TextInput width="100" id="iScanPlate2Name" text="Plate 2"
										 focusOut="onIScanPlateNameChanged(1)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate3Box" visible="false">
						   <mx:Label text="Plate 3:"/>
						   <mx:TextInput width="100" id="iScanPlate3Name" text="Plate 3"
										 focusOut="onIScanPlateNameChanged(2)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate4Box" visible="false">
						   <mx:Label text="Plate 4:"/>
						   <mx:TextInput width="100" id="iScanPlate4Name" text="Plate 4"
										 focusOut="onIScanPlateNameChanged(3)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate5Box" visible="false">
						   <mx:Label text="Plate 5:"/>
						   <mx:TextInput width="100" id="iScanPlate5Name" text="Plate 5"
										 focusOut="onIScanPlateNameChanged(4)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate6Box" visible="false">
						   <mx:Label text="Plate 6:"/>
						   <mx:TextInput width="100" id="iScanPlate6Name" text="Plate 6"
										 focusOut="onIScanPlateNameChanged(5)"/>
					   </mx:HBox>
				   </mx:HBox>
				   <mx:HBox horizontalGap="10" verticalAlign="middle">
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate7Box" visible="false">
						   <mx:Label text="Plate 7:"/>
						   <mx:TextInput width="100" id="iScanPlate7Name" text="Plate 7"
										 focusOut="onIScanPlateNameChanged(6)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate8Box" visible="false">
						   <mx:Label text="Plate 8:"/>
						   <mx:TextInput width="100" id="iScanPlate8Name" text="Plate 8"
										 focusOut="onIScanPlateNameChanged(7)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate9Box" visible="false">
						   <mx:Label text="Plate 9:"/>
						   <mx:TextInput width="100" id="iScanPlate9Name" text="Plate 9"
										 focusOut="onIScanPlateNameChanged(8)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate10Box" visible="false">
						   <mx:Label text="Plate 10:"/>
						   <mx:TextInput width="100" id="iScanPlate10Name" text="Plate 10"
										 focusOut="onIScanPlateNameChanged(9)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate11Box" visible="false">
						   <mx:Label text="Plate 11:"/>
						   <mx:TextInput width="100" id="iScanPlate11Name" text="Plate 11"
										 focusOut="onIScanPlateNameChanged(10)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="iScanPlate12Box" visible="false">
						   <mx:Label text="Plate 12:"/>
						   <mx:TextInput width="100" id="iScanPlate12Name" text="Plate 12"
										 focusOut="onIScanPlateNameChanged(11)"/>
					   </mx:HBox>
				   </mx:HBox>
			   </mx:VBox>
		   </mx:AddChild>
		   <mx:SetEventHandler target="{numberOfSamples}" name="focusOut" handler="checkIScanSampleCount()"/>
		   <mx:SetEventHandler target="{numberOfSamples}" name="invalid" handler="handleInvalidNumberOfIScanSamples()"/>
		   <mx:SetEventHandler target="{numberOfSamples}" name="valid" handler="handleValidNumberOfIScanSamples()"/>
		   
	   </mx:State>
	   <mx:State name="SequenomState">
		   <mx:RemoveChild target="{samplePrepContainer}"/>
		   <mx:RemoveChild target="{sampleOrganismContainer}"/>
		   <mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
			   <mx:HBox width="100%" horizontalGap="0" id="hbox7">
				   <mx:Text text="(1) Select an application." width="334" id="labelSeqApplication"/>
				   <mx:VBox height="100%" verticalGap="1" paddingLeft="2" paddingRight="2" paddingBottom="2" paddingTop="2" styleName="requiredBox" id="seqAppBox">
					   <mx:RadioButtonGroup id="radioGroupSeqApp"/>
					   <mx:Repeater id="seqAppRepeater" dataProvider="{parentDocument.filteredAppList}"> 
						   <mx:RadioButton  label="{seqAppRepeater.currentItem.@display}" 
											paddingLeft="1" paddingRight="1"
											value="{seqAppRepeater.currentItem.@value}"
											groupName="radioGroupSeqApp"
											click="{pickSequenomApp()}"/>
					   </mx:Repeater>
				   </mx:VBox>
				   <mx:HBox id="sequenomPanelContainer" height="100%" width="400" horizontalGap="0" verticalAlign="bottom" paddingBottom="5">
					   <mx:Label text="Please specify" id="seqPanelLabel"/>
					   <mx:TextInput width="100%" id="sequenomApplicationDesc" styleName="requiredBox" focusOut="onAppDescChanged()" />
				   </mx:HBox>
			   </mx:HBox>
		   </mx:AddChild>
		   <mx:RemoveChild target="{hbox3}"/>
		   <mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild" target="{hbox3}"/>
		   <mx:SetProperty target="{label5}" name="text" value="(4) How many samples will you be submitting?"/>
		   <mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
			   <mx:HBox width="100%" horizontalGap="0" id="hbox8">
				   <mx:Label text="(5) The samples will be delivered in what container?" width="334"  id="seqContLabel"/>
				   <mx:RadioButtonGroup id="sequenomContainerTypeRadioGrp" selectedValue="TUBE" change="{callLater(onSequenomContainerTypeChange)}"/>
				   <mx:RadioButton id="sequenomContainerTypeTube" label="Tubes" value="TUBE" groupName="sequenomContainerTypeRadioGrp"/>
				   <mx:RadioButton id="sequenomContainerTypePlate" label="Plates" value="PLATE" groupName="sequenomContainerTypeRadioGrp" paddingLeft="20"/>
			   </mx:HBox>
		   </mx:AddChild>
		   <mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
			   <mx:HBox horizontalGap="0" id="sequenomNumSourcePlatesBox" verticalAlign="middle" 
						includeInLayout="{sequenomContainerTypeRadioGrp.selectedValue == 'PLATE' &amp;&amp; parentDocument.request.@idRequest == '0'}" 
						visible="{sequenomContainerTypeRadioGrp.selectedValue == 'PLATE' &amp;&amp; parentDocument.request.@idRequest == '0'}">
				   <mx:Label text="(6) How many source plates will you be submitting?" width="334"  id="sequenomNumSourcePlatesLabel"/>
				   <mx:TextInput width="40" id="sequenomNumSourcePlates" 
								 change="onSequenomNumSourcePlatesChanged()" 
								 focusOut="onNumberOfSamplesChanged()">
				   </mx:TextInput>							
			   </mx:HBox>
		   </mx:AddChild>
		   <mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
			   <mx:VBox horizontalGap="0" id="sequenomPlateNamesBox" verticalAlign="middle" 
						visible="{sequenomContainerTypeRadioGrp.selectedValue == 'PLATE' &amp;&amp; parentDocument.request.@idRequest == '0'}" 
						includeInLayout="{sequenomContainerTypeRadioGrp.selectedValue == 'PLATE' &amp;&amp; parentDocument.request.@idRequest == '0'}">
				   <mx:Label text="(7) Name your plates." width="334"/>
				   <mx:HBox horizontalGap="10" verticalAlign="middle">
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate1Box" visible="false">
						   <mx:Label text="Plate 1:"/>
						   <mx:TextInput width="100" id="sequenomPlate1Name" text="Plate 1"
										 focusOut="onSequenomPlateNameChanged(0)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate2Box" visible="false">
						   <mx:Label text="Plate 2:"/>
						   <mx:TextInput width="100" id="sequenomPlate2Name" text="Plate 2"
										 focusOut="onSequenomPlateNameChanged(1)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate3Box" visible="false">
						   <mx:Label text="Plate 3:"/>
						   <mx:TextInput width="100" id="sequenomPlate3Name" text="Plate 3"
										 focusOut="onSequenomPlateNameChanged(2)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate4Box" visible="false">
						   <mx:Label text="Plate 4:"/>
						   <mx:TextInput width="100" id="sequenomPlate4Name" text="Plate 4"
										 focusOut="onSequenomPlateNameChanged(3)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate5Box" visible="false">
						   <mx:Label text="Plate 5:"/>
						   <mx:TextInput width="100" id="sequenomPlate5Name" text="Plate 5"
										 focusOut="onSequenomPlateNameChanged(4)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate6Box" visible="false">
						   <mx:Label text="Plate 6:"/>
						   <mx:TextInput width="100" id="sequenomPlate6Name" text="Plate 6"
										 focusOut="onSequenomPlateNameChanged(5)"/>
					   </mx:HBox>
				   </mx:HBox>
				   <mx:HBox horizontalGap="10" verticalAlign="middle">
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate7Box" visible="false">
						   <mx:Label text="Plate 7:"/>
						   <mx:TextInput width="100" id="sequenomPlate7Name" text="Plate 7"
										 focusOut="onSequenomPlateNameChanged(6)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate8Box" visible="false">
						   <mx:Label text="Plate 8:"/>
						   <mx:TextInput width="100" id="sequenomPlate8Name" text="Plate 8"
										 focusOut="onSequenomPlateNameChanged(7)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate9Box" visible="false">
						   <mx:Label text="Plate 9:"/>
						   <mx:TextInput width="100" id="sequenomPlate9Name" text="Plate 9"
										 focusOut="onSequenomPlateNameChanged(8)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate10Box" visible="false">
						   <mx:Label text="Plate 10:"/>
						   <mx:TextInput width="100" id="sequenomPlate10Name" text="Plate 10"
										 focusOut="onSequenomPlateNameChanged(9)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate11Box" visible="false">
						   <mx:Label text="Plate 11:"/>
						   <mx:TextInput width="100" id="sequenomPlate11Name" text="Plate 11"
										 focusOut="onSequenomPlateNameChanged(10)"/>
					   </mx:HBox>
					   <mx:HBox horizontalGap="0" verticalAlign="middle" id="sequenomPlate12Box" visible="false">
						   <mx:Label text="Plate 12:"/>
						   <mx:TextInput width="100" id="sequenomPlate12Name" text="Plate 12"
										 focusOut="onSequenomPlateNameChanged(11)"/>
					   </mx:HBox>
				   </mx:HBox>
			   </mx:VBox>
		   </mx:AddChild>
		   <mx:AddChild relativeTo="{hbox3}" position="before">
		   	<mx:HBox horizontalGap="0" id="hbox0" verticalAlign="middle">
		   		<mx:Label text="(2) Would you like the core facility to extract the DNA?" width="334"  id="label1"/>
				<mx:CheckBox label="Yes" id="coreToExtractDNACheckBox" change="onCoreToExtractDNACheckBoxChanged()" width="100%"/>					
		   	</mx:HBox>
		   </mx:AddChild>
		   <mx:RemoveChild target="{hbox6}"/>
		   <mx:AddChild relativeTo="{hbox3}" position="before" target="{hbox6}"/>
		   <mx:SetProperty target="{label8}" name="text" value="(3) Which category best describes your samples?"/>
	   </mx:State>
	   <mx:State name="ClinicalSequenomState" basedOn="SequenomState">
	   	<mx:SetProperty target="{coreToExtractDNACheckBox}" name="selected" value="true"/>
	   	<mx:AddChild relativeTo="{hbox7}" position="lastChild">
	   		<mx:Text text="{parentDocument.applicationName}" 
					 id="seqApplicationText"/>
	   	</mx:AddChild>
	   	<mx:RemoveChild target="{seqAppBox}"/>
	   	<mx:RemoveChild target="{sequenomPanelContainer}"/>
	   	<mx:RemoveChild target="{hbox8}"/>
	   	<mx:RemoveChild target="{sequenomNumSourcePlatesBox}"/>
	   	<mx:RemoveChild target="{sequenomPlateNamesBox}"/>
	    <mx:SetProperty target="{hbox3}" name="visible" value="false"/>
	    <mx:SetProperty target="{hbox3}" name="includeInLayout" value="false"/>
		   
	   </mx:State>
   </mx:states>
   	 

	
</mx:Canvas>
