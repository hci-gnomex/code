<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="Visibility" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:util="views.util.*"  enabled="true"
	 width="100%" height="100%" show="init()" xmlns:renderers="views.renderers.*" >
	<mx:states>
		<mx:State name="EditState">
			<mx:SetProperty name="enabled" value="true"/>
		</mx:State>
	</mx:states>
	
  <mx:HTTPService  
    id="getLab" 
    url="GetLab.gx"
    destination="getLab"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetLab(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get group', event)"
    method="POST"
    useProxy="false">
    <mx:request>
    	<idLab>{idLab}</idLab>
    </mx:request>
    	
   </mx:HTTPService>
	
<mx:Script>
	<![CDATA[
		import hci.flex.controls.CheckBox;
		
		import mx.collections.XMLListCollection;
		import mx.controls.RadioButton;
		import mx.controls.Spacer;
		import mx.events.ListEvent;
		import mx.rpc.events.ResultEvent;
		
		import views.renderers.CheckBoxIsSelectedChipType;
		import views.util.DateUtils;
		import views.util.PromptXMLListCollection;
	
		private var validNumberOfSamples:Boolean = true;
		private var validConcentration:Boolean = true;
		
		[Bindable]
		private var idLab:Object;
		
		private var idInstitution:Object;
		
		[Bindable]
		private var possibleCollaborators:XMLListCollection;

		[Bindable]
		private var possibleInstitutions:PromptXMLListCollection;

		public function init():void {
			checkSecurity();
			if (this.currentState == "EditState") {
				this.visibilityRadioGroup.selectedValue = parentDocument.request.@codeVisibility;
				this.privacyExpirationPicker.text = parentDocument.request.@privacyExpirationDate;
			} else {
				if(parentDocument.request.@codeVisibility != null && parentDocument.request.@codeVisibility != '') {
					this.visibilityRadioGroup.selectedValue = parentDocument.request.@codeVisibility;
				} else {
					this.visibilityRadioGroup.selectedValue = 'MEM';
				}
				
				if(parentApplication.isPrivacyExpirationSupported) {
					var expireDate:Date = DateUtils.dateAdd(DateUtils.MONTH, parseInt(parentApplication.getProperty(parentApplication.DATASET_PRIVACY_EXPIRATION)), new Date());
					privacyExpirationPicker.text = parentApplication.formatDate(expireDate);
				}
			}
			this.collaboratorCombo.selectedItem = null;
			this.institutionCombo.selectedItem = null;
			checkVisibilitySetupCompleteness();
			
			if (this.currentState == "EditState" || parentDocument.isAmendState()) {
				idLab = parentDocument.request.@idLab;
				idInstitution = parentDocument.request.@idInstitution;
			} else {
				idLab = parentDocument.setupView.labCombo.selectedItem.@idLab;
				idInstitution = parentDocument.visibilityView.institutionCombo.selectedItem != null ? parentDocument.visibilityView.institutionCombo.selectedItem.@idInstitution : '';
			}
			getLab.send();
		}
		
		public function checkSecurity():void {

		}

		private function onGetLab(event:ResultEvent):void {
			var inst:Object;
			if (getLab.lastResult.name() == "OpenLabList") {
				var emptyNode:XML = new XML("<AppUser " +
				    " idAppUser=''" +
				    " displayName=''"  +
					"/>");
				possibleCollaborators = new XMLListCollection(getLab.lastResult..Lab.(@idLab == idLab).possibleCollaborators.AppUser.(@isActive == 'Y'));
				possibleCollaborators.addItemAt(emptyNode, 0);
				possibleInstitutions = new PromptXMLListCollection(emptyNode, new XMLListCollection(getLab.lastResult..Lab.(@idLab == idLab).institutions.Institution.(@isActive == 'Y')));

				this.institutionCombo.enabled = this.possibleInstitutions.length > 1;
				this.radioInstitutionVisibility.enabled = this.possibleInstitutions.length > 1;
				if (this.idInstitution != null && this.idInstitution != '') {
					for each(inst in possibleInstitutions) {
						if (inst.@idInstitution == this.idInstitution) {
							this.institutionCombo.selectedItem =  inst;
							break;
						}
					}
				} else {
					var hasDefault:Boolean = false;
					if(radioInstitutionVisibility.selected && radioInstitutionVisibility.enabled) {
						for each(inst in possibleInstitutions) {
							if (inst.@isDefault == 'Y') {
								this.institutionCombo.selectedItem =  inst;
								hasDefault = true;
								break;
							}
						}	
					} else if(radioInstitutionVisibility.selected && !radioInstitutionVisibility.enabled){
						// Default to Member if institution selected but not enabled
						this.visibilityRadioGroup.selectedValue = 'MEM';					
					}					
					if(!hasDefault) {
						this.institutionCombo.selectedIndex = 0;
					}	
				}
				checkVisibilitySetupCompleteness();
			}
		}

        public function checkVisibilitySetupCompleteness():Boolean {
        	var isComplete:Boolean = false;
        	if (parentDocument.isEditState()) {
        		isComplete = true;
        	} else if (this.visibilityRadioGroup.selectedValue != null && this.visibilityRadioGroup.selectedValue != '') {

				if (this.visibilityRadioGroup.selectedValue == 'INST') {
					if (institutionCombo.selectedItem != null && institutionCombo.selectedItem.hasOwnProperty("@idInstitution") && institutionCombo.selectedItem.@idInstitution != '') {
						isComplete = true;						
					}					
				} else {
					isComplete = true;
					
				}
        	} 

			if (this.currentState != "EditState") {
	        	parentDocument.confirmView.enabled = isComplete; 
        	}
        	
    		parentDocument.enableNextButtons();

        	
    		return isComplete;
    	    	
        }
        
		private function addCollaborator():void {
			parentDocument.dirty.setDirty();
			var node:XML = new XML("<ExperimentCollaborator " +
			    " idAppUser='" + collaboratorCombo.selectedItem.@idAppUser + "'" +
			    " displayName='" + collaboratorCombo.selectedItem.@displayName + "'" +
				"/>");
			this.collaborators.addItem(node);
		}
		
		private function removeCollaborator():void {
			parentDocument.dirty.setDirty();
			if (collaboratorGrid.selectedIndex != -1) {
				collaborators.removeItemAt(collaboratorGrid.selectedIndex);
			}
		}
	]]>
</mx:Script>

  <mx:XMLListCollection id="collaborators" source="{parentDocument.request.collaborators.ExperimentCollaborator}"/>
  <mx:Canvas width="100%" height="100%">
        	
	<mx:VBox width="100%" height="100%" verticalGap="20">
   		<mx:VBox width="100%" paddingTop="4"  verticalGap="0" paddingRight="4" paddingLeft="4" paddingBottom="4">
		   <mx:HBox width="100%" horizontalGap="0" id="hbox1">
		       <mx:Text text="(1) Pick the level of visibility this experiment should have." id="labelApplication"/>
		       <mx:RadioButtonGroup id = "radioGroupSeqApp">       	
		       </mx:RadioButtonGroup>
		   </mx:HBox>
		   <mx:HBox horizontalGap="0" width="100%">
		   	<mx:VBox verticalGap="0" width="100%">
		   		<mx:RadioButtonGroup id="visibilityRadioGroup"/>
				<mx:HBox horizontalGap="0">
					<mx:VBox verticalGap="0" width="82">
						<mx:RadioButton value="OWNER" label="Owner" groupName="visibilityRadioGroup"  click="checkVisibilitySetupCompleteness();parentDocument.dirty.setDirty()" toolTip="Visible to the submitter and the lab PI"/>
						<mx:RadioButton value="MEM" selected="true" label="Members" groupName="visibilityRadioGroup"  click="checkVisibilitySetupCompleteness();parentDocument.dirty.setDirty()" toolTip="Visibile to all members of the lab group"/>
					</mx:VBox>
					<mx:VBox verticalGap="0" height="100%" width="209" verticalAlign="bottom">
						<mx:Text width="207" id="institutionNote" styleName="submitNote" height="33" paddingLeft="4" visible="{this.radioInstitutionVisibility.enabled ? false : true}" paddingBottom="0">									
							<mx:text>Institution visibility can only be set when lab belongs to an institution. Please contact GNomEx administrator.</mx:text>
						</mx:Text>
					</mx:VBox>
				</mx:HBox>				
				<mx:HBox horizontalGap="0" verticalAlign="middle">
					<mx:RadioButton value="INST" selected="true" label="Institution" groupName="visibilityRadioGroup"  click="checkVisibilitySetupCompleteness();parentDocument.dirty.setDirty()" id="radioInstitutionVisibility" enabled="false" toolTip="Visible to all lab groups that are part of institution"/>
					<mx:ComboBox width="210" dataProvider="{this.possibleInstitutions}" id="institutionCombo" labelField="@display" selectedIndex="{visibilityRadioGroup.selectedValue != 'INST' ? 0 : institutionCombo.selectedIndex}" enabled="{this.possibleInstitutions.length > 1 &amp;&amp; radioInstitutionVisibility.enabled &amp;&amp; visibilityRadioGroup.selectedValue == 'INST'}"  editable="false" change="checkVisibilitySetupCompleteness()">			       	
					</mx:ComboBox>	
				</mx:HBox>
				<mx:HBox horizontalGap="0" verticalAlign="middle">
					<mx:RadioButton value="PUBLIC" label="Public" groupName="visibilityRadioGroup"  click="checkVisibilitySetupCompleteness();parentDocument.dirty.setDirty()" toolTip="Visible to everyone" width="82"/>
				</mx:HBox>
				<mx:HBox horizontalGap="0" verticalAlign="middle">
					<mx:DateField id="privacyExpirationPicker" change="parentDocument.dirty.setDirty();" editable="true" formatString="YYYY-MM-DD"></mx:DateField>
					<mx:Text text="Public visibility date (visibility automatically changes to public on this date) " width="250" height="30"/>
				</mx:HBox>
		   	</mx:VBox>
		   </mx:HBox>
		   	 


		</mx:VBox>
		<mx:VBox width="100%" height="100%" verticalGap="0">
			<mx:Text text="(2) Specify other individual collaborators allowed access to this experiment&#xa;"   width="330"/>
			<mx:HBox width="100%" horizontalAlign="left" horizontalGap="6" paddingBottom="4">
				<renderers:FilterComboBox dataProvider="{possibleCollaborators.source}" 
										  labelField="@displayName" 
										  prompt="Collaborator to add..."
										  width="270"  
										  id="collaboratorCombo">
				</renderers:FilterComboBox>
				<mx:Button 
					enabled="{collaboratorCombo.selectedItem != null &amp;&amp; collaboratorCombo.selectedIndex > 0 ? true : false}" 
					icon="@Embed(source='../../assets/add.png')" 
					disabledIcon="@Embed(source='../../assets/add_disable.png')"
					click="addCollaborator()" 
					width="25">
				</mx:Button>
				<mx:Button  
					icon="@Embed(source='../../assets/delete.png')" 
					disabledIcon="@Embed(source='../../assets/delete_disable.png')" 
					enabled="{collaboratorGrid.selectedItem != null}" 
					click="removeCollaborator()" width="25"/>
			</mx:HBox>
			<mx:HBox width="100%" height="100%">
				<mx:DataGrid id="collaboratorGrid" dataProvider="{collaborators}" height="100%" showHeaders="true">
					<mx:columns>
						<mx:DataGridColumn dataField="@idAppUser" width="200" headerText="Collaborator" editable="false"
										   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.getAppUserList.lastResult.AppUser, '@displayName', '@idAppUser', '@idAppUser')}" />  
						<mx:DataGridColumn headerText="Upload" 
										   width="65" 
										   editable="true"                        	
										   dataField="@canUploadData" 
										   editorDataField="selected" sortable="false"
										   itemRenderer="{CheckBox.getFactory('Y', 'N', '@canUploadData', true)}"/>
						<mx:DataGridColumn headerText="Update" 
										   width="65" 
										   editable="true"                        	
										   dataField="@canUpdate" 
										   editorDataField="selected" sortable="false"
										   itemRenderer="{CheckBox.getFactory('Y', 'N', '@canUpdate', true)}"/>
					</mx:columns>
				</mx:DataGrid>		   		
			</mx:HBox>
		</mx:VBox>
		
	</mx:VBox>
	
  </mx:Canvas>


	
</mx:Canvas>
