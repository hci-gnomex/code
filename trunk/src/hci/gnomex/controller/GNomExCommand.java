package hci.gnomex.controller;

import java.io.*;
import java.sql.*;
import java.net.InetAddress;
import java.rmi.*;
import javax.sql.*;
import javax.rmi.*;
import javax.naming.*;
import javax.ejb.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import hci.framework.control.*;
import hci.gnomex.constants.Constants;
import hci.gnomex.model.*;
import hci.gnomex.security.SecurityAdvisor;

import org.hibernate.*;
import hci.framework.utilities.*;
import java.util.*;
import org.jdom.*;

/**
 *
 *@author
 *@created
 *@version    1.0
 * Generated by the CommandBuilder tool - Kirt Henrie
 */

public abstract class GNomExCommand extends Command implements Serializable {


  // put any instance variables here (usually the DetailObjects used by this command)
  protected String xmlResult = "<SUCCESS/>";

  public String SUCCESS_JSP = "/getXML.jsp";
  public String ERROR_JSP = "/message.jsp";
  protected String rowSaveCMD;
  protected String rowDeleteCMD;

  /**  Constructor for the Command object */
  public GNomExCommand() {
    this.initLog4j();
  }
  
  /**
  * The method to initialize Log4j
  */
  protected static void initLog4j() {
    String configFile = Constants.WEBCONTEXT_DIR + Constants.LOGGING_PROPERTIES;
    if (configFile == null) {
      System.err.println("No configuration file specified for log4j!");
    }
    org.apache.log4j.PropertyConfigurator.configure(configFile);
  }

  protected void setRowCommands(HttpServletRequest request) {
  	String URI = request.getRequestURI();
  	if (URI.lastIndexOf("/") > 0) {
  		URI = URI.substring(0, URI.lastIndexOf("/"));
  	}
  	this.rowDeleteCMD = URI + "/DeleteCODGridRow.aw";
  	this.rowSaveCMD = URI + "/SaveCODGridRow.aw";
  }

  /**
   *  The callback method allowing you to manipulate the HttpServletRequest
   *  prior to forwarding to the response JSP. This can be used to put the
   *  results from the execute method into the request object for display in the
   *  JSP.
   *
   *@param  request  The new requestState value
   *@return          Description of the Return Value
   */
  public HttpServletRequest setRequestState(HttpServletRequest request) {
    // load any result objects into request attributes, keyed by the useBean id in the jsp
    request.setAttribute("xmlResult",this.xmlResult);
    
    // Garbage collect
    this.xmlResult = null;
    System.gc();
    
    return request;
  }

  /**
   *  The callback method called after the loadCommand, and execute methods,
   *  this method allows you to manipulate the HttpServletResponse object prior
   *  to forwarding to the result JSP (add a cookie, etc.)
   *
   *@param  request  The HttpServletResponse for the command
   *@return          The processed response
   */
  public HttpServletResponse setResponseState(HttpServletResponse response) {
    response.setHeader("Cache-Control", "max-age=0, must-revalidate");
    return response;
  }

  /**
   *  The callback method called after the loadCommand and execute methods
   *  allowing you to do any post-execute processing of the HttpSession. Should
   *  be used to add/remove session data resulting from the execution of this
   *  command
   *
   *@param  session  The HttpSession
   *@return          The processed HttpSession
   */
  public HttpSession setSessionState(HttpSession session) {
    return session;
  }
  
  public SecurityAdvisor getSecAdvisor() {
    return (SecurityAdvisor)this.getSecurityAdvisor();
  }
  
  public String getAppURL(HttpServletRequest request) throws Exception {
    boolean isLocalHost = request.getServerName().equalsIgnoreCase("localhost") || request.getServerName().equals("127.0.0.1")  || InetAddress.getByName(request.getRemoteAddr()).isLoopbackAddress();
    return "http"+ (isLocalHost ? "://" : "s://") + request.getServerName() + request.getContextPath();    
  }
  
  public String getLaunchAppURL(HttpServletRequest request) throws Exception {
    return getAppURL(request) + Constants.LAUNCH_APP_JSP;
  }

  public String getShowRequestFormURL(HttpServletRequest request) throws Exception {
    return getAppURL(request) + Constants.SHOW_REQUEST_FORM;
  }


}
