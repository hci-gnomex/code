<?xml version="1.0" encoding="utf-8"?>    
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" 
	xmlns="*" 
	xmlns:views="views.*"    
	xmlns:workflow="views.workflow.*"  
	xmlns:experiment="views.experiment.*"  
	xmlns:analysis="views.analysis.*" 
	xmlns:user="views.user.*"
	xmlns:protocol="views.protocol.*"
	xmlns:search="views.search.*"
	xmlns:slide="views.slide.*"
	xmlns:hci="hci.flex.controls.*"
	xmlns:billing="views.billing.*"
	xmlns:util="views.util.*"
	 backgroundGradientColors="[#7E7C7C, #7E7C7C]" 
	 paddingBottom="3" paddingLeft="2" paddingRight="2" paddingTop="2" 
	 backgroundGradientAlphas="[1.0, 1.0]" creationComplete="init()">



    <mx:Fade id="fadeOut" duration="100"/>
    <mx:Fade id="fadeIn" duration="100"/>
    	
	<mx:HTTPService 
    id="createSecurityAdvisor"
    url="CreateSecurityAdvisor.gx"
    resultFormat="e4x"
    result="onCreateSecurityAdvisor(event)"
    fault="onFailCreateSecurityAdvisor(event)"
    destination="createSecurityAdvisor"
    showBusyCursor="false"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService > 
        	
	<mx:HTTPService 
    id="getSecurityAdvisorForGuest" 
    url="getSecurityAdvisorInfo.jsp"
    resultFormat="e4x"
    result="onGetSecurityAdvisorForGuest(event)"
	fault="onFailHttpRequest('Failed to create security advisor for guest', event)"
    destination="getSecurityAdvisorForGuest"
    showBusyCursor="false"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService > 
    
   
    

    <mx:HTTPService 
    id="getExperimentDesignList" 
    url="GetExperimentDesignList.gx"
    resultFormat="e4x"
    showBusyCursor="false"
    destination="getExperimentDesignList"
    result="onGetExperimentDesignList(event)"
	fault="onFailHttpRequest('Failed to get experiment design list', event)"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="getExperimentFactorList" 
    url="GetExperimentFactorList.gx"
    resultFormat="e4x"
    showBusyCursor="false"
    result="onGetExperimentFactorList(event)"
	fault="onFailHttpRequest('Failed to get experiment factor list', event)"
    destination="getExperimentFactorList"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
         
         
    <mx:HTTPService 
    id="getLabList" 
    url="GetLabList.gx"
    showBusyCursor="false"
    resultFormat="e4x"
    result="onGetLabList(event)"
	fault="onFailHttpRequest('Failed to get lab list', event)"
    destination="getLabList"
    useProxy="false">
    <mx:request>
           <listKind>UnboundedLabList</listKind>
    </mx:request>
    </mx:HTTPService >
    
    
    <mx:HTTPService 
    id="getProjectList" 
    url="GetProjectList.gx"
    resultFormat="e4x"
    result="onGetProjectList(event)"
    destination="getProjectList"
	fault="onFailHttpRequest('Failed to project list', event)"
    showBusyCursor="false"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >

	     
        <mx:Style source="css/gnomex_flex.css" />

        
<mx:Script>
            
        <![CDATA[
        	import hci.flex.renderers.RendererFactory;
        	import hci.flex.util.DictionaryManager; 
        	import hci.flex.dictionary.DictionaryEditor;
        	import views.util.AboutView;
        	import views.util.AppProgressView;
        	import views.util.CaptchaView;
        	import views.util.FileDownloadUtil;
        	import views.util.PromptXMLListCollection;
        	import mx.collections.Sort;
        	import mx.collections.XMLListCollection;
            import mx.controls.Alert;
            import mx.rpc.events.ResultEvent;        
            import mx.managers.CursorManager;
            import mx.managers.PopUpManager;
            import mx.events.CloseEvent;
            import mx.rpc.events.FaultEvent;
            import mx.controls.dataGridClasses.DataGridColumn;
            import hci.flex.dictionary.DictionaryEvent;
            
            [Bindable]
            public var dictionaryManager:DictionaryManager;
            
	        [Bindable]
	        [Embed(source="assets/tick.png")]
	        public var iconCheck:Class;
	        
	        [Bindable]
	        [Embed(source="assets/tick_black.png")]
	        public var iconBlackCheck:Class;
	        
	        [Bindable]
	        [Embed(source="assets/information.png")]
	        public var iconInformation:Class;
	                    
	        [Bindable]
	        [Embed(source="assets/flag_yellow.png")]
	        public var iconYellowFlag:Class;
	        	
	        [Bindable]
	        [Embed(source="assets/group.png")]
	        public var iconGroup:Class; 
	        
	        	
	        [Bindable]
	        [Embed(source="assets/brick.png")]
	        public var iconProtocol:Class;
	        
	        [Bindable]
	        [Embed(source="assets/folder.png")]
	        public var iconProject:Class;

	        [Bindable]
	        [Embed(source="assets/folder.png")]
	        public var iconFolder:Class;
	        
	        [Bindable]
	        [Embed(source="assets/page.png")]
	        public var iconPage:Class;

	        [Bindable]
	        [Embed(source="assets/flask.png")]
	        public var iconFlask:Class;  
	
	        [Bindable]
	        [Embed(source="assets/microarray_small.png")]
	        public var iconExperiment:Class; 
	
	        [Bindable]
	        [Embed(source="assets/microarray_small.png")]
	        public var iconMicroarray:Class; 
	        
	        	
	        [Bindable]
	        [Embed(source="assets/microarray_small_disable.png")]
	        public var iconMicroarrayDisabled:Class; 

	        [Bindable]
	        [Embed(source="assets/microarray_small_single_color.png")]
	        public var iconMicroarraySingleColor:Class; 

	        [Bindable]
	        [Embed(source="assets/microarray_small_single_color_disable.png")]
	        public var iconMicroarraySingleColorDisabled:Class; 

	        [Bindable]
	        [Embed(source="assets/microarray_chip.png")]
	        public var iconMicroarrayAffy:Class; 
	        
	        [Bindable]
	        [Embed(source="assets/microarray_chip_disable.png")]
	        public var iconMicroarrayAffyDisabled:Class; 
	        	        
	        [Bindable]
	        [Embed(source="assets/flask.png")]
	        public var iconMicroarrayOther:Class; 
	        
	        [Bindable]
	        [Embed(source="assets/basket.png")]
	        public var iconCategory:Class;
	        
	        [Bindable]
	        [Embed(source="assets/chart_line.png")]
	        public var iconQC:Class;
	        
	        	        [Bindable]
	        [Embed(source="assets/chart_line_disable.png")]
	        public var iconQCDisabled:Class;
	        
	       	[Bindable]
	        [Embed(source="assets/bullet_orange.png")]
	        public var iconBullet:Class;
	     
	       	[Bindable]
	        [Embed(source="assets/bullet_green.png")]
	        public var iconGreenBullet:Class;
	        
	        [Bindable]
	        [Embed(source="assets/bullet_red.png")]
	        public var iconRedBullet:Class;
	        
	        [Bindable]
	        [Embed(source="assets/DNA_diag.png")]
	        public var iconSolexa:Class;
	        
	        [Bindable]
	        [Embed(source="assets/DNA_diag_disable.png")]
	        public var iconSolexaDisabled:Class;
	        
	        
	        [Bindable]
	        [Embed(source="assets/DNA_diag_lightening.png")]
	        public var iconHiSeq:Class;

	        [Bindable]
	        [Embed(source="assets/DNA_diag_lightening_disable.png")]
	        public var iconHiSeqDisabled:Class;
	        
	        [Bindable]
	        [Embed(source="assets/sitemap.png")]
	        public var iconTree:Class;

	        [Bindable]
	        [Embed(source="assets/error.png")]
	        public var iconError:Class;

	        [Bindable]
	        [Embed(source="assets/comment.png")]
	        public var iconWarning:Class;
	        
	        [Bindable]
	        [Embed(source="assets/asterisk_yellow.png")]
	        public var iconLabeling:Class;
	        
 	        [Bindable]
	        [Embed(source="assets/basket_put.png")]
	        public var iconHyb:Class;

	        [Bindable]
	        [Embed(source="assets/chart_line.png")]
	        public var iconSamplePrep:Class;

 
	        [Bindable] 
	        [Embed(source="assets/map.png")]
	        public var iconAnalysis:Class;

	        [Bindable]
	        [Embed(source="assets/server_go.png")]
	        public var iconServer:Class;
	        
	         
	        [Bindable]
	        [Embed(source="assets/money.png")]
	        public var iconBilling:Class; 

	        [Bindable]
	        [Embed(source="assets/money_disable.png")]
	        public var iconBillingDisabled:Class; 
	        
	        
	        [Bindable]
	        [Embed(source="assets/folder_money.png")]
	        public var iconBillingFolder:Class;
	        
	        	        
	        [Bindable]
	        [Embed(source="assets/pricesheet.png")]
	        public var iconPriceSheet:Class;
	        
	        [Bindable]
	        [Embed(source="assets/attach.png")]
	        public var iconPriceCriteria:Class;

	        
	        [Bindable]
	        [@Embed(source="assets/ding.mp3")]
	        public var soundDing:Class;
	        
	        public var isUniversityOnlyUser:Boolean = false;
	        
	        [Bindable]
	        private var pricingURL:String = null;
	        
	        public var annotationColor:uint = hci.flex.renderers.RendererFactory.DEFAULT_MISSING_REQUIRED_FIELD_BACKGROUND;
	        public var annotationColorBorder:uint = hci.flex.renderers.RendererFactory.DEFAULT_MISSING_REQUIRED_FIELD_BORDER;

	        public var cy3Color:uint = 0xccffaa;
	        public var cy3ColorBold:uint = 0x77dd55;

	        public var cy5Color:uint = 0xffccaa;
	        public var cy5ColorBold:uint = 0xff8855;

	        
	        private var currentView:Object = null;
	        
	        
	        public var downloadPopupCount:int = 0;
	         
			[Bindable]
			public var promptedLabList:PromptXMLListCollection;
			[Bindable]
			public var submitRequestLabList:XMLListCollection;
			[Bindable]
			public var promptedSubmitRequestLabList:PromptXMLListCollection;
			[Bindable]
			public var manageLabList:XMLListCollection;
			[Bindable]
			public var promptedWorkAuthLabList:PromptXMLListCollection;

			private var properties:Object;

	        public var PROPERTY_WORKAUTH_INSTRUCTIONS:String          = "workauth_instructions";
	        public var PROPERTY_WORKAUTH1_URL:String                  = "workauth1_url";
	        public var PROPERTY_WORKAUTH1_NAME:String                 = "workauth1_name";
	        public var PROPERTY_WORKAUTH2_URL:String                  = "workauth2_url";
	        public var PROPERTY_WORKAUTH2_NAME:String                 = "workauth2_name";
	        public var PROPERTY_QC_INSTRUCTIONS:String                = "qc_instructions";
			public var PROPERTY_CORE_FACILITY_NAME:String             = "core_facility_name";
	        public var PROPERTY_CONTACT_NAME_CORE_FACILITY:String     = "contact_name_core_facility";
	        public var PROPERTY_CONTACT_EMAIL_CORE_FACILITY:String    = "contact_email_core_facility";
	        public var PROPERTY_CONTACT_NAME_SOFTWARE_BUGS:String     = "contact_name_software_bugs";
	        public var PROPERTY_CONTACT_EMAIL_SOFTWARE_BUGS:String    = "contact_email_software_bugs";
			public var PROPERTY_HELP_URL:String                       = "help_url";
			public var PROPERTY_PRICING_URL:String                    = "pricing_url";
			public var PROPERTY_UNIVERSITY_USER_AUTHENTICATION:String = "university_user_authentication";  
			public var PROPERTY_GENERATE_GL_INTERFACE:String          = "generate_general_ledger_interface";
			public var PROPERTY_ILLUMINA_BARCODING_NOTE:String        = "illumina_barcoding_note";
			
            public	var fileDownloadUtil:FileDownloadUtil;

 
			private var appProgressBar:AppProgressView;
			private var currentProgressInterval:uint = 0;
			
			[Bindable]
			public var version:String = "";
			
			
			private function lookupExperiment():void {
				if (requestNumber.text.indexOf("A") == 0) {
					this.showAnalysisForNumber(requestNumber.text);				
				} else {
					showExperiment(requestNumber.text);
					
				} 
			}
			
			public function showExperiment(requestNumber:String):void {
				navExperimentView.selectedRequestNumber = requestNumber;
				navExperimentView.selectedIdRequest = null;
				navExperimentView.selectedIdLab = null;
				navExperimentView.selectedIdProject = null;

    			// We have to make sure that the first time a lookup
				// occurs after lauch, we refresh the experiment
				// through show event (init()).  The next time
				// through, we will make the call directly.
				if (navExperimentView.isInitialized) {
					navExperimentView.refreshExperimentsForLookup();					
				}
				

				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navExperimentView;
				
	        					
				
				// Reset the experiment search components.
				callLater(navExperimentView.resetSearchComponents);
				
			}
			
			public function showExperimentById(idRequest:String):void {
				navExperimentView.selectedRequestNumber = null;
				navExperimentView.selectedIdRequest = idRequest;
				navExperimentView.selectedIdLab = null;
				navExperimentView.selectedIdProject = null;

				navExperimentView.checkSecurity();

				var parms:Object = new Object();
				parms.idRequest = idRequest;
				navExperimentView.getRequestFromNav.send(parms);

				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navExperimentView;
				
			}
			
			public function showExperimentDownload(requestNumber:String):void {
				navExperimentView.selectedRequestNumber = requestNumber;
				navExperimentView.selectedIdRequest = null;
				navExperimentView.selectedIdLab = null;
				navExperimentView.selectedIdProject = null;

				
    			// We have to make sure that the first time a lookup
				// occurs after lauch, we refresh the experiment
				// through show event (init()).  The next time
				// through, we will make the call directly.
				if (navExperimentView.isInitialized) {
					navExperimentView.refreshExperimentForLookupDownload();					
				}


				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navExperimentView;
				
			}
            
			public function showAnalysisForExperiment(request:Object):void {
				navAnalysisView.selectedIdAnalysis = null;
				navAnalysisView.selectedIdAnalysisGroup = null;
				navAnalysisView.selectedIdLab = request.@idLab;

				var parms:Object = new Object();
				parms.idLab = request.@idLab;
				parms.idRequest = request.@idRequest;
				navAnalysisView.getAnalysisGroupList.send(parms);

				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				navAnalysisView.checkSecurity();
				theViews.selectedChild = navAnalysisView;
				
			}

			public function showAnalysis(idAnalysis:Object, analysisNumber:String, idLab:String):void {
				navAnalysisView.selectedIdAnalysis = null;
				navAnalysisView.selectedIdAnalysisGroup = null;
				navAnalysisView.selectedIdLab = idLab;
				navAnalysisView.selectedAnalysisNumber = analysisNumber;

				navAnalysisView.checkSecurity();

				var parms:Object = new Object();
				parms.idLab = idLab;
				parms.idAnalysis = idAnalysis;
				navAnalysisView.getAnalysisGroupList.send(parms);

				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				navAnalysisView.checkSecurity();
				theViews.selectedChild = navAnalysisView;
				
			}
			
			public function showAnalysisForNumber(analysisNumber:String):void {
				navAnalysisView.selectedAnalysisNumber = analysisNumber;
				navAnalysisView.selectedIdAnalysis = null;
				navAnalysisView.selectedIdLab = null;
				navAnalysisView.selectedIdAnalysisGroup = null;

				

				// We have to make sure that the first time a lookup
				// occurs after lauch, we refresh the analysis
				// through show event (init()).  The next time
				// through, we will make the call directly.
				if (navAnalysisView.isInitialized) {
					navAnalysisView.refreshAnalysisForLookup();
				}

				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navAnalysisView;
				
			}

			public function showBillingAccountDetail(idLab:String):void {
				var theLab:Object = this.getLabList.lastResult.Lab.(@idLab == idLab);
				if (theLab is XMLList) {
					theLab = theLab[0];
				}
				var labNode:XML = <Lab id=''/>;
				labNode.@id = theLab.@idLab;
				navUsersView.itemToSelect = labNode;
				

				// We have to make sure that the first time a lookup
				// occurs after lauch, we refresh the lab list
				// through show event (init()).  The next time
				// through, we will make the call directly.
				if (navUsersView.isInitialized) {
					navUsersView.initializeData();
				}

				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navUsersView;
				
			}

			public function showProtocol(idProtocol:Object, className:String):void {
				protocolsView.lastSavedProtocolId = idProtocol;
				protocolsView.lastSelectedProtocolClass = className; 
				protocolsView.initializeData();

				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = protocolsView;
				
			}

            private function search():void {
            	this.stateStack.selectedChild = navSearchView;
            	navSearchView.simpleSearchText = this.searchText.text;
            	
            	// We are already on this tab, so force init().
            	if (this.navSearchView.searchView != null) {
            		this.navSearchView.init();
            	}
            }
            
            public function showAdvancedSearch():void {
            	this.stateStack.selectedChild = this.navSearchView;
            }
            
            
            private function onViewSelection():void {
            	
            	if (currentView != null) {
	            	currentView.checkDirty();
	            	
	            	// if we are leaving slide view, refresh dictionaries
	            	if (currentState == "AdminState") {
		            	if (currentView == this.slideManagementView) {
		            		slideManagementView.refreshDictionaries();
	    	        	}
	            	}
	            	
	            	// if we are leaving protocol view, refresh dictionaries
	            	if (currentView == this.protocolsView) {
	            		protocolsView.refreshDictionaries();
	            	}
	            	
            	}
            	
            	
				this.stateStack.selectedChild = theViews;
            	theViews.visible = true;
            	
            	currentView = theViews.selectedChild;
            }
                        
            
             public function isGuestMode():Boolean {
            	if (Application.application.parameters.isGuest != null) {
       				return Application.application.parameters.isGuest == 'Y';
            	} else {
            		return false;
            	}
             }

            public function launchExperimentDownloads():Boolean {
            	if (Application.application.parameters.launchWindow != null &&
            	    Application.application.parameters.launchWindow == "ExperimentDownload" &&
            	    Application.application.parameters.requestNumber != null ) {
       				return true;
            	} else {
            		return false;
            	}
            }
            public function launchExperimentDetail():Boolean {
            	if (Application.application.parameters.launchWindow != null &&
            	    Application.application.parameters.launchWindow == "ExperimentDetail" &&
            	    Application.application.parameters.requestNumber != null ) {
       				return true;
            	} else { 
            		return false;
            	}
            }
            public function launchAnalysisDetail():Boolean { 
            	if (Application.application.parameters.launchWindow != null &&
            	    Application.application.parameters.launchWindow == "AnalysisDetail" &&
            	    Application.application.parameters.analysisNumber != null ) {
       				return true;
            	} else {
            		return false;
            	}
            }
            public function launchBillingAccountDetail():Boolean {
            	if (Application.application.parameters.launchWindow != null &&
            	    Application.application.parameters.launchWindow == "BillingAccountDetail" &&
            	    Application.application.parameters.idLab != null ) {
       				return true;
            	} else { 
            		return false;
            	}
            }
            
            public function getLaunchRequestNumber():String {
            	if (Application.application.parameters.requestNumber != null) {
       				return Application.application.parameters.requestNumber;
            	} else {
            		return "";
            	}
            }
            public function getLaunchAnalysisNumber():String {
            	if (Application.application.parameters.analysisNumber != null) {
       				return Application.application.parameters.analysisNumber;
            	} else {
            		return "";
            	}
            }
            
            public function getLaunchIdLab():String {
            	if (Application.application.parameters.idLab != null) {
       				return Application.application.parameters.idLab;
            	} else {
            		return "";
            	}
            }
            
            private function init():void {
            	appProgressBar = new AppProgressView();
            	appProgressBar.currentState = "StartupState";
			    PopUpManager.addPopUp(appProgressBar, mainArea, false);
				PopUpManager.centerPopUp(appProgressBar);

            	if (isGuestMode() ) { 
            		var captchaWindow:CaptchaView = new CaptchaView();
            		PopUpManager.addPopUp(captchaWindow, mainArea, false);
            		PopUpManager.centerPopUp(captchaWindow);
            		captchaWindow.init();
            		captchaWindow.phrase.setFocus();
            				    
				} else {
	            	createSecurityAdvisor.send();
				}
            } 
            public  function formatDate(date:Date):String {
			    return date.getFullYear().toString() + 
                    '-' + (date.getMonth()+1).toString() + '-' + date.getDate();
            }
            
                   

            public function getLabName(item:Object, col:int):String 
            {  
	        	var labName:String = "";
	        	var labList:XMLList = getLabList.lastResult.Lab;     			
	        	for(var i:Number = 0; i < labList.length(); i++) {
	            	if(labList[i].@idLab == item.@idLab) {
	                	labName = labList[i].@name;
	                    break;
	             	}
	             }
	             return labName;
       	
            }
            
            public function getIdAppUser():Object {
            	if (isGuestMode()) {
            		return getSecurityAdvisorForGuest.lastResult.@idAppUser;
            	} else {
            		return createSecurityAdvisor.lastResult.@idAppUser;
            	}
            }
            
            public function getUNID():Object {
            	if (isGuestMode()) {
            		return "";
            	} else {
            		return createSecurityAdvisor.lastResult.@uNID;
            	}
            }
            
            public function getUserEmail():Object {
            	if (isGuestMode()) {
            		return "";
            	} else {
            		return createSecurityAdvisor.lastResult.@userEmail;
            	}
            }
            
            public function hasPermission(permission:String):Boolean {
            	var hasPermission:Boolean = false;
            	var thePermission:Object = null;
            	if (isGuestMode()) {
					hasPermission = false;
            	} else {
					thePermission = createSecurityAdvisor.lastResult.globalPermissions.Permission.(@name == permission);     
					if (thePermission.length() > 0) { 
						hasPermission = true;
					}       		
            	}
				
				return hasPermission;
            }

            public function getGroupsToManage():Object {
            	if (isGuestMode()) {
            		return new XMLListCollection();
            	} else {
            		return new XMLListCollection(createSecurityAdvisor.lastResult.groupsToManage.Lab);
            	}
            }
            
            public function hasGroupsToManage():Boolean {
            	var groupsToManage:XMLList = null;
            	if (isGuestMode()) {
					groupsToManage = new XMLList();
            	} else {
					groupsToManage = createSecurityAdvisor.lastResult.groupsToManage.Lab;    		
            	}
            	if (groupsToManage.length() > 0) {
            		return true;
            	} else {
            		return false;
            	}
            }
            
            public function canSubmitRequests(idLab:int):Boolean {
            	var theLab:Object = getLabList.lastResult.Lab.(@idLab == idLab.toString());
            	if (theLab != null && theLab.@canSubmitRequests == 'Y') {
            		return true;
            	} else {
            		return false;
            	}
            }
            
            public function isMyLab(idLab:int):Boolean {
            	var theLab:Object = getLabList.lastResult.Lab.(@idLab == idLab.toString());
            	if (theLab != null && theLab.@isMyLab == 'Y') {
            		return true;
            	} else {
            		return false;
            	}
            	
            }
              
            private function checkSecurity():void {
				if (this.isGuestMode() || this.isUniversityOnlyUser) {
					currentState = "GuestState";
				} else if (hasPermission("canAccessAnyObject")) {
					currentState = "AdminState";
				} else if (hasGroupsToManage()) {
					currentState = "ManagerState";
				} else if (hasPermission("canSubmitRequests")) {
					currentState = "UserState";
				} else {
					currentState = "UserNonSubmitterState";
				}
            }

            private function onFailCreateSecurityAdvisor(event:FaultEvent):void {
            	this.appProgressBar.currentState = "AuthenticationFailedState";
            }
            
            private function onCreateSecurityAdvisor(event:ResultEvent):void {
            	if (!(createSecurityAdvisor.lastResult is XML) ||
            	    createSecurityAdvisor.lastResult.name() != 'SecurityAdvisor') {
            		Alert.show("Authentication failed.");  
            		return;	
            	}
			    
			    this.appProgressBar.currentState = "LoadingState";
			    this.showProgress(30);
			    
			    userName.text = createSecurityAdvisor.lastResult.@userFirstName + " " + createSecurityAdvisor.lastResult.@userLastName;
			    isUniversityOnlyUser = createSecurityAdvisor.lastResult.@isUniversityOnlyUser == "Y" ? true : false;
			    version = createSecurityAdvisor.lastResult.@version;
			    		
			    dictionaryManager = new DictionaryManager("ManageDictionaries.gx");
				dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_LOADED, onDictionariesLoaded);
			    dictionaryManager.call("load", "");
			    
				
            	getExperimentDesignList.send();
            	getExperimentFactorList.send();
            	getLabList.send();
            	getProjectList.send();

				
            }
            
            private function onGetSecurityAdvisorForGuest(event:ResultEvent):void {
			    this.appProgressBar.currentState = "LoadingState";
            	this.showProgress(30);

            	if (!(getSecurityAdvisorForGuest.lastResult is XML) ||
            	    getSecurityAdvisorForGuest.lastResult.name() != 'SecurityAdvisor') {
            		Alert.show("You must launch GNomEx from guest page.");  
            		return;	
            	}
            	userName.text = "(guest)";
			    version = getSecurityAdvisorForGuest.lastResult.@version;
			    isUniversityOnlyUser = getSecurityAdvisorForGuest.lastResult.@isUniversityOnlyUser == "Y" ? true : false;

			    
			    dictionaryManager = new DictionaryManager("ManageDictionaries.gx");
				dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_LOADED, onDictionariesLoaded);
			    dictionaryManager.call("load", "");


            	getExperimentDesignList.send();
            	getExperimentFactorList.send();
            	getLabList.send();
            	getProjectList.send();
            	
            	showProgress(20);
            }
 
            public function onDictionariesLoaded(event:Event):void {
            	properties = new Object();
            	for each(var prop:Object in dictionaryManager.getEntries("hci.gnomex.model.Property")) {
            		if (prop.@value == '') {
            			continue;
            		}
            		properties[prop.@propertyName] = prop.@propertyValue;
            	}
            	pricingURL = getProperty(PROPERTY_PRICING_URL);
            	
	        	showProgress(40);
	        	enableApp();
            }
            
            public function getProperty(name:String):String {
            	if (properties == null) {
            		return "";
            	}
            	return properties[name];
            }
            
            private function showProgress(interval:uint):void {
            	currentProgressInterval = currentProgressInterval + interval;
				appProgressBar.bar.setProgress(currentProgressInterval, 100);
            }
            
            private function onGetExperimentDesignList(event:ResultEvent):void {
	        	showProgress(10);
            	
	        }		
	        
			private function onGetExperimentFactorList(event:ResultEvent):void {
	        	showProgress(10);
	        }
	        
	        private function onGetLabList(event:ResultEvent):void {
	        	var emptyNode:XML = <Lab idLab='' name='' label=''/>;
	        	promptedLabList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getLabList.lastResult.Lab));
	        	submitRequestLabList = new XMLListCollection(getLabList.lastResult.Lab.(@canSubmitRequests == 'Y'));
	        	promptedSubmitRequestLabList = new PromptXMLListCollection(emptyNode, submitRequestLabList);
	        	manageLabList = new XMLListCollection(getLabList.lastResult.Lab.(@canManage == 'Y'));
	        	
	       		// For submitting work auth forms online, a non-gnomex university user will
	       		// select from a list of all labs.  A guest user doesn't have this feature.
	       		// A normal gnomex user will select from a list of their labs. (Admins
	       		// will have a full list since they can submit a request on behalf 
	       		// of any lab.
	        	if (this.isUniversityOnlyUser) {
	        		promptedWorkAuthLabList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getLabList.lastResult.Lab));
	        	} else if (this.isGuestMode()) {	        		
	        	} else {
	        		promptedWorkAuthLabList = new PromptXMLListCollection(emptyNode, submitRequestLabList);
	        	}
	        	showProgress(30);
	        	enableApp();
	        }		
            
	        
            private function onGetProjectList(event:ResultEvent):void {
	        	
	       	    showProgress(10);

	        	enableApp();
	        }
	        
	        
	        private function enableApp():void {
	        	// If we are already in an enabled state,
	        	// just return.
	        	if (currentState != null) {
	        		return;
	        	}
	        	
	        	if (dictionaryManager != null &&
	        	    dictionaryManager.xml != null &&
	        	    manageLabList != null &&
	        	    promptedLabList != null ) {
	        	    
	        	    
					appProgressBar.bar.setProgress(100, 100);

		        	PopUpManager.removePopUp(appProgressBar);
	    	    	currentState = "enabledState"; 
	        	} 
	        	
	        }
	        
	        private function checkSecurityAndLaunchStartWindow():void {
	        	if (this.currentState == "enabledState") {
	        		checkSecurity();
	        		if (this.homeView != null) {
	        			this.homeView.init();
	        		}
		        	launchStartWindow();	        		
	        	}
	        }
	        
	        private function launchStartWindow():void {
	        	if (launchExperimentDownloads()) {
	        		this.showExperimentDownload(getLaunchRequestNumber());
	        	} else if (launchExperimentDetail()) {
	        		this.showExperiment(getLaunchRequestNumber());
	        	} else if (launchAnalysisDetail()) {
   					this.showAnalysisForNumber(getLaunchAnalysisNumber());
	        	} else if (launchBillingAccountDetail() && hasPermission("canAccessAnyObject")) {
   					this.showBillingAccountDetail(this.getLaunchIdLab());
	        	} 
	        	 
	        }
	        
		public function sortExperimentDesigns(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var ed1:String = obj1.@experimentDesign;
				var ed2:String = obj2.@experimentDesign;
				
				if (ed1 == 'Other') {
					return 1;
				} else if (ed2 == 'Other') {
					return  -1;
				} else {
					if (ed1 < ed2) {
						return -1;
					} else if (ed1 > ed2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}
		public function sortExperimentFactors(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var ef1:String = obj1.@experimentFactor;
				var ef2:String = obj2.@experimentFactor;
				if (ef1 == 'Other') {
					return 1;
				} else if (ef2 == 'Other') {
					return  -1;
				} else  {
					if (ef1 < ef2) {
						return -1;
					} else if (ef1 > ef2) {
						return 1;
					} else {
						return 0;
					}
				}				
				
			}
		}
		

            
        public function onFailHttpRequest(title:String, event:FaultEvent):void {
        	if (event.message.body is String) {
	        	var startPos:int = event.message.body.indexOf("TEXT=");
	        	var endPos:int   = event.message.body.indexOf("TYPE=");
	        	if (startPos != -1 && endPos != -1) {
		        	Alert.show(event.message.body.toString().substring(startPos + 5, endPos), title);    		
	        	} else {
	        		Alert.show(event.message.body.toString(), title);
	        	}        
        		
        	} else {
        		Alert.show(event.fault.faultCode + "\n\n" + event.fault.faultString + "\n\n" + event.fault.faultDetail, title);
        		
        	}
        }
        
        
        ]]>
    </mx:Script>
    
    
    <mx:XMLListCollection id="experimentDesignList" source="{getExperimentDesignList.lastResult.ExperimentDesign}" sort="{experimentDesignSorter}"/>
    <mx:XMLListCollection id="experimentFactorList" source="{getExperimentFactorList.lastResult.ExperimentFactor}" sort="{experimentFactorSorter}"/>
	<mx:Sort id="experimentDesignSorter" compareFunction="sortExperimentDesigns" unique="true"/>
	<mx:Sort id="experimentFactorSorter" compareFunction="sortExperimentFactors" unique="true"/> 

	    <mx:VBox id="theBody"  dropShadowEnabled="true"  
	    	width="100%" height="100%" 
	    	verticalGap="0" 
	    	paddingTop="0" paddingLeft="0" 
	    	paddingRight="0" paddingBottom="0">
	    

		  <mx:VBox width="100%"  id="navBar" backgroundImage="@Embed(source='assets/navbar.png')" 
		  	backgroundSize="100%" dropShadowColor="#2C2222" dropShadowEnabled="true" 
		  	borderStyle="solid" borderColor="#858780" borderThickness="1" 
		  	cornerRadius="4" verticalGap="0" 
		  	paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0">
		  	 
		      <mx:VBox width="100%" verticalGap="0"> 
			      <mx:HBox width="100%"  horizontalAlign="right" verticalAlign="top" horizontalGap="0"  styleName="catalogPanel" 
			      	paddingBottom="4" id="hbox1" 
			      	paddingTop="4" 
			      	paddingLeft="4" paddingRight="4">
			        <mx:HBox width="100%" height="100%" horizontalAlign="left" 
			        	horizontalGap="0" paddingBottom="0" paddingTop="0" verticalAlign="middle">
			          <mx:Image source="assets/hciLogo_hOnly.png"/>
			          <mx:Label text="GNomEx" id="appLabel" fontFamily="Arial" fontSize="17" color="#ffffff" fontWeight="bold"/>
			          <mx:HBox width="100%" height="100%"  horizontalAlign="right" paddingLeft="10" paddingRight="6" horizontalGap="10" verticalAlign="middle" paddingTop="0">
			            <mx:HBox horizontalAlign="left" verticalAlign="middle" width="100%" paddingLeft="0" paddingRight="0" height="100%">
			                <mx:Label id="userName" color="#ffffff"  visible="false"/>
			            </mx:HBox>
			            
			            <mx:HBox height="100%" horizontalGap="2" verticalAlign="middle" defaultButton="{lookupButton}">
			              <mx:Label text="Lookup Experiment or Analysis by #" height="18" color="#ffffff" id="requestNumberLabel"  fontFamily="Arial" visible="false" />
			              <mx:TextInput id="requestNumber" height="18"  borderStyle="none" backgroundAlpha=".8" width="56"  fontFamily="Arial" visible="false"/>
			              <mx:Button id="lookupButton"  
			              	fontFamily="Arial"  height="18" width="30"
			               	color="#400040" click="lookupExperiment()" visible="false" icon="@Embed('assets/arrow_right.png')"/>
			            </mx:HBox>
			            <mx:HBox height="100%" horizontalAlign="right" horizontalGap="2" verticalAlign="middle" defaultButton="{searchButton}">
			              <mx:Label text="Search" height="18" color="#ffffff" id="searchLabel" visible="false" fontFamily="Arial"/>
		 	              <mx:TextInput id="searchText"  height="18"  width="118" visible="false" borderStyle="none" backgroundAlpha=".8"/>
			              <mx:Button id="searchButton" height="18" click="callLater(search)" fontFamily="Arial" visible="false" icon="@Embed('assets/magnifier.png')" toolTip="Search" width="30"/>
			              <mx:LinkButton visible="false" styleName="navLinkButtonSmall"  paddingLeft="1" label="Advanced search" id="advancedSearchButton" click="{showAdvancedSearch()}" >
			              </mx:LinkButton>
			            </mx:HBox>
			           </mx:HBox> 
			         </mx:HBox>  
 			        <mx:Spacer width="10"/>
			        <mx:HBox horizontalAlign="right" verticalAlign="middle" horizontalGap="2" height="30" id="hbox2">
			        	<mx:LinkButton id="dictionaryButton" label="Dictionaries" styleName="navLinkButtonSmall" click="PopUpManager.centerPopUp(PopUpManager.createPopUp(this, DictionaryEditor, true));" visible="false" enabled="false"/>
			        	<mx:LinkButton label="Pricing" id="pricingButton" styleName="navLinkButtonSmall" click="navigateToURL(new URLRequest(getProperty(PROPERTY_PRICING_URL)), '_blank');" visible="false"/>
			        	<mx:LinkButton label="Help" styleName="navLinkButtonSmall" click="navigateToURL(new URLRequest(getProperty(PROPERTY_HELP_URL)), '_blank');" id="linkbutton1"/>
			        	<mx:LinkButton label="About" styleName="navLinkButtonSmall" click="PopUpManager.centerPopUp(PopUpManager.createPopUp(this, AboutView, true));"  fontFamily="Verdana"/>
			        </mx:HBox>
			      </mx:HBox>
			      
			      <mx:HBox width="100%" id="linkButtonBarBox" paddingBottom="0" paddingLeft="2" paddingRight="2" paddingTop="0"  backgroundImage="@Embed(source='assets/menubar.png')" backgroundSize="100%" borderStyle="none" cornerRadius="4" visible="false">
			 			<mx:LinkBar id="linkButtonBar" 
			 				 dataProvider="{initViews}" width="100%"
			 			            enabled="false" visible="false"   paddingBottom="0"
			 			            verticalAlign="middle" 
			 			            itemClick="onViewSelection()"  horizontalAlign="left" >
			 			</mx:LinkBar>
			      </mx:HBox>
	      	
		      	
		      </mx:VBox>

		  </mx:VBox>  
		      

	    
	     
 
             
        
	    <mx:VBox id="mainArea" width="100%" 
	    	height="100%" paddingTop="3" paddingBottom="0" paddingLeft="0" 
	    	paddingRight="0" horizontalCenter="0" verticalGap="6">
	    	<mx:ViewStack id="stateStack" creationPolicy="auto" paddingTop="0" paddingBottom="0" width="100%" height="100%">
				
    	     
 				<mx:ViewStack id="initViews" visible="false" width="100%" height="100%"   creationPolicy="auto" paddingTop="0" paddingBottom="0" >
		   
					<util:LaunchView id="homeView1" label="Home" icon="@Embed('assets/house.png')" >
					</util:LaunchView> 
				</mx:ViewStack>
		    	     
 				<mx:ViewStack id="theViews" visible="false" width="100%" height="100%"  show="this.checkSecurityAndLaunchStartWindow()"  creationPolicy="auto" paddingTop="0" paddingBottom="0" creationComplete="this.checkSecurityAndLaunchStartWindow()" >
		
					<util:HomeView id="homeView" label="Home" icon="@Embed('assets/house.png')" >
					</util:HomeView>  
		
				    <experiment:ExperimentEditView id="submitRequestView" label="New Experiment" 
				    	icon="@Embed('assets/flask_add.png')"  width="100%" height="100%">
		            </experiment:ExperimentEditView>

				    <experiment:ExperimentEditView id="amendRequestView" label="Add Services to existing Experiment" 
				    	icon="@Embed('assets/flask_edit.png')"  width="100%" height="100%">
		            </experiment:ExperimentEditView>
		            		
			        <experiment:NavExperimentView id = "navExperimentView" width="100%" height="100%" 
			        	icon="@Embed('assets/flask.png')">
			        </experiment:NavExperimentView>
		
			        <analysis:NavAnalysisView id="navAnalysisView" width="100%" height="100%" 
			        	icon="@Embed('assets/map.png')">
			        </analysis:NavAnalysisView>
		
			        <workflow:NavWorkflowView id="navWorkflowView" width="100%" height="100%"  icon="@Embed('assets/building_go.png')">
			        </workflow:NavWorkflowView> 
		 
		            <billing:NavBillingView id="navBillingView" label="Billing" width="100%" height="100%" icon="@Embed('assets/money.png')">
		            </billing:NavBillingView> 
		          
			        <protocol:ProtocolsView id="protocolsView" label="Materials &amp; Methods" icon="@Embed('assets/bricks.png')">
			        </protocol:ProtocolsView>
		
			        <slide:SlideManagementView label="Slides" id="slideManagementView" icon="@Embed('assets/images.png')">
			        </slide:SlideManagementView>
			        
			        <user:NavUsersView id="navUsersView" icon="@Embed('assets/group.png')"  label="Users &amp; Groups" width="100%" height="100%" backgroundAlpha="1.0">	
			        </user:NavUsersView>
			        
			        
		        </mx:ViewStack>
		        
		       <search:NavSearchView    id="navSearchView" icon="@Embed('assets/magnifier.png')" width="100%" height="100%" backgroundAlpha="1.0" creationPolicy="all">	
			   </search:NavSearchView>
		           
	    		
	    	</mx:ViewStack>
           
 
        </mx:VBox>
     

	 </mx:VBox>
	 
	 
	 <mx:states>
	 	<mx:State name="enabledState">
	 	    <mx:SetProperty target="{linkButtonBarBox}" name="visible" value="true"/>
	 	    <mx:SetProperty target="{linkButtonBar}" name="visible" value="true"/>
	 	    <mx:SetProperty target="{linkButtonBar}" name="dataProvider" value="theViews"/>
	 	    <mx:SetProperty target="{stateStack}" name="selectedIndex" value="1"/>
	 		<mx:SetProperty target="{theViews}" name="visible" value="true"/>
	 		<mx:SetProperty target="{linkButtonBar}" name="visible" value="true"/>
	 		<mx:SetProperty target="{linkButtonBar}" name="enabled" value="true"/>
	 		<mx:SetProperty target="{userName}" name="visible" value="true"/>
	 		<mx:SetProperty target="{requestNumberLabel}" name="visible" value="true"/>
	 		<mx:SetProperty target="{requestNumber}" name="visible" value="true"/>
	 		<mx:SetProperty target="{lookupButton}" name="visible" value="true"/>
	 		<mx:SetProperty target="{searchLabel}" name="visible" value="true"/>
	 		<mx:SetProperty target="{searchText}" name="visible" value="true"/>
	 		<mx:SetProperty target="{searchButton}" name="visible" value="true"/>
	 		<mx:SetProperty target="{advancedSearchButton}" name="visible" value="true"/>
	 		<mx:SetProperty target="{pricingButton}" name="visible" value="{pricingURL != null ? true : false}"/>
	 		<mx:SetProperty target="{appLabel}" name="text" value="GNomEx"/>
	 	    <mx:SetProperty target="{theViews}" name="selectedIndex" value="0"/>
	 	</mx:State>
	 	<mx:State name="AdminState" basedOn="enabledState">
	 		<mx:SetProperty target="{dictionaryButton}" name="enabled" value="true"/>
	 		<mx:SetProperty target="{dictionaryButton}" name="visible" value="true"/>
	 		<mx:SetStyle target="{hbox2}" name="horizontalGap" value="1"/>
	 		<mx:SetStyle target="{advancedSearchButton}" name="paddingLeft" value="2"/>
	 		<mx:SetStyle target="{advancedSearchButton}" name="paddingRight" value="2"/>
	 		<mx:SetProperty target="{amendRequestView}" name="label" value="Add services" /> 
	 		<mx:SetProperty target="{protocolsView}" name="label" value="Materials &amp; Meth."/>
	 		<mx:SetProperty target="{submitRequestView}" name="label" value="New Experiment"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="horizontalGap" value="0"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="paddingLeft" value="0"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="paddingRight" value="0"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="fontFamily" value="Verdana"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="fontSize" value="11"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="fontWeight" value="normal"/>
	 	</mx:State>
	 	<mx:State name="UserState" basedOn="enabledState">
	 		<mx:RemoveChild target="{navBillingView}"/>
	 		<mx:RemoveChild target="{slideManagementView}"/> 
	 		<mx:RemoveChild target="{navUsersView}"/>
	 		<mx:RemoveChild target="{navWorkflowView}"/>
	 	</mx:State>
	 	<mx:State name="ManagerState" basedOn="enabledState">
	 		<mx:RemoveChild target="{navBillingView}"/>
	 		<mx:RemoveChild target="{slideManagementView}"/>
	 		<mx:RemoveChild target="{navWorkflowView}"/>
	 		<mx:SetProperty target="{protocolsView}" name="label" value="Materials &amp; Meth."/>
	 		<mx:SetStyle target="{linkButtonBar}" name="paddingLeft" value="0"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="paddingRight" value="0"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="horizontalGap" value="0"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="fontFamily" value="Verdana"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="fontSize" value="11"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="fontWeight" value="normal"/>

	 	</mx:State>
	 	<mx:State name="UserNonSubmitterState" basedOn="UserState">
	 		<mx:RemoveChild target="{submitRequestView}"/>
	 		<mx:RemoveChild target="{amendRequestView}"/>
	 	</mx:State>
	 	<mx:State name="GuestState" basedOn="UserState">
	 		<mx:RemoveChild target="{submitRequestView}"/>
	 		<mx:RemoveChild target="{amendRequestView}"/>
	 		<mx:SetProperty target="{pricingButton}" name="visible" value="false"/>
	 	</mx:State>
	 </mx:states>
	
	
</mx:Application>
