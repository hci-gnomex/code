<?xml version="1.0" encoding="utf-8"?>   
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" 
				xmlns="*"  
				xmlns:views="views.*"
				xmlns:workflow="views.workflow.*"  
				xmlns:experiment="views.experiment.*"  
				xmlns:analysis="views.analysis.*" 
				xmlns:datatrack="views.datatrack.*" 
				xmlns:topics="views.topics.*" 
				xmlns:user="views.user.*"
				xmlns:protocol="views.protocol.*"
				xmlns:admin="views.admin.*"
				xmlns:plate="views.plate.*"
				xmlns:data="views.data.*"  
				xmlns:order="views.order.*"
				xmlns:run="views.run.*"
				xmlns:slide="views.slide.*"
				xmlns:hci="hci.flex.controls.*"
				xmlns:billing="views.billing.*"
				xmlns:util="views.util.*"
				xmlns:login="views.login.*"
				xmlns:report="views.report.*"
				xmlns:dashboard="views.dashboard.*"
				xmlns:product="views.product.*"
				paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" 
				creationComplete="init()" applicationComplete="applicationCompleteHandler(event)" backgroundColor="#FFFFFF" visible="true" >
	
	
	<mx:Fade id="fadeOut" duration="100"/>
	<mx:Fade id="fadeIn" duration="100"/>	
	<mx:Fade id="fadeInSlow" duration="2000"/>	
	
	<mx:HTTPService 
		id="logoutService"	    
		url="logout.jsp"
		resultFormat="text"
		result="loggedOut()"
		showBusyCursor="true"
		method="POST"
		useProxy="false" >  
	</mx:HTTPService> 
	
	
	<mx:HTTPService 
		id="createSecurityAdvisor"
		url="CreateSecurityAdvisor.gx"
		resultFormat="e4x"
		result="onCreateSecurityAdvisor(event)"
		fault="onFailCreateSecurityAdvisor(event)"
		destination="createSecurityAdvisor"
		showBusyCursor="false"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="getSecurityAdvisorForGuest" 
		url="CreateSecurityAdvisorForGuest.gx"
		resultFormat="e4x"
		result="onGetSecurityAdvisorForGuest(event)"
		fault="onFailHttpRequest('Failed to create security advisor for guest', event)"
		destination="getSecurityAdvisorForGuest"
		showBusyCursor="false"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService > 
	
	<mx:HTTPService 
		id="getExperimentDesignList" 
		url="GetExperimentDesignList.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		destination="getExperimentDesignList"
		result="onGetExperimentDesignList(event)"
		fault="onFailHttpRequest('Failed to get experiment design list', event)"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="getExperimentFactorList" 
		url="GetExperimentFactorList.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		result="onGetExperimentFactorList(event)"
		fault="onFailHttpRequest('Failed to get experiment factor list', event)"
		destination="getExperimentFactorList"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="getPropertyList" 
		url="GetPropertyList.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		destination="getPropertyList"
		result="onGetPropertyList(event)"
		fault="onFailHttpRequest('Failed to get property list', event)"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="getGenomeIndexList" 
		url="GetGenomeIndexList.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		destination="getGenomeIndexList"
		result="onGetGenomeIndexList(event)"
		fault="onFailHttpRequest('Failed to get genome index list', event)"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="getOrganismList" 
		url="GetOrganismList.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		destination="getOrganismList"
		result="onGetOrganismList(event)"
		fault="onFailHttpRequest('Failed to get organism list', event)"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="getIScanChipList" 
		url="GetIScanChipList.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		destination="getIScanChipList"
		result="onGetIScanChipList(event)"
		fault="onFailHttpRequest('Failed to get iScan chip list', event)"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="getProductList" 
		url="GetProductList.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		destination="getProductList"
		result="onGetProductList(event)"
		fault="onFailHttpRequest('Failed to get product list', event)"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="getAppUserList" 
		url="GetAppUserList.gx"
		showBusyCursor="false"
		resultFormat="e4x"
		result="onGetAppUserList(event)"
		fault="onFailHttpRequest('Failed to get app user list', event)"
		destination="getAppUserList"
		useProxy="false">
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="getLabList" 
		url="GetLabList.gx"
		showBusyCursor="false"
		resultFormat="e4x"
		result="onGetLabList(event)"
		fault="onFailHttpRequest('Failed to get lab list', event)"
		destination="getLabList"
		useProxy="false">
		<mx:request>
			<listKind>UnboundedLabList</listKind>
		</mx:request>
	</mx:HTTPService >
	
	
	<mx:HTTPService 
		id="getProjectList" 
		url="GetProjectList.gx"
		resultFormat="e4x"
		result="onGetProjectList(event)"
		destination="getProjectList"
		fault="onFailHttpRequest('Failed to get project list', event)"
		showBusyCursor="false"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="getSessionTimeout" 
		url="GetSessionTimeout.gx"
		resultFormat="e4x"
		result="onGetSessionTimeout(event)"
		destination="getSessionTimeout"
		fault="onFailHttpRequest('Failed to get session timeout parameter', event)"
		showBusyCursor="false"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="getLaunchProperties"	    
		url="GetLaunchProperties.gx"
		resultFormat="e4x"
		result="onGetLaunchProperties(event)"
		fault="onFailHttpRequest('Get launch properties failed', event)"
		showBusyCursor="true"
		destination="getLaunchProperties"
		useProxy="false">
	</mx:HTTPService> 
	
	<mx:HTTPService  
		id="checkDataTrackPermission" 
		url="CheckDataTrackPermission.gx"
		destination="checkDataTrackPermission"
		resultFormat="e4x"
		showBusyCursor="false"
		result="onCheckDataTrackPermission(event)"
		fault="onFailHttpRequest('Failed to get request', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="checkTopicPermission" 
		url="CheckTopicPermission.gx"
		destination="checkTopicPermission"
		resultFormat="e4x"
		showBusyCursor="false"
		result="onCheckTopicPermission(event)"
		fault="onFailHttpRequest('Failed to get request', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>
	
	<mx:HTTPService
		id="getProtocolList"
		url="GetProtocolList.gx"
		showBusyCursor="true"
		resultFormat="e4x"
		useProxy="false"
		method="POST"		
		result="onGetProtocolList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get protocol list', event)">
		<mx:request>
			<protocolClassName>{"hci.gnomex.model.AnalysisProtocol"}</protocolClassName>
		</mx:request>
	</mx:HTTPService>	
	
	
	<mx:HTTPService  
		id="getSampleSheetUploadURL" 
		url="UploadSampleSheetURLServlet.gx"
		resultFormat="e4x"
		showBusyCursor="true" 
		result="onGetSampleSheetUploadURL(event)" 
		fault="parentApplication.onFailHttpRequest('Failed to get sample sheet upload URL', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>	    	
	
	
	<mx:HTTPService 
		id="getAccountFieldsConfiguration" 
		url="GetAccountFieldsConfiguration.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		destination="getAccountFieldsConfiguration"
		result="onGetAccountFieldsConfiguration(event)"
		fault="onFailHttpRequest('Failed to get account fields configuration list', event)"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="getFAQ" 
		url="GetFAQ.gx"
		resultFormat="e4x"
		destination="getFAQ"
		showBusyCursor="true"
		result="onGetFAQInterface(event)"
		fault="parentApplication.onFailHttpRequest('Unable to get items', event)"
		useProxy="false">
	</mx:HTTPService>
	
	<mx:Style source="css/gnomex_flex.css" />
	
	
	<mx:Script>
            
		<![CDATA[
			import com.earthbrowser.ebutils.MacMouseWheelHandler;
			
			import hci.flex.dictionary.DictionaryEditor;
			import hci.flex.dictionary.DictionaryEvent;
			import hci.flex.renderers.RendererFactory;
			import hci.flex.util.DictionaryManager;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.controls.menuClasses.MenuBarItem;
			import mx.controls.treeClasses.TreeItemRenderer;
			import mx.core.IFlexDisplayObject;
			import mx.core.IUIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.graphics.ImageSnapshot;
			import mx.managers.CursorManager;
			import mx.managers.CursorManagerPriority;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import views.admin.BillingAccountFieldsConfigurationWindow;
			import views.admin.GenomeIndexEvent;
			import views.admin.PropertyEvent;
			import views.admin.PropertyWindow;
			import views.analysis.AnalysisAddView;
			import views.dashboard.ManageQuickLinks;
			import views.data.ChromatBrowseView;
			import views.datatrack.DistributeDataTrackWindow;
			import views.experiment.ProjectDetailWindow;
			import views.experimentplatform.ExperimentPlatformWindow;
			import views.login.ChangePassword;
			import views.login.ManagePasswords;
			import views.search.NavSearchView;
			import views.user.EditBillingAcctWindow;
			import views.user.UserPublicView;
			import views.util.AboutView;
			import views.util.AnalysisProtocolsEvent;
			import views.util.AppProgressView;
			import views.util.BroadcastEmailWindow;
			import views.util.CaptchaView;
			import views.util.ContactView;
			import views.util.ContextHelp;
			import views.util.ContextHelpEditEnableDisableEvent;
			import views.util.CoreFacilityEvent;
			import views.util.CoreFacilityWindow;
			import views.util.DictionaryHelper;
			import views.util.DownloadHints;
			import views.util.GNomExStringUtil;
			import views.util.IScanChipWindow;
			import views.util.IconUtility;
			import views.util.OrganismEvent;
			import views.util.OrganismsWindow;
			import views.util.ProductEvent;
			import views.util.ProductWindow;
			import views.util.PromptXMLListCollection;
			import views.util.ScreenshotWindow;
			import views.util.SessionTimeoutData;
			import views.util.UploadMultiRequestSampleSheetView;
			import views.util.VerifyEmailWindow;
			import views.workflow.FlowCellView;
			
			
			
			override protected function focusOutHandler(event:FocusEvent):void 
			{				
				if(event.type == FocusEvent.FOCUS_OUT)
				{
					if(event.currentTarget.id == 'searchText')
					{
						if (searchText.text == '') {
							searchText.text = 'Search';
							searchText.setStyle('fontStyle', 'italic');
							searchText.setStyle('color', 0x666666);
						}						
					}
					else if(event.currentTarget.id == 'requestNumber' ) {
						if (requestNumber.text == '') {
							requestNumber.text = 'Lookup by #';
							requestNumber.setStyle('fontStyle', 'italic');
							requestNumber.setStyle('color', 0x666666);

						} 
					}
				}
				super.focusOutHandler(event);
				
			}
			
			private function onSearchClick():void {
				if (searchText.text=='Search') {
					searchText.text='';
					searchText.setStyle('fontStyle', 'normal');
					searchText.setStyle('color', 0x000000);
				} 
			}
			private function onLookupClick():void {
				if (requestNumber.text=='Lookup by #') {
					requestNumber.text='';
					requestNumber.setStyle('fontStyle', 'normal');
					requestNumber.setStyle('color', 0x000000);
				} 
			}
			
			[Bindable]
			public var dictionaryManager:DictionaryManager;
			
			[Bindable]
			public var dictionaryHelper:DictionaryHelper;
			
			private var navSearchView:NavSearchView;
			
			private var userPublicView:UserPublicView;
			
			private var cursorID:Number = 0; 
			
			public var uploadSampleSheetURL:String = null;
			
			
			[Bindable]
			public var welcomeSplash:String = "";
			
			[Bindable]  
			public var siteLogo:String = "";
			
			[Bindable]
			[Embed(source="assets/gnomex_logo.png")]
			public var iconLogo:Class;
			
			[Bindable]
			[Embed(source="assets/house.png")]
			public var iconHome:Class;
			

			[Bindable]
			[Embed(source="assets/hyperlink.png")]
			public var iconLinks:Class;

			[Bindable]
			[Embed(source="assets/tick.png")]
			public var iconCheck:Class;
			
			[Bindable]
			[Embed(source="assets/tick_black.png")]
			public var iconBlackCheck:Class;
			
			[Bindable]
			[Embed(source="assets/white_information.png")]
			public var iconEmptyInformation:Class;

			[Bindable]
			[Embed(source="assets/information.png")]
			public var iconInformation:Class;
			
			[Bindable]
			[Embed(source="assets/door_out.png")]
			public var iconSignOut:Class;
			
			[Bindable]
			[Embed(source="assets/cog.png")]
			public var iconSettings:Class;
			
			
			[Bindable]
			[Embed(source="assets/flag_yellow.png")]
			public var iconYellowFlag:Class;
			
			[Bindable]
			[Embed(source="assets/group.png")]
			public var iconGroup:Class; 
			
			[Bindable]
			[Embed(source="assets/graduation_cap.png")]
			public var iconExternalAcademic:Class; 
			
			[Bindable]
			[Embed(source="assets/building.png")]
			public var iconExternalCommercial:Class; 
			
			
			[Bindable]
			[Embed(source="assets/brick.png")]
			public var iconProtocol:Class;
			
			[Bindable]
			[Embed(source="assets/folder.png")]
			public var iconProject:Class;
			
			[Bindable]
			[Embed(source="assets/folder.png")]
			public var iconFolder:Class;
			
			[Bindable]
			[Embed(source="assets/test_tube.png")]
			public var testTube:Class;
			
			[Bindable]
			[Embed(source="assets/folder_disable.png")]
			public var iconFolderDisabled:Class;
			
			[Bindable]
			[Embed(source="assets/page.png")]
			public var iconPage:Class;
			
			[Bindable]
			[Embed(source="assets/flask.png")]
			public var iconFlask:Class;  
			
			[Bindable]
			[Embed(source="assets/flask_add.png")]
			public var iconSubmitExperiment:Class;
			
			[Bindable]
			[Embed(source="assets/flask_edit.png")]
			public var iconEditExperiment:Class;
			
			
			[Bindable]
			[Embed(source="assets/experiment_register.png")]
			public var iconAddExternalExperiment:Class;
			
			
			[Bindable]
			[Embed(source="assets/dna-helix-icon.png")]
			public var iconExperiment:Class; 
			
			[Bindable]
			[Embed(source="assets/microarray_small.png")]
			public var iconMicroarray:Class; 
			
			
			[Bindable]
			[Embed(source="assets/microarray_small_disable.png")]
			public var iconMicroarrayDisabled:Class; 
			
			[Bindable]
			[Embed(source="assets/microarray_small_single_color.png")]
			public var iconMicroarraySingleColor:Class; 
			
			[Bindable]
			[Embed(source="assets/microarray_small_single_color_disable.png")]
			public var iconMicroarraySingleColorDisabled:Class; 
			
			[Bindable]
			[Embed(source="assets/microarray_chip.png")]
			public var iconMicroarrayAffy:Class; 
			
			[Bindable]
			[Embed(source="assets/microarray_chip_disable.png")]
			public var iconMicroarrayAffyDisabled:Class; 
			
			[Bindable]
			[Embed(source="assets/flask.png")]
			public var iconExperimentOther:Class; 
			
			[Bindable]
			[Embed(source="assets/basket.png")]
			public var iconBasket:Class;
			
			[Bindable]
			[Embed(source="assets/basket.png")]
			public var iconCategory:Class;
			
			[Bindable]
			[Embed(source="assets/chart_bar.png")]
			public var iconUsage:Class;
			
			[Bindable]
			[Embed(source="assets/data-accept.png")]
			public var iconQC:Class;
			
			[Bindable]
			[Embed(source="assets/chart_line_disable.png")]
			public var iconQCDisabled:Class;
			
			[Bindable]
			[Embed(source="assets/bullet_orange.png")]
			public var iconBullet:Class;
			
			[Bindable]
			[Embed(source="assets/bullet_green.png")]
			public var iconGreenBullet:Class;
			
			[Bindable]
			[Embed(source="assets/bullet_red.png")]
			public var iconRedBullet:Class;
			
			[Bindable]
			[Embed(source="assets/DNA_diag.png")]
			public var iconSolexa:Class;
			
			[Bindable]
			[Embed(source="assets/DNA_diag_disable.png")]
			public var iconSolexaDisabled:Class;
			
			
			[Bindable]
			[Embed(source="assets/DNA_diag_lightening.png")]
			public var iconHiSeq:Class;
			
			[Bindable]
			[Embed(source="assets/DNA_diag_lightening_disable.png")]
			public var iconHiSeqDisabled:Class;
			
			[Bindable]
			[Embed(source="assets/DNA_diag_miseq.png")]
			public var iconMiSeq:Class;
			
			[Bindable]
			[Embed(source="assets/DNA_diag_miseq_disable.png")]
			public var iconMiSeqDisabled:Class;
			
			[Bindable]
			[Embed(source="assets/sitemap.png")]
			public var iconTree:Class;
			
			[Bindable]
			[Embed(source="assets/error.png")]
			public var iconError:Class;
			
			[Bindable]
			[Embed(source="assets/comment.png")]
			public var iconWarning:Class;
			[Bindable]
			[Embed(source="assets/page_white_wrench.png")]
			public var iconConfig:Class;
			
			[Bindable]
			[Embed(source="assets/book.png")]
			public var iconBook:Class;
			
			[Bindable]
			[Embed(source="assets/asterisk_yellow.png")]
			public var iconLabeling:Class;
			
			[Bindable]
			[Embed(source="assets/basket_put.png")]
			public var iconHyb:Class;
			
			[Bindable]
			[Embed(source="assets/chart_line.png")]
			public var iconSamplePrep:Class;
			
			
			[Bindable] 
			[Embed(source="assets/map.png")]
			public var iconAnalysis:Class;
			
			[Bindable]
			[Embed(source="assets/server_go.png")]
			public var iconServer:Class;
			
			[Bindable]
			[Embed(source="assets/email_go.png")]
			public var iconEmail:Class;
			
			
			[Bindable]
			[Embed(source="assets/money.png")]
			public var iconBilling:Class; 
			
			[Bindable]
			[Embed(source="assets/money_disable.png")]
			public var iconBillingDisabled:Class; 
			
			
			[Bindable]
			[Embed(source="assets/folder_money.png")]
			public var iconBillingFolder:Class;
			
			
			[Bindable]
			[Embed(source="assets/pricesheet.png")]
			public var iconPriceSheet:Class;
			
			[Bindable]
			[Embed(source="assets/attach.png")]
			public var iconPriceCriteria:Class;
			
			[Bindable]
			[Embed(source="assets/image.png")]
			public var iconSlide:Class;
			
			[Bindable]
			[Embed (source="assets/account.png")]
			public var iconConfigBillingAccount:Class;
			
			[Bindable]
			[@Embed(source="assets/money.png")]
			public var iconMoney:Class;
			
			
			[Bindable]
			[@Embed(source="assets/money_dollar.png")]
			public var iconDollar:Class;
			
			[Bindable]
			[Embed(source="assets/images.png")]
			public var iconSlideSet:Class;
			
			[Bindable]
			[Embed(source="assets/image_disable.png")]
			public var iconSlideInActive:Class;
			
			[Bindable]
			[Embed(source="assets/images_disable.png")]
			public var iconSlideSetInActive:Class;
			
			[Bindable]
			[Embed(source="assets/genome_build.png")]
			public var iconGenomeBuild:Class;
			
			[Bindable]
			[Embed(source="assets/genome_build_faded.png")]
			public var iconGenomeBuildFaded:Class;
			
			
			[Bindable]
			[Embed(source="assets/folder_group.png")]
			public var iconDataTrackFolderForGroup:Class;
			
			[Bindable]
			[Embed(source="assets/organism.png")]
			public var iconOrganism:Class;
			
			[Bindable]
			[Embed(source="assets/organism_faded.png")]
			public var iconOrganismFaded:Class;
			
			[Bindable]
			[Embed(source="assets/datatrack_new.png")]
			public var iconDataTrackNew:Class;
			
			[Bindable]
			[Embed(source="assets/datatrack.png")]
			public var iconDataTrack:Class;
			
			[Bindable]
			[Embed(source="assets/datatrack_world.png")]
			public var iconDataTrackPublic:Class;
			
			[Bindable]
			[Embed(source="assets/datatrack_member.png")]
			public var iconDataTrackMember:Class;
			
			[Bindable] 
			[Embed(source="assets/datatrack_member.png")]
			public var iconDataTrackMemberCollab:Class;
			
			[Bindable]
			[Embed(source="assets/datatrack_institution.png")]
			public var iconDataTrackInstitution:Class;
			
			[Bindable]
			[Embed(source="assets/datatrack_owner.png")]
			public var iconDataTrackOwner:Class;
			
			
			
			[Bindable]
			[Embed(source="assets/chart_organisation.png")]
			public var iconInstitute:Class;
			
			[Bindable]
			[Embed(source="assets/bullet_delete.png")]
			public var iconSmallDelete:Class;
			
			[Bindable]
			[Embed(source="assets/topic_tag.png")]
			public var iconTopic:Class;
			
			[Bindable]
			[Embed(source="assets/topic_tag_public.png")]
			public var iconTopicPublic:Class;
			
			[Bindable]
			[Embed(source="assets/topic_tag_members.png")]
			public var iconTopicMember:Class;
			
			
			[Bindable]
			[Embed(source="assets/topic_tag_institution.png")]
			public var iconTopicInstitution:Class;
			
			[Bindable]
			[Embed(source="assets/topic_tag_owner.png")]
			public var iconTopicOwner:Class;			
			
			
			[Bindable]
			[Embed(source="assets/building_go.png")]
			public var iconWorkflow:Class;
			
			[Bindable]
			[Embed(source="assets/group.png")]
			public var iconUsers:Class;
			
			[Bindable]
			[Embed(source="assets/review.png")]
			public var iconOrders:Class;
			
			[Bindable]
			[Embed(source="assets/plate_add.png")]
			public var iconPlate:Class;
			
			[Bindable]
			[Embed(source="assets/run_add.png")]
			public var iconInstrumentRun:Class;
			
			[Bindable]
			[Embed(source="assets/tv_chart_review.png")]
			public var iconResults:Class;
			
			
			[Bindable]
			[Embed(source="assets/run_review.png")]
			public var iconPlatesAndRuns:Class;
			
			[Bindable]
			[Embed(source="assets/folder_add.png")]
			public var iconFolderAdd:Class;
			
			[Bindable]
			[Embed(source="assets/microarray_small.png")]
			public var iconExtraction:Class;

			[Bindable]
			[Embed(source="assets/flask.png")]
			public var iconLibPrep:Class;

			[Bindable]
			[Embed(source="assets/server_go.png")]
			public var iconPipeline:Class;

			
			[Bindable]
			[Embed(source="assets/rectangle.png")]
			public var iconFlowCell:Class;
			
			[Bindable]
			[Embed(source="assets/note.png")]
			public var iconNote:Class;
			
			[Bindable]
			[Embed(source="assets/blue_folder.png")]
			public var iconBlueFolder:Class;

			
			
			[Bindable]
			[@Embed(source="assets/ding.mp3")]
			public var soundDing:Class;
			
			
			[Bindable]
			public var expIcons:XML = new XML(
				<items>
					<item label="(None)" icon="assets/noIcon.png" />					
					<item label="" icon="assets/DNA_diag.png" />
					<item label="" icon="assets/DNA_diag_lightening.png" />
					<item label="" icon="assets/microarray_chip.png" />
					<item label="" icon="assets/microarray_small.png" />
					<item label="" icon="assets/microarray_small_single_color.png" />
					<item label="" icon="assets/chart_line.png" />
					<item label="" icon="assets/dna-helix-icon.png" />
					<item label="" icon="assets/cherrypick.png" />
					<item label="" icon="assets/fraganal.png" />
					<item label="" icon="assets/mitseq.png" />
					<item label="" icon="assets/DNA_diag_miseq.png" />
					<item label="" icon="assets/iscan.png" />
					<item label="" icon="assets/sequenom_clinical.png" />
					<item label="" icon="assets/sequenom_plate.png" />
					<item label="" icon="assets/DNA_test_tube.png" />
					<item label="" icon="assets/data-accept.png" />
					<item label="" icon="assets/nano.png" />
					<item label="" icon="assets/flask.png" />
				</items>    
			);
			
			public var wellNamesByColumn:Array = [
				"A1", "B1", "C1", "D1", "E1", "F1", "G1", "H1",
				"A2", "B2", "C2", "D2", "E2", "F2", "G2", "H2",
				"A3", "B3", "C3", "D3", "E3", "F3", "G3", "H3",
				"A4", "B4", "C4", "D4", "E4", "F4", "G4", "H4",
				"A5", "B5", "C5", "D5", "E5", "F5", "G5", "H5",
				"A6", "B6", "C6", "D6", "E6", "F6", "G6", "H6",
				"A7", "B7", "C7", "D7", "E7", "F7", "G7", "H7",
				"A8", "B8", "C8", "D8", "E8", "F8", "G8", "H8",
				"A9", "B9", "C9", "D9", "E9", "F9", "G9", "H9",
				"A10", "B10", "C10", "D10", "E10", "F10", "G10", "H10",
				"A11", "B11", "C11", "D11", "E11", "F11", "G11", "H11",
				"A12", "B12", "C12", "D12", "E12", "F12", "G12", "H12"
			];
			
			private var isGuest:Boolean = false;
			
			// We have turned off the feature for now.  It
			// would be better to have a gnomex property
			// so that a site could dictate if experiment
			// design and factors are turned on. 
			[Bindable]
			public var showProjectAnnotations:Boolean = false;
			
			[Bindable]
			public var dataTrackSupported:Boolean = false;
			
			public var isUniversityOnlyUser:Boolean = false;
			public var isExternalUser:Boolean = false;
			public var isUserActive:Boolean = false;
			
			[Bindable]
			public var bulletin:String = '';
			
			[Bindable]
			public var pricingURL:String = '';
			
			[Bindable]
			public var userName:String = '';
			
			public var idCoreFacilityDNASeq:Object;
			
			
			[Bindable]
			public var usesExperimentTypeCapSeq:Boolean = false;
			[Bindable]
			public var usesExperimentTypeIScan:Boolean = false;
			[Bindable]
			public var usesExperimentTypeMitSeq:Boolean = false;
			[Bindable]
			public var usesExperimentTypeFragAnalysis:Boolean = false;
			[Bindable]
			public var usesExperimentTypeCherryPick:Boolean = false;
			
			[Bindable]
			public var managesPlateBasedWorkflow:Boolean = false;
			
			[Bindable]
			public var isCoreGenomics:Boolean = false;
			
			[Bindable]
			public var myCoreFacilities:XMLList = null;
			
			[Bindable]
			public var coreFacilitiesICanManage:XMLList = null;
			
			[Bindable]
			public var coreFacilitiesICanSubmitTo:XMLList = null;
			
			[Bindable]
			public var isSuperAdmin:Boolean = false;
			
			[Bindable]
			public var showBioinformaticsLinks:Boolean = true;
			
			[Bindable]
			public var showCoreGenomicsLinks:Boolean = true;
			
			[Bindable]
			public var loginDateTime:String = '';
			
			[Bindable]
			public var isInternalExperimentSubmission:Boolean = true;
			
			[Bindable]
			public var isBSTLinkageSupported:Boolean = false;
			
			[Bindable]
			public var isFDTSupported:Boolean = false;
			
			[Bindable]
			public var allowPaste:Boolean = false;
			
			[Bindable]
			public var isTopicsSupported:Boolean = false;
			
			[Bindable]
			public var isPrivacyExpirationSupported:Boolean = false;
			
			[Bindable]
			public var showUsageOnStartup:Boolean = false;
			
			[Bindable]
			public var showUsage:Boolean = false;
			
			[Bindable]
			public var isExternalDataSharingSite:Boolean = false;
			
			[Bindable]
			public var isAdminState:Boolean = false;
			
			[Bindable]
			public var isBillingAdminState:Boolean = false;
			
			[Bindable]
			public var siteTitle:String = "";
			
			[Bindable]
			public var siteWelcomeMessage:String = "";
			
			[Bindable]
			public var useConfigurableBillingAccounts:Boolean = false;

			[Bindable]
			public var isPublicVisibility:Boolean = true;
			
			private var analysisAddWindow:AnalysisAddView;
			
			public var nonReqAnnotationColor:uint = hci.flex.renderers.RendererFactory.DEFAULT_MISSING_FIELD_BACKGROUND;
			public var annotationColor:uint       = 0xE9FFD9;
			public var annotationColorBorder:uint = 0xCBFCA7;
			
			public var cy3Color:uint = 0xccffaa;
			public var cy3ColorBold:uint = 0x77dd55;
			
			public var cy5Color:uint = 0xffccaa;
			public var cy5ColorBold:uint = 0xff8855;
			
			private var distributeDataTrackWindow:DistributeDataTrackWindow = null;
			
			
			private var currentView:Object = null;
			
			
			public var downloadPopupCount:int = 0;
			
			[Bindable]
			public var appUserList:XMLListCollection;
			[Bindable]
			public var promptedAppUserList:PromptXMLListCollection;
			[Bindable]
			public var labList:XMLListCollection;
			[Bindable]
			public var promptedLabList:PromptXMLListCollection;
			[Bindable]
			public var submitRequestLabList:XMLListCollection;
			[Bindable]
			public var promptedSubmitRequestLabList:PromptXMLListCollection;
			[Bindable]
			public var manageLabList:XMLListCollection;
			[Bindable]
			public var workAuthLabList:XMLListCollection;
			[Bindable]
			public var promptedWorkAuthLabList:PromptXMLListCollection;
			[Bindable]
			public var propertyList:XMLListCollection;
			[Bindable]
			public var genomeIndexList:XMLListCollection;
			[Bindable]
			public var organismList:XMLListCollection;
			[Bindable]
			public var activeOrganismList:XMLListCollection;
			[Bindable]
			public var das2OrganismList:XMLListCollection;
			[Bindable]
			public var coreFacilityList:XMLListCollection;
			[Bindable]
			public var protocolList:XMLListCollection;
			[Bindable]
			public var iScanChipList:XMLListCollection;
			[Bindable]
			public var productList:XMLListCollection;
			
			[Bindable]
			public var internalAccountFieldsConfigurationList:XMLListCollection;
			[Bindable]
			public var otherAccountFieldsConfigurationList:XMLListCollection;
			
			[Bindable]
			public var seqLibProtocolsWithAppFilters:XMLListCollection;
			
			private var properties:Object;
			
			public var requestCategoryTypeMap:Object;
			
			public  static var ALERT_DEFAULT_BUTTON_WIDTH:Number = Alert.buttonWidth;
			
			[Bindable]
			private var faqList:XMLListCollection;
			
			private var faqLoaded:Boolean = false;
			
			public  var TYPE_MICROARRAY:String    = 'MICROARRAY';
			public  var TYPE_HISEQ:String         = 'HISEQ';
			public  var TYPE_MISEQ:String         = 'MISEQ';
			public  var TYPE_QC:String            = 'QC';
			public  var TYPE_CAP_SEQ:String       = "CAPSEQ";
			public  var TYPE_FRAG_ANAL:String	  = "FRAGANAL";
			public  var TYPE_MIT_SEQ:String	      = "MITSEQ";
			public  var TYPE_CHERRY_PICK:String   = "CHERRYPICK";
			public  var TYPE_ISCAN:String   	  = "ISCAN";
			public  var TYPE_ISOLATION:String     = "ISOLATION";
			public  var TYPE_CLINICAL_SEQUENOM:String  = "CLINSEQ";
			public  var TYPE_SEQUENOM:String  	  = "SEQUENOM";
			public  var TYPE_NANOSTRING:String    = "NANOSTRING";
			public  var TYPE_GENERIC:String   	  = "GENERIC";
			public  const TYPE_DISK_USAGE:String  = "DISKUSAGE"; // For disk usage in billing items.  Not used by requests.
			public  const TYPE_PRODUCT_ORDER:String  = "PRODUCTORDER"; // For product orders in billing items.  Not used by requests.
			public 	const CODE_PRODUCT_ORDER_STATUS_NEW:String = "NEW";
			
			public var CORE_FACILITY_DNA_SEQ:String = "DNA Sequencing";
			public var CORE_FACILITY_GENOMICS:String = "Microarray and Genomic Analysis";
			
			public var PROPERTY_WORKAUTH_INSTRUCTIONS:String              = "workauth_instructions";
			public var PROPERTY_WORKAUTH1_URL:String                      = "workauth1_url";
			public var PROPERTY_WORKAUTH1_NAME:String                     = "workauth1_name";
			public var PROPERTY_WORKAUTH2_URL:String                      = "workauth2_url";
			public var PROPERTY_WORKAUTH2_NAME:String                     = "workauth2_name";
			public var PROPERTY_QC_INSTRUCTIONS:String                    = "qc_instructions";
			public var PROPERTY_CONTACT_EMAIL_BIOINFORMATICS:String       = "contact_email_bioinformatics";
			public var PROPERTY_CONTACT_NAME_SOFTWARE_BUGS:String         = "contact_name_software_bugs";
			public var PROPERTY_CONTACT_EMAIL_SOFTWARE_BUGS:String        = "contact_email_software_bugs";
			public var PROPERTY_HELP_URL:String                           = "help_url";
			public var PROPERTY_UNIVERSITY_USER_AUTHENTICATION:String     = "university_user_authentication";  
			public var PROPERTY_GENERATE_GL_INTERFACE:String              = "generate_general_ledger_interface";
			public var PROPERTY_ILLUMINA_BARCODING_NOTE:String            = "illumina_barcoding_note";
			public var PROPERTY_EXPERIMENT_SUBMISSION_DEFAULT_MODE:String = "experiment_submission_default_mode";
			public var PROPERTY_BST_LINKAGE_SUPPORTED:String              = "bst_linkage_supported";
			public var PROPERTY_FDT_SUPPORTED:String                      = "fdt_supported";
			public var PROPERTY_ALLOW_PASTE:String                     	  = "allow_paste";
			public var PROPERTY_BULLETIN:String                           = "bulletin";
			public var PROPERTY_USAGE_USER_VISIBILITY:String              = "usage_user_visibility";
			public var PROPERTY_EXTERNAL_DATA_SHARING_SITE:String         = "external_data_sharing_site";
			public var PROPERTY_SITE_TITLE:String                         = "site_title";
			public var PROPERTY_SITE_WELCOME_MESSAGE:String               = "site_welcome_message";
			public var PROPERTY_SHOW_USAGE_ON_STARTUP:String              = "show_usage_on_startup";
			public var PROPERTY_DATASET_PRIVACY_EXPIRATION:String         = "dataset_privacy_expiration";
			public var PROPERTY_FDT_HELP_URL:String                       = "fdt_help_url";
			public var PROPERTY_DATATRACK_SUPPORTED:String                = "datatrack_supported";
			public var PROPERTY_DAS2_URL:String                           = "das2_url";
			public var PROPERTY_TOPICS_SUPPORTED:String                   = "topics_supported";
			public var PROPERTY_DEFAULT_VISIBILITY_DATATRACK :String      = "default_visibility_datatrack";
			public var PROPERTY_DEFAULT_VISIBILITY_ANALYSIS :String       =	"default_visibility_analysis";
			public var PROPERTY_DEFAULT_VISIBILITY_TOPIC :String          = "default_visibility_topic";
			public var PROPERTY_EXPERIMENT_DEFAULT_VIEW :String           = "experiment_default_view";
			public var PROPERTY_CONFIGURABLE_BILLING_ACCOUNTS:String      = "configurable_billing_accounts";
			public var PROPERTY_ID_DEFAULT_INSTITUTION	:String			  = "id_default_institution";
			public var PROPERTY_FISCAL_YEAR_BREAK_MONTH :String           = "fiscal_year_break_month";
			public var PROPERTY_FISCAL_YEAR_BREAK_DAY :String             = "fiscal_year_break_day";
			public var PROPERTY_ACCOUNT_NUMBER_ACCOUNT_DEFAULT :String    = "account_number_account_default";
			public var PROPERTY_GUEST_DOWNLOAD_TERMS :String              = "guest_download_terms";
			public var PROPERTY_GNOMEX_LINKAGE_BST_URL:String             = "gnomex_linkage_bst_url";
			public var PROPERTY_SUBMIT_REQUEST_INSTRUCTIONS:String		  = "submit_request_instructions";
			public var PROPERTY_BASE_INSERT_SIZE:String				  	  = "base_insert_size";
			public var PROPERTY_HISEQ_RUN_TYPE_LABEL_STANDARD:String      = "hiseq_run_type_label_standard";
			public var PROPERTY_HISEQ_RUN_TYPE_LABEL_CUSTOM:String        = "hiseq_run_type_label_custom";
			public var PROPERTY_HISEQ_RUN_TYPE_CUSTOM_WARNING:String      = "hiseq_run_type_custom_warning";
			public var PROPERTY_REQUEST_BIO_ANALYSIS_NOTE:String 		  = "request_bio_analysis_note";
			public var PROPERTY_REQUEST_WORK_AUTH_LINK_TEXT:String        = "request_work_auth_link_text";
			public var PROPERTY_EXPERIMENT_FILE_SAMPLE_LINKING_ENABLED:String = "experiment_file_sample_linking_enabled";
			public var PROPERTY_REQUEST_BIO_ALIGNMENT_NOTE:String		  = "request_bio_alignment_note";
			public var PROPERTY_ANALYSIS_ASSISTANCE_GROUP:String		  = "analysis_assistance_group";
			public var PROPERTY_ANALYSIS_ASSISTANCE_HEADER:String		  = "analysis_assistance_header";
			public var PROPERTY_CUSTOM_BILLING_MESSAGE:String		  	  = "custom_billing_message";
			public var PROPERTY_EXPERIMENT_PLATFORM_HIDE_VENDOR:String	  = "experiment_platform_hide_vendor";
			public var PROPERTY_EXPERIMENT_PLATFORM_HIDE_NOTES:String	  = "experiment_platform_hide_notes";
			public var PROPERTY_EXPERIMENT_PLATFORM_HIDE_ORGANISM:String  = "experiment_platform_hide_organism";
			public var PROPERTY_SHOW_NEWS_DASHBOARD:String                = "show_news_dashboard";
			public var PROPERTY_SHOW_METRIX_DASHBOARD:String              = "show_metrix_dashboard";
			public var PROPERTY_SHOW_ACTIVITY_DASHBOARD:String            = "show_activity_dashboard";
			public var PROPERTY_SHOW_CORE_INFO_BOX:String                 = "show_core_info_box";
			public var PROPERTY_INTERNAL_PRICE_LABEL:String               = "internal_price_label";
			public var PROPERTY_EXTERNAL_ACADEMIC_PRICE_LABEL:String      = "external_academic_price_label";
			public var PROPERTY_EXTERNAL_COMMERCIAL_PRICE_LABEL:String    = "external_commercial_price_label";
			public var PROPERTY_ALLOW_ADD_SEQUENCING_SERVICES:String      = "allow_add_sequencing_services";
			public var PROPERTY_HIDE_SAMPLETYPE_ON_EXTERNAL_EXPERIMENT:String  = "hide_sampletype_on_external_experiment";
			public var PROPERTY_NO_PUBLIC_VISIBILITY:String               = "no_public_visibility";
			public var PROPERTY_ALLOW_CORE_GLOBAL_SUBMISSION:String       = "allow_core_global_submission";
			public var PROPERTY_ANNOTATION_OPTION_EQUIVALENTS:String      = "annotation_option_equivalents";
			public var PROPERTY_HIDE_INSTITUTIONS:String     			  = "hide_institutions";
			public var PROPERTY_HIDE_EXCLUDE_USAGE_FLAG:String     		  = "hide_exclude_usage_flag";
			public var PROPERTY_SHOW_FUNDING_AGENCY:String				  = "show_funding_agency";
			public var PROPERTY_SHOW_ADMIN_NOTES_ON_REQUEST:String		  = "show_admin_notes_on_request";
			public var PROPERTY_IS_PLATE_BASED_CORE:String		  		  = "is_plate_based_core";
			public var PROPERTY_SAMPLE_BATCH_WARNING:String		  		  = "sample_batch_warning";
			public var PROPERTY_NANO_CODE_SET_COST_WARNING:String		  = "nano_code_set_cost_warning";
			public var PROPERTY_QC_ASSAY_HIDE_BUFFER_STRENGTH:String      = "qc_assay_hide_buffer_strength";
			public var PROPERTY_QC_ASSAY_HIDE_WELLS_PER_CHIP:String       = "qc_assay_hide_wells_per_chip";
			public var PROPERTY_HIDE_260_230_QC_WORKFLOW:String           = "qc_hide_260_230_qc_workflow";
			public var PROPERTY_SHOW_SAMPLE_CONC_PM:String           	  = "show_sample_conc_pm";
			public var PROPERTY_RESTRICT_ANNOTATION_ON_AUTO_ADD:String    = "restrict_annotation_on_auto_add";
			public var PROPERTY_DESCRIPTION_NAME_MANDATORY_FOR_INTERNAL_EXPERIMENTS:String = "description_name_mandatory_for_internal_experiments";
			public var PROPERTY_SORT_APPLICATION_ALPHABETICALLY_IN_EDIT:String = "sort_application_alphabetically_in_edit";
			public var PROPERTY_HIDE_REQUESTS_WITH_NO_BILLING_ITEMS:String	   = "hide_requests_with_no_billing_items";
			public var PROPERTY_SAMPLE_CONCENTRATION_PRECISION:String	  = "sample_concentration_precision";
			public var PROPERTY_SHOW_ONLY_LABS_PRODUCTS:String			  = "show_only_labs_products";
			public var PROPERTY_STATUS_TO_USE_PRODUCTS:String			  = "status_to_use_products";
			public var PROPERTY_ACCESS_AUTH_ACCOUNT_LINK_TEXT:String	  = "access_auth_account_link_text";
			public var PROPERTY_AUTH_ACCOUNTS_DESCRIPTION:String 		  = "auth_accounts_description";

			
			public var CAN_ADMINISTER_ALL_CORE_FACILITIES:String          = "canAdministerAllCoreFacilities";
			
			public var USAGE_VISIBILITY_MASKED:String                     = "masked";
			public var USAGE_VISIBILITY_FULL:String                       = "full";
			
			
			public var MAX_DOWNLOAD_SIZE_DISPLAY:String = '300 MB';
			public var MAX_DOWNLOAD_SIZE:Number = new Number(314572800); //300 MB
			
			private var appProgressBar:AppProgressView;
			private var currentProgressInterval:uint = 0;
			
			[Bindable]
			public var isUnivUserAuth:Boolean = false;
			
			[Bindable]
			public var version:String = "";
			
			[Bindable]
			public var idAppUser:Object = null;
			
			[Bindable]
			public var baseURL:String = "";
			public var GNOMEX_USER_JSP:String = "/gnomexFlex.jsp";
			public var GNOMEX_GUEST_JSP:String = "/gnomexGuestFlex.jsp";
			
			
			
			
			public function takeScreenshotForReportIssue(source:IBitmapDrawable):void {
				var imageSnap:ImageSnapshot = ImageSnapshot.captureImage(source);
				var imageByteArray:ByteArray = new ByteArray();		
					imageByteArray = imageSnap.data as ByteArray;					
				var screenshotWindow:ScreenshotWindow = ScreenshotWindow(PopUpManager.createPopUp(DisplayObject(this.theBody), ScreenshotWindow, false));			
				screenshotWindow.imageByteArray = imageByteArray;
				PopUpManager.centerPopUp(screenshotWindow);
				screenshotWindow.swfLoader.load(imageByteArray);
				
			}
			
			// email address entered when guest downloads files.
			public var guestEmailAddress:String = "";	
			
			private function init():void {
				var idCoreFacility:String = Application.application.parameters.idCore;
				var parms:Object = new Object();
				parms.idCoreFacility = idCoreFacility;
				getLaunchProperties.send(parms);
			} 
			
			public function resetAlertButtons():void {
				Alert.yesLabel = "Yes";
				Alert.noLabel = "No";
				Alert.cancelLabel = "Cancel";
				Alert.okLabel = "Ok";
				Alert.buttonWidth = ALERT_DEFAULT_BUTTON_WIDTH;
			}
			
			private function onGetLaunchProperties(event:ResultEvent):void {
				if (getLaunchProperties.lastResult.name() == 'LaunchProperties') {
					var prop:String = getLaunchProperties.lastResult.Property.(@name == PROPERTY_UNIVERSITY_USER_AUTHENTICATION).@value;
					if (prop == 'Y') {
						this.isUnivUserAuth = true;
					} else {
						this.isUnivUserAuth = false;
					}	
					baseURL = getLaunchProperties.lastResult.Property.(@name == "base_url").@value;
					stateStack.selectedChild = initViews;
					if (getLaunchProperties.lastResult.Property.(@name == "site_logo").@value != "") {
						siteLogo = getLaunchProperties.lastResult.Property.(@name == "site_logo").@value;
					} else {
						siteLogo = "assets/gnomex_logo.png";
					}
					if (getLaunchProperties.lastResult.Property.(@name == "site_splash").@value != "") {
						welcomeSplash = getLaunchProperties.lastResult.Property.(@name == "site_splash").@value;
					} else {
						welcomeSplash = "assets/gnomex_splash_logo.png";
					}
					topMenuBar.visible = true;
					loggedInInit();	
					
					coreFacilityList = new XMLListCollection();
					for each (var core:Object in getLaunchProperties.lastResult..CoreFacility) {
						coreFacilityList.addItem(core);
					}
				}
					
				else {
					Alert.show("An error occurred getting launch properties");
				}
			}
			
			protected function applicationCompleteHandler(event:FlexEvent):void
			{
				//set focus to this app using javascript
				if(ExternalInterface.available) {
					ExternalInterface.call("eval", "document.getElementById('" + ExternalInterface.objectID + "').tabIndex=0");
					ExternalInterface.call("eval", "document.getElementById('" + ExternalInterface.objectID + "').focus()");
				}
			}
			
			protected function logout():void {
				Alert.show("Are you sure you want to sign out?", 
					"Confirm", 
					(Alert.YES | Alert.NO), this, 
					onPromptToLogout);
			}
			
			private function onPromptToLogout(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					logoutService.send();
				}
			}			
			
			// returns core facility specified at logon.  Null if none
			public function getSpecifiedIdCoreFacility():String {
				var id:String = null;
				if (createSecurityAdvisor.lastResult != null && createSecurityAdvisor.lastResult.@specifiedIdCoreFacility != null) {
					id = createSecurityAdvisor.lastResult.@specifiedIdCoreFacility.toString();
				} else if (getSecurityAdvisorForGuest.lastResult != null && getSecurityAdvisorForGuest.lastResult.@specifiedIdCoreFacility != null) {
					id = getSecurityAdvisorForGuest.lastResult.@specifiedIdCoreFacility.toString();
				} 
				return id;
			}
			
			public function appendSpecifiedIdCoreFacilityToUrl(url:String):String {
				var id:String = getSpecifiedIdCoreFacility();
				if (id != null && id != '') {
					if (url.indexOf("?") >= 0) {
						url += "&";
					} else {
						url += "?";
					}
					url += "idCore=" + id;
				}
				return url;
			}
			
			public function loggedOut():void {
				var urlString:String = appendSpecifiedIdCoreFacilityToUrl("gnomexFlex.jsp");
				var urlRequest:URLRequest = new URLRequest(urlString);
				navigateToURL(urlRequest,"_self");
				
			}			
			
			public function showChangePasswordBeforeLogin():void {
				var managePasswordWindow:ManagePasswords = ManagePasswords(PopUpManager.createPopUp(this.mainArea, ManagePasswords, true));
				PopUpManager.centerPopUp(managePasswordWindow);
				managePasswordWindow.init(null);
				
			}   
			
			
			public function showChangePasswordAfterLogin():void {
				var managePasswordWindow:ManagePasswords = ManagePasswords(PopUpManager.createPopUp(this.mainArea, ManagePasswords, true));
				PopUpManager.centerPopUp(managePasswordWindow);
				managePasswordWindow.init(this.isExternalUser ? 'Y' : 'N');
				
			}  
			private function lookupExperiment():void {
				var number:String = requestNumber.text;
				number = number.toUpperCase();
				if (number.indexOf("DT") == 0) {
					this.showDataTrackForNumber(number);				
				} else if (number.indexOf("A") == 0) {
					this.showAnalysisForNumber(number);				
				} else if (number.indexOf("T") == 0) {
					number = number.substr(1);
					this.showTopicForNumber(number);				
				} else if (number.indexOf("FC") == 0) {
					this.showFlowCellForNumber(number);				
				} else {
					showExperiment(number, false);
				} 
			}
			
			public function showProjectFolder(idProject:String, idLab:String):void {
				navExperimentView.selectedRequestNumber = null;
				navExperimentView.selectedIdRequest = null;
				navExperimentView.selectedIdLab = idLab;
				navExperimentView.selectedIdProject = idProject;
				navExperimentView.showPromptToUpload = false;
				if (navExperimentView.isInitialized) {
					navExperimentView.refreshExperimentsForProjectFolderLookup();
				}
				
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navExperimentView;
				
				// Reset the experiment search components.
				callLater(navExperimentView.resetSearchComponents);
			}
			
			public function showFlowCellForNumber(flowcellNumber:String):void {
				//navWorkflowView.
				var codeStepNext:String = "FLOWCELL";
				var codeSequencingPlatform:String = "HISEQ";
				navWorkflowView.codeStepNext = codeStepNext;
				navWorkflowView.codeSequencingPlatform = codeSequencingPlatform;
				if (theViews.selectedChild == navWorkflowView) {
					// If we are already on nav workflow view, we need to make the \
					// call to showView directly.
					navWorkflowView.selectedFlowCellNumber = flowcellNumber;
					navWorkflowView.showView();
				} else {
					// In this case, the init function will call show view.
					this.stateStack.selectedChild = theViews;
					theViews.visible = true;
					navWorkflowView.selectedFlowCellNumber = flowcellNumber;
					theViews.selectedChild = navWorkflowView;
					
				}

			}
			

			
			public function showExperiment(requestNumber:String, showPromptToUpload:Boolean):void {
				navExperimentView.selectedRequestNumber = requestNumber;
				navExperimentView.selectedIdRequest = null;
				navExperimentView.selectedIdLab = null;
				navExperimentView.selectedIdProject = null;
				navExperimentView.showPromptToUpload = showPromptToUpload;
				
				// We have to make sure that the first time a lookup
				// occurs after lauch, we refresh the experiment
				// through show event (init()).  The next time
				// through, we will make the call directly.
				if (navExperimentView.isInitialized) {
					navExperimentView.refreshExperimentsForLookup();					
				}
				
				
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navExperimentView;
				
				
				
				// Reset the experiment search components.
				callLater(navExperimentView.resetSearchComponents);
				
			}
			
			public function showExperimentById(idRequest:String):void {
				navExperimentView.selectedRequestNumber = null;
				navExperimentView.selectedIdRequest = idRequest;
				navExperimentView.selectedIdLab = null;
				navExperimentView.selectedIdProject = null;
				
				navExperimentView.checkSecurity();
				
				var parms:Object = new Object();
				parms.idRequest = idRequest;
				navExperimentView.getRequestFromNav.send(parms);
				
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navExperimentView;
				
			}
			
			public function showExperimentDownload(requestNumber:String):void {
				navExperimentView.selectedRequestNumber = requestNumber;
				navExperimentView.selectedIdRequest = null;
				navExperimentView.selectedIdLab = null;
				navExperimentView.selectedIdProject = null;
				
				
				// We have to make sure that the first time a lookup
				// occurs after lauch, we refresh the experiment
				// through show event (init()).  The next time
				// through, we will make the call directly.
				if (navExperimentView.isInitialized) {
					navExperimentView.refreshExperimentForLookupDownload();					
				}
				
				
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navExperimentView;
				
			}
			
			public function showAnalysisForExperiment(request:Object):void {
				navAnalysisView.selectedIdAnalysis = null;
				navAnalysisView.selectedIdAnalysisGroup = null; 
				navAnalysisView.selectedIdLab = request.@idLab;
				
				var parms:Object = new Object();
				parms.idRequest = request.@idRequest;
				navAnalysisView.getAnalysisGroupList.send(parms);
				
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navAnalysisView;
				
			}
			
			public function showAnalysis(idAnalysis:Object, analysisNumber:String, idLab:String):void {
				navAnalysisView.selectedIdAnalysis = null;
				navAnalysisView.selectedIdAnalysisGroup = null;
				navAnalysisView.selectedIdLab = idLab;
				navAnalysisView.selectedAnalysisNumber = analysisNumber;
				
				navAnalysisView.checkSecurity();
				
				var parms:Object = new Object();
				parms.idLab = idLab;
				parms.idAnalysis = idAnalysis;
				navAnalysisView.getAnalysisGroupList.send(parms);
				
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				navAnalysisView.checkSecurity();
				theViews.selectedChild = navAnalysisView;
				
			}
			
			public function showAnalysisForNumber(analysisNumber:String):void {
				navAnalysisView.selectedAnalysisNumber = analysisNumber;
				navAnalysisView.selectedIdAnalysis = null;
				navAnalysisView.selectedIdLab = null;
				navAnalysisView.selectedIdAnalysisGroup = null;
				
				
				
				// We have to make sure that the first time a lookup
				// occurs after lauch, we refresh the analysis
				// through show event (init()).  The next time
				// through, we will make the call directly.
				if (navAnalysisView.isInitialized) {
					navAnalysisView.refreshAnalysisForLookup();
				}
				
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navAnalysisView;
				
			}
			
			public function showDataTrackViewForItem(itemToSelect:Object, refreshItem:Object):void {
				if (dataTrackSupported) {
					navDataTrackView.treeItemToSelect = itemToSelect;
					navDataTrackView.refreshItem = refreshItem;
					
					// We have to make sure that the first time a lookup
					// occurs after launch, we refresh the datatrack
					// through show event (init()).  The next time
					// through, we will make the call directly.
					if (navDataTrackView.isInitialized) {
						navDataTrackView.refreshDataTrackForItem()
					}
					
					
					this.stateStack.selectedChild = theViews;
					theViews.visible = true;
					theViews.selectedChild = navDataTrackView;				
					
				}
			}
			
			
			public function showDataTrackForNumber(dataTrackNumber:String):void {
				if (dataTrackSupported) {
					navDataTrackView.dataTrackNumber = dataTrackNumber;
					
					
					// We have to make sure that the first time a lookup
					// occurs after launch, we refresh the datatrack
					// through show event (init()).  The next time
					// through, we will make the call directly.
					if (navDataTrackView.isInitialized) {
						navDataTrackView.refreshDataTrackForLookup()
					}
					
					this.stateStack.selectedChild = theViews;
					theViews.visible = true;
					theViews.selectedChild = navDataTrackView;
					
					// Check permission and show message if user doesn't have permission to view this data track
					var parms:Object = new Object();
					parms.dataTrackNumber = dataTrackNumber;
					checkDataTrackPermission.send(parms);					
					
				}
				
			}
			
			private function onCheckDataTrackPermission(event:ResultEvent):void {
				if (checkDataTrackPermission.lastResult.name() != "SUCCESS") {
					Alert.show(checkDataTrackPermission.lastResult..ACTMESSAGE.@TEXT);
				}
			}
			
			public function showInstrumentRun(idRun:String):void {
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navPlateView;
				
				callLater( function():void {
					
					navPlateView.switchToViewState();
					navPlateView.loadRunById(idRun);
					navPlateView.tabNav.selectedChild = navPlateView.runTab;
				});
				
			}
			
			public function showPlate(plate:Object):void {
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navPlateView;
				
				var idPlate:String = plate.@idPlate;
				var idRun:String = plate.@idInstrumentRun;
				
				if ( idRun != "" && idRun != "0" ) {
					this.showInstrumentRun(idRun);
				} else {
					callLater( function():void {
						
						navPlateView.loadPlateById(idPlate);
						navPlateView.toggleBuildState( "PLATE" );
						navPlateView.switchToViewState();
						navPlateView.tabNav.selectedChild = navPlateView.plateTab;
						
					});
				}
			}
			
			public function showPlateEditor( buildState:String ):void {
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navPlateView;
				
				callLater( function():void {
					
					navPlateView.buildState = buildState ;
					navPlateView.switchToNewState();
				});
				
			}
			
			public function showTopicForNumber(topicNumber:String):void {
				navTopicsView.topicNumber = topicNumber;
				navTopicsView.treatAsTopicClick = true;
				
				// We have to make sure that the first time a lookup
				// occurs after launch, we refresh the topic
				// through show event (init()).  The next time
				// through, we will make the call directly.
				if (navTopicsView.isInitialized) {
					navTopicsView.refreshTopics()
				}
				
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navTopicsView;
				
				// Check permission and show message if user doesn't have permission to view this topic
				var parms:Object = new Object();
				parms.topicNumber = topicNumber;
				checkTopicPermission.send(parms);									
			}
			
			public function showProductOrder(productOrder:Object):void {
						
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navProductOrderView;
				
				callLater( function():void {
					navProductOrderView.lookupProductOrder(productOrder);
				});
								
			}
			
			private function onCheckTopicPermission(event:ResultEvent):void {
				if (checkTopicPermission.lastResult.name() != "SUCCESS") {
					Alert.show(checkTopicPermission.lastResult..ACTMESSAGE.@TEXT);
				}
			}
			
			public function onGetProtocolList(event:ResultEvent):void {
				protocolList = new XMLListCollection(getProtocolList.lastResult.Protocols.Protocol);
				var emptyNode:XML = new XML("<Protocol " +
					" id=''" +
					" label=''"  +
					"/>");
				protocolList.addItemAt(emptyNode, 0);
				this.dispatchEvent(new AnalysisProtocolsEvent(AnalysisProtocolsEvent.DATA_REFRESHED));
			}
			
			public function showUserWindow(idAppUser:String):void {	
				var userNode:XML = <AppUser  id=''/>;
				userNode.@id = idAppUser;
				navUsersView.itemToSelect = userNode;				
				
				// We have to make sure that the first time a lookup
				// occurs after lauch, we refresh the lab list
				// through show event (init()).  The next time
				// through, we will make the call directly.
				if (navUsersView.isInitialized) {
					navUsersView.initializeData();
				}				
				
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navUsersView;
			}
			
			public function showNewExperiment(ccNumberList:Array):void {
				// When beginning a new order always load a new request.
				this.submitRequestView.request = null;
				this.isInternalExperimentSubmission = true;
				theViews.selectedChild = homeView;
				submitRequestView.setDefaultRequestCategory('CLINSEQ', ccNumberList);
				callLater(submitClinicalResearchRequest);	
			}
			
			private function submitClinicalResearchRequest():void {
				this.isInternalExperimentSubmission = true;
				this.theViews.selectedChild = this.submitRequestView;
				// If new experiment then initialize ShowCCNumber checkbox
				this.submitRequestView.showCCNumberColumn = true;
			}			
			
			public function showBillingAccountDetail(idLab:String):void {
				var theLab:Object = this.getLabList.lastResult.Lab.(@idLab == idLab);
				if (theLab is XMLList) {
					theLab = theLab[0];
				}
				var labNode:XML = <Lab id=''/>;
				labNode.@id = theLab.@idLab;
				navUsersView.itemToSelect = labNode;
				
				
				// We have to make sure that the first time a lookup
				// occurs after lauch, we refresh the lab list
				// through show event (init()).  The next time
				// through, we will make the call directly.
				if (navUsersView.isInitialized) {
					navUsersView.initializeData();
				}
				
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navUsersView;
				
			}
			
			public function showWorkAuthWindowForLaunch():void {
				showWorkAuthWindow(getLaunchIdLab(), getLaunchIdCore());
			}
			
			public function showWorkAuthWindow(idLab:String = null, idCoreFacility:String = null):void {
				var wa:EditBillingAcctWindow = EditBillingAcctWindow(PopUpManager.createPopUp(this, EditBillingAcctWindow, true));
				wa.isEdit = false;
				var labLine:String = "";
				if (this.workAuthLabList.length == 1) {
					labLine = " idLab='" + this.workAuthLabList[0].@idLab.toString() + "'";
				}
				if (labLine.length == 0 && idLab != null && idLab != '') {
					labLine = " idLab='" + idLab.toString() + "'";
				}
				wa.ba = new XML("<BillingAccount " +
					" idBillingAccount='BillingAccount0'" +
					labLine +
					" accountName=''" +
					" idCoreFacility='" + (idCoreFacility == null ? '' : idCoreFacility.toString()) + "'" +
					" expirationDateOther=''" + 
					" startDateOther=''" +
					" accountNumberBus=''" + 
					" accountNumberOrg=''" + 
					" accountNumberFund=''" + 
					" accountNumberActivity=''" + 
					" accountNumberProject=''" +  
					" accountNumberAccount=''" + 
					" accountNumberAu=''" + 
					" accountNumberYear=''" +
					" totalDollarAmountDisplay=''" +
					" shortAcct=''" +
					" custom1=''" +
					" custom2=''" +
					" custom3=''" +
					" isDirty='Y'" +
					" isPO='N'" +
					" submitterEmail='" + getUserEmail() + "'" +
					" isApproved='N'" +
					" isSelectedPeerReviewedFunding='false'" + 
					"/>");
				PopUpManager.centerPopUp(wa);
			}			       
			
			
			public function showProtocol(idProtocol:Object, className:String):void {
				protocolsView.lastSavedProtocolId = idProtocol;
				protocolsView.lastSelectedProtocolClass = className; 
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				if (theViews.selectedChild == protocolsView) {
					// initializeData called automatically if not alreadh showing -- otherwise we have to call it.
					protocolsView.initializeData();
				} else {
					theViews.selectedChild = protocolsView;
				}
				
			}
			
			private function search():void {
				showSearch();
				navSearchView.simpleSearchText = this.searchText.text;
			}
			
			public function showSearch():void {
				navSearchView = NavSearchView(PopUpManager.createPopUp(this, NavSearchView, false));
				navSearchView.centerWindow();
				navSearchView.init();
			}
			
			
			public function showUserPublicView():void {
				if (isGuest || isUniversityOnlyUser) {
					Alert.show("You currently only have guest privileges.  You can request an official GNomEx account from the login page.");
					return;
				}
				userPublicView = UserPublicView(PopUpManager.createPopUp(this,  UserPublicView, false));
				if (isExternalUser) {
					userPublicView.currentState = "externalUserState";
				} else {
					userPublicView.currentState = "universityUserState";
				}
				
				
				PopUpManager.centerPopUp(userPublicView);
				userPublicView.init();
			}
			
			
			public function showDictionaries():void {
				PopUpManager.centerPopUp(PopUpManager.createPopUp(this, DictionaryEditor, true));
			}
			
			
			
			private function onViewSelection():void {
				this.setDefaultSubmissionState();
				
				if (currentView != null) {
					currentView.checkDirty();
					
					// if we are leaving slide view, refresh dictionaries
					if (isAdminState) {
						if (currentView == this.slideManagementView) {
							slideManagementView.refreshDictionaries();
						}
					}
					
					// if we are leaving protocol view, refresh dictionaries
					if (currentView == this.protocolsView) {
						protocolsView.refreshDictionaries();
						this.getProtocolList.send();
					}
					
				}
				
				
				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				
				currentView = theViews.selectedChild;
			}
			
			
			public function isGuestMode():Boolean {
				// Check the URL, if isGuest=Y on request parameter, then
				// this is a guest login
				if (Application.application.parameters.isGuest != null) {
					return Application.application.parameters.isGuest == 'Y' || isGuest;
				} else {
					// If the request parameter isGuest not present, check the
					// SecurityAdvisor isGuest attribute.
					return isGuest;
				}
			}
			
			public function reloadFAQ():void{
				getFAQ.send();
			}
			
			public function submitInternalExperiment():Boolean {
				return isInternalExperimentSubmission;
			}
			
			public function setDefaultSubmissionState():void {
				if(isInternalExperimentSubmission == false){
					return;
				}
				if (this.getProperty(this.PROPERTY_EXPERIMENT_SUBMISSION_DEFAULT_MODE) != null &&
					this.getProperty(this.PROPERTY_EXPERIMENT_SUBMISSION_DEFAULT_MODE) == 'INTERNAL') {
					// Default is "submit request" (internal), but if this is an external data sharing
					// hub, make default "register external" experiment.
					isInternalExperimentSubmission =  !isExternalDataSharingSite;
				} else if (this.getProperty(this.PROPERTY_EXPERIMENT_SUBMISSION_DEFAULT_MODE)!= null &&
					this.getProperty(this.PROPERTY_EXPERIMENT_SUBMISSION_DEFAULT_MODE) == 'EXTERNAL') {					
					isInternalExperimentSubmission =  false;
				} else {
					isInternalExperimentSubmission = true;
				}
			}
			
			private function addQuickLinks():void{
				for each(var mi:XML in topMenu){
					if(mi.@label == "Links..."){
						mi.setChildren(new XMLList);
						for each(var item:XML in faqList){
							var menuItem:XML = <menuItem label={item.@title} url={item.@url} />;
							mi.appendChild(menuItem);
						}
						if(isAdminState){
							var manageLink:XML = <menuItem label='Manage...' />;
							mi.appendChild(manageLink);
						}
						break;
					}
					if(mi.children().length() == 0){
						hideMenusByContext(topMenu, 'quickLinks')
					}
				}
			}
				
			private function onGetFAQInterface(event:ResultEvent):void {
				if(event.result.name() == "FaqCollection"){
					faqList = new XMLListCollection(getFAQ.lastResult.FAQ);
					addQuickLinks();
				} else{
					Alert.show(event.result..ERROR.@message.toString(), "Error setting up Links.");
				}
			}
			
			public function launchExperimentDownloads():Boolean {
				if (Application.application.parameters.launchWindow != null &&
					Application.application.parameters.launchWindow == "ExperimentDownload" &&
					Application.application.parameters.requestNumber != null ) {
					return true;
				} else {
					return false;
				}
			}
			public function launchExperimentDetail():Boolean {
				if (Application.application.parameters.requestNumber != null && Application.application.parameters.requestNumber != 'null') {
					return true;
				} else { 
					return false;
				}
			}
			public function launchAnalysisDetail():Boolean { 
				if (Application.application.parameters.analysisNumber != null && Application.application.parameters.analysisNumber != 'null') {
					return true;
				} else {
					return false;
				}
			}
			public function launchDataTrackDetail():Boolean { 
				if (Application.application.parameters.dataTrackNumber != null && Application.application.parameters.dataTrackNumber != 'null') {
					return true;
				} else {
					return false;
				}
			}
			public function launchTopicDetail():Boolean { 
				if (Application.application.parameters.topicNumber != null && Application.application.parameters.topicNumber != 'null') {
					return true;
				} else {
					return false;
				}
			}
			public function launchBillingAccountDetail():Boolean {
				if (Application.application.parameters.launchWindow != null &&
					Application.application.parameters.launchWindow == "BillingAccountDetail" &&
					Application.application.parameters.idLab != null ) {
					return true;
				} else { 
					return false;
				}
			}
			
			public function launchAppUser():Boolean {
				var lw:String = Application.application.parameters.launchWindow;
				var cc:String = Application.application.parameters.idLab;
				if (Application.application.parameters.launchWindow != null &&
					Application.application.parameters.launchWindow == "UserDetail" &&
					Application.application.parameters.idLab != null ) {
					return true;
				} else { 
					return false;
				}
			}
			
			public function launchWorkAuthForm():Boolean {
				if (Application.application.parameters.launchWindow != null &&
					Application.application.parameters.launchWindow == "WorkAuthForm") {
					return true;
				} else {
					return false;
				}
			}
			
			public function launchCreateExperiment():Boolean {
				var lw:String = Application.application.parameters.launchWindow;
				var cc:String = Application.application.parameters.ccNumberList;
				if (Application.application.parameters.launchWindow != null &&
					Application.application.parameters.launchWindow == "AddExperiment" &&
					Application.application.parameters.ccNumberList != null ) {
					return true;
				} else { 
					return false;
				}
			}
			
			public function getLaunchRequestNumber():String {
				if (Application.application.parameters.requestNumber != null) {
					return Application.application.parameters.requestNumber;
				} else {
					return "";
				}
			}
			public function getLaunchAnalysisNumber():String {
				if (Application.application.parameters.analysisNumber != null) {
					return Application.application.parameters.analysisNumber;
				} else {
					return "";
				}
			}
			public function getLaunchDataTrackNumber():String {
				if (Application.application.parameters.dataTrackNumber != null) {
					return Application.application.parameters.dataTrackNumber;
				} else {
					return "";
				}
			}
			public function getLaunchTopicNumber():String {
				if (Application.application.parameters.topicNumber != null) {
					return Application.application.parameters.topicNumber;
				} else {
					return "";
				}
			}
			
			public function getLaunchIdLab():String {
				if (Application.application.parameters.idLab != null) {
					return Application.application.parameters.idLab;
				} else {
					return "";
				}
			}
			
			public function getLaunchIdCore():String {
				if (Application.application.parameters.idCore != null) {
					return Application.application.parameters.idCore;
				} else {
					return "";
				}
			}
			
			public function getLaunchIdAppUser():String {
				if (Application.application.parameters.idLab != null) {
					return Application.application.parameters.idAppUser;
				} else {
					return "";
				}
			}
			
			public function getNewExperimentCCNumbers():Array {
				var ccList:Array = new Array();
				if (Application.application.parameters.ccNumberList != null) {
					ccList = Application.application.parameters.ccNumberList.split(",");
				}
				return ccList;
			}
			
			private function loggedInInit():void {
				

				appProgressBar = new AppProgressView();
				appProgressBar.currentState = "ShowCreditsState";
				PopUpManager.addPopUp(appProgressBar, theBody, false);
				PopUpManager.centerPopUp(appProgressBar);
				
				// This is for handler to enable Mac MouseWheel
				this.addEventListener(Event.ADDED_TO_STAGE, stage_init);
				var idCoreFacility:String = Application.application.parameters.idCore;
				var parms:Object = new Object();
				parms.idCoreFacility = idCoreFacility;
				if (isGuestMode() ) { 
					/*
					Captcha feature removed 7.6.12. Guests can now login directly
					var captchaWindow:CaptchaView = new CaptchaView();
					PopUpManager.addPopUp(captchaWindow, mainArea, false);
					PopUpManager.centerPopUp(captchaWindow);
					captchaWindow.init();
					captchaWindow.phrase.setFocus();
					*/
					getSecurityAdvisorForGuest.send(parms);
					
				} else {
					createSecurityAdvisor.send(parms);
				}
			} 
			
			public function stage_init(e:Event):void {		    
				MacMouseWheelHandler.init(stage);
			}            
			
			public  function formatDate(date:Date):String {
				return date.getFullYear().toString() + 
					'-' + (date.getMonth()+1).toString() + '-' + date.getDate();
			}
			
			
			
			public function getLabName(item:Object, col:int):String 
			{  
				var labName:String = "";
				var labList:XMLList = getLabList.lastResult.Lab;     			
				for(var i:Number = 0; i < labList.length(); i++) {
					if(labList[i].@idLab == item.@idLab) {
						labName = labList[i].@name;
						break;
					}
				}
				return labName;
				
			}
			
			public function getIdAppUser():Object {
				return idAppUser;
			}
			public function getAppUserName():Object {
				if (isGuestMode()) {
					return "guest";
				} else {
					return createSecurityAdvisor.lastResult.@userLastName + (createSecurityAdvisor.lastResult.@userLastName != "" ? (", " + createSecurityAdvisor.lastResult.@userFirstName) : "");
				}
			}
			
			public function getUID():Object {
				if (isGuestMode()) {
					return "";
				} else {
					return createSecurityAdvisor.lastResult.@uID;
				}
			}
			
			public function getUserEmail():String {
				if (isGuestMode()) {
					return "";
				} else {
					return createSecurityAdvisor.lastResult.@userEmail;
				}
			}
			
			public function getConfirmEmailGuid():String{
				if (isGuestMode()) {
					return "";
				} else {
					return createSecurityAdvisor.lastResult.@confirmEmailGuid;
				}
			}
			
			public function hasPermission(permission:String):Boolean {
				var hasPermission:Boolean = false;
				var thePermission:Object = null;
				if (isGuestMode()) {
					hasPermission = false;
				} else {
					thePermission = createSecurityAdvisor.lastResult.globalPermissions.Permission.(@name == permission);     
					if (thePermission.length() > 0) { 
						hasPermission = true;
					}       		
				}
				
				return hasPermission;
			}
			
			public function getGroupsToManage():Object {
				if (isGuestMode()) {
					return new XMLListCollection();
				} else {
					return new XMLListCollection(createSecurityAdvisor.lastResult.groupsToManage.Lab);
				}
			}
			
			public function hasGroupsToManage():Boolean {
				var groupsToManage:XMLList = null;
				if (isGuestMode()) {
					groupsToManage = new XMLList();
				} else {
					groupsToManage = createSecurityAdvisor.lastResult.groupsToManage.Lab;    		
				}
				if (groupsToManage.length() > 0) {
					return true;
				} else {
					return false;
				}
			}
			
			
			public function canSubmitRequests(idLab:int):Boolean {
				var theLab:Object = getLabList.lastResult.Lab.(@idLab == idLab.toString());
				if (theLab != null && theLab.@canSubmitRequests == 'Y') {
					return true;
				} else {
					return false;
				}
			}
			public function belongsToALab():Boolean {
				var hasLab:Boolean = false;
				for each(var lab:Object in getLabList.lastResult.Lab) {
					if (lab.@isMyLab == 'Y') {
						hasLab = true;
						break;
					}
				} 
				return hasLab;
			}
			
			public function canSubmitRequestForALab():Boolean {
				var hasLab:Boolean = false;
				for each(var lab:Object in getLabList.lastResult.Lab) {
					if (lab.@canSubmitRequests == 'Y') {
						hasLab = true;
						break;
					}
				} 
				return hasLab;
			}
			
			public function isMyLab(idLab:int):Boolean {
				var theLab:Object = getLabList.lastResult.Lab.(@idLab == idLab.toString());
				if (theLab != null && theLab.@isMyLab == 'Y') {
					return true;
				} else {
					return false;
				}
				
			}
			
			public function isCoreFacilityIManage(idCoreFacility:String):Boolean {
				var isMyCoreFacility:Boolean = false;
				
				for each (var facility:XML in coreFacilitiesICanManage) {
					if (facility.@idCoreFacility == idCoreFacility) {
						isMyCoreFacility = true;
						break;
					}
				}
				return isMyCoreFacility;
			}
			
			private function customizeMenus(navMenu:XMLList):void {
				if (!this.showBioinformaticsLinks) {
					hideMenusByContext(navMenu, "bioinformatics");
				}
				if (!showUsage) {
					hideMenusByContext(navMenu, "usage");
				}
				if (!usesExperimentType("MISEQ")) {
					hideMenusByContext(navMenu, "MISEQ");
				}
				if (!usesExperimentType("HISEQ")) {
					hideMenusByContext(navMenu, "HISEQ");
				}
				if (!usesExperimentType("QC")&&!usesExperimentType("MISEQ")&&!usesExperimentType("HISEQ")) {
					hideMenusByContext(navMenu, "QC");
				}
				if (!usesExperimentType("MICROARRAY")) {
					hideMenusByContext(navMenu, "microarray");
				}
				if(this.isGuestMode()){
					hideMenusByContext(navMenu, "guest");
				}
				
				hideMenusByProperties(navMenu);
				
				addNewExperimentMenus(navMenu);
				addProductOrderMenus(navMenu);
			}
						
			private function addNewExperimentMenus(navMenu:XMLList):void {
				if (this.myCoreFacilities != null && this.myCoreFacilities.length() > 1) {
					for(var i:int; i < navMenu.length(); i++) {
						var children:XMLList = new XMLList();
						var changed:Boolean = false;
						if (navMenu[i].@context == "newExperimentTopLevel") {
							children = addCoreNewExperiments(navMenu[i], children);
							changed = true;
						} else {
							for each (var child:XML in navMenu[i].children()) {
								if (child.@context == "newInternalExperiment") {
									children = addCoreNewExperiments(child, children);
									changed = true;
								} else {
									children += child;
								}
							}
						}
						if (changed) {
							navMenu[i].setChildren(children);
						}
					}
				}
			}
			
			private function addCoreNewExperiments(template:XML, children:XMLList):XMLList {
				for each(var core:Object in myCoreFacilities) {
					if (core.@hasRequestCategories == 'Y') {
						var label:String = template.@label + " for " + core.@facilityName;
						var xml:XML = new XML("<menuitem/>");
						xml.@label = label;
						xml.@icon = template.@icon;
						xml.@idCoreFacility = core.@idCoreFacility;
						children += xml;
					}
				}
				
				return children;
			}
			
			private function addProductOrderMenus(navMenu:XMLList):void {
				if (this.myCoreFacilities != null && this.myCoreFacilities.length() > 1) {
					for(var i:int; i < navMenu.length(); i++) {
						var children:XMLList = new XMLList();
						var changed:Boolean = false;
						for each (var child:XML in navMenu[i].children()) {
							if (child.@context == "newProductOrder") {
								children = addCoreProductOrders(child, children);
								changed = true;
							} else {
								children += child;
							}
						}
						if (changed) {
							navMenu[i].setChildren(children);
						}
					}
				}
			}
			
			private function addCoreProductOrders(template:XML, children:XMLList):XMLList {
				for each(var core:Object in myCoreFacilities) {
					for each(var pt:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.ProductType")){
						if(pt.@idCoreFacility == core.@idCoreFacility){
							var label:String = template.@label + " for " + core.@facilityName;
							var xml:XML = new XML("<menuitem/>");
							xml.@label = label;
							xml.@icon = template.@icon;
							xml.@idCoreFacility = core.@idCoreFacility;
							children += xml;
							break;
						}
					}
				}
				return children;
			}
			
			private function hideMenusByContext(navMenu:XMLList, context:String):void {
				var foundSomethingToDelete:Boolean = true;
				
				// If this user doesn't use any experiment types that deal with 
				// analysis, then we want to exclude bioinformatics specific menus
				while (foundSomethingToDelete) {
					foundSomethingToDelete = false;
					for (var i:int = 0; i < navMenu.length(); i++) {
						if (navMenu[i].@context == context) {
							delete navMenu[i];
							foundSomethingToDelete = true;
							break;
						} else {
							var cn:XMLList = XMLList(navMenu[i].children());
							for ( var j:Number = 0 ; j < cn.length() ; j++ ) {										
								if (cn[j].@context == context) {
									delete cn[j];
									foundSomethingToDelete = true;
									break;
								}
							}
						}
					}
				}
			}

			private function hideMenusByProperties(navMenu:XMLList):void {
				var showMenus:Dictionary = new Dictionary();
				var hideMenus:Dictionary = new Dictionary();
				for each(var property:Object in dictionaryManager.getEntries("hci.gnomex.model.PropertyDictionary")) {
					if (property.@value == '') {
						continue; 
					}
					if (property.@propertyName.toString().indexOf("menu_") == 0) {
						var menuToHideShow:String = null;
						if (property.@propertyValue == "hide" || property.@propertyValue == "show") {
							if (property.@idCoreFacility != "" && !isSuperAdmin) {
								if (coreFacilitiesICanManage.length() > 0) {
									// Only hide a menu for a core facility admin when
									// the menu_ property matches the core facility
									// the admin manages.
										for each (var cf:Object in coreFacilitiesICanManage) {
											if (property.@idCoreFacility == cf.@idCoreFacility) {
												menuToHideShow = property.@propertyName.toString().substr(5);
												break;
											}
										}
								} else {
									
									if (menuToHideShow == null) {
										// Only hide a menu when the menu_ property matches the
										// core facility and the user is only associated with ONE
										// core facility
										if (myCoreFacilities.length() < 2) {
											for each (var cf1:Object in  myCoreFacilities) {
												if (property.@idCoreFacility == cf1.@idCoreFacility) {
													menuToHideShow = property.@propertyName.toString().substr(5);
													break;
												}
											}
										}
										
									}
								}
							} else if (property.@idCoreFacility == "") {
								menuToHideShow = property.@propertyName.toString().substr(5);
							}							
						} else if (property.@propertyValue == "hide super" && isSuperAdmin) {
							menuToHideShow = property.@propertyName.toString().substr(5);
						} 
					}
					if (menuToHideShow != null) {
						if (property.@propertyValue == "hide" || property.@propertyValue == "hide super") {
							hideMenus[menuToHideShow] = menuToHideShow;
						} else if (property.@propertyValue == "show") {
							showMenus[menuToHideShow] = menuToHideShow;
						}
					}
				}
				for(var key:Object in hideMenus) {
					if (!showMenus.hasOwnProperty(key)) {
						for (var i:int = 0; i < navMenu.length(); i++) {
							if (navMenu[i].@label == key) {
								delete navMenu[i];
								break;
							} else {
								var cn:XMLList = XMLList(navMenu[i].children());
								for ( var j:Number = 0 ; j < cn.length() ; j++ ) {										
									if (cn[j].@label == key) {
										delete cn[j];
										break;
									}
								}
							}
						}
					}
				}
			}
			

			private function checkSecurity():void {
				customizeMenus(adminMenu);
				customizeMenus(this.adminPlateBasedMenu);
				customizeMenus(this.guestMenu);
				customizeMenus(this.userNonSubmitterMenu);
				customizeMenus(this.managerMenu);
				customizeMenus(this.userMenu);
				customizeMenus(this.userESMenu);
				customizeMenus(this.managerESMenu);
				customizeMenus(this.adminESMenu);
				customizeMenus(billingAdminMenu);
				customizeMenus(this.billingAdminSubmitterMenu);
				
				if (this.isGuestMode() || this.isUniversityOnlyUser) {
					currentState = "GuestState";
				} else if (hasPermission("canAccessAnyObject")) {
					if (hasPermission("canWriteAnyObject")) {
						isAdminState = true; // real admin
						if (this.isExternalDataSharingSite) {
							currentState = "AdminESState";
						} else if (this.managesPlateBasedWorkflow && !isSuperAdmin) {
							currentState = "AdminDNASeqState";
						} else {
							currentState = "AdminState";
						}
					} else {
						isBillingAdminState = true;  // billing admin
						if (this.isExternalDataSharingSite) {
							currentState = "AdminESState";
						} else if (this.managesPlateBasedWorkflow &&  !isSuperAdmin) {
							currentState = "BillingAdminDNASeqState";
						} else if(this.hasPermission("canSubmitForOtherCores")){
							currentState = "BillingAdminSubmitterState";
						} else {
							currentState = "BillingAdminState";
						}
					}
				} else if (hasGroupsToManage()) {
					currentState = this.isExternalDataSharingSite ? "ManagerESState" :"ManagerState";
				} else if ((hasPermission("canSubmitRequests") && this.canSubmitRequestForALab()) || hasPermission("canSubmitForOtherCores")) {
					currentState = this.isExternalDataSharingSite ? "UserESState" : "UserState";
				} else {
					currentState = "UserNonSubmitterState";
				}

				// Hide help edit unless admin
				if (!isAdminState) {
					hideMenusByContext(topMenu, 'helpEdit');
				}
				
				if(isGuestMode()){
					hideMenusByContext(topMenu, 'quickLinks');
				}
				
				if(!faqLoaded){
					getFAQ.send();
					faqLoaded = true;
				}

				// Let's remove Orders from admin menu for Microarray core
				// since it uses the workflow
				callLater(this.resizeMenuItems);
			}
			
			private function onFailCreateSecurityAdvisor(event:FaultEvent):void {
				this.appProgressBar.currentState = "AuthenticationFailedState";
			}
			
			private function onCreateSecurityAdvisor(event:ResultEvent):void {
				if (!(createSecurityAdvisor.lastResult is XML) ||
					createSecurityAdvisor.lastResult.name() != 'SecurityAdvisor') {
					var msgString:String = createSecurityAdvisor.lastResult..ERROR.@message;
					if (msgString == null || msgString == '') {
						Alert.show("Authentication failed.");  
					} else {
						Alert.show("Authentication failed:" + msgString);
					}
					return;	
				}
				
				idAppUser = createSecurityAdvisor.lastResult.@idAppUser;
				isGuest = createSecurityAdvisor.lastResult.@isGuest == 'Y' ? true : false;
				
				this.showProgress(10);
				
				userName  = createSecurityAdvisor.lastResult.@userFirstName + " " + createSecurityAdvisor.lastResult.@userLastName;
				loginDateTime  = createSecurityAdvisor.lastResult.@loginDateTime;
				isUniversityOnlyUser = createSecurityAdvisor.lastResult.@isUniversityOnlyUser == "Y" ? true : false;
				isUserActive = createSecurityAdvisor.lastResult.@isUserActive == "Y" ? true : false;
				isExternalUser = createSecurityAdvisor.lastResult.@isExternalUser == "Y" ? true : false;
				version = createSecurityAdvisor.lastResult.@version;
				
				dictionaryManager = new DictionaryManager("ManageDictionaries.gx");
				dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_LOADED, onDictionariesLoaded);
				dictionaryManager.call("load", "");
				
			}
			
			private function onGetSecurityAdvisorForGuest(event:ResultEvent):void {
				this.appProgressBar.currentState = "LoadingState";
				this.showProgress(30);
				
				isGuest = true;
				
				if (!(getSecurityAdvisorForGuest.lastResult is XML) ||
					getSecurityAdvisorForGuest.lastResult.name() != 'SecurityAdvisor') {
					Alert.show("You must launch GNomEx from guest page.");  
					return;	
				} 
				idAppUser = getSecurityAdvisorForGuest.lastResult.@idAppUser;
				
				userName  = "guest user";
				loginDateTime  = getSecurityAdvisorForGuest.lastResult.@loginDateTime;
				
				version = getSecurityAdvisorForGuest.lastResult.@version;
				isUniversityOnlyUser = getSecurityAdvisorForGuest.lastResult.@isUniversityOnlyUser == "Y" ? true : false;
				isExternalUser = false;
				
				
				dictionaryManager = new DictionaryManager("ManageDictionaries.gx");
				dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_LOADED, onDictionariesLoaded);
				dictionaryManager.call("load", "");
				
				showProgress(30);
			}
			
			public function onDictionariesLoaded(event:Event):void {
				dictionaryHelper = new DictionaryHelper(dictionaryManager);
				
				properties = new Object();
				for each(var prop:Object in dictionaryManager.getEntries("hci.gnomex.model.PropertyDictionary")) {
					if (prop.@value == '') {
						continue; 
					}
					var qualName:String = prop.@propertyName;
					if (prop.hasOwnProperty("@idCoreFacility") && prop.@idCoreFacility != '') {
						qualName = prop.@idCoreFacility + '\t' + qualName;
						if (prop.hasOwnProperty("@codeRequestCategory") && prop.@codeRequestCategory != '') {
							qualName = prop.@codeRequestCategory + '\t' + qualName;
						}
					}
					properties[qualName] = prop.@propertyValue;
				}
				bulletin = getProperty(PROPERTY_BULLETIN) != null ? getProperty(PROPERTY_BULLETIN) : '';
				
				if (this.getProperty(this.PROPERTY_BST_LINKAGE_SUPPORTED) != null && 
					this.getProperty(this.PROPERTY_BST_LINKAGE_SUPPORTED) == 'Y') {
					this.isBSTLinkageSupported = true;
				} else {
					this.isBSTLinkageSupported = false;
				}
				
				if (this.getProperty(this.PROPERTY_FDT_SUPPORTED) != null && 
					this.getProperty(this.PROPERTY_FDT_SUPPORTED) == 'Y') {
					this.isFDTSupported = true;
				} else {
					this.isFDTSupported = false;
				}
				
				if (this.getProperty(this.PROPERTY_ALLOW_PASTE) != null && 
					this.getProperty(this.PROPERTY_ALLOW_PASTE) == 'N') {
					this.allowPaste = false;
				} else {
					this.allowPaste = true;
				}

				if (this.getProperty(this.PROPERTY_NO_PUBLIC_VISIBILITY) != null && 
					this.getProperty(this.PROPERTY_NO_PUBLIC_VISIBILITY) == 'Y') {
					this.isPublicVisibility = false;
				} else {
					this.isFDTSupported = true;
				}
				
				if (this.getProperty(this.PROPERTY_TOPICS_SUPPORTED) != null && 
					this.getProperty(this.PROPERTY_TOPICS_SUPPORTED) == 'Y') {
					this.isTopicsSupported = true;
				} else {
					this.isTopicsSupported = false;
				}
				
				if (this.getProperty(this.PROPERTY_DATASET_PRIVACY_EXPIRATION) != null && 
					parseInt(this.getProperty(this.PROPERTY_DATASET_PRIVACY_EXPIRATION)) > 0) {
					this.isPrivacyExpirationSupported = true;
				} else {
					this.isPrivacyExpirationSupported = false;
				}
				
				
				if (this.getProperty(this.PROPERTY_SHOW_USAGE_ON_STARTUP) != null && 
					this.getProperty(this.PROPERTY_SHOW_USAGE_ON_STARTUP) == 'Y') {
					this.showUsageOnStartup = true;
				} else {
					this.showUsageOnStartup = false;
				}
				
				if (this.getProperty(this.PROPERTY_EXTERNAL_DATA_SHARING_SITE) != null && 
					this.getProperty(this.PROPERTY_EXTERNAL_DATA_SHARING_SITE) == 'Y') {
					this.isExternalDataSharingSite = true;
				} else {
					this.isExternalDataSharingSite = false;
				}
				
				
				if (this.getProperty(this.PROPERTY_SITE_TITLE) != null) {
					this.siteTitle = this.getProperty(this.PROPERTY_SITE_TITLE);
				} 
				if (this.getProperty(this.PROPERTY_SITE_WELCOME_MESSAGE) != null) {
					this.siteWelcomeMessage = this.getProperty(this.PROPERTY_SITE_WELCOME_MESSAGE);
				} 
				
				// Admins can always view usage.  Normal gnomex users (non guest users)
				// can only view it if the
				// property usage_user_visibility set to 'masked' or 'full'.
				if (this.getProperty(this.PROPERTY_USAGE_USER_VISIBILITY) != null && 
					this.getProperty(this.PROPERTY_USAGE_USER_VISIBILITY) == USAGE_VISIBILITY_MASKED ||
					this.getProperty(this.PROPERTY_USAGE_USER_VISIBILITY) == USAGE_VISIBILITY_FULL) {
					this.showUsage = !this.isGuestMode();
				} else {
					this.showUsage = this.hasPermission("canAccessAnyObject");
				}
				
				if (this.getProperty(this.PROPERTY_DATATRACK_SUPPORTED) == 'Y') {
					dataTrackSupported = true;
				} else {
					dataTrackSupported = false;
				}
				
				// Mark core facilities that do not have any request categories.
				for each (var coreCheckReqCat:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.CoreFacility")) {
					coreCheckReqCat.@hasRequestCategories='N';
					for each (var reqCheckReqCat:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.RequestCategory")) {
						if (coreCheckReqCat.@idCoreFacility == reqCheckReqCat.@idCoreFacility) {
							coreCheckReqCat.@hasRequestCategories='Y';
							break;
						}
					}
				}
				
				// Determine if there are any core facilities configured for this site
				var coreFacilities:XMLList = dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.CoreFacility");
				var coreGenomicsConfigured:Boolean = false;
				var coreDNASeqConfigured:Boolean = false;
				for each (var cf:Object in coreFacilities) {
					if (cf.@isActive != 'Y') {
						continue;
					}
					if (cf.@facilityName == this.CORE_FACILITY_GENOMICS) {
						coreGenomicsConfigured = true;
					} else if (cf.@facilityName == this.CORE_FACILITY_DNA_SEQ) {
						coreDNASeqConfigured = true;
						idCoreFacilityDNASeq = cf.@idCoreFacility;
					}  
				}
				
				// Keep a list of core facilities associated with this user.  We will use
				// this to filter the request categories on the Submit Request window -- among other things.
				if (isGuest) {
					myCoreFacilities = null;
					coreFacilitiesICanManage = null;
				} else if (hasPermission(this.CAN_ADMINISTER_ALL_CORE_FACILITIES)) {
					myCoreFacilities = dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.CoreFacility");		
					coreFacilitiesICanManage = dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.CoreFacility");
				} else {
					myCoreFacilities = new XMLList();
					for each (var core:Object in createSecurityAdvisor.lastResult..CoreFacility) {
						
						for each (var dcf:Object in coreFacilities) {
							if (dcf.@idCoreFacility == core.@idCoreFacility) {
								var found:Boolean = false;
								for(var i:int = 0; i < myCoreFacilities.length(); i++) {
									var core2:Object = myCoreFacilities[i];
									if (core.@idCoreFacility == '') {
										found = true;
										break;
									} else if (core.@idCoreFacility == core2.@idCoreFacility) {
										found = true;
										break;
									}
								}
								if (!found) {
									myCoreFacilities[myCoreFacilities.length()] = dcf;
								}
							}
						}
					}
					//myCoreFacilities = new XMLList(temp.toXMLString());
					//myCoreFacilities = createSecurityAdvisor.lastResult..CoreFacility;
					coreFacilitiesICanManage = new XMLList();
					for each(var entry:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.CoreFacility")) {
						for each (var entry1:Object in createSecurityAdvisor.lastResult.coreFacilitiesIManage.CoreFacility) {
							if (entry.@value == entry1.@value) {
								coreFacilitiesICanManage[coreFacilitiesICanManage.length()] = entry;
								break;
							}
						}
					}
					
					coreFacilitiesICanSubmitTo = new XMLList();
					for each(var entry2:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.CoreFacility")) {
						for each (var entry3:Object in createSecurityAdvisor.lastResult.coreFacilitiesICanSubmitTo.CoreFacility) {
							if (entry2.@value == entry3.@value) {
								coreFacilitiesICanSubmitTo[coreFacilitiesICanSubmitTo.length()] = entry2;
								break;
							}
						}
					}
				}
				
				// Sort core facilities by sort order
				if (myCoreFacilities != null) {
					var swap:Boolean = true;
					while(swap) {
						swap = false;
						for(var j:int = 1; j < myCoreFacilities.length(); j++) {
							var c1:Object = myCoreFacilities[j-1];
							var c2:Object = myCoreFacilities[j];
							var c1Sort:int = c1.@sortOrder != '' ? Number(c1.@sortOrder) : 0;
							var c2Sort:int = c2.@sortOrder != '' ? Number(c2.@sortOrder) : 0;
							if (c1Sort > c2Sort) {
								myCoreFacilities[j-1] = c2;
								myCoreFacilities[j] = c1;
								swap = true;
							}
						}
					}
				}
				if ( this.homeView != null ) { 
					this.homeView.coreFacilitiesInfoView.refresh();
				}
				this.dispatchEvent(new CoreFacilityEvent(CoreFacilityEvent.DATA_REFRESHED));
				
				
				requestCategoryTypeMap = new Object();
				for each (var rct:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.RequestCategoryType")) {
					requestCategoryTypeMap[rct.@codeRequestCategoryType] = rct;
				}
				
				// Determine if the admin uses the Plate Based workflow screens (Fill Plate, Build Run, Review results)
				this.managesPlateBasedWorkflow = this.doesManagePlateBasedWorkflow();
				
				// Determine which experiment types this person can use
				this.usesExperimentTypeCapSeq = this.usesExperimentType(this.TYPE_CAP_SEQ);
				this.usesExperimentTypeFragAnalysis = this.usesExperimentType(this.TYPE_FRAG_ANAL);
				this.usesExperimentTypeMitSeq = this.usesExperimentType(this.TYPE_MIT_SEQ);
				this.usesExperimentTypeCherryPick = this.usesExperimentType(this.TYPE_CHERRY_PICK);
				this.usesExperimentTypeIScan = this.usesExperimentType(this.TYPE_ISCAN);
				
				
				if (isGuest) {
					isCoreGenomics = true;
				} else if (hasPermission(CAN_ADMINISTER_ALL_CORE_FACILITIES)) {
					isCoreGenomics = true;
				} else {
					if (usesIlluminaExperimentType() ||
						usesExperimentType(this.TYPE_MICROARRAY)) {
						isCoreGenomics = true;
					}
				}
				
				
				//  If the user's lab only belongs to DNA Seq Core facility, we hide
				//  the bioinformatics links by default (analysis, data tracks, topics)
				//  and genomics core facility only features (workflow, amend request)
				//  We don't hide/show these links in the situation where this is 
				// an external data sharing site -- the state takes care of that
				if (!isExternalDataSharingSite) {
					// We will show all of the links for a super admin
					if (!hasPermission(this.CAN_ADMINISTER_ALL_CORE_FACILITIES)) {
						if (!isCoreGenomics) {
							showBioinformaticsLinks = false;
							showCoreGenomicsLinks = false;
						}
					}
				}
				
				if (this.hasPermission(this.CAN_ADMINISTER_ALL_CORE_FACILITIES)) {
					isSuperAdmin = true;
				}
				
				
				
				setDefaultSubmissionState();
				
				// Build seq lib protocol list with app filters.
				buildSeqLibProtocolListWithAppFilters();
				
				if (currentState == null || currentState == "") {
					getExperimentDesignList.send();
					
					showProgress(30);
					enableApp();
					
				}
				
				if (this.getProperty(this.PROPERTY_CONFIGURABLE_BILLING_ACCOUNTS) == "Y") {
					this.useConfigurableBillingAccounts = true;
				} else {
					this.useConfigurableBillingAccounts = false;
				}
				
				getSessionTimeout.send();
			}
			
			private function buildSeqLibProtocolListWithAppFilters():void {
				this.seqLibProtocolsWithAppFilters = new XMLListCollection();
				var dh:DictionaryHelper = new DictionaryHelper(this.dictionaryManager);
				for each (var s:XML in dictionaryManager.getEntries('hci.gnomex.model.SeqLibProtocol')) {
					var seq:XML = s.copy();
					var app:Object = dh.getApplicationForProtocol(seq.@idSeqLibProtocol);
					if (app != null) {
						seq.@idCoreFacility = app.@idCoreFacility;
						seq.@codeApplicationType = app.@codeApplicationType;
					}
					this.seqLibProtocolsWithAppFilters.addItem(seq);
				}
			}
			
			private function doesManagePlateBasedWorkflow():Boolean {
				
				if (!isGuest) {
					for each (var cf:Object in createSecurityAdvisor.lastResult.coreFacilitiesIManage.CoreFacility) {
						for each (var requestCategory:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.RequestCategory")) {
							if (requestCategory.@idCoreFacility == cf.@idCoreFacility &&
								requestCategory.@isActive == 'Y' &&
								(requestCategory.@type == this.TYPE_CAP_SEQ ||
									requestCategory.@type == this.TYPE_MIT_SEQ ||
									requestCategory.@type == this.TYPE_FRAG_ANAL) ) {
								return true;
								break;
							}
						}
					}
				}
				return false;
			}
			
			public function usesIlluminaExperimentType():Boolean {
				if (isGuest) {
					return false;
				}
				if (hasPermission(CAN_ADMINISTER_ALL_CORE_FACILITIES)) {
					var found:Boolean = false;
					for each (var rc:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.RequestCategory")) {
						if (rc.@isActive == 'Y') {
							var rct:Object = requestCategoryTypeMap[rc.@type];
							if (rct.@isIllumina == 'Y') {
								found = true;
								break;
							}
						}
					}
					return found;
				} 
				
				for each (var cf:Object in createSecurityAdvisor.lastResult..CoreFacility) {
					for each (var requestCategory:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.RequestCategory")) {
						if (requestCategory.@isActive == 'Y' && requestCategory.@idCoreFacility == cf.@idCoreFacility) {
							var rct1:Object = requestCategoryTypeMap[requestCategory.@type];
							if (rct1.@isIllumina == 'Y') {
								return true;
								break;
							}
						}
					}
				}
				return false;
			}
			
			public function usesExperimentType(experimentType:String):Boolean {
				if (isGuest) {
					return false;
				}
				if (hasPermission(CAN_ADMINISTER_ALL_CORE_FACILITIES)) {
					var found:Boolean = false;
					for each (var rc:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.RequestCategory")) {
						if (rc.@type.toString().toLowerCase() == experimentType.toLowerCase() &&
							rc.@isActive == 'Y') {
							found = true;
							break;
						}
					}
					return found;
				} 
				
				for each (var cf:Object in createSecurityAdvisor.lastResult..CoreFacility) {
					for each (var requestCategory:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.RequestCategory")) {
						if (requestCategory.@idCoreFacility == cf.@idCoreFacility &&
							requestCategory.@type.toLowerCase() == experimentType.toLowerCase() &&
						    requestCategory.@isActive == 'Y') {
							return true;
							break;
						}
					}
				}
				return false;
			}
			
			public function usesKindOfRequestCategory(codeRequestCategory:String):Boolean {
				if (isGuest) {
					return false;
				}
				
				if (hasPermission(CAN_ADMINISTER_ALL_CORE_FACILITIES)) {
					var found:Boolean = false;
					for each (var requestCategory:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.RequestCategory")) {
						if (requestCategory.@codeRequestCategory.toString().indexOf(codeRequestCategory) != -1 &&
							requestCategory.@isActive == 'Y') {
							found = true;
							break;
						}
					}
					return found;
				}
				
				for each (var cf:Object in createSecurityAdvisor.lastResult..CoreFacility) {
					for each (var requestCategory1:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.RequestCategory")) {
						if (requestCategory1.@idCoreFacility == cf.@idCoreFacility &&
							requestCategory1.@codeRequestCategory.toString().indexOf(codeRequestCategory) != -1 &&
							requestCategory1.@isActive == 'Y') {
							return true;
							break;
						}
					}
				}
				return false;
			}
			


			
			private function onGetSessionTimeout(event:ResultEvent):void {
				var sessionTimeout:int = parseInt(getSessionTimeout.lastResult.@maxInactiveTime);
				SessionTimeoutData.setThisApplication(this, sessionTimeout); 
				SessionTimeoutData.startUserSessionTimer();		
				getProtocolList.send();
			}	
			
			public function getProperty(name:String):String {
				if (properties == null) {
					return "";
				}
				return properties[name];
			}
			
			public function getCoreFacilityProperty(idCoreFacility:String, name:String):String {
				var result:String = "";
				if (properties != null) {
					var qualName:String = idCoreFacility + "\t" + name;
					result = properties[qualName];
					if (result == null || result == "") {
						result = properties[name];
					}
					if (result == null) {
						result = "";	
					}
				}
				return result;
			}
			
			public function getRequestCategoryProperty(idCoreFacility:String, codeRequestCategory:String, name:String):String {
				var result:String = "";
				if (properties != null) {
					var qualName:String = codeRequestCategory + '\t' + idCoreFacility + "\t" + name;
					result = properties[qualName];
					if (result == null || result == "") {
						result = getCoreFacilityProperty(idCoreFacility, name);
					}
				}
				return result;
			}
			
			public function requireExperimentDescriptionAndName(idCoreFacility:String, codeRequestCategory:String):Boolean {
				var result:String = getRequestCategoryProperty(idCoreFacility, codeRequestCategory, this.PROPERTY_DESCRIPTION_NAME_MANDATORY_FOR_INTERNAL_EXPERIMENTS);
				if (result == null || result != "Y") {
					return false;
				} else {
					return true;
				}
			}
			
			private function showProgress(interval:uint):void {
				currentProgressInterval = currentProgressInterval + interval;
				appProgressBar.bar.setProgress(currentProgressInterval, 100);
			}
			
			private function onGetExperimentDesignList(event:ResultEvent):void {
				getExperimentFactorList.send();
				
				showProgress(10);
				enableApp();
			}		
			
			private function onGetExperimentFactorList(event:ResultEvent):void {
				getLabList.send();
				this.setupSampleSheetUpload();
				
				showProgress(10);
			}
			
			private function onGetAppUserList(event:ResultEvent):void {
				appUserList = new XMLListCollection(getAppUserList.lastResult.AppUser.(@isActive == 'Y'));
				var emptyNode:XML = <AppUser displayName = '' idAppUser='' name='' label=''/>;
				promptedAppUserList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getAppUserList.lastResult.AppUser.(@isActive == 'Y')));
				
				getProjectList.send();
				
				showProgress(10);
				enableApp();
			}
			
			private function onGetLabList(event:ResultEvent):void {
				var emptyNode:XML = <Lab idLab='' name='' label=''/>;
				labList = new XMLListCollection(getLabList.lastResult.Lab);
				promptedLabList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getLabList.lastResult.Lab));
				submitRequestLabList = new XMLListCollection(getLabList.lastResult.Lab.(@canGuestSubmit == 'Y' || @canSubmitRequests == 'Y'));
				promptedSubmitRequestLabList = new PromptXMLListCollection(emptyNode, submitRequestLabList);
				promptedSubmitRequestLabList.refresh();
				manageLabList = new XMLListCollection(getLabList.lastResult.Lab.(@canManage == 'Y'));
				
				// For submitting work auth forms online, a non-gnomex university user will
				// select from a list of all labs.  A guest user doesn't have this feature.
				// A normal gnomex user will select from a list of their labs. (Admins
				// will have a full list since they can submit a request on behalf 
				// of any lab.
				if (this.isUniversityOnlyUser) {
					workAuthLabList = new XMLListCollection(getLabList.lastResult.Lab);
					promptedWorkAuthLabList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getLabList.lastResult.Lab));
				} else if (this.isGuestMode()) {	        		
				} else if (this.canSubmitRequestForALab()) {
					workAuthLabList = submitRequestLabList;
					promptedWorkAuthLabList = new PromptXMLListCollection(emptyNode, submitRequestLabList);
				} else {
					workAuthLabList = new XMLListCollection(getLabList.lastResult.Lab);
					promptedWorkAuthLabList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getLabList.lastResult.Lab));
				}
				
				getAppUserList.send();
				
				showProgress(30);
				enableApp();
			}		
			
			private function onGetProjectList(event:ResultEvent):void {
				getGenomeIndexList.send();
				getOrganismList.send();
				getPropertyList.send();
				getIScanChipList.send();
				getProductList.send();
				
				getAccountFieldsConfiguration.send();
				
				showProgress(10);
				enableApp();
			}			
			
			private function onGetPropertyList(event:ResultEvent):void {
				propertyList = new XMLListCollection(getPropertyList.lastResult.Property);
				this.dispatchEvent(new PropertyEvent(PropertyEvent.DATA_REFRESHED));
				
				if (currentState == null || currentState == "") {
					showProgress(10);
					enableApp();
				}
			}
			
			private function onGetGenomeIndexList(event:ResultEvent):void {
				genomeIndexList = new XMLListCollection(getGenomeIndexList.lastResult.GenomeIndex);
				this.dispatchEvent(new GenomeIndexEvent(GenomeIndexEvent.DATA_REFRESHED));
			}
			
			private function onGetOrganismList(event:ResultEvent):void {
				organismList = new XMLListCollection(getOrganismList.lastResult.Organism);
				das2OrganismList = new XMLListCollection();
				activeOrganismList = new XMLListCollection();
//				var emptyNode:XML = <Organism idOrganism='' bionomialName=''  das2Name = '' label='' value=''/>;
//				das2OrganismList.addItem(emptyNode);
//				activeOrganismList.addItem(emptyNode.copy());
				for each(var organism:XML in getOrganismList.lastResult.Organism) {
					if (organism.@das2Name != '' && organism.@bionomialName != '' && organism.@isActive == 'Y') {
						das2OrganismList.addItem(organism.copy());
					}
					if (organism.@isActive == 'Y') {
						activeOrganismList.addItem(organism.copy());
					}
				}
				activeOrganismList.sort = new Sort();
				activeOrganismList.sort.compareFunction = sortActiveOrganismList;
				activeOrganismList.refresh();
				
				this.dispatchEvent(new OrganismEvent(OrganismEvent.DATA_REFRESHED));
				
				if(submitRequestView != null && submitRequestView.sampleSetupView != null) {
					// Reset dataProvider for sampleSetupView Organism ComboBox
					submitRequestView.sampleSetupView.sampleOrganismCombo.dropdown.dataProvider = null;
					submitRequestView.sampleSetupView.sampleOrganismCombo.dropdown.dataProvider = organismList;
					
				}
				if(submitRequestView != null && submitRequestView.hybSetupView != null) {
					// Reset dataProvider for hybSetupView Organism ComboBox
					submitRequestView.hybSetupView.organismCombo.dropdown.dataProvider = null;
					submitRequestView.hybSetupView.organismCombo.dropdown.dataProvider = organismList;
					
				}
				if (currentState == null || currentState == "") {
					showProgress(10);
					enableApp();
				}
			}
			
			public function sortActiveOrganismList(a:Object, b:Object, fields:Array = null ):int {
				var so1:Number = (a.@sortOrder == '' || a.@sortOrder == null) ? Number(999999) : new Number(a.@sortOrder);
				var so2:Number = (b.@sortOrder == '' || b.@sortOrder == null) ? Number(999999) : new Number(b.@sortOrder);
				
				if (so1 < so2) {
					return -1;
				} else if (so1 > so2) {
					return 1;
				} else {
					if(a.@combinedName < b.@combinedName) return -1;
					if(a.@combinedName > b.@combinedName) return 1;
					return 0;
				}
			}
			
			private function onGetIScanChipList(event:ResultEvent):void {
				iScanChipList = new XMLListCollection(getIScanChipList.lastResult..IScanChip);
				var emptyNode:XML = <IScanChip idIScanChip='' name='' />;
				
				if (currentState == null || currentState == "") {
					showProgress(10);
					enableApp();
				}
			}
			
			private function onGetProductList(event:ResultEvent):void {
				productList = new XMLListCollection(getProductList.lastResult..Product);
				var emptyNode:XML = <Product idProduct='' name='' />;
				
				this.dispatchEvent(new ProductEvent(ProductEvent.DATA_REFRESHED));
				
				if (currentState == null || currentState == "") {
					showProgress(10);
					enableApp();
				}
			}
			
			private function onGetAccountFieldsConfiguration(event:ResultEvent):void {
				this.internalAccountFieldsConfigurationList = new XMLListCollection(getAccountFieldsConfiguration.lastResult.InternalAccountFieldsConfigurationList.InternalAccountFieldsConfiguration);
				this.otherAccountFieldsConfigurationList = new XMLListCollection(getAccountFieldsConfiguration.lastResult.OtherAccountFieldsConfigurationList.OtherAccountFieldsConfiguration);
			}
			
			private function enableApp():void {
				// If we are already in an enabled state,
				// just return.
				if (currentState != null) {
					return;
				}
				
				var done:Boolean = false;
				if (dictionaryManager != null &&
					dictionaryManager.xml != null &&
					manageLabList != null &&
					promptedLabList != null &&
					propertyList != null) {
					
					if (this.isGuestMode()) {
						done = true;
					} else if (promptedAppUserList != null) {
						done = true;
					}
				} 
				
				if (done) {
					appProgressBar.bar.setProgress(100, 100);
					PopUpManager.removePopUp(appProgressBar);
					currentState = "enabledState";
					stateStack.selectedChild = theViews;
					
					if(createSecurityAdvisor.lastResult != null && createSecurityAdvisor.lastResult.@passwordExpired == 'Y'){
						var changePasswordWindow:ChangePassword = ChangePassword(PopUpManager.createPopUp(this.mainArea, ChangePassword, true));
						PopUpManager.centerPopUp(changePasswordWindow);	
					}

				}
			}
			
			private function checkSecurityAndLaunchStartWindow():void {
				if (this.currentState == "enabledState") {
					checkSecurity();
					if (this.homeView != null) {
						this.homeView.init();
					}
					launchStartWindow();
					if(!isGuestMode() && !isUniversityOnlyUser && (getUserEmail() == "" || getUserEmail() == null) || (this.getConfirmEmailGuid() != "" && this.getConfirmEmailGuid() != null)){
						var verifyWindow:VerifyEmailWindow = VerifyEmailWindow(PopUpManager.createPopUp(this, VerifyEmailWindow, true));
						verifyWindow.email = getUserEmail();
						verifyWindow.idAppUser = this.getIdAppUser();
						mx.managers.PopUpManager.centerPopUp(verifyWindow);
						this.setFocus();
					}
					callLater(this.resizeMenuItems);
				}
			}
			
			private function launchStartWindow():void {
				if (launchExperimentDownloads()) {
					// (Make sure call to launchExperimentDownloads() is before launchExperimentDetail()
					// since launching to the detail window is now the default if no launchWindow
					// parameter is included.
					this.showExperimentDownload(getLaunchRequestNumber());
				} else if (launchExperimentDetail()) {
					this.showExperiment(getLaunchRequestNumber(), false);
				} else if (launchAnalysisDetail()) {
					this.showAnalysisForNumber(getLaunchAnalysisNumber());
				} else if (launchDataTrackDetail()) {
					this.showDataTrackForNumber(getLaunchDataTrackNumber());
				} else if (launchTopicDetail()) {
					this.showTopicForNumber(getLaunchTopicNumber());
				} else if (launchBillingAccountDetail() && hasPermission("canAccessAnyObject")) {
					this.showBillingAccountDetail(this.getLaunchIdLab());
				} else if (launchWorkAuthForm() && !isGuestMode()) {
					this.theViews.selectedChild = this.homeView;
					callLater(showWorkAuthWindowForLaunch);
				} else if (launchAppUser() && hasPermission("canAccessAnyObject")) {
					this.showUserWindow(this.getLaunchIdAppUser());
				} else if (launchCreateExperiment()) {
					this.showNewExperiment(getNewExperimentCCNumbers());
				} else {
					if (showUsage && showUsageOnStartup) {
						theViews.selectedChild = this.navUsageView;
					} else {
						if (isGuestMode()) {
							theViews.selectedChild = this.navTopicsView;
						} else {
							theViews.selectedChild = this.homeView;						
						}
					}					
				}
				
			}
			
			public function sortExperimentDesigns(obj1:Object, obj2:Object, fields:Array=null):int {
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var ed1:String = obj1.@experimentDesign;
					var ed2:String = obj2.@experimentDesign;
					
					if (ed1 == 'Other') {
						return 1;
					} else if (ed2 == 'Other') {
						return  -1;
					} else {
						if (ed1 < ed2) {
							return -1;
						} else if (ed1 > ed2) {
							return 1;
						} else {
							return 0;
						}
					}			
					
				}
			}
			public function sortExperimentFactors(obj1:Object, obj2:Object, fields:Array=null):int {
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var ef1:String = obj1.@experimentFactor;
					var ef2:String = obj2.@experimentFactor;
					if (ef1 == 'Other') {
						return 1;
					} else if (ef2 == 'Other') {
						return  -1;
					} else  {
						if (ef1 < ef2) {
							return -1;
						} else if (ef1 > ef2) {
							return 1;
						} else {
							return 0;
						}
					}				
					
				}
			}
			
			public function onFailHttpRequest(title:String, event:FaultEvent):void {
				var sandboxMessage:String = "";
				switch (Security.sandboxType) {
					case Security.LOCAL_TRUSTED:
						sandboxMessage += " (Local trusted)";
						break;
					case Security.LOCAL_WITH_FILE:
						sandboxMessage += " (Local with file)";
						break;
					case Security.LOCAL_WITH_NETWORK:
						sandboxMessage += " (Local with network)";
						break;
					case Security.REMOTE:
						sandboxMessage += " (Remote)";
						break;
				}
				Alert.show("SandboxType=" + sandboxMessage + "\n" + event.fault.toString(), title );
			}
			
			
			
			public function onFailHttpRequestNonVerbose(title:String, event:FaultEvent):void {
				
				if (event.message.body is String) {
					var startPos:int = event.message.body.indexOf("TEXT=");
					var endPos:int   = event.message.body.indexOf("TYPE=");
					if (startPos != -1 && endPos != -1) {
						Alert.show(event.message.body.toString().substring(startPos + 5, endPos), title);    		
					} else {
						Alert.show(event.message.body.toString(), title);
					}        
					
				} else {
					Alert.show(event.message.toString(), title + " event.message");
				}
			}
			
			public function getTreeIcon(item:Object):Class {
				if(item is XML) {
					// If icon path defined then use it
					var itemIcon:String = item.@icon;
					if(itemIcon != null && itemIcon.length > 0) {
						return IconUtility.getClass(item, itemIcon, 16, 16);
					}
				} 
				if (item.name() == "Lab" || item.name() == "BillingLab") {
					return this.iconGroup;
				} else if (item.name() == "Project" || item.name() == "AnalysisGroup" || item.name() == "ProjectRequestList" || item.name() == "ProtocolList" || item.name() == "AnalysisGroupList" || item.name() == "Status" || item.name() == "Protocols" ) {
					return iconProject;
				} else if (item.name() == "Protocol") {
					return iconProtocol;
				} else if (item.name() == "AnalysisNode" || item.name() == "Analysis") {
					return iconAnalysis;
				} else if (item.name() == "RequestCategory") {
					return this.iconCategory;
				} else if (item.name() == "BillingItem") {
					return iconBilling;
				} else if (item.name() == "DataTrack") {
					return getDataTrackTreeIcon(item);
				} else if (item.name() == "Topic") {		
					if (item.@codeVisibility == "MEM") {
						return iconTopicMember;
					} else if (item.@codeVisibility == "MEMCOL") {
						return iconTopicMember;
					} else if (item.@codeVisibility == "OWNER") {
						return iconTopicOwner;
					} else if (item.@codeVisibility == "INST") {
						return iconTopicInstitution;
					} else {
						return iconTopicPublic;
					}			
				} else if (item.name() == "PriceSheet") {
					return iconPriceSheet;
				} else if (item.name() == "PriceCategory" ) {
					return iconBillingFolder;
				} else if (item.name() == "Price" ) {
					if (item.@isActive == "N") {
						return iconBillingDisabled;
					} else {
						return iconBilling;
					} 
				} else if (item.name() == "PriceCriteria") {
					return iconPriceCriteria;
				} else if (item.name() == "SlideProduct") {
					if (item.@isActive == "N") {
						return this.iconSlideSetInActive;
					} else {
						return this.iconSlideSet;
					}
				} else if (item.name() == "SlideDesign") {
					if (item.@isActive == "N") {
						return this.iconSlideInActive;
					} else {
						return this.iconSlide;
					}
				} else if (item.name() == "RequestDownload") {
					if (item.hasOwnProperty("@isEmpty") && item.@isEmpty == "Y") {
						return iconFolderDisabled;
					} else {
						return iconFolder;			
					}
				} else if (item.name() == "FileDescriptor" && item.hasOwnProperty("@type") && item.@type == "dir") {
					if (item.hasOwnProperty("@isEmpty") && item.@isEmpty == "Y") {
						return iconFolderDisabled;
					} else {
						return iconFolder;			
					}
				} else if (item.name() == "AnalysisDownload") {
					if (item.hasOwnProperty("@type") && item.@type == "dir") {
						if (item.hasOwnProperty("@isEmpty") && item.@isEmpty == "Y") {
							return iconFolderDisabled;
						} else {
							return iconFolder;			
						} 
					} else {
						return null;			
					} 
				} else if (item.name() == "AnalysisFileDescriptor") {
					if (item.hasOwnProperty("@type") && item.@type == "dir") {
						if (item.hasOwnProperty("@isEmpty") && item.@isEmpty == "Y") {
							return iconFolderDisabled;
						} else {
							return iconFolder;			
						} 
					} else if (item.hasOwnProperty("@isSupportedDataTrack") && item.@isSupportedDataTrack == 'Y') {
						return iconDataTrack;
					} else {
						return null;			
					} ;
				} else if (item.name() == "Request" || item.name() == "RequestNode") {
					return this.iconFlask;
				} else if (item.name() == "Item") {
					return iconGreenBullet;
				} else if (item.name() == "SequenceLane") {
					return iconGreenBullet;
				} else if (item.name() == "Hybridization") {
					return iconRedBullet;
				} else if (item.name() == "ProductOrder") {
					return iconCategory;
				} else if (item.name() == "Product") {
					return iconGreenBullet;
				} else {
					return null;
				}
			}
			
			public function getDataTrackTreeIcon(item:Object):Class {
				if (item.name() == "Organism") {
					if (item.@isPopulated == "Y") {
						return iconOrganism;
					} else {
						return iconOrganismFaded;
					}
				} else if (item.name() == "DataTrackFolder") {
					if (item.@idLab != '') {
						return iconDataTrackFolderForGroup;					
					} else {
						return iconFolder;										
					}
				} else if (item.name() == "GenomeBuild") {
					if (item.children() != null && item.children().length() > 0) {
						return iconGenomeBuild;				
					} else {
						return iconGenomeBuildFaded;
					}
				} else if (item.name() == "DataTrack") {
					if (item.@codeVisibility == "MEM") {
						return iconDataTrackMember;
					} else if (item.@codeVisibility == "MEMCOL") {
						return iconDataTrackMemberCollab;
					} else if (item.@codeVisibility == "OWNER") {
						return iconDataTrackOwner;
					} else if (item.@codeVisibility == "INST") {
						return iconDataTrackInstitution;
					} else {
						return iconDataTrackPublic;
					}
				} else {
					return iconDataTrack;
				}
			}     
			
			public function getTopicTreeIcon(item:Object):Class {
				if (item.name() == "Lab") {
					return iconDataTrackFolderForGroup;
				} else {
					return iconTopic;
				}
			}
			
			public function getSampleProperty(idProperty:String):Object {
				var property:XML = null;
				for each(var prop:XML in propertyList) {
					if (prop.@idProperty == idProperty) {
						if (prop is XMLList) {
							property = prop[0];
						} else {
							property = prop as XML;
						}
						break;
					}
				}
				return property;
			}		
			
			public function getOrganism(idOrganism:String):Object {
				var organism:XML = null;
				for each(var o:XML in organism) {
					if (o.@idOrganism == idOrganism) {
						if (o is XMLList) {
							organism = o[0];
						} else {
							organism = 0 as XML;
						}
					}
				}
				return organism;
			}		
			
			
			public function getPropertyOptions(idProperty:String, includeInactive:Boolean=true):XMLList {
				var property:XML = null;
				for each(var prop:XML in propertyList) {
					if (prop.@idProperty == idProperty) {
						property = prop;
						break;
					}
				}
				if (property != null) {
					if (includeInactive) {
						return property.options.PropertyOption;					
					} else {
						return property.options.PropertyOption.(@value == '' || @isActive != 'N');					
					}
				} else {
					return new XMLList();
				}
			}		
			
			// Workaround to DropdownLabel.updateDisplayList issue which calls parentDocument.parentDocument.isEditState
			public function isEditState():Boolean {
				if (this.theViews.selectedChild != null && this.submitRequestView != null && this.theViews.selectedChild == this.submitRequestView) {
					return false;
				} else {
					return true;
				}
			}
			
			
			public function showUploadDownloadHints():void {
				var hints:IFlexDisplayObject = DownloadHints(PopUpManager.createPopUp(this.mainArea, DownloadHints, true));
				PopUpManager.centerPopUp(hints);			 		
			}
			
			public function busy():void {
				cursorID=CursorManager.setCursor(
					StyleManager.getStyleDeclaration("CursorManager").getStyle("busyCursor"),
					CursorManagerPriority.HIGH);
			}
			
			public function notBusy():void {
				CursorManager.removeCursor(cursorID);
			}
			
			public function showDistributeDataTrackWindow(analysis:Object):void {
				if (distributeDataTrackWindow == null) {
					distributeDataTrackWindow = DistributeDataTrackWindow(PopUpManager.createPopUp(this.theBody, DistributeDataTrackWindow, false));
					distributeDataTrackWindow.positionWindow();
				}
				distributeDataTrackWindow.refreshDataTracksForAnalysis(analysis);
			}
			
			public function closeDistributeDataTrackWindow(analysis:Object):void {
				if (distributeDataTrackWindow != null) {
					PopUpManager.removePopUp(distributeDataTrackWindow);
					distributeDataTrackWindow = null;
				}
			}
			
			
			public function removeDistributeDataTrackWindow():void {
				PopUpManager.removePopUp(distributeDataTrackWindow);
				distributeDataTrackWindow = null;
			}
			
			public function isDNASeqType(type:String):Boolean {
				if (type == TYPE_CAP_SEQ || type == TYPE_FRAG_ANAL || type == this.TYPE_MIT_SEQ || type == this.TYPE_CHERRY_PICK || type == this.TYPE_ISCAN) {
					return true;
				} else {
					return false;
				}
			}	
			
			private function onMenuClick(event:MouseEvent):void {
				if (event == null || event.target == null || !event.target.hasOwnProperty("data") || event.target.data == null || !event.target.data.hasOwnProperty("@label") || event.target.data.@label == null) {
					return;
				}
				showView(event.target.data);
				if(mainMenu.selectedIndex != -1 && XML(XMLListCollection(mainMenu.dataProvider).getItemAt(mainMenu.selectedIndex)).children().length() == 0){
					mainMenu.selectedIndex = -1;
				}
			}
			
			private function onMenuSelect(event:MenuEvent):void {				
				showView(event.item);
			}
			
			
			public function showView(menuitem:Object):void {
				if (menuitem.children().length() > 0) {
					return;
				}
				var label:String = menuitem.@label;
				var url:String = menuitem.hasOwnProperty("@url") ? menuitem.@url : "";
				var codeStepNext:String = menuitem.hasOwnProperty("@codeStepNext") ? menuitem.@codeStepNext : "";
				var codeSequencingPlatform:String = menuitem.hasOwnProperty("@codeSequencingPlatform") ? menuitem.@codeSequencingPlatform : "";
				var idCoreFacility:String = "";
				
				if(!isGuest && myCoreFacilities[0] != null){
					if (menuitem.hasOwnProperty("@idCoreFacility") && menuitem.@idCoreFacility != '') {
						idCoreFacility = menuitem.@idCoreFacility;
					} else {
						idCoreFacility = myCoreFacilities[0].@idCoreFacility;
					}
				}
				
				if (label == 'Analysis') {
					theViews.selectedChild = navAnalysisView;
				} else if (label == 'Data Tracks') {
					theViews.selectedChild = this.navDataTrackView;
				} else if (label == 'Experiments') {
					theViews.selectedChild = this.navExperimentView;
				} else if (label == 'Topics') {
					theViews.selectedChild = this.navTopicsView;
				} else if (label == 'New Analysis') {
					theViews.selectedChild = navAnalysisView;
					navAnalysisView.showNewAnalysisWindow();
				} else if (label == "Add Illumina HiSeq/MiSeq Services") {
					this.isInternalExperimentSubmission = true;
					theViews.selectedChild = amendRequestView;
				} else if (GNomExStringUtil.startsWith(label,"Upload Experiment data generated at third party facility") || GNomExStringUtil.startsWith(label,"Create New Experiment and Upload Files")) {
					// If a request is currently loaded then make sure to reinitialze if changing between internal and external
					if(this.submitRequestView.request != null && this.isInternalExperimentSubmission) {
						this.submitRequestView.startNewRequest();
					}
					this.isInternalExperimentSubmission = false;
					this.theViews.selectedChild = homeView;
					callLater(this.homeView.submitExternalExperiment, [idCoreFacility]);	
					// If new experiment then initialize ShowCCNumber checkbox
					this.submitRequestView.showCCNumberColumn = false; 
				} else if (label == "Track Usage") {
					this.theViews.selectedChild = this.navUsageView;
				} else if (label == "Add/Edit Dictionaries") {
					showDictionaries();
				} else if (label == "Configure Experiment Platform") {
					var platformWindow:ExperimentPlatformWindow = ExperimentPlatformWindow(PopUpManager.createPopUp(theBody, ExperimentPlatformWindow, true));
					PopUpManager.centerPopUp(platformWindow);
				} else if (label == "Configure Organisms and Genome Builds") {
					var configWindow:OrganismsWindow = OrganismsWindow(PopUpManager.createPopUp(theBody, OrganismsWindow, true));
					PopUpManager.centerPopUp(configWindow);
				} else if (label == "Configure Annotations") {
					var configAnnotWindow:PropertyWindow = PropertyWindow(PopUpManager.createPopUp(theBody, PropertyWindow, true));
					PopUpManager.centerPopUp(configAnnotWindow);
					
				}  else if (label == "Annotation Report") {
					navReportView.reportName = "Annotation Report";
					theViews.selectedChild = navReportView;
					if (navReportView.isInitialized) {
						navReportView.init();
					}
				}  else if (label == "Project/Experiment Report") {
					navReportView.reportName = "Project/Experiment Report";
					theViews.selectedChild = navReportView;
					if (navReportView.isInitialized) {
						navReportView.init();
					}
				} else if (label == "Annotation Progress Report") {
					navReportView.reportName = "Annotation Progress Report";
					theViews.selectedChild = navReportView;
					if (navReportView.isInitialized) {
						navReportView.init();
					}
				} else if (GNomExStringUtil.startsWith(label,"New Experiment Order")) {
					// When beginning a new order always load a new request.
					this.submitRequestView.request = null;
					this.isInternalExperimentSubmission = true;
					theViews.selectedChild = homeView;
					callLater(this.homeView.submitRequest, [idCoreFacility]);	
				} else if (label == "Browse Experiments" || label == "Experiments") {
					this.navExperimentView.shortcutToExperimentListTab = true;
					theViews.selectedChild = navExperimentView;
				} else if (label == "Analysis") {
					theViews.selectedChild = navAnalysisView;
				} else if (label == "Data Tracks") {
					theViews.selectedChild = this.navDataTrackView;
				} else if (label == "Topics") {
					theViews.selectedChild = navTopicsView;
				} else if (label == "Billing") {
					theViews.selectedChild = navBillingView;
				} else if (label == "Users & Groups") {
					theViews.selectedChild = navUsersView;
				} else if (label == "Orders") {
					theViews.selectedChild = navOrderView;
				} else if (label == "Fill Plate") {
					theViews.selectedChild = navPlateView;
					navPlateView.removeRun();
					navPlateView.toggleBuildState('PLATE');
				} else if (label == "Build Run") {
					theViews.selectedChild = navPlateView;
					navPlateView.removeRun();
					navPlateView.toggleBuildState('RUN');
				} else if (label == "Plates & Runs")  {
					theViews.selectedChild = navRunView;				
				} else if (label == "Results") {
					theViews.selectedChild = navDataView;
				} else if (label == "New Billing Account") {
					this.homeView.showWorkAuthForm();				
				} else if (label == "New Project") {
					var projectDetailWindow:ProjectDetailWindow = ProjectDetailWindow(PopUpManager.createPopUp(this.theBody, ProjectDetailWindow, true));
					projectDetailWindow.projectDetailView.experimentDesignEntries.refresh();
					projectDetailWindow.projectDetailView.experimentFactorEntries.refresh();
					projectDetailWindow.projectDetailView.fromWelcomeView = true;
					PopUpManager.centerPopUp(projectDetailWindow);
					
				} else if (label == "Send email to all GNomEx users" ) {
					this.showBroadcastEmailWindow()
				} else if (label == "Manage Microarray Catalog") {
					this.showSlides();
				} else if (label == "Configure Billing Account Fields") {
					showBillingAccountFields();				
				} else if (label == "Manage Protocols" || label == "Protocols") {
					showProtocols();
				} else if (label == "Upload and Download Help") {
					this.showUploadDownloadHints();
				} else if (label == "Configure iScan Chips") {
					showIScanChipWindow();				
				} else if (label == "Configure Products") {
					showProductWindow();				
				}  else if (label == "Bulk Sample Sheet Import") {
					var multiUploadWindow:UploadMultiRequestSampleSheetView = UploadMultiRequestSampleSheetView(PopUpManager.createPopUp(this.theBody, UploadMultiRequestSampleSheetView, false));
					multiUploadWindow.init();
					PopUpManager.centerPopUp(multiUploadWindow);
				} else if (codeStepNext != "") {
					navWorkflowView.codeStepNext = codeStepNext;
					navWorkflowView.codeSequencingPlatform = codeSequencingPlatform;
					if (theViews.selectedChild == navWorkflowView) {
						// If we are already on nav workflow view, we need to make the \
						// call to showView directly.
						navWorkflowView.showView();
					} else {
						// In this case, the init function will call show view.
						theViews.selectedChild = navWorkflowView;						
					}
				} else if (url != "") {
					navigateToURL(new URLRequest(url), '_blank');
				} else if (label == "Experiment Overview"){
					theViews.selectedChild = experimentOverview;					
				} else if (label == "Sequencer Overview"){
					theViews.selectedChild = sequencerOverview;					
				} else if (label == "Overview"){
					theViews.selectedChild = expOverview;
				} else if (GNomExStringUtil.startsWith(label, "Order Products")){
					productOrderView.coreFacilityName = dictionaryManager.getEntryDisplay('hci.gnomex.model.CoreFacility', idCoreFacility);
					productOrderView.idCoreFacility = idCoreFacility;
					productOrderView.init();
					theViews.selectedChild = productOrderView;
				} else if (label == "Product Orders") {
					theViews.selectedChild = navProductOrderView;
				} else if (label == "Configure Core Facilities") {
					showCoreFacilityWindow();				
				} else if(label == "Product Ledger"){
					navProductLedgerView.init();
					theViews.selectedChild = navProductLedgerView;
				} 
			}
			
			
			private function onTopMenuClick(event:MouseEvent):void {
				if (event == null || event.target == null || !event.target.hasOwnProperty("data") || event.target.data == null || !event.target.data.hasOwnProperty("@label") || event.target.data.@label == null) {
					return;
				}
				onTopMenuImpl(event.target.data);
			}
			
			private function onTopMenuSelect(event:MenuEvent):void {				
				onTopMenuImpl(event.item);
			}
			
				
			
			private function onTopMenuImpl(menuItem:Object):void {				
				var label:String = menuItem.@label;
				if (label == "About") {
					PopUpManager.centerPopUp(PopUpManager.createPopUp(this, AboutView, true));
				} else if (label == "Contact Us") {
					PopUpManager.centerPopUp(PopUpManager.createPopUp(this, ContactView, true));					
				} else if (label == "User Guide") {
					navigateToURL(new URLRequest(getProperty(PROPERTY_HELP_URL)), '_blank');
				} else if (label == "Enable Help Edit") {
					ContextHelp.editEnabled = true;
					dispatchEvent(new ContextHelpEditEnableDisableEvent(ContextHelpEditEnableDisableEvent.DATA_REFRESHED));
					menuItem.@label = 'Disable Help Edit';
					menuItem.@icon = "iconInformation";
				} else if (label == "Disable Help Edit") {
					ContextHelp.editEnabled = false;
					dispatchEvent(new ContextHelpEditEnableDisableEvent(ContextHelpEditEnableDisableEvent.DATA_REFRESHED));
					menuItem.@label = 'Enable Help Edit';
					menuItem.@icon = "iconEmptyInformation";
				} else if (label == "Home") {
					theViews.selectedChild = homeView;
				} else if (label == "My Account") {
					if (!isGuest) {
						this.showUserPublicView();						
					}
				} else if (label== "Sign out") {
					this.logout();
				} else if (label == "Manage..."){
					PopUpManager.centerPopUp(PopUpManager.createPopUp(this, ManageQuickLinks, true));
				} else if(menuItem.@url != null && menuItem.@url != ''){
					navigateToURL(new URLRequest(menuItem.@url), '_blank');	
				} 

			}

			
			 
			private function resizeMenuItems():void{
				var menuBarSpacing:int = 12;
				var screenResolutionX:Number = flash.system.Capabilities.screenResolutionX;
				if (screenResolutionX >= 1200) {
					menuBarSpacing = 30;
				} 

				if (this.mainMenu.menuBarItems.length <= 5) {
					menuBarSpacing += 10;
				} else if (this.mainMenu.menuBarItems.length <= 7) {
					menuBarSpacing += 7;
				} else if (this.mainMenu.menuBarItems.length <= 8) {
					menuBarSpacing += 5;
				}
				for each(var item:MenuBarItem in this.mainMenu.menuBarItems){
					item.width += menuBarSpacing;
				}

			}
			
			public function getCurrentFiscalYear():String {
				var now:Date = new Date();
				var yr:Number = now.fullYear;
				var mo:Number = now.month;
				var da:Number = now.day;
				var breakMo:Number = 7;
				if (this.getProperty(this.PROPERTY_FISCAL_YEAR_BREAK_MONTH) != null) {
					breakMo = new Number(this.getProperty(this.PROPERTY_FISCAL_YEAR_BREAK_MONTH));
				}
				var breakDa:Number = 1;
				if (this.getProperty(this.PROPERTY_FISCAL_YEAR_BREAK_DAY) != null) {
					breakDa = new Number(this.getProperty(this.PROPERTY_FISCAL_YEAR_BREAK_DAY));
				}
				if (mo > breakMo || (mo == breakMo && da >= breakDa)) {
					yr = yr + 1;
				}
				return yr.toString();
			}
			
			private function showSlides():void {
				this.theViews.selectedChild = this.slideManagementView;
			}
			
			private function showProtocols():void {
				this.theViews.selectedChild = this.protocolsView;
			}	
			
			private function showCoreFacilityWindow():void {
				if (coreFacilitiesICanManage.length() >= 1) {
					var configWindow:CoreFacilityWindow = CoreFacilityWindow(PopUpManager.createPopUp(this.theBody, CoreFacilityWindow, true));
					PopUpManager.centerPopUp(configWindow);
				} else {
					Alert.show("You must be an admin to access this feature.");
				}
				
			}
			
			private function showIScanChipWindow():void {
				if (managesPlateBasedWorkflow || hasPermission(this.CAN_ADMINISTER_ALL_CORE_FACILITIES)) {
					var configWindow:IScanChipWindow = IScanChipWindow(PopUpManager.createPopUp(this.theBody, IScanChipWindow, true));
					PopUpManager.centerPopUp(configWindow);
				} else {
					Alert.show("This feature is not enabled.");
				}
				
			}
			
			private function showProductWindow():void {
				if (coreFacilitiesICanManage.length() >= 1) {
					var configWindow:ProductWindow = ProductWindow(PopUpManager.createPopUp(this.theBody, ProductWindow, true));
					PopUpManager.centerPopUp(configWindow);
				} else {
					Alert.show("You must be an admin to access this feature.");
				}
				
			}
			
			private function showBroadcastEmailWindow():void {
				var broadcastEmailWindow:BroadcastEmailWindow = BroadcastEmailWindow(PopUpManager.createPopUp(this.theBody, BroadcastEmailWindow, true));
				PopUpManager.centerPopUp(broadcastEmailWindow);
			}			
			
			private function showBillingAccountFields():void {
				if (useConfigurableBillingAccounts) {
					var w:BillingAccountFieldsConfigurationWindow = BillingAccountFieldsConfigurationWindow(PopUpManager.createPopUp(this.theBody, BillingAccountFieldsConfigurationWindow, true));
					PopUpManager.centerPopUp(w);
				} else {
					Alert.show("This feature is not enabled for this site.");
				}
			}

			public function escapeRegexChars(s:String):String
			{
				var newString:String = 
					s.replace(
						new RegExp("([{}\(\)\^$&.\*\?\/\+\|\[\\\\]|\]|\-)","g"),
						"\\$1");
				return newString;
			}
			
			public function setupSampleSheetUpload():void {
				if (uploadSampleSheetURL == null) {
					uploadSampleSheetURL = null;
					getSampleSheetUploadURL.send();
				}
			}
			
			private function onGetSampleSheetUploadURL(event:ResultEvent):void {
				if (getSampleSheetUploadURL.lastResult.name() == "UploadSampleSheetURL") {
					uploadSampleSheetURL = getSampleSheetUploadURL.lastResult.@url;
				}
			}
			
			private function refreshNotificationHub():void{
				homeView.refreshDashboard();
			}
			
			public function getCoreFacilityName(idCoreFacility:String):String {
				var coreFacility:Object = dictionaryManager.getEntry('hci.gnomex.model.CoreFacility', idCoreFacility);
				return coreFacility.@facilityName.toString();
			}
			
			public function getQCRequestCategoryForCore(idCoreFacility:String):Object {
				var retObj:Object = null;
				for each (var rc:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.RequestCategory")) {
					if (rc.@idCoreFacility == idCoreFacility && rc.@type == 'QC') {
						retObj = rc;
						break;
					}
				}
				return retObj;
			}
			
			public function getQCAppCodesForCore(idCoreFacility:String):ArrayCollection {
				var rc:Object = getQCRequestCategoryForCore(idCoreFacility);
				var appCodes:ArrayCollection = new ArrayCollection();
				for each (var apprc:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.RequestCategoryApplication")) {
					if (apprc.@codeRequestCategory == rc.@codeRequestCategory) {
						appCodes.addItem(apprc.@codeApplication);
					}
				}
				return appCodes;
			}
			
			public function applicationHasChipTypes(codeApplication:String):Boolean {
				for each (var app:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.Application")) {
					if (app.@codeApplication.toString() == codeApplication) {
						if (app.@hasChipTypes.toString() == 'Y') {
							return true;
						} else {
							return false;
						}
					}
				}
				return false;	
			}
			
			public function getCodeApplicationForBioanalyzerChipType(codeBioanalyzerChipType:String):String {
				var code:String = "";
				for each (var ct:Object in dictionaryManager.getEntriesExcludeBlank("hci.gnomex.model.BioanalyzerChipType")) {
					if (ct.@codeBioanalyzerChipType.toString() == codeBioanalyzerChipType) {
						code = ct.@codeApplication;
						break;
					}
				}
				return code;	
			}
			
			public function showNewAnalysisWindow(callingView:Object = null, idLab:Object = null, idAnalysisGroup:Object = null, idOrganism:Object = null):void {
				this.analysisAddWindow = AnalysisAddView(PopUpManager.createPopUp(this, AnalysisAddView, false));
				PopUpManager.centerPopUp(this.analysisAddWindow);
				
				this.analysisAddWindow.parentView = callingView;
				this.analysisAddWindow.initializeData(idLab, idAnalysisGroup, idOrganism);
			}
		]]>
	</mx:Script>
	
	<mx:Parallel id="hide">
		<mx:Iris duration="500"/>
		<mx:Fade duration="500"/>
	</mx:Parallel>
	
	<mx:Iris id="show" duration="500" scaleXFrom="0" scaleXTo="1" scaleYFrom="0" scaleYTo="1"/>
	
	<mx:XMLListCollection id="experimentDesignList" source="{getExperimentDesignList.lastResult.ExperimentDesign}" sort="{experimentDesignSorter}"/>
	<mx:XMLListCollection id="experimentFactorList" source="{getExperimentFactorList.lastResult.ExperimentFactor}" sort="{experimentFactorSorter}"/>
	<mx:Sort id="experimentDesignSorter" compareFunction="sortExperimentDesigns" unique="true"/>
	<mx:Sort id="experimentFactorSorter" compareFunction="sortExperimentFactors" unique="true"/> 
	
	
	<mx:XMLList id="adminMenu"> 
		
		<menuitem label="Orders" icon="iconOrders" />

		<menuitem label="Experiments..."  icon="iconFlask" >
			<menuitem  label="Browse Experiments"  icon="iconFlask" />
			<menuitem  label="New Experiment Order"  icon="iconSubmitExperiment" context="newInternalExperiment" />
			<menuitem  label="Add Illumina HiSeq/MiSeq Services"  icon="iconEditExperiment" />
			<menuitem label="New Project" icon="iconFolderAdd"/>
			<menuitem label="Upload Experiment data generated at third party facility" icon="iconAddExternalExperiment" context="newExternalExperiment"/>
			<menuitem label="New Billing Account" icon="iconBilling"   />
			<menuitem label="Orders" icon="iconOrders"   />
			<menuitem label="Bulk Sample Sheet Import" icon="iconOrders"   />
		</menuitem>
		
		<menuitem label="Products..."  icon="iconCategory" >
			<menuitem label="Order Products" icon="iconOrders" context="newProductOrder"  />
			<menuitem label="Product Orders" icon="iconOrders"   />
			<menuitem label="Product Ledger" icon="iconOrders"   />
			<menuitem label="Configure iScan Chips" icon="iconConfig" /> 
			<menuitem label="Configure Products" icon="iconConfig" />
		</menuitem>
		
		<menuitem label="Analysis" icon="iconAnalysis"  context="bioinformatics" />
		
		<menuitem label="Data Tracks" icon="iconDataTrack"  context="bioinformatics"  />
		
		<menuitem label="Topics" icon="iconTopic" context="bioinformatics"   />
		
		<menuitem label="Workflow..." icon="iconWorkflow"  >
			<menuitem label="QC" icon="iconQC" codeStepNext="QC" context="QC"  />
			<menuitem type="separator" context="HISEQ" label="hiseqSeparator"/>
			<menuitem label="HiSeq - Lib Prep" icon="iconLibPrep"   codeStepNext="HSEQPREP" context="HISEQ" />
			<menuitem label="HiSeq - Flow Cell Assembly" icon="iconHiSeq"  codeStepNext="HSEQASSEM" context="HISEQ"  />
			<menuitem label="HiSeq - Finalize Flow Cell" icon="iconHiSeq" codeStepNext="HSEQFINFC" context="HISEQ" />
			<menuitem label="HiSeq - Data Pipeline" icon="iconPipeline"  codeStepNext="HSEQPIPE" context="HISEQ"  />
			<menuitem label="HiSeq - Flow Cells" icon="iconFlowCell" codeStepNext="FLOWCELL" codeSequencingPlatform="HISEQ" context="HISEQ" />
			<menuitem type="separator" context="MISEQ" label="miseqSeparator"/>
			<menuitem label="Illumina MiSeq..." icon="iconMiSeq" context="MISEQ"  >
				<menuitem label="Lib Prep" icon="iconLibPrep"  codeStepNext="MISEQPREP"  />
				<menuitem label="Flow Cell Assembly" icon="iconMiSeq"  codeStepNext="MISEQASSEM"  />
				<menuitem label="Finalize Flow Cell" icon="iconMiSeq" codeStepNext="MISEQFINFC" />
				<menuitem label="Pipeline" icon="iconPipeline"  codeStepNext="MISEQPIPE" />
				<menuitem label="Flow Cells" icon="iconFlowCell" codeStepNext="FLOWCELL" codeSequencingPlatform="MISEQ" />
			</menuitem>
			<menuitem label="Microarray..." icon="iconMicroarray" context="microarray"  >
				<menuitem label="Labeling" icon="iconLabeling" codeStepNext="LABEL" />
				<menuitem label="Hyb" icon="iconHyb"  codeStepNext="HYB" />
				<menuitem label="Extraction" icon="iconExtraction"  codeStepNext="EXT" />
			</menuitem>
			<menuitem type="separator" label="workflowAllSeparator"/>
			<menuitem label="Workflow (all)" icon="iconWorkflow" codeStepNext="ALL" />
			<menuitem type="separator" label="plateRunSeparator"/>
			<menuitem label="Fill Plate" icon="iconPlate"   />
			<menuitem label="Build Run" icon="iconInstrumentRun"   />
			<menuitem label="Plates &amp; Runs" icon="iconPlatesAndRuns"   />
			<menuitem label="Results" icon="iconResults"   />
		</menuitem>

		<menuitem label="Workflow" icon="iconWorkflow">
			<menuitem label="QC" icon="iconQC" codeStepNext="QC" context="QC"  />
			<menuitem type="separator" context="HISEQ" label="hiseqSeparator"/>
			<menuitem label="HiSeq - Lib Prep" icon="iconLibPrep"   codeStepNext="HSEQPREP" context="HISEQ" />
			<menuitem label="HiSeq - Flow Cell Assembly" icon="iconHiSeq"  codeStepNext="HSEQASSEM" context="HISEQ"  />
			<menuitem label="HiSeq - Finalize Flow Cell" icon="iconHiSeq" codeStepNext="HSEQFINFC" context="HISEQ" />
			<menuitem label="HiSeq - Data Pipeline" icon="iconPipeline"  codeStepNext="HSEQPIPE"  context="HISEQ" />
			<menuitem label="HiSeq - Flow Cells" icon="iconFlowCell" codeStepNext="FLOWCELL" codeSequencingPlatform="HISEQ" context="HISEQ" />
			<menuitem type="separator" context="MISEQ" label="miseqSeparator"/>
			<menuitem label="Illumina MiSeq..." icon="iconMiSeq" context="MISEQ"  >
				<menuitem label="Lib Prep" icon="iconLibPrep"  codeStepNext="MISEQPREP"  />
				<menuitem label="Flow Cell Assembly" icon="iconMiSeq"  codeStepNext="MISEQASSEM"  />
				<menuitem label="Finalize Flow Cell" icon="iconMiSeq" codeStepNext="MISEQFINFC" />
				<menuitem label="Pipeline" icon="iconPipeline"  codeStepNext="MISEQPIPE" />
				<menuitem label="Flow Cells" icon="iconFlowCell" codeStepNext="FLOWCELL" codeSequencingPlatform="MISEQ" />
			</menuitem>
			<menuitem label="Microarray..." icon="iconMicroarray" context="microarray"  >
				<menuitem label="Labeling" icon="iconLabeling" codeStepNext="LABEL" />
				<menuitem label="Hyb" icon="iconHyb"  codeStepNext="HYB" />
				<menuitem label="Extraction" icon="iconExtraction"  codeStepNext="EXT" />
			</menuitem>
			<menuitem type="separator" label="workflowAllSeparator"/>
			<menuitem label="Workflow (all)" icon="iconWorkflow" codeStepNext="ALL" />
			
		</menuitem>
			

		<menuitem label="Billing" icon="iconBilling"   />
		
		<menuitem label="Users &amp; Groups" icon="iconUsers"   >
		</menuitem>
		
		<menuitem label="Configure..." icon="iconConfig"   >
			<menuitem  label="Add/Edit Dictionaries"  icon="iconBook" />
			<menuitem label="Configure Core Facilities" icon="iconConfig" /> 
			<menuitem label="Configure Annotations" icon="iconConfig" />
			<menuitem label="Configure Experiment Platform" icon="iconConfig" />
			<menuitem label="Configure Organisms and Genome Builds" icon="iconConfig" />
			<menuitem label="Manage Microarray Catalog" icon="iconSlide" />
			<menuitem label="Manage Protocols" icon="iconProtocol" />
			<menuitem label="Configure Billing Account Fields" icon="iconConfigureBillingAccounts"  />
		</menuitem>
		
		<menuitem label="Reports..."  icon="iconPage" >
			<menuitem label="Track Usage"  icon="iconUsage"/>
			<menuitem label="Annotation Report" icon="iconPage" />
			<menuitem label="Annotation Progress Report" icon="iconPage" />
			<menuitem label="Project/Experiment Report" icon="iconFlask" />
			<menuitem label="Send email to all GNomEx users" icon="iconEmail"/>
			
		</menuitem>
		
	</mx:XMLList>
	
	<mx:XMLList id="billingAdminMenu">
		<menuitem label="Experiments"  icon="iconFlask" >
		</menuitem>
		
		<menuitem label="Products..."  icon="iconCategory" >
			<menuitem label="Product Orders" icon="iconOrders"   />
			<menuitem label="Product Ledger" icon="iconOrders"   />
		</menuitem>
		
		<menuitem label="Billing" icon="iconBilling"   />
		
		<menuitem label="Users &amp; Groups" icon="iconUsers"   />
		
		<menuitem label="New Billing Account" icon="iconBilling"   />
		
		<menuitem label="Reports..."  icon="iconPage" >
			<menuitem label="Track Usage"  icon="iconUsage"/>
			<menuitem label="Annotation Report" icon="iconPage" />
			<menuitem label="Annotation Progress Report" icon="iconPage" />
			<menuitem label="Project/Experiment Report" icon="iconFlask" />
		</menuitem>
		
	</mx:XMLList>
	
	<mx:XMLList id="billingAdminSubmitterMenu">
		<menuitem label="Experiments..."  icon="iconFlask" >
			<menuitem  label="Browse Experiments"  icon="iconFlask" />
			<menuitem  label="New Experiment Order"  icon="iconSubmitExperiment" context="newInternalExperiment"/>
		</menuitem>
		
		<menuitem label="Products..."  icon="iconCategory" >
			<menuitem label="Order Products" icon="iconOrders" context="newProductOrder"  />
			<menuitem label="Product Orders" icon="iconOrders"   />
			<menuitem label="Product Ledger" icon="iconOrders"   />
		</menuitem>
		
		<menuitem label="Billing" icon="iconBilling"   />
		
		<menuitem label="Users &amp; Groups" icon="iconUsers"   />
		
		<menuitem label="New Billing Account" icon="iconBilling"   />
		
		<menuitem label="Reports..."  icon="iconPage" >
			<menuitem label="Track Usage"  icon="iconUsage"/>
			<menuitem label="Annotation Report" icon="iconPage" />
			<menuitem label="Annotation Progress Report" icon="iconPage" />
			<menuitem label="Project/Experiment Report" icon="iconFlask" />
		</menuitem>
		
	</mx:XMLList>
	
	<mx:XMLList id="adminESMenu">
		<menuitem label="Experiments..."  icon="iconFlask" >
			<menuitem  label="Browse Experiments"  icon="iconFlask" />
			<menuitem label="Create New Experiment and Upload Files" icon="iconAddExternalExperiment" context="newExternalExperiment"/>
			<menuitem label="New Project" icon="iconFolderAdd"/>
			<menuitem label="Bulk Sample Sheet Import" icon="iconOrders"   />
		</menuitem>
		
		<menuitem label="Analysis" icon="iconAnalysis" context="bioinformatics"   />
		
		<menuitem label="Data Tracks" icon="iconDataTrack" context="bioinformatics"   />
		
		<menuitem label="Topics" icon="iconTopic"  context="bioinformatics"  />
		
		<menuitem label="Users &amp; Groups" icon="iconUsers"   />
		
		
		<menuitem label="Configure..." icon="iconConfig"   >
			<menuitem  label="Add/Edit Dictionaries"  icon="iconBook" />
			<menuitem label="Configure Core Facilities" icon="iconConfig" /> 
			<menuitem label="Configure Annotations" icon="iconConfig" />
			<menuitem label="Configure Experiment Platform" icon="iconConfig" />
			<menuitem label="Configure Organisms and Genome Builds" icon="iconConfig" />
			<menuitem label="Manage Microarray Catalog" icon="iconSlide" />
			<menuitem label="Manage Protocols" icon="iconProtocol" />
		</menuitem>
		
		<menuitem label="Reports..."  icon="iconPage" >
			<menuitem label="Track Usage"  icon="iconUsage"/>
			<menuitem label="Annotation Report" icon="iconPage" />
			<menuitem label="Annotation Progress Report" icon="iconPage" />
			<menuitem label="Project/Experiment Report" icon="iconFlask" />
			<menuitem label="Send email to all GNomEx users" icon="iconEmail"/>
		</menuitem>
		
	</mx:XMLList>
	
	<mx:XMLList id="managerESMenu">
		
		<menuitem label="Experiments..."  icon="iconFlask" >
			<menuitem  label="Browse Experiments"  icon="iconFlask" />
			<menuitem label="Create New Experiment and Upload Files" icon="iconAddExternalExperiment" context="newExternalExperiment"/>
			<menuitem label="New Project" icon="iconFolderAdd"/>
		</menuitem>
		
		<menuitem label="Analysis" icon="iconAnalysis"  context="bioinformatics"  />
		
		<menuitem label="Data Tracks" icon="iconDataTrack" context="bioinformatics"   />
		
		<menuitem label="Topics" icon="iconTopic"  context="bioinformatics"  />
		
		<menuitem label="Users &amp; Groups" icon="iconUsers"   />
		
		<menuitem label="Configure..." icon="iconConfig"   >
			<menuitem label="Configure Annotations" icon="iconConfig" />
			<menuitem label="Configure Organisms and Genome Builds" icon="iconConfig" />
			<menuitem label="Manage Microarray Catalog" icon="iconSlide" />
			<menuitem label="Manage Protocols" icon="iconProtocol" />
		</menuitem>
		
		<menuitem label="Reports..."  icon="iconPage" >
			<menuitem label="Track Usage"  icon="iconUsage"/>
			<menuitem label="Annotation Report" icon="iconPage" />
			<menuitem label="Annotation Progress Report" icon="iconPage" />
			<menuitem label="Project/Experiment Report" icon="iconFlask" />
		</menuitem>
		
	</mx:XMLList>
	
	<mx:XMLList id="userESMenu">
		<menuitem label="Experiments..."  icon="iconFlask" >
			<menuitem  label="Browse Experiments"  icon="iconFlask" />
			<menuitem label="Create New Experiment and Upload Files" icon="iconAddExternalExperiment" context="newExternalExperiment"/>
			<menuitem label="New Project" icon="iconFolderAdd"/>
		</menuitem>
		
		<menuitem label="Analysis" icon="iconAnalysis"   />
		
		<menuitem label="Data Tracks" icon="iconDataTrack"   />
		
		<menuitem label="Topics" icon="iconTopic"   />
		
		<menuitem label="Configure..." icon="iconConfig"   >
			<menuitem label="Configure Annotations" icon="iconConfig" />
			<menuitem label="Configure Organisms and Genome Builds" icon="iconConfig" />
			<menuitem label="Protocols" icon="iconProtocol" />
		</menuitem>
		
		<menuitem label="Reports..."  icon="iconPage" >
			<menuitem label="Track Usage"  icon="iconUsage"/>
			<menuitem label="Annotation Report" icon="iconPage" />
			<menuitem label="Annotation Progress Report" icon="iconPage" />
			<menuitem label="Project/Experiment Report" icon="iconFlask" />
		</menuitem>
		
	</mx:XMLList>
	
	<mx:XMLList id="adminPlateBasedMenu">
		
		<menuitem label="Orders" icon="iconOrders"   />
		<menuitem label="Fill Plate" icon="iconPlate"   />
		<menuitem label="Build Run" icon="iconInstrumentRun"   />
		<menuitem label="Plates &amp; Runs" icon="iconPlatesAndRuns"   />
		<menuitem label="Results" icon="iconResults"   />
		
		<menuitem label="Experiments..."  icon="iconFlask" >
			<menuitem  label="Browse Experiments"  icon="iconFlask" />
			<menuitem  label="New Experiment Order"  icon="iconSubmitExperiment" context="newInternalExperiment"/>
			<menuitem label="New Project" icon="iconFolderAdd"/>
			<menuitem label="Upload Experiment data generated at third party facility" icon="iconAddExternalExperiment" context="newExternalExperiment"/>
			<menuitem label="New Billing Account" icon="iconBilling"   />
		</menuitem>
		
		<menuitem label="Products..."  icon="iconCategory" >
			<menuitem label="Order Products" icon="iconOrders" context="newProductOrder"  />
			<menuitem label="Product Orders" icon="iconOrders"   />
			<menuitem label="Product Ledger" icon="iconOrders"   />
			<menuitem label="Configure iScan Chips" icon="iconConfig" /> 
			<menuitem label="Configure Products" icon="iconConfig" />
		</menuitem>
		 
		<menuitem label="Workflow..." icon="iconWorkflow"  >
			<menuitem label="QC" icon="iconQC" codeStepNext="QC" context="QC"   />
			<menuitem type="separator" context="HISEQ" label="hiseqSeparator"/>
			<menuitem label="HiSeq - Lib Prep" icon="iconLibPrep"   codeStepNext="HSEQPREP" context="HISEQ" />
			<menuitem label="HiSeq - Flow Cell Assembly" icon="iconHiSeq"  codeStepNext="HSEQASSEM" context="HISEQ"  />
			<menuitem label="HiSeq - Finalize Flow Cell" icon="iconHiSeq" codeStepNext="HSEQFINFC" context="HISEQ" />
			<menuitem label="HiSeq - Data Pipeline" icon="iconPipeline"  codeStepNext="HSEQPIPE" context="HISEQ"  />
			<menuitem label="HiSeq - Flow Cells" icon="iconFlowCell" codeStepNext="FLOWCELL" codeSequencingPlatform="HISEQ" context="HISEQ" />
			<menuitem type="separator" context="MISEQ" label="miseqSeparator"/>
			<menuitem label="Illumina MiSeq..." icon="iconMiSeq" context="MISEQ"  >
				<menuitem label="Lib Prep" icon="iconLibPrep"  codeStepNext="MISEQPREP"  />
				<menuitem label="Flow Cell Assembly" icon="iconMiSeq"  codeStepNext="MISEQASSEM"  />
				<menuitem label="Finalize Flow Cell" icon="iconMiSeq" codeStepNext="MISEQFINFC" />
				<menuitem label="Pipeline" icon="iconPipeline"  codeStepNext="MISEQPIPE" />
				<menuitem label="Flow Cells" icon="iconFlowCell" codeStepNext="FLOWCELL" codeSequencingPlatform="MISEQ" />
			</menuitem>
			<menuitem label="Microarray..." icon="iconMicroarray" context="microarray"   >
				<menuitem label="Labeling" icon="iconLabeling" codeStepNext="LABEL" />
				<menuitem label="Hyb" icon="iconHyb"  codeStepNext="HYB" />
				<menuitem label="Extraction" icon="iconExtraction"  codeStepNext="EXT" />
			</menuitem>
			<menuitem type="separator" label="workflowAllSeparator"/>
			<menuitem label="Workflow (all)" icon="iconWorkflow" codeStepNext="ALL" />
			<menuitem type="separator" label="plateRunSeparator"/>
			<menuitem label="Fill Plate" icon="iconPlate"   />
			<menuitem label="Build Run" icon="iconInstrumentRun"   />
			<menuitem label="Plates &amp; Runs" icon="iconPlatesAndRuns"   />
			<menuitem label="Results" icon="iconResults"   />
		</menuitem>
		
		
		<menuitem label="Admin..." icon="iconUsers"   >
			<menuitem label="Billing" icon="iconBilling"   />
			<menuitem label="Users &amp; Groups" icon="iconUsers"   />
			<menuitem label="Send email to all GNomEx users" icon="iconEmail"/>
			
		</menuitem>
		
		<menuitem label="Configure..." icon="iconConfig"   >
			<menuitem  label="Add/Edit Dictionaries"  icon="iconBook" />
			<menuitem label="Configure Core Facilities" icon="iconConfig" /> 
			<menuitem label="Configure Experiment Platform" icon="iconConfig" />
			<menuitem label="Configure Billing Account Fields" icon="iconConfigureBillingAccounts"  />
			<menuitem label="Protocols" icon="iconProtocol" />
			<menuitem label="Configure iScan Chips" icon="iconConfig" />
			<menuitem label="Configure Products" icon="iconConfig" />
		</menuitem>
		
		<menuitem label="Reports..."  icon="iconPage" >
			<menuitem label="Track Usage"  icon="iconUsage"/>
			<menuitem label="Annotation Report" icon="iconPage" />
			<menuitem label="Annotation Progress Report" icon="iconPage" />
			<menuitem label="Project/Experiment Report" icon="iconFlask" />
		</menuitem>
		
	</mx:XMLList>
	
	<mx:XMLList id="userMenu">
		<menuitem label="New Experiment Order" icon="iconSubmitExperiment" context="newExperimentTopLevel" />
		
		<menuitem label="Experiments..."  icon="iconFlask" >
			<menuitem  label="Browse Experiments"  icon="iconFlask" />
			<menuitem  label="New Experiment Order"  icon="iconSubmitExperiment" context="newInternalExperiment"/>
			<menuitem  label="Add Illumina HiSeq/MiSeq Services"  icon="iconEditExperiment" />
			<menuitem label="New Project" icon="iconFolderAdd"/>
			<menuitem label="Upload Experiment data generated at third party facility" icon="iconAddExternalExperiment" context="newExternalExperiment"/>
			<menuitem label="New Billing Account" icon="iconBilling"   />
		</menuitem>
		
		
		<menuitem label="Products..."  icon="iconCategory" >
			<menuitem label="Order Products" icon="iconOrders" context="newProductOrder"  />
			<menuitem label="Product Orders" icon="iconOrders"   />
			<menuitem label="Product Ledger" icon="iconOrders"   />
		</menuitem>
		
		
		<menuitem label="Analysis" icon="iconAnalysis"  context="bioinformatics"  />
		
		<menuitem label="Data Tracks" icon="iconDataTrack" context="bioinformatics"   />
		
		<menuitem label="Topics" icon="iconTopic"  context="bioinformatics"  />
		
		
		<menuitem label="Configure..." icon="iconConfig"   >
			<menuitem label="Configure Annotations" icon="iconConfig" />
			<menuitem label="Configure Organisms and Genome Builds" icon="iconConfig" />
			<menuitem label="Protocols" icon="iconProtocol" />
		</menuitem>
		
		<menuitem label="Reports..."  icon="iconPage" >
			<menuitem label="Track Usage"  icon="iconUsage" context="usage"/>
			<menuitem label="Annotation Report" icon="iconPage" />
			<menuitem label="Annotation Progress Report" icon="iconPage" />
			<menuitem label="Project/Experiment Report" icon="iconFlask" />			
		</menuitem>

	</mx:XMLList>
	
	
	<mx:XMLList id="managerMenu">
		<menuitem label="Experiments..."  icon="iconFlask" >
			<menuitem  label="Browse Experiments"  icon="iconFlask" />
			<menuitem  label="New Experiment Order"  icon="iconSubmitExperiment" context="newInternalExperiment"/>
			<menuitem  label="Add Illumina HiSeq/MiSeq Services"  icon="iconEditExperiment" />
			<menuitem label="New Project" icon="iconFolderAdd"/>
			<menuitem label="Upload Experiment data generated at third party facility" icon="iconAddExternalExperiment" context="newExternalExperiment"/>
			<menuitem label="New Billing Account" icon="iconBilling"   />
		</menuitem>
		
		<menuitem label="Products..."  icon="iconCategory" >
			<menuitem label="Order Products" icon="iconOrders" context="newProductOrder"  />
			<menuitem label="Product Orders" icon="iconOrders"   />
			<menuitem label="Product Ledger" icon="iconOrders"   />
		</menuitem>
		
		<menuitem label="Analysis" icon="iconAnalysis"  context="bioinformatics"  />
		
		<menuitem label="Data Tracks" icon="iconDataTrack"  context="bioinformatics"  />
		
		<menuitem label="Topics" icon="iconTopic"  context="bioinformatics"  />
		
		<menuitem label="Users &amp; Groups" icon="iconUsers"   />
		
		<menuitem label="Configure..." icon="iconConfig"   >
			<menuitem label="Configure Annotations" icon="iconConfig" />
			<menuitem label="Configure Organisms and Genome Builds" icon="iconConfig" />
			<menuitem label="Protocols" icon="iconProtocol" />
		</menuitem>
		
		<menuitem label="Reports..."  icon="iconPage" >
			<menuitem label="Track Usage"  icon="iconUsage"/>
			<menuitem label="Annotation Report" icon="iconPage" />
			<menuitem label="Annotation Progress Report" icon="iconPage" />
			<menuitem label="Project/Experiment Report" icon="iconFlask" />
		</menuitem>
		
	</mx:XMLList>
	
	<mx:XMLList id="userNonSubmitterMenu">
		<menuitem label="Experiments"  icon="iconFlask" >
		</menuitem>
		
		<menuitem label="Analysis" icon="iconAnalysis"   />
		
		<menuitem label="Data Tracks" icon="iconDataTrack"   />
		
		<menuitem label="Topics" icon="iconTopic"   />
		
		
	</mx:XMLList>
	
	<mx:XMLList id="guestMenu">
		<menuitem label="Experiments"  icon="iconFlask" >
		</menuitem>
		
		<menuitem label="New Billing Account" icon="iconBilling" context="guest"  />
		
		<menuitem label="Analysis" icon="iconAnalysis"   />
		
		<menuitem label="Data Tracks" icon="iconDataTrack"   />
		
		<menuitem label="Topics" icon="iconTopic"   />
		
		<menuitem label="Protocols" icon="iconProtocol" />
		
		
	</mx:XMLList>
	
	
	<mx:XMLList id="topMenu">
		<menuitem label="Links..." context="quickLinks" />
		<menuitem label="Help..."  >
			<menuitem label="Enable Help Edit" icon="iconEmptyInformation" context="helpEdit"/>
			<menuitem label="User Guide"  />
			<menuitem label="About" />
			<menuitem label="Contact Us"   />
		</menuitem>
		<menuitem label="Account..."  >
			<menuitem label="My Account"  />
			<menuitem label="Sign out"  />
		</menuitem>
		
	</mx:XMLList>
	
	<mx:VBox id="theBody"
			 width="100%" height="100%" 
			 verticalGap="8"    visible="true" 
			 backgroundImage="@Embed(source='assets/gnomex_background.png')" backgroundSize="100%" 
			 paddingTop="0" paddingLeft="0" 
			 paddingRight="0" paddingBottom="0">		   
		 
		<mx:VBox width="100%"  id="navBar" 
				 verticalGap="0"   backgroundAlpha="1"
				 paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0"   
				  visible="false" borderStyle="solid"  borderThickness="0" dropShadowEnabled="true" dropShadowColor="#A5A5A8" 
				  backgroundImage="@Embed(source='assets/navbar_gradient.png')" backgroundSize="100%">
			
			<mx:VBox width="100%" verticalGap="0"  
					 paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" visible="false" id="vbox1">
				
				<mx:VBox width="100%" verticalGap="0" paddingTop="0">
					<mx:HBox width="100%"  
							 horizontalAlign="left" verticalAlign="top" horizontalGap="0"  
							 paddingBottom="8" id="hbox1" 
							 paddingTop="0" 
							 paddingLeft="8" paddingRight="0" borderStyle="none">
						<mx:HBox  paddingTop="12">
							<mx:Image source="{siteLogo}"  useHandCursor="true" buttonMode="true" click="{theViews.selectedChild = homeView; refreshNotificationHub();}"/> 
						</mx:HBox>
						<mx:Spacer width="100%"/>
						<mx:HBox  horizontalGap="2" paddingTop="8" verticalAlign="middle" defaultButton="{lookupButton}" id="hbox4" height="36" paddingLeft="10">
							<mx:TextInput id="requestNumber"
										  text="Lookup by #" fontStyle="italic" color="0x666666"
										  click="{onLookupClick()}"
										  focusOut="focusOutHandler(event)"
										  toolTip="Enter experiment, analysis, data track, or topic #. Example: 6145R, A210, DT45, T21" width="80"   visible="false" borderStyle="solid" borderColor="#1691E7" fontSize="12" borderThickness="1" backgroundColor="#EFEEED"/>
							<mx:Button id="lookupButton" 
									   width="30"
									   click="lookupExperiment()" visible="false" icon="@Embed('assets/arrow_right.png')"/>
						</mx:HBox>				  
						<mx:HBox height="36" paddingTop="8" horizontalAlign="right" horizontalGap="2" verticalAlign="middle" defaultButton="{searchButton}" paddingLeft="8">
					
							<mx:TextInput id="searchText"
										  text="Search"   fontStyle="italic" color="0x666666"
										  click="{onSearchClick()}"
										  focusOut="focusOutHandler(event)"	width="138" visible="false"  borderStyle="solid" borderColor="#1691E7" fontSize="12" borderThickness="1" backgroundColor="#EFEEED"/>
							<mx:Button id="searchButton" height="18" click="callLater(search)"   visible="false" icon="@Embed('assets/magnifier.png')" toolTip="Search" width="30" textDecoration="underline"/> 					
						</mx:HBox>
						
						<mx:Spacer width="100%"/>
						<mx:HBox  horizontalGap="4" paddingTop="0" verticalAlign="top">
							<mx:LinkButton label="Get Help"   click="{takeScreenshotForReportIssue(this.theBody)}" textDecoration="underline" color="0xFF0000"/>
							<mx:MenuBar  id="topMenuBar"  styleName="topMenuBar"   dataProvider="{topMenu}" 
									  itemClick="{onTopMenuSelect(event)}"  
									  click="{onTopMenuClick(event)}"
									  labelField="@label" iconField="@icon" alpha="1.0">
							</mx:MenuBar> 
						</mx:HBox>						
					</mx:HBox>					
					<mx:MenuBar height="37"    width="100%"  id="mainMenu"   
								click="onMenuClick(event)"
								itemClick="{onMenuSelect(event)}"
								labelField="@label" iconField="@icon" alpha="1.0">
						
					</mx:MenuBar> 		
				</mx:VBox>			
			</mx:VBox>
		</mx:VBox>  
		
		<mx:VBox id="mainArea" width="100%" 
				 height="100%" paddingTop="0"  paddingBottom="4" paddingLeft="4" 
				 paddingRight="4" horizontalCenter="0" verticalGap="0" backgroundAlpha="1" visible="false" borderStyle="none">
			<mx:ViewStack id="stateStack" creationPolicy="auto" paddingTop="0" paddingBottom="0" width="100%" height="100%">
				<mx:ViewStack id="initViews" visible="true" width="100%" height="100%"   creationPolicy="auto" paddingTop="0" paddingBottom="0" >					
					<util:LaunchView id="homeView1"   >
					</util:LaunchView> 
				</mx:ViewStack>
				
				<mx:ViewStack id="theViews" visible="true" width="100%" height="100%"  show="this.checkSecurityAndLaunchStartWindow()"  creationPolicy="auto" paddingTop="0" paddingBottom="0" creationComplete="this.checkSecurityAndLaunchStartWindow()" >
					
					<util:WelcomeView id="homeView" label="Home" icon="@Embed('assets/house.png')" >
					</util:WelcomeView>
					
					<dashboard:ExperimentOverview id="experimentOverview" label="Experiment Overview" />
					
					<dashboard:ExpOverview id="expOverview" label="Overview" />
					
					<dashboard:SequencerOverview id="sequencerOverview" label="Sequencer Overview" />

					
					<experiment:ExperimentEditView id="submitRequestView" label="{!isInternalExperimentSubmission ? 'Register Experiment' : 'New Experiment Order'}" 
												   icon="{isInternalExperimentSubmission ? iconSubmitExperiment : iconAddExternalExperiment}"  width="100%" height="100%">
					</experiment:ExperimentEditView>
					
					<experiment:ExperimentEditView id="amendRequestView" label="Add Services to Order" 
												   icon="@Embed('assets/flask_edit.png')"  width="100%" height="100%">
					</experiment:ExperimentEditView>
					
					<experiment:NavExperimentView id = "navExperimentView" label="Experiments" width="100%" height="100%" 
												  icon="@Embed('assets/flask.png')">
					</experiment:NavExperimentView>
					
					<analysis:NavAnalysisView id="navAnalysisView" width="100%" height="100%" 
											  icon="@Embed('assets/map.png')">
					</analysis:NavAnalysisView>
					
					<datatrack:NavDataTrackView id="navDataTrackView"  label="Data Tracks" width="100%" height="100%" icon="@Embed('assets/datatrack.png')">
					</datatrack:NavDataTrackView>
					
					<topics:NavTopicsView id="navTopicsView"  label="Topics" width="100%" height="100%" icon="@Embed('assets/topic.png')">
					</topics:NavTopicsView>
					
					<workflow:NavWorkflowView id="navWorkflowView" width="100%" height="100%"  icon="@Embed('assets/building_go.png')">
					</workflow:NavWorkflowView> 
					
					<billing:NavBillingView id="navBillingView" label="Billing" width="100%" height="100%" icon="@Embed('assets/money.png')">
					</billing:NavBillingView> 
					
					<protocol:ProtocolsView id="protocolsView" label="Protocols" icon="@Embed('assets/bricks.png')">
					</protocol:ProtocolsView>
					
					<slide:SlideManagementView label="Slides" id="slideManagementView" icon="@Embed('assets/images.png')">
					</slide:SlideManagementView>
					
					<user:NavUsersView id="navUsersView" icon="@Embed('assets/group.png')"  label="Users Groups" width="100%" height="100%" backgroundAlpha="1.0">	
					</user:NavUsersView>
					
					<admin:NavUsageView id="navUsageView" icon="@Embed('assets/chart_bar.png')"  label="Usage" width="100%" height="100%" backgroundAlpha="1.0">	
					</admin:NavUsageView>
					
					<plate:NavPlateView id="navPlateView"   width="100%" height="100%" backgroundAlpha="1.0">	
					</plate:NavPlateView>
					
					<data:NavDataView id="navDataView"    width="100%" height="100%" backgroundAlpha="1.0">	
					</data:NavDataView>
					
					<order:NavOrderView id="navOrderView" width="100%" height="100%" backgroundAlpha="1.0">
					</order:NavOrderView>
					
					<run:NavRunView id="navRunView" width="100%" height="100%" backgroundAlpha="1.0">
					</run:NavRunView>
					
					<report:NavReportView id="navReportView" width="100%" height="100%" backgroundAlpha="1.0">
					</report:NavReportView>
					
					<product:NewProductOrderView id="productOrderView" width="100%" height="100%" backgroundAlpha="1.0">
					</product:NewProductOrderView>
					
					<product:NavLedgerView id="navProductLedgerView" width="100%" height="100%" backgroundAlpha="1.0">
					</product:NavLedgerView>
					
					<product:NavProductOrderView id="navProductOrderView" width="100%" height="100%" backgroundAlpha="1.0">
					</product:NavProductOrderView>
					
				</mx:ViewStack>
				
			</mx:ViewStack>
			
			
		</mx:VBox>
		
		
	</mx:VBox>
	
	
	<mx:states> 
		<mx:State name="enabledState">
			<mx:SetProperty target="{vbox1}" name="visible" value="true"/>
			<mx:SetProperty target="{stateStack}" name="selectedIndex" value="1"/>
			<mx:SetProperty target="{theViews}" name="visible" value="true"/>
			<mx:SetProperty target="{requestNumber}" name="visible" value="true"/>
			<mx:SetProperty target="{lookupButton}" name="visible" value="true"/>
			<mx:SetProperty target="{searchText}" name="visible" value="true"/>
			<mx:SetProperty target="{searchButton}" name="visible" value="true"/>
			<mx:SetProperty target="{mainArea}" name="visible" value="true"/>
			<mx:SetProperty target="{vbox1}" name="visible" value="true"/>
			<mx:SetProperty target="{navBar}" name="visible" value="true"/>
			<mx:SetProperty target="{theBody}" name="visible" value="true"/>
			<mx:SetProperty name="visible" value="true"/>
			<mx:SetStyle target="{navBar}" name="dropShadowColor" value="#B0AF9C"/>
			
		</mx:State>
		<mx:State name="AdminState" basedOn="enabledState">
			<mx:SetProperty target="{mainMenu}" name="dataProvider" value="{adminMenu}"/>
		</mx:State>
		
		<mx:State name="BillingAdminState" basedOn="enabledState">
			<mx:SetProperty target="{mainMenu}" name="dataProvider" value="{billingAdminMenu}"/>
		</mx:State>
		
		<mx:State name="BillingAdminSubmitterState" basedOn="enabledState">
			<mx:SetProperty target="{mainMenu}" name="dataProvider" value="{billingAdminSubmitterMenu}"/>
		</mx:State>
		
		<mx:State name="UserState" basedOn="enabledState">
			<mx:SetProperty target="{mainMenu}" name="dataProvider" value="{userMenu}"/>
		</mx:State>
		
		<mx:State name="ManagerState" basedOn="enabledState">
			<mx:SetProperty target="{mainMenu}" name="dataProvider" value="{managerMenu}"/>
			
		</mx:State>
		<mx:State name="UserNonSubmitterState" basedOn="UserState">
			<mx:SetProperty target="{mainMenu}" name="dataProvider" value="{userNonSubmitterMenu}"/>
		</mx:State>
		<mx:State name="GuestState" basedOn="UserState">
			<mx:SetProperty target="{mainMenu}" name="dataProvider" value="{guestMenu}"/>
		</mx:State>
		
		<mx:State name="AdminESState" basedOn="AdminState">
			<mx:SetProperty target="{mainMenu}" name="dataProvider" value="{adminESMenu}"/>
		</mx:State>
		
		<mx:State name="ManagerESState" basedOn="ManagerState">
			<mx:SetProperty target="{mainMenu}" name="dataProvider" value="{managerESMenu}"/>
		</mx:State>
		
		<mx:State name="UserESState" basedOn="UserState">
			<mx:SetProperty target="{mainMenu}" name="dataProvider" value="{userESMenu}"/>
		</mx:State>
		
		<mx:State name="AdminDNASeqState" basedOn="AdminState">
			<mx:SetProperty target="{mainMenu}" name="dataProvider" value="{adminPlateBasedMenu}"/>
		</mx:State>
		
		<mx:State name="BillingAdminDNASeqState" basedOn="AdminDNASeqState">
			<mx:SetProperty target="{mainMenu}" name="dataProvider" value="{adminPlateBasedMenu}"/>
		</mx:State>
		
		
	</mx:states>
	
	
</mx:Application>
