<?xml version="1.0" encoding="utf-8"?>   
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" 
	xmlns="*" 
	xmlns:views="views.*"
	xmlns:workflow="views.workflow.*"  
	xmlns:experiment="views.experiment.*"  
	xmlns:analysis="views.analysis.*" 
	xmlns:user="views.user.*"
	xmlns:protocol="views.protocol.*"
	xmlns:admin="views.admin.*"
	xmlns:slide="views.slide.*"
	xmlns:hci="hci.flex.controls.*"
	xmlns:billing="views.billing.*"
	xmlns:util="views.util.*"
	xmlns:login="views.login.*"
	 backgroundGradientColors="[#7E7C7C, #7E7C7C]" 
	 paddingBottom="3" paddingLeft="1" paddingRight="1" paddingTop="2" 
	 backgroundGradientAlphas="[1.0, 1.0]" creationComplete="init()" applicationComplete="applicationCompleteHandler(event)">



    <mx:Fade id="fadeOut" duration="100"/>
    <mx:Fade id="fadeIn" duration="100"/>	
	
	<mx:HTTPService 
		id="checkLogin"	    
		url="loginsucceeded.jsp"
		resultFormat="text"
		result="loggedIn(event)"
		fault="notLoggedIn()"
		showBusyCursor="true"
		method="POST"
		contentType="application/x-www-form-urlencoded"
		useProxy="false">    
	</mx:HTTPService> 
	
	<mx:HTTPService 
		id="logoutService"	    
		url="logout.jsp"
		resultFormat="text"
		result="loggedOut()"
		showBusyCursor="true"
		method="POST"
		useProxy="false" >  
	</mx:HTTPService> 
		
	
	<mx:HTTPService 
    id="createSecurityAdvisor"
    url="CreateSecurityAdvisor.gx"
    resultFormat="e4x"
    result="onCreateSecurityAdvisor(event)"
    fault="onFailCreateSecurityAdvisor(event)"
    destination="createSecurityAdvisor"
    showBusyCursor="false"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService > 
        	
	<mx:HTTPService 
    id="getSecurityAdvisorForGuest" 
    url="getSecurityAdvisorInfo.jsp"
    resultFormat="e4x"
    result="onGetSecurityAdvisorForGuest(event)"
	fault="onFailHttpRequest('Failed to create security advisor for guest', event)"
    destination="getSecurityAdvisorForGuest"
    showBusyCursor="false"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService > 
    
    <mx:HTTPService 
    id="getExperimentDesignList" 
    url="GetExperimentDesignList.gx"
    resultFormat="e4x"
    showBusyCursor="false"
    destination="getExperimentDesignList"
    result="onGetExperimentDesignList(event)"
	fault="onFailHttpRequest('Failed to get experiment design list', event)"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="getExperimentFactorList" 
    url="GetExperimentFactorList.gx"
    resultFormat="e4x"
    showBusyCursor="false"
    result="onGetExperimentFactorList(event)"
	fault="onFailHttpRequest('Failed to get experiment factor list', event)"
    destination="getExperimentFactorList"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
	
	<mx:HTTPService 
		id="getSampleCharacteristicList" 
		url="GetSampleCharacteristicList.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		destination="getSampleCharacteristicList"
		result="onGetSampleCharacteristicList(event)"
		fault="onFailHttpRequest('Failed to get sample characteristic list', event)"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="getOrganismList" 
		url="GetOrganismList.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		destination="getOrganismList"
		result="onGetOrganismList(event)"
		fault="onFailHttpRequest('Failed to get organism list', event)"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService >
	
    <mx:HTTPService 
    id="getAppUserList" 
    url="GetAppUserList.gx"
    showBusyCursor="false"
    resultFormat="e4x"
    result="onGetAppUserList(event)"
	fault="onFailHttpRequest('Failed to get app user list', event)"
    destination="getAppUserList"
    useProxy="false">
    </mx:HTTPService >
         
    <mx:HTTPService 
    id="getLabList" 
    url="GetLabList.gx"
    showBusyCursor="false"
    resultFormat="e4x"
    result="onGetLabList(event)"
	fault="onFailHttpRequest('Failed to get lab list', event)"
    destination="getLabList"
    useProxy="false">
    <mx:request>
           <listKind>UnboundedLabList</listKind>
    </mx:request>
    </mx:HTTPService >
    
    
    <mx:HTTPService 
    id="getProjectList" 
    url="GetProjectList.gx"
    resultFormat="e4x"
    result="onGetProjectList(event)"
    destination="getProjectList"
	fault="onFailHttpRequest('Failed to get project list', event)"
    showBusyCursor="false"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
	
	<mx:HTTPService 
		id="getSessionTimeout" 
		url="GetSessionTimeout.gx"
		resultFormat="e4x"
		result="onGetSessionTimeout(event)"
		destination="getSessionTimeout"
		fault="onFailHttpRequest('Failed to get session timeout parameter', event)"
		showBusyCursor="false"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService >
	     
        <mx:Style source="css/gnomex_flex.css" />

        
<mx:Script>
            
        <![CDATA[
			import com.earthbrowser.ebutils.MacMouseWheelHandler;
			
			import hci.flex.dictionary.DictionaryEditor;
			import hci.flex.dictionary.DictionaryEvent;
			import hci.flex.renderers.RendererFactory;
			import hci.flex.util.DictionaryManager;
			
			import mx.collections.Sort;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
						
			import views.login.ManagePasswords;
			import views.search.NavSearchView;
			import views.util.AboutView;
			import views.util.AppProgressView;
			import views.util.CaptchaView;
			import views.util.OrganismEvent;
			import views.util.PromptXMLListCollection;
			import views.util.SampleCharacteristicEvent;
			import views.util.WorkAuthorizationWindow;
			import views.util.SessionTimeoutData;
           
            [Bindable]
            public var dictionaryManager:DictionaryManager;
			
			private var navSearchView:NavSearchView;
            
	        [Bindable]
	        [Embed(source="assets/tick.png")]
	        public var iconCheck:Class;
	        
	        [Bindable]
	        [Embed(source="assets/tick_black.png")]
	        public var iconBlackCheck:Class;
	        
	        [Bindable]
	        [Embed(source="assets/information.png")]
	        public var iconInformation:Class;
	                    
	        [Bindable]
	        [Embed(source="assets/flag_yellow.png")]
	        public var iconYellowFlag:Class;
	        	
	        [Bindable]
	        [Embed(source="assets/group.png")]
	        public var iconGroup:Class; 
	        
	        	
	        [Bindable]
	        [Embed(source="assets/brick.png")]
	        public var iconProtocol:Class;
	        
	        [Bindable]
	        [Embed(source="assets/folder.png")]
	        public var iconProject:Class;

	        [Bindable]
	        [Embed(source="assets/folder.png")]
	        public var iconFolder:Class;

	        [Bindable]
	        [Embed(source="assets/folder_disable.png")]
	        public var iconFolderDisabled:Class;
	        
	        [Bindable]
	        [Embed(source="assets/page.png")]
	        public var iconPage:Class;

	        [Bindable]
	        [Embed(source="assets/flask.png")]
	        public var iconFlask:Class;  

	        [Bindable]
	        [Embed(source="assets/flask_add.png")]
	        public var iconSubmitExperiment:Class;
	        
	        [Bindable]
	        [Embed(source="assets/experiment_register.png")]
	        public var iconAddExternalExperiment:Class;
	        
	
	        [Bindable]
	        [Embed(source="assets/microarray_small.png")]
	        public var iconExperiment:Class; 
	
	        [Bindable]
	        [Embed(source="assets/microarray_small.png")]
	        public var iconMicroarray:Class; 
	        
	        	
	        [Bindable]
	        [Embed(source="assets/microarray_small_disable.png")]
	        public var iconMicroarrayDisabled:Class; 

	        [Bindable]
	        [Embed(source="assets/microarray_small_single_color.png")]
	        public var iconMicroarraySingleColor:Class; 

	        [Bindable]
	        [Embed(source="assets/microarray_small_single_color_disable.png")]
	        public var iconMicroarraySingleColorDisabled:Class; 

	        [Bindable]
	        [Embed(source="assets/microarray_chip.png")]
	        public var iconMicroarrayAffy:Class; 
	        
	        [Bindable]
	        [Embed(source="assets/microarray_chip_disable.png")]
	        public var iconMicroarrayAffyDisabled:Class; 
	        	        
	        [Bindable]
	        [Embed(source="assets/flask.png")]
	        public var iconExperimentOther:Class; 
	        
	        [Bindable]
	        [Embed(source="assets/basket.png")]
	        public var iconCategory:Class;
	        
	        [Bindable]
	        [Embed(source="assets/chart_line.png")]
	        public var iconQC:Class;
	        
	        [Bindable]
	        [Embed(source="assets/chart_line_disable.png")]
	        public var iconQCDisabled:Class;
	        
	       	[Bindable]
	        [Embed(source="assets/bullet_orange.png")]
	        public var iconBullet:Class;
	     
	       	[Bindable]
	        [Embed(source="assets/bullet_green.png")]
	        public var iconGreenBullet:Class;
	        
	        [Bindable]
	        [Embed(source="assets/bullet_red.png")]
	        public var iconRedBullet:Class;
	        
	        [Bindable]
	        [Embed(source="assets/DNA_diag.png")]
	        public var iconSolexa:Class;
	        
	        [Bindable]
	        [Embed(source="assets/DNA_diag_disable.png")]
	        public var iconSolexaDisabled:Class;
	        
	        
	        [Bindable]
	        [Embed(source="assets/DNA_diag_lightening.png")]
	        public var iconHiSeq:Class;

	        [Bindable]
	        [Embed(source="assets/DNA_diag_lightening_disable.png")]
	        public var iconHiSeqDisabled:Class;
	        
	        [Bindable]
	        [Embed(source="assets/sitemap.png")]
	        public var iconTree:Class;

	        [Bindable]
	        [Embed(source="assets/error.png")]
	        public var iconError:Class;

	        [Bindable]
	        [Embed(source="assets/comment.png")]
	        public var iconWarning:Class;
	        
	        [Bindable]
	        [Embed(source="assets/asterisk_yellow.png")]
	        public var iconLabeling:Class;
	        
 	        [Bindable]
	        [Embed(source="assets/basket_put.png")]
	        public var iconHyb:Class;

	        [Bindable]
	        [Embed(source="assets/chart_line.png")]
	        public var iconSamplePrep:Class;

 
	        [Bindable] 
	        [Embed(source="assets/map.png")]
	        public var iconAnalysis:Class;

	        [Bindable]
	        [Embed(source="assets/server_go.png")]
	        public var iconServer:Class;
	        
	         
	        [Bindable]
	        [Embed(source="assets/money.png")]
	        public var iconBilling:Class; 

	        [Bindable]
	        [Embed(source="assets/money_disable.png")]
	        public var iconBillingDisabled:Class; 
	        
	        
	        [Bindable]
	        [Embed(source="assets/folder_money.png")]
	        public var iconBillingFolder:Class;
	        
	        	        
	        [Bindable]
	        [Embed(source="assets/pricesheet.png")]
	        public var iconPriceSheet:Class;
	        
	        [Bindable]
	        [Embed(source="assets/attach.png")]
	        public var iconPriceCriteria:Class;

			[Bindable]
	        [Embed(source="assets/image.png")]
	        public var iconSlide:Class;
			
			[Bindable]
	        [Embed(source="assets/images.png")]
	        public var iconSlideSet:Class;
			
			[Bindable]
	        [Embed(source="assets/image_disable.png")]
	        public var iconSlideInActive:Class;
			
			[Bindable]
	        [Embed(source="assets/images_disable.png")]
	        public var iconSlideSetInActive:Class;
	        
	        [Bindable]
	        [@Embed(source="assets/ding.mp3")]
	        public var soundDing:Class;
			
			private var isGuest:Boolean = false;
	        
	        
	        public var isUniversityOnlyUser:Boolean = false;
			public var isExternalUser:Boolean = false;
			
			[Bindable]
			public var bulletin:String = '';
	        
	        [Bindable]
	        public var pricingURL:String = '';
			
			[Bindable]
			public var userName:String = '';
			
			[Bindable]
			public var loginDateTime:String = '';
	        
	        [Bindable]
	        public var isInternalExperimentSubmission:Boolean = true;
	        
	        [Bindable]
	        public var isBSTLinkageSupported:Boolean = false;
			
			[Bindable]
			public var isFDTSupported:Boolean = false;
			
			[Bindable]
			public var isPrivacyExpirationSupported:Boolean = false;
			
			[Bindable]
			public var showUsageOnStartup:Boolean = false;
			
			[Bindable]
			public var showUsage:Boolean = false;
			
			[Bindable]
			public var isExternalDataSharingSite:Boolean = false;
			
			[Bindable]
			public var isAdminState:Boolean = false;
			
			[Bindable]
			public var siteTitle:String = "";

			[Bindable]
			public var siteWelcomeMessage:String = "";

	        public var annotationColor:uint = hci.flex.renderers.RendererFactory.DEFAULT_MISSING_REQUIRED_FIELD_BACKGROUND;
	        public var annotationColorBorder:uint = hci.flex.renderers.RendererFactory.DEFAULT_MISSING_REQUIRED_FIELD_BORDER;

	        public var cy3Color:uint = 0xccffaa;
	        public var cy3ColorBold:uint = 0x77dd55;

	        public var cy5Color:uint = 0xffccaa;
	        public var cy5ColorBold:uint = 0xff8855;

	        
	        private var currentView:Object = null;
	        
	        
	        public var downloadPopupCount:int = 0;
	        
	        [Bindable]
		    public var promptedAppUserList:PromptXMLListCollection;
			[Bindable]
			public var promptedLabList:PromptXMLListCollection;
			[Bindable]
			public var submitRequestLabList:XMLListCollection;
			[Bindable]
			public var promptedSubmitRequestLabList:PromptXMLListCollection;
			[Bindable]
			public var manageLabList:XMLListCollection;
			[Bindable]
			public var promptedWorkAuthLabList:PromptXMLListCollection;
			[Bindable]
			public var sampleCharacteristicList:XMLListCollection;
			[Bindable]
			public var organismList:XMLListCollection;

			private var properties:Object;
			
			public  var TYPE_MICROARRAY:String    = 'MICROARRAY';
			public  var TYPE_ILLUMINA:String      = 'ILLUMINA';
			public  var TYPE_QC:String            = 'QC';

	        public var PROPERTY_WORKAUTH_INSTRUCTIONS:String              = "workauth_instructions";
	        public var PROPERTY_WORKAUTH1_URL:String                      = "workauth1_url";
	        public var PROPERTY_WORKAUTH1_NAME:String                     = "workauth1_name";
	        public var PROPERTY_WORKAUTH2_URL:String                      = "workauth2_url";
	        public var PROPERTY_WORKAUTH2_NAME:String                     = "workauth2_name";
	        public var PROPERTY_QC_INSTRUCTIONS:String                    = "qc_instructions";
			public var PROPERTY_CORE_FACILITY_NAME:String                 = "core_facility_name";
	        public var PROPERTY_CONTACT_NAME_CORE_FACILITY:String         = "contact_name_core_facility";
	        public var PROPERTY_CONTACT_EMAIL_CORE_FACILITY:String        = "contact_email_core_facility";
	        public var PROPERTY_CONTACT_NAME_SOFTWARE_BUGS:String         = "contact_name_software_bugs";
	        public var PROPERTY_CONTACT_EMAIL_SOFTWARE_BUGS:String        = "contact_email_software_bugs";
			public var PROPERTY_HELP_URL:String                           = "help_url";
			public var PROPERTY_PRICING_URL:String                        = "pricing_url";
			public var PROPERTY_UNIVERSITY_USER_AUTHENTICATION:String     = "university_user_authentication";  
			public var PROPERTY_GENERATE_GL_INTERFACE:String              = "generate_general_ledger_interface";
			public var PROPERTY_ILLUMINA_BARCODING_NOTE:String            = "illumina_barcoding_note";
			public var PROPERTY_EXPERIMENT_SUBMISSION_DEFAULT_MODE:String = "experiment_submission_default_mode";
			public var PROPERTY_BST_LINKAGE_SUPPORTED:String              = "bst_linkage_supported";
			public var PROPERTY_FDT_SUPPORTED:String                      = "fdt_supported";
			public var PROPERTY_BULLETIN:String                           = "bulletin";
			public var PROPERTY_USAGE_USER_VISIBILITY:String              = "usage_user_visibility";
			public var PROPERTY_EXTERNAL_DATA_SHARING_SITE:String         = "external_data_sharing_site";
			public var PROPERTY_SITE_TITLE:String                         = "site_title";
			public var PROPERTY_SITE_WELCOME_MESSAGE:String               = "site_welcome_message";
			public var PROPERTY_SHOW_USAGE_ON_STARTUP:String              = "show_usage_on_startup";
			public var DATASET_PRIVACY_EXPIRATION:String                  = "dataset_privacy_expiration";
			 
			
			public var USAGE_VISIBILITY_MASKED:String                     = "masked";
			public var USAGE_VISIBILITY_FULL:String                       = "full";
			 
			private var appProgressBar:AppProgressView;
			private var currentProgressInterval:uint = 0;
			
			[Bindable]
			public var version:String = "";
			
			[Bindable]
			public var idAppUser:Object = null;
			
			private function init():void {
				if (!isGuestMode()) {
					checkLogin.send();
				} else {
					// If Guest Mode then go straight to original init code
					stateStack.selectedChild = initViews; 
					linkbutton1.visible = true;
					linkbutton3.visible = true;
					loggedInInit();					
				}
						
			} 
			
			protected function applicationCompleteHandler(event:FlexEvent):void
			{
				//set focus to this app using javascript
				if(ExternalInterface.available) {
					ExternalInterface.call("eval", "document.getElementById('" + ExternalInterface.objectID + "').tabIndex=0");
					ExternalInterface.call("eval", "document.getElementById('" + ExternalInterface.objectID + "').focus()");
				}
			}
			
			protected function logout():void {
				Alert.show("Are you sure you want to log out?", 
					"Confirm", 
					(Alert.YES | Alert.NO), this, 
					onPromptToLogout);
			}
			
			private function onPromptToLogout(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					logoutService.send();
				}
			}			
			public function loggedIn(event: ResultEvent):void {     
				if (event.result != "<SUCCESS/>") {
					notLoggedIn();
					return;
				}
				stateStack.selectedChild = initViews; 
				linkbutton1.visible = true;
				linkbutton3.visible = true;
				loggedInInit();			
			}
			
			private function notLoggedIn():void { 
				stateStack.selectedChild = loggedOutViews;	
				showLogin();
			}
			
			public function showLogin():void {
				loggedOutViews.selectedChild = loginView;
				focusManager.setFocus(loginView.txtUserName);
				//loginView.txtUserName.setFocus();
			}
			
			public function loggedOut():void {
				if(ExternalInterface.available) {
					// Reload the page after logging out.
					ExternalInterface.call("window.location.reload");					
				}				
			}			
			   
			public function showChangePasswordBeforeLogin():void {
				var managePasswordWindow:ManagePasswords = ManagePasswords(PopUpManager.createPopUp(this.mainArea, ManagePasswords, true));
				PopUpManager.centerPopUp(managePasswordWindow);
				managePasswordWindow.init(null);

			}   
			
			
			public function showChangePasswordAfterLogin():void {
				var managePasswordWindow:ManagePasswords = ManagePasswords(PopUpManager.createPopUp(this.mainArea, ManagePasswords, true));
				PopUpManager.centerPopUp(managePasswordWindow);
				managePasswordWindow.init(this.isExternalUser ? 'Y' : 'N');
				
			}  
			private function lookupExperiment():void {
				if (requestNumber.text.indexOf("A") == 0) {
					this.showAnalysisForNumber(requestNumber.text);				
				} else {
					showExperiment(requestNumber.text);
					
				} 
			}
			
			public function showExperiment(requestNumber:String):void {
				navExperimentView.selectedRequestNumber = requestNumber;
				navExperimentView.selectedIdRequest = null;
				navExperimentView.selectedIdLab = null;
				navExperimentView.selectedIdProject = null;

    			// We have to make sure that the first time a lookup
				// occurs after lauch, we refresh the experiment
				// through show event (init()).  The next time
				// through, we will make the call directly.
				if (navExperimentView.isInitialized) {
					navExperimentView.refreshExperimentsForLookup();					
				}
				

				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navExperimentView;
				
	        					
				
				// Reset the experiment search components.
				callLater(navExperimentView.resetSearchComponents);
				
			}
			
			public function showExperimentById(idRequest:String):void {
				navExperimentView.selectedRequestNumber = null;
				navExperimentView.selectedIdRequest = idRequest;
				navExperimentView.selectedIdLab = null;
				navExperimentView.selectedIdProject = null;

				navExperimentView.checkSecurity();

				var parms:Object = new Object();
				parms.idRequest = idRequest;
				navExperimentView.getRequestFromNav.send(parms);

				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navExperimentView;
				
			}
			
			public function showExperimentDownload(requestNumber:String):void {
				navExperimentView.selectedRequestNumber = requestNumber;
				navExperimentView.selectedIdRequest = null;
				navExperimentView.selectedIdLab = null;
				navExperimentView.selectedIdProject = null;

				
    			// We have to make sure that the first time a lookup
				// occurs after lauch, we refresh the experiment
				// through show event (init()).  The next time
				// through, we will make the call directly.
				if (navExperimentView.isInitialized) {
					navExperimentView.refreshExperimentForLookupDownload();					
				}


				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navExperimentView;
				
			}
            
			public function showAnalysisForExperiment(request:Object):void {
				navAnalysisView.selectedIdAnalysis = null;
				navAnalysisView.selectedIdAnalysisGroup = null; 
				navAnalysisView.selectedIdLab = request.@idLab;

				var parms:Object = new Object();
				parms.idRequest = request.@idRequest;
				navAnalysisView.getAnalysisGroupList.send(parms);

				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navAnalysisView;
				
			}

			public function showAnalysis(idAnalysis:Object, analysisNumber:String, idLab:String):void {
				navAnalysisView.selectedIdAnalysis = null;
				navAnalysisView.selectedIdAnalysisGroup = null;
				navAnalysisView.selectedIdLab = idLab;
				navAnalysisView.selectedAnalysisNumber = analysisNumber;

				navAnalysisView.checkSecurity();

				var parms:Object = new Object();
				parms.idLab = idLab;
				parms.idAnalysis = idAnalysis;
				navAnalysisView.getAnalysisGroupList.send(parms);

				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				navAnalysisView.checkSecurity();
				theViews.selectedChild = navAnalysisView;
				
			}
			
			public function showAnalysisForNumber(analysisNumber:String):void {
				navAnalysisView.selectedAnalysisNumber = analysisNumber;
				navAnalysisView.selectedIdAnalysis = null;
				navAnalysisView.selectedIdLab = null;
				navAnalysisView.selectedIdAnalysisGroup = null;

				

				// We have to make sure that the first time a lookup
				// occurs after lauch, we refresh the analysis
				// through show event (init()).  The next time
				// through, we will make the call directly.
				if (navAnalysisView.isInitialized) {
					navAnalysisView.refreshAnalysisForLookup();
				}

				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navAnalysisView;
				
			}

			public function showBillingAccountDetail(idLab:String):void {
				var theLab:Object = this.getLabList.lastResult.Lab.(@idLab == idLab);
				if (theLab is XMLList) {
					theLab = theLab[0];
				}
				var labNode:XML = <Lab id=''/>;
				labNode.@id = theLab.@idLab;
				navUsersView.itemToSelect = labNode;
				

				// We have to make sure that the first time a lookup
				// occurs after lauch, we refresh the lab list
				// through show event (init()).  The next time
				// through, we will make the call directly.
				if (navUsersView.isInitialized) {
					navUsersView.initializeData();
				}

				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = navUsersView;
				
			}
			
			private function showWorkAuthWindow():void {
				var workAuthWindow:WorkAuthorizationWindow = WorkAuthorizationWindow(PopUpManager.createPopUp(this.mainArea, WorkAuthorizationWindow, true));
				PopUpManager.centerPopUp(workAuthWindow);
				
				workAuthWindow.emailAddress.text = getUserEmail();
				if (workAuthWindow.labCombo.dataProvider.length == 2) {
					workAuthWindow.labCombo.selectedIndex = 1;
				}
			}			       


			public function showProtocol(idProtocol:Object, className:String):void {
				protocolsView.lastSavedProtocolId = idProtocol;
				protocolsView.lastSelectedProtocolClass = className; 
				protocolsView.initializeData();

				this.stateStack.selectedChild = theViews;
				theViews.visible = true;
				theViews.selectedChild = protocolsView;
				
			}

            private function search():void {
				showSearch();
				navSearchView.simpleSearchText = this.searchText.text;
            }
            
            public function showSearch():void {
				navSearchView = NavSearchView(PopUpManager.createPopUp(this,  NavSearchView, false));
				PopUpManager.centerPopUp(navSearchView);
				navSearchView.init();
			}
            
			public function showDictionaries():void {
				PopUpManager.centerPopUp(PopUpManager.createPopUp(this, DictionaryEditor, true));
			}
			

            
            private function onViewSelection():void {
            	this.setDefaultSubmissionState();
            	
            	if (currentView != null) {
	            	currentView.checkDirty();
	            	
	            	// if we are leaving slide view, refresh dictionaries
	            	if (isAdminState) {
		            	if (currentView == this.slideManagementView) {
		            		slideManagementView.refreshDictionaries();
	    	        	}
	            	}
	            	
	            	// if we are leaving protocol view, refresh dictionaries
	            	if (currentView == this.protocolsView) {
	            		protocolsView.refreshDictionaries();
	            	}
	            	
            	}
            	
            	
				this.stateStack.selectedChild = theViews;
            	theViews.visible = true;
            	
            	currentView = theViews.selectedChild;
            }
                        
            
             public function isGuestMode():Boolean {
				// Check the URL, if isGuest=Y on request parameter, then
				// this is a guest login
            	if (Application.application.parameters.isGuest != null) {
       				return Application.application.parameters.isGuest == 'Y' || isGuest;
            	} else {
					// If the request parameter isGuest not present, check the
					// SecurityAdvisor isGuest attribute.
            		return isGuest;
            	}
             } 
             
             public function submitInternalExperiment():Boolean {
             	return isInternalExperimentSubmission;
             }
              
             public function setDefaultSubmissionState():void {
             	if (this.getProperty(this.PROPERTY_EXPERIMENT_SUBMISSION_DEFAULT_MODE) != null &&
             	    this.getProperty(this.PROPERTY_EXPERIMENT_SUBMISSION_DEFAULT_MODE) == 'INTERNAL') {
					// Default is "submit request" (internal), but if this is an external data sharing
					// hub, make default "register external" experiment.
             		isInternalExperimentSubmission =  !isExternalDataSharingSite;
             	} else if (this.getProperty(this.PROPERTY_EXPERIMENT_SUBMISSION_DEFAULT_MODE)!= null &&
             	        this.getProperty(this.PROPERTY_EXPERIMENT_SUBMISSION_DEFAULT_MODE) == 'EXTERNAL') {					
             		isInternalExperimentSubmission =  false;
             	} 
             }

            public function launchExperimentDownloads():Boolean {
            	if (Application.application.parameters.launchWindow != null &&
            	    Application.application.parameters.launchWindow == "ExperimentDownload" &&
            	    Application.application.parameters.requestNumber != null ) {
       				return true;
            	} else {
            		return false;
            	}
            }
            public function launchExperimentDetail():Boolean {
            	if (Application.application.parameters.launchWindow != null &&
            	    Application.application.parameters.launchWindow == "ExperimentDetail" &&
            	    Application.application.parameters.requestNumber != null ) {
       				return true;
            	} else { 
            		return false;
            	}
            }
            public function launchAnalysisDetail():Boolean { 
            	if (Application.application.parameters.launchWindow != null &&
            	    Application.application.parameters.launchWindow == "AnalysisDetail" &&
            	    Application.application.parameters.analysisNumber != null ) {
       				return true;
            	} else {
            		return false;
            	}
            }
            public function launchBillingAccountDetail():Boolean {
            	if (Application.application.parameters.launchWindow != null &&
            	    Application.application.parameters.launchWindow == "BillingAccountDetail" &&
            	    Application.application.parameters.idLab != null ) {
       				return true;
            	} else { 
            		return false;
            	}
            }
            
            public function launchWorkAuthForm():Boolean {
            	if (Application.application.parameters.launchWindow != null &&
            	    Application.application.parameters.launchWindow == "WorkAuthForm") {
            		return true;
            	} else {
            		return false;
            	}
            }
            
            public function getLaunchRequestNumber():String {
            	if (Application.application.parameters.requestNumber != null) {
       				return Application.application.parameters.requestNumber;
            	} else {
            		return "";
            	}
            }
            public function getLaunchAnalysisNumber():String {
            	if (Application.application.parameters.analysisNumber != null) {
       				return Application.application.parameters.analysisNumber;
            	} else {
            		return "";
            	}
            }
            
            public function getLaunchIdLab():String {
            	if (Application.application.parameters.idLab != null) {
       				return Application.application.parameters.idLab;
            	} else {
            		return "";
            	}
            }
            
            private function loggedInInit():void {
            	appProgressBar = new AppProgressView();
            	appProgressBar.currentState = "StartupState";
			    PopUpManager.addPopUp(appProgressBar, mainArea, false);
				PopUpManager.centerPopUp(appProgressBar);
				
				// This is for handler to enable Mac MouseWheel
				this.addEventListener(Event.ADDED_TO_STAGE, stage_init);

            	if (isGuestMode() ) { 
            		var captchaWindow:CaptchaView = new CaptchaView();
            		PopUpManager.addPopUp(captchaWindow, mainArea, false);
            		PopUpManager.centerPopUp(captchaWindow);
            		captchaWindow.init();
            		captchaWindow.phrase.setFocus();
            				    
				} else {
	            	createSecurityAdvisor.send();
				}
            } 
            
			public function stage_init(e:Event):void {		    
				MacMouseWheelHandler.init(stage);
			}            
            
            public  function formatDate(date:Date):String {
			    return date.getFullYear().toString() + 
                    '-' + (date.getMonth()+1).toString() + '-' + date.getDate();
            }
            
                   

            public function getLabName(item:Object, col:int):String 
            {  
	        	var labName:String = "";
	        	var labList:XMLList = getLabList.lastResult.Lab;     			
	        	for(var i:Number = 0; i < labList.length(); i++) {
	            	if(labList[i].@idLab == item.@idLab) {
	                	labName = labList[i].@name;
	                    break;
	             	}
	             }
	             return labName;
       	
            }
            
            public function getIdAppUser():Object {
				return idAppUser;
            }
            public function getAppUserName():Object {
            	if (isGuestMode()) {
            		return "guest";
            	} else {
            		return createSecurityAdvisor.lastResult.@userLastName + (createSecurityAdvisor.lastResult.@userLastName != "" ? (", " + createSecurityAdvisor.lastResult.@userFirstName) : "");
            	}
            }
            
            public function getUNID():Object {
            	if (isGuestMode()) {
            		return "";
            	} else {
            		return createSecurityAdvisor.lastResult.@uNID;
            	}
            }
            
            public function getUserEmail():String {
            	if (isGuestMode()) {
            		return "";
            	} else {
            		return createSecurityAdvisor.lastResult.@userEmail;
            	}
            }
            
            public function hasPermission(permission:String):Boolean {
            	var hasPermission:Boolean = false;
            	var thePermission:Object = null;
            	if (isGuestMode()) {
					hasPermission = false;
            	} else {
					thePermission = createSecurityAdvisor.lastResult.globalPermissions.Permission.(@name == permission);     
					if (thePermission.length() > 0) { 
						hasPermission = true;
					}       		
            	}
				
				return hasPermission;
            }

            public function getGroupsToManage():Object {
            	if (isGuestMode()) {
            		return new XMLListCollection();
            	} else {
            		return new XMLListCollection(createSecurityAdvisor.lastResult.groupsToManage.Lab);
            	}
            }
            
            public function hasGroupsToManage():Boolean {
            	var groupsToManage:XMLList = null;
            	if (isGuestMode()) {
					groupsToManage = new XMLList();
            	} else {
					groupsToManage = createSecurityAdvisor.lastResult.groupsToManage.Lab;    		
            	}
            	if (groupsToManage.length() > 0) {
            		return true;
            	} else {
            		return false;
            	}
            }
            
            public function canSubmitRequests(idLab:int):Boolean {
            	var theLab:Object = getLabList.lastResult.Lab.(@idLab == idLab.toString());
            	if (theLab != null && theLab.@canSubmitRequests == 'Y') {
            		return true;
            	} else {
            		return false;
            	}
            }
            public function belongsToALab():Boolean {
             	var hasLab:Boolean = false;
            	for each(var lab:Object in getLabList.lastResult.Lab) {
            		if (lab.@isMyLab == 'Y') {
            			hasLab = true;
            			break;
            		}
            	} 
            	return hasLab;
            }
            
            public function canSubmitRequestForALab():Boolean {
             	var hasLab:Boolean = false;
            	for each(var lab:Object in getLabList.lastResult.Lab) {
            		if (lab.@canSubmitRequests == 'Y') {
            			hasLab = true;
            			break;
            		}
            	} 
            	return hasLab;
            }
            
            public function isMyLab(idLab:int):Boolean {
            	var theLab:Object = getLabList.lastResult.Lab.(@idLab == idLab.toString());
            	if (theLab != null && theLab.@isMyLab == 'Y') {
            		return true;
            	} else {
            		return false;
            	}
            	
            }
              
            private function checkSecurity():void {
				if (this.isGuestMode() || this.isUniversityOnlyUser) {
					currentState = "GuestState";
				} else if (hasPermission("canAccessAnyObject")) {
					isAdminState = true;
					currentState = this.isExternalDataSharingSite ? "AdminESState" : "AdminState";
				} else if (hasGroupsToManage()) {
					currentState = this.isExternalDataSharingSite ? "ManagerESState" :"ManagerState";
				} else if (hasPermission("canSubmitRequests") && this.canSubmitRequestForALab()) {
					currentState = this.isExternalDataSharingSite ? "UserESState" : "UserState";
				} else {
					currentState = "UserNonSubmitterState";
				}
            }

            private function onFailCreateSecurityAdvisor(event:FaultEvent):void {
            	this.appProgressBar.currentState = "AuthenticationFailedState";
            }
            
            private function onCreateSecurityAdvisor(event:ResultEvent):void {
            	if (!(createSecurityAdvisor.lastResult is XML) ||
            	    createSecurityAdvisor.lastResult.name() != 'SecurityAdvisor') {
            		Alert.show("Authentication failed.");  
            		return;	
            	}
				
				idAppUser = createSecurityAdvisor.lastResult.@idAppUser;
				isGuest = createSecurityAdvisor.lastResult.@isGuest == 'Y' ? true : false;

			    
			    this.appProgressBar.currentState = "LoadingState";
			    this.showProgress(10);
			    
			    userName  = createSecurityAdvisor.lastResult.@userFirstName + " " + createSecurityAdvisor.lastResult.@userLastName;
				loginDateTime  = createSecurityAdvisor.lastResult.@loginDateTime;
			    isUniversityOnlyUser = createSecurityAdvisor.lastResult.@isUniversityOnlyUser == "Y" ? true : false;
				isExternalUser = createSecurityAdvisor.lastResult.@isExternalUser == "Y" ? true : false;
			    version = createSecurityAdvisor.lastResult.@version;
			    		
			    dictionaryManager = new DictionaryManager("ManageDictionaries.gx");
				dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_LOADED, onDictionariesLoaded);
			    dictionaryManager.call("load", "");
			    



				
            }
            
            private function onGetSecurityAdvisorForGuest(event:ResultEvent):void {
			    this.appProgressBar.currentState = "LoadingState";
            	this.showProgress(30);
				
				isGuest = true;

            	if (!(getSecurityAdvisorForGuest.lastResult is XML) ||
            	    getSecurityAdvisorForGuest.lastResult.name() != 'SecurityAdvisor') {
            		Alert.show("You must launch GNomEx from guest page.");  
            		return;	
            	} 
				idAppUser = getSecurityAdvisorForGuest.lastResult.@idAppUser;

            	userName  = "guest user";
				loginDateTime  = getSecurityAdvisorForGuest.lastResult.@loginDateTime;
				
			    version = getSecurityAdvisorForGuest.lastResult.@version;
			    isUniversityOnlyUser = getSecurityAdvisorForGuest.lastResult.@isUniversityOnlyUser == "Y" ? true : false;
				isExternalUser = false;

			    
			    dictionaryManager = new DictionaryManager("ManageDictionaries.gx");
				dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_LOADED, onDictionariesLoaded);
			    dictionaryManager.call("load", "");
            	
            	showProgress(30);
            }
 
            public function onDictionariesLoaded(event:Event):void {
            	properties = new Object();
            	for each(var prop:Object in dictionaryManager.getEntries("hci.gnomex.model.Property")) {
            		if (prop.@value == '') {
            			continue; 
            		}
            		properties[prop.@propertyName] = prop.@propertyValue;
            	}
            	pricingURL = getProperty(PROPERTY_PRICING_URL);
				bulletin = getProperty(PROPERTY_BULLETIN) != null ? getProperty(PROPERTY_BULLETIN) : '';
            	
            	if (this.getProperty(this.PROPERTY_BST_LINKAGE_SUPPORTED) != null && 
            	    this.getProperty(this.PROPERTY_BST_LINKAGE_SUPPORTED) == 'Y') {
            		this.isBSTLinkageSupported = true;
            	} else {
            		this.isBSTLinkageSupported = false;
            	}
				
				if (this.getProperty(this.PROPERTY_FDT_SUPPORTED) != null && 
					this.getProperty(this.PROPERTY_FDT_SUPPORTED) == 'Y') {
					this.isFDTSupported = true;
				} else {
					this.isFDTSupported = false;
				}
				
				if (this.getProperty(this.DATASET_PRIVACY_EXPIRATION) != null && 
					parseInt(this.getProperty(this.DATASET_PRIVACY_EXPIRATION)) > 0) {
					this.isPrivacyExpirationSupported = true;
				} else {
					this.isPrivacyExpirationSupported = false;
				}
				
				
				if (this.getProperty(this.PROPERTY_SHOW_USAGE_ON_STARTUP) != null && 
					this.getProperty(this.PROPERTY_SHOW_USAGE_ON_STARTUP) == 'Y') {
					this.showUsageOnStartup = true;
				} else {
					this.showUsageOnStartup = false;
				}
				
				if (this.getProperty(this.PROPERTY_EXTERNAL_DATA_SHARING_SITE) != null && 
					this.getProperty(this.PROPERTY_EXTERNAL_DATA_SHARING_SITE) == 'Y') {
					this.isExternalDataSharingSite = true;
				} else {
					this.isExternalDataSharingSite = false;
				}

				if (this.getProperty(this.PROPERTY_SITE_TITLE) != null) {
					this.siteTitle = this.getProperty(this.PROPERTY_SITE_TITLE);
				} 
				if (this.getProperty(this.PROPERTY_SITE_WELCOME_MESSAGE) != null) {
					this.siteWelcomeMessage = this.getProperty(this.PROPERTY_SITE_WELCOME_MESSAGE);
				} 

				// Admins can always view usage.  Normal gnomex users (non guest users)
				// can only view it if the
				// property usage_user_visibility set to 'masked' or 'full'.
				if (this.getProperty(this.PROPERTY_USAGE_USER_VISIBILITY) != null && 
					this.getProperty(this.PROPERTY_USAGE_USER_VISIBILITY) == USAGE_VISIBILITY_MASKED ||
					this.getProperty(this.PROPERTY_USAGE_USER_VISIBILITY) == USAGE_VISIBILITY_FULL) {
					this.showUsage = !this.isGuestMode();
				} else {
					this.showUsage = this.hasPermission("canAccessAnyObject");
				}
				
				
				setDefaultSubmissionState();

            	
				if (currentState == null || currentState == "") {
					getExperimentDesignList.send();
					
					showProgress(30);
					enableApp();
					
				}
				getSessionTimeout.send();
            }
			
					
			private function onGetSessionTimeout(event:ResultEvent):void {
				var sessionTimeout:int = parseInt(getSessionTimeout.lastResult.@maxInactiveTime);
				SessionTimeoutData.setThisApplication(this, sessionTimeout); 
				SessionTimeoutData.startUserSessionTimer();				
			}	
            
            public function getProperty(name:String):String {
            	if (properties == null) {
            		return "";
            	}
            	return properties[name];
            }
            
            private function showProgress(interval:uint):void {
            	currentProgressInterval = currentProgressInterval + interval;
				appProgressBar.bar.setProgress(currentProgressInterval, 100);
            }
            
            private function onGetExperimentDesignList(event:ResultEvent):void {
	        	getExperimentFactorList.send();
            	
	        	showProgress(10);
	        	enableApp();
	        }		
	        
			private function onGetExperimentFactorList(event:ResultEvent):void {
	        	getLabList.send();
            	
	        	
	        	showProgress(10);
	        }
	        
	        private function onGetAppUserList(event:ResultEvent):void {
			  	var emptyNode:XML = <Lab idLab='' name='' label=''/>;
              	promptedAppUserList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getAppUserList.lastResult.AppUser.(@isActive == 'Y')));
              	
              	getProjectList.send();
            				
	          	showProgress(10);
	        	enableApp();
	        }
	        
	        private function onGetLabList(event:ResultEvent):void {
	        	var emptyNode:XML = <Lab idLab='' name='' label=''/>;
	        	promptedLabList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getLabList.lastResult.Lab));
	        	submitRequestLabList = new XMLListCollection(getLabList.lastResult.Lab.(@canSubmitRequests == 'Y'));
	        	promptedSubmitRequestLabList = new PromptXMLListCollection(emptyNode, submitRequestLabList);
	        	manageLabList = new XMLListCollection(getLabList.lastResult.Lab.(@canManage == 'Y'));
	        	
	       		// For submitting work auth forms online, a non-gnomex university user will
	       		// select from a list of all labs.  A guest user doesn't have this feature.
	       		// A normal gnomex user will select from a list of their labs. (Admins
	       		// will have a full list since they can submit a request on behalf 
	       		// of any lab.
	        	if (this.isUniversityOnlyUser) {
	        		promptedWorkAuthLabList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getLabList.lastResult.Lab));
	        	} else if (this.isGuestMode()) {	        		
	        	} else if (this.canSubmitRequestForALab()) {
	        		promptedWorkAuthLabList = new PromptXMLListCollection(emptyNode, submitRequestLabList);
	        	} else {
	        		promptedWorkAuthLabList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getLabList.lastResult.Lab.(@isMyLab == 'Y')));
	        	}
	        	
	        	getAppUserList.send();
            	
	        	showProgress(30);
	        	enableApp();
	        }		
			
			
            
	        
            private function onGetProjectList(event:ResultEvent):void {
				getSampleCharacteristicList.send();
				getOrganismList.send();
				
	       	    showProgress(10);
	        	enableApp();
	        }
	        
			private function onGetSampleCharacteristicList(event:ResultEvent):void {
				sampleCharacteristicList = new XMLListCollection(getSampleCharacteristicList.lastResult.SampleCharacteristic);
				this.dispatchEvent(new SampleCharacteristicEvent(SampleCharacteristicEvent.DATA_REFRESHED));
				
				if (currentState == null || currentState == "") {
					showProgress(10);
					enableApp();
				}
			}
			
			private function onGetOrganismList(event:ResultEvent):void {
				organismList = new XMLListCollection(getOrganismList.lastResult.Organism);
				this.dispatchEvent(new OrganismEvent(OrganismEvent.DATA_REFRESHED));
				
				if(submitRequestView != null && submitRequestView.sampleSetupView != null) {
					// Reset dataProvider for sampleSetupView Organism ComboBox
					submitRequestView.sampleSetupView.sampleOrganismCombo.dropdown.dataProvider = null;
					submitRequestView.sampleSetupView.sampleOrganismCombo.dropdown.dataProvider = organismList;
					
				}
				if(submitRequestView != null && submitRequestView.hybSetupView != null) {
					// Reset dataProvider for hybSetupView Organism ComboBox
					submitRequestView.hybSetupView.organismCombo.dropdown.dataProvider = null;
					submitRequestView.hybSetupView.organismCombo.dropdown.dataProvider = organismList;
					
				}
				if (currentState == null || currentState == "") {
					showProgress(10);
					enableApp();
				}
			}
			
	        private function enableApp():void {
	        	// If we are already in an enabled state,
	        	// just return.
	        	if (currentState != null) {
	        		return;
	        	}
	        	
	        	var done:Boolean = false;
	        	if (dictionaryManager != null &&
	        	    dictionaryManager.xml != null &&
	        	    manageLabList != null &&
	        	    promptedLabList != null &&
				    sampleCharacteristicList != null) {
	        	    
	        	    if (this.isGuestMode()) {
	        	    	done = true;
	        	    } else if (promptedAppUserList != null) {
	        	    	done = true;
	        	    }
	        	} 
	        	
	        	if (done) {
					appProgressBar.bar.setProgress(100, 100);
		        	PopUpManager.removePopUp(appProgressBar);
	    	    	currentState = "enabledState";
					stateStack.selectedChild = theViews;
	        	}
	        	
	        }
	        
	        private function checkSecurityAndLaunchStartWindow():void {
	        	if (this.currentState == "enabledState") {
	        		checkSecurity();
	        		if (this.homeView != null) {
	        			this.homeView.init();
	        		}
		        	launchStartWindow();	        		
	        	}
	        }
	        
	        private function launchStartWindow():void {
	        	if (launchExperimentDownloads()) {
	        		this.showExperimentDownload(getLaunchRequestNumber());
	        	} else if (launchExperimentDetail()) {
	        		this.showExperiment(getLaunchRequestNumber());
	        	} else if (launchAnalysisDetail()) {
   					this.showAnalysisForNumber(getLaunchAnalysisNumber());
	        	} else if (launchBillingAccountDetail() && hasPermission("canAccessAnyObject")) {
   					this.showBillingAccountDetail(this.getLaunchIdLab());
	        	} else if (launchWorkAuthForm() && !isGuestMode()) {
   					this.showWorkAuthWindow();
	        	} else {
					if (showUsage && showUsageOnStartup) {
						theViews.selectedChild = this.navUsageView;
					} else {
						theViews.selectedChild = this.homeView;						
					}					
				}
	        	 
	        }
	        
		public function sortExperimentDesigns(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var ed1:String = obj1.@experimentDesign;
				var ed2:String = obj2.@experimentDesign;
				
				if (ed1 == 'Other') {
					return 1;
				} else if (ed2 == 'Other') {
					return  -1;
				} else {
					if (ed1 < ed2) {
						return -1;
					} else if (ed1 > ed2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}
		public function sortExperimentFactors(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var ef1:String = obj1.@experimentFactor;
				var ef2:String = obj2.@experimentFactor;
				if (ef1 == 'Other') {
					return 1;
				} else if (ef2 == 'Other') {
					return  -1;
				} else  {
					if (ef1 < ef2) {
						return -1;
					} else if (ef1 > ef2) {
						return 1;
					} else {
						return 0;
					}
				}				
				
			}
		}
		
		public function onFailHttpRequest(title:String, event:FaultEvent):void {
			var sandboxMessage:String = "";
			switch (Security.sandboxType) {
                case Security.LOCAL_TRUSTED:
                    sandboxMessage += " (Local trusted)";
                    break;
                case Security.LOCAL_WITH_FILE:
                    sandboxMessage += " (Local with file)";
                    break;
                case Security.LOCAL_WITH_NETWORK:
                    sandboxMessage += " (Local with network)";
                    break;
                case Security.REMOTE:
                    sandboxMessage += " (Remote)";
                    break;
            }
        	Alert.show("SandboxType=" + sandboxMessage + "\n" + event.fault.toString(), title );
		}
		

            
        public function onFailHttpRequestNonVerbose(title:String, event:FaultEvent):void {
        		
        	if (event.message.body is String) {
	        	var startPos:int = event.message.body.indexOf("TEXT=");
	        	var endPos:int   = event.message.body.indexOf("TYPE=");
	        	if (startPos != -1 && endPos != -1) {
		        	Alert.show(event.message.body.toString().substring(startPos + 5, endPos), title);    		
	        	} else {
	        		Alert.show(event.message.body.toString(), title);
	        	}        
        		
        	} else {
        		Alert.show(event.message.toString(), title + " event.message");
        	}
        }
        
		public function getTreeIcon(item:Object):Class {
				if (item.name() == "Lab" || item.name() == "BillingLab") {
					return this.iconGroup;
				} else if (item.name() == "Project" || item.name() == "AnalysisGroup" || item.name() == "ProjectRequestList" || item.name() == "ProtocolList" || item.name() == "AnalysisGroupList" || item.name() == "Status" || item.name() == "Protocols" ) {
					return iconProject;
				} else if (item.name() == "Protocol") {
					return iconProtocol;
				} else if (item.name() == "AnalysisNode" || item.name() == "Analysis") {
					return iconAnalysis;
				} else if (item.name() == "RequestCategory") {
					return this.iconCategory;
				} else if (item.name() == "BillingItem") {
				    return iconBilling;
				} else if (item.name() == "PriceSheet") {
				    return iconPriceSheet;
				} else if (item.name() == "PriceCategory" ) {
					return iconBillingFolder;
				} else if (item.name() == "Price" ) {
					if (item.@isActive == "N") {
						return iconBillingDisabled;
					} else {
						return iconBilling;
					} 
				} else if (item.name() == "PriceCriteria") {
					return iconPriceCriteria;
				} else if (item.name() == "SlideProduct") {
					if (item.@isActive == "N") {
						return this.iconSlideSetInActive;
					} else {
					   return this.iconSlideSet;
					}
				} else if (item.name() == "SlideDesign") {
					if (item.@isActive == "N") {
						return this.iconSlideInActive;
					} else {
						return this.iconSlide;
					}
				}else if ((item.name() == "Request" || item.name() == "RequestNode") && item.@codeRequestCategory == "SOLEXA") {
					return this.iconSolexa;
				} else if ((item.name() == "Request" || item.name() == "RequestNode") && item.@codeRequestCategory == "HISEQ") {
					return this.iconHiSeq;
				} else if ((item.name() == "Request" || item.name() == "RequestNode") && item.@codeRequestCategory == "AFFY") {
					return this.iconMicroarrayAffy;
				}else if ((item.name() == "Request" || item.name() == "RequestNode") && item.@codeRequestCategory == "AGIL") {
					return this.iconMicroarray;
				} else if ((item.name() == "Request" || item.name() == "RequestNode") && item.@codeRequestCategory == "AGIL1") {
					return this.iconMicroarraySingleColor;
				} else if ((item.name() == "Request" || item.name() == "RequestNode") && item.@type == TYPE_QC) {
					return this.iconQC;
				} else if ((item.name() == "Request" || item.name() == "RequestNode") && item.@type == TYPE_MICROARRAY) {
					return this.iconMicroarray;
				} else if ((item.name() == "Request" || item.name() == "RequestNode") && item.@type == TYPE_ILLUMINA) {
					return this.iconSolexa;
				} else if (item.name() == "RequestDownload") {
					if (item.hasOwnProperty("@isEmpty") && item.@isEmpty == "Y") {
						return iconFolderDisabled;
					} else {
						return iconFolder;			
					}
				} else if (item.name() == "FileDescriptor" && item.hasOwnProperty("@type") && item.@type == "dir") {
						return iconFolder;
				} else if (item.name() == "Request" || item.name() == "RequestNode") {
					return this.iconFlask;
				} else if (item.name() == "Item") {
					return iconGreenBullet;
				} else {
					return null;
				}
		}
			
			public function getSampleCharacteristic(idSampleCharacteristic:String):Object {
				var sampleCharacteristic:XML = null;
				for each(var sc:XML in sampleCharacteristicList) {
					if (sc.@idSampleCharacteristic == idSampleCharacteristic) {
						if (sc is XMLList) {
							sampleCharacteristic = sc[0];
						} else {
							sampleCharacteristic = sc as XML;
						}
					}
				}
				return sampleCharacteristic;
			}		
			
			public function getOrganism(idOrganism:String):Object {
				var organism:XML = null;
				for each(var o:XML in organism) {
					if (o.@idOrganism == idOrganism) {
						if (o is XMLList) {
							organism = o[0];
						} else {
							organism = 0 as XML;
						}
					}
				}
				return organism;
			}		
			
		
			public function getSampleCharacteristicOptions(idSampleCharacteristic:String, includeInactive:Boolean=true):XMLList {
			var sampleCharacteristic:XML = null;
			for each(var sc:XML in sampleCharacteristicList) {
				if (sc.@idSampleCharacteristic == idSampleCharacteristic) {
					sampleCharacteristic = sc;
					break;
				}
			}
			if (sampleCharacteristic != null) {
				if (includeInactive) {
					return sampleCharacteristic.options.SampleCharacteristicOption;					
				} else {
					return sampleCharacteristic.options.SampleCharacteristicOption.(@value == '' || @isActive != 'N');					
				}
			} else {
				return new XMLList();
			}
		}		
			
		// Workaround to DropdownLabel.updateDisplayList issue which calls parentDocument.parentDocument.isEditState
		public function isEditState():Boolean {
			if (this.theViews.selectedChild != null && this.submitRequestView != null && this.theViews.selectedChild == this.submitRequestView) {
				return false;
			} else {
				return true;
			}
		}

        ]]>
    </mx:Script>
    
	<mx:Parallel id="hide">
		<mx:Iris duration="500"/>
		<mx:Fade duration="500"/>
	</mx:Parallel>
	
	<mx:Iris id="show" duration="500" scaleXFrom="0" scaleXTo="1" scaleYFrom="0" scaleYTo="1"/>
	
    <mx:XMLListCollection id="experimentDesignList" source="{getExperimentDesignList.lastResult.ExperimentDesign}" sort="{experimentDesignSorter}"/>
    <mx:XMLListCollection id="experimentFactorList" source="{getExperimentFactorList.lastResult.ExperimentFactor}" sort="{experimentFactorSorter}"/>
	<mx:Sort id="experimentDesignSorter" compareFunction="sortExperimentDesigns" unique="true"/>
	<mx:Sort id="experimentFactorSorter" compareFunction="sortExperimentFactors" unique="true"/> 

	    <mx:VBox id="theBody"  dropShadowEnabled="true"  
	    	width="100%" height="100%" 
	    	verticalGap="0" 
	    	paddingTop="0" paddingLeft="0" 
	    	paddingRight="0" paddingBottom="0">
	    

		  <mx:VBox width="100%"  id="navBar" backgroundImage="@Embed(source='assets/navbar.png')" 
		  	backgroundSize="100%" dropShadowColor="#2C2222" dropShadowEnabled="true" 
		  	borderStyle="solid" borderColor="#858780" borderThickness="1" 
		  	cornerRadius="4" verticalGap="0" 
		  	paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0">
		  	 
		      <mx:VBox width="100%" verticalGap="0"> 
			      <mx:HBox width="100%"  
				  horizontalAlign="left" verticalAlign="top" horizontalGap="10"  styleName="catalogPanel" 
			      	paddingBottom="6" id="hbox1" 
			      	paddingTop="4" 
			      	paddingLeft="4" paddingRight="4">
						<mx:HBox height="100%" verticalAlign="middle" horizontalGap="0">
							<mx:Image source="assets/hciLogo_hOnly.png"/>
							<mx:Label text="{'GNomEx ' + siteTitle}" id="appLabel" styleName="appTitle"/>
						</mx:HBox>
					        <mx:HBox  horizontalGap="2" verticalAlign="middle" defaultButton="{lookupButton}" id="hbox4" height="100%">
				              
							  <mx:Text text="Lookup by Experiment or Analysis #" id="requestNumberLabel" visible="false"  styleName="navLabel"/>
				              <mx:TextInput id="requestNumber" height="18"  borderStyle="none" backgroundAlpha=".8" width="56"  fontFamily="Arial" visible="false"/>
				              <mx:Button id="lookupButton"  
				              	fontFamily="Arial"  height="18" width="30"
				               	color="#400040" click="lookupExperiment()" visible="false" icon="@Embed('assets/arrow_right.png')"/>
				            </mx:HBox>
					        <mx:Spacer width="100%"/>
				            <mx:HBox height="100%" horizontalAlign="right" horizontalGap="2" verticalAlign="middle" defaultButton="{searchButton}">
				              <mx:Label text="Search" height="18" styleName="navLabel" id="searchLabel" visible="false" />
			 	              <mx:TextInput id="searchText"  height="18"  width="118" visible="false" borderStyle="none" backgroundAlpha=".8"/>
				              <mx:Button id="searchButton" height="18" click="callLater(search)"  visible="false" icon="@Embed('assets/magnifier.png')" toolTip="Search" width="30"/>
				              <mx:LinkButton visible="false" styleName="navLinkButtonSmall"  paddingLeft="1" label="Advanced search" id="advancedSearchButton" click="{showSearch()}" >
				              </mx:LinkButton>
				            </mx:HBox>
				            <mx:Spacer width="100%"/>
			        
			        <mx:HBox horizontalAlign="right" verticalAlign="middle" horizontalGap="2" height="30" id="hbox2">
			        	<mx:LinkButton label="Help" styleName="navLinkButtonSmall" visible="false" click="navigateToURL(new URLRequest(getProperty(PROPERTY_HELP_URL)), '_blank');" id="linkbutton1" />
			        	<mx:LinkButton label="About" styleName="navLinkButtonSmall" click="PopUpManager.centerPopUp(PopUpManager.createPopUp(this, AboutView, true));" id="linkbutton2" />
						<mx:LinkButton label="Log Out" styleName="navLinkButtonSmall" visible="false" click="logout();" id="linkbutton3" />
			        </mx:HBox>
			      </mx:HBox>
			      
			      <mx:HBox width="100%" id="linkButtonBarBox" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0"  backgroundImage="@Embed(source='assets/menubar.png')" backgroundSize="100%" borderStyle="none" cornerRadius="4" visible="false">
			 			<mx:LinkBar id="linkButtonBar" 
			 				 dataProvider="{initViews}" width="100%"
			 			            enabled="false" visible="false"   paddingBottom="2" paddingTop="2"
			 			            verticalAlign="middle" 
			 			            itemClick="onViewSelection()"  horizontalAlign="left" >
			 			</mx:LinkBar>
			      </mx:HBox>
	      	
		      	
		      </mx:VBox>

		  </mx:VBox>  
		      
	    <mx:VBox id="mainArea" width="100%" 
	    	height="100%" paddingTop="3" paddingBottom="0" paddingLeft="0" 
	    	paddingRight="0" horizontalCenter="0" verticalGap="0">
	    	<mx:ViewStack id="stateStack" creationPolicy="auto" paddingTop="0" paddingBottom="0" width="100%" height="100%">
					<mx:ViewStack id="loggedOutViews" visible="true" width="100%" height="100%" showEffect="{show}" creationPolicy="all">
						<login:LoginFlex id="loginView" label="Log In" width="100%" height="100%" showEffect="{show}"/>
						<login:Register id="registerView" label="Register" width="100%" height="100%" showEffect="{show}"/>
					</mx:ViewStack>		    			  	     
	 				<mx:ViewStack id="initViews" visible="false" width="100%" height="100%"   creationPolicy="auto" paddingTop="0" paddingBottom="0" >
			   
						<util:LaunchView id="homeView1" label="Home" icon="@Embed('assets/house.png')" >
						</util:LaunchView> 
					</mx:ViewStack>
			    	     
	 				<mx:ViewStack id="theViews" visible="false" width="100%" height="100%"  show="this.checkSecurityAndLaunchStartWindow()"  creationPolicy="auto" paddingTop="0" paddingBottom="0" creationComplete="this.checkSecurityAndLaunchStartWindow()" >
			
						<util:WelcomeView id="homeView" label="Home" icon="@Embed('assets/house.png')" >
						</util:WelcomeView>  
			
					    <experiment:ExperimentEditView id="submitRequestView" label="{isInternalExperimentSubmission ? 'Submit Experiment Request' : 'Register Experiment'}" 
					    	icon="{isInternalExperimentSubmission ? iconSubmitExperiment : iconAddExternalExperiment}"  width="100%" height="100%">
			            </experiment:ExperimentEditView>
	
					    <experiment:ExperimentEditView id="amendRequestView" label="Add Services to Request" 
					    	icon="@Embed('assets/flask_edit.png')"  width="100%" height="100%">
			            </experiment:ExperimentEditView>
			            		
				        <experiment:NavExperimentView id = "navExperimentView" width="100%" height="100%" 
				        	icon="@Embed('assets/flask.png')">
				        </experiment:NavExperimentView>
			
				        <analysis:NavAnalysisView id="navAnalysisView" width="100%" height="100%" 
				        	icon="@Embed('assets/map.png')">
				        </analysis:NavAnalysisView>
			
				        <workflow:NavWorkflowView id="navWorkflowView" width="100%" height="100%"  icon="@Embed('assets/building_go.png')">
				        </workflow:NavWorkflowView> 
			 
			            <billing:NavBillingView id="navBillingView" label="Billing" width="100%" height="100%" icon="@Embed('assets/money.png')">
			            </billing:NavBillingView> 
			          
				        <protocol:ProtocolsView id="protocolsView" label="Protocols" icon="@Embed('assets/bricks.png')">
				        </protocol:ProtocolsView>
			
				        <slide:SlideManagementView label="Slides" id="slideManagementView" icon="@Embed('assets/images.png')">
				        </slide:SlideManagementView>
				        
				        <user:NavUsersView id="navUsersView" icon="@Embed('assets/group.png')"  label="Users &amp; Groups" width="100%" height="100%" backgroundAlpha="1.0">	
				        </user:NavUsersView>
				        
						<admin:NavUsageView id="navUsageView" icon="@Embed('assets/chart_bar.png')"  label="Usage" width="100%" height="100%" backgroundAlpha="1.0">	
						</admin:NavUsageView>
				        
			        </mx:ViewStack>
	    		
	    	</mx:ViewStack>
           
 
        </mx:VBox>
     

	 </mx:VBox>
	 
	 
	 <mx:states>
	 	<mx:State name="enabledState">
	 	    <mx:SetProperty target="{linkButtonBarBox}" name="visible" value="true"/>
	 	    <mx:SetProperty target="{linkButtonBar}" name="visible" value="true"/>
	 	    <mx:SetProperty target="{linkButtonBar}" name="dataProvider" value="theViews"/>
	 	    <mx:SetProperty target="{stateStack}" name="selectedIndex" value="1"/>
	 		<mx:SetProperty target="{theViews}" name="visible" value="true"/>
	 		<mx:SetProperty target="{linkButtonBar}" name="visible" value="true"/>
	 		<mx:SetProperty target="{linkButtonBar}" name="enabled" value="true"/>
	 		<mx:SetProperty target="{requestNumberLabel}" name="visible" value="true"/>
	 		<mx:SetProperty target="{requestNumber}" name="visible" value="true"/>
	 		<mx:SetProperty target="{lookupButton}" name="visible" value="true"/>
	 		<mx:SetProperty target="{searchLabel}" name="visible" value="true"/>
	 		<mx:SetProperty target="{searchText}" name="visible" value="true"/>
	 		<mx:SetProperty target="{searchButton}" name="visible" value="true"/>
	 		<mx:SetProperty target="{advancedSearchButton}" name="visible" value="true"/>
	 	    <mx:SetProperty target="{theViews}" name="selectedIndex" value="0"/>
	 	</mx:State>
	 	<mx:State name="AdminState" basedOn="enabledState">
	 		<mx:SetStyle target="{hbox2}" name="horizontalGap" value="0"/>
	 		<mx:SetStyle target="{advancedSearchButton}" name="paddingLeft" value="2"/>
	 		<mx:SetStyle target="{advancedSearchButton}" name="paddingRight" value="2"/>
	 		<mx:SetProperty target="{protocolsView}" name="label" value="Protocols"/>
	 		<mx:SetProperty target="{this.amendRequestView}" name="label" value="Add Serv."/>
	 		<mx:SetProperty target="{this.submitRequestView}" name="label" value="{this.isInternalExperimentSubmission ? 'Submit Request' : 'Register Experiment'}"/>
			<mx:SetProperty target="{this.navUsersView}" name="label" value="Users/Groups"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="horizontalGap" value="0"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="paddingLeft" value="0"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="paddingRight" value="0"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="fontFamily" value="Verdana"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="fontSize" value="11"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="fontWeight" value="normal"/>
	 		<mx:SetStyle target="{navBar}" name="verticalGap"/>
	 		<mx:SetStyle target="{theBody}" name="verticalGap" value="2"/>
	 	</mx:State>
	 	<mx:State name="UserState" basedOn="enabledState">
	 		<mx:RemoveChild target="{navBillingView}"/>
	 		<mx:RemoveChild target="{slideManagementView}"/> 
	 		<mx:RemoveChild target="{navUsersView}"/>
	 		<mx:RemoveChild target="{navWorkflowView}"/>
	 	</mx:State>
	 	<mx:State name="ManagerState" basedOn="enabledState">
	 		<mx:RemoveChild target="{navBillingView}"/>
	 		<mx:RemoveChild target="{slideManagementView}"/>
	 		<mx:RemoveChild target="{navWorkflowView}"/>
	 		<mx:SetProperty target="{protocolsView}" name="label" value="Protocols"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="paddingLeft" value="0"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="paddingRight" value="0"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="horizontalGap" value="0"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="fontFamily" value="Verdana"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="fontSize" value="11"/>
	 		<mx:SetStyle target="{linkButtonBar}" name="fontWeight" value="normal"/>

	 	</mx:State>
	 	<mx:State name="UserNonSubmitterState" basedOn="UserState">
	 		<mx:RemoveChild target="{submitRequestView}"/>
	 		<mx:RemoveChild target="{amendRequestView}"/>
	 	</mx:State>
	 	<mx:State name="GuestState" basedOn="UserState">
	 		<mx:RemoveChild target="{submitRequestView}"/>
	 		<mx:RemoveChild target="{amendRequestView}"/>
			<mx:RemoveChild target="{navUsageView}"/>
	 	</mx:State>

		<mx:State name="AdminESState" basedOn="AdminState">
			<mx:RemoveChild target="{amendRequestView}"/>
			<mx:RemoveChild target="{navBillingView}"/>
			<mx:RemoveChild target="{navWorkflowView}"/>
		</mx:State>

		 <mx:State name="ManagerESState" basedOn="ManagerState">
			 <mx:RemoveChild target="{amendRequestView}"/>
		 </mx:State>

		 <mx:State name="UserESState" basedOn="UserState">
			 <mx:RemoveChild target="{amendRequestView}"/>
		 </mx:State>

		 
	 </mx:states>
	
	
</mx:Application>
