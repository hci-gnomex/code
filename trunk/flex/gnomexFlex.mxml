<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns="*" 
	xmlns:views="views.*"  
	preinitialize="init()" 
	 backgroundGradientColors="[#747474, #9f9f9f]" 
	 paddingBottom="3" paddingLeft="3" paddingRight="3" paddingTop="3" 
	 shadowDirection="0" backgroundGradientAlphas="[1.0, 1.0]">
	

	     
        <mx:Style source="css/gnomex_flex.css" />
        
            <mx:Script>
            
        <![CDATA[
        	import views.AboutView;
        	import mx.collections.Sort;
        	import views.PromptXMLListCollection;
        	import mx.collections.XMLListCollection;
            import mx.controls.Alert;
            import mx.rpc.events.ResultEvent;        
            import mx.managers.CursorManager;
            import mx.managers.PopUpManager;
	
	        [Bindable]
	        [Embed(source="assets/group.png")]
	        public var iconGroup:Class;
	        
	        
	        [Bindable]
	        [Embed(source="assets/folder.png")]
	        public var iconProject:Class;
	
	        [Bindable]
	        [Embed(source="assets/color_swatch.png")]
	        public var iconExperiment:Class;
	        
	        [Bindable]
	        [Embed(source="assets/basket.png")]
	        public var iconCategory:Class;
	        
	        
	        [Bindable]
	        [Embed(source="assets/chart_curve_error.png")]
	        public var iconQC:Class;
	        
	        
	        [Bindable]
	        [Embed(source="assets/sitemap.png")]
	        public var iconTree:Class;

	        [Bindable]
	        [Embed(source="assets/error.png")]
	        public var iconError:Class;

	        [Bindable]
	        [Embed(source="assets/comment.png")]
	        public var iconWarning:Class;
	        
	        public var REQUIRED_FIELD_BACKGROUND:uint = 0xffd8bb;
	        
			[Bindable]
			public var promptedLabList:views.PromptXMLListCollection;
			[Bindable]
			public var submitRequestLabList:XMLListCollection;
			[Bindable]
			public var promptedSubmitRequestLabList:views.PromptXMLListCollection;
			[Bindable]
			public var manageLabList:XMLListCollection;
			[Bindable]
			public var promptedAppUserList:views.PromptXMLListCollection;
			[Bindable]
			public var slideProductList:XMLListCollection;
			[Bindable]
			public var filteredSlideProductList:XMLListCollection;
			[Bindable]
			public var promptedProjectList:views.PromptXMLListCollection;
			[Bindable]
			public var filteredProjectList:XMLListCollection;
			[Bindable]
			public var filteredProjectListForSubmitRequests:XMLListCollection;
			[Bindable]
			public var samplePrepMethodList:XMLListCollection;
			[Bindable]
			public var sampleSourceList:XMLListCollection;
			[Bindable]
			public var filteredSlideProductListForSubmitRequests:XMLListCollection;
			[Bindable]
			public var slideDesignList:XMLListCollection;
			private var dictionarySorter:Sort;
			
			
            public	var fileDownloadUtil:views.FileDownloadUtil;


			private var appProgressBar:views.AppProgressView;
			
			private function lookupExperiment():void {
				showExperiment(requestNumber.text);
			}
			
			public function showExperiment(requestNumber:String):void {
				navExperimentView.selectedRequestNumber = requestNumber;
				navExperimentView.selectedIdRequest = null;
				navExperimentView.selectedIdLab = null;
				navExperimentView.selectedIdProject = null;

				var parms:Object = new Object();
				parms.requestNumber = requestNumber;
				navExperimentView.getRequest.send(parms);

				theViews.visible = true;
				theViews.selectedChild = navExperimentView;
				
			}
            
            private function search():void {
            	theViews.visible = true;
            	theViews.selectedChild = navSearchView;
 				navSearchView.searchViews.selectedChild = navSearchView.searchResultsView;
            	var params:Object = new Object();
            	params.text = searchText.text;
            	
            
            	CursorManager.setBusyCursor();
            	navSearchView.searchView.searchGNomEx.send(params);
            	CursorManager.removeBusyCursor();
            	
            	
            }
            
            private function onViewSelection():void {
            	if (theViews.selectedChild == submitRequestView) {
	            	submitRequestView.getNewRequest.send();
            		submitRequestView.initializeForm();
            	}
            	if (theViews.selectedChild == navExperimentView) {
            		callLater(navExperimentView.initializeExperiments);
            	}
            	theViews.visible = true;
            }

            
            private function init():void {
            	XML.ignoreWhitespace = true;
				XML.prettyPrinting = false;
				
            	createSecurityAdvisor.send();
            } 
            public  function formatDate(date:Date):String {
			    return date.getFullYear().toString() + 
                    '-' + (date.getMonth()+1).toString() + '-' + date.getDate();
            }
            
                   
            public function getUserName(item:Object, col:int):String 
            { 
	        	var userName:String = "";
	        	var appUserList:XMLList = getAppUserList.lastResult.AppUser;     			
	        	for(var i:Number = 0; i < appUserList.length(); i++) {
	            	if(appUserList[i].@idAppUser == item.@idAppUser) {
	                	userName = getAppUserList.lastResult.AppUser[i].@displayName;
	                    break;
	             	}
	             }
	             return userName;
       	
            }
            public function getLabName(item:Object, col:int):String 
            { 
	        	var labName:String = "";
	        	var labList:XMLList = getLabList.lastResult.Lab;     			
	        	for(var i:Number = 0; i < labList.length(); i++) {
	            	if(labList[i].@idLab == item.@idLab) {
	                	labName = labList[i].@name;
	                    break;
	             	}
	             }
	             return labName;
       	
            }
            
            public function hasPermission(permission:String):Boolean {
            	var hasPermission:Boolean = false;
				var thePermission:Object = createSecurityAdvisor.lastResult..Permission.(@name == permission);
				if (thePermission.length() > 0) { 
					hasPermission = true;
				}
				return hasPermission;
            }
            
            public function hasGroupsToManage():Boolean {
            	var groupsToManage:XMLList = createSecurityAdvisor.lastResult..groupsToManage.Lab;
            	if (groupsToManage.length() > 0) {
            		return true;
            	} else {
            		return false;
            	}
            }
            
            public function canSubmitRequests(idLab:int):Boolean {
            	var theLab:Object = getLabList.lastResult..Lab.(@idLab == idLab);
            	if (theLab != null && theLab.@canSubmitRequests == 'Y') {
            		return true;
            	} else {
            		return false;
            	}
            }
            
            private function checkSecurity():void {
				if (!hasPermission("canAdministerUsers") &&
				    !hasGroupsToManage()) {
					theViews.removeChild(navUsersView);
				} 
				if (!hasPermission("canSubmitRequests")) {
					theViews.removeChild(submitRequestView);
				}
				if (!hasPermission("canManageWorkflow")) {
					theViews.removeChild(navWorkflowView);
					theViews.removeChild(slideManagementView);
				}
				if (!hasPermission("canWriteDictionaries")) {
					theViews.removeChild(dictionariesView);
				}            	
            }
            
            private function onCreateSecurityAdvisor(event:ResultEvent):void {

				checkSecurity();

			    appProgressBar = new views.AppProgressView();
			    PopUpManager.addPopUp(appProgressBar, mainArea, false);
			    PopUpManager.centerPopUp(appProgressBar);

            	manageDictionaries.send();
            	getAppUserList.send();
            	getExperimentDesignList.send();
            	getExperimentFactorList.send();
            	getLabList.send();
            	getSlideProductList.send();
            	getProjectList.send();
            	
            }
            private function onManageDictionaries(event:ResultEvent):void {
            	var emptyNode:XML = <DictionaryEntry value='' display=''/>;
            
            	var dictionaryList:XMLList = manageDictionaries.lastResult.Dictionary;     			
	        	for(var i:Number = 0; i < dictionaryList.length(); i++) {
	        		dictionaryList[i].insertChildAfter(null, emptyNode);
	        	}
	        	
	        	samplePrepMethodList = new XMLListCollection(manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethod').DictionaryEntry);
	        	dictionarySorter = new Sort();
	        	dictionarySorter.compareFunction = this.sortDictionaryEntries;
	        	samplePrepMethodList.sort = dictionarySorter;
	        	samplePrepMethodList.refresh();

	        	sampleSourceList = new XMLListCollection(manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleSource').DictionaryEntry);
	        	sampleSourceList.sort = dictionarySorter;
	        	sampleSourceList.refresh();
	        	
	        	enableApp();
            }
            

            
            private function onGetAppUserList(event:ResultEvent):void {
	        	var emptyNode:XML = <Lab idLab='' name='' label=''/>;
	        	promptedAppUserList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getAppUserList.lastResult.AppUser));
	        	enableApp();
            }
            
            private function onGetExperimentDesignList(event:ResultEvent):void {
	        }		
	        
			private function onGetExperimentFactorList(event:ResultEvent):void {
	        }
	        
	        private function onGetLabList(event:ResultEvent):void {
	        	var emptyNode:XML = <Lab idLab='' name='' label=''/>;
	        	promptedLabList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getLabList.lastResult.Lab));
	        	submitRequestLabList = new XMLListCollection(getLabList.lastResult.Lab.(@canSubmitRequests == 'Y'));
	        	promptedSubmitRequestLabList = new PromptXMLListCollection(emptyNode, submitRequestLabList);
	        	manageLabList = new XMLListCollection(getLabList.lastResult.Lab.(@canManage == 'Y'));
	        	enableApp();
	        }		
            
            private function onGetSlideProductList(event:ResultEvent):void {
	        	var emptyNode:XML = <SlideProduct idSlideProduct='' name='' label=''/>;
	        	slideProductList = new XMLListCollection(getSlideProductList.lastResult.SlideProduct);
	        	slideProductList.addItemAt(emptyNode, 0);
	        	
	        	filteredSlideProductList = new XMLListCollection(getSlideProductList.lastResult.SlideProduct);
	        	
	        	filteredSlideProductListForSubmitRequests = new XMLListCollection(getSlideProductList.lastResult.SlideProduct);

	        	enableApp();
	            
	        }		
	        
            private function onGetSlideDesignList(event:ResultEvent):void {
	        	var emptyNode:XML = <SlideDesign idSlideDesign='' name=''/>;
	        	slideDesignList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getSlideDesignList.lastResult.SlideDesign));
            }
            
            private function onGetProjectList(event:ResultEvent):void {
	        	var emptyNode:XML = <Project idProject='' name='' idLab=''/>;
	        	promptedProjectList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getProjectList.lastResult.Project));
	        	
	        	filteredProjectList = new XMLListCollection(getProjectList.lastResult.Project);
	        	filteredProjectList.addItemAt(emptyNode, 0);
	        	
	        	filteredProjectListForSubmitRequests = new XMLListCollection(getProjectList.lastResult.Project);
	        	filteredProjectListForSubmitRequests.filterFunction = submitRequestView.filterProject;
	        	filteredProjectListForSubmitRequests.refresh();
	        	
	        	enableApp();
	        } 
	        
	        private function enableApp():void {
	        	if (promptedProjectList != null &&
	        	    filteredProjectList != null &&
	        	    promptedAppUserList != null &&
	        	    promptedLabList != null &&
	        	    slideProductList != null &&
	        	    filteredSlideProductList != null) {
	        	    	
	        	    linkButtonBar.enabled = true;
	        	    linkButtonBar.visible = true;
	        	    PopUpManager.removePopUp(appProgressBar);
	        	    searchText.visible = true;
	        	    requestNumber.visible = true;
	        	    requestNumberLabel.visible = true;
	        	    searchButton.visible = true;
	        	    lookupButton.visible = true;
	        	    searchLabel.visible = true;
	        	    //theViews.visible = true;
	        	    	
	        	}
	        }
	        
	        private function sortDictionaryEntries(obj1:Object, obj2:Object, fields:Array=null):int {
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var display1:String = obj1.@display;
					var display2:String = obj2.@display;
					
					if (display1.indexOf('Other') > -1) {
						return 1;
					} else if (display2.indexOf('Other') > -1) {
						return  -1;
					} else {
						if (display1 < display2) {
							return -1;
						} else if (display1 > display2) {
							return 1;
						} else {
							return 0;
						}
					}			
					
				}
			}			

	        	
	        
            
            
        ]]>
    </mx:Script>
    
    	
	<mx:HTTPService 
    id="createSecurityAdvisor" 
    url="http://localhost/gnomex/CreateSecurityAdvisor.gx"
    resultFormat="e4x"
    result="onCreateSecurityAdvisor(event)"
    destination="createSecurityAdvisor"
    showBusyCursor="false"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService > 
    
    
    <mx:HTTPService 
    id="getAppUserList" 
    url="http://localhost/gnomex/GetAppUserList.gx"
    resultFormat="e4x"
    result="onGetAppUserList(event)"
    destination="getAppUserList"
    showBusyCursor="false"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
    
        
    <mx:HTTPService 
    id="manageDictionaries" 
    url="http://localhost/gnomex/ManageDictionaries.gx"
    resultFormat="e4x"
        result="onManageDictionaries(event)"
    destination="manageDictionaries"
    showBusyCursor="false"
    useProxy="false">
    <mx:request>
       <action>load</action>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="getExperimentDesignList" 
    url="http://localhost/gnomex/GetExperimentDesignList.gx"
    resultFormat="e4x"
    showBusyCursor="false"
    destination="getExperimentDesignList"
    result="onGetExperimentDesignList(event)"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="getExperimentFactorList" 
    url="http://localhost/gnomex/GetExperimentFactorList.gx"
    resultFormat="e4x"
    showBusyCursor="false"
    result="onGetExperimentFactorList(event)"
    destination="getExperimentFactorList"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
         
         
    <mx:HTTPService 
    id="getLabList" 
    url="http://localhost/gnomex/GetLabList.gx"
    showBusyCursor="false"
    resultFormat="e4x"
    result="onGetLabList(event)"
    destination="getLabList"
    useProxy="false">
    <mx:request>
           <listKind>UnboundedLabList</listKind>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="getSlideProductList" 
    url="http://localhost/gnomex/GetSlideProductList.gx"
    showBusyCursor="false"
    resultFormat="e4x"
    result="onGetSlideProductList(event)"
    destination="getSlideProductList"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
    
        
    <mx:HTTPService 
    id="getSlideDesignList" 
    url="http://localhost/gnomex/GetSlideDesignList.gx"
    showBusyCursor="false"
    resultFormat="e4x"
    result="onGetSlideDesignList(event)"
    destination="getSlideDesignList"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="getProjectList" 
    url="http://localhost/gnomex/GetProjectList.gx"
    resultFormat="e4x"
    result="onGetProjectList(event)"
    destination="getProjectList"
    showBusyCursor="false"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
    
    <mx:XMLListCollection id="dictionaryEntries" source="{manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.LabelingReactionSize').DictionaryEntry}"/>
    <mx:XMLListCollection id="experimentDesignList" source="{getExperimentDesignList.lastResult.ExperimentDesign}"/>
    <mx:XMLListCollection id="experimentFactorList" source="{getExperimentFactorList.lastResult.ExperimentFactor}"/>

	    <mx:VBox id="topArea" width="100%" height="100%" verticalGap="8">
	    
		   <mx:ApplicationControlBar  width="100%" 
		   	fillAlphas="[1, 1]" dock="true"  
		   	paddingBottom="0" paddingLeft="1" paddingRight="1" paddingTop="1">
		      <mx:VBox width="100%" verticalGap="0">
			      <mx:HBox width="100%"  horizontalAlign="right" verticalAlign="top" horizontalGap="0" backgroundAlpha=".5" styleName="catalogPanel" paddingBottom="5">
			        <mx:HBox width="100%" height="100%" horizontalAlign="left" horizontalGap="0" paddingBottom="0" paddingTop="2">
			          <mx:Label text="GNomEx" id="appLabel" fontFamily="Arial" fontSize="16" color="#ffffff" fontWeight="bold"/>
			          <mx:HBox width="100%" height="100%" horizontalAlign="right" paddingLeft="10" paddingRight="12" horizontalGap="10">
			            <mx:HBox horizontalAlign="left" width="100%" paddingLeft="10">
			            </mx:HBox>
			            
			            <mx:HBox height="100%" horizontalGap="2" verticalAlign="middle">
			              <mx:Label text="Lookup by #" height="18" color="#ffffff" id="requestNumberLabel"  fontFamily="Arial" visible="false"/>
			              <mx:TextInput id="requestNumber" height="18"  borderStyle="none" backgroundAlpha="0.42" width="56"  fontFamily="Arial" visible="false"/>
			              <mx:Button id="lookupButton"  
			              	fontFamily="Arial"  height="18"
			              	color="#400040" click="lookupExperiment()" visible="false" icon="@Embed('assets/arrow_right.png')"/>
			            </mx:HBox>
			            <mx:Spacer width="20"/>
			            <mx:HBox height="100%" horizontalAlign="right" horizontalGap="2" verticalAlign="middle">
			              <mx:Label text="Search" height="18" color="#ffffff" id="searchLabel" visible="false" fontFamily="Arial"/>
			              <mx:TextInput id="searchText"  height="18"  width="118" visible="false" borderStyle="none" backgroundAlpha=".42"/>
			              <mx:Button id="searchButton" height="18" click="theViews.selectedChild=navSearchView;callLater(search)" fontFamily="Arial" visible="false" icon="@Embed('assets/magnifier.png')" toolTip="Search"/>
			            </mx:HBox>
			          </mx:HBox>
			        </mx:HBox>
			        <mx:HBox horizontalAlign="right" verticalAlign="top" horizontalGap="3">
			    	    <mx:LinkButton label="Help" color="#ffffff" click="navigateToURL(new URLRequest('http://www.hci.utah.edu/internal/CSG/PublicDocs/SourceDocs/HCIApps/GNomEx/GNomEx.htm'), '_blank');"/>
			    	    <mx:LinkButton label="About" color="#ffffff" click="PopUpManager.centerPopUp(PopUpManager.createPopUp(this, views.AboutView, true));"/>
			        </mx:HBox>
			      </mx:HBox>
			      
			      <mx:LinkBar id="linkButtonBar"
			      	 dataProvider="{theViews}" width="100%"
					paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" 
                     enabled="true" visible="false" 
                     verticalAlign="middle"
                     itemClick="onViewSelection()" mouseDown="onViewSelection()" >
			      </mx:LinkBar>
	      	
		      	
		      </mx:VBox>

		      
		</mx:ApplicationControlBar>
	    
	    

        
        
	    <mx:VBox id="mainArea" width="100%" 
	    	height="100%" paddingTop="1" paddingBottom="1" paddingLeft="0" 
	    	paddingRight="0" horizontalCenter="0">
          
   

        <mx:ViewStack id="theViews" visible="false" width="100%" height="100%"  creationPolicy="auto" paddingTop="0">

            <views:SubmitRequestView id="submitRequestView" width="100%" height="100%" 
            	label="Submit Request" icon="@Embed('assets/tag_blue_edit.png')" >
            </views:SubmitRequestView>
	        
	        <views:NavExperimentView id = "navExperimentView" width="100%" height="100%" 
	        	icon="@Embed('assets/color_swatch.png')">
	        </views:NavExperimentView>

	        
	        <views:NavAnalysisView label="Analysis" icon="@Embed('assets/map_edit.png')"/>

 

	        <views:NavWorkflowView id="navWorkflowView" width="100%" height="100%"  icon="@Embed('assets/building_go.png')">
	        </views:NavWorkflowView>

	        <mx:Canvas label="Methods and Materials" icon="@Embed('assets/bullet_wrench.png')"/>

	        <mx:Canvas label="Slides" id="slideManagementView" icon="@Embed('assets/application_cascade.png')"/>
	        

	        
	        <views:NavUsersView id="navUsersView" icon="@Embed('assets/group.png')" width="100%" height="100%" backgroundAlpha="1.0">	
	        </views:NavUsersView>

	        <mx:Canvas label="Dictionaries"  id="dictionariesView" icon="@Embed('assets/book.png')"/>
	        
           <views:NavSearchView id="navSearchView" icon="@Embed('assets/magnifier.png')" width="100%" height="100%" backgroundAlpha="1.0">	
	        </views:NavSearchView>



      </mx:ViewStack> 
     </mx:VBox>
     

	 </mx:VBox>
	
	
</mx:Application>
