<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns="*" 
	xmlns:views="views.*"  
	xmlns:workflow="views.workflow.*" 
	xmlns:experiment="views.experiment.*" 
	xmlns:analysis="views.analysis.*" 
	xmlns:user="views.user.*"
	xmlns:protocol="views.protocol.*"
	xmlns:search="views.search.*"
	xmlns:slide="views.slide.*"
	 backgroundGradientColors="[#7E7C7C, #7E7C7C]" 
	 paddingBottom="3" paddingLeft="3" paddingRight="3" paddingTop="2" 
	 shadowDirection="0" backgroundGradientAlphas="[1.0, 1.0]" creationComplete="init()" >
	
    <mx:Fade id="fadeOut" duration="100"/>
    <mx:Fade id="fadeIn" duration="100"/>
   
    	
	<mx:HTTPService 
    id="createSecurityAdvisor" 
    url="CreateSecurityAdvisor.gx"
    resultFormat="e4x"
    result="onCreateSecurityAdvisor(event)"
    fault="onFailCreateSecurityAdvisor(event)"
    destination="createSecurityAdvisor"
    showBusyCursor="false"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService > 
        	
	<mx:HTTPService 
    id="createSecurityAdvisorForGuest" 
    url="getSecurityAdvisorInfo.jsp"
    resultFormat="e4x"
    result="onCreateSecurityAdvisorForGuest(event)"
	fault="onFailHttpRequest('Failed to create security advisor for guest', event)"
    destination="createSecurityAdvisorForGuest"
    showBusyCursor="false"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService > 
    
    
    <mx:HTTPService 
    id="getAppUserList" 
    url="GetAppUserList.gx"
    resultFormat="e4x"
    result="onGetAppUserList(event)"
    destination="getAppUserList"
	fault="onFailHttpRequest('Failed to get user list', event)"
    showBusyCursor="false"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
    
        
    <mx:HTTPService 
    id="manageDictionaries" 
    url="ManageDictionaries.gx"
    resultFormat="e4x"
    result="onManageDictionaries(event)"
	fault="onFailHttpRequest('Failed to load dictionaries', event)"
    destination="manageDictionaries"
    showBusyCursor="false"
    useProxy="false">
    <mx:request>
       <action>load</action>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="getExperimentDesignList" 
    url="GetExperimentDesignList.gx"
    resultFormat="e4x"
    showBusyCursor="false"
    destination="getExperimentDesignList"
    result="onGetExperimentDesignList(event)"
	fault="onFailHttpRequest('Failed to get experiment design list', event)"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="getExperimentFactorList" 
    url="GetExperimentFactorList.gx"
    resultFormat="e4x"
    showBusyCursor="false"
    result="onGetExperimentFactorList(event)"
	fault="onFailHttpRequest('Failed to get experiment factor list', event)"
    destination="getExperimentFactorList"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
         
         
    <mx:HTTPService 
    id="getLabList" 
    url="GetLabList.gx"
    showBusyCursor="false"
    resultFormat="e4x"
    result="onGetLabList(event)"
	fault="onFailHttpRequest('Failed to get lab list', event)"
    destination="getLabList"
    useProxy="false">
    <mx:request>
           <listKind>UnboundedLabList</listKind>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="getSlideProductList" 
    url="GetSlideProductList.gx"
    showBusyCursor="false"
    resultFormat="e4x"
    result="onGetSlideProductList(event)"
	fault="onFailHttpRequest('Failed to slide product list', event)"
    destination="getSlideProductList"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
    
        
    <mx:HTTPService 
    id="getSlideDesignList" 
    url="GetSlideDesignList.gx"
    showBusyCursor="false"
    resultFormat="e4x"
    result="onGetSlideDesignList(event)"
	fault="onFailHttpRequest('Failed to slide design list', event)"
    destination="getSlideDesignList"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="getProjectList" 
    url="GetProjectList.gx"
    resultFormat="e4x"
    result="onGetProjectList(event)"
    destination="getProjectList"
	fault="onFailHttpRequest('Failed to project list', event)"
    showBusyCursor="false"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >

	     
        <mx:Style source="css/gnomex_flex.css" />
        
<mx:Script>
            
        <![CDATA[
        	import views.util.HciDictionaryView;
        	import views.util.AboutView;
        	import views.util.AppProgressView;
        	import views.util.FileDownloadUtil;
        	import views.util.PromptXMLListCollection;
        	import mx.collections.Sort;
        	import mx.collections.XMLListCollection;
            import mx.controls.Alert;
            import mx.rpc.events.ResultEvent;        
            import mx.managers.CursorManager;
            import mx.managers.PopUpManager;
            import mx.events.CloseEvent;
            import mx.rpc.events.FaultEvent;
            import mx.controls.dataGridClasses.DataGridColumn;
            
	        [Bindable]
	        [Embed(source="assets/tick.png")]
	        public var iconCheck:Class;
	        
	                    
	        [Bindable]
	        [Embed(source="assets/flag_yellow.png")]
	        public var iconYellowFlag:Class;
	        	
	        [Bindable]
	        [Embed(source="assets/group.png")]
	        public var iconGroup:Class;
	        
	        	
	        [Bindable]
	        [Embed(source="assets/brick.png")]
	        public var iconProtocol:Class;
	        
	        [Bindable]
	        [Embed(source="assets/folder.png")]
	        public var iconProject:Class;

	        [Bindable]
	        [Embed(source="assets/folder.png")]
	        public var iconFolder:Class;
	
	        [Bindable]
	        [Embed(source="assets/microarray_black.png")]
	        public var iconExperiment:Class; 
	        
	        [Bindable]
	        [Embed(source="assets/basket.png")]
	        public var iconCategory:Class;
	        
	        [Bindable]
	        [Embed(source="assets/chart_curve.png")]
	        public var iconQC:Class;
	        
	       	[Bindable]
	        [Embed(source="assets/bullet_orange.png")]
	        public var iconBullet:Class;
	    
	       	[Bindable]
	        [Embed(source="assets/bullet_green.png")]
	        public var iconGreenBullet:Class;
	        
	        [Bindable]
	        [Embed(source="assets/bullet_red.png")]
	        public var iconRedBullet:Class;
	        
	        [Bindable]
	        [Embed(source="assets/solexa.png")]
	        public var iconSolexa:Class;
	        
	        [Bindable]
	        [Embed(source="assets/sitemap.png")]
	        public var iconTree:Class;

	        [Bindable]
	        [Embed(source="assets/error.png")]
	        public var iconError:Class;

	        [Bindable]
	        [Embed(source="assets/comment.png")]
	        public var iconWarning:Class;
	        
	        [Bindable]
	        [Embed(source="assets/asterisk_yellow.png")]
	        public var iconLabeling:Class;
	        
 	        [Bindable]
	        [Embed(source="assets/basket_put.png")]
	        public var iconHyb:Class;

	        [Bindable]
	        [Embed(source="assets/bullet_wrench.png")]
	        public var iconSamplePrep:Class;


	        [Bindable]
	        [Embed(source="assets/map.png")]
	        public var iconAnalysis:Class;
	        
	        public var REQUIRED_FIELD_BACKGROUND:uint = 0xffd8bb;
	        
	        private var currentView:Object = null;
	        
	        
	        public var downloadPopupCount:int = 0;
	        
			[Bindable]
			public var promptedLabList:PromptXMLListCollection;
			[Bindable]
			public var submitRequestLabList:XMLListCollection;
			[Bindable]
			public var promptedSubmitRequestLabList:PromptXMLListCollection;
			[Bindable]
			public var manageLabList:XMLListCollection;
			[Bindable]
			public var promptedAppUserList:PromptXMLListCollection;
			[Bindable]
			public var slideProductList:XMLListCollection;
			[Bindable]
			public var filteredSlideProductList:XMLListCollection;
			[Bindable]
			public var promptedProjectList:PromptXMLListCollection;
			[Bindable]
			public var filteredProjectList:XMLListCollection;
			[Bindable]
			public var filteredProjectListForSubmitRequests:XMLListCollection;
			[Bindable]
			public var samplePrepMethodList:XMLListCollection;
			[Bindable]
			public var sampleSourceList:XMLListCollection;
			[Bindable]
			public var filteredSampleTypeList:XMLListCollection;
			[Bindable]
			public var filteredSlideProductListForSubmitRequests:XMLListCollection;
			[Bindable]
			public var filteredMicroarrayCategoryListForSubmitRequests:XMLListCollection;
			[Bindable]
			public var filteredFlowCellTypeList:XMLListCollection;
			[Bindable]
			public var filteredGenomeBuildList:XMLListCollection;
			[Bindable]
			public var slideDesignList:XMLListCollection;
			private var dictionarySorter:Sort;
			private var sampleTypeSorter:Sort;

			 
			
            public	var fileDownloadUtil:FileDownloadUtil;

 
			private var appProgressBar:AppProgressView;
			
			private function lookupExperiment():void {
				showExperiment(requestNumber.text);
			}
			
			public function showExperiment(requestNumber:String):void {
				navExperimentView.selectedRequestNumber = requestNumber;
				navExperimentView.selectedIdRequest = null;
				navExperimentView.selectedIdLab = null;
				navExperimentView.selectedIdProject = null;


				var parms:Object = new Object();
				parms.requestNumber = requestNumber;
				navExperimentView.getRequest.send(parms);

				theViews.visible = true;
				theViews.selectedChild = navExperimentView;
				
			}
			
			public function showExperimentDownload(requestNumber:String):void {
				navExperimentView.selectedRequestNumber = requestNumber;
				navExperimentView.selectedIdRequest = null;
				navExperimentView.selectedIdLab = null;
				navExperimentView.selectedIdProject = null;


				var parms:Object = new Object();
				parms.requestNumber = requestNumber;
				navExperimentView.getRequestForDownload.send(parms);

				theViews.visible = true;
				theViews.selectedChild = navExperimentView;
				
			}
            
            private function search():void {
            	theViews.visible = true;
            	navSearchView.searchView.checkSecurity();            	
            	navSearchView.searchView.initializeData();
            	navSearchView.searchView.clearForm();
            	theViews.selectedChild = navSearchView;
 				navSearchView.searchViews.selectedChild = navSearchView.searchResultsView;
            	var params:Object = new Object();
            	params.text = searchText.text;
            	
            
            	CursorManager.setBusyCursor();
            	navSearchView.searchView.searchGNomEx.send(params);
            	CursorManager.removeBusyCursor();
            	
            	
            }
            
            private function onViewSelection():void {
            	if (currentView != null) {
	            	currentView.checkDirty();
            	}
            	
            	theViews.creationPolicy="all";
            	theViews.visible = true;
            	if (theViews.selectedChild == submitRequestView) {
            		submitRequestView.initializeData();
            		submitRequestView.checkSecurity();
            		submitRequestView.setupForm();
            		submitRequestView.setupDataListeners();
            	}
            	if (theViews.selectedChild == this.navSearchView) {
            		navSearchView.searchView.checkSecurity();
            		navSearchView.searchView.initializeData();
            	}
            	if (theViews.selectedChild == navExperimentView) {
					navExperimentView.selectedRequestNumber = null;
            		navExperimentView.initializeExperiments();
            	}
            	if (theViews.selectedChild == navAnalysisView) {
            		navAnalysisView.checkSecurity();
					navAnalysisView.selectedAnalysisNumber = null;
            		navAnalysisView.initializeAnalysis();
            	}
            	if (theViews.selectedChild == navUsersView) {
            		navUsersView.checkSecurity();
            		navUsersView.initializeData();
            	}
            	if (theViews.selectedChild == slideManagementView) {
            		slideManagementView.initializeData();
            	}
            	if (theViews.selectedChild == protocolsView) {
            		protocolsView.initializeData();
            	}
            	currentView = theViews.selectedChild;
            	
            }
                        
            
             public function isGuestMode():Boolean {
            	if (Application.application.parameters.isGuest != null) {
       				return Application.application.parameters.isGuest == 'Y';
            	} else {
            		return false;
            	}
            }
            public function launchExperimentDownloads():Boolean {
            	if (Application.application.parameters.launchWindow != null &&
            	    Application.application.parameters.launchWindow == "ExperimentDownload" &&
            	    Application.application.parameters.requestNumber != null ) {
       				return true;
            	} else {
            		return false;
            	}
            }
            public function launchExperimentDetail():Boolean {
            	if (Application.application.parameters.launchWindow != null &&
            	    Application.application.parameters.launchWindow == "ExperimentDetail" &&
            	    Application.application.parameters.requestNumber != null ) {
       				return true;
            	} else {
            		return false;
            	}
            }
            
            public function getLaunchRequestNumber():String {
            	if (Application.application.parameters.requestNumber != null) {
       				return Application.application.parameters.requestNumber;
            	} else {
            		return "";
            	}
            }
            
            private function init():void {
            	if (isGuestMode() ) { 
					createSecurityAdvisorForGuest.send();				
				} else {
	            	createSecurityAdvisor.send();
				}
            } 
            public  function formatDate(date:Date):String {
			    return date.getFullYear().toString() + 
                    '-' + (date.getMonth()+1).toString() + '-' + date.getDate();
            }
            
                   
            public function getUserName(item:Object, col:int):String 
            { 
	        	var userName:String = "";
	        	var appUserList:XMLList = getAppUserList.lastResult.AppUser;     			
	        	for(var i:Number = 0; i < appUserList.length(); i++) {
	            	if(appUserList[i].@idAppUser == item.@idAppUser) {
	                	userName = getAppUserList.lastResult.AppUser[i].@displayName;
	                    break;
	             	}
	             }
	             return userName;
       	
            }
            public function getLabName(item:Object, col:int):String 
            { 
	        	var labName:String = "";
	        	var labList:XMLList = getLabList.lastResult.Lab;     			
	        	for(var i:Number = 0; i < labList.length(); i++) {
	            	if(labList[i].@idLab == item.@idLab) {
	                	labName = labList[i].@name;
	                    break;
	             	}
	             }
	             return labName;
       	
            }
            
            public function getIdAppUser():Object {
            	if (isGuestMode()) {
            		return createSecurityAdvisorForGuest.lastResult.@idAppUser;
            	} else {
            		return createSecurityAdvisor.lastResult.@idAppUser;
            	}
            }
            
            public function hasPermission(permission:String):Boolean {
            	var hasPermission:Boolean = false;
            	var thePermission:Object = null;
            	if (isGuestMode()) {
					hasPermission = false;
            	} else {
					thePermission = createSecurityAdvisor.lastResult.globalPermissions.Permission.(@name == permission);     
					if (thePermission.length() > 0) { 
						hasPermission = true;
					}       		
            	}
				
				return hasPermission;
            }
            
            public function getGroupsToManage():Object {
            	if (isGuestMode()) {
            		return new XMLListCollection();
            	} else {
            		return new XMLListCollection(createSecurityAdvisor.lastResult.groupsToManage.Lab);
            	}
            }
            
            public function hasGroupsToManage():Boolean {
            	var groupsToManage:XMLList = null;
            	if (isGuestMode()) {
					groupsToManage = new XMLList();
            	} else {
					groupsToManage = createSecurityAdvisor.lastResult.groupsToManage.Lab;    		
            	}
            	if (groupsToManage.length() > 0) {
            		return true;
            	} else {
            		return false;
            	}
            }
            
            public function canSubmitRequests(idLab:int):Boolean {
            	var theLab:Object = getLabList.lastResult.Lab.(@idLab == idLab.toString());
            	if (theLab != null && theLab.@canSubmitRequests == 'Y') {
            		return true;
            	} else {
            		return false;
            	}
            }
              
            private function checkSecurity():void {
				if (!hasPermission("canAdministerUsers") &&
				    !hasGroupsToManage()) {
					theViews.removeChild(navUsersView);
				} 
				if (!hasPermission("canSubmitRequests")) {
					theViews.removeChild(submitRequestView);
				} 
				if (!hasPermission("canManageWorkflow")) {
					theViews.removeChild(navWorkflowView);
					theViews.removeChild(slideManagementView);
				}
				if (hasPermission("canWriteDictionaries")) {
					dictionaryButton.visible = true;
					dictionaryButton.enabled = true;
				}            	
				this.navExperimentView.checkSecurity();
				this.navExperimentView.detailView.checkSecurity();
            }

            private function onFailCreateSecurityAdvisor(event:FaultEvent):void {
            	Alert.show("Authentication to application has failed.  Please try launching app again.");
            }
            
            private function onCreateSecurityAdvisor(event:ResultEvent):void {
            	if (!(createSecurityAdvisor.lastResult is XML) ||
            	    createSecurityAdvisor.lastResult.name() != 'SecurityAdvisor') {
            		Alert.show("Authentication failed.");  
            		return;	
            	}
            	userName.text = createSecurityAdvisor.lastResult.@userFirstName + " " + createSecurityAdvisor.lastResult.@userLastName;
			    appProgressBar = new AppProgressView();
			    PopUpManager.addPopUp(appProgressBar, mainArea, false);
				PopUpManager.centerPopUp(appProgressBar);
			    

				checkSecurity();


            	manageDictionaries.send();
            	getAppUserList.send();
            	getExperimentDesignList.send();
            	getExperimentFactorList.send();
            	getLabList.send();
            	getSlideProductList.send();
            	getProjectList.send();
            }
            
            private function onCreateSecurityAdvisorForGuest(event:ResultEvent):void {
            	if (!(createSecurityAdvisorForGuest.lastResult is XML) ||
            	    createSecurityAdvisorForGuest.lastResult.name() != 'SecurityAdvisor') {
            		Alert.show("You must launch GNomEx from guest page.");  
            		return;	
            	}
            	userName.text = "(guest)";
			    appProgressBar = new AppProgressView();
			    PopUpManager.addPopUp(appProgressBar, mainArea, false);
			    PopUpManager.centerPopUp(appProgressBar);

				checkSecurity();

			    

            	manageDictionaries.send();
            	getAppUserList.send();
            	getExperimentDesignList.send();
            	getExperimentFactorList.send();
            	getLabList.send();
            	getSlideProductList.send();
            	getProjectList.send();
            }

            private function onManageDictionaries(event:ResultEvent):void {
            	var emptyNode:XML = <DictionaryEntry value='' display=''/>;
            
            	var dictionaryList:XMLList = manageDictionaries.lastResult.Dictionary;     			
	        	for(var i:Number = 0; i < dictionaryList.length(); i++) {
	        		dictionaryList[i].insertChildAfter(null, emptyNode);
	        	}
        	
	        	samplePrepMethodList = new XMLListCollection(manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethod').DictionaryEntry);
	        	dictionarySorter = new Sort();
	        	dictionarySorter.compareFunction = this.sortDictionaryEntries;
	        	samplePrepMethodList.sort = dictionarySorter;
	        	samplePrepMethodList.refresh();

	        	sampleSourceList = new XMLListCollection(manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleSource').DictionaryEntry);
	        	sampleSourceList.sort = dictionarySorter;
	        	sampleSourceList.refresh();
	        	
	        	filteredSampleTypeList = new XMLListCollection(manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleType').DictionaryEntry);
	        	sampleTypeSorter = new Sort();
	        	sampleTypeSorter.compareFunction = this.sortSampleTypes;	   
	        	filteredSampleTypeList.sort = sampleTypeSorter;     	
	        	filteredSampleTypeList.refresh();
	        	
	        	filteredFlowCellTypeList = new XMLListCollection(manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.FlowCellType').DictionaryEntry);
	        	filteredGenomeBuildList = new XMLListCollection(manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.GenomeBuild').DictionaryEntry);
	        	filteredMicroarrayCategoryListForSubmitRequests = new XMLListCollection(manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.MicroarrayCategory').DictionaryEntry);
	        	
	        	enableApp();
            }
            

            
            private function onGetAppUserList(event:ResultEvent):void {
	        	var emptyNode:XML = <Lab idLab='' name='' label=''/>;
	        	promptedAppUserList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getAppUserList.lastResult.AppUser));
	        	enableApp();
            }
            
            private function onGetExperimentDesignList(event:ResultEvent):void {
	        }		
	        
			private function onGetExperimentFactorList(event:ResultEvent):void {
	        }
	        
	        private function onGetLabList(event:ResultEvent):void {
	        	var emptyNode:XML = <Lab idLab='' name='' label=''/>;
	        	promptedLabList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getLabList.lastResult.Lab));
	        	submitRequestLabList = new XMLListCollection(getLabList.lastResult.Lab.(@canSubmitRequests == 'Y'));
	        	promptedSubmitRequestLabList = new PromptXMLListCollection(emptyNode, submitRequestLabList);
	        	manageLabList = new XMLListCollection(getLabList.lastResult.Lab.(@canManage == 'Y'));
	        	enableApp();
	        }		
            
            private function onGetSlideProductList(event:ResultEvent):void {
	        	var emptyNode:XML = <SlideProduct idSlideProduct='' name='' label=''/>;
	        	slideProductList = new XMLListCollection(getSlideProductList.lastResult.SlideProduct);
	        	slideProductList.addItemAt(emptyNode, 0);
	        	
	        	filteredSlideProductList = new XMLListCollection(getSlideProductList.lastResult.SlideProduct);
	        	
	        	filteredSlideProductListForSubmitRequests = new XMLListCollection(getSlideProductList.lastResult.SlideProduct);

	        	enableApp();
	            
	        }		
	        
            private function onGetSlideDesignList(event:ResultEvent):void {
	        	var emptyNode:XML = <SlideDesign idSlideDesign='' name=''/>;
	        	slideDesignList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getSlideDesignList.lastResult.SlideDesign));
            }
            
            private function onGetProjectList(event:ResultEvent):void {
	        	var emptyNode:XML = <Project idProject='' name='' idLab=''/>;
	        	promptedProjectList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getProjectList.lastResult.Project));
	        	
	        	filteredProjectList = new XMLListCollection(getProjectList.lastResult.Project);
	        	filteredProjectList.addItemAt(emptyNode, 0);
	        	
	        	filteredProjectListForSubmitRequests = new XMLListCollection(getProjectList.lastResult.Project);
	        	
	        	enableApp();
	        }
	        
	        private function enableApp():void {
	        	if (manageLabList != null &&
	        	    filteredGenomeBuildList != null &&
	        	    promptedProjectList != null &&
	        	    filteredProjectList != null &&
	        	    promptedAppUserList != null &&
	        	    promptedLabList != null &&
	        	    slideProductList != null &&
	        	    filteredSlideProductList != null) {
	        	    	
	        	    linkButtonBar.enabled = true;
	        	    linkButtonBar.visible = true;
	        	    PopUpManager.removePopUp(appProgressBar);
	        	    searchText.visible = true;
	        	    requestNumber.visible = true;
	        	    requestNumberLabel.visible = true;
	        	    searchButton.visible = true;
	        	    lookupButton.visible = true;
	        	    searchLabel.visible = true;
	        	    
	        	    userName.visible = true;
	        	    	
		        	callLater(launchStartWindow);
	        	}
	        	
	        }
	        
	        private function launchStartWindow():void {
	        	if (launchExperimentDownloads()) {

					theViews.visible = true;
					theViews.selectedChild = navExperimentView;


	        		this.showExperimentDownload(getLaunchRequestNumber());
	        	} else if (launchExperimentDetail()) {
	        		
	        		
					theViews.visible = true;
					theViews.selectedChild = navExperimentView;

	        		this.showExperiment(getLaunchRequestNumber());
	        	}
	        	
	        }
	        
	       	private function sortDictionaryEntries(obj1:Object, obj2:Object, fields:Array=null):int {
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var display1:String = obj1.@display;
					var display2:String = obj2.@display;
					
					if (display1.indexOf('Other') > -1) {
						return 1;
					} else if (display2.indexOf('Other') > -1) {
						return  -1;
					} else {
						if (display1 < display2) {
							return -1;
						} else if (display1 > display2) {
							return 1;
						} else {
							return 0;
						}
					}			
					
				}
			}
	        
	        private function sortSampleTypes(obj1:Object, obj2:Object, fields:Array=null):int {
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var order1:int = obj1.@sortOrder;
					var order2:int = obj2.@sortOrder;
					
					if (obj1.@value == '') {
						return -1;
					} else if (obj2.@value == '') {
						return 1;
					} else {
						if (order1 < order2) {
							return -1;
						} else if (order1 > order2) {
							return 1;
						} else {
							return 0;
						}
					}
				}			
			}			
		public function sortExperimentDesigns(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var ed1:String = obj1.@experimentDesign;
				var ed2:String = obj2.@experimentDesign;
				
				if (ed1 == 'Other') {
					return 1;
				} else if (ed2 == 'Other') {
					return  -1;
				} else {
					if (ed1 < ed2) {
						return -1;
					} else if (ed1 > ed2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}
		public function sortExperimentFactors(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var ef1:String = obj1.@experimentFactor;
				var ef2:String = obj2.@experimentFactor;
				if (ef1 == 'Other') {
					return 1;
				} else if (ef2 == 'Other') {
					return  -1;
				} else  {
					if (ef1 < ef2) {
						return -1;
					} else if (ef1 > ef2) {
						return 1;
					} else {
						return 0;
					}
				}				
				
			}
		}
		
        public function lookupSlideDesignName(item:Object, col:DataGridColumn):String {
        	var sd:Object = getSlideProductList.lastResult..SlideDesign.(@idSlideDesign == item.@idSlideDesign);
        	if (sd != null) {
        		return sd.@name;
        	} else {
        		return "";
        	}
        }
            
        public function onFailHttpRequest(title:String, event:FaultEvent):void {
        	if (event.message.body is String) {
	        	var startPos:int = event.message.body.indexOf("TEXT=");
	        	var endPos:int   = event.message.body.indexOf("TYPE=");
	        	if (startPos != -1 && endPos != -1) {
		        	Alert.show(event.message.body.toString().substring(startPos + 5, endPos), title);    		
	        	} else {
	        		Alert.show(event.message.body.toString(), title);
	        	}        
        		
        	} else {
        		Alert.show(event.fault.faultCode + "\n\n" + event.fault.faultString + "\n\n" + event.fault.faultDetail, title);
        		
        	}
        }
		
		public static function createRendererWithProperties(renderer:Class, properties:Object):IFactory {  
			var factory:ClassFactory = new ClassFactory(renderer);   
			factory.properties = properties;  
			return factory;
		}            
        
        ]]>
    </mx:Script>
    
    
    <mx:XMLListCollection id="dictionaryEntries" source="{manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.LabelingReactionSize').DictionaryEntry}"/>
    <mx:XMLListCollection id="experimentDesignList" source="{getExperimentDesignList.lastResult.ExperimentDesign}" sort="{experimentDesignSorter}"/>
    <mx:XMLListCollection id="experimentFactorList" source="{getExperimentFactorList.lastResult.ExperimentFactor}" sort="{experimentFactorSorter}"/>
	<mx:Sort id="experimentDesignSorter" compareFunction="sortExperimentDesigns"
	  unique="true"/>
	<mx:Sort id="experimentFactorSorter" compareFunction="sortExperimentFactors"
	  unique="true"/>

	    <mx:VBox id="topArea" width="100%" height="100%" verticalGap="0" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0">
	    
		   <mx:ApplicationControlBar  width="100%"  id="navBar"
		   	fillAlphas="[1, 1]" dock="true"  
		   	paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
		      <mx:VBox width="100%" verticalGap="0">
			      <mx:HBox width="100%"  horizontalAlign="right" verticalAlign="top" horizontalGap="0" backgroundAlpha=".5" styleName="catalogPanel" paddingBottom="5">
			        <mx:HBox width="100%" height="100%" horizontalAlign="left" horizontalGap="0" paddingBottom="0" paddingTop="2" verticalAlign="middle">
			          <mx:Image source="assets/hciLogo_hOnly.png"/>
			          <mx:Label text="GNomEx" id="appLabel" fontFamily="Arial" fontSize="16" color="#ffffff" fontWeight="bold"/>
			          <mx:HBox width="100%" height="100%"  horizontalAlign="right" paddingLeft="10" paddingRight="12" horizontalGap="10">
			            <mx:HBox horizontalAlign="left" verticalAlign="middle" width="100%" paddingLeft="15" paddingRight="6" height="100%">
			                <mx:Label id="userName" color="#ffffff"  visible="false"/>
			            </mx:HBox>
			            
			            <mx:HBox height="100%" horizontalGap="2" verticalAlign="middle" defaultButton="{lookupButton}">
			              <mx:Label text="Lookup by #" height="18" color="#ffffff" id="requestNumberLabel"  fontFamily="Arial" visible="false"/>
			              <mx:TextInput id="requestNumber" height="18"  borderStyle="none" backgroundAlpha="0.42" width="56"  fontFamily="Arial" visible="false"/>
			              <mx:Button id="lookupButton"  
			              	fontFamily="Arial"  height="18"
			              	color="#400040" click="lookupExperiment()" visible="false" icon="@Embed('assets/arrow_right.png')"/>
			            </mx:HBox>
			            <mx:Spacer width="10"/>
			            <mx:HBox height="100%" horizontalAlign="right" horizontalGap="2" verticalAlign="middle" defaultButton="{searchButton}">
			              <mx:Label text="Search" height="18" color="#ffffff" id="searchLabel" visible="false" fontFamily="Arial"/>
			              <mx:TextInput id="searchText"  height="18"  width="118" visible="false" borderStyle="none" backgroundAlpha=".42"/>
			              <mx:Button id="searchButton" height="18" click="theViews.selectedChild=navSearchView;callLater(search)" fontFamily="Arial" visible="false" icon="@Embed('assets/magnifier.png')" toolTip="Search"/>
			            </mx:HBox>
			          </mx:HBox>
			        </mx:HBox>
			        <mx:HBox horizontalAlign="right" verticalAlign="top" horizontalGap="3">
			        	<mx:LinkButton id="dictionaryButton" label="Dictionaries" color="#ffffff" click="PopUpManager.centerPopUp(PopUpManager.createPopUp(this, HciDictionaryView, true));" visible="false" enabled="false"/>
			        	<mx:LinkButton label="Help" color="#ffffff" click="navigateToURL(new URLRequest('http://www.hci.utah.edu/internal/CSG/PublicDocs/SourceDocs/HCIApps/GNomEx/GNomEx.htm'), '_blank');"/>
			        	<mx:LinkButton label="About" color="#ffffff" click="PopUpManager.centerPopUp(PopUpManager.createPopUp(this, AboutView, true));"/>
			        </mx:HBox>
			      </mx:HBox>
			      
			      <mx:LinkBar id="linkButtonBar"
			      	 dataProvider="{theViews}" width="100%"
                     enabled="true" visible="false"  
                     verticalAlign="middle"
                     itemClick="onViewSelection()"  horizontalAlign="left" horizontalGap="20">
			      </mx:LinkBar>
	      	
		      	
		      </mx:VBox>

		      
		</mx:ApplicationControlBar>
	    
	    

        
        
	    <mx:VBox id="mainArea" width="100%" 
	    	height="100%" paddingTop="4" paddingBottom="0" paddingLeft="0" 
	    	paddingRight="0" horizontalCenter="0">
          
   
 
        <mx:ViewStack id="theViews" visible="true" width="100%" height="100%"   creationPolicy="all" paddingTop="0" paddingBottom="0">

			<mx:Canvas>
			</mx:Canvas>

		    <experiment:ExperimentEditView id="submitRequestView" label="Submit Request" title="Submit Request" 
		    	icon="@Embed('assets/tag_blue_edit.png')"  width="100%" height="100%">
            </experiment:ExperimentEditView>

	        <experiment:NavExperimentView id = "navExperimentView" width="100%" height="100%" 
	        	icon="@Embed('assets/flask.png')">
	        </experiment:NavExperimentView>

	        <analysis:NavAnalysisView id="navAnalysisView" width="100%" height="100%" 
	        	icon="@Embed('assets/map.png')">
	        </analysis:NavAnalysisView>

	        <workflow:NavWorkflowView id="navWorkflowView" width="100%" height="100%"  icon="@Embed('assets/building_go.png')">
	        </workflow:NavWorkflowView> 
 
	        <protocol:ProtocolsView id="protocolsView" label="Protocols" icon="@Embed('assets/bricks.png')">
	        </protocol:ProtocolsView>

	        <slide:SlideManagementView label="Slides" id="slideManagementView" icon="@Embed('assets/images.png')">
	        </slide:SlideManagementView>
	        
	        <user:NavUsersView id="navUsersView" icon="@Embed('assets/group.png')" width="100%" height="100%" backgroundAlpha="1.0">	
	        </user:NavUsersView>
           <search:NavSearchView id="navSearchView" icon="@Embed('assets/magnifier.png')" width="100%" height="100%" backgroundAlpha="1.0">	
	        </search:NavSearchView>


      </mx:ViewStack> 
     </mx:VBox>
     

	 </mx:VBox>
	
	
</mx:Application>
