<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"  xmlns:mx="http://www.adobe.com/2006/mxml" 
		 width="100%" height="100%" 
		 xmlns:util="views.util.*"  show="init()" >
	<mx:Label id="titleLabel" styleName="titleLabel" text="{'Run List'}"/>
	
	
	<mx:HTTPService 
		id="getInstrumentRunList" 
		url="GetInstrumentRunList.gx"
		resultFormat="e4x"
		result="onGetInstrumentRunList(event)"
		showBusyCursor="true"
		fault="parentApplication.onFailHttpRequest('Unable to get instrument run list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	
	<mx:Script> 
		<![CDATA[
			
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import mx.events.PropertyChangeEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			public var parentView:NavRunView;
			
			private function init():void {
				getList();
			}
			
			
			private function gridItemClick(event:ListEvent):void {
//				parentView.selectedChromat = chromatogramGrid.selectedItem;
				var idRun:String = runGrid.selectedItem.@idInstrumentRun;
				
				if ( event.columnIndex == 2 ) {
					parentApplication.showInstrumentRun(idRun);
				}
				selectedRuns.refresh();
			}
			
			private function submitAction():void {
				if ( comboBox.selectedItem == null ) {
					return;
				}
				
			}
			
			private function getList():void {
				getInstrumentRunList.send(getRunParameters());
			}
			
			private function onGetInstrumentRunList(event:ResultEvent):void{
				if ( getInstrumentRunList.lastResult.name() == "RunList"){
					selectedRuns.refresh();
					return;
				}
				
				Alert.show( event.result..ERROR.@message.toString(), "Error getting run list" );
				
			}
			
			private function getRunParameters():Object {
				var params:Object = new Object;
				
				/* if ( checkEmptyFilter() ) {
					params.number = 0;
					return params;
				} */
				
				if ( this.allCheckbox.selected ) {
					params.getAll = 'Y';
					return params;
				}
				
//				params.number = requestNoLookupField.text != null ? requestNoLookupField.text : '' ;
				params.createdLastWeek = this.createdLastWeekCheckbox.selected ? 'Y' : 'N' ;
				params.createdLastMonth = this.createdLastMonthCheckbox.selected ? 'Y' : 'N' ;
				params.createdLastThreeMonths = this.createdLastThreeMonthsCheckbox.selected ? 'Y' : 'N' ;
				params.createdLastYear = this.createdLastYearCheckbox.selected ? 'Y' : 'N' ;
				
				params.runLastWeek = this.lastWeekCheckbox.selected ? 'Y' : 'N' ;
				params.runLastMonth = this.lastMonthCheckbox.selected ? 'Y' : 'N' ;
				params.runLastThreeMonths = this.lastThreeMonthsCheckbox.selected ? 'Y' : 'N' ;
				params.runLastYear = this.lastYearCheckbox.selected ? 'Y' : 'N' ;
				
				if ( this.pendingCheckbox.selected ) {
					params.status = 'PENDING' ;
				}
				if ( this.processingCheckbox.selected ) {
					params.status = 'PROCESSING' ;
				}
				if ( this.runningCheckbox.selected ) {
					params.status = 'RUNNING' ;
				}
				if ( this.completeCheckbox.selected ) {
					params.status = 'COMPLETE' ;
				}
				if ( this.failedCheckbox.selected ) {
					params.status = 'FAILED' ;
				}
				
				return params;
			}
			
			private function checkEmptyFilter():Boolean {
				var empty:Boolean = true;
				
				/* if ( requestNoLookupField.text != null ? requestNoLookupField.text : '' ) {
					return false;
				} */
				if ( this.createdLastWeekCheckbox.selected ) {
					return false ;
				}
				if ( this.createdLastMonthCheckbox.selected ) {
					return false ;
				}
				if ( this.createdLastThreeMonthsCheckbox.selected ) {
					return false ;
				}
				if ( this.createdLastYearCheckbox.selected ) {
					return false ;
				}
				if ( this.lastWeekCheckbox.selected ) {
					return false ;
				}
				if ( this.lastMonthCheckbox.selected ) {
					return false ;
				}
				if ( this.lastThreeMonthsCheckbox.selected ) {
					return false ;
				}
				if ( this.lastYearCheckbox.selected ) {
					return false ;
				}
				if ( this.pendingCheckbox.selected ) {
					return false ;
				}
				if ( this.processingCheckbox.selected ) {
					return false ;
				}
				if ( this.runningCheckbox.selected ) {
					return false ;
				}
				if ( this.completeCheckbox.selected ) {
					return false ;
				}
				if ( this.failedCheckbox.selected ) {
					return false ;
				}
				
				return empty;
			}
			
			private function selectedFilterFunc(item:XML):Boolean {
				return item.@isSelected == true;
			}
			
			private function toggleDateCheckboxes(checkBoxNumber:int):void {
				if (checkBoxNumber == 0) {
					this.lastWeekCheckbox.selected = false;
					this.lastMonthCheckbox.selected = false;
					this.lastThreeMonthsCheckbox.selected = false;
					this.lastYearCheckbox.selected  = false;
					
					this.createdLastWeekCheckbox.selected  = false;
					this.createdLastMonthCheckbox.selected = false;
					this.createdLastThreeMonthsCheckbox.selected = false;
					this.createdLastYearCheckbox.selected  = false;
					
					this.pendingCheckbox.selected = false;
					this.processingCheckbox.selected = false;
					this.runningCheckbox.selected  = false;
					this.completeCheckbox.selected = false;
					this.failedCheckbox.selected  = false;
					
				} else if (checkBoxNumber == 1) {
					this.allCheckbox.selected = false;
					this.lastMonthCheckbox.selected = false;
					this.lastThreeMonthsCheckbox.selected = false;
					this.lastYearCheckbox.selected  = false;
					
				} else if (checkBoxNumber == 2) {
					this.allCheckbox.selected = false;
					this.lastWeekCheckbox.selected = false;
					this.lastThreeMonthsCheckbox.selected = false;
					this.lastYearCheckbox.selected  = false;
					
				} else if (checkBoxNumber == 3) {
					this.allCheckbox.selected = false;
					this.lastWeekCheckbox.selected  = false;
					this.lastMonthCheckbox.selected = false; 
					this.lastYearCheckbox.selected  = false;
					
				}  else if (checkBoxNumber == 4) {
					this.allCheckbox.selected = false;
					this.lastWeekCheckbox.selected  = false;
					this.lastMonthCheckbox.selected = false; 
					this.lastThreeMonthsCheckbox.selected = false;
					
				}   
			} 		 
			
			private function toggleCreateDateCheckboxes(checkBoxNumber:int):void {
				if (checkBoxNumber == 1) {
					this.allCheckbox.selected = false;
					this.createdLastMonthCheckbox.selected = false;
					this.createdLastThreeMonthsCheckbox.selected = false;
					this.createdLastYearCheckbox.selected  = false;
					
				} else if (checkBoxNumber == 2) {
					this.allCheckbox.selected = false;
					this.createdLastWeekCheckbox.selected = false;
					this.createdLastThreeMonthsCheckbox.selected = false;
					this.createdLastYearCheckbox.selected  = false;
					
				} else if (checkBoxNumber == 3) {
					this.allCheckbox.selected = false;
					this.createdLastWeekCheckbox.selected  = false;
					this.createdLastMonthCheckbox.selected = false; 
					this.createdLastYearCheckbox.selected  = false;
					
				}  else if (checkBoxNumber == 4) {
					this.allCheckbox.selected = false;
					this.createdLastWeekCheckbox.selected  = false;
					this.createdLastMonthCheckbox.selected = false; 
					this.createdLastThreeMonthsCheckbox.selected = false;
					
				}   
			} 		 
			
			private function toggleStatusCheckboxes(checkBoxNumber:int):void {
				if (checkBoxNumber == 1) {
					this.processingCheckbox.selected = false;
					this.runningCheckbox.selected  = false;
					this.completeCheckbox.selected = false;
					this.failedCheckbox.selected  = false;
					
				} else if (checkBoxNumber == 2) {
					this.pendingCheckbox.selected = false;
					this.runningCheckbox.selected  = false;
					this.completeCheckbox.selected = false;
					this.failedCheckbox.selected  = false;
					
				} else if (checkBoxNumber == 3) {
					this.pendingCheckbox.selected = false;
					this.processingCheckbox.selected = false;
					this.completeCheckbox.selected = false;
					this.failedCheckbox.selected  = false;
					
				}  else if (checkBoxNumber == 4) {
					this.pendingCheckbox.selected = false;
					this.processingCheckbox.selected = false;
					this.runningCheckbox.selected  = false;
					this.failedCheckbox.selected  = false;
					
				}   else if (checkBoxNumber == 5) {
					this.pendingCheckbox.selected = false;
					this.processingCheckbox.selected = false;
					this.runningCheckbox.selected  = false;
					this.completeCheckbox.selected = false;
					
				}   
			} 	
			
		]]>
	</mx:Script>    	
	
	<mx:XMLListCollection id = "runList" source = "{getInstrumentRunList.lastResult.InstrumentRun}" />
	<mx:XMLListCollection id = "selectedRuns" source="{getInstrumentRunList.lastResult.InstrumentRun}" 
						  filterFunction="selectedFilterFunc"/>

	<mx:VBox width = "100%" verticalGap = "0">
		<mx:HRule width = "100%" />

		<mx:HBox id = "filterBar"
				 horizontalGap = "0"
				 paddingTop = "4"
				 paddingBottom = "4"
				 paddingLeft = "0"
				 horizontalAlign = "left"
				 verticalAlign = "middle">

			<mx:Label text = "Filter by:" paddingRight = "20" />

			<mx:HBox horizontalGap="0"
					 verticalAlign="middle"
					 verticalGap="0"
					 horizontalAlign="right"
					 paddingLeft="5"
					 paddingRight="5">
				<mx:CheckBox id="allCheckbox"
							 label="All"
							 paddingRight="0"
							 paddingLeft="0"
							 horizontalGap="0">
					<mx:click>
						toggleDateCheckboxes( 0 );
						this.getList();
					</mx:click>
					
				</mx:CheckBox>
				
			</mx:HBox>
			
			<mx:VRule height="20" />
			
			<mx:HBox id = "runDateCheckboxBar"
					 horizontalGap = "0"
					 height = "100%"
					 verticalAlign = "middle"
					 verticalGap = "0"
					 horizontalAlign = "right"
					 paddingLeft = "5"
					 paddingRight = "5">
				<mx:CheckBox id = "lastWeekCheckbox"
							 label = "Run in last week"
							 paddingRight = "0"
							 horizontalGap = "0"
							 paddingLeft = "2"
							 styleName = "labelSmall">
					<mx:click>
						toggleDateCheckboxes( 1 );
						getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox id = "lastMonthCheckbox"
							 label = "month"
							 paddingRight = "0"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleDateCheckboxes( 2 );
						getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox id = "lastThreeMonthsCheckbox"
							 label = "3 months"
							 paddingRight = "0"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleDateCheckboxes( 3 );
						getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox id = "lastYearCheckbox"
							 label = "year"
							 paddingLeft = "2"
							 paddingRight = "0"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleDateCheckboxes( 4 );
						getList();
					</mx:click>

				</mx:CheckBox>

			</mx:HBox>

			<mx:VRule height = "20" />

			<mx:HBox id = "createDateCheckboxBar"
					 horizontalGap = "0"
					 height = "100%"
					 verticalAlign = "middle"
					 verticalGap = "0"
					 horizontalAlign = "right"
					 paddingLeft = "5"
					 paddingRight = "5">
				<mx:CheckBox id = "createdLastWeekCheckbox"
							 label = "Created in last week"
							 paddingRight = "0"
							 horizontalGap = "0"
							 paddingLeft = "2"
							 styleName = "labelSmall">
					<mx:click>
						toggleCreateDateCheckboxes( 1 );
						getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox id = "createdLastMonthCheckbox"
							 label = "month"
							 paddingRight = "0"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleCreateDateCheckboxes( 2 );
						getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox id = "createdLastThreeMonthsCheckbox"
							 label = "3 months"
							 paddingRight = "0"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleCreateDateCheckboxes( 3 );
						getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox id = "createdLastYearCheckbox"
							 label = "year"
							 paddingLeft = "2"
							 paddingRight = "0"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleCreateDateCheckboxes( 4 );
						getList();
					</mx:click>

				</mx:CheckBox>

			</mx:HBox>

			<mx:VRule height = "20" />

			<mx:HBox id = "statusCheckboxBar"
					 horizontalGap = "0"
					 height = "100%"
					 verticalAlign = "middle"
					 verticalGap = "0"
					 horizontalAlign = "right"
					 paddingLeft = "5">
				<mx:CheckBox label = "Pending"
							 id = "pendingCheckbox"
							 horizontalGap = "0"
							 styleName = "labelSmall"
							 paddingLeft = "2">
					<mx:click>
						toggleStatusCheckboxes( 1 );
						getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox label = "Processing"
							 id = "processingCheckbox"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleStatusCheckboxes( 2 );
						getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox label = "Running"
							 id = "runningCheckbox"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleStatusCheckboxes( 3 );
						getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox label = "Complete"
							 id = "completeCheckbox"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleStatusCheckboxes( 4 );
						getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox label = "Failed"
							 id = "failedCheckbox"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleStatusCheckboxes( 5 );
						getList();
					</mx:click>

				</mx:CheckBox>

			</mx:HBox>


		</mx:HBox>

	</mx:VBox>

	<mx:VDividedBox width = "100%"
					height = "100%"
					styleName = "form"
					paddingBottom = "4"
					paddingLeft = "4"
					paddingRight = "4"
					paddingTop = "4">

		<mx:VBox width = "100%" height = "100%" verticalGap = "1">

			<mx:HBox width = "100%" verticalAlign = "bottom">
				<mx:HBox width = "100%" verticalAlign = "middle" paddingTop = "8">
					<mx:Label text = "{'Run ' + runGrid.selectedItem.@idInstrumentRun}" fontWeight = "bold" />

				</mx:HBox>

				<mx:Spacer width = "100%" />

				<mx:Label text = "{'(' + runList.length + ' runs)'}" fontWeight = "normal" textAlign = "right" />

			</mx:HBox>

			<mx:DataGrid id = "runGrid"
						 itemClick="gridItemClick(event)"
						 click="{selectedRuns.refresh()}"
						 width = "100%"
						 height = "100%"
						 dataProvider = "{runList}"
						 sortArrowSkin="mx.skins.ProgrammaticSkin">
				<mx:columns>
					
					<mx:DataGridColumn id = "checkBoxColumn"
									   textAlign = "center"
									   width = "30"
									   resizable = "false"
									   sortable = "false"
									   editable = "true"
									   rendererIsEditor = "true"
									   dataField = "@isSelected"
									   editorDataField = "selected"
									   itemRenderer = "views.renderers.CheckBoxIsSelectedToggle"
									   headerRenderer = "views.renderers.CheckBoxHeader"
									   draggable="false"/>
					
					<mx:DataGridColumn dataField="@idInstrumentRun"
									   headerText="ID"
									   width="50"
									   draggable="false" />

					<mx:DataGridColumn dataField = "@label"
									   headerText = "Label"
									   width = "175"
									   textDecoration = "underline"
									   color = "#2017D8"
									   draggable="false">
						<mx:headerRenderer>
							<mx:Component>
								<mx:Label text = "Label" textDecoration = "none" color = "#000000" />

							</mx:Component>

						</mx:headerRenderer>

					</mx:DataGridColumn>

					<mx:DataGridColumn dataField = "@creator" headerText = "Created by" width = "75" />

					<mx:DataGridColumn dataField = "@createDate" headerText = "Created on" width = "80" />

					<mx:DataGridColumn dataField = "@runDate" headerText = "Run on" width = "80" />

					<mx:DataGridColumn dataField = "@codeInstrumentRunStatus" headerText = "Status" width = "70" />

					<mx:DataGridColumn dataField = "@codeReactionType" headerText = "Reaction Type" width = "100" />

					<mx:DataGridColumn dataField = "@codeSealType" headerText = "Seal Type" width = "80" />

					<mx:DataGridColumn dataField = "@comments" headerText = "Comments" width = "250" />

				</mx:columns>

			</mx:DataGrid>

		</mx:VBox>

	</mx:VDividedBox>


	<mx:ControlBar horizontalAlign = "left" width = "100%">
		<mx:Label id = "nSelectedRuns" text="{selectedRuns.length + ' selected'}" />
		
		<mx:ComboBox id = "comboBox" 
					 prompt="Select Action" 
					 dataProvider="{selectedRuns}" 
					 labelField="@label" />
		
		<mx:LinkButton textDecoration = "underline"
					   label = "Go"
					   icon = "@Embed('../../assets/bullet_go.png')"
					   toolTip = "Submit action" 
					   click="{submitAction()}" 
					   visible="{selectedRuns.length>0}"/>
		
		<mx:Spacer width="100%" height="100%" />
		
		<mx:LinkButton textDecoration = "underline"
					   label = "Refresh"
					   click = "{getList();}"
					   icon = "@Embed('../../assets/action_refresh.gif')"
					   toolTip = "Refresh run list" />

	</mx:ControlBar>

</mx:VBox>
