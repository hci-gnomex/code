<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"  xmlns:mx="http://www.adobe.com/2006/mxml" 
		 width="100%" height="100%" backgroundAlpha="0"
		 xmlns:util="views.util.*" xmlns:run="views.run.*"  show="init()" verticalGap="0">
	
	<mx:HTTPService 
		id="getInstrumentRunList" 
		url="GetInstrumentRunList.gx"
		resultFormat="e4x"
		result="onGetInstrumentRunList(event)"
		showBusyCursor="true"
		fault="parentApplication.onFailHttpRequest('Unable to get instrument run list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="deleteInstrumentRuns" 
		url="DeleteInstrumentRuns.gx"
		resultFormat="e4x"
		result="onDeleteInstrumentRuns(event)"
		showBusyCursor="true"
		fault="parentApplication.onFailHttpRequest('Unable to delete Instrument Runs', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="saveInstrumentRun" 
		url="SaveInstrumentRun.gx"
		resultFormat="e4x"
		result="onSaveInstrumentRun(event)"
		showBusyCursor="true"
		fault="parentApplication.onFailHttpRequest('Unable to save run', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	<mx:Script> 
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			
			import mx.controls.Alert;
			import mx.core.ScrollPolicy;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.events.PropertyChangeEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import views.util.EmailWindowForInstrumentRuns;
			
			// Warning Icon
			[Embed( source = '../../assets/error.png' )]
			[Bindable]
			public var iconWarning:Class;
			
			[Bindable]
			public var parentView:NavRunView;
			
			public function init():void {
				getList();
			}
			
			
			private function gridItemClick(event:ListEvent):void {
				var idRun:String = runGrid.selectedItem.@idInstrumentRun;
				
				if ( event.columnIndex == 2 ) {
					parentApplication.showInstrumentRun(idRun);
				}
				if ( event.columnIndex != 0 && event.columnIndex != 2 ) {
					runGrid.selectedIndex = -1;
				}
				if ( event.columnIndex == 0 && runGrid.selectedItems.length > 1 ) {
					for each ( var obj1:Object in runGrid.selectedItems ) {
						obj1.@isSelected = true;
					}
				}
				selectedRuns.refresh();
			}
			
			private function submitAction():void {
				if ( comboBox.selectedItem == null ) {
					return;
				}
				for each ( var run:Object in selectedRuns ) {
					run.@codeInstrumentRunStatus = comboBox.selectedItem.@codeInstrumentRunStatus;
					
					var params:Object = new Object;
					params.idInstrumentRun = run.@idInstrumentRun;
					params.codeInstrumentRunStatus = comboBox.selectedItem.@codeInstrumentRunStatus;
					saveInstrumentRun.send( params );
				}
				
			}
			
			private function onSaveInstrumentRun( event:ResultEvent ):void {
				if ( event.result.name() == "SUCCESS" ) {
					parentDocument.getList();
					return;
				}
				Alert.show( event.result..ERROR.@message.toString(), "Error saving runs" );
				
			}
			
			public function getList():void {
				getInstrumentRunList.send(getRunParameters());
			}
			
			private function onGetInstrumentRunList(event:ResultEvent):void{
				if ( getInstrumentRunList.lastResult.name() == "RunList"){
					selectedRuns.refresh();
					return;
				}
				
				Alert.show( event.result..ERROR.@message.toString(), "Error getting run list" );
				
			}
			
			private function promptToDelete():void {
				var canDel:Boolean = true;
				for each ( var run:Object in selectedRuns ) {
					if ( run.@codeInstrumentRunStatus != "PENDING" ) {
						canDel = false;
					}
				}
				if ( canDel ) {
					Alert.show( "Are you sure you want to delete these runs?", "Confirm Delete", ( Alert.YES | Alert.NO ), this, onPromptToDelete, iconWarning );
					
				} else {
					Alert.show( "Only pending runs can be deleted.", "Cannot Delete Runs" );
				}
			}
			
			private function onPromptToDelete( event:CloseEvent ):void {
				
				if ( event.detail == Alert.YES ) {
					deleteRuns();
				}
			}
			
			private function deleteRuns():void {
				var params:Object = new Object;
				var runsToDelete:String = "<InstrumentRuns>";
				
				for each(var node:XML in selectedRuns){
					runsToDelete += "<idInstrumentRun>" + node[0].@idInstrumentRun + "</idInstrumentRun>";
				} 
				runsToDelete += "</InstrumentRuns>";
				params.runsToDeleteXMLString = new XML(runsToDelete);
				deleteInstrumentRuns.send(params);
				
			}
			
			private function onDeleteInstrumentRuns(event:ResultEvent):void{
				if ( event.result.name() == "SUCCESS" ) {
					getList();
					return;
				}
				Alert.show( event.result..ERROR.@message.toString(), "Error deleting runs" );
				
			}
			
			private function getRunParameters():Object {
				var params:Object = new Object;
				
				if ( parentDocument.allCheckbox.selected ) {
					params.getAll = 'Y';
					return params;
				}
				
				params.runName = parentDocument.lookupRunNameField.text != '' ? parentDocument.lookupRunNameField.text : '';
				params.createdLastWeek = parentDocument.lastWeekCheckboxCreated.selected ? 'Y' : 'N' ;
				params.createdLastMonth = parentDocument.lastMonthCheckboxCreated.selected ? 'Y' : 'N' ;
				params.createdLastThreeMonths = parentDocument.lastThreeMonthsCheckboxCreated.selected ? 'Y' : 'N' ;
				params.createdLastYear = parentDocument.lastYearCheckboxCreated.selected ? 'Y' : 'N' ;
				
				params.runLastWeek = parentDocument.lastWeekCheckbox.selected ? 'Y' : 'N' ;
				params.runLastMonth = parentDocument.lastMonthCheckbox.selected ? 'Y' : 'N' ;
				params.runLastThreeMonths = parentDocument.lastThreeMonthsCheckbox.selected ? 'Y' : 'N' ;
				params.runLastYear = parentDocument.lastYearCheckbox.selected ? 'Y' : 'N' ;
				
				if ( parentDocument.pendingCheckbox.selected ) {
					params.status = 'PENDING' ;
				}
				if ( parentDocument.runningCheckbox.selected ) {
					params.status = 'RUNNING' ;
				}
				if ( parentDocument.completeCheckbox.selected ) {
					params.status = 'COMPLETE' ;
				}
				if ( parentDocument.failedCheckbox.selected ) {
					params.status = 'FAILED' ;
				}
				
				if ( parentDocument.capSeqCheckbox.selected ) {
					params.codeReactionType = 'SEQ' ;
				}
				if ( parentDocument.fragCheckbox.selected ) {
					params.codeReactionType = 'FRAG' ;
				}
				if ( parentDocument.mitoCheckbox.selected ) {
					params.codeReactionType = 'MIT' ;
				}
				if ( parentDocument.cherryCheckbox.selected ) {
					params.codeReactionType = 'CHERRY' ;
				}
				
				return params;
			}
			
			private function checkEmptyFilter():Boolean {
				
				if ( parentDocument.lastWeekCheckbox.selected ) {
					return false ;
				}
				if ( parentDocument.lastMonthCheckbox.selected ) {
					return false ;
				}
				if ( parentDocument.lastThreeMonthsCheckbox.selected ) {
					return false ;
				}
				if ( parentDocument.lastYearCheckbox.selected ) {
					return false ;
				}
				if ( parentDocument.lastWeekCheckboxCreated.selected ) {
					return false ;
				}
				if ( parentDocument.lastMonthCheckboxCreated.selected ) {
					return false ;
				}
				if ( parentDocument.lastThreeMonthsCheckboxCreated.selected ) {
					return false ;
				}
				if ( parentDocument.lastYearCheckboxCreated.selected ) {
					return false ;
				}
				if ( parentDocument.pendingCheckbox.selected ) {
					return false ;
				}
				if ( parentDocument.runningCheckbox.selected ) {
					return false ;
				}
				if ( parentDocument.completeCheckbox.selected ) {
					return false ;
				}
				if ( parentDocument.failedCheckbox.selected ) {
					return false ;
				}
				if ( parentDocument.capSeqCheckbox.selected ) {
					return false;
				}
				if ( parentDocument.fragCheckbox.selected ) {
					return false;
				}
				if ( parentDocument.mitoCheckbox.selected ) {
					return false;
				}
				if ( parentDocument.cherryCheckbox.selected ) {
					return false;
				}
				
				return true;
			}
			
			private function selectedFilterFunc(item:XML):Boolean {
				return item.@isSelected == true;
			}
			
			public function createRunFile(event:MouseEvent):void {
				var idRun:int = (int)(runList[runGrid.selectedIndex].@idInstrumentRun);
				
				var url:URLRequest = new URLRequest('DownloadABIRunFileServlet.gx' +
					'?idInstrumentRun=' + idRun);
				navigateToURL(url, '_blank');
			}
			
			private function showEmailWindow():void{
				var emailWindow:EmailWindowForInstrumentRuns = EmailWindowForInstrumentRuns(PopUpManager.createPopUp(this, EmailWindowForInstrumentRuns, true));
				emailWindow.selectedRuns = this.selectedRuns;
				PopUpManager.centerPopUp(emailWindow);
				this.setFocus();
				
			}
			
		]]>
	</mx:Script>    	
	
	<mx:XMLListCollection id = "runList" source = "{getInstrumentRunList.lastResult.InstrumentRun}" />
	<mx:XMLListCollection id = "selectedRuns" source="{getInstrumentRunList.lastResult.InstrumentRun}" 
						  filterFunction="selectedFilterFunc"/>
	<mx:VDividedBox width = "100%"
					height = "100%"
					paddingBottom = "4"
					paddingLeft = "4"
					paddingRight = "4"
					paddingTop = "4">
	<mx:VBox width = "100%" height = "100%" verticalGap = "1">
		
		<mx:HBox width = "100%" verticalAlign = "bottom">
			<mx:Spacer width = "100%" />
			
		</mx:HBox>
		
		<mx:DataGrid id = "runGrid" minWidth="0" horizontalScrollPolicy="{ScrollPolicy.AUTO}"
					 allowMultipleSelection="true"
					 itemClick="gridItemClick(event)"
					 click="{selectedRuns.refresh()}"
					 width = "100%"
					 height = "100%"
					 dataProvider = "{runList}"
					 sortArrowSkin="mx.skins.ProgrammaticSkin">
			<mx:columns>
				
				<mx:DataGridColumn id = "checkBoxColumn"
								   textAlign = "center"
								   width = "30" 
								   resizable = "false"
								   sortable = "false"
								   editable = "true"
								   rendererIsEditor = "true"
								   dataField = "@isSelected"
								   editorDataField = "selected"
								   itemRenderer = "views.renderers.CheckBoxIsSelectedToggle"
								   headerRenderer = "views.renderers.CheckBoxHeader"
								   draggable="false"/>
				
				<mx:DataGridColumn   minWidth="28" width="50" headerText="#">
					<mx:itemRenderer>
						<mx:Component >
							<mx:HBox paddingLeft="1" horizontalGap="0"   horizontalScrollPolicy="off">
								<mx:Image id="experimentImage"  
										  source="{data.@icon}" >
								</mx:Image> 
								<mx:Label id="requestNumber" text="{data.@idInstrumentRun}">
								</mx:Label>
							</mx:HBox>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn> 
				
				<mx:DataGridColumn dataField = "@label"
								   headerText = "Label"
								   width = "175"
								   textDecoration = "underline"
								   color = "#2017D8"
								   draggable="false">
					<mx:headerRenderer>
						<mx:Component>
							<mx:Label text = "Label" textDecoration = "none" color = "#000000" />
							
						</mx:Component>
						
					</mx:headerRenderer>
					
				</mx:DataGridColumn>
				
				<mx:DataGridColumn dataField = "@creator" headerText = "Created by" width = "95" />
				
				<mx:DataGridColumn dataField = "@createDate" headerText = "Created on" width = "80" />
				
				<mx:DataGridColumn dataField = "@runDate" headerText = "Run on" width = "80" />
				
				<mx:DataGridColumn headerText="Create PLT" headerWordWrap="true" editable="false" width="80">
					<mx:itemRenderer>
						<mx:Component>
							<mx:LinkButton label="Create PLT" click="outerDocument.createRunFile(event)" color="#0000FF" textDecoration = "underline" textAlign="left"/>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				
				<mx:DataGridColumn dataField = "@codeInstrumentRunStatus" 
								   headerText = "Status" width = "70"
								   itemRenderer="{hci.flex.controls.DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.InstrumentRunStatus').DictionaryEntry, '@display', '@value', '@codeInstrumentRunStatus')}"/>
				
				
				<mx:DataGridColumn dataField = "@codeReactionType" 
								   headerText = "Reaction Type" width = "125"
								   itemRenderer="{hci.flex.controls.DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ReactionType').DictionaryEntry, '@display', '@value', '@codeReactionType')}"/>
				
				<mx:DataGridColumn dataField = "@codeSealType" 
								   headerText = "Seal" width = "80" 
								   itemRenderer="{hci.flex.controls.DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SealType').DictionaryEntry, '@display', '@value', '@codeSealType')}"/>
				
				<mx:DataGridColumn dataField = "@comments" headerText = "Comments" />
				
			</mx:columns>
			
		</mx:DataGrid>
		
	</mx:VBox>
	</mx:VDividedBox>
	<mx:ControlBar horizontalAlign = "left" width = "100%" paddingTop="2" paddingBottom="2">
		<mx:Label id = "nSelectedRuns" text="{selectedRuns.length + ' selected'}" />
		
		<mx:ComboBox id = "comboBox" 
					 prompt="- Change Status -" 
					 dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.InstrumentRunStatus').DictionaryEntry}"
					 labelField="@codeInstrumentRunStatus" />
		
		<mx:LinkButton textDecoration = "underline"
					   label = "Go"
					   icon = "@Embed('../../assets/bullet_go.png')"
					   disabledIcon="@Embed('../../assets/bullet_go_disable.png')"
					   toolTip = "Submit action" 
					   click="{submitAction()}" 
					   enabled="{selectedRuns.length>0}"/>
		
		<mx:LinkButton textDecoration="underline"
					   label="Delete"
					   icon="@Embed('../../assets/delete.png')"
					   toolTip="Delete selected runs"
					   click="{promptToDelete()}" 
					   disabledIcon="@Embed('../../assets/delete_disable.png')"
					   enabled="{selectedRuns.length>0}"/>
		
		<mx:LinkButton textDecoration="underline"
					   label="Email"
					   icon="@Embed('../../assets/email_go.png')"
					   toolTip="Email GNomEx users associated with selected runs"
					   click="{showEmailWindow()}" 
					   disabledIcon="@Embed('../../assets/email_go_disable.png')"
					   enabled="{selectedRuns.length>0}"/>
		
		<mx:Spacer width="100%" height="100%" />
		<mx:Label text = "{'(' + runList.length + ' runs)'}" fontWeight = "normal" textAlign = "right"  fontStyle="italic"/>
		
		
	</mx:ControlBar>
	
</mx:VBox>
