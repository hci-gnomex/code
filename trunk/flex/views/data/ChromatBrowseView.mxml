<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"
		 xmlns:mx="http://www.adobe.com/2006/mxml"
		 width="100%"
		 height="100%"
		 xmlns:util="views.util.*"
		 xmlns:renderers="views.renderers.*"
		 show="init()"
		 initialize="init()"
		 defaultButton="{lookupButton}"
		 xmlns:s="library://ns.adobe.com/flex/spark" verticalGap="0">
	
	<mx:HBox width="100%" paddingLeft="2" paddingTop="2" paddingRight="2" horizontalGap="0" id="hbox2">
		<mx:Image source="assets/tv_chart.png"/>
		<mx:Label id="titleLabel" styleName="titleLabel" text="Chromatograms" />
		<mx:Spacer width="100%"/>
		
		<mx:HBox horizontalGap="0"
				 height="100%"
				 verticalAlign="middle"
				 verticalGap="0"
				 width="140" id="hbox1a">
			<mx:Label text="Run #" />
			
			<mx:TextInput id="runNoLookupField"
						  fontSize="9"
						  height="19"
						  width="40"
						  change="{setRunDefaultButton()}" />
			
			<mx:Button id="runLookupButton"
					   fontFamily="Arial"
					   height="18"
					   width="30"
					   color="#400040"
					   visible="true"
					   icon="@Embed('../../assets/arrow_right.png')"
					   click="{if (runNoLookupField.text != '') this.getList();}" />
			
		</mx:HBox>
		
		
		<mx:HBox horizontalGap="0"
				 height="100%"
				 verticalAlign="middle"
				 verticalGap="0"
				 width="150" id="hbox1">
			<mx:Label text="Order #" />
			
			<mx:TextInput id="requestNoLookupField"
						  fontSize="9"
						  height="19"
						  width="40"
						  change="{setDefaultButton()}" />
			
			<mx:Button id="lookupButton"
					   fontFamily="Arial"
					   height="18"
					   width="30"
					   color="#400040"
					   visible="true"
					   icon="@Embed('../../assets/arrow_right.png')"
					   click="{if (requestNoLookupField.text != '') this.getList();}" />
		
		</mx:HBox>
		<mx:LinkButton textDecoration="underline"
					   label="Refresh"
					   icon="@Embed('../../assets/action_refresh.gif')"
					   toolTip="Refresh chromatogram list"
					   click="{this.getList();}"  paddingLeft="8" id="linkbutton3"/>
		
	</mx:HBox>


	<mx:HTTPService id="getChromatogramList"
					url="GetChromatogramList.gx"
					resultFormat="e4x"
					showBusyCursor="true"
					result="onGetChromatogramList(event)"
					fault="parentApplication.onFailHttpRequest('Failed to get chromatogram list', event)"
					method="POST"
					useProxy="false">
	</mx:HTTPService>

	<mx:HTTPService id="saveChromatogramList"
					url="SaveChromatogramList.gx"
					resultFormat="e4x"
					showBusyCursor="true"
					result="onSaveChromatogramList(event)"
					fault="parentApplication.onFailHttpRequest('Failed to save chromatogram list', event)"
					method="POST"
					useProxy="false">
	</mx:HTTPService>
	
	<mx:HTTPService id="deleteChromatograms"
					url="DeleteChromatograms.gx"
					resultFormat="e4x"
					showBusyCursor="true"
					result="onDeleteChromatograms(event)"
					fault="parentApplication.onFailHttpRequest('Failed to delete chromatogram list', event)"
					method="POST"
					useProxy="false">
	</mx:HTTPService>

	<mx:HTTPService  
		id="cacheFileDownloadList" 
		url="CacheFileDownloadList.gx"
		destination="cacheFileDownloadList"
		resultFormat="e4x"
		showBusyCursor="false"
		result="onCacheFileDownloadList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get cache file download list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="cacheFDTFileDownloadList" 
		url="CacheFileDownloadList.gx"
		destination="cacheFileDownloadList"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onCacheFDTFileDownloadList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get cache file download list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>

	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.controls.List;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.events.PropertyChangeEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import views.experiment.DownloadProgressView;
			import views.util.FileUtil;

			// Warning Icon
			[Embed( source = '../../assets/error.png' )]
			[Bindable]
			public var iconWarning:Class;
			
			public var parentView:NavDataView;

			public var selectedList:ListCollectionView;
			
			[Bindable]
			public var idRequest:String;

			[Bindable]
			private var actionDictionary:XMLListCollection = new XMLListCollection();
			
			private var dictXML:XML = <actionDictionary>
									<action value="RELEASE"   display="Release data to user" />
									<action value="REQUEUE"    display="Release and requeue samples" />
								</actionDictionary>;

			
			[Bindable]
			public var selectedFiles:XMLListCollection;
			
			private var estimatedDownloadSize:Number;
			
			private const DOWNLOAD_FOLDERS_URL:String  = "DownloadResultsServlet.gx"; 
			private const DOWNLOAD_FILES_URL:String    = "DownloadFileServlet.gx"; 
			private const SUGGESTED_LOCAL_FILENAME:String = "gnomex-data";  
			
			private var filesExceedingMaxMessage:String = "";
			
			public var downloadProgressWindow:DownloadProgressView;
			
			
			public static const   ALERT_BUTTON_WIDTH:int = Alert.buttonWidth;
			

			private function init():void {
				
				if ( currentState == userState.name ) {
					// Don't get the chromatogram list here because the idRequest
					// isn't initialized yet.
					
				} else {
					
					actionDictionary.source = dictXML.action;
					this.getList();
				}
			}
			
			public function getList():void {
				this.getChromatogramList.send( getChromatParameters() );
			}
			
			private function getChromatParameters():Object {
				var params:Object = new Object;
				
				if ( currentState != userState.name ) {
					params.idInstrumentRun = runNoLookupField.text != null ? runNoLookupField.text : '' ;
					params.requestNumber = requestNoLookupField.text != null ? requestNoLookupField.text : '' ;
					params.capSeq = this.capSeqCheckbox.selected ? 'Y' : 'N' ;
					params.mitSeq = this.mitSeqCheckbox.selected ? 'Y' : 'N' ;
					params.lastWeek = this.lastWeekCheckbox.selected ? 'Y' : 'N' ;
					params.lastMonth = this.lastMonthCheckbox.selected ? 'Y' : 'N' ;
					params.lastThreeMonths = this.lastThreeMonthsCheckbox.selected ? 'Y' : 'N' ;
					params.lastYear = this.lastYearCheckbox.selected ? 'Y' : 'N' ;
					params.getAll = this.allCheckbox.selected ? 'Y' : 'N';
					params.released = this.releasedCheckbox.selected ? 'Y' : notReleasedCheckbox.selected ? 'N' : ''
				}
				
				if ( currentState == userState.name ) {
					params.released = 'Y';
					params.idRequest = idRequest;
				}
				
				return params;
			}
			

			private function onGetChromatogramList( event:ResultEvent ):void {
				if ( event.result.name() == "ChromatogramList" ) {
					selectedChromats.refresh();
					comboBox.selectedIndex = -1;
					return;
				}
				Alert.show( event.result..ERROR.@message.toString(), "Error getting chromatogram list" );

			}

			
			private function gridItemClick( event:ListEvent ):void {
				if ( currentState != userState.name ) {
					if ( chromatogramGrid.selectedItem != null ) {
						parentView.selectedChromat = chromatogramGrid.selectedItem;
						parentView.selectedIdChromatogram = chromatogramGrid.selectedItem.@idChromatogram as int;
					}
					
					if ( event.columnIndex == 3 ) {
						parentView.chromatViews.selectedChild = parentView.chromatDetailView;	
					}
				}
				if ( event.columnIndex == 3 && currentState == userState.name ) {
					var addWindow:ChromatDetailView;
					addWindow = ChromatDetailView(mx.managers.PopUpManager.createPopUp(parentApplication.theBody, ChromatDetailView, true));
					addWindow.selectedChromat = chromatogramGrid.selectedItem;
					addWindow.selectedIdChromatogram = chromatogramGrid.selectedItem.@idChromatogram as int;
					addWindow.currentState = "userState";
					addWindow.init();
					mx.managers.PopUpManager.centerPopUp(addWindow);
					addWindow.setFocus();
				}
				if ( event.columnIndex != 0 && event.columnIndex != 3 ) {
					chromatogramGrid.selectedIndex = -1;
				}
				
				selectedChromats.refresh();
			}

			private function selectionChange( event:ListEvent ):void {
				for each ( var obj:Object in chromatogramGrid ) {
					obj.@isSelected = false;
				}
				for each ( var obj1:Object in chromatogramGrid.selectedItems ) {
					obj1.@isSelected = true;
				}
			}
			
			
			private function submitAction():void {
				if ( currentState == userState.name ) {
					// download
				}
				
				if ( comboBox.selectedItem == null ) {
					return;
				}
				
				// Release Data to Users
				if ( comboBox.selectedItem.@value == "RELEASE" ) {
					for each ( var ch:Object in selectedChromats ) {
						ch.@released = "Y";
					}
					var params:Object = new Object;
					params.chromatogramXMLString = selectedChromats.toXMLString();
					saveChromatogramList.send( params );
				}
				// Release and Requeue
				if ( comboBox.selectedItem.@value == "REQUEUE" ) {
					for each ( var ch1:Object in selectedChromats ) {
						ch1.@released = "Y";
						ch1.@requeue = "Y";
					}
					var params1:Object = new Object;
					params1.chromatogramXMLString = selectedChromats.toXMLString();
					saveChromatogramList.send( params1 );
				}
			}


			private function onSaveChromatogramList( event:ResultEvent ):void {
				if ( event.result.name() == "SUCCESS" ) {
					this.getList();
					return;
				}
				Alert.show( event.result..ERROR.@message.toString(), "Error saving chromatogram list" );

			}

			
			private function promptToDelete():void {
				
				Alert.show( "Are you sure you want to delete these chromatograms?", "Confirm Delete", ( Alert.YES | Alert.NO ), this, onPromptToDelete, iconWarning );
			}
			
			private function onPromptToDelete( event:CloseEvent ):void {
				
				if ( event.detail == Alert.YES ) {
					deleteChromats();
				}
			}
			
			private function deleteChromats():void {
				var params:Object = new Object;
				params.chromatsToDeleteXMLString = "<chromatograms>" +  selectedChromats.toXMLString() + "</chromatograms>";
				deleteChromatograms.send(params);
			}
			
			private function onDeleteChromatograms(event:ResultEvent):void{
				if ( event.result.name() == "SUCCESS" ) {
					this.getList();
					return;
				}
				Alert.show( event.result..ERROR.@message.toString(), "Error deleting chromatogram list" );
				
			}
			

			private function selectedFilterFunc( item:XML ):Boolean {
				return item.@isSelected == true;
			}


			public function toggleDateCheckboxes( checkBoxNumber:int ):void {
				if ( currentState != userState.name ) {
					this.runNoLookupField.text = "";
					this.requestNoLookupField.text = "";
					if ( checkBoxNumber == 0 ) {
						actionDictionary.source = dictXML.action;
						this.notReleasedCheckbox.selected = false;
						this.releasedCheckbox.selected = false;
						this.lastMonthCheckbox.selected = false;
						this.lastWeekCheckbox.selected = false;
						this.lastThreeMonthsCheckbox.selected = false;
						this.lastYearCheckbox.selected = false;
					} else if ( checkBoxNumber == 1 ) {
						this.allCheckbox.selected = false;
						this.lastMonthCheckbox.selected = false;
						this.lastThreeMonthsCheckbox.selected = false;
						this.lastYearCheckbox.selected = false;
					} else if ( checkBoxNumber == 2 ) {
						this.allCheckbox.selected = false;
						this.lastWeekCheckbox.selected = false;
						this.lastThreeMonthsCheckbox.selected = false;
						this.lastYearCheckbox.selected = false;
					} else if ( checkBoxNumber == 3 ) {
						this.allCheckbox.selected = false;
						this.lastWeekCheckbox.selected = false;
						this.lastMonthCheckbox.selected = false;
						this.lastYearCheckbox.selected = false;
					} else if ( checkBoxNumber == 4 ) {
						this.allCheckbox.selected = false;
						this.lastWeekCheckbox.selected = false;
						this.lastMonthCheckbox.selected = false;
						this.lastThreeMonthsCheckbox.selected = false;
					}
				}
			}


			public function toggleReleaseCheckboxes( checkBoxNumber:int ):void {
				this.runNoLookupField.text = "";
				this.requestNoLookupField.text = "";
				if ( checkBoxNumber == 0 ) {
					this.allCheckbox.selected = false;
					this.notReleasedCheckbox.selected = false;
				} else if ( checkBoxNumber == 1 ) {
					this.allCheckbox.selected = false;
					this.releasedCheckbox.selected = false;
				}
			}

			public function toggleReactionCheckboxes( checkBoxNumber:int ):void {
				this.runNoLookupField.text = "";
				this.requestNoLookupField.text = "";
				if ( checkBoxNumber == 0 ) {
					this.allCheckbox.selected = false;
					this.mitSeqCheckbox.selected = false;
				} else if ( checkBoxNumber == 1 ) {
					this.allCheckbox.selected = false;
					this.capSeqCheckbox.selected = false;
				}
			}

			private function setDefaultButton():void {
				if ( currentState != userState.name ) {
					actionDictionary.source = dictXML.action; 
				}
				if ( this.requestNoLookupField.text != '' ) {
					this.allCheckbox.selected = false;
					this.lastWeekCheckbox.selected = false;
					this.lastMonthCheckbox.selected = false;
					this.lastThreeMonthsCheckbox.selected = false;
					this.lastYearCheckbox.selected = false;
					this.notReleasedCheckbox.selected = false;
					this.releasedCheckbox.selected = false;
				}
			}

			
			private function setRunDefaultButton():void {
				if ( currentState != userState.name ) {
					actionDictionary.source = dictXML.action; 
				}
				if ( this.runNoLookupField.text != '' ) {
					this.allCheckbox.selected = false;
					this.lastWeekCheckbox.selected = false;
					this.lastMonthCheckbox.selected = false;
					this.lastThreeMonthsCheckbox.selected = false;
					this.lastYearCheckbox.selected = false;
					this.notReleasedCheckbox.selected = false;
					this.releasedCheckbox.selected = false;
				}
			}

			private function fieldNumericSorter( field:String ):Function {
				return function( obj1:Object, obj2:Object ):int {
					var num:Number = (( Number )( obj1.attribute( field )) - ( Number )( obj2.attribute( field )));
					return ( num > 0 ) ? 1 : (( num < 0 ) ? -1 : 0 );
				}
			}
			
			
			private function downloadFiles():void {
				selectedFiles = new XMLListCollection();
				for each (var c:Object in chromats) {
					if (c.@isSelected == 'true') {
						var node:XML = new XML("<FileDescriptor " +
							" fileName ='" + c.@qualifiedFilePath + "/" + c.@displayName + "'" +
							" zipEntryName='" + c.@requestNumber + "/" + c.@displayName + "'" +
							" type='ab1'"  +
							" fileSize='" + c.@fileSize + "'" +
							" requestNumber='" + c.@requestNumber + "'" + "/>");
						selectedFiles.addItem(node);
					}
				}
				
				filesExceedingMaxMessage = "";
				if (selectedFiles.length == 0) {
					Alert.show("Please select the files to download.");
				} else {
					estimatedDownloadSize = 0;
					for each (var item:Object in selectedFiles) {
						var size:Number = FileUtil.getEstimatedCompressedSize(item);
						if (size > parentApplication.MAX_DOWNLOAD_SIZE) {
							if (filesExceedingMaxMessage.length > 0) {
								filesExceedingMaxMessage += ", ";
							}
							filesExceedingMaxMessage += item.@displayName;
						}
						estimatedDownloadSize += size;
					}
					
					var params:Object = new Object();
					params.fileDescriptorXMLString = selectedFiles.toXMLString();
					var call:Object = cacheFileDownloadList.send(params);
					call.marker = estimatedDownloadSize;    		
				}
			}
			private function onCacheFileDownloadList(event:ResultEvent):void {
				var call:Object = event.token;
				var message:String = "";
				var title:String = "";
				var estimatedSize:Number = call.marker;
				if (filesExceedingMaxMessage != "") {
					message = "The following files exceed the " + parentApplication.MAX_DOWNLOAD_SIZE_DISPLAY + " maximum:\n" + this.filesExceedingMaxMessage + ".\n\n";
					if (parentApplication.isFDTSupported) {
						message += "Do you want to be download using FDT instead?";
					} else {
						message += "Please select a smaller number of files to download.";
						return;
					}
					title = "Download file exceeds maximum size"; 
					Alert.show( message,
						title,
						(Alert.OK | Alert.CANCEL), this, 
						onAlternateDownloadFiles,						
						parentApplication.iconWarning);
					
				} else if (estimatedSize >= parentApplication.MAX_DOWNLOAD_SIZE) {
					message =  
						"The total download size (" + FileUtil.getFileSizeText(call.marker) + ") exceeds the " + parentApplication.MAX_DOWNLOAD_SIZE_DISPLAY + " maximum.\n\nYou must unselect some files or click on the 'Download large files' link to download files individually."
					title = "Total download size exceeds maximum size"; 
					Alert.show( message, title);
					
				} else {
					message = "Ready to download approximately " + FileUtil.getFileSizeText(call.marker) + " of data.  Proceed?";
					Alert.show( message,
						title,
						(Alert.YES | Alert.NO), this, 
						onDownloadFiles,						
						parentApplication.iconWarning);
				}
				
				
			}
			private function onDownloadFiles(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					var parms:URLVariables = new URLVariables();
					parms.mode =  "zip";
					var progressWindow:DownloadProgressView = new DownloadProgressView();
					progressWindow.init(this, this.DOWNLOAD_FILES_URL, parms, parentDocument.downloadExpandedFilesButton, estimatedDownloadSize, this.SUGGESTED_LOCAL_FILENAME);		
				}
			}    
			
			private function onAlternateDownloadFiles(event:CloseEvent):void {
				if (event.detail==Alert.OK) {
					if (parentApplication.isFDTSupported) {
						downloadFilesUsingFDT();
					} else {
						Alert.show("Please select a smaller number of files to download.");	
					}
				} 		
			}
			public function downloadFilesUsingFDT():void {
				selectedFiles= new XMLListCollection();					
				for each (var c:Object in chromats) {
					if (c.@isSelected == 'true') {
						var node:XML = new XML("<FileDescriptor " +
							" fileName ='" + c.@qualifiedFilePath + "/" + c.@displayName + "'" +
							" zipEntryName='" + c.@requestNumber + "/" + c.@displayName + "'" +
							" type='ab1'"  +
							" fileSize='" + c.@fileSize + "'" +
							" requestNumber='" + c.@requestNumber + "'" + "/>");
						selectedFiles.addItem(node);
					}
				}

				if (selectedFiles.length == 0) {
					mx.controls.Alert.show("Please select the files to download.");
				} else {
					var params:Object = new Object();
					params.fileDescriptorXMLString = selectedFiles.toXMLString();
					cacheFDTFileDownloadList.send(params);
				}
			}
			
			private function onCacheFDTFileDownloadList(event:ResultEvent):void {
				// We have cached the selected analysis files
				// Now call the URL to start the FDT app using webstart
				showFastDataTransferDownloadPage();
			}
			
			
			public function showFastDataTransferDownloadPage():void {
				
				var paramStr:String =  selectedFiles.toXMLString();			
				var url:URLRequest = new URLRequest('FastDataTransferDownloadExpServlet.gx');	
				url.contentType = "text/xml";
				url.method = URLRequestMethod.GET;
				navigateToURL(url, '_self');					
				
			}



		]]>
	</mx:Script>

	<mx:XMLListCollection id="chromats" source="{getChromatogramList.lastResult.Chromatogram}" />
	<mx:XMLListCollection id="selectedChromats" source="{getChromatogramList.lastResult.Chromatogram}" filterFunction="selectedFilterFunc" />

	<mx:VBox paddingLeft="2" width="100%" verticalGap="0" id="vbox1">
		

		<mx:HBox id="filterBar"
				 horizontalGap="8"
				 paddingTop="4"
				 paddingBottom="4"
				 paddingLeft="0"
				 horizontalAlign="left"
				 verticalAlign="middle">

			<mx:HBox horizontalGap="0"
					 verticalAlign="middle"
					 verticalGap="0"
					 horizontalAlign="right"
					 paddingLeft="5"
					 paddingRight="5">
				<mx:CheckBox id="allCheckbox"
							 label="All"
							 horizontalGap="0">
					<mx:click>
						toggleDateCheckboxes( 0 );
						this.getList();
					</mx:click>

				</mx:CheckBox>

			</mx:HBox>
			
			<mx:VRule height="20" />

			<mx:HBox horizontalGap="0"
					 verticalAlign="middle"
					 verticalGap="0"
					 horizontalAlign="right"
					 paddingLeft="5"
					 paddingRight="5">
				<mx:CheckBox id="capSeqCheckbox"
							 label="Cap seq"
							 paddingRight="0"
							 paddingLeft="2"
							 horizontalGap="0"
							 selected="true" >
					<mx:click>
						actionDictionary.source = dictXML.action;
						toggleReactionCheckboxes( 0 );
						this.getList();
					</mx:click>
					
				</mx:CheckBox>
				<mx:CheckBox id="mitSeqCheckbox"
							 label="Mitochondrial seq"
							 paddingRight="0"
							 paddingLeft="2"
							 horizontalGap="0">
					<mx:click>
						toggleReactionCheckboxes( 1 );
						this.getList();
					</mx:click>
					
				</mx:CheckBox>
				
			</mx:HBox>
			<mx:VRule height="20" />
			<mx:HBox horizontalGap="0"
					 verticalAlign="middle"
					 verticalGap="0"
					 horizontalAlign="right"
					 paddingLeft="5"
					 paddingRight="5">
				<mx:CheckBox id="notReleasedCheckbox"
							 label="Not released"
							 paddingRight="0"
							 paddingLeft="2"
							 horizontalGap="0"
							 selected="true" >
					<mx:click>
						actionDictionary.source = dictXML.action;
						toggleReleaseCheckboxes( 1 );
						this.getList();
					</mx:click>
				
				</mx:CheckBox>
				<mx:CheckBox id="releasedCheckbox"
							 label="Released to user"
							 paddingRight="0"
							 paddingLeft="2"
							 horizontalGap="0">
					<mx:click>
						toggleReleaseCheckboxes( 0 );
						this.getList();
					</mx:click>
				
				</mx:CheckBox>
			
			</mx:HBox>
			<mx:VRule height="20" />

			<mx:HBox horizontalGap="0"
					 verticalAlign="middle"
					 verticalGap="0"
					 horizontalAlign="right"
					 paddingRight="5"
					 paddingLeft="5">
				<mx:CheckBox id="lastWeekCheckbox"
							 label="Created in last week"
							 paddingRight="0"
							 paddingLeft="0"
							 horizontalGap="0">
					<mx:click>
						toggleDateCheckboxes( 1 );
						this.getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox id="lastMonthCheckbox"
							 label="month"
							 paddingRight="0"
							 paddingLeft="2"
							 horizontalGap="0">
					<mx:click>
						toggleDateCheckboxes( 2 );
						this.getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox id="lastThreeMonthsCheckbox"
							 label="3 months"
							 paddingRight="0"
							 paddingLeft="2"
							 horizontalGap="0">
					<mx:click>
						toggleDateCheckboxes( 3 );
						this.getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox id="lastYearCheckbox"
							 label="year"
							 paddingRight="0"
							 paddingLeft="2"
							 horizontalGap="0">
					<mx:click>
						toggleDateCheckboxes( 4 );
						this.getList();
					</mx:click>

				</mx:CheckBox>

			</mx:HBox>

		</mx:HBox>
	</mx:VBox>

	

		<mx:VBox width="100%" height="100%" verticalGap="1">
			<util:DataGridAlternatingGroup id="chromatogramGrid"
							 allowMultipleSelection="true"
							 itemClick="gridItemClick(event)"
							 click="{selectedChromats.refresh()}"
							 change="selectionChange(event)"
							 width="100%"
							 height="100%"
							 dataProvider="{chromats}"
							 sortArrowSkin="mx.skins.ProgrammaticSkin">
					<util:columns>
						
					<mx:DataGridColumn id="checkBoxColumn"
									   textAlign="center"
									   width="30"
									   minWidth="30"
									   resizable="false"
									   sortable="false"
									   editable="true"
									   rendererIsEditor="true"
									   dataField="@isSelected"
									   editorDataField="selected"
									   itemRenderer="views.renderers.CheckBoxIsSelectedToggle"
									   headerRenderer="views.renderers.CheckBoxHeader"
									   draggable="false"/>
					
					<mx:DataGridColumn dataField="@idChromatogram"
									   headerText="#"
									   width="35"
									   sortCompareFunction="fieldNumericSorter('idChromatogram')" 
									   draggable="false" id="datagridcolumn1"/>
					
					<mx:DataGridColumn dataField="@idChromatogram"
									   headerText=""
									   textAlign="center"
									   resizable="false"
									   sortable="false"
									   itemRenderer="views.renderers.LinkButtonFinchTv"
									   width="35" 
									   minWidth="35"
									   draggable="false"/>
					
					<mx:DataGridColumn dataField="@displayName"
									   headerText="File"
									   minWidth="150"
									   textDecoration="underline"
									   color="#2017D8"
									   draggable="false">
						<mx:headerRenderer>
							<mx:Component>
								<mx:Label text="Label" textDecoration="none" color="#000000" />
							</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					
					<mx:DataGridColumn dataField="@runNumber"
									   headerText="Run #"
									   width="50" minWidth="20" />
						<mx:DataGridColumn dataField="@plateLabel"
										   headerText="Plate"
										   width="50" minWidth="20" />
					<mx:DataGridColumn dataField="@requestNumber"
									   headerText="Order #"  visible="{currentState != 'userState'}"
									   width="50" minWidth="15" />
					<mx:DataGridColumn dataField="@sampleName" visible="{currentState == 'userState'}"
									   headerText="Sample"
									   width="60" minWidth="15" />
					
					<mx:DataGridColumn dataField="@releaseDate" visible="{this.releasedCheckbox.selected}"
									   headerText="Released"
									   width="90" minWidth="75" id="datagridcolumn2"/>
					
					<mx:DataGridColumn dataField="@submitter"
									   headerText="Submitter" minWidth="75"
									   width="100" />
					
					<mx:DataGridColumn dataField="@readLength"
									   headerText="Length"
									   width="75"
									   sortCompareFunction="fieldNumericSorter('readLength')"  id="datagridcolumn3"/>
					
					<mx:DataGridColumn dataField="@trimmedLength"
									   headerText="Trim Len"
									   width="75"
									   sortCompareFunction="fieldNumericSorter('trimmedLength')"  id="datagridcolumn4"/>
					
					<mx:DataGridColumn dataField="@q20"
									   headerText="q20"
									   width="65"
									   sortCompareFunction="fieldNumericSorter('q20')"  id="datagridcolumn5"/>
					
					<mx:DataGridColumn dataField="@q40"
									   headerText="q40"
									   width="65"
									   sortCompareFunction="fieldNumericSorter('q40')"  id="datagridcolumn6"/>
					
					<mx:DataGridColumn dataField="@q20_len"
									   headerText="q20/len"
									   width="70"
									   sortCompareFunction="fieldNumericSorter('q20_len')" />
					
					<mx:DataGridColumn dataField="@q40_len"
									   headerText="q40/len"
									   width="70"
									   sortCompareFunction="fieldNumericSorter('q40_len')" />
					
					<mx:DataGridColumn dataField="@aSignalStrength"
									   headerText="A sig"
									   width="70"
									   sortCompareFunction="fieldNumericSorter('aSignalStrength')" />
					
					<mx:DataGridColumn dataField="@cSignalStrength"
									   headerText="C sig"
									   width="70"
									   sortCompareFunction="fieldNumericSorter('cSignalStrength')" />
					
					<mx:DataGridColumn dataField="@gSignalStrength"
									   headerText="G sig"
									   width="70"
									   sortCompareFunction="fieldNumericSorter('gSignalStrength')" />
					
					<mx:DataGridColumn dataField="@tSignalStrength"
									   headerText="T sig"
									   width="70"
									   sortCompareFunction="fieldNumericSorter('tSignalStrength')" />
					
	  	   		</util:columns>
			
			
			</util:DataGridAlternatingGroup>		

		</mx:VBox>


	<mx:ControlBar horizontalAlign="left" width="100%" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" id="controlbar1">
		<mx:Label id="nSelectedChromats" text="{selectedChromats.length + ' selected'}" />

		<mx:ComboBox id="comboBox"
					 prompt="- Select an action -"
					 dataProvider="{actionDictionary}"
					 labelField="@display" />

		<mx:LinkButton textDecoration="underline"
					   label="Go"
					   icon="@Embed('../../assets/bullet_go.png')"
					   disabledIcon="@Embed('../../assets/bullet_go_disable.png')"
					   toolTip="Submit action"
					   click="{submitAction()}" 
					   enabled="{selectedChromats.length>0}"
					    id="linkbutton1"/>
		
		<mx:LinkButton textDecoration="underline"
					   label="Delete"
					   icon="@Embed('../../assets/delete.png')"
					   toolTip="Delete selected chromatograms"
					   click="{promptToDelete()}" 
					   disabledIcon="@Embed('../../assets/delete_disable.png')"
					   enabled="{selectedChromats.length>0}" id="linkbutton2"/>
		<mx:Spacer width="100%" id="spacer1"/>
		<mx:Label text="{'(' + this.chromats.length + ' chromatograms)'}" fontWeight="normal" textAlign="right"  fontStyle="italic"/>

	</mx:ControlBar>

	<mx:states>
		<mx:State id="userState" name="userState">
			<mx:RemoveChild target="{vbox1}"/>
			<mx:RemoveChild target="{linkbutton2}"/>
			<mx:RemoveChild target="{comboBox}"/>
			<mx:SetProperty target="{datagridcolumn3}" name="headerText" value="Len"/>
			<mx:RemoveChild target="{hbox1}"/>
			<mx:RemoveChild target="{linkbutton3}"/>
			<mx:RemoveChild target="{hbox2}"/>
			<mx:SetProperty name="styleName"/>
			<mx:AddChild relativeTo="{spacer1}" position="before">
				<mx:Button id="downloadButton" 
				 	click="downloadFiles()" 
				 	icon="@Embed('../../assets/download.png')" 
				 	toolTip="Download selected files"
				 	label="Download"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{spacer1}" position="before">
				<mx:Button visible="{parentApplication.isFDTSupported ? true : false}" 
						   includeInLayout="{parentApplication.isFDTSupported ? true : false}" 
						   label="FDT Download"  
						   click="{this.downloadFilesUsingFDT()}" icon="@Embed(source='../../assets/download_large.png')"/>
			</mx:AddChild>
			<mx:RemoveChild target="{linkbutton1}"/>
		</mx:State>
	</mx:states>
	
</mx:VBox>
