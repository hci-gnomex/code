<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"
		 xmlns:mx="http://www.adobe.com/2006/mxml"
		 width="100%"
		 height="100%"
		 xmlns:util="views.util.*"
		 xmlns:renderers="views.renderers.*"
		 show="init()"
		 initialize="init()"
		 defaultButton="{lookupButton}"
		 xmlns:s="library://ns.adobe.com/flex/spark">
	

	<mx:Label id="titleLabel" styleName="titleLabel" text="{'Chromatogram List'}" />

	<mx:HTTPService id="getChromatogramList"
					url="GetChromatogramList.gx"
					resultFormat="e4x"
					showBusyCursor="true"
					result="onGetChromatogramList(event)"
					fault="parentApplication.onFailHttpRequest('Failed to get chromatogram list', event)"
					method="POST"
					useProxy="false">
	</mx:HTTPService>

	<mx:HTTPService id="saveChromatogramList"
					url="SaveChromatogramList.gx"
					resultFormat="e4x"
					showBusyCursor="true"
					result="onSaveChromatogramList(event)"
					fault="parentApplication.onFailHttpRequest('Failed to save chromatogram list', event)"
					method="POST"
					useProxy="false">
	</mx:HTTPService>

	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.controls.List;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.events.PropertyChangeEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;


			// Warning Icon
			[Embed( source = '../../assets/error.png' )]
			[Bindable]
			public var iconWarning:Class;
			
			public var parentView:NavDataView;

			public var selectedList:ListCollectionView;
			
			[Bindable]
			public var idRequest:String;

			[Bindable]
			private var actionDictionary:XMLListCollection = new XMLListCollection();
			
			private var dictXML:XML = <actionDictionary>
									<action value="RELEASE"   display="Release data to user" />
									<action value="REQUEUE"    display="Release and requeue samples" />
									<action value="DOWNLOAD"  display="Download chromats" />
								</actionDictionary>;
			[Bindable]
			private var dlXML:XML = <actionDictionary>
									<action value="DOWNLOAD"  display="Download chromats" />
								</actionDictionary>;


			private function init():void {
				this.getList();
				if ( currentState == userState.name ) {
					actionDictionary.source = dlXML.action;
				} else {
					actionDictionary.source = dictXML.action;
				}
			}
			
			private function getList():void {
				this.getChromatogramList.send( getChromatParameters() );
			}
			
			private function getChromatParameters():Object {
				var params:Object = new Object;
				
				if ( currentState != userState.name ) {
					params.requestNumber = requestNoLookupField.text != null ? requestNoLookupField.text : '' ;
					params.lastWeek = this.lastWeekCheckbox.selected ? 'Y' : 'N' ;
					params.lastMonth = this.lastMonthCheckbox.selected ? 'Y' : 'N' ;
					params.lastThreeMonths = this.lastThreeMonthsCheckbox.selected ? 'Y' : 'N' ;
					params.lastYear = this.lastYearCheckbox.selected ? 'Y' : 'N' ;
					params.getAll = this.allCheckbox.selected ? 'Y' : 'N';
					params.released = this.releasedCheckbox.selected ? 'Y' : notReleasedCheckbox.selected ? 'N' : ''
				}
				
				if ( currentState == userState.name ) {
					params.released = 'Y';
					params.requestNumber = idRequest;
				}
				
				return params;
			}
			

			private function onGetChromatogramList( event:ResultEvent ):void {
				if ( event.result.name() == "ChromatogramList" ) {
					selectedChromats.refresh();
					comboBox.selectedIndex = -1;
					return;
				}
				Alert.show( event.result..ERROR.@message.toString(), "Error getting chromatogram list" );

			}

			
			private function gridItemClick( event:ListEvent ):void {
				if ( currentState != userState.name ) {
					if ( chromatogramGrid.selectedItem != null ) {
						parentView.selectedChromat = chromatogramGrid.selectedItem;
						parentView.selectedIdChromatogram = chromatogramGrid.selectedItem.@idChromatogram as int;
					}
					
					if ( event.columnIndex == 3 ) {
						parentView.chromatViews.selectedChild = parentView.chromatDetailView;	
					}
				}
				if ( event.columnIndex == 3 && currentState == userState.name ) {
					var addWindow:ChromatDetailView;
					addWindow = ChromatDetailView(mx.managers.PopUpManager.createPopUp(parentApplication.theBody, ChromatDetailView, true));
					addWindow.selectedChromat = chromatogramGrid.selectedItem;
					addWindow.selectedIdChromatogram = chromatogramGrid.selectedItem.@idChromatogram as int;
					addWindow.currentState = "userState";
					addWindow.init();
					mx.managers.PopUpManager.centerPopUp(addWindow);
					addWindow.setFocus();
				}
				if ( event.columnIndex != 0 && event.columnIndex != 3 ) {
					chromatogramGrid.selectedIndex = -1;
				}
				
				selectedChromats.refresh();
			}

			private function selectionChange( event:ListEvent ):void {
				for each ( var obj:Object in chromatogramGrid ) {
					obj.@isSelected = false;
				}
				for each ( var obj1:Object in chromatogramGrid.selectedItems ) {
					obj1.@isSelected = true;
				}
			}
			
			
			private function submitAction():void {
				if ( currentState == userState.name ) {
					// download
				}
				
				if ( comboBox.selectedItem == null ) {
					return;
				}
				
				// Release Data to Users
				if ( comboBox.selectedItem.@value == "RELEASE" ) {
					for each ( var ch:Object in selectedChromats ) {
						ch.@released = "Y";
					}
					var params:Object = new Object;
					params.chromatogramXMLString = selectedChromats.toXMLString();
					saveChromatogramList.send( params );
				}
			}


			private function onSaveChromatogramList( event:ResultEvent ):void {
				if ( event.result.name() == "SUCCESS" ) {
					this.getList();
					return;
				}
				Alert.show( event.result..ERROR.@message.toString(), "Error saving chromatogram list" );

			}

			
			private function promptToDelete():void {
				
				Alert.show( "Are you sure you want to delete these chromatograms?", "Confirm Delete", ( Alert.YES | Alert.NO ), this, onPromptToDelete, iconWarning );
			}
			
			private function onPromptToDelete( event:CloseEvent ):void {
				
				if ( event.detail == Alert.YES ) {
					deleteChromats();
				}
			}
			
			private function deleteChromats():void {
			}
			

			private function selectedFilterFunc( item:XML ):Boolean {
				return item.@isSelected == true;
			}


			public function toggleDateCheckboxes( checkBoxNumber:int ):void {
				if ( currentState != userState.name ) {
					this.requestNoLookupField.text = "";
					if ( checkBoxNumber == 0 ) {
						actionDictionary.source = dictXML.action;
						this.notReleasedCheckbox.selected = false;
						this.releasedCheckbox.selected = false;
						this.lastMonthCheckbox.selected = false;
						this.lastWeekCheckbox.selected = false;
						this.lastThreeMonthsCheckbox.selected = false;
						this.lastYearCheckbox.selected = false;
					} else if ( checkBoxNumber == 1 ) {
						this.allCheckbox.selected = false;
						this.lastMonthCheckbox.selected = false;
						this.lastThreeMonthsCheckbox.selected = false;
						this.lastYearCheckbox.selected = false;
					} else if ( checkBoxNumber == 2 ) {
						this.allCheckbox.selected = false;
						this.lastWeekCheckbox.selected = false;
						this.lastThreeMonthsCheckbox.selected = false;
						this.lastYearCheckbox.selected = false;
					} else if ( checkBoxNumber == 3 ) {
						this.allCheckbox.selected = false;
						this.lastWeekCheckbox.selected = false;
						this.lastMonthCheckbox.selected = false;
						this.lastYearCheckbox.selected = false;
					} else if ( checkBoxNumber == 4 ) {
						this.allCheckbox.selected = false;
						this.lastWeekCheckbox.selected = false;
						this.lastMonthCheckbox.selected = false;
						this.lastThreeMonthsCheckbox.selected = false;
					}
				}
			}


			public function toggleReleaseCheckboxes( checkBoxNumber:int ):void {
				this.requestNoLookupField.text = "";
				if ( checkBoxNumber == 0 ) {
					this.allCheckbox.selected = false;
					this.notReleasedCheckbox.selected = false;
				} else if ( checkBoxNumber == 1 ) {
					this.allCheckbox.selected = false;
					this.releasedCheckbox.selected = false;
				}
			}


			private function setDefaultButton():void {
				if ( currentState != userState.name ) {
					actionDictionary.source = dictXML.action; 
				}
				if ( this.requestNoLookupField.text != '' ) {
					this.allCheckbox.selected = false;
					this.lastWeekCheckbox.selected = false;
					this.lastMonthCheckbox.selected = false;
					this.lastThreeMonthsCheckbox.selected = false;
					this.lastYearCheckbox.selected = false;
					this.notReleasedCheckbox.selected = false;
					this.releasedCheckbox.selected = false;
				}
			}


			private function fieldNumericSorter( field:String ):Function {
				return function( obj1:Object, obj2:Object ):int {
					var num:Number = (( Number )( obj1.attribute( field )) - ( Number )( obj2.attribute( field )));
					return ( num > 0 ) ? 1 : (( num < 0 ) ? -1 : 0 );
				}
			}
			
			
			
		]]>
	</mx:Script>

	<mx:XMLListCollection id="chromats" source="{getChromatogramList.lastResult.Chromatogram}" />
	<mx:XMLListCollection id="selectedChromats" source="{getChromatogramList.lastResult.Chromatogram}" filterFunction="selectedFilterFunc" />

	<mx:VBox styleName="panelBox"   backgroundSize="100%" width="100%" verticalGap="0" id="vbox1">
		<!--<mx:HRule width="100%" />-->

		<mx:HBox id="filterBar"
				 horizontalGap="0"
				 paddingTop="4"
				 paddingBottom="4"
				 paddingLeft="0"
				 horizontalAlign="left"
				 verticalAlign="middle">

			<mx:Label text="Filter by:" width="65"/>

			<mx:HBox horizontalGap="0"
					 height="100%"
					 verticalAlign="middle"
					 verticalGap="0"
 					 width="150">
				<mx:Label text="Order #" />

				<mx:TextInput id="requestNoLookupField"
							  fontSize="9"
							  height="19"
							  width="60"
							  change="{setDefaultButton()}" />

				<mx:Button id="lookupButton"
						   fontFamily="Arial"
						   height="18"
						   width="30"
						   color="#400040"
						   visible="true"
						   icon="@Embed('../../assets/arrow_right.png')"
						   click="{if (requestNoLookupField.text != '') this.getList();}" />

			</mx:HBox>

			<mx:HBox horizontalGap="0"
					 verticalAlign="middle"
					 verticalGap="0"
					 horizontalAlign="right"
					 paddingLeft="5"
					 paddingRight="5">
				<mx:CheckBox id="allCheckbox"
							 label="All"
							 horizontalGap="0">
					<mx:click>
						toggleDateCheckboxes( 0 );
						this.getList();
					</mx:click>

				</mx:CheckBox>

			</mx:HBox>

			<mx:VRule height="20" />

			<mx:HBox horizontalGap="0"
					 verticalAlign="middle"
					 verticalGap="0"
					 horizontalAlign="right"
					 paddingRight="5"
					 paddingLeft="5">
				<mx:CheckBox id="lastWeekCheckbox"
							 label="In last week"
							 paddingRight="0"
							 paddingLeft="0"
							 horizontalGap="0">
					<mx:click>
						toggleDateCheckboxes( 1 );
						this.getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox id="lastMonthCheckbox"
							 label="month"
							 paddingRight="0"
							 paddingLeft="2"
							 horizontalGap="0">
					<mx:click>
						toggleDateCheckboxes( 2 );
						this.getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox id="lastThreeMonthsCheckbox"
							 label="3 months"
							 paddingRight="0"
							 paddingLeft="2"
							 horizontalGap="0">
					<mx:click>
						toggleDateCheckboxes( 3 );
						this.getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox id="lastYearCheckbox"
							 label="year"
							 paddingRight="0"
							 paddingLeft="2"
							 horizontalGap="0">
					<mx:click>
						toggleDateCheckboxes( 4 );
						this.getList();
					</mx:click>

				</mx:CheckBox>

			</mx:HBox>

			<mx:VRule height="20" />

			<mx:HBox horizontalGap="0"
					 verticalAlign="middle"
					 verticalGap="0"
					 horizontalAlign="right"
					 paddingLeft="5"
					 paddingRight="5">
				<mx:CheckBox id="releasedCheckbox"
							 label="released to user"
							 paddingRight="0"
							 paddingLeft="2"
							 horizontalGap="0">
					<mx:click>
						actionDictionary.source = dlXML.action;
						toggleReleaseCheckboxes( 0 );
						this.getList();
					</mx:click>

				</mx:CheckBox>

				<mx:CheckBox id="notReleasedCheckbox"
							 label="not released"
							 paddingRight="0"
							 paddingLeft="2"
							 horizontalGap="0"
							 selected="true" >
					<mx:click>
						actionDictionary.source = dictXML.action;
						toggleReleaseCheckboxes( 1 );
						this.getList();
					</mx:click>

				</mx:CheckBox>

			</mx:HBox>

		</mx:HBox>
			
		<mx:HBox>
			<mx:Spacer width="215" height="100%"/>
			<mx:Label text="instrument run:" />
		</mx:HBox>
	</mx:VBox>

	<mx:VDividedBox width="100%"
					height="100%"
					styleName="form"
					paddingBottom="4"
					paddingLeft="4"
					paddingRight="4"
					paddingTop="4">

		<mx:VBox width="100%" height="100%" verticalGap="1">

			<mx:HBox width="100%" verticalAlign="bottom">
				<mx:HBox width="100%" verticalAlign="middle" paddingTop="8">
					<mx:Label text="{'Chromatogram ' + chromatogramGrid.selectedItem.@displayName}" fontWeight="bold" />

				</mx:HBox>

				<mx:Spacer width="100%" />

				<mx:Label text="{'(' + this.chromats.length + ' chromatograms)'}" fontWeight="normal" textAlign="right" />

			</mx:HBox>

			<mx:DataGrid id="chromatogramGrid"
						 allowMultipleSelection="true"
						 itemClick="gridItemClick(event)"
						 click="{selectedChromats.refresh()}"
						 change="selectionChange(event)"
						 width="100%"
						 height="100%"
						 dataProvider="{chromats}"
						 sortArrowSkin="mx.skins.ProgrammaticSkin">
				<mx:columns>


					<mx:DataGridColumn id="checkBoxColumn"
									   textAlign="center"
									   width="30"
									   minWidth="30"
									   resizable="false"
									   sortable="false"
									   editable="true"
									   rendererIsEditor="true"
									   dataField="@isSelected"
									   editorDataField="selected"
									   itemRenderer="views.renderers.CheckBoxIsSelectedToggle"
									   headerRenderer="views.renderers.CheckBoxHeader"
									   draggable="false"/>

					<mx:DataGridColumn dataField="@idChromatogram"
									   headerText="ID"
									   width="35"
									   sortCompareFunction="fieldNumericSorter('idChromatogram')" 
									   draggable="false" id="datagridcolumn1"/>

					<mx:DataGridColumn dataField="@idChromatogram"
									   headerText=""
									   textAlign="center"
									   resizable="false"
									   sortable="false"
									   itemRenderer="views.renderers.LinkButtonFinchTv"
									   width="35" 
									   minWidth="35"
									   draggable="false"/>

					<mx:DataGridColumn dataField="@displayName"
									   headerText="Label"
									   minWidth="150"
									   textDecoration="underline"
									   color="#2017D8"
									   draggable="false">
						<mx:headerRenderer>
							<mx:Component>
								<mx:Label text="Label" textDecoration="none" color="#000000" />
							</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>

					<mx:DataGridColumn dataField="@releaseDate"
									   headerText="Released:"
									   width="90" minWidth="75" id="datagridcolumn2"/>

					<mx:DataGridColumn dataField="@submitter"
									   headerText="Submitter" minWidth="75"
									   width="100" />

					<mx:DataGridColumn dataField="@readLength"
									   headerText="Length"
									   width="75"
									   sortCompareFunction="fieldNumericSorter('readLength')"  id="datagridcolumn3"/>

					<mx:DataGridColumn dataField="@trimmedLength"
									   headerText="Trim Len"
									   width="75"
									   sortCompareFunction="fieldNumericSorter('trimmedLength')"  id="datagridcolumn4"/>

					<mx:DataGridColumn dataField="@q20"
									   headerText="q20"
									   width="65"
									   sortCompareFunction="fieldNumericSorter('q20')"  id="datagridcolumn5"/>

					<mx:DataGridColumn dataField="@q40"
									   headerText="q40"
									   width="65"
									   sortCompareFunction="fieldNumericSorter('q40')"  id="datagridcolumn6"/>

					<mx:DataGridColumn dataField="@q20_len"
									   headerText="q20/len"
									   width="70"
									   sortCompareFunction="fieldNumericSorter('q20_len')" />

					<mx:DataGridColumn dataField="@q40_len"
									   headerText="q40/len"
									   width="70"
									   sortCompareFunction="fieldNumericSorter('q40_len')" />

					<mx:DataGridColumn dataField="@aSignalStrength"
									   headerText="A sig"
									   width="70"
									   sortCompareFunction="fieldNumericSorter('aSignalStrength')" />

					<mx:DataGridColumn dataField="@cSignalStrength"
									   headerText="C sig"
									   width="70"
									   sortCompareFunction="fieldNumericSorter('cSignalStrength')" />

					<mx:DataGridColumn dataField="@gSignalStrength"
									   headerText="G sig"
									   width="70"
									   sortCompareFunction="fieldNumericSorter('gSignalStrength')" />

					<mx:DataGridColumn dataField="@tSignalStrength"
									   headerText="T sig"
									   width="70"
									   sortCompareFunction="fieldNumericSorter('tSignalStrength')" />
					
				</mx:columns>

			</mx:DataGrid>


		</mx:VBox>


	</mx:VDividedBox>


	<mx:ControlBar horizontalAlign="left" width="100%">
		<mx:Label id="nSelectedChromats" text="{selectedChromats.length + ' selected'}" />

		<mx:ComboBox id="comboBox"
					 prompt="- Select an action -"
					 dataProvider="{actionDictionary}"
					 labelField="@display" />

		<mx:LinkButton textDecoration="underline"
					   label="Go"
					   icon="@Embed('../../assets/bullet_go.png')"
					   disabledIcon="@Embed('../../assets/bullet_go_disable.png')"
					   toolTip="Submit action"
					   click="{submitAction()}" 
					   enabled="{selectedChromats.length>0}"
					    id="linkbutton1"/>
		
		<mx:LinkButton textDecoration="underline"
					   label="Delete"
					   icon="@Embed('../../assets/delete.png')"
					   toolTip="Delete selected chromatograms"
					   click="{promptToDelete()}" 
					   disabledIcon="@Embed('../../assets/delete_disable.png')"
					   enabled="{selectedChromats.length>0}" id="linkbutton2"/>

		<mx:Spacer width="100%" height="100%" />

		<mx:LinkButton textDecoration="underline"
					   label="Refresh"
					   icon="@Embed('../../assets/action_refresh.gif')"
					   toolTip="Refresh chromatogram list"
					   click="{this.getList();}" />

	</mx:ControlBar>

	<mx:states>
		<mx:State id="userState" name="userState">
			<mx:RemoveChild target="{vbox1}"/>
			<mx:RemoveChild target="{linkbutton2}"/>
			<mx:RemoveChild target="{comboBox}"/>
			<mx:SetProperty target="{actionDictionary}" name="source" value="{dlXML.action}" />
			<mx:SetProperty target="{datagridcolumn3}" name="headerText" value="Len"/>
			<mx:SetStyle target="{linkbutton1}" name="disabledIcon" value="@Embed('../../assets/download_disable.png')"/>
			<mx:SetStyle target="{linkbutton1}" name="icon" value="@Embed('../../assets/download.png')"/>
			<mx:SetProperty target="{linkbutton1}" name="label" value="Download Chromatograms"/>
			<mx:RemoveChild target="{titleLabel}"/>
		</mx:State>
	</mx:states>
	
</mx:VBox>
