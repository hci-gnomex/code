<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
		 width="100%" height="100%" show="init()"
		 headerHeight="{currentState=='userState' ? 30 : 0}"
		 showCloseButton="{currentState=='userState'}" 
		 close="{PopUpManager.removePopUp(this)}"
		 title="{'View Chromatogram ' + selectedIdChromatogram}"
		 xmlns:util="views.util.*" >
	
	<mx:HBox id="headerBox" horizontalGap="10" paddingTop="10" verticalAlign="middle" >
		<mx:Label id="titleLabel" styleName="titleLabel" text="{'View Chromatogram ' + selectedIdChromatogram}"/>
		<mx:Label id="redoLabel" styleName="titleLabel" text="(REDO)" fontWeight="bold" 
				  visible="{this.isInit &amp;&amp; getChromatogram.lastResult.Chromatogram.@redoFlag == 'Y'}"
				  includeInLayout="{this.isInit &amp;&amp; getChromatogram.lastResult.Chromatogram.@redoFlag == 'Y'}"/>
		<mx:LinkButton label="Back" click="{parentDocument.chromatViews.selectedIndex = 0}" textDecoration="underline" icon="@Embed(source='../../assets/arrow_left.png')"/>		
	</mx:HBox>
	
	<mx:HTTPService  
		id="getChromatogram" 
		url="GetChromatogram.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetChromatogram(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get chromatogram', event)"
		method="POST"
		useProxy="false">
		<mx:request xmlns="">
			<idChromatogram>{selectedIdChromatogram}</idChromatogram>
			<includeSeqString>{'Y'}</includeSeqString>
			<includeQualArray>{'Y'}</includeQualArray>
			<includeTrace>{'Y'}</includeTrace>
		</mx:request>
	</mx:HTTPService> 
	
	<mx:Script> 
		<![CDATA[
			import flash.events.MouseEvent;
			
			import hci.flex.controls.DropdownLabel;
			
			import mx.charts.ChartItem;
			import mx.charts.HitData;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.chartClasses.Series;
			import mx.charts.series.items.ColumnSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.controls.sliderClasses.Slider;
			import mx.core.Container;
			import mx.core.IDataRenderer;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.events.ItemClickEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.SliderEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			[Bindable]
			private var isInit:Boolean = false;
			[Bindable]
			public var selectedIdChromatogram:int;
			[Bindable]
			public var selectedChromat:Object;
			[Bindable]
			private var qualArray:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var q20Array:ArrayCollection;
			[Bindable]
			private var aTraceArray:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var cTraceArray:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var gTraceArray:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var tTraceArray:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var baseCallArray:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var traceMax:int;
			[Bindable]
			private var traceXMin:int;
			[Bindable]
			private var traceXMax:int;
			[Bindable]
			private var sliderSpacing:int;
			[Bindable]
			private var vZoomValue:int;
			[Bindable]
			private var q20TraceArray:ArrayCollection;
			[Bindable]
			private var seqLabel:Label;
			
			public function init():void {
				
				// Don't reload if you already are viewing that chromat
				if ( selectedIdChromatogram == selectedChromat.@idChromatogram ) {
					return;
				}
				if (selectedChromat != null){
					selectedIdChromatogram = selectedChromat.@idChromatogram;
					this.getChromatogram.send();
				}
				
				// Reset the slider
				traceSlider.value = 0;
				traceXMin = 0;
				sliderSpacing = hZoomSlider.value;
				traceXMax = sliderSpacing;
				
				// Add event listeners for each accordion's header
				var head1:Button = Button(accordion1.getHeaderAt(0));
				head1.addEventListener(MouseEvent.CLICK, headerClickHandler);
				
				var head2:Button = Button(accordion2.getHeaderAt(0));
				head2.addEventListener(MouseEvent.CLICK, headerClickHandler);
				
				var head3:Button = Button(accordion3.getHeaderAt(0));
				head3.addEventListener(MouseEvent.CLICK, headerClickHandler);
				
				var head4:Button = Button(accordion4.getHeaderAt(0));
				head4.addEventListener(MouseEvent.CLICK, headerClickHandler);
				
				isInit = true;
			}
			
			// This allows a click on a header to close that section
			private function headerClickHandler(event:MouseEvent):void
			{
				var header:Button = Button(event.target);
				var headerChild:Container = Container(IDataRenderer(header).data);
				if (headerChild == accordion1.selectedChild)
				{
					accordion1.selectedIndex = 1;
				}
				if (headerChild == accordion2.selectedChild)
				{
					accordion2.selectedIndex = 1;
				}
				if (headerChild == accordion3.selectedChild)
				{
					accordion3.selectedIndex = 1;
				}
				if (headerChild == accordion4.selectedChild)
				{
					accordion4.selectedIndex = 1;
				}
			}
			
			private function onGetChromatogram(event:ResultEvent):void {
				if (event.result.name() == "ChromatogramList") {
					
					getTraces();
					
					getQualAndSeq();
					
				} else {
					Alert.show(event.result..ERROR.@message.toString(), "Error getting chromatogram");
				} 
			}
			
			private function getTraces():void{
				// Traces
				traceMax = 0;
				// A
				var aTraceString:String = getChromatogram.lastResult..Trace.@aTrace;
				var aArray:Array = aTraceString.split(",");
				aTraceArray = new ArrayCollection(aArray);
				traceMax = Math.max.apply(null, aArray);
				
				// C
				var cTraceString:String = getChromatogram.lastResult..Trace.@cTrace;
				var cArray:Array = cTraceString.split(",");
				cTraceArray = new ArrayCollection(cArray);
				traceMax = Math.max.apply(null, cArray) > traceMax ? Math.max.apply(null, cArray) : traceMax;
				
				// G
				var gTraceString:String = getChromatogram.lastResult..Trace.@gTrace;
				var gArray:Array = gTraceString.split(",");
				gTraceArray = new ArrayCollection(gArray);
				traceMax = Math.max.apply(null, gArray) > traceMax ? Math.max.apply(null, gArray) : traceMax;
				
				// T
				var tTraceString:String = getChromatogram.lastResult..Trace.@tTrace;
				var tArray:Array = tTraceString.split(",");
				tTraceArray = new ArrayCollection(tArray);
				traceMax = Math.max.apply(null, tArray) > traceMax ? Math.max.apply(null, tArray) : traceMax;
			}
			
			private function getQualAndSeq():void{
				// Quality Graph
				var qualString:String = getChromatogram.lastResult..Quality.@quality;
				var qArray:Array = qualString.split(",");
				qualArray = new ArrayCollection(qArray);
				
				var len:int = qualArray.length - 1;
				q20Array = new ArrayCollection([{x:0, y:20}, {x:len, y:20}]);
				
				// Sequence and quality
				var seqString:String = getChromatogram.lastResult..Sequence.@sequenceString;
				var seqArray:Array = seqString.split('');
				
				var baseCallString:String = getChromatogram.lastResult..Trace.@baseCalls;
				var bcArray:Array = baseCallString.split(",");
				baseCallArray = new ArrayCollection();
				
				var trimString:String = getChromatogram.lastResult..Trim.@trimPos;
				var trimPos:Array = trimString.split('-');
				var trimStart:int = parseInt(trimPos[0]);
				var trimStop:int = parseInt(trimPos[1]);
				var sequenceBoxString:String = '<font size="12" color="#CC0000">';
				
				for ( var i:int = 0; i < bcArray.length; i++ ) {
					if ( i == trimStart - 1 ) {
						sequenceBoxString += '<font color="#000000"><B>';
					}
					if ( i == trimStop - 1 ) {
						sequenceBoxString += '</B></font>';
					}
					baseCallArray.addItem({x:parseInt(bcArray[i]), base:seqArray[i], qual:parseInt(qArray[i])});
					sequenceBoxString += seqArray[i];
					
				}
				sequenceBoxString += '</font>';
				sequenceTextBox.htmlText = sequenceBoxString;
				
				
				q20TraceArray = new ArrayCollection([{x:traceXMin, y:20}, {x:traceXMax, y:20}]);
				displaySequence();
				displayTrimRegion(trimStart,trimStop);
				
				sx.labelFunction = baseLabelFunction;
			}
			
			// Draw trim lines for the quality graph
			private function displayTrimRegion(start:int,stop:int):void{
				trimCanvas.clear();
				trimCanvas.lineStyle(.75, 
					0xCC0000, 
					.75, 
					true, 
					LineScaleMode.NORMAL, 
					CapsStyle.ROUND, 
					JointStyle.MITER, 
					2
				);
				trimCanvas.moveTo(start,0);
				trimCanvas.lineTo(start,60);
				trimCanvas.moveTo(stop,0);
				trimCanvas.lineTo(stop,60);
			}
			
			// Display the sequence below the Quality on trace plot
			private function displaySequence():void{
				seqLabelCanvas.removeAllChildren();
				for ( var i:int=0; i < baseCallArray.length; i++ ){
					if ( baseCallArray[i].x > traceXMin && baseCallArray[i].x < traceXMax) {
						seqLabel = new Label();
						seqLabel.width = 8;
						seqLabel.setStyle("fontSize", "8");
						seqLabel.setStyle("textAlign", "center");
						seqLabel.text = baseCallArray[i].base.toString();
						
						// This adds any DisplayObject as child to current canvas.        
						seqLabelCanvas.addDataChild(seqLabel, parseInt(baseCallArray[i].x)-4, 0);
					}
					if ( baseCallArray[i].x > traceXMax ) {
						break;
					}
				}
			}
			
			// Display the base, quality and base number for each column in seq/quality column plot
			private function qualityDataTipFunction(item:HitData):String {
				var cSI:ColumnSeriesItem = item.chartItem as ColumnSeriesItem;
				var s:String;
				s = 'Base: <B>' + cSI.item.base + '</B>\n';
				s += 'Qual: ' + cSI.item.qual + '\n';
				s += 'Base No: ' + findNearestBase(cSI.item.x);
				return s;
			}
			
			// Scroll through the trace plot
			private function dragTrace(event:SliderEvent):void {
				var currentSlider:Slider=Slider(event.currentTarget);
				traceXMin = currentSlider.value;
				traceXMax = currentSlider.value + sliderSpacing;
				q20TraceArray = new ArrayCollection([{x:traceXMin, y:20}, {x:traceXMax, y:20}]);
				displaySequence();
			}
			
			// Display information about base number instead of trace x coordinate for slider
			private function traceSliderDataTipFunc(val:String):String {
				return "Go to base no: " + findNearestBase(parseInt(val));
			}
			
			// Scroll through the trace plot
			private function dragHZoom(event:SliderEvent):void {
				var currentSlider:Slider=Slider(event.currentTarget);
				sliderSpacing = currentSlider.value;
				
				traceXMax = traceSlider.value + sliderSpacing;
				q20TraceArray = new ArrayCollection([{x:traceXMin, y:20}, {x:traceXMax, y:20}]);
				displaySequence();
			}
			
			// Display "Zoom in" or "Zoom out" for zoom slider
			private function hZoomSliderDataTipFunc(val:String):String {
				return "Zoom " + (parseInt(val) < sliderSpacing ? 'in' : 'out');
			}
			
			// Vertically scroll the trace
			private function dragVZoom(event:SliderEvent):void {
				var currentSlider:Slider=Slider(event.currentTarget);
				vZoomValue = currentSlider.value;
				ty.maximum = traceMax/vZoomValue;
			}
			
			// Display "Zoom in" or "Zoom out" for zoom slider
			private function vZoomSliderDataTipFunc(val:String):String {
				return "Zoom " + (parseInt(val) > vZoomValue ? 'in' : 'out');
			}
			
			// Find the base that is nearest to an x coordinate from the trace plot
			private function findNearestBase(val:int):int{
				var minDiff:int = val;
				var baseNo:int = 1;
				for ( var i:int = 0; i < baseCallArray.length; i++ ) {
					var baseCallObject:Object = baseCallArray[i];
					var diff:int = Math.abs(baseCallObject.x - val);
					if ( diff < minDiff ) {
						minDiff = diff;
						baseNo = i + 1;
						if ( i < baseCallArray.length - 1 && minDiff < Math.abs(baseCallArray[i+1].x - val) )
						{
							break;
						}
					}
				}
				return baseNo;
			}
			
			// Label the base number below sequence base labels
			private function baseLabelFunction(val:Object, preVal:Object, axis:IAxis):String {
				var xPos:int = val as int;
				return findNearestBase(xPos).toString();
			}
			
			
			protected function mouseDownOutsideHandler(event:Object):void
			{
				PopUpManager.removePopUp(this);
			}
			
		]]>
	</mx:Script>    	
	
	
	<mx:VBox width="100%" height="100%"    minHeight="0" verticalScrollPolicy="auto">
		<mx:Accordion width="100%"   resizeToContent="true" id="accordion1">
			<mx:Canvas label="General Information" width="100%" height="100%" id="dataGridAccordion" minHeight="0" >
				<mx:Grid minHeight="0" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" horizontalGap="1" verticalGap="1">
					
					<mx:GridRow >
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="File name" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem paddingRight="10">
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@displayName}"/>
						</mx:GridItem>
					</mx:GridRow>
					
					<mx:GridRow >
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Sample Name" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@sampleName}"/>
						</mx:GridItem>
						
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Plate Well" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem  horizontalScrollPolicy="off" >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@wellRowCol + ' - ' + getChromatogram.lastResult.Chromatogram.@idPlateWell}"/>
						</mx:GridItem>
					</mx:GridRow>
					
					<mx:GridRow >
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Submitter" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@user}"/>
						</mx:GridItem>
						
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Order #" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@requestNumber}"/>
						</mx:GridItem>
					</mx:GridRow>
					
					<mx:GridRow  >
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Run Name" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@runName}"/>
						</mx:GridItem>
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Plate Name" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@plateName}"/>
						</mx:GridItem>
					</mx:GridRow>
					
					<mx:GridRow >
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Run Start" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@runStart}"/>
						</mx:GridItem>
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Run Stop" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@runStop}"/>
						</mx:GridItem>
					</mx:GridRow>
					
					<mx:GridRow  >
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Instr. Model" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@instrModel}"/>
						</mx:GridItem>
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Instr. Name" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@instrName}"/>
						</mx:GridItem>
					</mx:GridRow>
					
					<mx:GridRow  >
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Lane" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@lane}"/>
						</mx:GridItem>
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Number of Lanes" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@numberOfLanes}"/>
						</mx:GridItem>
					</mx:GridRow>
					
					<mx:GridRow >
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Spacing" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@spacing}"/>
						</mx:GridItem>
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Signal Strengths" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@signalStrengths}"/>
						</mx:GridItem>
					</mx:GridRow>
					
					<mx:GridRow >
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Mobility" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@mobility}"/>
						</mx:GridItem>
						<mx:GridItem horizontalAlign="right" paddingRight="5">
							<mx:Label text="Comments" fontWeight="bold"/>
						</mx:GridItem>
						<mx:GridItem >
							<mx:Label text="{getChromatogram.lastResult.Chromatogram.@comments}"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
			</mx:Canvas>
			
			<mx:Canvas  width="100%" height="0" minHeight="0" />
			
		</mx:Accordion>
		
		<mx:Accordion width="100%" resizeToContent="true"  id="accordion2">
			<mx:Canvas label="Quality" width="100%" height="100%" minHeight="0">
				<mx:VBox width="100%">
					
					<!--MAYBE ADD A TRIMMED REGION BAR-->
					<mx:LineChart id="qualityGraph" 
								  gutterBottom="40" 
								  gutterTop="20" 
								  gutterLeft="65" 
								  gutterRight="20" width="100%" dataProvider="{qualArray}" height="215" >
						
						<mx:annotationElements >
							<mx:CartesianDataCanvas id="trimCanvas"  />
						</mx:annotationElements>
						
						<mx:seriesFilters>
							<mx:Array/>
						</mx:seriesFilters>
						
						<mx:verticalAxis>
							<mx:LinearAxis 
								title="Quality" 
								id="qy" minimum="0" maximum="60" interval="10"/>
						</mx:verticalAxis>
						<mx:verticalAxisRenderers>
							<mx:AxisRenderer labelRotation="-90" axis="{qy}"/>
						</mx:verticalAxisRenderers>
						
						<mx:horizontalAxis>
							<mx:LinearAxis 
								title="Position"  minimum="0" maximum="{qualArray.length}" interval="100"
								/>
						</mx:horizontalAxis>
						
						<mx:series>
							<mx:LineSeries displayName="Quality Values" dataProvider="{qualArray}"  >
								<mx:lineStroke>
									<mx:Stroke 
										color="#000060" 
										weight=".5" 
										/>
								</mx:lineStroke>
								
							</mx:LineSeries>
							
							<mx:LineSeries displayName="Q20 Reference Line" dataProvider="{q20Array}" xField="x" yField="y" >
								<mx:lineStroke>
									<mx:Stroke 
										color="0xC0C0C0" 
										weight="5" 
										alpha=".5"
										/>
								</mx:lineStroke>
								
							</mx:LineSeries>
						</mx:series>
						
					</mx:LineChart>
					
					
					<mx:HBox horizontalAlign="center" width="100%">
						<mx:Legend  direction="horizontal">
							<mx:LegendItem label="Quality Values" fontWeight="bold">
								<mx:fill>
									<mx:SolidColor color="#000060"/>
								</mx:fill>
								<mx:stroke>
									<mx:Stroke color="#000060"/>
								</mx:stroke>
							</mx:LegendItem>
							<mx:LegendItem label="Q20 Reference Line" fontWeight="bold">
								<mx:fill>
									<mx:SolidColor color="0xC0C0C0"/>
								</mx:fill>
								<mx:stroke>
									<mx:Stroke color="0xC0C0C0" weight="2"/>
								</mx:stroke>
							</mx:LegendItem>
							<mx:LegendItem label="Trim Cutoffs" fontWeight="bold">
								<mx:fill>
									<mx:SolidColor color="0xCC0000"/>
								</mx:fill>
								<mx:stroke>
									<mx:Stroke color="0xCC0000" weight="2"/>
								</mx:stroke>
							</mx:LegendItem>
						</mx:Legend>
					</mx:HBox>
					
					
					<mx:Grid  minHeight="0"  paddingBottom="10" paddingLeft="125" horizontalGap="1" verticalGap="1">
						
						<mx:GridRow >
							<mx:GridItem horizontalAlign="right" paddingRight="5">
								<mx:Label text="Read Length" fontWeight="bold"/>
							</mx:GridItem>
							<mx:GridItem width="100">
								<mx:Label text="{getChromatogram.lastResult.Chromatogram.@readLength}"/>
							</mx:GridItem>
						</mx:GridRow>
						
						<mx:GridRow >
							<mx:GridItem horizontalAlign="right" paddingRight="5">
								<mx:Label text="Trimmed Length" fontWeight="bold"/>
							</mx:GridItem>
							<mx:GridItem >
								<mx:Label text="{getChromatogram.lastResult..Trim.@trimLength}"/>
							</mx:GridItem>
							<mx:GridItem horizontalAlign="right" paddingRight="5">
								<mx:Label text="Trimmed Pos." fontWeight="bold"/>
							</mx:GridItem>
							<mx:GridItem >
								<mx:Label text="{getChromatogram.lastResult..Trim.@trimPos}"/>
							</mx:GridItem>
						</mx:GridRow>
						
						<mx:GridRow  >
							<mx:GridItem horizontalAlign="right" paddingRight="5">
								<mx:Label text="Q20" fontWeight="bold"/>
							</mx:GridItem>
							<mx:GridItem >
								<mx:Label text="{getChromatogram.lastResult..Quality.@q20}"/>
							</mx:GridItem>
							<mx:GridItem horizontalAlign="right" paddingRight="5">
								<mx:Label text="Q20/Length" fontWeight="bold"/>
							</mx:GridItem>
							<mx:GridItem >
								<mx:Label text="{getChromatogram.lastResult..Quality.@q20_len}"/>
							</mx:GridItem>
						</mx:GridRow>
						
						<mx:GridRow  >
							<mx:GridItem horizontalAlign="right" paddingRight="5">
								<mx:Label text="Q40" fontWeight="bold"/>
							</mx:GridItem>
							<mx:GridItem >
								<mx:Label text="{getChromatogram.lastResult..Quality.@q40}"/>
							</mx:GridItem>
							<mx:GridItem horizontalAlign="right" paddingRight="5">
								<mx:Label text="Q40/Length" fontWeight="bold"/>
							</mx:GridItem>
							<mx:GridItem >
								<mx:Label text="{getChromatogram.lastResult..Quality.@q40_len}"/>
							</mx:GridItem>
						</mx:GridRow>
						
					</mx:Grid>
					
					
				</mx:VBox>
			</mx:Canvas>
			
			<mx:Canvas  width="100%" height="0" minHeight="0"/>
			
		</mx:Accordion>
		
		
		<mx:Accordion width="100%" resizeToContent="true"  id="accordion3">
			<mx:Canvas label="Trace" width="100%" height="100%" minHeight="0">
				<mx:HBox  width="100%" horizontalGap="2">
					
					<mx:VBox height="100%" paddingRight="0" paddingLeft="5">
						<mx:Spacer height="85" width="100%" />
						<mx:VSlider height="100%" id="vZoomSlider" invertThumbDirection="true"
									minimum=".5" maximum="5" value="1" 
									change="dragVZoom(event);" 
									liveDragging="false" dataTipFormatFunction="vZoomSliderDataTipFunc"/>
						<mx:Spacer height="55" width="100%" />
					</mx:VBox>
					
					<mx:VBox width="100%">
						
						<!--Quality bar chart-->
						<mx:ColumnChart id="seqGraph" dataProvider="{baseCallArray}" 
										gutterBottom="16" 
										gutterTop="10" 
										gutterLeft="25" 
										gutterRight="20" 
										width="100%"  
										height="85" 
										showDataTips="true" 
										itemRollOverColor="haloSilver"
										dataTipFunction="qualityDataTipFunction">
							
							<mx:annotationElements >
								<mx:CartesianDataCanvas id="seqLabelCanvas"  />
							</mx:annotationElements>
							
							<mx:seriesFilters>
								<mx:Array/>
							</mx:seriesFilters>
							
							<mx:backgroundElements>
								<mx:Array/>
							</mx:backgroundElements> 
							
							<mx:verticalAxis>
								<mx:LinearAxis 
									id="sy"
									minimum="-15" 
									maximum="60" />
							</mx:verticalAxis>
							
							<mx:verticalAxisRenderers>
								<mx:AxisRenderer 
									axis="{sy}" 
									tickPlacement="none" 
									visible="false"
									showLabels="false"/>
							</mx:verticalAxisRenderers>
							
							<mx:horizontalAxis>
								<mx:LinearAxis 
									id="sx" 
									minimum="{traceXMin}" 
									maximum="{traceXMax}"
									interval="500" labelFunction="{baseLabelFunction}"/>
							</mx:horizontalAxis>
							
							<mx:horizontalAxisRenderers>
								<mx:AxisRenderer 
									axis="{sx}" showLine="false" 
									tickPlacement="none"/>
							</mx:horizontalAxisRenderers>
							
							<mx:series>
								
								<mx:ColumnSeries id="qs"  yField="qual" xField="x"  >
									
									<mx:fill >
										<mx:SolidColor color="0x336699" />
									</mx:fill>
									<mx:stroke >
										<mx:Stroke color="0x336699" weight="1.25"/>
									</mx:stroke>
									
								</mx:ColumnSeries>     
								
								<mx:LineSeries dataProvider="{q20TraceArray}" xField="x" yField="y" interactive="false">
									<mx:lineStroke>
										<mx:Stroke 
											color="0xC0C0C0" 
											weight=".25" />
									</mx:lineStroke>
								</mx:LineSeries>
								
							</mx:series>
							
						</mx:ColumnChart>
						
						
						
						<!--Base Traces-->
						<mx:LineChart id="traceGraph" 
									  gutterBottom="0" 
									  gutterTop="0" 
									  gutterLeft="25" 
									  gutterRight="20" width="100%"  height="215" >
							
							<mx:seriesFilters>
								<mx:Array/>
							</mx:seriesFilters>
							
							<mx:verticalAxis>
								<mx:LinearAxis minimum="0" maximum="{traceMax}"
											   id="ty"/>
							</mx:verticalAxis>
							
							<mx:verticalAxisRenderers>
								<mx:AxisRenderer 
									axis="{ty}" 
									tickPlacement="none"
									visible="false"
									showLabels="false" labelRotation="180"/>
							</mx:verticalAxisRenderers>
							
							<mx:horizontalAxis>
								<mx:LinearAxis 
									id="tx" 
									minimum="{traceXMin}" 
									maximum="{traceXMax}" 
									interval="1000" />
							</mx:horizontalAxis>
							
							<mx:horizontalAxisRenderers>
								<mx:AxisRenderer 
									axis="{tx}"
									showLabels="false"
									tickPlacement="none"/>
							</mx:horizontalAxisRenderers>
							
							
							<mx:series>
								<mx:LineSeries dataProvider="{aTraceArray}" displayName="A"  >
									<mx:lineStroke>
										<mx:Stroke 
											color="#00CC00" 
											weight=".25" 
											/>
									</mx:lineStroke>
									
								</mx:LineSeries>
								
								<mx:LineSeries dataProvider="{cTraceArray}" displayName="C"  >
									<mx:lineStroke>
										<mx:Stroke 
											color="#0000CC"
											weight=".25" 
											/>
									</mx:lineStroke>
									
								</mx:LineSeries>
								
								<mx:LineSeries dataProvider="{gTraceArray}" displayName="G" >
									<mx:lineStroke>
										<mx:Stroke 
											color="#303030" 
											weight=".25" 
											/>
									</mx:lineStroke>
									
								</mx:LineSeries>
								
								<mx:LineSeries dataProvider="{tTraceArray}" displayName="T"  >
									<mx:lineStroke>
										<mx:Stroke 
											color="#CC0000" 
											weight=".25" 
											/>
									</mx:lineStroke>
									
								</mx:LineSeries>
								
							</mx:series>
							
						</mx:LineChart>
						
						<mx:HBox id="hSlidersBox" horizontalAlign="center" width="100%">
							<mx:Spacer height="100%" width="75" />
							
							<mx:HSlider id="traceSlider" width="100%" 
										change="dragTrace(event);" 
										liveDragging="false" 
										maximum="{aTraceArray.length-sliderSpacing - 1}"
										minimum="0" dataTipFormatFunction="traceSliderDataTipFunc" height="100%"/> 
							<mx:HSlider id="hZoomSlider" width="100%" 
										change="dragHZoom(event);" 
										liveDragging="false" 
										maximum="2500" value="1250" dataTipFormatFunction="hZoomSliderDataTipFunc"
										minimum="500"  height="100%"/> 
							
							<mx:Spacer height="100%" width="75" />
						</mx:HBox>
						
						<mx:HBox horizontalAlign="center" width="100%">
							<mx:Legend dataProvider="{traceGraph}" direction="horizontal"/>
						</mx:HBox>
						
						
						
					</mx:VBox>
				</mx:HBox>
			</mx:Canvas>
			
			<mx:Canvas  width="100%" height="0" minHeight="0"/>
			
		</mx:Accordion>
		
		
		<mx:Accordion width="100%"   resizeToContent="true" id="accordion4">
			<mx:Canvas label="Sequence" width="100%" height="100%" id="sequenceAccordion" minHeight="0" >
				<mx:VBox width="100%">
					
					<mx:Text paddingBottom="20" paddingLeft="40" paddingRight="40" paddingTop="20" 
							 id='sequenceTextBox' width="100%" letterSpacing="2">
						<mx:htmlText >
							<![CDATA[
							Sequence
							]]>
						</mx:htmlText>
					</mx:Text>
					
					<mx:HBox horizontalAlign="center" width="100%">
						<mx:Legend  direction="horizontal">
							<mx:LegendItem label="High quality bases" fontWeight="bold">
								<mx:fill>
									<mx:SolidColor color="black"/>
								</mx:fill>
								<mx:stroke>
									<mx:Stroke color="black"/>
								</mx:stroke>
							</mx:LegendItem>
							<mx:LegendItem label="Low quality trimmed bases" fontWeight="bold" color="0xCC0000">
								<mx:fill>
									<mx:SolidColor color="0xCC0000"/>
								</mx:fill>
								<mx:stroke>
									<mx:Stroke color="0xCC0000" weight="2"/>
								</mx:stroke>
							</mx:LegendItem>
						</mx:Legend>
					</mx:HBox>
				</mx:VBox>
			</mx:Canvas>
			
			<mx:Canvas  width="100%" height="0" minHeight="0" />
			
		</mx:Accordion>
		
	</mx:VBox>
	
	<mx:states>
		<mx:State name="userState" >
			<mx:SetEventHandler name="mouseDownOutside" handler="mouseDownOutsideHandler(event)"/>
			<mx:SetProperty name="height" value="600"/>
			<mx:SetProperty name="width" value="1000"/>
			<mx:RemoveChild target="{headerBox}"/>
		</mx:State>
	</mx:states>
	
</mx:TitleWindow>
