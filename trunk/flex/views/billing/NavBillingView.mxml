<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"  
	width="100%"    
	height="100%"   
	xmlns:util="views.util.*" >  
 
   <mx:HTTPService                
    id="getLab" 
    url="GetLab.gx"
    destination="getLab" 
    resultFormat="e4x"
    result="onGetLab(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get group', event)"
    method="POST"
    useProxy="false">
    <mx:request>
    	<idLab>{this.labCombo.selectedItem.@idLab}</idLab>
    </mx:request>
   </mx:HTTPService>
   	 
    <mx:HTTPService 
    id="getBillingTemplateList" 
    url="GetBillingTemplateList.gx"
    resultFormat="e4x"
    result="onGetBillingTemplateList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get billing prices', event)"
    method="POST"
    useProxy="false">
    </mx:HTTPService > 
    
    <mx:HTTPService 
    id="getBillingRequestList" 
    url="GetBillingRequestList.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetBillingRequestList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get billing request list', event)"
    method="POST"
    useProxy="false">
       <mx:request>
         <idBillingPeriod>{billingPeriodCombo.selectedItem.@value}</idBillingPeriod>       	
         <idLab>{labCombo.selectedItem.@idLab}</idLab>       	
         <idBillingAccount>{billingAccountCombo.selectedItem != null ? billingAccountCombo.selectedItem.@idBillingAccount : ""}</idBillingAccount>       	
       </mx:request>
    </mx:HTTPService >  
    
    <mx:HTTPService 
    id="getBillingItemList" 
    url="GetBillingItemList.gx"
    showBusyCursor="true"
    resultFormat="e4x"
    result="onGetBillingItemList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get billing item list', event)"
    method="POST"
    useProxy="false">
       <mx:request>
         <requestNumber>{requestNumberText.text}</requestNumber>
         <idBillingPeriod>{requestNumberText.text == "" ? billingPeriodCombo.selectedItem.@value : ""}</idBillingPeriod>       	
         <idLab>{requestNumberText.text == "" ? labCombo.selectedItem.@idLab : ""}</idLab>       	
         <idBillingAccount>{requestNumberText.text == "" ? billingAccountCombo.selectedItem.@idBillingAccount : ""}</idBillingAccount>       	
       </mx:request>
    </mx:HTTPService >          
    
    <mx:HTTPService 
    id="createBillingItems" 
    url="CreateBillingItems.gx"
    showBusyCursor="true"
    resultFormat="e4x"
    result="onCreateBillingItems(event)"
    fault="parentApplication.onFailHttpRequest('Unable to create new billing items', event)"
    method="POST" 
    useProxy="false"> 
    </mx:HTTPService >
        
    <mx:HTTPService 
    id="saveBillingItemList" 
    url="SaveBillingItemList.gx"
    resultFormat="e4x"
    destination="saveBillingItemList"
    showBusyCursor="true"
    result="onSaveBillingItemList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to save billing items', event)"
    method="POST"
    useProxy="false">
    </mx:HTTPService >    
    

     

<mx:Script>
 	<![CDATA[
 		import mx.formatters.CurrencyFormatter;
 		import mx.collections.XMLListCollection; 
 		import mx.collections.Sort;
		import mx.events.DragEvent;
		import mx.managers.DragManager;
        import mx.core.DragSource;
        import mx.controls.Alert;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		import hci.flex.renderers.LabelDictionary;
		import hci.flex.renderers.ComboBoxDictionary;
        import views.renderers.ComboBoxBillingStatus;
        import mx.events.CollectionEvent;	
        import mx.events.CollectionEventKind;	
        import mx.events.PropertyChangeEvent;
        import mx.events.CloseEvent;
        import views.renderers.LabelPercentage;
        import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        
        private var revisionNumber:int = 1;
 		
		private var billingItems:XMLListCollection = new XMLListCollection();

        [Bindable]
        private var billingAccounts:XMLListCollection = new XMLListCollection();

        [Bindable]
        private var requests:XMLListCollection = new XMLListCollection();

        [Bindable]
        private var billingTemplates:XMLListCollection = new XMLListCollection();

        [Bindable]
        private var billingItemsDisplayed:XMLListCollection = new XMLListCollection();

        [Bindable]
        private var billingPeriods:XMLListCollection = new XMLListCollection();
        
        private var billingItemsToRemove:XMLListCollection = new XMLListCollection();
        
        [Bindable]
        private var dirtyBillingItems:XMLListCollection = null;
        
        private var currencyFormatter:CurrencyFormatter = new CurrencyFormatter();
        
        private var lastSelectedItem:Object = null;
        
        [Bindable]
        private var grandTotalPrice:String = "";

      	public function initializeData():void
      	{
      		getBillingTemplateList.send();

			billingPeriods = new XMLListCollection(parentApplication.dictionaryManager.getEntries("hci.gnomex.model.BillingPeriod"));
        	var billingPeriodSort:Sort = new Sort();
        	billingPeriodSort.compareFunction = this.sortBillingPeriods;	   
        	billingPeriods.sort = billingPeriodSort;  
        	billingPeriods.refresh();
        	billingPeriodCombo.dataProvider = billingPeriods;   
 
			var currentBillingPeriod:Object = null;
			for each( var de:Object in billingPeriods) {
				if (de.@value != "" && de.@isCurrentPeriod == "Y") {
					billingItemsDisplayed = new XMLListCollection();
					dirty.resetDirty();
					this.billingItemGrid.dataProvider = new HierarchicalData(billingItemsDisplayed);
	
					currentBillingPeriod = de;
		        	billingPeriodCombo.selectedItem = currentBillingPeriod;
		        	var params:Object = new Object();
		        	params.idBillingPeriod = currentBillingPeriod.@value;
		        	getBillingRequestList.send(params);
		        	getBillingItemList.send(params);
					break;
				}
			} 
        	
        	
        	currencyFormatter.currencySymbol = "$";
        	currencyFormatter.precision = 2;
        	currencyFormatter.useThousandsSeparator;
      	}		
		public function checkDirty():void {      
		}
		
		public function recalculateTotalPrice(experiment:Object):void {
			for each(var bi:Object in experiment.BillingItem) {
				var percentageDisplay:String = bi.@percentageDisplay;
				percentageDisplay = percentageDisplay.replace("%", "");
				
				var unitPriceString:String = bi.@unitPrice;
				unitPriceString = unitPriceString.replace("$", "");
				unitPriceString = unitPriceString.replace(",", "");
				var unitPrice:Number = Number(unitPriceString);
				
				bi.@totalPrice = unitPrice * bi.@qty * (int(percentageDisplay) / 100); 
				bi.@totalPrice = currencyFormatter.format(bi.@totalPrice);	 
			}
		}
		
		 
		private function addBillingItem():void {
			dirty.setDirty();
			var emptyNode:XML = null;
			emptyNode = new XML("<BillingItem " +
				    " idBillingItem='" + "BillingItem" + billingItems.length + "'" +
				    " category='' description='' " +
				    " codeBillingChargeKind=''" +				
					" idBillingPeriod=''" +				
					" idBillingAccount=''" +				
					" qty=''" +
					" unitPrice=''" + 
					" totalPrice=''" +
					" isDirty='Y'" +
					" codeBillingStatus = 'PENDING'" +
					"/>");
			var requestNode:Object = null;
			if ( billingItemGrid.selectedItem == null) {
				requestNode = billingItemsDisplayed.getItemAt(0);
			} else if (billingItemGrid.selectedItem.name() == "BillingItem") {
	       		requestNode = billingItemGrid.selectedItem.parent();
	       	} else {
	       		requestNode = billingItemGrid.selectedItem;
	       	}
	       	requestNode.appendChild(emptyNode);
	       	requestNode.@isDirty = "Y";
	       							
		} 
		
		private function removeBillingItem():void {
			dirty.setDirty();
			if (billingItemGrid.selectedItems.length > 0) {
				var item:XML = null;
				for each(item in billingItemGrid.selectedItems) {		
					item.@remove = "Y";
					
					if (item.name() == "Request") {
						for each(var bi:XML in item.BillingItem) { 
							billingItemsToRemove.addItem(bi); 
						}
						billingItems.removeItemAt(billingItems.getItemIndex(item));
						
					} else if (item.name() == "BillingItem") {
						billingItemsToRemove.addItem(item);
						var requestNode:XML = item.parent();
						for (var i:int = 0; i < requestNode.children().length(); i++) {
							if(requestNode.children()[i].@remove == "Y") {
								delete requestNode.children()[i];
							}
						}
					}
				}
			}
			this.onRequestNodeSelected();
		}
		
      	  
		public function getTreeIcon(item:Object):Class {
				if (item.name() == "Status" ||
				    item.name() == "BillingTemplate" ){ 
					return parentApplication.iconProject;
				}else if (item.name() == "Request") {
					if (item.@codeRequestCategory == "SOLEXA") {
						return parentApplication.iconSolexa;
					} else if (item.@codeRequestCategory == "AFFY") {
						return parentApplication.iconMicroarrayAffy; 
					} else if (item.@codeRequestCategory == "AGIL") {
						return parentApplication.iconMicroarray;
					} else if (item.@codeRequestCategory == "QC") {
						return parentApplication.iconQC; 
					} else {
						return parentApplication.iconFlask;
					}
				}else if (item.name() == "BillingCategory" ) {
					return parentApplication.iconBillingFolder;
				} else if (item.name() == "Lab") {
					return parentApplication.iconGroup;
				} else {
					return parentApplication.iconBilling; 
				}  
		}   
		
		public function getTreeLabel(item:Object, column:AdvancedDataGridColumn):String {
			if (item.name() == "Request" && item.parent().name() == "Status" && item.parent().@status == "PENDING") {
				return item.@label + " " + item.@labName;
			} else {
				return item.@label;
			}
		} 

		public function refresh():void {
			if (dirty.isDirty()) {
				Alert.show( "Unsaved changes will be discarded.  Proceed anyways?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToRefresh,						
						parentApplication.iconWarning);
			} else {
				refreshImpl();
			}
		}
				
		private function onPromptToRefresh(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	refreshImpl();
            }
        }
		public function refreshImpl():void {
			billingItemsDisplayed = new XMLListCollection();
			this.billingItemGrid.dataProvider = new HierarchicalData(billingItemsDisplayed);
			
			var params:Object = new Object();
			params.action = "refresh";
			getBillingTemplateList.send(params);
			
			if (requestNumberText.text != "") {
				this.refreshBillingItemsByRequestNumber();
			} else {
				this.refreshBillingItems();
			}
			
		}
		
		private function refreshBillingItems():void {
			if (billingPeriodCombo.selectedItem == null) {
				billingPeriodCombo.setFocus();
				Alert.show("Please select a billing period or enter an experiment #");
			} else {
				this.dirty.resetDirty();
				this.getBillingRequestList.send();
			}
		}
		
		private function refreshBillingItemsByRequestNumber():void {
			billingPeriodCombo.selectedItem = null;
			labCombo.selectedItem = null;
			billingAccountCombo.selectedItem = null;
			
			this.dirty.resetDirty();

			var params:Object = new Object();
			params.requestNumber = requestNumberText.text;
			getBillingRequestList.send(params);
		}
		
		private function underlyingBillingItemChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || 
			    event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets 
				return;
			}			
			dirty.setDirty();  
				
			for each(var e:Object in event.items) {
				if (e is PropertyChangeEvent) {
					var pe:PropertyChangeEvent = PropertyChangeEvent(e);
					var experiment:Object = pe.source;
					billingItems.removeEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingBillingItemChange);
					experiment.@isDirty = "Y";  
					recalculateTotalPrice(experiment);					
					billingItems.addEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingBillingItemChange);
					
				}
			}				
		}  
		private function onGetBillingTemplateList(event:ResultEvent):void {
			if (getBillingTemplateList.lastResult.name() == "BillingTemplateList") {
				this.billingTemplates = new XMLListCollection(getBillingTemplateList.lastResult.BillingTemplate);
				this.billingCategoryTree.dataProvider = new HierarchicalData(billingTemplates);
				this.billingCategoryTree.dataProvider.refresh();   	
			} else {
				Alert.show("An error occurred while getting price sheet.");
			}			
		}
		private function onGetBillingRequestList(event:ResultEvent):void {
			if (getBillingRequestList.lastResult.name() == "BillingRequestList") {
				this.requests = new XMLListCollection(getBillingRequestList.lastResult.Status);
				this.requestTree.dataProvider = new HierarchicalData(requests);
				this.requestTree.dataProvider.refresh();   	
				
				var pendingItems:XMLList = getBillingRequestList.lastResult.Status.(@label == 'Pending');
				jumpPending.visible =  pendingItems.length() ? true : false;
				
				var completedItems:XMLList = getBillingRequestList.lastResult.Status.(@label == 'Completed');
				jumpCompleted.visible =  completedItems.length() ? true : false;
				
				var approvedItems:XMLList = getBillingRequestList.lastResult.Status.(@label == 'Approved');
				jumpApproved.visible =  approvedItems.length() ? true : false;
				
				
				getBillingItemList.send();
			}  else {
				var message:String = getBillingRequestList.lastResult.ERROR.@message;
				Alert.show(message);
			}				
		} 
		private function onGetBillingItemList(event:ResultEvent):void {
			if (getBillingItemList.lastResult.name() == "BillingItemList") {
				this.billingItems = new XMLListCollection(getBillingItemList.lastResult.Request);
				this.billingItems.addEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingBillingItemChange);			

				reselectRequestTree();
				this.onRequestNodeSelected();
				
			} else {
				var message:String = getBillingItemList.lastResult.ERROR.@message;
				Alert.show(message);
			}			
		} 
		
		private function jumpTo(status:String):void {
			for each(var item:XML in requests) {
				if (item.@label == status) {
					this.requestTree.selectedItem = item;
					this.requestTree.firstVisibleItem = item;
					this.onRequestNodeSelected();
					break;
				}
			}
		}
		
		private function reselectRequestTree():void {
			if (lastSelectedItem != null) {
				if (lastSelectedItem.name() == "Request") {
					for each(var p:XML in requests) {
						for each(var request:XML in p..Request) {
							if (request.@requestNumber == lastSelectedItem.@requestNumber) {
								this.requestTree.selectedItem = request;
								this.requestTree.firstVisibleItem = request;
								break; 
							}
						}
					}
				} else if (lastSelectedItem.name() == "Status") {
					for each(var status:XML in requests) {
						if (status.@label == lastSelectedItem.@label) {
							this.requestTree.selectedItem = status;
							this.requestTree.firstVisibleItem = status;
							break;
						}
					}
				} else if (lastSelectedItem.name() == "Lab") {
					for each(var st:XML in requests) {
						for each(var lab:XML in st.Lab) {
							if (lab.@label == lastSelectedItem.@label) {
								this.requestTree.selectedItem = lab;
								this.requestTree.firstVisibleItem = lab;								
								break;
							}								
						}
					}
				}	
			}			
		}
		private function onCreateBillingItems(event:ResultEvent):void {
			if (createBillingItems.lastResult.name() == "NewBilling") {
				this.billingItems.addItem(createBillingItems.lastResult..Request);
				this.reselectRequestTree();
				onRequestNodeSelected();
			} else {
				Alert.show("An error occurred while creating new billing items.");
			}			
		}		
		private function onGetLab(event:ResultEvent):void {			
			var lab:Object = getLab.lastResult..Lab.(@idLab == labCombo.selectedItem.@idLab);
			billingAccounts = new XMLListCollection(lab.billingAccounts.BillingAccount);
			var blankNode:XML = new XML("<BillingAccount idBillingAccount='' accountName=''/>");
			billingAccounts.addItemAt(blankNode, 0);
			billingAccountCombo.dataProvider = billingAccounts;
		}
		

 		private function onRequestNodeSelected():void {
 			if (this.requestTree.selectedItem == null) {
 				return;
 			}
			billingItemsDisplayed = new XMLListCollection();
			
			var totalPrice:Number = new Number(0);
			var request:XML = null;
			var lab:XML = null;
			var item:Object = null;
 			if (this.requestTree.selectedItem.name() == "Status" && 
 			    this.requestTree.selectedItem.@status == 'PENDING') {
 				this.billingItemsDisplayed = new XMLListCollection();
 				for each(request in this.requestTree.selectedItem..Request) {
 					for each(item in billingItems) {
	 					if (item.@requestNumber == request.@requestNumber &&
		 					item.@idBillingAccount == request.@idBillingAccount) {
	 						billingItemsDisplayed.addItem(item);
		 					totalPrice = sumTotalPrice(totalPrice, item);
 						}
 					}  
 					
 				}
 			} else if (this.requestTree.selectedItem.name() == "Status") {
 				this.billingItemsDisplayed = new XMLListCollection();
 				for each(lab in this.requestTree.selectedItem..Lab) {
	 				for each(request in lab.Request) {
	 					for each(item in billingItems) {
		 					if (item.@requestNumber == request.@requestNumber &&
		 					    item.@idBillingAccount == lab.@idBillingAccount) {
		 						billingItemsDisplayed.addItem(item);
		 						totalPrice = sumTotalPrice(totalPrice, item);
	 						}
	 					}  
	 					
 					}
 				}
 			}  else if (this.requestTree.selectedItem.name() == "Lab") {
 				this.billingItemsDisplayed = new XMLListCollection();
 				lab = XML(this.requestTree.selectedItem); 
 				for each(request in lab.Request) {
 					for each(item in billingItems) {
	 					if (item.@requestNumber == request.@requestNumber &&
	 					    item.@idBillingAccount == lab.@idBillingAccount) {
	 						billingItemsDisplayed.addItem(item);
		 					totalPrice = sumTotalPrice(totalPrice, item);
 						}
 					}  
 				}
 			} else if (this.requestTree.selectedItem.name() == "Request") {
 				for each(item in billingItems) { 
 					if (item.@requestNumber == requestTree.selectedItem.@requestNumber &&
 					    item.@idBillingAccount == requestTree.selectedItem.@idBillingAccount) {
	 					billingItemsDisplayed.addItem(item);
						totalPrice = sumTotalPrice(totalPrice, item);
 					}
 				}
 			}  
			this.billingItemGrid.dataProvider = new HierarchicalData(this.billingItemsDisplayed);
			this.billingItemGrid.dataProvider.refresh();
			
			if (totalPrice > 0) {
				grandTotalPrice = currencyFormatter.format(totalPrice.toFixed(2).toString());			
			} else {
				grandTotalPrice = "";
			}
 		}
 		
 		private function sumTotalPrice(totalPrice:Number, billingItem:Object):Number {
 			var price:String = billingItem.@totalPrice;
 			price = price.replace('$', '');
 			price = price.replace(',', '');
 			totalPrice += (price != '' ? new Number(price) : 0);
 			return totalPrice;
 		}
        private function onDragDropBillingItemGrid(event:DragEvent) : void
		{
			// For some reason, preventDefault on AdvancedDataGrid
			// isn't enough to stop the defaut drop operation from
			// occurring. So I added hidDropFeedback and showFeedback
			// and that seemed to do the trick.	
			this.billingItemGrid.hideDropFeedback(event);
			event.preventDefault();
			DragManager.showFeedback(DragManager.NONE);

		   
			var ds:DragSource = event.dragSource;
           
           	// retrieve the data associated with the "items" format. This will be the data that
	       	// the dragInitiator has copied into the DragSource.
	       	var items:Array = ds.dataForFormat("treeDataGridItems") as Array;
           
           	var isRequest:Boolean = false;
           	var isBillingPrice:Boolean = false;
           
           	for(var i:int = 0; i < items.length; i++) {
           		var dragItem:Object = items[i];
	       		if (dragItem.name() == "Request") {
	       			isRequest = true;
	       			break;
	       		} else if (dragItem.name() == "BillingPrice") {
	       			isBillingPrice = true;
	       			break;
	       		}
           	}
            
	      

		   	// The user didn't drag new request, so just treat
		   	// as click.
		   	if (isRequest) {
		       if (requestTree.selectedItem.name() != "Request" || 
		       requestTree.selectedItem.@codeBillingStatus != "NEW") {
		       		onRequestNodeSelected();
			       	return;
		       }
		   	}
		   	if (isBillingPrice) {
		       if (billingCategoryTree.selectedItem.name() != "BillingPrice" ) {
		       		Alert.show("Please drag billing price onto billing items grid.");
			       	event.preventDefault();
			       	event.target.hideDropFeedback(event);
			       	DragManager.showFeedback(DragManager.NONE);
			       	return;
		       }
		   	}		   
	       
	       	// determine where in the grid the drop occurs and select that node by the index; 
	       	// followed by retrieving the node itself. 
	        var dropNode:XML = null;
	        var dropRequestNode:XML = null;
	        var idBillingAccount:Object = null;
	        var idLab:Object = null;
	       	if (isBillingPrice) {
		       	var r:int = billingItemGrid.calculateDropIndex(event);
		       	if (r > 0) { 
	    	   		r--;
	       		}
	       		billingItemGrid.selectedIndex = r;
	       		dropNode = billingItemGrid.selectedItem as XML;
	       		
	       		// Don't allow drag operation if nothing in billing grid
	       		if (dropNode == null) {
	       			event.preventDefault();
			       	event.target.hideDropFeedback(event);
			       	DragManager.showFeedback(DragManager.NONE);
			       	return;
	       		}
	       		
	       		
	       		if (dropNode.name() == "BillingItem") {
	       			dropRequestNode = dropNode.parent();
	       		} else {
	       			dropRequestNode = dropNode;
	       		} 	      
	       	}
	
 		   	// Initialize billing items if we have anything other than pending items
 		   	if (isRequest){ 
	 		   	if (billingItems == null) {
		 		   	billingItems = new XMLListCollection(); 		
 				   	this.billingItemGrid.dataProvider = new HierarchicalData(billingItems);
				   	this.billingItemGrid.dataProvider.refresh();   	
 		   		}  
 		   	} 
 		   		
	       	// insert a Request node under the Pending status
          	for(var x:int = 0; x < items.length; x++) {
          		var dragNode:Object = items[x]; 
	       		if (dragNode.name() == "Request") {  
	       			this.lastSelectedItem = this.requestTree.selectedItem;
	       			dragNode.@codeBillingStatus = "PENDING";
	       			var params:Object = new Object(); 
	       			params.idRequest = dragNode.@idRequest;
	       			params.idBillingPeriod = billingPeriodCombo.selectedItem != null ? billingPeriodCombo.selectedItem.@value : "";
	       			this.createBillingItems.send(params);
	    	   	} else if (dragNode.name() == "BillingPrice") {
       				var newBillingItem:XML = new XML(
       				 "<BillingItem " + 
       				 " codeBillingChargeKind='" + dragNode.@codeBillingChargeKind + "'" +
       			 	 " category='" + dragNode.@category + "'" +
       			 	 " description='" + dragNode.@description + "'" +
       			 	 " unitPrice='" + dragNode.@unitPrice + "'" +	
       			 	 " codeBillingStatus='PENDING'" +	
       			 	 " idBillingPeriod='" + (billingPeriodCombo.selectedItem != null ? billingPeriodCombo.selectedItem.@value : "") + "'" + 
       			 	 " idBillingCategory='" +	dragNode.parent().@idBillingCategory + "'" +
       			 	 " idBillingPrice='" + dragNode.@idBillingPrice + "'" +
       			 	 " idRequest='" + dropRequestNode.@idRequest + "'" +
       			 	 " idBillingAccount='" + dropNode.@idBillingAccount + "'" +
       			 	 " idLab='" + dropNode.@idLab + "'" +
       			 	 " percentagePrice='1'" +
       			 	 " percentageDisplay='100%'" +
       			 	 " notes=''" +
       			 	 " qty=''" + 
       			 	 " isDirty='Y'" +
       			 	 "/>");
		       	
		       		dropRequestNode.@isDirty = "Y";
		       		dropRequestNode.appendChild(newBillingItem);
	       		}
	       	}

			onRequestNodeSelected();
	       
		}
        private function sortBillingPeriods(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var order1:Object = obj1.@startDateSort;
				var order2:Object = obj2.@startDateSort;
				
				if (obj1.@value == '') {
					return -1;
				} else if (obj2.@value == '') {
					return 1;
				} else {
					if (order1 < order2) {
						return -1;
					} else if (order1 > order2) {
						return 1;
					} else {
						return 0;
					}
				}
			}			
		}			 
		
 		private function save():void {  
 			var params:Object = new Object();
 			params.billingItemXMLString = "<SaveList>";
 			
 			for each(var request:XML in billingItems) {
 				if (request.@isDirty == "Y") { 
 					for each(var bi:XML in request.BillingItem) {
 						params.billingItemXMLString += bi.toXMLString();	
 					}
 				} 
 			}
 			params.billingItemXMLString += "</SaveList>";
 			 
 			params.billingItemXMLString += "<RemoveList>";
 			for each(var billingItemToRemove:XML in this.billingItemsToRemove) {
 				params.billingItemXMLString += billingItemToRemove.toXMLString();
 			} 
 			params.billingItemXMLString += "</RemoveList>";

 			
 			saveBillingItemList.send(params);
  
 		}
        private function onSaveBillingItemList(event:ResultEvent):void {
        	if (saveBillingItemList.lastResult.name() == "SUCCESS") {
        		dirty.resetDirty();
        		
        		billingItemsToRemove = new XMLListCollection();

        		lastSelectedItem = this.requestTree.selectedItem;
        		billingItemsDisplayed = new XMLListCollection();
        		billingItemGrid.dataProvider = new HierarchicalData(billingItemsDisplayed);
        		
        		if (requestNumberText.text == "") {
	        		this.refreshBillingItems();    			    			
        		} else {
        			this.refreshBillingItemsByRequestNumber();
        		}
        		
        		
        	} else {
        		Alert.show(saveBillingItemList.lastResult..ACTMESSAGE.@TEXT);
        	}        	
        }
        
		public function showBillingInvoice():void {
			
			if (billingPeriodCombo.selectedItem == null ||
			    billingPeriodCombo.selectedItem.@value == "") {
				Alert.show("Please select a billing period.");
				return;    	
			}
			if (this.requestTree.selectedItem != null) {
				var labNode:Object = null;
				if (this.requestTree.selectedItem.name() == "Request") {
					if (this.requestTree.selectedItem.parent().name() == "Lab") {
						labNode = this.requestTree.selectedItem.parent();
					} else {
						Alert.show("Please complete the billing items first.");
						return;
					}					
				} else if (this.requestTree.selectedItem.name() == "Lab") {
					labNode = this.requestTree.selectedItem; 
				}
				if (labNode != null) {
					var url:URLRequest = new URLRequest('ShowBillingInvoiceForm.gx' +
						'?idBillingPeriod=' + billingPeriodCombo.selectedItem.@idBillingPeriod + 
						'&idLab=' + labNode.@idLab +
						'&idBillingAccount=' + labNode.@idBillingAccount);
					navigateToURL(url, '_blank');			
					
				} else {
					Alert.show("Please select a lab folder");
				}
			} else {
				Alert.show("Please select a lab folder");
			}
		} 
		public function showBillingMonthendReport():void {
			
			if (billingPeriodCombo.selectedItem == null ||
			    billingPeriodCombo.selectedItem.@value == "") {
				Alert.show("Please select a billing period.");
				return;    	   
			}
			if (this.requestTree.selectedItem != null) { 
				var statusNode:Object = null;
				if (this.requestTree.selectedItem.name() == "Lab") {
					statusNode = this.requestTree.selectedItem.parent(); 
				} else if (this.requestTree.selectedItem.name() == "Status") {
					statusNode = this.requestTree.selectedItem;
				}
				if (statusNode != null && 
				    (statusNode.@status == "APPROVED" || statusNode.@status == "APPROVEDEX") ) {
					var url:URLRequest = new URLRequest('ShowBillingMonthendReport.gx' +
					    '?codeBillingStatus=' + statusNode.@status +
						'&idBillingPeriod=' + billingPeriodCombo.selectedItem.@idBillingPeriod);
					navigateToURL(url, '_blank');			
					
				} else {
					Alert.show("Please select the 'Approved' or 'Approved (External)' folder.")
				}
				
			} else {
				Alert.show("Please select the 'Approved' or 'Approved (External)' folder.")
			}
		}
		public function showBillingGLInterface():void {
			if (billingPeriodCombo.selectedItem == null ||
			    billingPeriodCombo.selectedItem.@value == "") {
				Alert.show("Please select a billing period.");
				return;    	
			} 
			
			if (requestTree.selectedItem.name() != "Status") {
				Alert.show("For the GL Interface, the 'Approved' folder must be selected.")
				return;
			}
			 
			if (this.requestTree.selectedItem != null) { 
				var statusNode:Object = this.requestTree.selectedItem; 
				if (statusNode != null && 
				    (statusNode.@status == "APPROVED" )) {
				    	 
            		var runWindow:BillingGLInterfaceView = BillingGLInterfaceView(mx.managers.PopUpManager.createPopUp(this, BillingGLInterfaceView, true));
            		mx.managers.PopUpManager.centerPopUp(runWindow);
            		runWindow.setFocus();
            		runWindow.idBillingPeriod = billingPeriodCombo.selectedItem.@idBillingPeriod;
            		runWindow.billingPeriod = billingPeriodCombo.selectedItem.@billingPeriod;
            		runWindow.grandTotalPrice = this.grandTotalPrice;
					
				} else {
					Alert.show("For the GL Interface, the 'Approved' folder must be selected.")
				}
				
			} else {
				Alert.show("For the GL Interface, the 'Approved' folder must be selected.")
			}
		}		
		
		private function showPriceEditView():void {
			if (billingCategoryTree.selectedItem.name() == "BillingPrice") {
				var editWindow:BillingPriceEditView = BillingPriceEditView(mx.managers.PopUpManager.createPopUp(this, BillingPriceEditView, true));
            	mx.managers.PopUpManager.centerPopUp(editWindow);
            	editWindow.setFocus();
            	editWindow.billingPrice = this.billingCategoryTree.selectedItem; 				
			}  
		}  
		
		private function showSplitAccountsView():void {
			var requestNode:Object = null;
			if (this.billingItemGrid.selectedItem != null && this.billingItemGrid.selectedItem.name() == "Request") {
				  
				requestNode = this.billingItemGrid.selectedItem;
			} else if (this.billingItemGrid.selectedItem != null && this.billingItemGrid.selectedItem.name() == "BillingItem") {
				requestNode = this.billingItemGrid.selectedItem.parent();
			} else if (this.billingItemGrid.selectedItem == null) {
				for each(var item:Object in this.billingItemsDisplayed) {
					// We have more than 1 request in the billing item grid, so we don't
					// know which one to selected.  
					if (requestNode != null && requestNode.@idRequest != item.@idRequest) {
						requestNode = null;
						break;
					}
					// We only have one request is the billing item grid.  Assume
					// this one should be split.
					requestNode = item;
				}
			}
			
			if (requestNode == null) { 
				Alert.show("Please select an experiment (in the list) to split into separate accounts.");
				return;
			}
			
			
			if (requestNode.@status == "NEW") {
					Alert.show("Please save the billing items before splitting into separate accounts.");
					return;				
			} 
			
			var billingAccountEntries:XMLListCollection = new XMLListCollection();	
			var billingPeriods:XMLListCollection = new XMLListCollection();
			var labs:XMLListCollection = new XMLListCollection();
			for each(var lab:Object in parentApplication.promptedLabList) {
				labs.addItem(lab);
			}
			for each(var r:Object in this.billingItemsDisplayed) {
				for each(var billingItem:Object in r.BillingItem) {
					if (billingItem.@idRequest != requestNode.@idRequest) {
						continue; 
					}
					
					var found:Boolean = false;
					for each(var acct:Object in billingAccountEntries) {
						if (acct.@idBillingAccount == billingItem.@idBillingAccount) {
							found = true;
							break; 
						} 
					}  
					if (!found) {
	       				var newBillingAccount:XML = new XML(
		   				 "<BillingAccount " + 
	   			 	 	 " idBillingAccount='" + billingItem.@idBillingAccount + "'" +
	   			 	 	 " accountName='" + billingItem.@accountName + "'" +
	   			 	 	 " idLab='" + billingItem.@idLab + "'" +
	   			 	 	 " labName='" + billingItem.@labName + "'" +
	   			 	 	 " percentage='" + billingItem.@percentageDisplay + "'" +
	   			 	 	 "/>"); 
	   			 	 	 billingAccountEntries.addItem(newBillingAccount);
					} 
					
					var foundBillingPeriod:Boolean = false;
					for each(var bp:Object in billingPeriods) {
						if (bp.@idBillingPeriod == billingItem.@idBillingPeriod) {
							foundBillingPeriod = true;
							break; 
						} 
					}  
					if (!foundBillingPeriod) {
						var newBillingPeriod:XML = new XML("<BillingPeriod idBillingPeriod='" + billingItem.@idBillingPeriod + "'/>");
						billingPeriods.addItem(newBillingPeriod);
					}
					
				}
				
			}
			
			if (billingPeriods.length > 1) {
				Alert.show("This experiment has billing items spanning multiple billing periods.  Please select a billing period from the dropdown to qualify the billing items to be split.");
				return;
			}
			
			if (billingPeriods.length == 0) {
				Alert.show("Please select a billing period from the dropdown first.");
				return;
			}
			
			var idBillingPeriod:Object = billingPeriods.getItemAt(0).@idBillingPeriod;
			
			var splitWindow:BillingSplitView = BillingSplitView(mx.managers.PopUpManager.createPopUp(this, BillingSplitView, true));
        	mx.managers.PopUpManager.centerPopUp(splitWindow); 
        	splitWindow.setFocus();
        	splitWindow.idBillingPeriod = idBillingPeriod;
        	splitWindow.request = requestNode;			
        	splitWindow.labs = labs;
        	splitWindow.billingAccountEntries = billingAccountEntries;
        	splitWindow.initializeData();
			
		}
		
		private function showReassignAccountView():void {
			var requestNode:Object = null;
			if (this.dirty.isDirty()) {
				Alert.show("Please save the billing items before trying to reassign the account.");
				return;
			}
			if (this.billingItemGrid.selectedItem != null && this.billingItemGrid.selectedItem.name() == "Request") {				 
				requestNode = this.billingItemGrid.selectedItem;
				if (requestNode.@status == "NEW") {
						Alert.show("Please save the new billing items before trying to reassign the account.");
						return;				
				} 
			} else if (this.requestTree.selectedItem != null && this.requestTree.selectedItem.name() == "Request") {
				requestNode = this.requestTree.selectedItem;
				if (requestNode.@codeBillingStatus == "NEW") {
						Alert.show("Please save the new billing items before trying to reassign the account.");
						return;				
				} 
			} 
			
			if (requestNode == null) { 
				Alert.show("To reassign the account, you must first select an experiment in the list.");
				return;
			}
			
			
			
			var billingPeriods:XMLListCollection = new XMLListCollection();
			for each(var r:Object in this.billingItemsDisplayed) {
				for each(var billingItem:Object in r.BillingItem) {
					if (billingItem.@idRequest != requestNode.@idRequest) {
						continue; 
					}
					var foundBillingPeriod:Boolean = false;
					for each(var bp:Object in billingPeriods) {
						if (bp.@idBillingPeriod == billingItem.@idBillingPeriod) {
							foundBillingPeriod = true;
							break; 
						} 
					}  
					if (!foundBillingPeriod) {
						var newBillingPeriod:XML = new XML("<BillingPeriod idBillingPeriod='" + billingItem.@idBillingPeriod + "'/>");
						billingPeriods.addItem(newBillingPeriod);
					}
					
				}
				
			}
			
			if (billingPeriods.length > 1) {
				Alert.show("This experiment has billing items spanning multiple billing periods.  Please select a billing period from the dropdown to qualify the billing items to be reassigned to different account.");
				return;
			}
			if (billingPeriods.length == 0) {
				Alert.show("Please select a billing period from the dropdown first.");
				return;
			}
			var idBillingPeriod:Object = billingPeriods.getItemAt(0).@idBillingPeriod;
			
			
			var reassignWindow:BillingReassignView = BillingReassignView(mx.managers.PopUpManager.createPopUp(this, BillingReassignView, true));
        	mx.managers.PopUpManager.centerPopUp(reassignWindow);
        	reassignWindow.setFocus();
        	reassignWindow.request = requestNode;
        	reassignWindow.idBillingPeriod = idBillingPeriod;
        	reassignWindow.initializeData();

		}


 	]]>
 </mx:Script>	

  <mx:VBox width="100%" verticalGap="4" height="100%">
	    <mx:HBox width="100%" styleName="navBox" horizontalGap="8">

		    	<mx:HBox horizontalGap="0" height="100%" verticalAlign="middle" verticalGap="0" horizontalAlign="right" paddingRight="0"  >
					<mx:Label id="billingPeriodLabel" visible="true" text="Billing Period" paddingBottom="0"/>
					<mx:ComboBox id="billingPeriodCombo" 
						labelField="@display"
						visible="true"  
						width="100" change="requestNumberText.text = &quot;&quot;;refresh()">
					</mx:ComboBox>			   	
		    	</mx:HBox>  

			   <mx:HBox horizontalGap="0" verticalAlign="middle">
					<mx:Label id="groupLabel" visible="true" text="Group" paddingBottom="0"/>
					<mx:ComboBox id="labCombo" 
						labelField="@name"
						dataProvider="{parentApplication.promptedLabList}"
						visible="true"  width="150" change="requestNumberText.text = &quot;&quot;;getLab.send();refresh()">
					</mx:ComboBox>
			   </mx:HBox>

		    	<mx:HBox horizontalGap="0" height="100%" verticalAlign="middle" verticalGap="0" horizontalAlign="right" paddingRight="0"  >
					<mx:Label id="billingAccountLabel" visible="true" text="Billing Account" paddingBottom="0"/>
					<mx:ComboBox id="billingAccountCombo" 
						labelField="@accountName"
						 visible="true"  width="150" change="requestNumberText.text = &quot;&quot;;refresh()">
					</mx:ComboBox>			   	
		    	</mx:HBox> 
				
				<mx:VRule height="20"/>
	    	
				<mx:HBox horizontalGap="0" height="100%" verticalAlign="middle" verticalGap="0" horizontalAlign="right" paddingRight="0"  >
					<mx:Label id="requestNumberLabel" visible="true" text="Lookup by Experiment #" paddingBottom="0"/>
					<mx:TextInput id="requestNumberText" width="60">
					</mx:TextInput>			   	
					<mx:Button id="lookupButton"  
						fontFamily="Arial"  height="18"
						color="#400040" click="refresh()" visible="true" icon="@Embed('assets/arrow_right.png')" width="20"/>
		    	</mx:HBox>	    
		    	
	    </mx:HBox>

        <mx:HDividedBox height="100%" width="100%">
        	<mx:TabNavigator height="100%" width="220" paddingTop="2" styleName="navTabNavigator" paddingLeft="4" paddingRight="4">
        		<mx:VBox label="Experiments" height="100%" verticalGap="0" width="100%" color="#000000" >
        			<mx:HBox horizontalGap="0" paddingBottom="2" paddingTop="0" color="#000000">
						<mx:LinkButton label="Pending" textDecoration="underline" paddingRight="0" styleName="formLinkSmallButton" click="jumpTo(&quot;Pending&quot;)" id="jumpPending"/>
						<mx:LinkButton label="Completed" textDecoration="underline" paddingRight="0" styleName="formLinkSmallButton" click="jumpTo(&quot;Completed&quot;)" id="jumpCompleted"/>
						<mx:LinkButton label="Approved" textDecoration="underline" paddingRight="0"  styleName="formLinkSmallButton" click="jumpTo(&quot;Approved&quot;)" id="jumpApproved"/>
        				
        			</mx:HBox>
        		    
					<mx:AdvancedDataGrid id="requestTree" width="100%" height="100%"  
						showHeaders="false"  
						displayItemsExpanded="true" 
						dragEnabled="true" 
						itemClick="onRequestNodeSelected()"
						iconFunction="getTreeIcon"  
						labelFunction="getTreeLabel"
						dragMoveEnabled="false" dropEnabled="false" borderStyle="solid" dropShadowEnabled="true">
    		 	        <mx:dataProvider>
  						  <mx:HierarchicalData id="rc" source="{requests}"/>
				        </mx:dataProvider>		 				  
				        <mx:columns>
  						  <mx:AdvancedDataGridColumn dataField="@label" showDataTips="true" /> 
  					    </mx:columns>
  					</mx:AdvancedDataGrid>
  				    <mx:ControlBar width="100%" verticalAlign="top" paddingTop="2">
  				        <mx:VBox verticalGap="0" width="100%">
  				        <mx:HBox horizontalGap="0" width="100%">
				 	    <mx:HBox width="100" horizontalAlign="left">
				 	    <mx:LinkButton label="Invoice" textDecoration="underline" icon="@Embed(source='../../assets/email_open.png')" click="showBillingInvoice()"/>
				 	    </mx:HBox>
				 	    <mx:LinkButton label="Summary" textDecoration="underline" icon="@Embed(source='../../assets/date_edit.png')" click="showBillingMonthendReport()"/>
  				        </mx:HBox>
  				        <mx:HBox horizontalGap="0" width="100%">
				 	    <mx:HBox width="100" horizontalAlign="left">
					 	    <mx:LinkButton label="GL File" textDecoration="underline" icon="@Embed(source='../../assets/feed_disk.png')" click="showBillingGLInterface()"/>
  				        </mx:HBox>
  					 	<mx:LinkButton textDecoration="underline" label="Refresh" icon="@Embed('../../assets/action_refresh.gif')" 
				 	            click="refresh()" toolTip="Refresh"/>
				 	    	
				 	    </mx:HBox>        
  				        	
  				        </mx:VBox>
				 	            				
			        </mx:ControlBar>
       			
        		</mx:VBox>
        		
        		<mx:VBox label="Prices" height="100%" verticalGap="0" width="100%" color="#000000">
					<mx:AdvancedDataGrid id="billingCategoryTree" width="100%" height="100%" 
						showHeaders="false" 
						displayItemsExpanded="false" 
						iconFunction="getTreeIcon" 
						dragEnabled="true" dragMoveEnabled="false" dropEnabled="false" 
						doubleClick="showPriceEditView()" doubleClickEnabled="true" borderStyle="solid" dropShadowEnabled="true">
    		 	        <mx:dataProvider> 
  						  <mx:HierarchicalData source="{billingTemplates}"/>
				        </mx:dataProvider>						  
				        <mx:columns>
  						  <mx:AdvancedDataGridColumn dataField="@display" /> 
  						  <mx:AdvancedDataGridColumn dataField="@unitPriceCurrency" width="60" textAlign="right" /> 
  					    </mx:columns>
  					</mx:AdvancedDataGrid>        		    
  				    <mx:ControlBar width="100%" verticalAlign="top" horizontalAlign="right">
				 	    <mx:LinkButton textDecoration="underline" label="Refresh" icon="@Embed('../../assets/action_refresh.gif')" 
				 	            click="refresh()" toolTip="Refresh"/>				
			        </mx:ControlBar>
        		</mx:VBox>
        	</mx:TabNavigator>

			        	
        	<mx:Panel width="100%" height="100%" verticalGap="0" title="{'Billing Items' + (this.requestTree.selectedItem != null ? '     ' + this.requestTree.selectedItem.@label + '     ' + this.grandTotalPrice : '')}">
        		<mx:HBox width="100%">
        			<mx:LinkButton id="removeBillingItemButton" label="Remove" disabledIcon="@Embed(source='../../assets/delete_disable.png')" icon="@Embed(source='../../assets/delete.png')" toolTip="Remove biling item"  textDecoration="underline" click="removeBillingItem()"/>
        			<mx:LinkButton  label="Reassign account" disabledIcon="@Embed(source='../../assets/account_disable.png')" icon="@Embed(source='../../assets/account.png')" toolTip="Reassign charges to another account"  textDecoration="underline" click="showReassignAccountView()" visible="true">
        				<mx:enabled>{(billingItemGrid.selectedItem != null &amp;&amp; billingItemGrid.selectedItem.name() == 'Request') || (this.requestTree.selectedItem != null &amp;&amp; this.requestTree.selectedItem.name() == 'Request') ? true : false}</mx:enabled>
        			</mx:LinkButton> 
        			<mx:LinkButton  label="Split accounts" disabledIcon="@Embed(source='../../assets/account_split_disable.png')" icon="@Embed(source='../../assets/account_split.png')" toolTip="Split charges into multiple accounts"  textDecoration="underline" click="showSplitAccountsView()" visible="true"/>
        			<mx:Spacer width="100%"/>
        			 
        		</mx:HBox>
        		
        		<mx:AdvancedDataGrid width="100%" height="100%"  
        			displayItemsExpanded="true"  
        			editable="true" 
        			sortExpertMode="true" 
        			sortableColumns="false"   
        			id="billingItemGrid" 
        			dropEnabled="true"  
        			dragDrop="onDragDropBillingItemGrid(event)"
                    allowMultipleSelection="false" 
                    iconFunction="getTreeIcon" 
                    wordWrap="true" 
                    headerWordWrap="true" 
                    selectionMode="singleRow" 
                     alternatingItemColors="[0xFFFFFF, 0xEEEEE0]" dropShadowEnabled="true" borderStyle="solid">
        		 	<mx:dataProvider>   
      						<mx:HierarchicalData source="{billingItemsDisplayed}"/> 
    				</mx:dataProvider> 
        			<mx:columns> 
        				<mx:AdvancedDataGridColumn headerText="#" dataField="@requestNumber" editable="false" width="12"  />
        				<mx:AdvancedDataGridColumn headerText="Group" dataField="@billingLabName" editable="false" width="10" wordWrap="true"/>
        				<mx:AdvancedDataGridColumn headerText="Client" dataField="@submitter" editable="false" width="9" wordWrap="false"/>
        				<mx:AdvancedDataGridColumn headerText="Acct" dataField="@billingAccountName" editable="false" width="9" wordWrap="false"/>
        				<mx:AdvancedDataGridColumn headerText="Billing period" dataField="@idBillingPeriod" editable="true" width="13"  wordWrap="false"
        			      editorDataField="value"  
        				  rendererIsEditor="false"   
						  itemRenderer="{LabelDictionary.create(parentApplication.dictionaryManager, 'hci.gnomex.model.BillingPeriod', '@idBillingPeriod')}"                              
						  itemEditor="{hci.flex.renderers.ComboBox.create(billingPeriods, '@idBillingPeriod')}"/>                 
        				<mx:AdvancedDataGridColumn headerText="%" dataField="@percentageDisplay" editable="true" textAlign="right" width="6" wordWrap="false"
        				  editorDataField="text"
        				  rendererIsEditor="false"
						  itemRenderer="views.renderers.LabelPercentage" />                              
        				<mx:AdvancedDataGridColumn headerText="Type" dataField="@codeBillingChargeKind" editable="true" width="6" wordWrap="false" 
        			      editorDataField="value" 
        				  rendererIsEditor="false"
						  itemRenderer="{LabelDictionary.create(parentApplication.dictionaryManager, 'hci.gnomex.model.BillingChargeKind', '@codeBillingChargeKind')}"                              
						  itemEditor="{ComboBoxDictionary.create(parentApplication.dictionaryManager, 'hci.gnomex.model.BillingChargeKind', '@codeBillingChargeKind')}"/>                 
        				<mx:AdvancedDataGridColumn headerText="Billing Category" dataField="@category" editable="false" width="12" wordWrap="true"/>
        				<mx:AdvancedDataGridColumn headerText="Description" dataField="@description" editable="true" width="12" wordWrap="true"/>
        				<mx:AdvancedDataGridColumn headerText="Notes" dataField="@notes" editable="true" width="12" wordWrap="true"/>
        				<mx:AdvancedDataGridColumn headerText="Unit price" dataField="@unitPrice"  textAlign="right" editable="true" width="8" wordWrap="false"/> 
        				<mx:AdvancedDataGridColumn headerText="Qty" dataField="@qty" editable="true" textAlign="right" width="5" wordWrap="false"/>
        				<mx:AdvancedDataGridColumn headerText="Total price" dataField="@totalPrice" textAlign="right" width="11" editable="false" wordWrap="false"/>
        				<mx:AdvancedDataGridColumn headerText="Status" dataField="@codeBillingStatus" editable="true" width="18" wordWrap="false"
        			      editorDataField="value"  
        				  rendererIsEditor="false"
						  itemRenderer="{LabelDictionary.create(parentApplication.dictionaryManager, 'hci.gnomex.model.BillingStatus', '@codeBillingStatus')}"                              
						  itemEditor="{ComboBoxBillingStatus.create('@codeBillingStatus')}"/>                 
        			</mx:columns>
        			 
        		</mx:AdvancedDataGrid>     
   
				<mx:ControlBar width="100%">
				
				      <mx:HBox width="100%" horizontalAlign="right">
				        <util:DirtyNote id="dirty" />
				      	<mx:Button id="saveButton" label="Save" click="save()"
				             	icon="@Embed('../../assets/action_save.gif')">
				        </mx:Button>        	
				      </mx:HBox>
				 </mx:ControlBar>

        	</mx:Panel>
        </mx:HDividedBox>
  </mx:VBox>
  
	
</mx:Canvas>
