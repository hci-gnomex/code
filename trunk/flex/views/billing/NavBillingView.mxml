<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
        width="100%" backgroundAlpha="0"
        creationPolicy="all" show="init()"
        height="100%" xmlns:util="views.util.*">


 
   <mx:HTTPService                 
    id="getLab" 
    url="GetLab.gx"
    destination="getLab" 
    resultFormat="e4x"
    result="onGetLab(event)" 
    fault="parentApplication.onFailHttpRequest('Failed to get group', event)"
    method="POST"
    useProxy="false"> 
    <mx:request>
    	<idLab>{this.labCombo.selectedItem.@idLab}</idLab>
    </mx:request>
   </mx:HTTPService>
   	 

    <mx:HTTPService 
    id="getPricingList" 
    url="GetPricingList.gx"
    resultFormat="e4x"
    result="onGetPricingList(event)"
    showBusyCursor="true"
    fault="parentApplication.onFailHttpRequest('Unable to get prices', event)"
    method="POST"
    useProxy="false">
    <mx:request>
    	<showInactive>{this.showInactivePricesCheckbox.selected ? "Y" : "N"}</showInactive>
    	<showPriceCriteria>{this.showPriceCriteriaCheckbox.selected  ? "Y" : "N"}</showPriceCriteria>
    	<showPrices>{this.showPricesCheckbox.selected  ? "Y" : "N"}</showPrices>
		<idCoreFacility>{coreFacilityCombo.selectedItem != null ? coreFacilityCombo.selectedItem.@value : ""}</idCoreFacility>  
    </mx:request>
    </mx:HTTPService > 

   <mx:HTTPService                
    id="getPrice" 
    url="GetPrice.gx"
    destination="getPrice" 
    resultFormat="e4x"
    result="onGetPrice(event)" 
    fault="parentApplication.onFailHttpRequest('Failed to get price', event)"
    method="POST"
    useProxy="false"> 
   </mx:HTTPService>

   <mx:HTTPService                
    id="deletePrice" 
    url="DeletePrice.gx"
    destination="deletePrice" 
    resultFormat="e4x"
    result="onDeletePrice(event)" 
    fault="parentApplication.onFailHttpRequest('Failed to delete price', event)"
    method="POST"
    useProxy="false"> 
   </mx:HTTPService>

  <mx:HTTPService                
    id="getPriceSheet" 
    url="GetPriceSheet.gx"
    destination="getPriceSheet" 
    resultFormat="e4x"
    result="onGetPriceSheet(event)" 
    fault="parentApplication.onFailHttpRequest('Failed to get price sheet', event)"
    method="POST"
    useProxy="false"> 
   </mx:HTTPService>
   
    <mx:HTTPService                
    id="deletePriceSheet" 
    url="DeletePriceSheet.gx"
    destination="deletePriceSheet" 
    resultFormat="e4x"
    result="onDeletePriceSheet(event)" 
    fault="parentApplication.onFailHttpRequest('Failed to delete price sheet', event)"
    method="POST"
    useProxy="false"> 
   </mx:HTTPService>

  <mx:HTTPService                
    id="getPriceCategory" 
    url="GetPriceCategory.gx"
    destination="getPriceCategory" 
    resultFormat="e4x"
    result="onGetPriceCategory(event)" 
    fault="parentApplication.onFailHttpRequest('Failed to get price category', event)"
    method="POST"
    useProxy="false"> 
   </mx:HTTPService>

    <mx:HTTPService                
    id="deletePriceCategory" 
    url="DeletePriceCategory.gx"
    destination="deletePriceCategory" 
    resultFormat="e4x"
    result="onDeletePriceCategory(event)" 
    fault="parentApplication.onFailHttpRequest('Failed to delete price category', event)"
    method="POST"
    useProxy="false"> 
   </mx:HTTPService>
    
    <mx:HTTPService 
    id="getBillingRequestList" 
    url="GetBillingRequestList.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetBillingRequestList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get billing request list', event)"
    method="POST"
    useProxy="false">
       <mx:request>
         <idBillingPeriod>{lastSelectedBillingPeriod.@value}</idBillingPeriod>       	
         <idLab>{labCombo.selectedItem.@idLab}</idLab>       	
         <idBillingAccount>{billingAccountCombo.selectedItem != null ? billingAccountCombo.selectedItem.@idBillingAccount : ""}</idBillingAccount>
		 <idCoreFacility>{coreFacilityCombo.selectedItem != null ? coreFacilityCombo.selectedItem.@value : ""}</idCoreFacility>  
		 <excludeNewRequests>{coreFacilityCombo.selectedItem != null &amp;&amp; coreFacilityCombo.selectedItem.@value == "2" ? "Y" : "N"}</excludeNewRequests>  
       </mx:request>
    </mx:HTTPService >  
    
    <mx:HTTPService 
    id="getBillingItemList" 
    url="GetBillingItemList.gx"
    showBusyCursor="true"
    resultFormat="e4x"
    result="onGetBillingItemList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get billing item list', event)"
    method="POST"
    useProxy="false">
       <mx:request>
         <showOtherBillingItems>{spanOtherCheckbox.selected ? 'Y' : 'N'}</showOtherBillingItems>
         <requestNumber>{requestNumberText.text}</requestNumber>
		 <invoiceLookupNumber>{invoiceNumberLookupText.text}</invoiceLookupNumber>
         <idBillingPeriod>{requestNumberText.text == "" ? lastSelectedBillingPeriod.@value : ""}</idBillingPeriod>       	
         <idLab>{requestNumberText.text == "" &amp;&amp; invoiceNumberLookupText.text == "" ? labCombo.selectedItem.@idLab : ""}</idLab>       	
         <idBillingAccount>{requestNumberText.text == "" ? billingAccountCombo.selectedItem.@idBillingAccount : ""}</idBillingAccount>  
		 <excludeNewRequests>{coreFacilityCombo.selectedItem != null &amp;&amp; coreFacilityCombo.selectedItem.@value == "2" ? "Y" : "N"}</excludeNewRequests>
       </mx:request>
    </mx:HTTPService >          
	
	<mx:HTTPService 
		id="getBillingInvoiceList" 
		url="GetBillingInvoiceList.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetBillingInvoiceList(event)"
		fault="parentApplication.onFailHttpRequest('Unable to get billing invoice list', event)"
		method="POST"
		useProxy="false">
		<mx:request>
			<requestNumber>{requestNumberText.text}</requestNumber>
			<invoiceLookupNumber>{invoiceNumberLookupText.text}</invoiceLookupNumber>
			<idBillingPeriod>{requestNumberText.text == "" ? lastSelectedBillingPeriod.@value : ""}</idBillingPeriod>       	
			<idLab>{requestNumberText.text == "" &amp;&amp; invoiceNumberLookupText.text == "" ? labCombo.selectedItem.@idLab : ""}</idLab>       	
			<idCoreFacility>{coreFacilityCombo.selectedItem != null &amp;&amp; requestNumberText.text == "" &amp;&amp; invoiceNumberLookupText.text == "" ? coreFacilityCombo.selectedItem.@value : ""}</idCoreFacility>  
			<excludeNewRequests>{coreFacilityCombo.selectedItem != null &amp;&amp; coreFacilityCombo.selectedItem.@value == "2" ? "Y" : "N"}</excludeNewRequests>
		</mx:request>
	</mx:HTTPService >  
    
    <mx:HTTPService 
    id="createBillingItems" 
    url="CreateBillingItems.gx"
    showBusyCursor="true"
    resultFormat="e4x"
    result="onCreateBillingItems(event)"
    fault="parentApplication.onFailHttpRequest('Unable to create new billing items', event)"
    method="POST" 
    useProxy="false"> 
    </mx:HTTPService >
        
    <mx:HTTPService 
    id="saveBillingItemList" 
    url="SaveBillingItemList.gx"
    resultFormat="e4x"
    destination="saveBillingItemList"
    showBusyCursor="true"
    result="onSaveBillingItemList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to save billing items', event)"
    method="POST"
    useProxy="false">
    </mx:HTTPService >    
    
    <mx:HTTPService 
    id="movePriceCategory" 
    url="MovePriceCategory.gx"
    resultFormat="e4x"
    destination="movePriceCategory"
    showBusyCursor="true"
    result="onMovePriceCategory(event)"
    fault="parentApplication.onFailHttpRequest('Unable to move price category', event)"
    method="POST"
    useProxy="false">
    </mx:HTTPService >    
    
     

<mx:Script>
 	<![CDATA[
		import flash.utils.setTimeout;
		
		import hci.flex.controls.ComboBox;
		import hci.flex.controls.DropdownLabel;
		
		import mx.collections.ArrayCollection;
		import mx.collections.IHierarchicalCollectionView;
		import mx.collections.IViewCursor;
		import mx.collections.Sort;
		import mx.collections.XMLListCollection;
		import mx.controls.Alert;
		import mx.controls.DateField;
		import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
		import mx.controls.menuClasses.MenuBarItem;
		import mx.core.DragSource;
		import mx.events.CloseEvent;
		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;
		import mx.events.DragEvent;
		import mx.events.ListEvent;
		import mx.events.MenuEvent;
		import mx.events.PropertyChangeEvent;
		import mx.formatters.CurrencyFormatter;
		import mx.managers.DragManager;
		import mx.managers.PopUpManager;
		import mx.messaging.channels.StreamingAMFChannel;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		
		import views.renderers.BillingADGItemRenderer;
		import views.renderers.ComboBoxBillingStatus;
		import views.renderers.LabelPercentage;
		import views.util.BillingPeriodSelectEvent;
		import views.util.PickBillingPeriodView; 

		private const TIMEOUT_DELAY:uint = 100;
		private const NUM_DISPLAYED_BILLING_ITEMS:uint = 25;
		
        private var revisionNumber:int = 1;
		private var invoiceMap:Dictionary;
 		
		private var billingItems:XMLListCollection = new XMLListCollection();
		
		[Bindable]
		[Embed(source="../../assets/money.png")]
		public var iconBilling:Class;
		
		[Bindable]
		[Embed(source="../../assets/page.png")]
		public var iconReports:Class;
				
		[Bindable]
		[Embed(source="../../assets/feed_disk.png")]
		public var iconGLInterface:Class;
		
		[Bindable]
		[Embed(source="../../assets/printer.png")]
		public var iconPrintInvoice:Class;
		
		[Bindable]
		[Embed(source="../../assets/email_open.png")]
		public var iconEmailInvoice:Class;
		
		[Bindable]
		[Embed(source="../../assets/refresh.png")]
		public var iconRefresh:Class;
		
        [Bindable]
        private var billingAccounts:XMLListCollection = new XMLListCollection();

        [Bindable]
        private var requests:XMLListCollection = new XMLListCollection();

        [Bindable]
        private var billingTemplates:XMLListCollection = new XMLListCollection();

        [Bindable]
		private var pricingList:XMLListCollection = new XMLListCollection();

        [Bindable]
        public var billingItemsDisplayed:XMLListCollection = new XMLListCollection();

        [Bindable]
        private var billingPeriods:XMLListCollection = new XMLListCollection();
        
        private var billingItemsToRemove:XMLListCollection = new XMLListCollection();
        
        [Bindable]
        private var dirtyBillingItems:XMLListCollection = null;
        
        private var currencyFormatter:CurrencyFormatter = new CurrencyFormatter();
        
        private var lastSelectedItem:Object = null;
        
		[Bindable]
		private var lastSelectedInvoice:Object = null;
		
		[Bindable]
        private var lastSelectedBillingPeriod:Object = null;
        
        [Bindable]
        private var grandTotalPrice:String = "";
        
        private var requestTabWidth:Number = 220;
        private var priceTabWidth:Number = 440;
        
        private var pricingNodeToSelect:String = null;
        private var pricingIdToSelect:Object = null;
		private var selectedPrice:Object = null;
		
		private var minBillingYear:int = 4000;
		private var maxBillingYear:int = 0;
		
		private var activeBillingPeriods:ArrayCollection;
		
		private var refreshBillingTimer:Timer;
        
		private var coreCommentsWindow:CoreCommentsWindow = null;
		
		
        private function init():void {
			refreshBillingTimer = new Timer(1000); /* 1000ms == 1second */
			refreshBillingTimer.addEventListener(TimerEvent.TIMER, onRefreshBillingTimerTimer);
        	initializeData();
        }


      	public function initializeData():void
      	{
      		if (parentApplication.getProperty(parentApplication.PROPERTY_GENERATE_GL_INTERFACE) == "N") {
				menuBar.visible = false;
				menuBar.includeInLayout = false;

				menuBarNoGLInterface.visible = true;
				menuBarNoGLInterface.includeInLayout = true;
			} else {
				menuBar.visible = true;
				menuBar.includeInLayout = true;

				menuBarNoGLInterface.visible = false;
				menuBarNoGLInterface.includeInLayout = false;
			}
			
			billingPeriods = new XMLListCollection(parentApplication.dictionaryManager.getEntries("hci.gnomex.model.BillingPeriod"));
        	var billingPeriodSort:Sort = new Sort();
        	billingPeriodSort.compareFunction = this.sortBillingPeriods;	   
        	billingPeriods.sort = billingPeriodSort;  
        	billingPeriods.refresh();
			
			
			// Get min and max year to display on month picker.

			var nowYear:int = (new Date()).getFullYear();
			var nowMonth:int = (new Date()).getMonth();
			var months:Array = new Array(12);
			months[0] = "Jan";
			months[1] = "Feb";
			months[2] = "Mar";
			months[3] = "Apr";
			months[4] = "May";
			months[5] = "Jun";
			months[6] = "Jul";
			months[7] = "Aug";
			months[8] = "Sep";
			months[9] = "Oct";
			months[10] = "Nov";
			months[11] = "Dec";	
			
			activeBillingPeriods = new ArrayCollection();
			
			var test:Object = null;
			var de:Object;
			var currentYear:int;			
			for each( de in billingPeriods) {
				if (de.@display != "") {
					var currDisplay:String = de.@display;
					if (currDisplay.length > 3) {
						var yearOnly:String  = currDisplay.substr(currDisplay.length - 4);
						currentYear= parseInt(yearOnly);
						if(currentYear < minBillingYear) {
							minBillingYear = currentYear;
						}
						if(currentYear > maxBillingYear) {
							maxBillingYear = currentYear;
						}
						activeBillingPeriods.addItem(currDisplay);
					}
				}
			} 

			this.systemManager.addEventListener("BillingPeriodSelectEvent", billingPeriodSelected);
			
 			var params:Object = new Object();
			params.idCoreFacility = this.getSelectedCoreFacilityId();
			params.excludeNewRequests = this.getSelectedCoreFacilityId() == "2" ? "Y" : "N";
 			if(this.lastSelectedBillingPeriod == null) {
	 			var currentBillingPeriod:Object = null;
				for each( de in billingPeriods) {
					if (de.@value != "" && de.@isCurrentPeriod == "Y") {
						billingItemsDisplayed = new XMLListCollection();
						dirty.resetDirty();
						this.billingItemGrid.dataProvider = new HierarchicalData(billingItemsDisplayed);
						
						currentBillingPeriod = de;
						lastSelectedBillingPeriod = currentBillingPeriod;
			        	
			        	params.idBillingPeriod = currentBillingPeriod.@value;
			        	getBillingRequestList.send(params);
			        	getBillingItemList.send(params);
						break;
					}
				} 				
 			} else {
				billingItemsDisplayed = new XMLListCollection();
				dirty.resetDirty();
				this.billingItemGrid.dataProvider = new HierarchicalData(billingItemsDisplayed);				
	        	
	        	params.idBillingPeriod = lastSelectedBillingPeriod.@value;
	        	getBillingRequestList.send(params);
	        	getBillingItemList.send(params);
 			}

        	
        	currencyFormatter.currencySymbol = "$";
        	currencyFormatter.precision = 2;
        	currencyFormatter.useThousandsSeparator;     
			
			callLater(this.resizeMenuItems);
      	}	
		
		public function checkDirty():void {      
		}
		 
		private function addBillingItem():void {
			dirty.setDirty();
			var emptyNode:XML = null;
			emptyNode = new XML("<BillingItem " +
				    " idBillingItem='" + "BillingItem" + billingItems.length + "'" +
				    " category='' description='' " +
				    " codeBillingChargeKind=''" +				
					" idBillingPeriod=''" +				
					" idBillingAccount=''" +
					" completeDateOther=''" +
					" qty=''" +
					" unitPrice=''" + 
					" invoicePrice=''" +
					" isDirty='Y'" +
					" codeBillingStatus = 'PENDING'" +
					" splitType='%'" +
					"/>");
			var requestNode:Object = null;
			if ( billingItemGrid.selectedItem == null) {
				requestNode = billingItemsDisplayed.getItemAt(0);
			} else if (billingItemGrid.selectedItem.name() == "BillingItem") {
	       		requestNode = billingItemGrid.selectedItem.parent();
	       	} else {
	       		requestNode = billingItemGrid.selectedItem;
	       	}
	       	requestNode.appendChild(emptyNode);
	       	requestNode.@isDirty = "Y";
	       							
		} 
		
		private function removeBillingItem():void {
			dirty.setDirty();
			if (billingItemGrid.selectedItems.length > 0) {
				var item:XML = null;
				for each(item in billingItemGrid.selectedItems) {		
					item.@remove = "Y";
					
					if (item.name() == "Request") {
						for each(var bi:XML in item.BillingItem) { 
							billingItemsToRemove.addItem(bi); 
						}
						billingItems.removeItemAt(billingItems.getItemIndex(item));
						
					} else if (item.name() == "BillingItem") {
						billingItemsToRemove.addItem(item);
						var requestNode:XML = item.parent();
						for (var i:int = 0; i < requestNode.children().length(); i++) {
							if(requestNode.children()[i].@remove == "Y") {
								delete requestNode.children()[i];
							}
						}
					}
				}
			}
			this.onRequestNodeSelected();
		}
		
      	  
		
		
		public function getTreeLabel(item:Object, column:AdvancedDataGridColumn):String {
			if (item.name() == "Request" && item.parent().name() == "Status" && item.parent().@status == "PENDING") {
				return item.@label + " " + item.@labName;
			} else {
				return item.@label;
			}
		} 
		
		public function refreshAndSelectPricing(nodeName:String, id:Object):void {
			this.pricingNodeToSelect = nodeName;
			this.pricingIdToSelect = id;
			var params:Object = new Object();
			params.action = "refresh";
			getPricingList.send();
			//refresh();
		}

		public function refreshRequestTab():void {
			this.billingTabNavigator.selectedChild = this.requestTab;
			refresh();
		}
		
		public function refresh():void {
			if (dirty.isDirty()) {
				Alert.show( "Unsaved changes will be discarded.  Proceed anyway?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToRefresh,						
						parentApplication.iconWarning);
			} else {
				refreshImpl();
			}
		}
				
		private function onPromptToRefresh(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	refreshImpl();
            }
        }
		public function refreshImpl():void {

			if (this.billingTabNavigator.selectedChild == this.priceTab) {
				var params:Object = new Object();
				params.action = "refresh";
				getPricingList.send();
				
			} else {
				refreshBillingItemsImpl();
			}
			
			
		}
		
		private function refreshBillingItemsImpl():void {
			billingItemsDisplayed = new XMLListCollection();
			this.billingItemGrid.dataProvider = new HierarchicalData(billingItemsDisplayed);
			
			if (invoiceNumberLookupText.text != "") {
				this.refreshBillingItemsByInvoiceNumber();
			} else if (requestNumberText.text != "") {
				this.refreshBillingItemsByRequestNumber();
			} else {
				this.refreshBillingItems();
			}
		}
		
		private function refreshBillingItems():void {
			if (lastSelectedBillingPeriod == null || lastSelectedBillingPeriod.@value == "") {
				Alert.show("Please select a billing period or enter an experiment #");
			} else {
				this.dirty.resetDirty();
				this.getBillingRequestList.send();
				refreshCommentsWindow();
			}
		}
		private function refreshCommentsWindow():void{
			if (coreCommentsWindow == null ) {
				return;
			}
			coreCommentsWindow.parentView = this;
			coreCommentsWindow.idBillingPeriod = lastSelectedBillingPeriod.@idBillingPeriod;
			coreCommentsWindow.update();
		}
		
		private function refreshBillingItemsByRequestNumber():void {
			lastSelectedBillingPeriod = null;
			labCombo.selectedItem = null;
			billingAccountCombo.selectedItem = null;
			
			this.dirty.resetDirty();

			var params:Object = new Object();
			params.requestNumber = requestNumberText.text;
			getBillingRequestList.send(params);
		}
		
		private function refreshBillingItemsByInvoiceNumber():void {
			lastSelectedBillingPeriod = null;
			labCombo.selectedItem = null;
			billingAccountCombo.selectedItem = null;
			
			this.dirty.resetDirty();
			
			var params:Object = new Object();
			params.invoiceLookupNumber = invoiceNumberLookupText.text;
			getBillingRequestList.send(params);
		}
		
		private function underlyingBillingItemChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || 
			    event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets 
				return;
			}			
			dirty.setDirty();  
				
			for each(var e:Object in event.items) {
				if (e is PropertyChangeEvent) {
					var pe:PropertyChangeEvent = PropertyChangeEvent(e);
					var experiment:Object = pe.source;
					billingItems.removeEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingBillingItemChange);
					experiment.@isDirty = "Y";  
					billingItems.addEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingBillingItemChange);
				}
			}				
		}  
		private function onGetPricingList(event:ResultEvent):void {
			if (getPricingList.lastResult.name() == "Pricing") {
				this.pricingList = new XMLListCollection(getPricingList.lastResult.PriceSheet);
				this.pricingTree.dataProvider = new HierarchicalData(pricingList);
				this.pricingTree.dataProvider.refresh();
				expandAppropriateNodes();
				refreshBillingTimer.start();
			} else {
				Alert.show("An error occurred while getting price sheet.");
			}			
		}
		
		private function expandAppropriateNodes():void {
			var itemToSelect:XML = getItemToSelect();
			
			if (itemToSelect != null && (itemToSelect.name() == "PriceCategory" || itemToSelect.name() == "Price")) {
				// If there is a tree item selected, expand so it and its ancestors.
				recurseExpandParent(itemToSelect);
				pricingTree.validateNow();
				callLater(selectPricingTreeItem);
			} else {
				// If no item to select or we have selected organism or genome build, 
				// expand out to first folder level for all organisms, genome build.
				pricingTree.expandItem(getPricingList.lastResult, true);
				for each(var priceCategory:Object in getPricingList.lastResult..PriceSheet) {
					pricingTree.expandItem(priceCategory, true);  	
				}
				callLater(selectPricingTreeItem);
			}
			
		}
		
		private function recurseExpandParent(item:XML):void {
			if (item.name() != 'Price') {
				pricingTree.expandItem(item, true);				
			}
			if (item.parent() != null) {
				recurseExpandParent(item.parent());									
			}
			
		}
		
		private function getItemToSelect():XML {
			if (this.selectedPrice == null) {
				return null;
			} 
			if (this.selectedPrice is XMLList && selectedPrice.length() == 0) {
				return null;	
			}
			if (this.selectedPrice is XMLList && this.selectedPrice > 0) {
				selectedPrice = selectedPrice[0];
			}
			
			var item:XMLList = null;
			if (selectedPrice.name() == "PriceCategory") {
				item = getPricingList.lastResult..PriceCategory.(@idPriceCategory == selectedPrice.@idPriceCategory);
			} else if (selectedPrice.name() == "Price") {
				item = getPricingList.lastResult..Price.(@idPrice == selectedPrice.@idPrice);
			}
			if (item != null && item.length() > 0) {
				return XML(item[0]);				
			} else {
				return null;
			}
			
		}

		private function onRefreshBillingTimerTimer(evt:TimerEvent):void {
			refreshBillingTimer.stop();
			selectPricingTreeItem();
		}			
		
		private function selectPricingTreeItem():void {
			if (this.pricingNodeToSelect != null && this.pricingIdToSelect != null) {
				var i:int = 0;
				var cursor:mx.collections.IViewCursor =
					IHierarchicalCollectionView(pricingTree.dataProvider).createCursor();
				while (!cursor.afterLast) {
					cursor.moveNext();
					if(cursor.current != null) {
						if (cursor.current.name().localName == this.pricingNodeToSelect) {
							if ((this.pricingNodeToSelect == 'Price' && cursor.current.@idPrice == pricingIdToSelect)
								|| (this.pricingNodeToSelect == 'PriceCategory' && cursor.current.@idPriceCategory  == pricingIdToSelect)
								|| (this.pricingNodeToSelect == 'PriceSheet' && cursor.current.@idPriceSheet  == pricingIdToSelect)) {
								this.pricingTree.selectedItem = cursor.current;
								this.pricingTree.scrollToIndex(i); 
								break;
							}					
						}						
					}
					i++;
				}
			}		
		}
		private function onGetBillingRequestList(event:ResultEvent):void {
			if (getBillingRequestList.lastResult.name() == "BillingRequestList") {
				this.requests = new XMLListCollection(getBillingRequestList.lastResult.Status);
				this.requestTree.dataProvider = new HierarchicalData(requests);
				this.requestTree.dataProvider.refresh();
				
				var pendingItems:XMLList = getBillingRequestList.lastResult.Status.(@label == 'Pending');
				jumpPending.visible =  pendingItems.length() ? true : false;
				
				var completedItems:XMLList = getBillingRequestList.lastResult.Status.(@label == 'Completed');
				jumpCompleted.visible =  completedItems.length() ? true : false;
				
				var approvedItems:XMLList = getBillingRequestList.lastResult.Status.(@label == 'Approved');
				jumpApproved.visible =  approvedItems.length() ? true : false;
				
				for each(var status:Object in getBillingRequestList.lastResult.Status) {
					requestTree.expandItem(status, true);
				}
				
				getBillingItemList.send();
			}  else {
				var message:String = getBillingRequestList.lastResult.ERROR.@message;
				Alert.show(message);
			}				
		}

		private function onGetBillingItemList(event:ResultEvent):void {
			if (getBillingItemList.lastResult.name() == "BillingItemList") {
				this.billingItems = new XMLListCollection(getBillingItemList.lastResult.Request);
				this.billingItems.addEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingBillingItemChange);	
				this.pickBillingPeriodButton.label = lastSelectedBillingPeriod.@display;

				getBillingInvoiceList.send();
				
			} else {
				var message:String = getBillingItemList.lastResult.ERROR.@message;
				Alert.show(message);
			}			
		} 
		
		private function onGetBillingInvoiceList(event:ResultEvent):void {
			if (getBillingInvoiceList.lastResult.name() == "BillingInvoiceList") {
				invoiceMap = new Dictionary();
				for each (var inv:Object in getBillingInvoiceList.lastResult.Invoice) {
					invoiceMap[inv.@idInvoice.toString()] = inv;
				}
				
				reselectRequestTree();
				this.onRequestNodeSelected();
				
			} else {
				var message:String = getBillingInvoiceList.lastResult.ERROR.@message;
				Alert.show(message);
			}			
		} 
		
		private function jumpTo(status:String):void {
			for each(var item:XML in requests) {
				if (item.@label == status) {
					this.requestTree.selectedItem = item;
					this.requestTree.firstVisibleItem = item;
					this.onRequestNodeSelected();
					break;
				}
			}
		}
		private function jumpToApproved():void {
			// First try to jump to 'Approved (PO)'
			var found:Boolean = false;
			for each(var item:XML in requests) {
				if (item.@label == 'Approved (PO)') {
					this.requestTree.selectedItem = item;
					this.requestTree.firstVisibleItem = item;
					this.onRequestNodeSelected();
					found = true;
					break;
				}
			}
			if (!found) {
			for each(var item1:XML in requests) {
				if (item1.@label == 'Approved') {
					this.requestTree.selectedItem = item1;
					this.requestTree.firstVisibleItem = item1;
					this.onRequestNodeSelected();
					found = true;
					break;
				}
			}
				
			}
		}
		private function jumpToPriceSheet(priceSheetName:String):void {
			for each(var item:XML in pricingList) {
				if (item.@name == priceSheetName) {
					this.pricingTree.selectedItem = item;
					this.pricingTree.firstVisibleItem = item;
					break;
				}
			}
		}
		
		private function reselectRequestTree():void {
			if (lastSelectedItem != null) {
				if (lastSelectedItem.name() == "Request") {
					for each(var p:XML in requests) {
						for each(var request:XML in p..Request) {
							if (request.@requestNumber == lastSelectedItem.@requestNumber && request.@labBillingName == lastSelectedItem.@labBillingName) {
								this.requestTree.selectedItem = request;
								this.requestTree.firstVisibleItem = request;
								break; 
							}
						}
					}
				} else if (lastSelectedItem.name() == "Status") {
					for each(var status:XML in requests) {
						if (status.@label == lastSelectedItem.@label) {
							this.requestTree.selectedItem = status;
							this.requestTree.firstVisibleItem = status;
							break;
						}
					}
				} else if (lastSelectedItem.name() == "Lab") {
					for each(var st:XML in requests) {
						for each(var lab:XML in st.Lab) {
							if (lab.@label == lastSelectedItem.@label) {
								this.requestTree.selectedItem = lab;
								this.requestTree.firstVisibleItem = lab;								
								break;
							}								
						}
					}
				}	
			}			
		}
		
		private function setLastSelectedItemToNextNeighbor():void {
			var selectedItemFound:Boolean = false;
			var selectedItemSet:Boolean = false;
			if (lastSelectedItem != null) {
				if (lastSelectedItem.name() == "Request") {
					for each(var p:XML in requests) {
						for each(var request:XML in p..Request) {
							if(selectedItemFound && !selectedItemSet) {
								lastSelectedItem = request;
								selectedItemSet = true;
								break;								
							}
							if (request.@requestNumber == lastSelectedItem.@requestNumber) {
								selectedItemFound = true;
							}
						}
						if(selectedItemSet) {
							break;
						}
					}
				} else if (lastSelectedItem.name() == "Status") {
					for each(var status:XML in requests) {
						if(selectedItemFound && !selectedItemSet) {
							lastSelectedItem = status;
							break;								
						}
						if (status.@label == lastSelectedItem.@label) {
							selectedItemFound = true;
						}
					}
				} else if (lastSelectedItem.name() == "Lab") {
					for each(var st:XML in requests) {
						for each(var lab:XML in st.Lab) {
							if(selectedItemFound && !selectedItemSet) {
								lastSelectedItem = lab;
								break;								
							}
							if (lab.@label == lastSelectedItem.@label) {
								selectedItemFound = true;
							}								
						}
						if(selectedItemSet) {
							break;
						}
					}
				}	
			}			
		}
		
		private function onCreateBillingItems(event:ResultEvent):void {
			if (createBillingItems.lastResult.name() == "NewBilling") {
				this.billingItems.addItem(createBillingItems.lastResult..Request);
				this.reselectRequestTree();
				onRequestNodeSelected();
			} else {
				Alert.show("An error occurred while creating new billing items.");
			}			
		}		
		private function onGetLab(event:ResultEvent):void {			
			var lab:Object = getLab.lastResult..Lab.(@idLab == labCombo.selectedItem.@idLab);
			billingAccounts = new XMLListCollection(lab.billingAccounts.BillingAccount);
			var blankNode:XML = new XML("<BillingAccount idCoreFacility='' idBillingAccount='' accountName=''/>");
			billingAccounts.addItemAt(blankNode, 0);
			billingAccounts.filterFunction = filterCore;
			billingAccounts.refresh();
			
			billingAccountCombo.dataProvider=billingAccounts;
			billingAccountCombo.dropdown.dataProvider = billingAccounts;
			billingAccountCombo.selectedIndex = 0;
		}
		
		private function filterCore(item:Object):Boolean {
			if ( item.@idCoreFacility == "" ) {
				return true;
			}
			return parentApplication.isCoreFacilityIManage(item.@idCoreFacility);
		}

 		private function onRequestNodeSelected():void {
			this.billingItemGrid.dataProvider = new HierarchicalData();
			this.billingItemGrid.invalidateDisplayList();
			
			lastSelectedInvoice = null;
 			if (this.requestTree.selectedItem == null) {
 				return;
 			}

 			lastSelectedItem = this.requestTree.selectedItem;
			if (lastSelectedItem.hasOwnProperty("@idInvoice")) {
				lastSelectedInvoice = invoiceMap[lastSelectedItem.@idInvoice.toString()];
			} else {
				lastSelectedInvoice = null;
			}
			
			callLater( gatherDisplayInfo, [this.requestTree.selectedItem] );			
 		}
 		
 		private function gatherDisplayInfo(selectedItem:Object):void {
			
			billingItemsDisplayed = new XMLListCollection();
			
			var request:XML = null;
			var lab:XML = null;

			if (selectedItem.name() == "Status" && 
				selectedItem.@status == 'PENDING') {
				for each(request in selectedItem..Request) {					
					billingItemsDisplayed.addAll(new XMLListCollection(billingItems.source.(@requestNumber == request.@requestNumber && @idBillingAccount == request.@idBillingAccount)));
				}
			} else if (selectedItem.name() == "Status") {
				for each(lab in selectedItem..Lab) {
					for each(request in lab.Request) {
						billingItemsDisplayed.addAll(new XMLListCollection(billingItems.source.(@requestNumber == request.@requestNumber && @idBillingAccount == lab.@idBillingAccount)));
						
					}
				}
			}  else if (selectedItem.name() == "Lab") {
				lab = XML(selectedItem); 
				for each(request in lab.Request) {		
					billingItemsDisplayed.addAll( new XMLListCollection (billingItems.source.(@requestNumber == request.@requestNumber && @idBillingAccount == lab.@idBillingAccount)));		
				}
			} else if (selectedItem.name() == "Request") {
				billingItemsDisplayed.addAll(new XMLListCollection(billingItems.source.(@requestNumber == selectedItem.@requestNumber && @idBillingAccount == selectedItem.@idBillingAccount)));
			}  
			
			var invoicePrice:Number = new Number(0);
			
			for each ( var bi:Object in billingItemsDisplayed.source..BillingItem ) {
				invoicePrice = sumInvoicePrice(invoicePrice, bi);
			}
			
			if (invoicePrice > 0) {
				grandTotalPrice = currencyFormatter.format(invoicePrice.toFixed(2).toString());			
			} else {
				grandTotalPrice = "";
			}
			
			this.billingItemGrid.dataProvider = new HierarchicalData(this.billingItemsDisplayed);
 		}
				
 		
 		private function sumInvoicePrice(invoicePrice:Number, billingItem:Object):Number {
 			var price:String = billingItem.@invoicePrice;
 			price = price.replace('$', '');
 			price = price.replace(',', '');
			price = price.replace("(", "-");
			price = price.replace(")", "");
			invoicePrice += (price != '' ? new Number(price) : 0);
 			return invoicePrice;
 		}
		
        private function onDragDropBillingItemGrid(event:DragEvent) : void
		{
			// For some reason, preventDefault on AdvancedDataGrid
			// isn't enough to stop the defaut drop operation from
			// occurring. So I added hidDropFeedback and showFeedback
			// and that seemed to do the trick.	
			this.billingItemGrid.hideDropFeedback(event);
			event.preventDefault();
			DragManager.showFeedback(DragManager.NONE);

		   
			var ds:DragSource = event.dragSource;
           
           	// retrieve the data associated with the "items" format. This will be the data that
	       	// the dragInitiator has copied into the DragSource.
	       	var items:Array = ds.dataForFormat("treeDataGridItems") as Array;
           
           	var isRequest:Boolean = false;
           	var isPrice:Boolean = false;
           
           	for(var i:int = 0; i < items.length; i++) {
           		var dragItem:Object = items[i];
	       		if (dragItem.name() == "Request") {
	       			isRequest = true;
	       			break;
	       		} else if (dragItem.name() == "Price") {
	       			isPrice = true;
	       			break;
	       		}
           	}
            
		   	// The user didn't drag new request, so just treat
		   	// as click.
		   	if (isRequest) {
		       if (requestTree.selectedItem.name() != "Request" || 
		       requestTree.selectedItem.@codeBillingStatus != "NEW") {
		       		onRequestNodeSelected();
			       	return;
		       }
		   	}
		   	if (isPrice) {
		       if (pricingTree.selectedItem.name() != "Price" ) {
		       		Alert.show("Please drag price onto billing items grid.");
			       	event.preventDefault();
			       	event.target.hideDropFeedback(event);
			       	DragManager.showFeedback(DragManager.NONE);
			       	return;
		       }
		   	}		   
	       
	       	// determine where in the grid the drop occurs and select that node by the index; 
	       	// followed by retrieving the node itself. 
	        var dropNode:XML = null;
	        var dropRequestNode:XML = null;
	        var idBillingAccount:Object = null;
	        var idLab:Object = null;
	       	if (isPrice) {
		       	var r:int = billingItemGrid.calculateDropIndex(event);
		       	if (r > 0) { 
	    	   		r--;
	       		}
	       		billingItemGrid.selectedIndex = r;
	       		dropNode = billingItemGrid.selectedItem as XML;
	       		
	       		// Don't allow drag operation if nothing in billing grid
	       		if (dropNode == null) {
	       			event.preventDefault();
			       	event.target.hideDropFeedback(event);
			       	DragManager.showFeedback(DragManager.NONE);
			       	return;
	       		}
	       		
	       		
	       		if (dropNode.name() == "BillingItem") {
	       			dropRequestNode = dropNode.parent();
	       		} else {
	       			dropRequestNode = dropNode;
	       		} 	      
	       	}
	
 		   	// Initialize billing items if we have anything other than pending items
 		   	if (isRequest){ 
	 		   	if (billingItems == null) {
		 		   	billingItems = new XMLListCollection(); 		
 				   	this.billingItemGrid.dataProvider = new HierarchicalData(billingItems);
				}  
 		   	} 
 		   		
	       	// insert a Request node under the Pending status
          	for(var x:int = 0; x < items.length; x++) {
          		var dragNode:Object = items[x]; 
	       		if (dragNode.name() == "Request") {  
	       			this.lastSelectedItem = this.requestTree.selectedItem;
	       			dragNode.@codeBillingStatus = "PENDING";
	       			var params:Object = new Object(); 
	       			params.idRequest = dragNode.@idRequest;
					params.idBillingPeriod = lastSelectedBillingPeriod != null ? lastSelectedBillingPeriod.@value : "";
	       			this.createBillingItems.send(params);
	    	   	} else if (dragNode.name() == "Price") {
					var price:String = dragNode.@unitPrice;
					if (dropRequestNode.@isExternalPricing == 'Y') {
						price = dragNode.@unitPriceExternalAcademic;
					}
					if (dropRequestNode.@isExternalPricingCommercial == 'Y') {
						price = dragNode.@unitPriceExternalCommercial;
					}
       				var newBillingItem:XML = new XML(
       				 "<BillingItem " + 
       				 " codeBillingChargeKind='" + dragNode.@codeBillingChargeKind + "'" +
       			 	 " category='" + dragNode.@category + "'" +
       			 	 " description='" + dragNode.@name + "'" +
       			 	 " unitPrice='" + price + "'" +	
       			 	 " codeBillingStatus='PENDING'" +	
					 " idBillingPeriod='" + (lastSelectedBillingPeriod != null ? lastSelectedBillingPeriod.@value : "") + "'" + 
       			 	 " idPriceCategory='" +	dragNode.parent().@idPriceCategory + "'" +
       			 	 " idPrice='" + dragNode.@idPrice + "'" +
       			 	 " idRequest='" + dropRequestNode.@idRequest + "'" +
       			 	 " idBillingAccount='" + dropRequestNode.@idBillingAccount + "'" +
       			 	 " idLab='" + dropRequestNode.@idLab + "'" +
       			 	 " percentagePrice='1'" +
       			 	 " percentageDisplay='100%'" +
					 " splitType='%'" +
       			 	 " notes=''" +
       			 	 " qty=''" + 
					 " idCoreFacility='" + dropRequestNode.@idCoreFacility + "'" +
       			 	 " isDirty='Y'" +
       			 	 "/>");
		       	
		       		dropRequestNode.@isDirty = "Y";
		       		dropRequestNode.appendChild(newBillingItem);
	       		}
	       	}

			onRequestNodeSelected();
	       
		}
		
		private function onDragDropPricing(event:DragEvent) : void
		{
			// For some reason, preventDefault on AdvancedDataGrid
			// isn't enough to stop the defaut drop operation from
			// occurring. So I added hidDropFeedback and showFeedback
			// and that seemed to do the trick.	
			this.pricingTree.hideDropFeedback(event);
			event.preventDefault();
			DragManager.showFeedback(DragManager.NONE);

		   
			var ds:DragSource = event.dragSource;
           
           	// retrieve the data associated with the "items" format. This will be the data that
	       	// the dragInitiator has copied into the DragSource.
	       	var items:Array = ds.dataForFormat("treeDataGridItems") as Array;
           
           	var isPriceCategory:Boolean = false;
           	
           	for(var i:int = 0; i < items.length; i++) {
           		var dragItem:Object = items[i];
	       		if (dragItem.name() == "PriceCategory") {
	       			isPriceCategory = true;
	       			break;
	       		} else if (dragItem.name() == "Price") {
	       			Alert.show("Drag-and-drop not allowed for Prices.");
	       			return;
	       		} else if (dragItem.name() == "PriceSheet") {
	       			Alert.show("Drag-and-drop not allowed for Price Sheets");
	       			return;
	       		}
           	}
            
		   	// Only allow price categories to be dragged.
		   	if (!isPriceCategory) {
		    	return;
		   	}
		   	
	       	// determine where in the grid the drop occurs and select that node by the index; 
	       	// followed by retrieving the node itself. 
	        var dropNode:XML = null;
	        var dropPriceCategoryNode:XML = null;
	        var dropPriceSheetNode:XML = null;
	        var dropPosition:String = "after";
	       	if (isPriceCategory) {
		       	var r:int = pricingTree.calculateDropIndex(event);
		       	if (r > 0) { 
	    	   		r--;
	       		}
	       		pricingTree.selectedIndex = r;
	       		dropNode = pricingTree.selectedItem as XML;
	       		
	       		// Don't allow drag operation if nothing no drop node
	       		// found
	       		if (dropNode == null) {
	       			event.preventDefault();
			       	event.target.hideDropFeedback(event);
			       	DragManager.showFeedback(DragManager.NONE);
			       	return;
	       		}
	       		
	       		if (dropNode.name() == "PriceSheet") {
	       			dropPriceSheetNode = dropNode;
	       			if (dropPriceSheetNode.childIndex() >= 0) {
	       				dropPriceCategoryNode = dropPriceSheetNode.children()[0];
	       				dropPosition = "before";
	       			} 
	       		} else if (dropNode.name() == "PriceCategory") {
	       			dropPriceSheetNode = dropNode.parent();
	       			dropPriceCategoryNode = dropNode;
	       		} else if (dropNode.name() == "Price") {
	       			dropPriceSheetNode = dropNode.parent().parent();
	       			dropPriceCategoryNode = dropNode.parent();
	       		} 	      
	       	}
	       	
	       	if (dropPriceCategoryNode != null) {
	       		if (dropPriceCategoryNode.@idPriceCategory == dragItem.@idPriceCategory) {
	       			return;
	       		} 
	       	}
	
			// Move the price category
			var params:Object = new Object();
			params.idPriceCategorySource = dragItem.@idPriceCategory;
			params.idPriceSheetTarget = dropPriceSheetNode.@idPriceSheet;
			params.idPriceCategoryPosition = dropPriceCategoryNode != null ? dropPriceCategoryNode.@idPriceCategory : "";
			params.dropPosition = dropPosition;
			
			this.movePriceCategory.send(params);
		}

        private function sortBillingPeriods(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var order1:Object = obj1.@startDateSort;
				var order2:Object = obj2.@startDateSort;
				
				if (obj1.@value == '') {
					return -1;
				} else if (obj2.@value == '') {
					return 1;
				} else {
					if (order1 < order2) {
						return -1;
					} else if (order1 > order2) {
						return 1;
					} else {
						return 0;
					}
				}
			}			
		}			 
		
		
		private function validateAndSave():void {
			var isExternalApproved:Boolean = false;
			var isEmptyPriceOrQty:Boolean = false;
			var isNegativeQtyAndPrice:Boolean = false;
			for each(var request:XML in billingItems) {
 				if (request.@isDirty == "Y") { 
 					if (request.@isExternalPricing == "Y" || request.@isExternalCommercialPricing == "Y") {
	 					for each(var bi:XML in request.BillingItem) {
	 						if (bi.@codeBillingStatus == 'APPROVED') {
	 							isExternalApproved = true;
	 							break;
	 						}
 						}					
 					}
 					for each(var bi1:XML in request.BillingItem) {
 						if (bi1.@qty == '' || bi1.@unitPrice == '' || bi1.@unitPrice == 0 || bi1.@invoicePrice == '' || bi1.@invoicePrice == 0) {
 							isEmptyPriceOrQty = true;
 						} else if (bi1.@qty < 0 && bi1.@unitPrice < 0) {
							Alert.show("Either unit price or qty can be negative but not both", "Error");
							return;
						}
						if (bi1.@idBillingPeriod == '') {
							Alert.show("Each price must have an associated billing period.",
								"Error");
							return;
						}
 					}					
 				} 
 			}
 			var msg:String = '';
 			if (isExternalApproved) {
 				msg += "External account to be approved.  Has pricing been verified?\n";
 			}
 			if (isEmptyPriceOrQty) {
 				msg += "Price or qty is blank.  Proceed anyway?\n"
 			}
 			
 			if (msg != '') {
 				Alert.show(msg,
 				  "Warning",
 				  Alert.YES | Alert.NO,
 				  this,
 				  onPromptValidateSave);
 			} else {
 				save();
 			}
		}
		
		private function onPromptValidateSave(event:CloseEvent):void {
			if (event.detail == Alert.YES) {
				save();
			} 
		}
		
 		private function save():void {  
 			var params:Object = new Object();
 			params.billingItemXMLString = "<SaveList>";
 			
 			for each(var request:XML in billingItems) {
 				if (request.@isDirty == "Y") { 
					
					for each(var bi1:Object in request.BillingItem) {
						if(bi1.@isDirty == "Y"){
							bi1.@completeDate = bi1.@completeDateOther;
						}
					}
 					
					for each(var bi:XML in request.BillingItem) {
						if(bi.@isDirty == "Y") {				
							params.billingItemXMLString += bi.toXMLString();								
						}
 					}
 				} 
 			}
 			params.billingItemXMLString += "</SaveList>";
 			 
 			params.billingItemXMLString += "<RemoveList>";
 			for each(var billingItemToRemove:XML in this.billingItemsToRemove) {
 				params.billingItemXMLString += billingItemToRemove.toXMLString();
 			} 
 			params.billingItemXMLString += "</RemoveList>";

 			params.billingItemXMLString += "<InvoiceList>";
			for each(var invoice:XML in this.invoiceMap) {
				if (invoice.hasOwnProperty("@isDirty") && invoice.@isDirty == "Y") {
					params.billingItemXMLString += invoice.toXMLString();
				}
			}
			params.billingItemXMLString += "</InvoiceList>";
 			saveBillingItemList.send(params);
  
 		}
        private function onSaveBillingItemList(event:ResultEvent):void {
        	if (saveBillingItemList.lastResult.name() == "SUCCESS") {
        		dirty.resetDirty();
        		
        		billingItemsToRemove = new XMLListCollection();

        		lastSelectedItem = this.requestTree.selectedItem;
        		if(lastSelectedItem != null && lastSelectedItem.name() == "Request") {
        			var parentItem:Object = this.requestTree.getParentItem(lastSelectedItem);
        			parentItem = this.requestTree.getParentItem(parentItem);
        			if(parentItem != null && parentItem.name() == "Status" && parentItem.@label == "Completed") {
        				setLastSelectedItemToNextNeighbor();
        			}
        		}
				refreshBillingItemsImpl();
        	} else {
        		Alert.show(saveBillingItemList.lastResult..ACTMESSAGE.@TEXT);
        	}        	
        }
        
		public function showBillingInvoice(email:Boolean):void {
			
			if (lastSelectedBillingPeriod == null ||
				lastSelectedBillingPeriod.@value == "") {
				Alert.show("Please select a billing period.");
				return;    	
			}
			if (dirty.isDirty()) {
				Alert.show("Please save or discard unsaved changes");
				return;
			}

			if (this.requestTree.selectedItem != null) {
				var labNode:Object = null;
				if (this.requestTree.selectedItem.name() == "Request") {
					if (this.requestTree.selectedItem.parent().name() == "Lab") {
						labNode = this.requestTree.selectedItem.parent();
					} else {
						Alert.show("Please complete the billing items first.");
						return;
					}					
				} else if (this.requestTree.selectedItem.name() == "Lab") {
					labNode = this.requestTree.selectedItem; 
				}
				if (labNode != null) {
					if (email) {
						showBillingInvoiceEmailWindow(labNode);
					} else {
						var showUrl:URLRequest = new URLRequest('ShowBillingInvoiceForm.gx' +
							'?idBillingPeriod=' + lastSelectedBillingPeriod.@idBillingPeriod + 
							'&idLab=' + labNode.@idLab +
							'&idBillingAccount=' + labNode.@idBillingAccount +
							'&idCoreFacility=' + this.getSelectedCoreFacilityId());
						navigateToURL(showUrl, '_blank');
					}
				} else if (!email && this.requestTree.selectedItem.name() == "Status" && (this.requestTree.selectedItem.@status == "APPROVED" || this.requestTree.selectedItem.@status == "APPROVEDEX" || this.requestTree.selectedItem.@status == "APPROVEDCC" || this.requestTree.selectedItem.@status == "COMPLETE")){
					Alert.show("Print all invoices for this folder?", "", (Alert.YES | Alert.NO), null, onPromptToPrintAll); 
				} else{
					Alert.show("Please select a lab folder");	
				}
			} else {
				Alert.show("Please select a lab folder");
			}
		}
		
		private function onPromptToPrintAll(event:CloseEvent):void{
			if(event.detail == Alert.YES){
				var idLabs:String = "";
				var idBillingAccounts:String = "";
				for each(var lab:XML in this.requestTree.selectedItem.children()){
					idLabs += lab.@idLab + ',';
					idBillingAccounts += lab.@idBillingAccount + ',';
					
				}
				var showAllRequests:URLRequest = new URLRequest('ShowBillingInvoiceForm.gx' + 
					'?idLabs=' + idLabs + 
					'&idBillingPeriod=' + lastSelectedBillingPeriod.@idBillingPeriod + 
					'&idBillingAccounts=' + idBillingAccounts + 
					'&idCoreFacility=' + this.getSelectedCoreFacilityId());
				navigateToURL(showAllRequests, '_blank');
			}
		}
		public function showBillingMonthendReport():void {
			
			if (lastSelectedBillingPeriod == null ||
				lastSelectedBillingPeriod.@value == "") {
				Alert.show("Please select a billing period.");
				return;    	   
			}
			if (this.requestTree.selectedItem != null) { 
				var statusNode:Object = null;
				if (this.requestTree.selectedItem.name() == "Lab") {
					statusNode = this.requestTree.selectedItem.parent(); 
				} else if (this.requestTree.selectedItem.name() == "Status") {
					statusNode = this.requestTree.selectedItem;
				}
				if (statusNode != null && 
				    (statusNode.@status == "APPROVED" || statusNode.@status == "APPROVEDEX" || statusNode.@status == "APPROVEDCC") ) {
					var url:URLRequest = new URLRequest('ShowBillingMonthendReport.gx' +
					    '?codeBillingStatus=' + statusNode.@status +
						'&idCoreFacility=' + this.getSelectedCoreFacilityId() +
						'&idBillingPeriod=' + lastSelectedBillingPeriod.@idBillingPeriod);
					navigateToURL(url, '_blank');			
					
				} else {
					Alert.show("Please select the 'Approved' or 'Approved (PO)' folder.")
				}
				
			} else {
				Alert.show("Please select the 'Approved' or 'Approved (PO)' folder.")
			}
		}
		public function showBillingMonthendReportUMergeFormat():void {
			
			if (lastSelectedBillingPeriod == null ||
				lastSelectedBillingPeriod.@value == "") {
				Alert.show("Please select a billing period.");
				return;    	   
			}
			if (this.requestTree.selectedItem != null) { 
				var statusNode:Object = null;
				if (this.requestTree.selectedItem.name() == "Lab") {
					statusNode = this.requestTree.selectedItem.parent(); 
				} else if (this.requestTree.selectedItem.name() == "Status") {
					statusNode = this.requestTree.selectedItem;
				}
				if (statusNode != null && 
					(statusNode.@status == "APPROVED" || statusNode.@status == "APPROVEDEX" || statusNode.@status == "APPROVEDCC") ) {
					var url:URLRequest = new URLRequest('ShowBillingMonthendReportUMergeFormat.gx' +
						'?codeBillingStatus=' + statusNode.@status +
						'&idCoreFacility=' + this.getSelectedCoreFacilityId() +
						'&idBillingPeriod=' + lastSelectedBillingPeriod.@idBillingPeriod);
					navigateToURL(url, '_blank');			
					
				} else {
					Alert.show("Please select the 'Approved' or 'Approved (PO)' folder.")
				}
				
			} else {
				Alert.show("Please select the 'Approved' or 'Approved (PO)' folder.")
			}
		}
		
		public function showBillingSummaryWindow():void {
			var summaryWindow:BillingTotalByLabView = BillingTotalByLabView(mx.managers.PopUpManager.createPopUp(this, BillingTotalByLabView, true));
            mx.managers.PopUpManager.centerPopUp(summaryWindow);
            summaryWindow.setFocus();
            summaryWindow.billingPeriods = this.billingPeriods; 				
		}
		public function showBillingUsageWindow():void {
			var usageWindow:BillingUsageView = BillingUsageView(mx.managers.PopUpManager.createPopUp(this, BillingUsageView, true));
            mx.managers.PopUpManager.centerPopUp(usageWindow);
            usageWindow.setFocus();
            usageWindow.billingPeriods = this.billingPeriods; 				
		}
		
		public function showNotesToCoreWindow():void {
			
			if (lastSelectedBillingPeriod == null ||
				lastSelectedBillingPeriod.@value == "") {
				Alert.show("Please select a billing period.");
				return;    	
			} 
			
			coreCommentsWindow = CoreCommentsWindow(mx.managers.PopUpManager.createPopUp(this, CoreCommentsWindow, false));
			mx.managers.PopUpManager.centerPopUp(coreCommentsWindow);
			coreCommentsWindow.setFocus();
			coreCommentsWindow.parentView = this;
			coreCommentsWindow.idBillingPeriod = lastSelectedBillingPeriod.@idBillingPeriod;
			coreCommentsWindow.update();
		}
		
		public function showBillingGLInterface():void {
		
			if (lastSelectedBillingPeriod == null ||
				lastSelectedBillingPeriod .@value == "") {
				Alert.show("Please select a billing period.");
				return;    	
			} 
			
			// Gather up grand total for approved node.  We do this as a
			// double-check to make sure the journal entries match to
			// what we see in the interface.
			var approvedNode:Object = null;
			for each(var item:Object in requests) {
				if (item.@label == "Approved") {
					approvedNode = item;
					break;
				}
			}
			if (approvedNode == null) {
				Alert.show("Unable to generate GL interface.  Cannot find approved folder.")
				return;
			}
			this.gatherDisplayInfo(approvedNode);

			// Show popup window for generating gl interface			
    		var runWindow:BillingGLInterfaceView = BillingGLInterfaceView(mx.managers.PopUpManager.createPopUp(this, BillingGLInterfaceView, true));
    		mx.managers.PopUpManager.centerPopUp(runWindow);
    		runWindow.setFocus();
			runWindow.idBillingPeriod = lastSelectedBillingPeriod.@idBillingPeriod;
			runWindow.idCoreFacility = this.getSelectedCoreFacilityId();
			runWindow.billingPeriod = lastSelectedBillingPeriod.@billingPeriod;
    		runWindow.grandTotalPrice = this.grandTotalPrice;
		}		
		
		private function showPricingView():void {
			var params:Object = new Object();
			selectedPrice = pricingTree.selectedItem;
			if (pricingTree.selectedItem.name() == "Price") {
				params.idPrice =     this.pricingTree.selectedItem.@idPrice;
				this.getPrice.send(params);
			} else if (pricingTree.selectedItem.name() == "PriceCriteria") {
				params.idPrice =     this.pricingTree.selectedItem.@idPrice;
				this.getPrice.send(params);
			}else if (pricingTree.selectedItem.name() == "PriceSheet") {
				params.idPriceSheet =     this.pricingTree.selectedItem.@idPriceSheet;
				this.getPriceSheet.send(params);
			} else if (pricingTree.selectedItem.name() == "PriceCategory") {
				params.idPriceCategory =     this.pricingTree.selectedItem.@idPriceCategory;
				this.getPriceCategory.send(params);
			}
		}
		private function showNewPriceView():void {
			var priceCategory:Object = getAncestor(XML(pricingTree.selectedItem), "PriceCategory");
			if (priceCategory == null) {
				Alert.show("Please select a price category");
				return;
			}

			var params:Object = new Object();
			params.idPrice = "0";
			this.getPrice.send(params);
		}
		private function showNewPriceSheetView():void {
			var params:Object = new Object();
			params.idPriceSheet = "0";
			this.getPriceSheet.send(params);
		}
		private function showNewPriceCategoryView():void {
			var priceSheet:Object = getAncestor(XML(pricingTree.selectedItem), "PriceSheet");
			if (priceSheet == null) {
				Alert.show("Please select a price sheet");
				return;
			}
			var params:Object = new Object();
			params.idPriceCategory = "0";
			this.getPriceCategory.send(params);
		}

    	private function promptForRemovePricing():void {
			if (this.pricingTree.selectedItem != null) {
				var warningMessage:String = "Are you sure you want to remove \"" + this.pricingTree.selectedItem.@display + "?\"";
				var currentNode:XML = XML(this.pricingTree.selectedItem);
				if(currentNode.name().localName == "PriceCategory") {
					warningMessage = "Are you sure you want to remove (unlink) category \"" + this.pricingTree.selectedItem.@display + "\" from the price sheet?";
				} 
				Alert.show(warningMessage, "Warning", (Alert.YES | Alert.NO), null, onPromptForRemovePricing);				
			}
    	}
    	
    	private function onPromptForRemovePricing(event:CloseEvent):void {
    		if (event.detail == Alert.YES) {
    			removePricing();
    		}
    	}		
		private function removePricing():void {
			if (this.pricingTree.selectedItem != null) {
				// After the delete operation has finished,
        		// select either the next sibling, or if no more children,
        		// the parent node.
        		var itemToSelect:Object = null;
        		if (this.pricingTree.selectedItem.childIndex() == 0) {
	        		itemToSelect = pricingTree.selectedItem.parent();
        		} else {
        			var idx:int = pricingTree.selectedItem.childIndex() - 1;
        			itemToSelect = pricingTree.selectedItem.parent().children()[idx];
        		}   
        		
        		this.pricingNodeToSelect = itemToSelect.name();
        		this.pricingIdToSelect   = itemToSelect["@id" + this.pricingNodeToSelect];
				
				var params:Object = new Object();
				if (this.pricingTree.selectedItem.name() == "Price") {
					params.idPrice = this.pricingTree.selectedItem.@idPrice;
					this.deletePrice.send(params);
				} else if (this.pricingTree.selectedItem.name() == "PriceCategory") {
					params.idPriceCategory = this.pricingTree.selectedItem.@idPriceCategory;
					params.idPriceSheet = this.pricingTree.selectedItem.parent().@idPriceSheet;
					this.deletePriceCategory.send(params);
				} else if (this.pricingTree.selectedItem.name() == "PriceSheet") {
					params.idPriceSheet = this.pricingTree.selectedItem.@idPriceSheet;
					this.deletePriceSheet.send(params);
				}
			}
		}
		private function onGetPrice(event:ResultEvent):void {		
			if (getPrice.lastResult.name() != "PriceList") {
				Alert.show(getPrice.lastResult..ERROR.@message);
				return;
			}	
			var price:Object = getPrice.lastResult..Price;
			var priceCategory:Object = getAncestor(XML(pricingTree.selectedItem), "PriceCategory");
            if (priceCategory != null) {
	       		var priceWindow:PriceView = PriceView(mx.managers.PopUpManager.createPopUp(this, PriceView, true));
            	mx.managers.PopUpManager.centerPopUp(priceWindow);
            	priceWindow.setFocus();
                priceWindow.init(price, priceCategory);
                priceWindow.priceName.setFocus();				        	
            }
		}

		private function onDeletePrice(event:ResultEvent):void {			
			if (deletePrice.lastResult.name() == "SUCCESS") {
				this.refresh();			        	
            } else {
            	Alert.show(deletePrice.lastResult..ERROR.@message);
            }
		}

		private function onGetPriceSheet(event:ResultEvent):void {			
			if (getPriceSheet.lastResult.name() != "PriceSheetList") {
				Alert.show(getPriceSheet.lastResult..ERROR.@message);
				return;
			}	

			var priceSheet:Object = getPriceSheet.lastResult..PriceSheet;
            if (priceSheet != null) {
	       		var priceSheetWindow:PriceSheetView = PriceSheetView(mx.managers.PopUpManager.createPopUp(this, PriceSheetView, true));
            	mx.managers.PopUpManager.centerPopUp(priceSheetWindow);
            	priceSheetWindow.setFocus();
                priceSheetWindow.init(priceSheet);
                priceSheetWindow.priceSheetName.setFocus();				        	
            } else {
            	Alert.show("Unable to get price sheet");
            }
		}

		private function onDeletePriceSheet(event:ResultEvent):void {			
			if (deletePriceSheet.lastResult.name() == "SUCCESS") {
				this.refresh();			        	
            } else {
            	Alert.show(deletePriceSheet.lastResult..ERROR.@message);
            }
		}
		
		private function onGetPriceCategory(event:ResultEvent):void {	
			if (getPriceCategory.lastResult.name() != "PriceCategoryList") {
				Alert.show(getPriceCategory.lastResult..ERROR.@message);
				return;
			}		
			var priceCategory:Object = getPriceCategory.lastResult..PriceCategory;
			var priceSheet:Object = getAncestor(XML(pricingTree.selectedItem), "PriceSheet");
            if (priceSheet != null) {
	       		var priceCategoryWindow:PriceCategoryView = PriceCategoryView(mx.managers.PopUpManager.createPopUp(this, PriceCategoryView, true));
            	mx.managers.PopUpManager.centerPopUp(priceCategoryWindow);
            	priceCategoryWindow.setFocus();
                priceCategoryWindow.init(priceCategory, priceSheet);
                priceCategoryWindow.priceCategoryName.setFocus();				        	
            } else {
            	Alert.show("Please select the price sheet");
            }
		}

		private function onDeletePriceCategory(event:ResultEvent):void {			
			if (deletePriceCategory.lastResult.name() == "SUCCESS") {
				this.refresh();			        	
            } else {
           		Alert.show(deletePriceCategory.lastResult..ERROR.@message);
            }
		}

		private function onMovePriceCategory(event:ResultEvent):void {			
			if (movePriceCategory.lastResult.name() == "SUCCESS") {
				Alert.show(movePriceCategory.lastResult.@message);
				this.refresh();			        	
            } else {
           		Alert.show(movePriceCategory.lastResult..ERROR.@message);
            }
		}


        private function getAncestor(item:XML, ancestorName:String):XML {
        	var ancestor:XML = null;
        	while( item )
			{
				if( item.name() == ancestorName )
				{
					ancestor = item;
					break;
				}
				item = item.parent();
			}
			return ancestor;
        }

		
		private function showSplitAccountsView():void {
			var requestNode:Object = null;
			if (this.billingItemGrid.selectedItem != null && this.billingItemGrid.selectedItem.name() == "Request") {
				  
				requestNode = this.billingItemGrid.selectedItem;
			} else if (this.billingItemGrid.selectedItem != null && this.billingItemGrid.selectedItem.name() == "BillingItem") {
				requestNode = this.billingItemGrid.selectedItem.parent();
			} else if (this.billingItemGrid.selectedItem == null) {
				for each(var item:Object in this.billingItemsDisplayed) {
					// We have more than 1 request in the billing item grid, so we don't
					// know which one to selected.  
					if (requestNode != null && requestNode.@idRequest != item.@idRequest) {
						requestNode = null;
						break;
					}
					// We only have one request is the billing item grid.  Assume
					// this one should be split.
					requestNode = item;
				}
			}
			
			if (requestNode == null) { 
				Alert.show("Please select an experiment (in the list) to split into separate accounts.");
				return;
			}
			
			
			if (requestNode.@status == "NEW") {
					Alert.show("Please save the billing items before splitting into separate accounts.");
					return;				
			}

			if (this.dirty.isDirty()) {
				Alert.show("Please save changes before splitting billing items.");
				return
			}
			
			var billingAccountEntries:XMLListCollection = new XMLListCollection();	
			var billingPeriods:XMLListCollection = new XMLListCollection();
			var labs:XMLListCollection = new XMLListCollection();
			for each(var lab:Object in parentApplication.promptedLabList) {
				labs.addItem(lab);
			}
			var totalPrice:Number = 0;
			var invoicePrice:Number = 0;
			var splitType:String = "%";
			for each(var r:Object in this.billingItems) {
				for each(var billingItem:Object in r.BillingItem) {
					if (billingItem.@idRequest != requestNode.@idRequest) {
						continue; 
					}
					if (billingItem.@other == "Y") {
						continue;
					}
					
					// Figure out split type for the screen
					var biPercent:String = billingItem.@percentageDisplay;
					var biInvoicePrice:String = billingItem.@invoicePrice;
					var biTotalPrice:String = billingItem.@totalPrice;
					var p:int = int(biPercent.replace("%",""));
					var ip:Number = Number(biInvoicePrice.replace("$","").replace(",",""));
					var tp:Number = Number(biTotalPrice.replace("$","").replace(",",""));
					splitType = billingItem.@splitType;
					
					var found:Boolean = false;
					for each(var acct:Object in billingAccountEntries) {
						if (acct.@idBillingAccount == billingItem.@idBillingAccount) {
							found = true;
							break; 
						} 
					}  
					
					if (!found) {
	       				var newBillingAccount:XML = new XML(
		   				 "<BillingAccount " + 
	   			 	 	 " idBillingAccount='" + billingItem.@idBillingAccount + "'" +
	   			 	 	 " accountName='" + billingItem.@accountNameAndNumber + "'" +
	   			 	 	 " accountNumberDisplay='" + billingItem.@accountNumberDisplay + "'" +
	   			 	 	 " idLab='" + billingItem.@idLab + "'" +
	   			 	 	 " labName='" + billingItem.@labName + "'" +
	   			 	 	 " percentage='" + billingItem.@percentageDisplay + "'" +
						 " invoicePrice='" + r.@invoicePrice + "'" +
	   			 	 	 "/>"); 
	   			 	 	 billingAccountEntries.addItem(newBillingAccount);
						 var invoicePriceString:String = r.@invoicePrice;
						 invoicePrice = invoicePrice + Number(invoicePriceString.replace('$','').replace(',',''));
						 var totalPriceString:String = requestNode.@totalPrice;
						 totalPrice = Number(totalPriceString.replace('$','').replace(',',''));
					} 
					
					var foundBillingPeriod:Boolean = false;
					for each(var bp:Object in billingPeriods) {
						if (bp.@idBillingPeriod == billingItem.@idBillingPeriod) {
							foundBillingPeriod = true;
							break; 
						} 
					}  
					if (!foundBillingPeriod) {
						var newBillingPeriod:XML = new XML("<BillingPeriod idBillingPeriod='" + billingItem.@idBillingPeriod + "'/>");
						billingPeriods.addItem(newBillingPeriod);
					}
					
				}
				
			}
			
			if (billingPeriods.length > 1) {
				if (this.lastSelectedBillingPeriod != null && this.lastSelectedBillingPeriod.@idBillingPeriod != '' && this.spanOtherCheckbox.selected) {
					Alert.show("This experiment has billing items spanning multiple billing periods.\n\nPlease uncheck the checkbox 'Show related charges in other periods' to narrow the billing items to qualify the billing items to be split.");
					return;			
				} else {
					Alert.show("This experiment has billing items spanning multiple billing periods.  Please select a billing period from the dropdown to qualify the billing items to be split.");
					return;
					
				}
			}
			
			if (billingPeriods.length == 0) {
				Alert.show("Please select a billing period from the dropdown first.");
				return;
			}
			
			var idBillingPeriod:Object = billingPeriods.getItemAt(0).@idBillingPeriod;
			
			var splitWindow:BillingSplitView = BillingSplitView(mx.managers.PopUpManager.createPopUp(this, BillingSplitView, true));
        	mx.managers.PopUpManager.centerPopUp(splitWindow); 
        	splitWindow.setFocus();
        	splitWindow.idBillingPeriod = idBillingPeriod;
			splitWindow.totalPrice = currencyFormatter.format(totalPrice.toString());
			splitWindow.invoicePrice = currencyFormatter.format(invoicePrice.toString());
        	splitWindow.request = requestNode;			
        	splitWindow.labs = labs;
        	splitWindow.billingAccountEntries = billingAccountEntries;
			splitWindow.origSplitType = splitType;
        	splitWindow.initializeData();
			
		}
		

		private function showReassignAccountView():void {
			var requestNode:Object = null;
			if (this.dirty.isDirty()) {
				Alert.show("Please save the billing items before trying to reassign the account.");
				return;
			}
			if (this.billingItemGrid.selectedItem != null && this.billingItemGrid.selectedItem.name() == "Request") {				 
				requestNode = this.billingItemGrid.selectedItem;
				if (requestNode.@status == "NEW") {
						Alert.show("Please save the new billing items before trying to reassign the account.");
						return;				
				} 
			} else if (this.requestTree.selectedItem != null && this.requestTree.selectedItem.name() == "Request") {
				requestNode = this.requestTree.selectedItem;
				if (requestNode.@codeBillingStatus == "NEW") {
						Alert.show("Please save the new billing items before trying to reassign the account.");
						return;				
				} 
			} 
			
			if (requestNode == null) { 
				Alert.show("To reassign the account, you must first select an experiment in the list.");
				return;
			}
			
			
			
			var billingPeriods:XMLListCollection = new XMLListCollection();
			for each(var r:Object in this.billingItemsDisplayed) {
				for each(var billingItem:Object in r.BillingItem) {
					if (billingItem.@idRequest != requestNode.@idRequest) {
						continue; 
					}
					var foundBillingPeriod:Boolean = false;
					for each(var bp:Object in billingPeriods) {
						if (bp.@idBillingPeriod == billingItem.@idBillingPeriod) {
							foundBillingPeriod = true;
							break; 
						} 
					}  
					if (!foundBillingPeriod) {
						var newBillingPeriod:XML = new XML("<BillingPeriod idBillingPeriod='" + billingItem.@idBillingPeriod + "'/>");
						billingPeriods.addItem(newBillingPeriod);
					}					
				}
				
			}
			
			if (billingPeriods.length > 1) {
				Alert.show("This experiment has billing items spanning multiple billing periods.  Please select a billing period from the dropdown to qualify the billing items to be reassigned to different account.");
				return;
			}
			if (billingPeriods.length == 0) {
				Alert.show("Please select a billing period from the dropdown first.");
				return;
			}
			var idBillingPeriod:Object = billingPeriods.getItemAt(0).@idBillingPeriod;
			
			
			var reassignWindow:BillingReassignView = BillingReassignView(mx.managers.PopUpManager.createPopUp(this, BillingReassignView, true));
        	mx.managers.PopUpManager.centerPopUp(reassignWindow);
        	reassignWindow.setFocus();
        	reassignWindow.request = requestNode;
        	reassignWindow.idBillingPeriod = idBillingPeriod;
        	reassignWindow.initializeData();

		}
		
		private function onBillingTabChange():void {
			if (billingTabNavigator.selectedChild == this.priceTab) {
				this.requestTabWidth = this.billingTabNavigator.width;
				this.billingTabNavigator.width = this.priceTabWidth;
			} else {
				this.priceTabWidth = this.billingTabNavigator.width;
				this.billingTabNavigator.width = this.requestTabWidth;
			}
		}
				
		private function pickBillingPeriod():void 
		{
			var pickBillingPeriodWindow:PickBillingPeriodView = new PickBillingPeriodView();
			PopUpManager.addPopUp(pickBillingPeriodWindow, pickBillingPeriodButton, false);
			PopUpManager.centerPopUp(pickBillingPeriodWindow);
			var selYear:int = parseInt(pickBillingPeriodButton.label.substr(pickBillingPeriodButton.label.length-4));
			if(selYear == 0) {
				selYear = (new Date()).getFullYear();
			}
			pickBillingPeriodWindow.init(selYear, maxBillingYear, minBillingYear, activeBillingPeriods);
		}
		
		private function billingPeriodSelected(evt:BillingPeriodSelectEvent):void
		{
			pickBillingPeriodButton.label = evt.selectedMonthYear;
			var currentBillingPeriod:Object = null;
			lastSelectedBillingPeriod = billingPeriods[0];
			for each( var de:Object in billingPeriods) {
			if (de.@display == evt.selectedMonthYear) {
					lastSelectedBillingPeriod=de;
				}
			}
			requestNumberText.text = "";
			invoiceNumberLookupText.text = "";
			refreshRequestTab();					
		}	
		
		public function onEdit():void {
			if ( billingItemGrid.selectedItem != null ) {
				billingItemGrid.selectedItem.@isDirty = "Y";
			}
			billingItemGrid.selectedIndex = -1;
		}
		
		private function getCompleteDateString(item:Object,col:int):String
		{
			return item.@completeDateOther.toString();
		}
		
		private function showPricingTreeToolTips(object:Object):String
		{
			if(object.hasOwnProperty("dataField"))
			{
				switch(object.dataField)
				{
					case "@unitPriceCurrency":
						
						return "Internal Unit Price";
						break;
					
					case "@unitPriceExternalAcademicCurrency":
						
						return "External Unit Price for Academic Labs";
						break;
					
					case "@unitPriceExternalCommercialCurrency":
						
						return "External Unit Price for Commercial Labs";
						break;
				}
			}
			
			return "";
		}	
				
		public function forwardPendingBillingItems():void{
			
			var months:Array = new Array(12);
			months[0] = "Jan";
			months[1] = "Feb";
			months[2] = "Mar";
			months[3] = "Apr";
			months[4] = "May";
			months[5] = "Jun";
			months[6] = "Jul";
			months[7] = "Aug";
			months[8] = "Sep";
			months[9] = "Oct";
			months[10] = "Nov";
			months[11] = "Dec";	
			
			// Get the currently selected billing period month and year
			var selYear:int = parseInt(pickBillingPeriodButton.label.substr(pickBillingPeriodButton.label.length-4));
			var selMonth:int = months.indexOf(pickBillingPeriodButton.label.substr(0,3));
			// Get the next month and year (if moving from Dec to Jan)
			var nextMonth:int = (selMonth + 1)%12; 
			if ( nextMonth == 0 ) {
				selYear++;
			}
			var nextPeriodDisplay:String = months[nextMonth] + " " + selYear;
			
			// Get the billing period with that month and year and change all billing items to that billing period.
			var idBillingPeriod:String = ''
			for each( var de:Object in billingPeriods) {
				if (de.@display == nextPeriodDisplay) {
					idBillingPeriod = de.@idBillingPeriod;
					break;
				}
			}
			
			// Change the billing period for the selected items (or all displayed if none selected)
			if ( idBillingPeriod != '' ) {
				if ( billingItemGrid.selectedItems.length == 0 ) {
					for each(var request:XML in billingItemsDisplayed){
						for each(var bi:Object in request.BillingItem){
							bi.@idBillingPeriod = idBillingPeriod;
							bi.@isDirty = "Y";
						}
					}
				} else {
					for each ( var item:XML in billingItemGrid.selectedItems){
						if (item.name() == "BillingItem") {
							item.@idBillingPeriod = idBillingPeriod;
							item.@isDirty = "Y";
						} else if (item.name() == "Request") {
							for each ( var bItem:XML in item.BillingItem ) {
								bItem.@idBillingPeriod = idBillingPeriod;
								bItem.@isDirty = "Y"
							}
						}
					}
				}
			} 
			
			
			
		}
				
		public function changeStatusImpl():void {
			if ( billingItemGrid.selectedItems.length == 0 ) {
				for each(var request:XML in billingItemsDisplayed){
					for each(var bi:Object in request.BillingItem){
						bi.@codeBillingStatus = billingStatusCombo.selectedItem.@value;
						bi.@isDirty = "Y";
					}
				}
			} else {
				for each ( var item:XML in billingItemGrid.selectedItems){
					if (item.name() == "BillingItem") {
						item.@codeBillingStatus = billingStatusCombo.selectedItem.@value;
						item.@isDirty = "Y";
					} else if (item.name() == "Request") {
						for each ( var bItem:XML in item.BillingItem ) {
							bItem.@codeBillingStatus = billingStatusCombo.selectedItem.@value;
							bItem.@isDirty = "Y"
						}
					}
				}
			}
			billingStatusCombo.selectedItem = billingStatusCombo.prompt;
			billingItemGrid.selectedIndex = -1;
		}

		private function getSelectedCoreFacilityId():String {
			if (parentApplication.coreFacilitiesICanManage.length() == 1) {
				return parentApplication.coreFacilitiesICanManage[0].@value;
			} else {
				return coreFacilityCombo.selectedItem.@value;
			}
		}
		
		public function invoiceNumberText_changeHandler():void {
			if (this.lastSelectedInvoice != null) {
				this.lastSelectedInvoice.@invoiceNumber = this.invoiceNumberText.text;
				this.lastSelectedInvoice.@isDirty = "Y";
				dirty.setDirty();
			}
		}
		
		private function showBillingInvoiceEmailWindow(labNode:Object):void {
			var emailWindow:BillingInvoiceEmailWindow = BillingInvoiceEmailWindow(mx.managers.PopUpManager.createPopUp(this, BillingInvoiceEmailWindow, true));
			mx.managers.PopUpManager.centerPopUp(emailWindow);
			emailWindow.idBillingPeriod = lastSelectedBillingPeriod.@value;
			emailWindow.labNode = labNode;
			emailWindow.idCoreFacility = this.getSelectedCoreFacilityId();
			emailWindow.currentState = "getEmailState";
			emailWindow.emailText.text = labNode.@billingNotificationEmail;
			emailWindow.setFocus();
			emailWindow.emailText.setFocus();
			emailWindow.addEventListener(CloseEvent.CLOSE, refreshAfterEmailSent);
		}
		
		private function refreshAfterEmailSent(e:CloseEvent):void {
			refresh();
		}
		
		private function onPricingTreeClick():void{
			this.selectedPrice = this.pricingTree.selectedItem;
		}
		
		private function pickAccountDropdownLabel():void {
			if (radioShowBillingAccountName.selected) {
				billingAccountCombo.labelField = '@accountNameDisplay';	
			} else {
				billingAccountCombo.labelField = '@accountNumberDisplay';	
			}
				
		}
		
		private function onMenuClick(event:MouseEvent):void {
			if (event == null || event.target == null || event.target.data == null || event.target.data.@label == null) {
				return;
			}
			doMenu(event.target.data.@label);
		}
		
		private function onMenuSelect(event:MenuEvent):void {
			doMenu(event.label);
		}
		
		
		private function doMenu(label:String):void {
			
			if (label == 'Invoice Report') {
				showBillingMonthendReport();
			} else if (label == 'Billing by Lab and Experiment Platform') {
				showBillingSummaryWindow();
			} else if (label == 'Usage Report') {
				this.showBillingUsageWindow();
			} else if (label == 'Print Invoice') {
				this.showBillingInvoice(false);
			} else if (label == 'Email Invoice') {
				this.showBillingInvoice(true);
			} else if (label == 'General Ledger Interface') {
				this.showBillingGLInterface();
			} else if (label == 'Refresh') {
				refresh();
			} else if (label == 'Notes to Core') {
				showNotesToCoreWindow();
			} else if (label == 'Monthend Billing Report (uMerge Format)') {
				showBillingMonthendReportUMergeFormat();
			}
		}

		private function collapseLabNodes():void {
			for each(var lab:Object in getBillingRequestList.lastResult.Status..Lab) {
				requestTree.expandItem(lab, false);
			}
			requestTree.validateNow();
			
		}
		
		public function expandAllNodes():void
		{
			for each(var lab:Object in getBillingRequestList.lastResult..Lab) {
				requestTree.expandItem(lab, true);
			}
			for each(var status:Object in getBillingRequestList.lastResult.Status) {
				requestTree.expandItem(status, true);
			}
			requestTree.validateNow();
		}
		
		private function resizeMenuItems():void{
			if (this.menuBar.visible) {
				for each(var item:MenuBarItem in this.menuBar.menuBarItems){
					item.width += 14;
				}
			} else if (this.menuBarNoGLInterface.visible) {
				for each(var item2:MenuBarItem in this.menuBarNoGLInterface.menuBarItems){
					item2.width += 14;
				}
			}
		}
		
		
		
 	]]>
 </mx:Script>	

<mx:Style>
  .other { fontStyle:italic; color: #747170; }
  .percentageEmphasis {fontWeight:bold; color: #AA082A;}
  .normal {}    
</mx:Style>
	
  <mx:DateFormatter id="dateFormatter" formatString="MM/DD/YYYY"/>
 
  <mx:VBox width="100%" verticalGap="4" height="100%" paddingTop="0">
	    <mx:VBox styleName="panelBox" horizontalGap="4" paddingTop="4" paddingRight="0" paddingLeft="0" verticalGap="0" width="100%" paddingBottom="2">
            <mx:HBox  verticalAlign="middle" paddingTop="0" paddingBottom="0" horizontalGap="10" width="100%" paddingLeft="2" paddingRight="2">
				<mx:Label styleName="titleLabel" text="Billing" width="50"/>
				<mx:MenuBar id="menuBar" 
							click="onMenuClick(event)"
							itemClick="{onMenuSelect(event)}"   
							labelField="@label" iconField="@icon"  styleName="linkMenuBar"
							buttonMode="true"
							useHandCursor="true" fontSize="11" height="30">
					<mx:XMLList>
						<menuitem label="Print Invoice" icon="iconPrintInvoice" />
						<menuitem label="Email Invoice" icon="iconEmailInvoice" />
						<menuitem label="General Ledger Interface"  icon="iconGLInterface" />
						<menuitem label="Reports..."  icon="iconReports" >
							<menuitem label="Invoice Report" />
							<menuitem label="Monthend Billing Report (uMerge Format)" />
							<menuitem label="Billing by Lab and Experiment Platform"  />
							<menuitem label="Usage Report"  />
							<menuitem label="Notes to Core"  />
						</menuitem>
						<menuitem label="Refresh"  icon="iconRefresh" />
					</mx:XMLList>
				</mx:MenuBar> 
				<mx:MenuBar id="menuBarNoGLInterface" 
							visible="false" includeInLayout="false" 
							click="onMenuClick(event)"
							itemClick="{onMenuSelect(event)}"   
							labelField="@label" iconField="@icon"  styleName="linkMenuBar"  height="30" width="100%">
					<mx:XMLList>
						<menuitem label="Print Invoice" icon="iconPrintInvoice" />
						<menuiutem label="Email Invoice" icon="iconEmailInvoice" />
						<menuitem label="Reports..."  icon="iconReports" >
							<menuitem label="Invoice Report" />
							<menuitem label="Monthend Billing Report (uMerge Format)" />
							<menuitem label="Billing by Lab and Experiment Platform"  />
							<menuitem label="Usage Report"  />
							<menuitem label="Notes to Core"  />
						</menuitem>
						<menuitem label="Refresh"  icon="iconRefresh" />
					</mx:XMLList>
				</mx:MenuBar> 

				<mx:Spacer width="100%"/>
				<mx:HBox verticalGap="0" verticalAlign="middle" horizontalGap="0">
				<mx:Label id="requestNumberLabel" visible="true" text="Experiment #" paddingBottom="0"  paddingTop="0" fontSize="10"/>
				<mx:TextInput id="requestNumberText" enter="refreshRequestTab()" width="75" backgroundColor="#FFFFFF" fontSize="10">
				</mx:TextInput>			   	
				</mx:HBox>
				<mx:HBox verticalGap="0" horizontalAlign="left" verticalAlign="middle" horizontalGap="0">
				<mx:Label id="invoiceNumberLabel" visible="true" text="Invoice #" paddingBottom="0"  paddingTop="0" fontSize="10"/>
				<mx:TextInput id="invoiceNumberLookupText" width="55" enter="refreshRequestTab()" backgroundColor="#FFFFFF" fontSize="10">
				</mx:TextInput>			   	
				</mx:HBox>

	     </mx:HBox>

	      <mx:HBox horizontalGap="10" verticalAlign="top" paddingLeft="62" paddingTop="4" width="100%">
			    <mx:VBox verticalGap="0" includeInLayout="{parentApplication.coreFacilitiesICanManage.length() > 1}" visible="{parentApplication.coreFacilitiesICanManage.length() > 1}" verticalAlign="middle" fontSize="9">
				    <mx:Label text="Core Facility"/>
				    <mx:ComboBox id="coreFacilityCombo" width="200" dataProvider="{parentApplication.coreFacilitiesICanManage}"
							     labelField="@display" change="requestNumberText.text = &quot;&quot;;invoiceNumberLookupText.text = &quot;&quot;;refreshRequestTab()"/>
			    </mx:VBox>
		    	<mx:VBox verticalAlign="middle" verticalGap="0" horizontalAlign="left" paddingRight="0"   paddingLeft="0">
					<mx:HBox horizontalGap="8" verticalAlign="middle" verticalGap="0">
						<mx:VBox verticalGap="0" paddingTop="0" paddingLeft="0" verticalAlign="middle">
							<mx:Label id="billingPeriodLabel" visible="true" text="Billing Period" fontSize="9"/>
							<mx:Button label="Unknown" id="pickBillingPeriodButton" click="pickBillingPeriod()" height="22" width="130"/>					
						</mx:VBox>
						<mx:VBox verticalGap="0">
							<mx:Label id="groupLabel" visible="true" text="Lab Group" paddingBottom="0" fontSize="9"/>
							<mx:ComboBox id="labCombo" 
										 labelField="@name"
										 dataProvider="{parentApplication.promptedLabList}"
										 visible="true"  width="190" change="requestNumberText.text = &quot;&quot;;invoiceNumberLookupText.text = &quot;&quot;;getLab.send();refreshRequestTab()">
							</mx:ComboBox>				   
						</mx:VBox>
					</mx:HBox>
		    	</mx:VBox>  

		    	<mx:HBox horizontalGap="0" height="100%" verticalAlign="top" verticalGap="0" horizontalAlign="left" paddingRight="0" width="100%">
					<mx:VBox verticalGap="0" width="100%" minWidth="352" verticalScrollPolicy="off" horizontalScrollPolicy="off"> 
						<mx:HBox horizontalGap="1" paddingBottom="0" paddingTop="0">
							<mx:RadioButton label="Account name" styleName="labelSmall" selected="true" id="radioShowBillingAccountName" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" textAlign="left" horizontalGap="0" fontSize="9">
								<mx:click>{radioShowBillingAccountName.selected ? billingAccountCombo.labelField = '@accountNameDisplay' : billingAccountCombo.labelField = '@accountNumberDisplay'}</mx:click>
							</mx:RadioButton>
							<mx:RadioButton label="Account #" styleName="labelSmall" id="radioShowBillingAccountNumber" paddingLeft="4" paddingBottom="0" paddingRight="0" paddingTop="0" horizontalGap="0" fontSize="9">
								<mx:click>{pickAccountDropdownLabel()}</mx:click>
							</mx:RadioButton>
							
						</mx:HBox>
						<mx:ComboBox id="billingAccountCombo" 
							labelField="@accountNameDisplay"
							 visible="true"  width="350" change="requestNumberText.text = &quot;&quot;;invoiceNumberLookupText.text = &quot;&quot;;refreshRequestTab()">
						</mx:ComboBox>
						
					</mx:VBox>
			   	
		    	</mx:HBox> 

		   </mx:HBox> 	
	    </mx:VBox>

        <mx:HDividedBox height="100%" width="100%">
        	<mx:TabNavigator height="100%" width="220" id="billingTabNavigator"
        		paddingTop="2" styleName="navTabNavigator" 
        		paddingLeft="4" paddingRight="4" paddingBottom="4"
 				change="{onBillingTabChange()}" dropShadowEnabled="false" >
        		<mx:VBox label="Experiments" height="100%" verticalGap="0" width="100%" color="#000000" id="requestTab" >
        			<mx:HBox horizontalGap="0" paddingBottom="2" paddingTop="0" color="#000000">
						<mx:LinkButton label="Pending" textDecoration="underline" paddingRight="0" styleName="formLinkSmallButton" click="jumpTo(&quot;Pending&quot;)" id="jumpPending"/>
						<mx:LinkButton label="Completed" textDecoration="underline" paddingRight="0" styleName="formLinkSmallButton" click="jumpTo(&quot;Completed&quot;)" id="jumpCompleted"/>
						<mx:LinkButton label="Approved" textDecoration="underline" paddingRight="0"  styleName="formLinkSmallButton" click="jumpToApproved()" id="jumpApproved"/>
        				
        			</mx:HBox>
        		    
					<mx:AdvancedDataGrid id="requestTree" width="100%" height="100%"  
						showHeaders="false"  
						displayItemsExpanded="false" 
						dragEnabled="true" 
						change="onRequestNodeSelected()"
						iconFunction="parentApplication.getTreeIcon"  
						labelFunction="getTreeLabel"
						showDataTips="true"
						dragMoveEnabled="false" dropEnabled="false" borderStyle="solid" dropShadowEnabled="false" fontSize="11">
    		 	        <mx:dataProvider>
  						  <mx:HierarchicalData id="rc" source="{requests}"/>
				        </mx:dataProvider>		 				  
				        <mx:columns>
  						  <mx:AdvancedDataGridColumn dataField="@label"  dataTipField="@dataTip"/> 
  					    </mx:columns>
  					</mx:AdvancedDataGrid>
					
					<mx:HBox horizontalGap="0" width="100%">
						<mx:ViewStack id="treeExpansionStack" width="100%" selectedIndex="0">
							<mx:HBox width="100%" horizontalAlign="left">
								<mx:LinkButton   label="Expand labs" click="{treeExpansionStack.selectedIndex = 1;this.expandAllNodes();}" textDecoration="underline" />
							</mx:HBox>
							<mx:HBox width="100%" horizontalAlign="left">
								<mx:LinkButton  label="Collapse labs" click="{treeExpansionStack.selectedIndex = 0;this.collapseLabNodes()}" textDecoration="underline" />					    	
							</mx:HBox>
						</mx:ViewStack>
					</mx:HBox>
        		</mx:VBox> 
        		
        		<mx:VBox id="priceTab" label="Prices" height="100%" verticalGap="0" width="100%" color="#000000" show="{this.getPricingList.send();}" >
					<mx:Tile  direction="horizontal" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" horizontalGap="0" verticalGap="0">
						<mx:Repeater id="priceSheetRepeater" dataProvider="{getPricingList.lastResult.PriceSheet}">
							<mx:LinkButton label="{priceSheetRepeater.currentItem.@display}" 
								fontSize="9" paddingTop="0" paddingBottom="0"  width="130"
								paddingLeft="0" paddingRight="1" textDecoration="underline"
								click="{jumpToPriceSheet(event.currentTarget.getRepeaterItem().@display)}" textAlign="left">
							</mx:LinkButton>
						</mx:Repeater>
  									<mx:VBox styleName="dragAndDropHint" borderStyle="solid" cornerRadius="4">
  									</mx:VBox>
					</mx:Tile>
					<mx:LinkButton label="Drag-and-drop hint" 
						click="{Alert.show('Drag-and-drop price category to reorder within a price sheet or attach to another price sheet. Drag price to billing grid to create a new billing item for an experiment.')}" paddingLeft="0" paddingRight="0" paddingTop="1" paddingBottom="1" icon="@Embed(source='../../assets/information.png')" fontSize="10" fontStyle="italic" fontWeight="normal">
					</mx:LinkButton>
					
					<util:AdvancedDataGridAS id="pricingTree" width="100%" height="100%" 
						 displayItemsExpanded="false" 
						 iconFunction="parentApplication.getTreeIcon" 
						 dropEnabled="true"  
						 dragEnabled="true" 
						 dragMoveEnabled="true" 
						 doubleClick="showPricingView()"
						 click="onPricingTreeClick()"
						 doubleClickEnabled="true" 
						 showHeaders="true" 
						 dragDrop="this.onDragDropPricing(event)"
						 sortExpertMode="true" 
						 sortableColumns="false"
						 borderStyle="solid" 
						 dropShadowEnabled="true" 
						 headerWordWrap="false" 
						resizableColumns="true" 
						dataTipFunction="showPricingTreeToolTips" fontSize="10">						
  		 	        <util:dataProvider> 
  						  <mx:HierarchicalData source="{pricingList}"/>
				        </util:dataProvider>						  
				        <util:columns>
  						  <mx:AdvancedDataGridColumn dataField="@display" headerText="" width="150"/> 
						  <mx:AdvancedDataGridColumn dataField="@unitPriceCurrency"  headerText="Price" width="30" textAlign="right" showDataTips="true" /> 
						  <mx:AdvancedDataGridColumn dataField="@unitPriceExternalAcademicCurrency"  headerText="Academic" width="30" textAlign="right" showDataTips="true" /> 
						  <mx:AdvancedDataGridColumn dataField="@unitPriceExternalCommercialCurrency"  headerText="Commercial" width="30" textAlign="right" showDataTips="true" /> 
  					    </util:columns>
  					</util:AdvancedDataGridAS>
  					<mx:ControlBar paddingBottom="2" horizontalGap="0" paddingTop="3" paddingLeft="0" paddingRight="0" >
  							<mx:VBox verticalGap="0" >
  								<mx:HBox width="100%" fontSize="10">
  									<mx:CheckBox label="Show prices" id="showPricesCheckbox" selected="true" click="{this.getPricingList.send()}" />
  									<mx:CheckBox label="Show price criteria" id="showPriceCriteriaCheckbox" click="{this.getPricingList.send()}" />
  									<mx:CheckBox label="Show inactive prices" id="showInactivePricesCheckbox" click="{this.getPricingList.send()}" />
  									<mx:Spacer width="100%"/>
  								</mx:HBox>
  								<mx:HBox  horizontalGap="0" >
	  								<mx:LinkButton label="New sheet" textDecoration="underline" click="showNewPriceSheetView()" textAlign="left" icon="@Embed(source='../../assets/pricesheet_add.png')" paddingLeft="0" >
	  								</mx:LinkButton>
	  								<mx:LinkButton label="New category" textDecoration="underline" click="showNewPriceCategoryView()" textAlign="left"  >
	  									<mx:icon>@Embed(source='../../assets/folder_money_add.png')</mx:icon>
	  								</mx:LinkButton>
	  								<mx:LinkButton label="New price" textDecoration="underline" click="showNewPriceView()"  textAlign="left" icon="@Embed(source='../../assets/money_add.png')"  />
	  								<mx:LinkButton  enabled="{this.pricingTree.selectedItem != null}" label="Remove" textDecoration="underline" click="promptForRemovePricing()" textAlign="left" disabledIcon="@Embed(source='../../assets/delete_disable.png')" icon="@Embed(source='../../assets/delete.png')" />
  								</mx:HBox>
  							</mx:VBox>
  					</mx:ControlBar>        		    
        		</mx:VBox>
        	</mx:TabNavigator>
 
			        	
        	<mx:VBox styleName="panelBox"  width="100%" height="100%">
				<mx:VBox width="100%">
					<mx:HBox width="100%" verticalAlign="middle">
						<mx:Label id="titleLabel" styleName="titleLabel" text="{'Billing Items' + (this.requestTree.selectedItem != null ? '     ' + this.requestTree.selectedItem.@label + '     ' + this.grandTotalPrice : '')}" fontSize="11"/>
						<mx:Spacer width="100%"/>
						<mx:CheckBox label="Show related charges in other periods" id="spanOtherCheckbox" selected="true" paddingTop="0" paddingBottom="0" fontSize="10" click="refreshRequestTab()" paddingLeft="8" paddingRight="0">
							<mx:toolTip>When a request has billing items spanning multiple billing periods, show the related charges (grey, italics) that are in other billing periods.</mx:toolTip>
						</mx:CheckBox>
					</mx:HBox>
					<mx:HBox width="100%" verticalAlign="middle">
						<mx:HBox id="invoiceBox" visible="{lastSelectedInvoice != null}" horizontalGap="0" verticalAlign="middle">
							<mx:Label styleName="titleLabel" text="Invoice" fontSize="11"/>
							<mx:TextInput id="invoiceNumberText" change="invoiceNumberText_changeHandler()" width="120" text="{lastSelectedInvoice == null ? '' : lastSelectedInvoice.@invoiceNumber}" enabled="{this.requestTree.selectedItem != null &amp;&amp; this.requestTree.selectedItem.name() == 'Lab'}" fontSize="11" backgroundColor="#FFFFFF" backgroundAlpha="1.0"/>
							<mx:Spacer width="10"/>
							<mx:Label id="lastEmailDateLabel" styleName="titleLabel" text="Email Date" fontSize="11"/>
							<mx:Label id="lastEmailDate" styleName="titleLabel" text="{lastSelectedInvoice == null ? '' : lastSelectedInvoice.@lastEmailDate}" fontSize="11"/>
						</mx:HBox>
						<mx:Spacer width="100%"/>
						<mx:Button label="Move to next billing period" 
								   toolTip="This will move all the selected items to the next billing period.  If no items are selected, all of the items displayed will move to the next billing period. (Shift or ctrl + click will highlight multiple rows.)" 
								   click="forwardPendingBillingItems()" 
								   id="forwardPendingItemsLink"
								   fontSize="10" enabled="{this.billingItemsDisplayed.length>0}"/>
						<mx:ComboBox id="billingStatusCombo" 
									 prompt="- Change Status -" 
									 dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingStatus').DictionaryEntry.(@display == 'Approved' || @display == 'Completed')}"
									 labelField="@display" 
									 toolTip="This will update the status for all the selected items.  If no items are selected, all of the displayed items' statuses will update. (Shift or ctrl + click will highlight multiple rows.)" 
									 change="changeStatusImpl()" enabled="{this.billingItemsDisplayed.length>0}"/>
					</mx:HBox>
				</mx:VBox>
				
        		<util:AdvancedDataGridLargeDataSet width="100%" height="100%" 
        			displayItemsExpanded="false"  
        			editable="true" 
        			sortExpertMode="true" 
        			sortableColumns="false"   
        			id="billingItemGrid" 
        			dropEnabled="true"  
        			dragDrop="onDragDropBillingItemGrid(event)"
                    allowMultipleSelection="true" 
                    iconFunction="parentApplication.getTreeIcon" 
                    wordWrap="true" 
                    showDataTips="true"
                    headerWordWrap="true" 
					selectionMode="singleRow" 
					itemEditEnd="onEdit()" 
                    alternatingItemColors="[0xFFFFFF, 0xEEEEE0]" 
					dropShadowEnabled="true" 
					borderStyle="solid" 
					fontSize="10" >
        			<util:columns> 
        				<mx:AdvancedDataGridColumn headerText="#" dataField="@requestNumber" editable="false" width="12"  />
        				<mx:AdvancedDataGridColumn headerText="Group" dataField="@billingLabName" editable="false" width="12" wordWrap="true"/>
        				<mx:AdvancedDataGridColumn headerText="Client" dataField="@submitter" editable="false" width="9" wordWrap="false"/>
        				<mx:AdvancedDataGridColumn headerText="Acct" dataField="@billingAccountName" editable="false" width="9" wordWrap="false" dataTipField="@billingAccountName"/>
        				<mx:AdvancedDataGridColumn headerText="Period" dataField="@idBillingPeriod" editable="true" width="8"  wordWrap="false"
        			      editorDataField="value"  
        				  rendererIsEditor="false"   
						  itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingPeriod').DictionaryEntry,'@display', '@value', '@idBillingPeriod')}"                              
						  itemEditor="{views.renderers.ComboBoxBillingPeriod.create(billingPeriods, '@display', '@value', '@idBillingPeriod', null, true)}"/>                 
        				<mx:AdvancedDataGridColumn headerText="%" dataField="@percentageDisplay" editable="false" textAlign="right" width="6" wordWrap="false"
        				  editorDataField="text"
        				  rendererIsEditor="false"
						  itemRenderer="views.renderers.LabelPercentage" />                              
        				<mx:AdvancedDataGridColumn headerText="Type" dataField="@codeBillingChargeKind" editable="true" width="6" wordWrap="false" 
        			      editorDataField="value" 
        				  rendererIsEditor="false"
						  itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingChargeKind').DictionaryEntry,'@display', '@value', '@codeBillingChargeKind')}"                              
						  itemEditor="{hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingChargeKind').DictionaryEntry,'@display', '@value', '@codeBillingChargeKind', true)}"/>						
        				<mx:AdvancedDataGridColumn headerText="Price Category" dataField="@category" editable="false" width="18" wordWrap="true" itemRenderer="views.renderers.BillingADGItemRenderer"/>
        				<mx:AdvancedDataGridColumn headerText="Description" dataField="@description" editable="true" width="18" wordWrap="true" itemRenderer="views.renderers.BillingADGItemRenderer"/>
						<mx:AdvancedDataGridColumn  id = "cDate"  
											headerText="Complete Date"
											dataField="@completeDate"
											width="11" 
											itemEditor="views.renderers.CompleteDateFieldEditor"
											itemRenderer="views.renderers.BillingADGItemRenderer" 
											rendererIsEditor="false" 
											labelFunction="getCompleteDateString"
											editorDataField="selectedDate"/>													
        				<mx:AdvancedDataGridColumn headerText="Notes" dataField="@notes" editable="true" width="12" wordWrap="true" itemRenderer="views.renderers.BillingADGItemRenderer"/>
        				<mx:AdvancedDataGridColumn headerText="Unit price" dataField="@unitPrice"  textAlign="right" editable="true" width="8" wordWrap="false" itemRenderer="views.renderers.BillingADGItemRenderer"/>
        				<mx:AdvancedDataGridColumn headerText="Qty" dataField="@qty" editable="true" textAlign="right" width="5" wordWrap="false" itemRenderer="views.renderers.BillingADGItemRenderer"/>
        				<mx:AdvancedDataGridColumn headerText="Total price" dataField="@invoicePrice" textAlign="right" width="11" editable="false" wordWrap="false"
						  editorDataField="text"
						  rendererIsEditor="false"
						  itemRenderer="views.renderers.LabelInvoicePrice" />
        				<mx:AdvancedDataGridColumn headerText="Status" dataField="@codeBillingStatus" editable="true" width="9" wordWrap="false"
        			      editorDataField="value"  
        				  rendererIsEditor="false"
						  itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingStatus').DictionaryEntry,'@display', '@value', '@codeBillingStatus')}"                              
						  itemEditor="{ComboBoxBillingStatus.create('@codeBillingStatus')}"/>                 
					</util:columns>
        			 
        		</util:AdvancedDataGridLargeDataSet> 
				
				<mx:ControlBar width="100%">
				
				      <mx:HBox width="100%" horizontalAlign="right" horizontalGap="0" verticalAlign="middle">
				        <mx:HBox width="100%" horizontalGap="0">
				        	<mx:LinkButton  label="Reassign" disabledIcon="@Embed(source='../../assets/account_disable.png')" icon="@Embed(source='../../assets/account.png')" toolTip="Reassign charges to another account"  textDecoration="underline" click="showReassignAccountView()" visible="true">
								<mx:enabled>{(billingItemGrid.selectedItem != null &amp;&amp; billingItemGrid.selectedItem.name() == 'Request' &amp;&amp; billingItemGrid.selectedItem.@codeRequestCategory != parentApplication.TYPE_DISK_USAGE) || (this.requestTree.selectedItem != null &amp;&amp; this.requestTree.selectedItem.name() == 'Request' &amp;&amp; requestTree.selectedItem.@codeRequestCategory != parentApplication.TYPE_DISK_USAGE) ? true : false}</mx:enabled>
				        	</mx:LinkButton> 
				        	<mx:LinkButton  label="Split" disabledIcon="@Embed(source='../../assets/account_split_disable.png')" icon="@Embed(source='../../assets/account_split.png')" toolTip="Split charges into multiple accounts"  textDecoration="underline" click="showSplitAccountsView()" visible="true">
								<mx:enabled>{(billingItemGrid.selectedItem != null &amp;&amp; billingItemGrid.selectedItem.name() == 'Request' &amp;&amp; billingItemGrid.selectedItem.@codeRequestCategory != parentApplication.TYPE_DISK_USAGE) || (this.requestTree.selectedItem != null &amp;&amp; this.requestTree.selectedItem.name() == 'Request' &amp;&amp; requestTree.selectedItem.@codeRequestCategory != parentApplication.TYPE_DISK_USAGE) ? true : false}</mx:enabled>
							</mx:LinkButton> 
				        	<mx:LinkButton id="removeBillingItemButton" label="Remove" disabledIcon="@Embed(source='../../assets/delete_disable.png')" icon="@Embed(source='../../assets/delete.png')" toolTip="Remove billing item"  textDecoration="underline" click="removeBillingItem()" enabled="{billingItemGrid.selectedItem != null}"/>
				        </mx:HBox>
					    <mx:Spacer width="100%"/>
				        <util:DirtyNote id="dirty" />
				      	<mx:Button id="saveButton" label="Save" click="validateAndSave()"
				             	icon="@Embed('../../assets/action_save.gif')">
				        </mx:Button>        	
				      </mx:HBox>
				 </mx:ControlBar>

        	</mx:VBox>
        </mx:HDividedBox>
  </mx:VBox>
  
	

</mx:Canvas>