<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:renderers="views.renderers.*"
				layout="vertical"
				width="450" height="338" showCloseButton="true" creationComplete="centerMe()"
				paddingLeft="4" paddingRight="4" paddingTop="4" close="cancel()" paddingBottom="4">
	
	<mx:HTTPService  
		id="getLab" 
		url="GetLab.gx" 
		destination="getLab" 
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetLab(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get group', event)"
		method="POST"
		useProxy="false">
		<mx:request>
			<idLab>{labCombo.selectedItem.@idLab}</idLab>
		</mx:request>
	</mx:HTTPService>
	
	<mx:Script>
		
		<![CDATA[
			import hci.flex.controls.CheckBox;
			
			import mx.collections.Sort;
			import mx.collections.XMLListCollection;
			import mx.events.ListEvent;
			import mx.managers.FocusManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import views.renderers.CheckBoxRenderer;
			
			
			[Bindable]
			public var options:XMLListCollection;
			
			[Bindable]
			public var allOptionsMaster:XMLListCollection = null;
			
			[Bindable]
			public var allowMultipleChoice:Boolean;
			
			public static var DISPLAY_DELIM:String = "      ";
			
			private var coreFacility:Object = null;
			
			public var opener:Object;
			
			private var userSort:Sort;
			
			private var usersToAddToMasterList:XMLListCollection = new XMLListCollection();
			
			public function initializeData(title:String, value:String, allOptions:XMLList, coreFacility:Object = null, allOptionsMaster:XMLListCollection = null, allowMultipleChoice:Boolean = true):void {
				this.title = title;
				this.allowMultipleChoice = allowMultipleChoice;
				this.coreFacility = coreFacility;
				this.allOptionsMaster = allOptionsMaster;
				
				filteredLabs.refresh();
				
				var values:Array = new Array();
				if (value.indexOf(DISPLAY_DELIM) > -1) {
					values = value.split(DISPLAY_DELIM);					
				} else {
					values = value.split(",");
				} 
				var idx:Object = null;
				
				options = new XMLListCollection();
				var option:XML = null;
				for each(option in allOptions) {
					var theOption:XML = option.copy();
					var isSelected:Boolean = false;
					if (values != null) {
						for (idx in values) {
							if (values[idx] != null && theOption.@value == values[idx]) {
								isSelected = true;
								break;
							}
						}
					}
					theOption.@isSelected = isSelected ? "Y" : "N";
					options.addItem(theOption);
				}
			}
			
			
			private function save():void{
				var option:XML = null;
				var optionsString:String = "";
				for each(option in options) {
					if (option.@isSelected == "Y") {
						if (optionsString.length > 0) {
							optionsString += ",";
						}
						optionsString += option.@value;
					}
				}
				if (allOptionsMaster != null && usersToAddToMasterList.length > 0) {
					for each (var newOption:XML in usersToAddToMasterList) {
						allOptionsMaster.addItem(newOption);
					}
				}
				(opener as views.renderers.MultiselectRendererCommonInterface).updateDP(optionsString);
				cancel();
			}
			
			private function cancel():void{
				PopUpManager.removePopUp(this);
				returnFocus();
			}
			
			private function returnFocus():void{
				opener.setFocus();
				
			}
			
			private function centerMe():void{
				PopUpManager.centerPopUp(this);
				checkboxGrid.setFocus();
			}
			
			private function toggleCheck(event:ListEvent):void {
				if (event.columnIndex == 0) {
					return;
				}
				
				var newSelected:String = "N";
				if (checkboxGrid.selectedItem.@isSelected == "Y") {
					newSelected = "N";
				} else {
					
					newSelected = "Y";
				}
				
				if (!this.allowMultipleChoice) {
					for each(var o:Object in options) {
						o.@isSelected = 'N';
					}
				}
				
				checkboxGrid.selectedItem.@isSelected = newSelected;
			}
			
			private function selectAll(objects:XMLListCollection):void {
				for each(var o:Object in objects) {
					if (!o.hasOwnProperty('@isActive') || o.@isActive == 'Y') {
						o.@isSelected = 'Y';
					}
				}
			}
			private function unselectAll(objects:XMLListCollection):void {
				for each(var o:Object in objects) {
					o.@isSelected = 'N';
				}
			}
			
			private function switchView(index:int):void {
				theViews.selectedIndex = index;
			}
			
			private function addUser():void {
				if (theViews.selectedIndex == 1 && labCombo.selectedItem != null && userCombo.selectedItem != null) {
					var newUser:XML = (userCombo.selectedItem as XML).copy();
					newUser.@isSelected = 'Y';
					newUser.@value = newUser.@idAppUser;
					newUser.@display = newUser.@displayNameXMLSafe;

					if (!updateUserAlreadyInOptions(newUser)) {
						updateList();
						options.addItem(newUser);
						usersToAddToMasterList.addItem(newUser);
					}
					
					labCombo.selectedIndex = -1;
					labCombo.selectedItem = null;
					userCombo.selectedIndex = -1;
					userCombo.selectedItem = null;
					filteredUsers = new XMLListCollection();
					
					switchView(0);
				}
			}
			
			private function updateUserAlreadyInOptions(candidate:XML):Boolean {
				var foundAndUpdated:Boolean = false;
				
				for each (var option:XML in options) {
					if (option.@idAppUser == candidate.@idAppUser) {
						option.@isSelected = 'Y';
						foundAndUpdated = true;
						break;
					}
				}
				
				return foundAndUpdated;
			}
			
			private function updateList():void {
				var oneOptionAlreadySelected:Boolean = false;
				for each (var option:XML in options) {
					if (option.@isSelected == 'Y') {
						oneOptionAlreadySelected = true;
						break;
					}
				}
				
				if (!oneOptionAlreadySelected) {
					for each (var option2:XML in options) {
						option2.@isSelected = 'Y';
					}
				}
			}
			
			private function filterLabs(item:Object):Boolean {
				var keep:Boolean = false;
				
				if (coreFacility != null && coreFacility.hasOwnProperty("@idCoreFacility") && item != null && item.hasOwnProperty("coreFacilities")) {
					for each (var core:Object in item.coreFacilities..CoreFacility) {
						if (core.hasOwnProperty("@idCoreFacility") && coreFacility.@idCoreFacility == core.@idCoreFacility) {
							keep = true;
							break;
						}
					}
				}
				
				if (item.hasOwnProperty("@isActive") && item.@isActive != "Y") {
					keep = false;
				}
				
				return keep;
			}
			
			private function getMembersOfLab():void {
				if (labCombo.selectedItem != null && labCombo.selectedItem.@idLab != null) {
					getLab.send();				
				}
			}
			
			private function onGetLab(event:ResultEvent):void {			
				var lab:Object = getLab.lastResult..Lab.(@idLab == labCombo.selectedItem.@idLab);
				
				filteredUsers = new XMLListCollection(lab.members.AppUser);
				for each (var mgr:Object in lab.managers.AppUser) {
					if (!filteredUsers.contains(mgr)) {
						filteredUsers.addItem(mgr);				
					}
				}
				
				userSort = new Sort();
				userSort.compareFunction = sortAppUsers;
				filteredUsers.sort = userSort;
				filteredUsers.refresh();
			}
			
			private function sortAppUsers(obj1:Object, obj2:Object, fields:Array=null):int {
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var display1:String = obj1.@displayName;
					var display2:String = obj2.@displayName;
					
					if (display1 < display2) {
						return -1;
					} else if (display1 > display2) {
						return 1;
					} else {
						return 0;
					}
					
				}
			}
			
		]]>
		
	</mx:Script>
	
	<mx:XMLListCollection id="filteredLabs" source="{parentApplication.labList.source}" filterFunction="filterLabs" />
	<mx:XMLListCollection id="filteredUsers" />
	
	<mx:ViewStack id="theViews" width="100%" height="100%">
		
		<mx:VBox id="labUsersView" width="100%" height="100%">
			
			<mx:HBox id="selectAllStack" width="160" paddingBottom="0" paddingTop="0">
				<mx:HBox width="100%"  paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0" verticalAlign="middle">
					<mx:LinkButton label="Select all" styleName="formLinkButton" paddingLeft="0" click="selectAll(options)"  paddingTop="0" paddingRight="0" paddingBottom="0" visible="{this.allowMultipleChoice}"/>
				</mx:HBox>
				<mx:HBox width="100%" paddingBottom="0" paddingTop="0">
					<mx:LinkButton label="Unselect all" styleName="formLinkButton" paddingLeft="0" click="unselectAll(options)"  paddingTop="0" paddingBottom="0"/>
				</mx:HBox>			    	
			</mx:HBox>
			
			
			<mx:DataGrid id="checkboxGrid" width="100%" height="100%" dataProvider="{options}" fontSize="10" variableRowHeight="true" wordWrap="true"
						 horizontalScrollPolicy="auto" itemClick="toggleCheck(event)">
				<mx:columns>
					<mx:DataGridColumn headerText=" "  
									   id="checkBoxColumn"
									   width="25"    
									   editable="false"                       	
									   dataField="@isSelected" 
									   editorDataField="selected"
									   itemRenderer="{views.renderers.CheckBoxRenderer.create(null, this.allowMultipleChoice)}">			 
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="Option" wordWrap="true" dataField="@display" >
					</mx:DataGridColumn>
				</mx:columns>
			</mx:DataGrid>
			
			<mx:HBox horizontalAlign="left" width="100%" verticalAlign="top">
				<mx:LinkButton label="Add User from Another Lab" styleName="formLinkButton" paddingLeft="0" click="switchView(1)" paddingTop="0" paddingRight="0" paddingBottom="0" visible="true"/>
			</mx:HBox>
			
			<mx:HBox  horizontalAlign="left" width="100%" id="searchButtonView" verticalAlign="top">
				<mx:Button label="Update" click="save()">
				</mx:Button>
				<mx:Button label="Cancel"  click="cancel()">
				</mx:Button>
			</mx:HBox>
			
		</mx:VBox>
		
		<mx:VBox id="otherUsersView" width="100%" height="100%">
			
			<mx:HBox width="100%" horizontalAlign="left" verticalAlign="top">
				<mx:LinkButton label="Back" click="switchView(0)" icon="@Embed(source='../../assets/arrow_left.png')" />
			</mx:HBox>
			
			<mx:VBox width="100%" height="100%" horizontalAlign="center" verticalGap="10" backgroundColor="#FFFFFF" paddingTop="2" paddingBottom="2" >
				<mx:Spacer height="5" />
				<renderers:FilterComboBox id="labCombo" prompt="Select a Lab..." close="getMembersOfLab()" dataProvider="{filteredLabs}" labelField="@name" width="300" />
				<renderers:FilterComboBox id="userCombo" prompt="Select a User..." dataProvider="{filteredUsers}" labelField="@displayName" width="300" />
				<mx:Spacer height="100%" />
				<mx:Button label="Add User" click="addUser()" enabled="{labCombo.selectedItem != null &amp;&amp; userCombo.selectedItem != null}" />
				<mx:Spacer height="5" />
			</mx:VBox>
			
		</mx:VBox>
		
	</mx:ViewStack>
	
</mx:TitleWindow>
