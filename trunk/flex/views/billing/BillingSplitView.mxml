<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"  layout="vertical" title="{'Split Accounts for Experiment ' + request.@requestNumber}" 
	width="780" height="280" defaultButton="{saveButton}" xmlns:renderers="views.renderers.*"> 

    <mx:HTTPService             
    id="getLab" 
    url="GetLab.gx"
    destination="getLab" 
    resultFormat="e4x"
    result="onGetLab(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get group', event)"
    method="POST"
    useProxy="false">
      <mx:request>
        <idLab>{labCombo.selectedItem.@idLab}</idLab>
      </mx:request>
   </mx:HTTPService>
   
    <mx:HTTPService             
    id="splitBillingAccounts" 
    url="SplitBillingAccounts.gx"
    destination="splitBillingAccounts" 
    resultFormat="e4x"
    result="onSplitBillingAccounts(event)"
    fault="parentApplication.onFailHttpRequest('Failed to split billing accounts', event)"
    method="POST"
    useProxy="false">
   </mx:HTTPService>

<mx:Script>
	<![CDATA[
		import hci.flex.controls.Label;
		import hci.flex.controls.TextInput;
		
		import mx.collections.XMLListCollection;
		import mx.controls.AdvancedDataGrid;
		import mx.controls.Alert;
		import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
		import mx.controls.dataGridClasses.DataGridColumn;
		import mx.controls.dataGridClasses.DataGridItemRenderer;
		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;
		import mx.formatters.CurrencyFormatter;
		import mx.managers.PopUpManager;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		import mx.formatters.NumberFormatter;
		import mx.formatters.NumberBaseRoundType;
		
		import views.renderers.ComboBoxBillingAccount;
		import views.renderers.ComboBoxGroup;
		import views.util.GNomExStringUtil;
		
		
		[Bindable]
		public var idBillingPeriod:Object = null;
		
		[Bindable]
		public var totalPrice:String = null;
		
		[Bindable]
		public var invoicePrice:String = null;
		
		[Bindable]
		public var origSplitType:String = null;
		
		[Bindable]
		public var request:Object;
		
		[Bindable]
		public var labs:XMLListCollection;
		
		[Bindable]
		public var billingAccounts:XMLListCollection;

		[Bindable]
		public var billingAccountEntries:XMLListCollection;
		
		[Bindable]
		private var isComplete:Boolean = true;
		
		private var currencyFormatter:CurrencyFormatter = new CurrencyFormatter();
		private var percentageFormatter:NumberFormatter = new NumberFormatter();

		public function initializeData():void {
			currencyFormatter.currencySymbol = "$";
			currencyFormatter.precision = 2;
			currencyFormatter.useThousandsSeparator;
			
			percentageFormatter.precision = 1;
			percentageFormatter.rounding = NumberBaseRoundType.NEAREST;
			
			accountsGrid.dataProvider = billingAccountEntries;
			billingAccountEntries.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingBillingAccountChange);
			this.totalAmountLabel.text = totalPrice;
			this.totalInvoiceAmountLabel.text = invoicePrice;
			if (origSplitType == "$") {
				this.radioSplitDollar.selected = true;
				this.radioSplitPct.selected = false;
				splitTypeChange();
			}
			var tp:Number = Number(totalPrice.replace('$','').replace(',',''));
			var ip:Number = Number(invoicePrice.replace('$','').replace(',',''));
			if (tp != ip) {
				this.saveButton.enabled = false;
				this.percentageWarningLabel.visible = true;
			}
			
		}
		
		private function onGetLab(event:ResultEvent):void {			
			var lab:Object = getLab.lastResult..Lab;
			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory',request.@codeRequestCategory);
			if (this.showInactiveAccountsCheckBox.selected) {
				billingAccounts = new XMLListCollection(lab.billingAccounts.BillingAccount.(@isApproved == 'Y' && @idCoreFacility == requestCategory.@idCoreFacility));
			} else {
				billingAccounts = new XMLListCollection(lab.billingAccounts.BillingAccount.(@isApproved == 'Y' && @isActive == 'Y' && @idCoreFacility == requestCategory.@idCoreFacility));
			}
			var blankNode:XML = new XML("<BillingAccount idCoreFacility='' idLab='' labName='' idBillingAccount='' accountName=''/>");
			billingAccounts.addItemAt(blankNode, 0);	
			billingAccounts.filterFunction = filterBillingAccounts;
			billingAccounts.refresh();
			
			billingAccountCombo.dataProvider=billingAccounts;
			billingAccountCombo.dropdown.dataProvider = billingAccounts;
			billingAccountCombo.selectedIndex = 0;
		}
		private function filterBillingAccounts(item:Object):Boolean {
			var passCoreCheck:Boolean = false;
			if ( item.@idCoreFacility == "" ) {
				passCoreCheck = true;
			} else {
				passCoreCheck = parentApplication.isCoreFacilityIManage(item.@idCoreFacility);
			}
			
			if (passCoreCheck) {
				for each (var alreadyAddedBillingAccount:Object in billingAccountEntries) {
					if (alreadyAddedBillingAccount.@idBillingAccount == item.@idBillingAccount) {
						return false;
					}
				}
				return true;
			} else {
				return false;
			}
		}
		private function getLabName(item:Object,col:int):String
        {
        	return item.@labName; 
        }
		private function getBillingAccountName(item:Object,col:int):String
        {
        	return item.@accountNumberDisplay;
        }         
          
        private function addAccountEntry():void {   
        	var newNode:XML = new XML(   
    	   				 "<BillingAccount " + 
       			 	 	 " idBillingAccount='" + billingAccountCombo.selectedItem.@idBillingAccount + "'" +
       			 	 	 " accountName='" + GNomExStringUtil.makeXMLSafe(billingAccountCombo.selectedItem.@accountName) + "'" +
       			 	 	 " accountNumber='" + GNomExStringUtil.makeXMLSafe(billingAccountCombo.selectedItem.@accountNumber) + "'" +
       			 	 	 " accountNumberDisplay='" + GNomExStringUtil.makeXMLSafe(billingAccountCombo.selectedItem.@accountNumberDisplay) + "'" +
       			 	 	 " idLab='"  + labCombo.selectedItem.@idLab + "'" +
       			 	 	 " labName='" + GNomExStringUtil.makeXMLSafe(labCombo.selectedItem.@name) + "'" +
       			 	 	 " percentage=''" +
						 " invoicePrice='$0.00'" +
						 " totalPrice='" + totalPrice + "'" +
       			 	 	 "/>");
       	 	billingAccountEntries.addItem(newNode);
       	 	labCombo.selectedItem = null;
       	 	billingAccounts = new XMLListCollection();
       	 	billingAccountCombo.selectedItem = null;
			this.saveButton.enabled = false;
        }
        private function removeAccountEntry():void {
        	if (accountsGrid.selectedItem != null) {
        		billingAccountEntries.removeItemAt(billingAccountEntries.getItemIndex(accountsGrid.selectedItem));
				labCombo.selectedItem = null;
				billingAccounts = new XMLListCollection();
				billingAccountCombo.selectedItem = null;
        	}
        } 
        
        		
 		private function save():void {
 			var params:Object = new Object();
 			params.idBillingPeriod = idBillingPeriod;
			params.totalPrice = totalPrice;
			if (this.radioSplitPct.selected) {
				params.splitType = "%";
			} else {
				params.splitType = "$";
			}
 			params.accountXMLString = "<SplitAccountList>";
 			params.accountXMLString += "<Request idRequest='" + request.@idRequest + "'>";
 			params.accountXMLString += billingAccountEntries.toXMLString();
 			params.accountXMLString += "</Request>";
 			params.accountXMLString += "</SplitAccountList>";
 			splitBillingAccounts.send(params);
 		}
 		private function onSplitBillingAccounts(event:ResultEvent):void {		
 			if (splitBillingAccounts.lastResult.name() == "SUCCESS") {
 				parentApplication.navBillingView.refresh();
 				mx.managers.PopUpManager.removePopUp(this);		
 			} else {
 				Alert.show(splitBillingAccounts.lastResult.ERROR.@message, "Unable to split billing items");
 			}
		} 
		
		private function calculateTotals():void {
			billingAccountEntries.removeEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingBillingAccountChange);
			var totalPercentage:Number = 0;
			var totalInvoicePrice:Number = 0;
			var tp:String = totalPrice.replace("$", "").replace(",","");
			isComplete = true;
			if (this.radioSplitPct.selected) {
				for each(var item:Object in billingAccountEntries) {
					if (item.hasOwnProperty("@percentage") && item.@percentage != null && item.@percentage != "") {
						var percent:String = item.@percentage;
						percent = percent.replace("%", "");
						
						if (percent != "") {
							item.@percentage = percentageFormatter.format(percent) + "%";
						}
						
						totalPercentage += Number(percent);
						
						var ip:Number = Number(Number(percent) * Number(tp)) / 100.00;
						item.@invoicePrice = currencyFormatter.format(ip);
						
						totalInvoicePrice += Number(currencyFormatter.format(ip).replace("$", ""));
					} else {
						item.@invoicePrice = "$0.00";
					}
					var percentString:String = "";
					if (item.hasOwnProperty("@percentage") && item.@percentage != null) {
						percentString = item.@percentage;
					}
					percentString = percentString.replace("%", "");
					if (item.@idLab == "" || item.@idBillingAccount == "" || percentString == "" || Number(percentString) == 0) {
						isComplete = false;
					}
					if (totalPercentage.toFixed(1) == "100.0" && totalInvoicePrice == Number(tp)) {
						this.percentageWarningLabel.visible = false;
						this.saveButton.enabled = true;
					} else {
						this.percentageWarningLabel.visible = true;
						this.saveButton.enabled = false;
					}
				}
			} else {
				totalPercentage = 100.0;
				for each(var item2:Object in billingAccountEntries) {
					item2.@percentage = "100.0%";
					if (item2.@invoicePrice != null && item2.@invoicePrice != "") {
						var dollar:String = item2.@invoicePrice;
						dollar = dollar.replace("$", "").replace(",", "");
						totalInvoicePrice += Number(dollar);
					}
					if (item2.@idLab == "" || item2.@idBillingAccount == "" || item2.@invoicePrice == "" || Number(item2.@invoicePrice) == 0) {
						isComplete = false;
					}
				}
				if (totalInvoicePrice == Number(tp)) {
					this.percentageWarningLabel.visible = false;
					this.saveButton.enabled = true;
				} else {
					this.percentageWarningLabel.visible = true;
					this.saveButton.enabled = false;
				}
			}
			this.totalPercentageLabel.text = totalPercentage.toFixed(1) + "%";
			this.totalInvoiceAmountLabel.text = currencyFormatter.format(totalInvoicePrice);
			if (!isComplete) {
				this.saveButton.enabled = false;
			}
			billingAccountEntries.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingBillingAccountChange);
		}
		
		private function underlyingBillingAccountChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || 
			    event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets 
				return;
			}			
			this.calculateTotals();
		}  

		private function splitTypeChange():void {
			var col:DataGridColumn;
			var pctCol:DataGridColumn;
			var dolCol:DataGridColumn;
			for (var x:Number = 0; x < this.accountsGrid.columnCount; x++) {
				col = this.accountsGrid.columns[x];
				if (col.headerText == "%") {
					pctCol = col;
				}
				if (col.headerText == "$") {
					dolCol = col;
				}
			}
			if (this.radioSplitPct.selected) {
				dolCol.editable = false;
				pctCol.visible = true;
				pctCol.editable = true;
				this.totalPercentageLabel.visible = true;
				this.percentageWarningLabel.text = "Above percentages must be adjusted";
				// Figure out percentages from amounts
				billingAccountEntries.removeEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingBillingAccountChange);
				for each(var item2:Object in billingAccountEntries) {
					var dollar:String = item2.@invoicePrice;
					if (item2.@invoicePrice != null && item2.@invoicePrice != "") {
						dollar = dollar.replace("$", "").replace(",", "");
					} else {
						dollar = "0";
					}
					var tp:String = totalPrice.replace("$","").replace(",","");
					var rawPct:Number = Number(dollar) / Number(tp);
					var pct:String = (rawPct * 100).toFixed(1);
					item2.@percentage = pct + "%";
				}
				billingAccountEntries.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingBillingAccountChange);
			} else {
				dolCol.editable = true;
				pctCol.visible = false;
				pctCol.editable = false;
				this.totalPercentageLabel.visible = false;
				this.percentageWarningLabel.text = "Above amounts must be adjusted";
			}
			calculateTotals();
		}
	]]>
</mx:Script>

	<mx:VBox height="100%" width="100%" verticalGap="0">
		<mx:HBox verticalGap="0" width="100%" verticalAlign="top" horizontalGap="0" horizontalAlign="right">
			<mx:RadioButton label="Split By %" styleName="labelSmall" selected="true" id="radioSplitPct" paddingBottom="0" paddingLeft="4" paddingRight="0" paddingTop="0" textAlign="left" horizontalGap="0">
				<mx:click>{splitTypeChange()}</mx:click>
			</mx:RadioButton>
			<mx:RadioButton label="Split By $" styleName="labelSmall" id="radioSplitDollar" paddingLeft="4" paddingBottom="0" paddingRight="0" paddingTop="0" horizontalGap="0">
				<mx:click>{splitTypeChange()}</mx:click>
			</mx:RadioButton>
			<mx:HBox verticalGap="0" width="100%" verticalAlign="top" horizontalGap="0" horizontalAlign="right">
				<mx:Label text="Total Amount:"/>
				<mx:Label id="totalAmountLabel" text=""/>
			</mx:HBox>
		</mx:HBox>
		<mx:HBox verticalGap="0" width="100%" verticalAlign="top" horizontalGap="0">
			<mx:Label text="Split with:"/>
			<renderers:FilterComboBox dataProvider="{parentApplication.labList.source}" 
									  labelField="@name" 
									  prompt="Select a lab..."
									  width="160"
									  close="getLab.send()"
									  id="labCombo">
			</renderers:FilterComboBox>
			<mx:Label text="Account:" paddingLeft="4"/>
			<mx:VBox verticalGap="0" width="100%">
				<mx:ComboBox id="billingAccountCombo" width="345" labelField="@accountNumberDisplay" ></mx:ComboBox>
	            <mx:CheckBox id="showInactiveAccountsCheckBox"  click="getLab.send()" label="Show inactive accounts" selected="false" paddingTop="0"/>			
			</mx:VBox>
			<mx:LinkButton textDecoration="underline" label="Add" 
				enabled="{labCombo.selectedItem != null &amp;&amp; labCombo.selectedItem.@idLab != '' &amp;&amp; billingAccountCombo.selectedItem != null &amp;&amp; billingAccountCombo.selectedItem.@idBillingAccount != ''}"
				click="addAccountEntry()" 
				icon="@Embed(source='../../assets/add.png')" id="addAccountButton" toolTip="Add account"  paddingLeft="2" disabledIcon="@Embed(source='../../assets/add_disable.png')"/>
			<mx:LinkButton textDecoration="underline" label="Remove" click="removeAccountEntry()" icon="@Embed(source='../../assets/delete.png')" id="deleteAccountButton" toolTip="Remove account"  paddingLeft="8"/>
		</mx:HBox> 
		<mx:DataGrid id="accountsGrid" width="100%" height="100%"  
					 editable="true" allowMultipleSelection="false" 
					 itemEditEnd="{this.calculateTotals()}">
			<mx:columns>
				<mx:DataGridColumn headerText="Group" width="50" 
					dataField="@idLab" 
					editable="false"
					editorDataField="value" 
        			rendererIsEditor="true"
        			labelFunction="getLabName"
        			itemRenderer="{hci.flex.controls.Label.create('@idLab')}"/>        				
				<mx:DataGridColumn headerText="Billing Account" 
					width="130"  dataField="@idBillingAccount" 
					editable="false"
					dataTipFunction="getBillingAccountName"
					showDataTips="true" 
					editorDataField="value"  
        			labelFunction="getBillingAccountName"
        			rendererIsEditor="true"
        			itemRenderer="mx.controls.Label"/>        
				<mx:DataGridColumn headerText="%" width="23" dataField="@percentage" editable="true"
					editorDataField="text" 
        			rendererIsEditor="false"
					itemRenderer="{hci.flex.controls.Label.create('@percentage')}"
					itemEditor="{hci.flex.controls.TextInput.create('@percentage')}"/>        
				<mx:DataGridColumn headerText="$" width="30" dataField="@invoicePrice" editable="false"
								   editorDataField="text" 
								   rendererIsEditor="false"
								   itemRenderer="{hci.flex.controls.Label.create('@invoicePrice')}"
								   itemEditor="{hci.flex.controls.TextInput.create('@invoicePrice')}"/>        
			</mx:columns>
		</mx:DataGrid>
		<mx:HBox width="100%" horizontalAlign="right" verticalAlign="bottom" fontWeight="bold" color="#BF0F34">
			<mx:Label id="percentageWarningLabel" text="Above percentages must be adjusted" visible="false" fontWeight="normal" color="#AA082A"/>
			<mx:Label id="totalPercentageLabel" text="100.0%" color="#000000" paddingBottom="0" paddingRight="0"/>
			<mx:HBox width="90">
				<mx:Label id="totalInvoiceAmountLabel" text="$0.00" color="#000000"/>	
			</mx:HBox>
		</mx:HBox>
	</mx:VBox>
	<mx:ControlBar horizontalAlign="right">
		<mx:Button label="Save" id="saveButton" click="save()" icon="@Embed(source='../../assets/save.png')" disabledIcon="@Embed(source='../../assets/save_disable.png')"/>
		<mx:Button label="Cancel" click="{mx.managers.PopUpManager.removePopUp(this)}"/>
	</mx:ControlBar>
	
</mx:TitleWindow>