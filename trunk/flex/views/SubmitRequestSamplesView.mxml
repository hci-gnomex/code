<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	label="Samples" width="100%" height="100%"  enabled="false">
<mx:Script>
	<![CDATA[
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		
		public function addSample():void {
			var emptyNode:XML = null;
			if (parentDocument.isSolexaState()) {
				
				if (parentDocument.sampleSetupView.currentState == 'SolexaSetupPreppedState') {
					emptyNode = new XML("<Sample " +
				    " idSample='" + "Sample" + parentDocument.samples.length + "'" +
				    " name='' description='' " +
					" concentration='" + parentDocument.sampleSetupView.sampleConcentration.text + "'" +
					" totalVolume='" + parentDocument.sampleSetupView.totalVolume.text + "'" +
					" idNumberSequencingCycles='" + parentDocument.sampleSetupView.numberSequencingCyclesCombo.selectedItem.@value + "'" +				
					" idFlowCellType='" + parentDocument.sampleSetupView.flowCellTypeCombo.selectedItem.@value + "'" +				
					" numberSequencingLanes=''" +
					" codeConcentrationUnit='ng/ul'" + 
					" idSampleType='" + parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value + "'" +
					" isAlreadyPrepped = 'Y'" +
					" idSamplePrepMethod=''" +				
					" idGenomeBuildAlignTo='" + parentDocument.sampleSetupView.genomeBuildCombo.selectedItem.@value + "'" +				
					" alignNotes='" + parentDocument.sampleSetupView.alignNotes.text + "'" +				
					" samplePrepMethodUsed='" + parentDocument.sampleSetupView.samplePrepMethodText.text + "'" +				
					" idSolexaLibraryType='" + parentDocument.sampleSetupView.solexaLibraryTypeCombo.selectedItem.@value + "'" +				
					" isSizeSelected='" + (parentDocument.sampleSetupView.isSizeSelected.selected ? 'Y' : 'N') + "'" +				
					" fragmentSizeFrom='" + parentDocument.sampleSetupView.fragmentSizeFrom.text + "'" +				
					" fragmentSizeTo='" + parentDocument.sampleSetupView.fragmentSizeTo.text + "'" +				
					" idOrganism='"  + parentDocument.sampleSetupView.sampleOrganismCombo.selectedItem.@value + "'" +				
					" idSampleSource='"  + parentDocument.sampleSetupView.sampleSourceCombo.selectedItem.@value + "'" +				
					" treatment='"  + parentDocument.annotationView.treatmentTextInput.text + "'" +				
					"/>");
					
				} else {
					emptyNode = new XML("<Sample " +
				    " idSample='" + "Sample" + parentDocument.samples.length + "'" +
				    " name='' description='' " +
					" concentration='" + parentDocument.sampleSetupView.sampleConcentration.text + "'" +
					" totalVolume='" + parentDocument.sampleSetupView.totalVolume.text + "'" +
					" idNumberSequencingCycles='" + parentDocument.sampleSetupView.numberSequencingCyclesCombo.selectedItem.@value + "'" +				
					" idFlowCellType='" + parentDocument.sampleSetupView.flowCellTypeCombo.selectedItem.@value + "'" +				
					" numberSequencingLanes=''" +
					" codeConcentrationUnit='ng/ul'" + 
					" idSampleType='" + parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value + "'" +
					" idGenomeBuildAlignTo='" + parentDocument.sampleSetupView.genomeBuildCombo.selectedItem.@value + "'" +				
					" alignNotes='" + parentDocument.sampleSetupView.alignNotes.text + "'" +				
					" idSamplePrepMethod='" + parentDocument.sampleSetupView.samplePrepMethodCombo.selectedItem.@value + "'" +				
					" isAlreadyPrepped = 'N'" +
					" samplePrepMethodUsed=''" +				
					" idSolexaLibraryType=''" +				
					" isSizeSelected='N'" +				
					" fragmentSizeFrom=''" +				
					" fragmentSizeTo=''" +				
					" idOrganism='"  + parentDocument.sampleSetupView.sampleOrganismCombo.selectedItem.@value + "'" +				
					" idSampleSource='"  + parentDocument.sampleSetupView.sampleSourceCombo.selectedItem.@value + "'" +				
					" treatment='"  + parentDocument.annotationView.treatmentTextInput.text + "'" +				
					"/>");
					
				}
				
			}
			else if (parentDocument.setupView.requestTypeGroup.selectedValue == "QC") {
				emptyNode = new XML("<Sample " +
			    " idSample='" + "Sample" + parentDocument.samples.length + "'" +
			    " name='' description='' " +
				" concentration='" + parentDocument.sampleSetupView.sampleConcentration.text + "'" +
				" codeConcentrationUnit='ng/ul'" + 
				" codeBioanalyzerChipType='" + parentDocument.sampleSetupView.getSelectedCodeBioanalyzerChipType() + "'" +
				" idSampleType='" + parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value + "'" +
				" idSamplePrepMethod='" + parentDocument.sampleSetupView.samplePrepMethodCombo.selectedItem.@value + "'" +				
				" treatment='" + parentDocument.annotationView.treatmentTextInput.text + "'" +				
				"/>");
			
			} else {
				emptyNode = new XML("<Sample " +
			    " idSample='" + "Sample" + parentDocument.samples.length + "'" +
			    " name='' description='' " +
				" concentration='" + parentDocument.sampleSetupView.sampleConcentration.text + "'" +
				" codeConcentrationUnit='ng/ul'" + 
				" idSampleType='" + parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value + "'" +
				" idSamplePrepMethod='" + parentDocument.sampleSetupView.samplePrepMethodCombo.selectedItem.@value + "'" +				
				" idOrganism='"  + parentDocument.sampleSetupView.sampleOrganismCombo.selectedItem.@value + "'" +				
				" idSampleSource='"  + parentDocument.sampleSetupView.sampleSourceCombo.selectedItem.@value + "'" +				
				" treatment='"  + parentDocument.annotationView.treatmentTextInput.text + "'" +				
				"/>");
			}
			
			parentDocument.samples.addItem(emptyNode);
	        	
		}
		
		private function deleteSample():void {
			if (samplesGrid.selectedItems.length > 0) {
				for each(var sample:Object in samplesGrid.selectedItems) {					
					for each(var hyb:Object in parentDocument.hybs) {
						if (hyb.@idSampleChannel1 == sample.@idSample) {
							hyb.@idSampleChannel1 = '0';
						}
						if (hyb.@idSampleChannel2 == sample.@idSample) {
							hyb.@idSampleChannel2 = '0';
						}
					}

					parentDocument.samples.removeItemAt(parentDocument.samples.getItemIndex(sample));
					
				}
			}
			if (parentDocument.setupView.requestTypeGroup.selectedValue == "QC") {
				
			} else {
				parentDocument.hybsGrid.invalidateList();
				parentDocument.hybsGrid.invalidateDisplayList();
				
			}
		}
		
		private function copySample():void {
			if (samplesGrid.selectedIndex != -1) {
				for each(var i:int in samplesGrid.selectedIndices) {					
					var sampleToCopy:Object = parentDocument.samples[i];
					
					var emptyNode:XML = new XML("<Sample " +
					" idSample='" + "Sample" + parentDocument.samples.length + "'" +
					" name='" +  sampleToCopy.@name + "'" + 
					" description='" + sampleToCopy.@description + "'" + 
					" idSampleType='" + sampleToCopy.@idSampleType + "'" +
					" idSamplePrepMethod='" + sampleToCopy.@idSamplePrepMethod + "'" +				
					" samplePrepMethodUsed='" + sampleToCopy.@samplePrepMethodUsed + "'" +				
					" idSolexaLibraryType='" + sampleToCopy.@idSolexaLibraryType + "'" +				
					" isSizeSelected='" + sampleToCopy.@isSizeSelected + "'" +				
					" fragmentSizeFrom='" + sampleToCopy.@fragmentSizeFrom + "'" +				
					" fragmentSizeTo='" + sampleToCopy.@fragmentSizeTo + "'" +				
					" idOrganism='" + sampleToCopy.@idOrganism + "'" +				
					" idSampleSource='" + sampleToCopy.@idSampleSource + "'" +				
					" concentration='" + sampleToCopy.@concentration + "'" +				
					" treatment='" + sampleToCopy.@treatment + "'" +				
					" codeConcentrationUnit='" + sampleToCopy.@codeConcentrationUnit + "'" +				
					" codeBioanalyzerChipType='" + sampleToCopy.@codeBioanalyzerChipType + "'" +				
					" totalVolume='" + sampleToCopy.@totalVolume + "'" +
					" idGenomeBuildAlignTo='" + sampleToCopy.@idGenomeBuildAlignTo+ "'" +				
					" idNumberSequencingCycles='" + sampleToCopy.@idNumberSequencingCycles+ "'" +				
					" idFlowCellType='" + sampleToCopy.@idFlowCellType + "'" +				
					" numberSequencingLanes='" + sampleToCopy.@numberSequencingLanes + "'" +
					" AGE='" + sampleToCopy.@AGE + "'" +				
					" CELLLINE='" + sampleToCopy.@CELLLINE + "'" +				
					" CELLTYPE='" + sampleToCopy.@CELLTYPE + "'" +				
					" CLININFO='" + sampleToCopy.@CLININFO + "'" +				
					" COMPOUND='" + sampleToCopy.@COMPOUND + "'" +				
					" DISSTATE='" + sampleToCopy.@DISSTATE + "'" +				
					" DOSE='" + sampleToCopy.@DOSE + "'" +				
					" GENMOD='" + sampleToCopy.@GENMOD + "'" +				
					" GENOTYPE='" + sampleToCopy.@GENOTYPE + "'" +				
					" INDIV='" + sampleToCopy.@INDIV + "'" +				
					" GROWTHCOND='" + sampleToCopy.@GROWTHCOND + "'" +				
					" ORGPART='" + sampleToCopy.@ORGPART + "'" +				
					" OTHER='" + sampleToCopy.@OTHER + "'" +				
					" SEX='" + sampleToCopy.@SEX + "'" +				
					" TEMP='" + sampleToCopy.@TEMP + "'" +				
					" TIME='" + sampleToCopy.@TIME + "'" +				
					"/>");
			
					parentDocument.samples.addItem(emptyNode);
					
				}
			}
		}
       	public function initializeSamplesGrid():void {
        	if (parentDocument.requestToClone != null) {
        		return;
        	}
       		if (!parentDocument.sampleSetupView.checkSampleSetupCompleteness()) {
       			return;
       		}
        	
    		var numberOfSamplesToAdd:Number = new Number(parentDocument.sampleSetupView.numberOfSamples.text);
    		if(parentDocument.samples.length <= numberOfSamplesToAdd) {
    			numberOfSamplesToAdd = numberOfSamplesToAdd - parentDocument.samples.length;
    		} else {
    			numberOfSamplesToAdd = 0;
    		}
    		for(var x:int = 0; x < numberOfSamplesToAdd; x++) {
    			addSample();
    		}
        }
        
        
        
		
		
		public function promptToClearAllSamples():void {
			Alert.show("Remove all samples currently showing in list?",
						null, 
						(Alert.YES | Alert.NO), this, 
						onPromptToClearAllSamples);
			
		}
		
		private function onPromptToClearAllSamples(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	parentDocument.samples.removeAll();
            	checkSamplesCompleteness();
            }
        }		
        
        public function checkSamplesCompleteness():void {
        	var completeCount:int = 0;
        	for each(var sample:Object in parentDocument.samples) {
        		if (currentState == 'SolexaSamplesState') {
        			if( sample.@isAlreadyPrepped == 'N') {
		        		if (sample.@name != null && sample.@name != '' &&
		        			sample.@idSampleType != null && sample.@idSampleType != '' &&
		        			sample.@idSamplePrepMethod != null && sample.@idSamplePrepMethod != '' &&
		        			sample.@concentration != null && sample.@concentration != '' &&
		        			sample.@idSampleSource != null && sample.@idSampleSource != '' &&
		        			sample.@idOrganism != null && sample.@idOrganism != '' &&
		        			sample.@totalVolume != null && sample.@totalVolume != '' &&
		        			sample.@numberSequencingLanes != null && sample.@numberSequencingLanes != '' &&
		        			sample.@idFlowCellType != null && sample.@idFlowCellType != '' &&
		        			sample.@idNumberSequencingReactions != null && sample.@idNumberSequencingReactions != '') {
		        			completeCount++;
		        		}       				
		        	} else {
		        			if (sample.@name != null && sample.@name != '' &&
		        			sample.@idSampleType != null && sample.@idSampleType != '' &&
		        			sample.@samplePrepMethodUsed != null && sample.@samplePrepMethodUsed != '' &&
		        			sample.@idSolexaLibraryType != null && sample.@idSolexaLibraryType != '' &&
		        			sample.@fragmentSizeFrom != null && sample.@fragmentSizeFrom != '' &&
		        			sample.@fragmentSizeTo != null && sample.@fragmentSizeTo != '' &&
		        			sample.@concentration != null && sample.@concentration != '' &&
		        			sample.@idSampleSource != null && sample.@idSampleSource != '' &&
		        			sample.@idOrganism != null && sample.@idOrganism != '' &&
		        			sample.@totalVolume != null && sample.@totalVolume != '' &&
		        			sample.@numberSequencingLanes != null && sample.@numberSequencingLanes != '' &&
		        			sample.@idFlowCellType != null && sample.@idFlowCellType != '' &&
		        			sample.@idNumberSequencingReactions != null && sample.@idNumberSequencingReactions != '') {
		        			completeCount++;       				
		        			
		        		}
        				
        			}
        			
        		}
        		else if (currentState == 'QCSamplesState') {
	        		if (sample.@name != null && sample.@name != '' &&
	        			sample.@idSampleType != null && sample.@idSampleType != '' &&
	        			sample.@idSamplePrepMethod != null && sample.@idSamplePrepMethod != '' &&
	        			sample.@concentration != null && sample.@concentration != '' &&
	        			sample.@codeConcentrationUnit != null && sample.@codeConcentrationUnit != '' &&
	        			sample.@codeBioanalyzerChipType != null && sample.@codeBioanalyzerChipType != '') {
	        			completeCount++;       				
	        		}
        		} else {
	        		if (sample.@name != null && sample.@name != '' &&
	        			sample.@idSampleType != null && sample.@idSampleType != '' &&
	        			sample.@idSamplePrepMethod != null && sample.@idSamplePrepMethod != '' &&
	        			sample.@concentration != null && sample.@concentration != '' &&
	        			sample.@idSampleSource != null && sample.@idSampleSource != '' &&
	        			sample.@idOrganism != null && sample.@idOrganism != '') {
	        			completeCount++;       				
	        		}
        			
        		}
        	}
        	
        	
        	var isComplete:Boolean = false;
        	if (parentDocument.samples.length > 0 && completeCount == parentDocument.samples.length) {
        		isComplete = true;
        	} else if (parentDocument.request != null && parentDocument.request.@idRequest != '0') {
        		isComplete = true;
        	}
        	
        	// If this is a Solexa request and the sample setup is complete,
        	// create the sequencing lanes based on the number of lanes 
        	// entered for each sample.
        	if (isComplete && currentState == 'SolexaSamplesState' && parentDocument.currentState != 'SolexaEditState') {
        		for each (var theSample:Object in parentDocument.samples) {
        			var numberLanesForSample:int = parentDocument.getLaneCount(theSample);
        			if (numberLanesForSample < theSample.@numberSequencingLanes) {
	        			var numberLanesToAdd:int = theSample.@numberSequencingLanes - numberLanesForSample;
	        			for (var x:Number = 0; x < numberLanesToAdd; x++) {
	        				addSequencingLaneForSample(theSample);
	        			}
        			} else if (numberLanesForSample > theSample.@numberSequencingLanes) {
        				var numberLanesToRemove:int = numberLanesForSample - theSample.@numberSequencingLanes;
						for each(var lane:Object in parentDocument.getLanes(theSample, numberLanesToRemove)) {
							parentDocument.lanes.removeItemAt(parentDocument.lanes.getItemIndex(lane));
						}
        			}
        		}
        	}

        	
        	
			if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
        		parentDocument.hybSetupView.enabled = isComplete;
    		} if (parentDocument.isSolexaEditState()) {
    			parentDocument.lanesView.enabled = isComplete;
    		} else {
    			if (parentDocument.theTab.contains(parentDocument.confirmView)) {
	    			parentDocument.confirmView.enabled = isComplete;
    			}
    		}        	
    		parentDocument.enableNextButtons();
    		

			callLater(postSamplesCompleteness, [isComplete]);
        	
        
        }
        
                
        private function postSamplesCompleteness(isComplete:Boolean):void {
	    		
	    	if (!isComplete) {
	        	if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
		        	parentDocument.hybSetupView.enabled = false;
	        	} 
	
	        	if (parentDocument.theTab.contains(parentDocument.hybsView)) {
		        	parentDocument.hybsView.enabled = false;
	        	} 
	        	
	        	if (parentDocument.isSolexaEditState()) {
	    			parentDocument.lanesView.enabled = false;
	        	}
	
	        	parentDocument.confirmView.enabled = false;
    		} else {
    			if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
	    			parentDocument.hybSetupView.checkHybSetupCompleteness();    				
    			} 
    		}
        	
        }
		
		private function addSequencingLaneForSample(sample:Object):void {
			var emptyNode:XML = new XML("<SequenceLane " +
			    " idSequenceLane='" + "SequenceLane" + parentDocument.lanes.length + "'" +
			    " notes='' " + 
				" idFlowCellType='" + sample.@idFlowCellType + "'" +
				" idNumberSequencingCycles='" + sample.@idNumberSequencingCycles + "'" +
				" idSample='" + sample.@idSample + "'" +
				" idGenomeBuildAlignTo='" + sample.@idGenomeBuildAlignTo + "'" +
				" alignNotes='" + sample.@alignNotes + "'" +
				"/>");
			
			parentDocument.lanes.addItem(emptyNode);
		}
		
		public function propagateSamplePrepMethod(idSamplePrepMethod:String):void {
			if (currentState == 'SolexaSamplesState') {
				for each (var sample:Object in parentDocument.samples) {
					sample.@idSamplePrepMethod = idSamplePrepMethod;
				}
			}
		}
		public function propagateOrganism(idOrganism:String):void {
			if (currentState == 'SolexaSamplesState') {
				for each (var sample:Object in parentDocument.samples) {
					sample.@idOrganism = idOrganism;
				}
			}
		}
 		public function propagateSolexaLibraryType(idSolexaLibraryType:String):void {
			if (currentState == 'SolexaSamplesState') {
				for each (var sample:Object in parentDocument.samples) {
					sample.@idSolexaLibraryType = idSolexaLibraryType;
				}
			}
		}       
		public function propagateFragmentSizeFrom(fragmentSizeFrom:String):void {
			if (currentState == 'SolexaSamplesState') {
				for each (var sample:Object in parentDocument.samples) {
					sample.@fragmentSizeFrom = fragmentSizeFrom;
				}
			}
		}		
		public function propagateFragmentSizeTo(fragmentSizeTo:String):void {
			if (currentState == 'SolexaSamplesState') {
				for each (var sample:Object in parentDocument.samples) {
					sample.@fragmentSizeTo = fragmentSizeTo;
				}
			}
		}		
        public function showHideColumns():void {
        	if (showQCFieldsCheckBox.selected) {
        		numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible = false;
				idFlowCellTypeCol.visible = false; 
				totalVolumeCol.visible = false;
				concentrationUnitColumn.visible = false;
				sampleSourceColumn.visible = false;
				sampleOrganismColumn.visible = false;
				chipTypeColumn.visible = false; 
				samplePrepMethodCol.visible = false;
        	} else if (currentState == 'SolexaSamplesState' ) {
				showQCFieldsCheckBox.visible = false;
        		numberSequencingLanesCol.visible = !parentDocument.isEditState();
				numberSequencingCyclesCol.visible = !parentDocument.isEditState();
				idFlowCellTypeCol.visible = !parentDocument.isEditState(); 
				totalVolumeCol.visible = true;
				concentrationUnitColumn.visible = false;
				sampleOrganismColumn.visible = true;
				sampleSourceColumn.visible = true;
				chipTypeColumn.visible = false; 
				if (parentDocument.sampleSetupView.currentState == 'SolexaSetupPreppedState' || alreadyPreppedCheckBox.selected) {
					samplePrepMethodCol.visible = false;
					samplePrepMethodUsedCol.visible = true;
					solexaLibraryTypeCol.visible = true;
					fragmentSizeFromCol.visible = true;
					fragmentSizeToCol.visible = true;
				} else {
					samplePrepMethodCol.visible = true;
					samplePrepMethodUsedCol.visible = false;
					solexaLibraryTypeCol.visible = false;
					fragmentSizeFromCol.visible = false;
					fragmentSizeToCol.visible = false;
				}
			} else if (currentState == 'QCSamplesState') {
				showQCFieldsCheckBox.visible = true;
        		numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible = false;
				idFlowCellTypeCol.visible = false; 
				totalVolumeCol.visible = false;
				concentrationUnitColumn.visible = true;
				sampleSourceColumn.visible = false;
				sampleOrganismColumn.visible = false;
				samplePrepMethodCol.visible = true;
				chipTypeColumn.visible = true; 
				samplePrepMethodUsedCol.visible = false;
				solexaLibraryTypeCol.visible = false;
				fragmentSizeFromCol.visible = false;
				fragmentSizeToCol.visible = false;
			} else {
				showQCFieldsCheckBox.visible = true;
        		numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible = false;
				idFlowCellTypeCol.visible = false; 
				totalVolumeCol.visible = false;
				concentrationUnitColumn.visible = false;
				sampleSourceColumn.visible = true;
				sampleOrganismColumn.visible = true;
				samplePrepMethodCol.visible = true;
				chipTypeColumn.visible = false; 
				samplePrepMethodUsedCol.visible = false;
				solexaLibraryTypeCol.visible = false;
				fragmentSizeFromCol.visible = false;
				fragmentSizeToCol.visible = false;
			}
			
			if (!parentDocument.isEditState()) {
				parentDocument.confirmView.showHideColumns();				
			}
  						
        }
        
	]]>
</mx:Script>	
	<mx:VBox width="100%" height="100%">
			<mx:HBox width="100%">
				<mx:Label text="Samples  (fields in pink are required.)"/>
			</mx:HBox>
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:HBox>
					<mx:Button label="Add" click="addSample();checkSamplesCompleteness()" icon="@Embed('../assets/table_row_insert.png')" id="addSampleButton"/>
					<mx:Button label="Copy" click="copySample();checkSamplesCompleteness()" icon="@Embed('../assets/table_multiple.png')" id="copySampleButton"/>
					<mx:Button label="Delete" click="deleteSample();checkSamplesCompleteness();parentDocument.checkHybsCompleteness()" icon="@Embed('../assets/table_row_delete.png')" id="deleteSampleButton"/>
				</mx:HBox>
				<mx:Button label="Clear all" click="promptToClearAllSamples();deleteSample();" icon="@Embed('../assets/folder_delete.png')" id="clearSamplesButton"/>
				<mx:HBox width="100%" horizontalAlign="left" paddingLeft="20" id="checkBoxContainer">
					<mx:CheckBox id="showQCFieldsCheckBox" label="Show QC columns"  click="showHideColumns()">
					</mx:CheckBox>							
				</mx:HBox>
				<mx:HBox horizontalAlign="right" width="100%">
				</mx:HBox>
					
			</mx:HBox>
			<mx:DataGrid width="100%" height="100%" id="samplesGrid"  editable="true" dataProvider="{parentDocument.samples}" allowMultipleSelection="true" itemFocusOut="checkSamplesCompleteness()" selectionColor="#FFFFB9" rollOverColor="#C0C0C0" horizontalScrollPolicy="auto">
				<mx:columns>
  			        <mx:DataGridColumn editable="false" headerText=""  width="25" resizable="false" labelFunction="parentDocument.getSamplesGridRowNumber"/>
					<mx:DataGridColumn headerText="Sample Name" width="100" editorDataField="text" dataField="@name" itemRenderer="views.renderers.LabelSampleName"  itemEditor="views.renderers.TextInputSampleName" rendererIsEditor="false">
					</mx:DataGridColumn>
	 				<mx:DataGridColumn headerText="Conc." visible="{!showQCFieldsCheckBox.selected}"  width="60" dataField="@concentration" editorDataField="text"  itemRenderer="views.renderers.LabelConcentration"  itemEditor="views.renderers.TextInputConcentration" rendererIsEditor="false"/>
	                <mx:DataGridColumn id="concentrationUnitColumn" visible="{!showQCFieldsCheckBox.selected}" width="74" headerText="Unit" dataField="@codeConcentrationUnit" 
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemRenderer="views.renderers.LabelConcentrationUnit" itemEditor="views.renderers.ComboBoxConcentrationUnit" labelFunction="parentApplication.lookupConcentrationUnit" />
	 				<mx:DataGridColumn headerText="Vol" id="totalVolumeCol" visible="{currentState == 'SolexaSamplesState'}"  width="40" dataField="@totalVolume"/>
	 				<mx:DataGridColumn headerText="Flow Cell Type" id="idFlowCellTypeCol" visible="{currentState == 'SolexaSamplesState'}"  editable="false" width="150" labelFunction="parentApplication.lookupFlowCellType" dataField="@idFlowCellType"/>
	 				<mx:DataGridColumn headerText="# Seq Cycles" id="numberSequencingCyclesCol" visible="{currentState == 'SolexaSamplesState'}"  width="84" dataField="@idNumberSequencingCycles" labelFunction="parentApplication.lookupNumberSequencingCycles"
	 					 rendererIsEditor="false" editorDataField="value" itemRenderer="views.renderers.LabelNumberSequencingCycles" itemEditor="views.renderers.ComboBoxNumberSequencingCycles"/>
					<mx:DataGridColumn id="numberSequencingLanesCol" headerText="# Seq Lanes" width="84" editorDataField="text" dataField="@numberSequencingLanes" itemRenderer="views.renderers.LabelNumberSequencingLanes"  itemEditor="views.renderers.TextInputNumberSequencingLanes" rendererIsEditor="false">
					</mx:DataGridColumn>
	                <mx:DataGridColumn id="samplePrepMethodCol" headerText="Sample Prep Method" visible="{!showQCFieldsCheckBox.selected}"  width="180" dataField="@idSamplePrepMethod" 
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemRenderer="views.renderers.LabelSamplePrepMethod" labelFunction="parentApplication.lookupSamplePrepMethod" itemEditor="views.renderers.ComboBoxSamplePrepMethod" />
	 				<mx:DataGridColumn headerText="Prep Method Used" id="samplePrepMethodUsedCol" visible="{currentState == 'SolexaSamplesState'}"  editable="true" width="120" dataField="@samplePrepMethodUsed"/>
					<mx:DataGridColumn id="solexaLibraryTypeCol" headerText="Lib Type" width="84" editorDataField="value" dataField="@idSolexaLibraryType" itemRenderer="views.renderers.LabelSolexaLibraryType"  itemEditor="views.renderers.ComboBoxSolexaLibraryType" labelFunction="parentApplication.lookupSolexaLibraryType"  rendererIsEditor="false">
					</mx:DataGridColumn>
					<mx:DataGridColumn id="fragmentSizeFromCol" headerText="Size From" width="54" editorDataField="text" dataField="@fragmentSizeFrom" itemRenderer="views.renderers.LabelFragmentSizeFrom"  itemEditor="views.renderers.TextInputFragmentSizeFrom" rendererIsEditor="false">
					</mx:DataGridColumn>
					<mx:DataGridColumn id="fragmentSizeToCol" headerText="Size To" width="54" editorDataField="text" dataField="@fragmentSizeTo" itemRenderer="views.renderers.LabelFragmentSizeTo"  itemEditor="views.renderers.TextInputFragmentSizeTo" rendererIsEditor="false">
					</mx:DataGridColumn>
	                 <mx:DataGridColumn headerText="Sample Type" visible="{!showQCFieldsCheckBox.selected}" width="120"   dataField="@idSampleType" 
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemRenderer="views.renderers.LabelSampleType" itemEditor="views.renderers.ComboBoxSampleType" labelFunction="parentApplication.lookupSampleTypeName" />
	                <mx:DataGridColumn id="sampleOrganismColumn" visible="{!showQCFieldsCheckBox.selected}" width="110" headerText="Organism"  dataField="@idOrganism" 
	                    editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemRenderer="views.renderers.LabelOrganism" itemEditor="views.renderers.ComboBoxOrganism" labelFunction="parentApplication.lookupOrganism" />
	                <mx:DataGridColumn headerText="Sample Source" visible="{!showQCFieldsCheckBox.selected}" width="95" dataField="@idSampleSource" 
	                   editorDataField="value" id="sampleSourceColumn" sortable="false" editable="true" rendererIsEditor="false" itemRenderer="views.renderers.LabelSampleSource" itemEditor="views.renderers.ComboBoxSampleSource" labelFunction="parentApplication.lookupSampleSource" />
	                <mx:DataGridColumn id="chipTypeColumn" visible="{showQCFieldsCheckBox.selected || parentDocument.request.@codeRequestCategory != 'QC' ? false : true}" headerText="Chip Type" width="150" dataField="@codeBioanalyzerChipType" 
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemRenderer="mx.controls.Label" labelFunction="parentApplication.lookupChipType" itemEditor="views.renderers.ComboBoxChipType" />

					<mx:DataGridColumn visible="{showQCFieldsCheckBox.selected}" editable="{parentApplication.hasPermission('canWriteAnyObject')}" headerText="QC Conc." width="70" dataField="@qualCalcConcentration"/>
					<mx:DataGridColumn visible="{showQCFieldsCheckBox.selected}" editable="{parentApplication.hasPermission('canWriteAnyObject')}" headerText="QC 260/230" width="80" dataField="@qual260nmTo230nmRatio"/>
					<mx:DataGridColumn visible="{showQCFieldsCheckBox.selected}" editable="{parentApplication.hasPermission('canWriteAnyObject')}" headerText="QC 260/280" width="80" dataField="@qual260nmTo280nmRatio"/>
					<mx:DataGridColumn visible="{showQCFieldsCheckBox.selected}" editable="{parentApplication.hasPermission('canWriteAnyObject')}" headerText="QC 28s/18s" width="80" dataField="@qual28sTo18sRibosomalRatio"/>
					<mx:DataGridColumn visible="{showQCFieldsCheckBox.selected}" editable="{parentApplication.hasPermission('canWriteAnyObject')}" headerText="QC RIN" width="70" dataField="@qualRINNumber"/>
					<mx:DataGridColumn visible="{showQCFieldsCheckBox.selected}" headerText="QC Status" width="90" dataField="@qualStatus"
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.ComboBoxQCStatus" itemRenderer="mx.controls.Label" />
	                   				                   
					<mx:DataGridColumn id="AGE" headerText="Age" dataField="@AGE" editable="true" visible="false"/>
					<mx:DataGridColumn id="CELLLINE" headerText="Cell line" dataField="@CELLLINE" editable="true" visible="false"/>
					<mx:DataGridColumn id="CELLTYPE" headerText="Cell Type" dataField="@CELLTYPE" editable="true" visible="false"/>
					<mx:DataGridColumn id="CLININFO" headerText="Clinical Info" dataField="@CLININFO" editable="true" visible="false"/>
					<mx:DataGridColumn id="COMPOUND" headerText="Compound" dataField="@COMPOUND" editable="true" visible="false"/>
					<mx:DataGridColumn id="DISSTATE" headerText="Disease State" dataField="@DISSTATE" editable="true" visible="false"/>
					<mx:DataGridColumn id="DOSE" headerText="Dose" dataField="@DOSE" editable="true" visible="false"/>
					<mx:DataGridColumn id="GENMOD" headerText="Genetic Modification" dataField="@GENMOD" editable="true" visible="false"/>
					<mx:DataGridColumn id="GENOTYPE" headerText="Genotype" dataField="@GENOTYPE" editable="true" visible="false"/>
					<mx:DataGridColumn id="GROWTHCOND" headerText="Growth Conditions" dataField="@GROWTHCOND" editable="true" visible="false"/>
					<mx:DataGridColumn id="INDIV" headerText="Individual" dataField="@INDIV" editable="true" visible="false"/>
					<mx:DataGridColumn id="ORGPART" headerText="Organ / Tissue" dataField="@ORGPART" editable="true" visible="false"/>
					<mx:DataGridColumn id="SEX" headerText="Sex" dataField="@SEX" editable="true" visible="false"/>
					<mx:DataGridColumn id="TEMP" headerText="Temperature" dataField="@TEMP" editable="true" visible="false"/>
					<mx:DataGridColumn id="TIME" headerText="Time Course" dataField="@TIME" editable="true" visible="false"/>
					<mx:DataGridColumn id="otherDataColumn" headerText="Other" dataField="@OTHER" editable="true" visible="false"/>
					<mx:DataGridColumn id="treatmentColumn" headerText="Treatment" visible="false" width="100" dataField="@treatment"/>
					<mx:DataGridColumn headerText="Description" width="100" dataField="@description"/>
				</mx:columns>
			</mx:DataGrid>

			
		
	</mx:VBox>
	
	<mx:states>
		<mx:State name="SolexaSamplesState" >
			<mx:RemoveChild target="{showQCFieldsCheckBox}"/>
			<mx:AddChild relativeTo="{checkBoxContainer}">				
				<mx:CheckBox id="alreadyPreppedCheckBox" label="Already Prepped by Lab?"  visible="{parentDocument.isEditState()}" click="showHideColumns()">
				</mx:CheckBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="QCSamplesState" >
		</mx:State>
		<mx:State name="MicroarraySamplesState" >
		</mx:State>
		
	</mx:states>
	
</mx:Canvas>
