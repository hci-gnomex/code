<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"  xmlns:mx="http://www.adobe.com/2006/mxml" 
		 width="100%" height="100%" 
		 backgroundAlpha="0"
		 xmlns:renderers="views.renderers.*"
		 xmlns:util="views.util.*"  
		 verticalGap="3">
		
	<mx:HTTPService 
		id="getProductOrderList" 
		url="GetProductOrderList.gx"
		resultFormat="e4x"
		result="onGetProductOrderList(event)"
		showBusyCursor="true"
		fault="parentApplication.onFailHttpRequest('Unable to get order list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	
	<mx:Script> 
		<![CDATA[
			import hci.flex.controls.ComboBox;
			
			import mx.collections.HierarchicalData;
			import mx.collections.Sort;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import mx.rpc.events.ResultEvent;
			
			import views.renderers.ComboBoxBillingStatus;
			
			[Bindable]
			public var parentView:NavProductOrderView;

			[Bindable]
			private var billingPeriods:XMLListCollection = new XMLListCollection();
			
			
			public function init():void {
				billingPeriods = new XMLListCollection(parentApplication.dictionaryManager.getEntries("hci.gnomex.model.BillingPeriod"));
				var billingPeriodSort:Sort = new Sort();
				billingPeriodSort.compareFunction = this.sortBillingPeriods;	   
				billingPeriods.sort = billingPeriodSort;  
				billingPeriods.refresh();
			}
		
			public function getList():void {
				getProductOrderList.send(getOrderParameters());
			}
			
			private function onGetProductOrderList(event:ResultEvent):void{
				if ( getProductOrderList.lastResult.name() == "ProductOrderList"){
					this.productOrderGrid.dataProvider = new HierarchicalData(orderList);
					selectedOrders.refresh();
					return;
				}
				
				Alert.show( event.result..ERROR.@message.toString(), "Error getting orders" );
				
			}
			
			private function getOrderParameters():Object {
				var params:Object = new Object;
				
				if ( checkEmptyFilter() ) {
					params.number = 0;
					return params;
				}
				
				if ( this.pickDateRangeButton.fromDate != null && this.pickDateRangeButton.toDate != null ) {
					params.submitDateFrom = dateFormatter.format( this.pickDateRangeButton.fromDate );
					params.submitDateTo = dateFormatter.format( this.pickDateRangeButton.toDate );
				}
								
				return params;
			}
			
			private function checkEmptyFilter():Boolean {
				
				if ( this.pickDateRangeButton.fromDate != null && this.pickDateRangeButton.toDate != null ) {
					return false;
				}
				
				return true;
			}
			
			private function gridItemClick(event:ListEvent):void {
				
				if ( productOrderGrid.selectedItem != null ) {
					parentView.selectedProductOrder = productOrderGrid.selectedItem;
				}
				
				if ( event.columnIndex != 0  ) {
					productOrderGrid.selectedIndex = -1;
				}
				
				if ( event.columnIndex == 0 && productOrderGrid.selectedItems.length > 1 ) {
					for each ( var obj1:Object in productOrderGrid.selectedItems ) {
						obj1.@isSelected = true;
					}
				}
				
				selectedOrders.refresh();
			}
			
			private function selectedFilterFunc(item:XML):Boolean {
				return item.@isSelected == true;
			}
			
			private function getCompleteDateString(item:Object,col:int):String
			{
				return item.@completeDateOther.toString();
			}
			
			private function sortBillingPeriods(obj1:Object, obj2:Object, fields:Array=null):int {
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var order1:Object = obj1.@startDateSort;
					var order2:Object = obj2.@startDateSort;
					
					if (obj1.@value == '') {
						return -1;
					} else if (obj2.@value == '') {
						return 1;
					} else {
						if (order1 < order2) {
							return -1;
						} else if (order1 > order2) {
							return 1;
						} else {
							return 0;
						}
					}
				}			
			}			 
			
			
		]]>
	</mx:Script>    	
	
	<mx:XMLListCollection id = "orderList" source = "{getProductOrderList.lastResult.ProductOrder}" />
	<mx:XMLListCollection id = "selectedOrders" source="{getProductOrderList.lastResult.ProductOrder}" filterFunction="selectedFilterFunc"/>
	
	<mx:DateFormatter id="dateFormatter" formatString="MM/DD/YYYY"/>
	
	<mx:VBox width="100%" styleName="panelBox"   backgroundSize="100%" >
		<mx:HBox width="100%" >
			<mx:HBox horizontalGap="0" verticalAlign="middle">
				<mx:Image source="assets/review.png"/>
				<mx:Label id="titleLabel" styleName="titleLabel" text="Product Orders" />			
			</mx:HBox>
			<mx:HBox height="100%" verticalAlign="middle">
				<renderers:LinkButtonDateRangeMenu id="pickDateRangeButton" toolTip="Click 'Refresh' after selecting a date range to update the results." />
			</mx:HBox>
			<mx:Spacer width="100%" id="spacer1"/>
			
			<mx:LinkButton textDecoration = "underline"
						   label = "Refresh"
						   click = "{this.getList();}"
						   icon = "@Embed('../../assets/action_refresh.gif')"
						   toolTip = "Refresh order list"  styleName="labelSmall" id="linkbutton1"/>
		</mx:HBox>
		
	</mx:VBox>
	
	<mx:AdvancedDataGrid id="productOrderGrid" width="100%" height="100%"
						 fontSize="9"
						 sortableColumns="false"
						 sortExpertMode="true"
						 wordWrap="true" 
						 showDataTips="true"
						 headerWordWrap="true" 
						 selectionMode="singleRow" 
						 designViewDataType="tree"
						 iconFunction="parentApplication.getTreeIcon" 
						 allowMultipleSelection="true"
						 itemClick = "gridItemClick(event)"
						 click="{selectedOrders.refresh()}">
		<mx:columns>
			<!--<mx:AdvancedDataGridColumn id = "checkBoxColumn"
									   textAlign = "center"
									   width = "30"
									   resizable = "false"
									   sortable = "false"
									   editable = "true"
									   rendererIsEditor = "true"
									   dataField = "@isSelected"
									   editorDataField = "selected"
									   itemRenderer = "views.renderers.CheckBoxIsSelectedToggle"
									   headerRenderer = "views.renderers.CheckBoxHeader"/>-->
			<mx:AdvancedDataGridColumn headerText="ID"
									   dataField="@nodeDisplay" 
									   width="175"/>
			<mx:AdvancedDataGridColumn headerText="Lab"
									   dataField="@labName"/>
			<mx:AdvancedDataGridColumn headerText="Submitter"
									   dataField="@submitter"/>
			<mx:AdvancedDataGridColumn headerText="Product"
									   dataField="@display"/>
			<mx:AdvancedDataGridColumn headerText="Acct" 
									   dataField="@billingAccountName" 
									   editable="false" 
									   wordWrap="false" />
			<mx:AdvancedDataGridColumn headerText="Period" 
									   dataField="@idBillingPeriod" 
									   editable="true" 
									   wordWrap="false"
									   editorDataField="value"  
									   rendererIsEditor="false"   
									   itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingPeriod').DictionaryEntry,'@display', '@value', '@idBillingPeriod')}"                              
									   itemEditor="{views.renderers.ComboBoxBillingPeriod.create(billingPeriods, '@display', '@value', '@idBillingPeriod', null, true)}"/>                 
			<mx:AdvancedDataGridColumn headerText="%" 
									   dataField="@percentageDisplay" 
									   editable="false" 
									   textAlign="right" 
									   wordWrap="false"
									   itemRenderer="views.renderers.LabelPercentage" />                              
			<!--<mx:AdvancedDataGridColumn headerText="Type" 
									   dataField="@codeBillingChargeKind" 
									   editable="true" 
									   wordWrap="false" 
									   editorDataField="value" 
									   rendererIsEditor="false"
									   itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingChargeKind').DictionaryEntry,'@display', '@value', '@codeBillingChargeKind')}"                              
									   itemEditor="{hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingChargeKind').DictionaryEntry,'@display', '@value', '@codeBillingChargeKind', true)}"/>-->						
			<mx:AdvancedDataGridColumn headerText="Price Category" 
									   dataField="@category" 
									   editable="false" 
									   itemRenderer="views.renderers.BillingADGItemRenderer"/>
			<mx:AdvancedDataGridColumn headerText="Unit price" 
									   dataField="@unitPrice"  
									   textAlign="right" 
									   editable="true" 
									   wordWrap="false" 
									   itemRenderer="views.renderers.BillingADGItemRenderer"/>
			<mx:AdvancedDataGridColumn headerText="Qty" 
									   dataField="@qty" 
									   editable="true" 
									   textAlign="right" 
									   wordWrap="false" 
									   itemRenderer="views.renderers.BillingADGItemRenderer"/>
			<mx:AdvancedDataGridColumn headerText="Total price" 
									   dataField="@totalPriceDisplay" 
									   textAlign="right" 
									   editable="false" 
									   wordWrap="false"
									   rendererIsEditor="false"
									   itemRenderer="views.renderers.LabelInvoicePrice" />
			<mx:AdvancedDataGridColumn headerText="Status" 
									   dataField="@codeBillingStatus" 
									   editable="true" 
									   wordWrap="false"
									   editorDataField="value"  
									   rendererIsEditor="false"
									   itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingStatus').DictionaryEntry,'@display', '@value', '@codeBillingStatus')}"                              
									   itemEditor="{ComboBoxBillingStatus.create('@codeBillingStatus')}"/>    
			<mx:AdvancedDataGridColumn id = "cDate"  
									   headerText="Complete Date"
									   dataField="@completeDate"
									   itemEditor="views.renderers.CompleteDateFieldEditor"
									   itemRenderer="views.renderers.BillingADGItemRenderer" 
									   rendererIsEditor="false" 
									   labelFunction="getCompleteDateString"
									   editorDataField="selectedDate"/>													
			<mx:AdvancedDataGridColumn headerText="Notes" 
									   dataField="@notes" 
									   editable="true" 
									   itemRenderer="views.renderers.BillingADGItemRenderer"/>
		</mx:columns>
	</mx:AdvancedDataGrid>
</mx:VBox>
