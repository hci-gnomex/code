<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"     
		   label="Order" width="100%" height="100%" 
		   xmlns:views="views.*"
		   xmlns:product="views.product.*"
		   xmlns:util="views.util.*"
		   xmlns:experiment="views.experiment.*"
		   xmlns:renderers="views.renderers.*"
		   creationPolicy="all" creationComplete="init()" 
		   cornerRadius="10" backgroundAlpha="0">
	
	<mx:HTTPService 
		id="getProductOrderList" 
		url="GetProductOrderList.gx"
		resultFormat="e4x"
		result="onGetProductOrderList(event)"
		showBusyCursor="true"
		fault="parentApplication.onFailHttpRequest('Unable to get order list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="changeProductOrderStatus" 
		url="ChangeProductOrderStatus.gx"
		resultFormat="e4x"
		result="onChangeProductOrderStatus(event)"
		showBusyCursor="true"
		fault="parentApplication.onFailHttpRequest('Unable to change product order status', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="deleteProductLineItems" 
		url="DeleteProductLineItems.gx"
		resultFormat="e4x"
		result="onDeleteProductLineItems(event)"
		showBusyCursor="true"
		fault="parentApplication.onFailHttpRequest('Unable to get order list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	
	<mx:Script> 
		<![CDATA[
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.rpc.events.ResultEvent;
			
			import views.util.DateSetEvent;
			
			[Bindable]
			private var selectedOrders:Object = new Object();
			
			[Bindable]
			private var selectedOrder:Object = null;
			
			[Bindable]
			private var coreFacilities:XMLListCollection;
			
			[Bindable]
			private var filteredProductTypes:XMLListCollection;
			
			[Bindable]
			private var atLeastOneSelection:Boolean = false;
			private var isLabSelected:Boolean = false;
			
			private function init():void {
				filteredProductTypes = new XMLListCollection(parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.ProductType').DictionaryEntry);
				filteredProductTypes.addItemAt(new XML("<Product value='' description='' idCoreFacility='' codeProductType='' />"), 0);
				
				coreFacilities = new XMLListCollection();
				coreFacilities.addItem(new XML("<DictionaryEntry display='' idCoreFacility=''/>"));
				coreFacilities.addAll(new XMLListCollection(parentApplication.myCoreFacilities));
				
				filteredProductTypes.filterFunction = filterProductTypes;
				filteredProductTypes.refresh();
				coreFacilities.filterFunction = filterCoreFacilities;
				coreFacilities.refresh();
				
				filteredProductTypes.refresh();
				
				pickDateRangeButton.addEventListener(DateSetEvent.DATE_SET, handleDateSet);
			}
			
			private function onGetProductOrderList(event:ResultEvent):void{
				if (getProductOrderList.lastResult.name() != "ProductOrderList"){
					Alert.show( event.result..ERROR.@message.toString(), "Error getting orders" );	
				} else {
					callLater(expandLabNodes);
				}
			}
			
			private function expandLabNodes():void {
				
				for each ( var group:Object in getProductOrderList.lastResult..Lab ) {
					browseTree.expandItem( group, true );
				}
				callLater(selectOrderOnTree);
				
			}
			
			private function selectOrderOnTree():void {
				if ( this.selectedOrder != null ) {
					browseTree.selectedItem = getProductOrderList.lastResult..ProductOrder.(@idProductOrder == selectedOrder.@idProductOrder)[0];
					browseTree.scrollToIndex(browseTree.selectedIndex);
				}
				
				onBrowseTree();
				
				browseTree.validateNow();
				treeContainer.validateNow();
			}
			
			private function onBrowseTree():void{
				if(browseTree.selectedItem == null ) {
					detailTab.idProductOrder = lineItemTab.idProductOrder = null;
					lineItemTab.init();
					detailTab.init();
					this.selectedOrder = null;
					return;
				}
				
				if(browseTree.selectedItem.name() == "Lab"){
					this.productOrderOverView.titleLabel.text = "Product Orders for " + browseTree.selectedItem.@display;
					this.productOrderOverView.idLab = browseTree.selectedItem.@idLab;
					this.productOrderOverView.init();
					theViews.selectedChild = this.productOrderOverView;
					this.selectedOrder = null;
				}
				
				if(browseTree.selectedItem.name() == "ProductOrder"){
					this.selectedOrder = browseTree.selectedItem;
					theViews.selectedChild = this.theTab;
					detailTab.idProductOrder = browseTree.selectedItem.@idProductOrder;
					lineItemTab.idProductOrder = browseTree.selectedItem.@idProductOrder;
					lineItemTab.productOrder = browseTree.selectedItem;
					lineItemTab.init();
					detailTab.init();
				}
				
			}
			
			private function getProductOrders():void {
				getProductOrderList.send(getParams());
				browseView.getList();
			}
			
			public function getParams():Object{
				var params:Object = new Object;
				
				if ( this.pickDateRangeButton.fromDate != null && this.pickDateRangeButton.toDate != null ) {
					params.submitDateFrom = dateFormatter.format( this.pickDateRangeButton.fromDate );
					params.submitDateTo = dateFormatter.format( this.pickDateRangeButton.toDate );
				}
				if(browseLabCombo.selectedItem != null){
					params.idLab = browseLabCombo.selectedItem.@idLab;
				}
				if (orderStatusCombo.selectedItem != null) {
					params.codeProductOrderStatus = orderStatusCombo.selectedItem.@codeProductOrderStatus;
				}
				
				if (coreFacilityCombo.selectedItem != null && coreFacilityCombo.selectedItem.@idCoreFacility != "") {
					params.idCoreFacility = coreFacilityCombo.selectedItem.@idCoreFacility;
				}
				
				if (productTypeCombo.selectedItem != null && productTypeCombo.selectedItem.@codeProductType != "") {
					params.codeProductType = productTypeCombo.selectedItem.@codeProductType;
				}
				
				return params;
			}
			
			public function lookupProductOrder(productOrder:Object):void {
				toggleBar.selectedIndex = 0;
				selectedOrder = productOrder;
				
				if (productOrder.hasOwnProperty("@idLab")) {
					for each ( var obj1:Object in browseLabCombo.dataProvider ) {
						if ( obj1.@idLab == productOrder.@idLab ) {
							browseLabCombo.selectedItem = obj1;
							break;
						}
						browseLabCombo.selectedIndex = -1;
					}
				} else if (productOrder.hasOwnProperty("@labName")) {
					for each ( var obj2:Object in browseLabCombo.dataProvider ) {
						if ( obj2.@nameFirstLast == productOrder.@labName ) {
							browseLabCombo.selectedItem = obj2;
							break;
						}
						browseLabCombo.selectedIndex = -1;
					}
				}
				
				//var today:Date = new Date();
				//this.pickDateRangeButton.toDate = today;
				//this.pickDateRangeButton.fromDate = new Date(today.fullYear, today.month, today.date - 7);
				
				getProductOrders();
			}
			
			private function selectOrders():void{
				selectedOrders = new Object();
				isLabSelected = false;
				atLeastOneSelection = false;
				//Get all of the product orders selected in tree.  If user has selected an entire lab
				//We will add all of the product orders from that lab to the selected list.
				for each(var po:XML in browseTree.selectedItems){
					if(po.name() == "Lab"){
						isLabSelected = true;
						for each(var child:XML in po.children()){
							selectedOrders[child.@idProductOrder] = child;
							atLeastOneSelection = true;
						}
					} else{
						selectedOrders[po.@idProductOrder] = po;
						atLeastOneSelection = true;
					}
				}	
			}
			
			private function changeStatus_handler():void{
				if(toggleBar.selectedIndex==0 && isLabSelected == true){
					Alert.show("You have selected an entire Lab, do you want to change the status of all orders in that lab?", 
						"Warning",(Alert.YES | Alert.NO), this, changeStatus_impl, parentApplication.iconError);
				} else{
					changeStatus();
				}	
			}
			
			private function changeStatus_impl(event:CloseEvent):void{
				if(event.detail == Alert.YES){
					changeStatus();
				} else{
					return;
				}
			}
			
			private function changeStatus():void{
				var params:Object = new Object();
				if ( toggleBar.selectedIndex==0 ){
					var orderCollection:XMLListCollection = new XMLListCollection();
					for(var key:String in selectedOrders){
						orderCollection.addItem(selectedOrders[key]);
					}
					params.selectedOrders = "<selectedOrders>" + orderCollection.toXMLString() + "</selectedOrders>";
				} else {
					params.selectedLineItems = "<selectedLineItems>" + browseView.selectedOrders.toXMLString() + "</selectedLineItems>";
				}
				params.codeProductOrderStatus = statusComboBox.selectedItem.@codeProductOrderStatus; 
				changeProductOrderStatus.send(params);
			}
			
			private function onChangeProductOrderStatus(event:ResultEvent):void{
				if(changeProductOrderStatus.lastResult.name() != 'SUCCESS'){
					Alert.show(changeProductOrderStatus.lastResult..ACTMESSAGE.@TEXT);
				} else{
					Alert.show(changeProductOrderStatus.lastResult.@message);
					if ( toggleBar.selectedIndex==0 ) {
						getProductOrders();
					} else {
						browseView.getList();	
					}
					statusComboBox.selectedItem = null;
				}
			}
			
			private function promptToDelete():void {
				
				var isComplete:Boolean = false;
				var allComplete:Boolean = true;
				
				// Check to see if any items are completed already.
				if ( toggleBar.selectedIndex==0 ){
					// Really need to check if any of the product order's line items are complete.  Line items aren't returns in the tree list. 
					// Not sure if it's worth it to return that information or just give a generic warning.
					/* var orderCollection:XMLListCollection = new XMLListCollection();
					for(var key:String in selectedOrders){
					if( selectedOrders[key].@status == "Complete") {
					isComplete = true;
					break;
					} else {
					allComplete = false;
					}
					} */
					if ( ( browseTree.selectedItems.length == 1 && !isLabSelected) && detailTab.selectedProductOrder.@orderStatus == "Complete"  ) {
						if ( lineItemTab.lineItems.length > 0 ) {
							Alert.show("All line items for the selected order are marked as complete.  Completed items cannot be deleted." );
						} else {
							Alert.show( "Are you sure you want to delete this product order?", 
								"Confirm Delete", ( Alert.YES | Alert.NO ), this, onPromptToDelete, parentApplication.iconError );
						}
					} else {
						Alert.show("Completed items cannot be deleted.  Any line items that are already completed will be skipped. Do you wish to continue?", 
							"Confirm Delete", ( Alert.YES | Alert.NO ), this, onPromptToDelete, parentApplication.iconError );
					}
				} else {
					for each (var pli:Object in browseView.selectedOrders ) {
						if ( pli.@status == "Complete" ) {
							isComplete = true;
						} else {
							allComplete = false;
						}
					}
					
					if ( allComplete ) {
						Alert.show("The selected line item(s) is marked as complete.  Completed items cannot be deleted." );
						
					} else if ( isComplete ) {
						Alert.show("At least one of the selected line items is marked as complete.  Completed items cannot be deleted and will be skipped. Do you wish to continue?", 
							"Confirm Delete", ( Alert.YES | Alert.NO ), this, onPromptToDelete, parentApplication.iconError );
						
					} else {
						Alert.show( "Are you sure you want to delete these line items?", 
							"Confirm Delete", ( Alert.YES | Alert.NO ), this, onPromptToDelete, parentApplication.iconError );
					}
				}
				
			}
			
			private function onPromptToDelete( event:CloseEvent ):void {
				
				if ( event.detail == Alert.YES ) {
					deleteLineItems();
				}
			}
			
			private function deleteLineItems():void {
				var params:Object = new Object();
				if ( toggleBar.selectedIndex==0 ){
					var orderCollection:XMLListCollection = new XMLListCollection();
					for(var key:String in selectedOrders){
						orderCollection.addItem(selectedOrders[key]);
					}
					params.productOrdersToDeleteXMLString = "<productOrdersToDeleteXMLString>" + orderCollection.toXMLString() + "</productOrdersToDeleteXMLString>";
				} else {
					params.productLineItemsToDeleteXMLString = "<productLineItemsToDeleteXMLString>" + browseView.selectedOrders.toXMLString() + "</productLineItemsToDeleteXMLString>";
				}
				
				deleteProductLineItems.send(params);
			}
			
			private function onDeleteProductLineItems(event:ResultEvent): void {
				if (deleteProductLineItems.lastResult.name() == "SUCCESS") {
					Alert.show(deleteProductLineItems.lastResult.@message);
					getProductOrders();
					browseTree.selectedItem = null;
					onBrowseTree();
				} else {
					Alert.show(deleteProductLineItems.lastResult..ACTMESSAGE.@TEXT);
				}
			}
			
			private function filterCoreFacilities(item:Object):Boolean {
				if (item.@display == "" && item.@idCoreFacility == "") {
					return true;
				}
				
				for each (var productType:XML in filteredProductTypes) {
					if (productType.@idCoreFacility == item.@idCoreFacility) {
						return true;
					}
				}
				
				return false;
			}
			
			private function filterProductTypes(item:Object):Boolean {
				if (item.@description == "") {
					return true;
				}
				
				if (item.@value == null || item.@value == "") {
					return false;
				}
				
				if (coreFacilityCombo.selectedItem != null && coreFacilityCombo.selectedItem.@idCoreFacility != "") {
					if (item.@idCoreFacility == coreFacilityCombo.selectedItem.@idCoreFacility) {
						return true;
					}
				} else {
					for each (var coreFacility:Object in coreFacilities) {
						if (item.@idCoreFacility == coreFacility.@idCoreFacility) {
							return true;
						}
					}
				}
				
				return false;
			}
			
			private function updateProductTypes():void {
				productTypeCombo.selectedItem = null;
				filteredProductTypes.refresh();
			}
			
			private function checkComboBoxSelections():void {
				if (coreFacilityCombo.selectedItem != null && coreFacilityCombo.selectedItem.@display == "") {
					coreFacilityCombo.selectedItem = null;
					coreFacilityCombo.selectedIndex = -1;
				}
				
				if (productTypeCombo.selectedItem != null && productTypeCombo.selectedItem.@description == "") {
					productTypeCombo.selectedItem = null;
					productTypeCombo.selectedIndex = -1;
				}
				
				if (orderStatusCombo.selectedItem != null && orderStatusCombo.selectedItem.@value == "") {
					orderStatusCombo.selectedItem = null;
					orderStatusCombo.selectedIndex = -1;
				}
			}
			
			private function handleDateSet(event:DateSetEvent):void {
				this.getProductOrders();
			}
			
		]]>
	</mx:Script> 
	
	<mx:DateFormatter id="dateFormatter" formatString="MM/DD/YYYY"/>
	
	<mx:VBox id="vbox1" width="100%" height="100%" horizontalAlign="left" verticalGap="2">
		<mx:VBox width="100%" styleName="titleBox" >
			<mx:HBox width="100%">
				<renderers:TitleLabel iconSource="{parentApplication.iconBasket}" titleText="Product Orders" width="200"/>
				
				<mx:HBox verticalAlign="middle" 
						 visible="{parentApplication.submitRequestLabList.source.length() &gt; 1}"
						 includeInLayout="{parentApplication.submitRequestLabList.source.length() &gt; 1}" width="300">
					<mx:Label text="Lab:" width="80"/>
					<renderers:FilterComboBox dataProvider="{parentApplication.submitRequestLabList.source}"
											  editable="{parentApplication.submitRequestLabList.source.length() &gt; 1}"
											  enabled="{parentApplication.submitRequestLabList.source.length() &gt; 1}"
											  labelField="@name" 
											  prompt="Select a lab..."
											  width="200" paddingRight="0"  
											  selectedIndex="{parentApplication.submitRequestLabList.source.length() == 1 ? 0 : -1}"
											  id="browseLabCombo" fontSize="10" close="{getProductOrders()}">
					</renderers:FilterComboBox>
				</mx:HBox>
				
				<mx:VRule height="20" width="4"/>
				
				<mx:HBox verticalAlign="middle">
					<mx:Label text="Status:"/>
					<mx:ComboBox id="orderStatusCombo" prompt="Status..."
								 dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ProductOrderStatus').DictionaryEntry}"
								 labelField="@productOrderStatus" change="checkComboBoxSelections(); getProductOrders()"/>
				</mx:HBox>
				
				<mx:VRule height="20" width="4"/>
				
				<mx:HBox height = "100%" verticalAlign = "middle">
					<renderers:LinkButtonDateRangeMenu id="pickDateRangeButton" />
				</mx:HBox>
				
				<mx:Spacer width="100%"/>
				
				<mx:ToggleButtonBar id="toggleBar" dataProvider="{viewStack}"/>
				
			</mx:HBox>
					
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:Spacer width="200"/>
				
				<mx:HBox verticalAlign="middle" width="300">
					<mx:Label text="Core Facility:" width="80"/>
					<mx:ComboBox id="coreFacilityCombo" labelField="@display" prompt="Core Facility..." width="200"
								 dataProvider="{coreFacilities}" change="{updateProductTypes(); checkComboBoxSelections(); getProductOrders()}" />
				</mx:HBox>
				
				<mx:VRule height="20" width="4"/>
				
				<mx:HBox verticalAlign="middle">
					<mx:Label text="Product Type:"/>
					<mx:ComboBox id="productTypeCombo" labelField="@description" prompt="Product Type..."
								 dataProvider="{filteredProductTypes}" 
								 change="checkComboBoxSelections(); getProductOrders()" />
				</mx:HBox>
			</mx:HBox>
		</mx:VBox>
		
		<mx:ViewStack id="viewStack" creationPolicy="all" visible="true" width="100%" height="100%" >
			
			
			<mx:HDividedBox id="detailView" label="Detail" height="100%" width="100%" dividerAlpha="0" dividerThickness="3" dividerAffordance="0">
				
				<mx:VBox styleName="panelBox"   width="270" height="100%" id="navPanel" >
					<mx:HBox width="100%" verticalAlign="middle" horizontalGap="0">
						<mx:Text id="messageLabel"  width="100%" fontStyle="normal" fontSize="10"/>
					</mx:HBox>
					<mx:VBox id="navContainer" width="100%" height="100%" verticalGap="0" paddingTop="0" >
						<mx:VBox id="treeContainer"  width="100%" height="100%" paddingLeft="2" verticalGap="0" >
							<mx:Tree width="100%" height="100%" 
									 dataProvider="{getProductOrderList.lastResult}" 
									 showRoot="false" 
									 id="browseTree" click="onBrowseTree(); selectOrders();" 
									 doubleClickEnabled="false" 
									 labelField="@display" allowMultipleSelection="true" 
									 iconFunction="parentApplication.getTreeIcon" 
									 backgroundAlpha="1" dropShadowEnabled="true" borderStyle="none">
							</mx:Tree>
							
						</mx:VBox>
					</mx:VBox>
				</mx:VBox>  
				
				<mx:ViewStack id="theViews" creationPolicy="all" visible="true" width="100%" height="100%">
					
					<mx:TabNavigator id="theTab"  styleName="form" width="100%"  
									 height="100%" paddingLeft="8"
									 paddingRight="4" paddingBottom="4"  paddingTop="6">
						<product:ProductOrderDetailTab id="detailTab"/>
						
						<product:LineItemDetailTab id="lineItemTab"/>
						
					</mx:TabNavigator>
					
					<product:ProductOrderOverview id="productOrderOverView"/>
					
				</mx:ViewStack>
				
			</mx:HDividedBox>
			
			<product:ProductOrderBrowseView id="browseView" label="Overview" parentView="{this}"/>
			
			
		</mx:ViewStack>
		<mx:ControlBar horizontalAlign="left" width="100%" paddingTop="0" paddingBottom="2">
			
			<mx:Label id="nSelectedOrders" text="{browseView.selectedOrders.length + ' selected'}" visible="{toggleBar.selectedIndex==1}" includeInLayout="{toggleBar.selectedIndex==1}"/>
			
			<mx:ComboBox id = "statusComboBox" 
						 prompt="- Change Status -" 
						 dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ProductOrderStatus').DictionaryEntry}"
						 labelField="@productOrderStatus" />
			<mx:LinkButton textDecoration = "underline"
						   label = "Go"
						   icon = "@Embed('../../assets/bullet_go.png')"
						   disabledIcon="@Embed('../../assets/bullet_go_disable.png')"
						   toolTip = "Change status of selected orders" 
						   click="{changeStatus_handler()}" 
						   enabled="{((toggleBar.selectedIndex==0 &amp;&amp; atLeastOneSelection) || (toggleBar.selectedIndex==1 &amp;&amp; browseView.selectedOrders.length > 0 ) ) &amp;&amp; statusComboBox.selectedIndex > 0}"/>
			<mx:LinkButton textDecoration="underline"
						   label="Delete"
						   icon="@Embed('../../assets/delete.png')"
						   toolTip="Delete selected orders"
						   click="{promptToDelete()}" 
						   disabledIcon="@Embed('../../assets/delete_disable.png')"
						   enabled="{ (toggleBar.selectedIndex==0 &amp;&amp; atLeastOneSelection) || (toggleBar.selectedIndex==1 &amp;&amp; browseView.selectedOrders.length > 0 ) }"/>
			<mx:Spacer width="100%"/>
			<mx:Label text="{'(' + browseView.orderList.length + ' line items)'}" visible="{toggleBar.selectedIndex==1}" includeInLayout="{toggleBar.selectedIndex==1}" fontWeight = "normal" textAlign = "right"  fontStyle="italic"/>
		</mx:ControlBar>
		
	</mx:VBox>
	
	
</mx:Canvas>
