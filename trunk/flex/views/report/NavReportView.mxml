<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"     
		   label="Data Tracks" width="100%" height="100%" 
		   xmlns:views="views.*"  
		   xmlns:analysis="views.analysis.*"
		   xmlns:experiment="views.experiment.*"
		   xmlns:datatrack="views.datatrack.*"
		   xmlns:topics="views.topics.*"
		   xmlns:util="views.util.*" backgroundAlpha="0"
		   xmlns:renderers="views.renderers.*"
		   creationPolicy="all"  show="init()"
		   cornerRadius="10" >
	<mx:states>
		<mx:State name="AdminState">
		</mx:State>
		<mx:State name="UserState">			
		</mx:State>
		<mx:State name="GuestState"/>
	</mx:states>
	
	
	
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.CheckBox;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import views.util.ExperimentPlatformChooser;
			import views.util.PickDateRangeView;
			
			public var isInitialized:Boolean = false;
			public var ignoreToggle:Boolean = false;
			
			
			public var reportName:String = "";
				
			
			
			public function checkDirty():void {
			}
			
			
			public function init():void {
				checkSecurity();	
				if (!isInitialized) {
					initData();
				}
				if (reportName == "Annotation Report") {
					callLater(showAnnotationReport);
				} else if (reportName == "Project/Experiment Report") {
					callLater(showProjectExperimentReport);
				} else if (reportName == "Annotation Progress Report") {
					callLater(showAnnotProgressReport);
				}

				isInitialized = true;
			}
			
			public function showAnnotationReport():void {
				theViews.selectedChild = annotationReportView;	
				callLater(refreshAnnotationList);
			}
			
			public function showProjectExperimentReport():void {
				theViews.selectedChild = projectExperimentReportView;		
			}
			
			public function showAnnotProgressReport():void {
				theViews.selectedChild = this.annotProgressReportView;		
			}
			
			private function initData():void {
				
			}
			
			private function refreshAnnotationList():void {
				properties = new XMLListCollection();
				for each(var prop:XML in parentApplication.propertyList) {
					var keep:Boolean = false;
					
					
					if (prop.@name.toString() == "Other") {
						keep = false;
					} else if (showSampleAnnotations.selected && prop.@forSample == "Y"){
						keep = true;
					} else if (this.showAnalysisAnnotations.selected && prop.@forAnalysis == "Y"){
						keep = true;			
					} else if (this.showDataTrackAnnotations.selected && prop.@forDataTrack == "Y"){
						keep = true;
					}
					
					if (keep) {
						var property:Object = prop.copy();
						if (property.@isRequired == "Y") {
							property.@isSelected = "true";
						}
						properties.addItem(property);
					}
					
				}
			}
			
			private function checkSecurity():void {
				currentState = "";
				if (parentApplication.hasPermission("canWriteAnyObject")) {
					currentState = "AdminState";
				} else if (parentApplication.currentState == "GuestState" || !parentApplication.hasPermission("canSubmitRequests")) {
					// Users who don't belong to a lab treated same as guests
					currentState = "GuestState";
				} else {
					this.currentState = "UserState";
				}
			}
			
			private function toggleAnnotationCheck(event:ListEvent):void {
				
				if ( annotationGrid.selectedItems.length > 1 ) {
					for each ( var obj1:Object in annotationGrid.selectedItems ) {
						obj1.@isSelected = true;
					}
				} else if ( event.columnIndex != 0 ){
					
					// We don't want the typing in the the text field for "Other" to be treated
					// as a toggle off
					if ( annotationGrid.selectedItem == null ) {
						return;
					}
					var sc:Object = parentApplication.getSampleProperty(annotationGrid.selectedItem.@idProperty);
					if (sc == null || sc.@name.toString() == "Other") {
						if (ignoreToggle) {
							return;					
						}
					}
					
					if (annotationGrid.selectedItem.@isRequired == "true") {
						// Don't toggle a required field.
						return;		
					}
					
					if (annotationGrid.selectedItem.@isSelected == "true") {
						
						annotationGrid.selectedItem.@isSelected = "false";
						
					} else {
						annotationGrid.selectedItem.@isSelected = "true";
					} 
				}
			}
			
			private function toggleCustomColumnCheck(event:ListEvent):void{
				if ( customGrid.selectedItems.length > 1 ) {
					for each ( var obj1:Object in customGrid.selectedItems ) {
						obj1.@isSelected = true;
					}
				} else if ( event.columnIndex != 0 ){
					
					// We don't want the typing in the the text field for "Other" to be treated
					// as a toggle off
					if ( customGrid.selectedItem == null ) {
						return;
					}
					
					if (customGrid.selectedItem.@isSelected == "true") {
						customGrid.selectedItem.@isSelected = "false";
					} else {
						customGrid.selectedItem.@isSelected = "true";
					} 
				}
				
			}
			
			
			private function runAnnotationReport():void {
				if (browseLabCombo.selectedItem == null || browseLabCombo.selectedItem.@idLab == '' ) {
					if (currentState != 'AdminState') {
						Alert.show("Please select a lab group");
					}
					Alert.show( "Run annotation report for all lab groups?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToContinue,						
						parentApplication.iconWarning);	
				} else {
					runAnnotationReportImpl();
				}
			}
			private function onPromptToContinue(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					runAnnotationReportImpl();
				}
			}	
			
			private function runAnnotationReportImpl():void {
				// Place the ids of the selected proeperties in a comma separated list.
				var idProperties:String = "";
				var createDateFrom:String = "";
				var createDateTo:String = "";
				var codeRequestCategories:String = "";
				
				for each(var property:Object in properties) {
					if (property.@isSelected == "true") {
						if (idProperties.length > 0) {
							idProperties += ",";
						}
						idProperties += property.@idProperty;
					}
				}
				
				for each(var requestCategory:Object in requestCategories){
					if(codeRequestCategories.length > 0) {
						codeRequestCategories += ",";
					}
					if(requestCategory.@isSelected == 'true'){
						codeRequestCategories += requestCategory.@codeRequestCategory;
					}
				}
				
				if ( this.pickDateRangeButton.fromDate != null && this.pickDateRangeButton.toDate != null ) {
					createDateFrom = dateFormatter.format( this.pickDateRangeButton.fromDate );
					createDateTo = dateFormatter.format( this.pickDateRangeButton.toDate );
				}
				
				// Call the backend servlet that generates the excel spreadsheet
				var showUrl:URLRequest = new URLRequest('ShowAnnotationReport.gx' +			
					'?idLab=' +  (this.browseLabCombo.selectedItem != null ? this.browseLabCombo.selectedItem.@idLab : "") +
					'&target=' +  this.annotationRadioGroup1.selectedValue +
					'&idProperties=' + idProperties +
					'&codeRequestCategories=' + codeRequestCategories +
					'&customColumnString= <customColumns>' + customColumns.toXMLString() + '</customColumns>' +
					'&createDateFrom=' + createDateFrom + 
					'&createDateTo=' + createDateTo);
				navigateToURL(showUrl, '_blank');
				
			}
			
			/* private function selectAllAnnotations(select:Boolean):void {
			for each(var property:Object in properties) {
			property.@isSelected = select ? "true" : false;
			}		
			} */
			
			
			private function runProjectExperimentReport():void {
				if (browseProjectExperimentLabCombo.selectedItem == null || browseProjectExperimentLabCombo.selectedItem.@idLab == '' ) {
					if (currentState != 'AdminState') {
						Alert.show("Please select a lab group");
					}
					
					Alert.show( "Run project/experiment report for all lab groups?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onProjectExperimentPromptToContinue,						
						parentApplication.iconWarning);	
				} else {
					runProjectExperimentReportImpl();
				}
			}
			private function onProjectExperimentPromptToContinue(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					runProjectExperimentReportImpl();
				}
			}	
			
			private function runProjectExperimentReportImpl():void {
				// Place the ids of the selected proeperties in a comma separated list.
				var idProperties:String = "";
				for each(var property:Object in properties) {
					if (property.@isSelected == "true") {
						if (idProperties.length > 0) {
							idProperties += ",";
						}
						idProperties += property.@idProperty;
					}
				}
				
				// Call the backend servlet that generates the excel spreadsheet
				var showUrl:URLRequest = new URLRequest('ShowProjectExperimentReport.gx' +			
					'?idLab=' +  (this.browseProjectExperimentLabCombo.selectedItem != null ? this.browseProjectExperimentLabCombo.selectedItem.@idLab : ""));
				navigateToURL(showUrl, '_blank');
				
			}
			
			
			
			private function runAnnotProgressReport():void {
				if (annotProgressLabCombo.selectedItem == null || annotProgressLabCombo.selectedItem.@idLab == '' ) {
					if (currentState != 'AdminState') {
						Alert.show("Please select a lab group");
					}
					
					Alert.show( "Run annotation progress report for all lab groups?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onAnnotProgressPromptToContinue,						
						parentApplication.iconWarning);	
				} else {
					runAnnotProgressReportImpl();
				}
			}
			private function onAnnotProgressPromptToContinue(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					runAnnotProgressReportImpl();
				}
			}	
			
			private function runAnnotProgressReportImpl():void {
				// Call the backend servlet that generates the excel spreadsheet
				var showUrl:URLRequest = new URLRequest('ShowAnnotationProgressReport.gx' +			
					'?idLab=' +  (this.annotProgressLabCombo.selectedItem != null ? this.annotProgressLabCombo.selectedItem.@idLab : ""));
				navigateToURL(showUrl, '_blank');
				
			}
			
			private function showExperimentPlatformChooser():void{
				var experimentPlatformChooser:ExperimentPlatformChooser = ExperimentPlatformChooser(PopUpManager.createPopUp(parentApplication.theBody, ExperimentPlatformChooser, true));
				experimentPlatformChooser.addEventListener(CloseEvent.CLOSE, updateRequestCategoryFilter);
				experimentPlatformChooser.parentWindow = this;
				PopUpManager.centerPopUp(experimentPlatformChooser);
			}
			
			private function updateRequestCategoryFilter(event:CloseEvent):void{
				requestCategoryLabel.text = "";
				for(var i:int = 0; i < requestCategories.length; i++){
					if(requestCategories.getItemAt(i).@isSelected == 'true'){
						var rcLabel:String = requestCategories.getItemAt(i).@display;
						requestCategoryLabel.text += rcLabel;
						if((i+1) < requestCategories.length){
							requestCategoryLabel.text += ", ";
						}
					}
				}				
				
			}
			
			private function compareColumnDisplay(obj1:Object, obj2:Object, fields:Array=null):int{
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var display1:String = obj1.@display;
					var display2:String = obj2.@display;
					
					if(display1 < display2){
						return -1;
					} else if(display1 > display2){
						return 1;
					} else{
						return 0;
					}
				}
				
			}
			
		]]>
	</mx:Script>
	
	<mx:XMLListCollection id="properties" />
	<mx:XMLListCollection id="requestCategories" />
	<mx:XMLListCollection id="customColumns" sort="{customColumnSorter}" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.AnnotationReportField').DictionaryEntry.(@value != '')}"/>
	<mx:Sort id="customColumnSorter" compareFunction="compareColumnDisplay"/>
	<mx:DateFormatter id="dateFormatter" formatString="MM/DD/YYYY"/>
	
	
	<mx:VBox width="100%" height="100%" id="vbox1" verticalGap="2" >
		
		<mx:ViewStack id="theViews" width="100%" height="100%" creationPolicy="auto">
			
			<mx:Panel id="blankView" width="100%" height="100%">			    	
			</mx:Panel>
			
			<mx:HBox styleName="panelBox"  id="annotationReportView" width="100%" height="100%"   paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4" verticalGap="2">
				<mx:VBox height="100%">
					
					<mx:HBox width="400">
						<mx:Text styleName="titleLabel" text="Annotation Report"/>
						<mx:Spacer width="100%"/>
						<mx:Button label="Run" 
								   click="{runAnnotationReport()}"
								   enabled="{annotationRadioGroup1.selectedValue != null &amp;&amp; annotationRadioGroup1.selectedValue != ''}" 
								   icon="@Embed(source='../../assets/accept.png')" 
								   disabledIcon="@Embed(source='../../assets/accept_disable.png')"/>
						
					</mx:HBox>
					<mx:VBox width="100%" height="100%" verticalGap="12" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="8" id="vbox3">
						<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle">
							<mx:Label id="groupLabel" visible="true" text="Lab Group" paddingBottom="0" styleName="formLabel" paddingLeft="2" width="100"/>
							<renderers:FilterComboBox dataProvider="{parentApplication.submitRequestLabList.source}" 
													  labelField="@name" 
													  prompt="Select a lab..."
													  width="200" 
													  id="browseLabCombo">
							</renderers:FilterComboBox>
							
						</mx:HBox>
						<mx:HBox width="100%" verticalAlign="middle" horizontalGap="0">
							<mx:Label text="Annotations for" styleName="formLabel" width="100"/>
							<mx:RadioButtonGroup id="annotationRadioGroup1"/>
							<mx:RadioButton label="Experiment samples"  value="SAMPLE" selected="true" groupName="annotationRadioGroup1" id="showSampleAnnotations" click="refreshAnnotationList()" paddingLeft="2"/>
							<mx:RadioButton label="Analyses" value="ANALYSIS" groupName="annotationRadioGroup1" id="showAnalysisAnnotations" click="refreshAnnotationList()" />
							<mx:RadioButton label="Data Tracks" value="DATATRACK" groupName="annotationRadioGroup1" id="showDataTrackAnnotations" click="refreshAnnotationList()" />
						</mx:HBox>
						
						<mx:HBox width="100%" verticalAlign="middle" horizontalGap="0" horizontalAlign="left" includeInLayout="{annotationRadioGroup1.selectedValue == 'SAMPLE'}" visible="{annotationRadioGroup1.selectedValue == 'SAMPLE'}" >
							<mx:LinkButton label="Experiment Platform: " paddingLeft="0" styleName="formLabel" textDecoration="underline" click="showExperimentPlatformChooser()"/>
							<mx:Label id="requestCategoryLabel" text="" styleName="formLabel" />
						</mx:HBox>
						
						<mx:HBox width="100%" verticalAlign="middle" horizontalGap="0" includeInLayout="{annotationRadioGroup1.selectedValue == 'SAMPLE'}" visible="{annotationRadioGroup1.selectedValue == 'SAMPLE'}" >
							<renderers:LinkButtonDateRangeMenu id="pickDateRangeButton" paddingLeft="2" />
						</mx:HBox>
						
						<mx:VBox width="100%" height="100%" verticalGap="0">
							<mx:Label text="Check the Annotations you want to see on the report" styleName="formLabel"/>
							<mx:HBox width="100%" height="100%">
								<mx:DataGrid id="annotationGrid" height="100%"
											 dataProvider="{properties}" 
											 showHeaders="true" headerHeight="20" variableRowHeight="true" width="400" 
											 allowMultipleSelection="true" focusOut="{annotationGrid.selectedIndex=-1}"
											 itemClick="toggleAnnotationCheck(event)" rowHeight="20"  >
									<mx:columns>
										<mx:DataGridColumn id="checkBoxColumn"
														   textAlign="center"
														   width="30" minWidth="30"
														   resizable="false"
														   sortable="false"
														   editable="true"
														   rendererIsEditor="true"
														   dataField="@isSelected"
														   editorDataField="selected"
														   itemRenderer="views.renderers.CheckBoxIsSelectedToggle"
														   headerRenderer="views.renderers.CheckBoxHeader"
														   draggable="false"/>
										<mx:DataGridColumn  
											editable="false" editorDataField="selected"  headerText="Annotation"
											dataField="@name" >
											<mx:itemRenderer>
												<mx:Component >
													<mx:HBox horizontalScrollPolicy="off" verticalGap="0">
														<mx:Label text="{data.@name}"  
																  fontWeight="{data.@isRequired == 'Y' ? 'bold' : 'normal'}" 
																  fontStyle="{data.@isRequired == 'Y' ? 'italic' : 'normal'}">			                           	
														</mx:Label>
														<mx:TextInput id="scOtherLabel" fontSize="9"
																	  text="{data.@otherLabel}"
																	  focusIn="{parentDocument.ignoreToggle = true}"
																	  focusOut="{parentDocument.ignoreToggle = false}"
																	  change="{parentDocument.ignoreToggle = true;data.@otherLabel = scOtherLabel.text;parentDocument.changeOtherHeaderLabelAndToggle(data)}" 
																	  width="{data.@name == 'Other' ? 130 : 0}"  
																	  height="{data.@name == 'Other' ? 20 : 0}"  
																	  visible="{data.@name == 'Other' ? true : false}" 
																	  editable="{data.@name == 'Other' ? true : false}">			                           
														</mx:TextInput>
														
													</mx:HBox>
												</mx:Component>
											</mx:itemRenderer>
										</mx:DataGridColumn>
									</mx:columns>
								</mx:DataGrid>
								
								<mx:DataGrid id="customGrid" height="100%" includeInLayout="{annotationRadioGroup1.selectedValue == 'SAMPLE' &amp;&amp; customColumns.length > 0}" visible="{annotationRadioGroup1.selectedValue == 'SAMPLE' &amp;&amp; customColumns.length > 0}"
											 dataProvider="{customColumns}" itemClick="toggleCustomColumnCheck(event)" 
											 showHeaders="true" headerHeight="20" variableRowHeight="true" width="400" 
											 allowMultipleSelection="true" focusOut="{customGrid.selectedIndex=-1}" rowHeight="20"  >
									<mx:columns>
										<mx:DataGridColumn id="checkBoxColumn1"
														   textAlign="center"
														   width="30" minWidth="30"
														   resizable="false"
														   sortable="false"
														   editable="true"
														   rendererIsEditor="true"
														   dataField="@isSelected"
														   editorDataField="selected"
														   itemRenderer="views.renderers.CheckBoxIsSelectedToggle"
														   headerRenderer="views.renderers.CheckBoxHeader"
														   draggable="false"/>
										<mx:DataGridColumn headerText="Custom Columns" dataField="@display" />
									</mx:columns>
								</mx:DataGrid>
							</mx:HBox>
						</mx:VBox>
						
					</mx:VBox>
					
					<mx:ControlBar width="100%">
						<mx:Spacer width="100%"/>
					</mx:ControlBar>
				</mx:VBox>
				<mx:VBox width="100%" height="100%" click="{annotationGrid.selectedIndex=-1}"/>
			</mx:HBox>
			
			<mx:VBox styleName="panelBox"  id="projectExperimentReportView" width="100%" height="100%"   paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4" verticalGap="2">
				<mx:HBox width="400">
					<mx:Text styleName="titleLabel" text="Project/Experiment Report"/>
					<mx:Spacer width="100%"/>
					<mx:Button label="Run" 
							   click="{runProjectExperimentReport()}"
							   enabled="true" 
							   icon="@Embed(source='../../assets/accept.png')" 
							   disabledIcon="@Embed(source='../../assets/accept_disable.png')"/>
				</mx:HBox>
				<mx:VBox width="100%" height="100%" verticalGap="12" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="8" id="vbox2">
					<mx:HBox width="100%">
						<mx:Label id="experimentReportGroupLabel" visible="true" text="Lab Group" paddingBottom="0"  paddingLeft="2" styleName="formLabel"/>
						<renderers:FilterComboBox dataProvider="{parentApplication.submitRequestLabList.source}" 
												  labelField="@name" 
												  prompt="All Labs..."
												  width="200" 
												  id="browseProjectExperimentLabCombo">
						</renderers:FilterComboBox>
						
					</mx:HBox>
					<mx:HBox>
						<mx:Image source="assets/excel_wrap_text.png" id="image1"/>
						<mx:Label text="In Excel, Select the Description column and then click on the 'Wrap Text' so that line breaks are shown." id="label1" fontStyle="italic" color="#167A1B"/>
					</mx:HBox>
				</mx:VBox>
			</mx:VBox>
			
			<mx:VBox styleName="panelBox"  id="annotProgressReportView" width="100%" height="100%"   paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4" verticalGap="2">
				<mx:HBox width="400">
					<mx:Text styleName="titleLabel" text="Annotation Progress Report"/>
					<mx:Spacer width="100%"/>
					<mx:Button label="Run" 
							   click="{runAnnotProgressReport()}"
							   enabled="true" 
							   icon="@Embed(source='../../assets/accept.png')" 
							   disabledIcon="@Embed(source='../../assets/accept_disable.png')"/>
				</mx:HBox>
				<mx:VBox width="100%" height="100%" verticalGap="12" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="8" id="vbox4">
					<mx:HBox width="100%">
						<mx:Label  visible="true" text="Lab Group" paddingBottom="0"  paddingLeft="2" styleName="formLabel"/>
						<renderers:FilterComboBox dataProvider="{parentApplication.submitRequestLabList.source}" 
												  labelField="@name" 
												  prompt="All Labs..."
												  width="200" 
												  id="annotProgressLabCombo">
						</renderers:FilterComboBox>
						
					</mx:HBox>
				</mx:VBox>
			</mx:VBox>
			
		</mx:ViewStack>
		
		
		
	</mx:VBox>
	
</mx:Canvas>
