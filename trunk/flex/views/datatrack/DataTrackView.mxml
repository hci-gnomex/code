<?xml version="1.0" encoding="utf-8"?>
<mx:VBox  width="100%" height="100%" styleName="panelBox"
		  xmlns:mx="http://www.adobe.com/2006/mxml"     
		  xmlns:views="views.*" 
		  xmlns:util="views.util.*" 
		  xmlns:datatrack="views.datatrack.*" creationComplete="{checkTopicsVisibility()}"
		  showEffect="{parentApplication.fadeIn}" hideEffect="{parentApplication.fadeOut}">
	
	
	<mx:HBox horizontalGap="1" width="100%">
			<mx:Image source="{getDataTrack.lastResult.@codeVisibility == 'INST' ? parentApplication.iconDataTrackInstitution : (getDataTrack.lastResult.@codeVisibility == 'MEM' ? parentApplication.iconDataTrackMember : (getDataTrack.lastResult.@codeVisibility == 'MEMCOL' ? parentApplication.iconDataTrackMemberCollab : (getDataTrack.lastResult.@codeVisibility == 'OWNER' ? parentApplication.iconDataTrackOwner : parentApplication.iconDataTrackPublic)))}"/>
			<mx:Label id="titleLabel" styleName="titleLabel" text="{'Data Track ' + getDataTrack.lastResult.@number}" />
			<mx:LinkButton styleName="linkMenuButton" label="Download" 
						   icon="@Embed(source='../../assets/download.png')" 
						   enabled="true" visible="false" includeInLayout="false"
						   click="{parentDocument.treeItemToSelect=null;promptToDownloadSelectedItems()}" id="downloadButton" />
            <mx:Spacer width="100%"/>
			<mx:Label text="Created " 
					  visible="{getDataTrack.lastResult.@createdBy != '' || getDataTrack.lastResult.@createDate != ''}"
					  includeInLayout="{getDataTrack.lastResult.@createdBy != '' || getDataTrack.lastResult.@createDate != ''}" textAlign="right"/>
			<mx:Label text="by" 
				  visible="{getDataTrack.lastResult.@createdBy != ''}"
				  includeInLayout="{getDataTrack.lastResult.@createdBy != ''}"/>
			<mx:Label text="{getDataTrack.lastResult.@createdBy + ' ' + getDataTrack.lastResult.@createDate}"/>
	</mx:HBox>
	
<mx:HTTPService             
	id="getDataTrack" 
	url="GetDataTrack.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onGetDataTrack(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get data track', event)"
	method="POST"
	useProxy="false">
	<mx:request>
	</mx:request>
</mx:HTTPService> 
	
<mx:HTTPService             
	id="saveDataTrack" 
	url="SaveDataTrack.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onSaveDataTrack(event)"
	fault="parentApplication.onFailHttpRequest('Failed to update data track', event)"
	method="POST"
	useProxy="false">
	<mx:request>
	</mx:request>
</mx:HTTPService>  
	
	
<mx:HTTPService             
	id="getDownloadEstimatedSize" 
	url="GetEstimatedDownloadDataTrackSize.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onGetDownloadEstimatedSize(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get data track download estimated size', event)"
	method="POST"
	useProxy="false">
	<mx:request>
	</mx:request>
</mx:HTTPService>  
	
	
<mx:XMLListCollection id="dataTrackFiles" source="{getDataTrack.lastResult.Files..File}"/>
<mx:XMLListCollection id="dataTrackFilesToRemove"/> 
<mx:XMLListCollection id="collaborators" source="{getDataTrack.lastResult.Collaborators.AppUser}"/>
<mx:XMLListCollection id="possibleCollaborators" source="{getDataTrack.lastResult.PossibleCollaborators.AppUser}"/>
<mx:XMLListCollection id="possibleInstitutions" source="{getDataTrack.lastResult.PossibleInstitutions.Institution}"/>
<mx:XMLListCollection id="dataTrackProperties" source="{getDataTrack.lastResult..PropertyEntry}"/>
<mx:XMLListCollection id="sortedTopics"
					  source="{getDataTrack.lastResult.topics.Topic}">
	<mx:sort>
		<mx:Sort>
			<mx:fields>
				<mx:SortField id="sortField"
							  name="@name"
							  caseInsensitive="true" />
			</mx:fields>
		</mx:Sort>
	</mx:sort>
</mx:XMLListCollection>
	
<mx:Script>	
<![CDATA[
	import mx.controls.Alert;
	import mx.managers.PopUpManager;
	import mx.rpc.events.ResultEvent;
	
	import views.admin.PropertyWindow;
	import views.datatrack.FolderInfoWindow;
	import views.util.StringUtil;
	import mx.events.CloseEvent;
	
	private const DOWNLOAD_FILES_URL:String       = "DownloadDataTrackFileServlet.gx"; 
	private const SUGGESTED_LOCAL_FILENAME:String = "gnomex-datatracks";  
	
	import views.experiment.DownloadProgressView;

	private static var alertButtonWidthDefault:Number = Alert.buttonWidth;
	
	private static const  KB:Number = Math.pow(2, 10);
	private static const  MB:Number = Math.pow(2, 20);
	private static const  GB:Number = Math.pow(2, 30);
	private static const   ZIP_MAX_SIZE:Number = (1 * GB);
	
	private var downloadKeys:String = new String();
	private var estimatedDownloadSize:Number = new Number();
	private var uncompressedDownloadSize:Number = new Number();
	
	private function onGetDataTrack(event:ResultEvent):void {
		if (getDataTrack.lastResult.name() == "DataTrack") {
			if (this.parentDocument.currentState == "AdminState") {
				this.dataTrackOwnerStack.selectedIndex = 0;
				this.dataTrackLabStack.selectedIndex = 0;
			} else if (this.parentDocument.currentState == "UserState") {
				this.dataTrackOwnerStack.selectedIndex = 1;
				this.dataTrackLabStack.selectedIndex = getDataTrack.lastResult.@canWrite == 'Y' ? 0 : 1;
			}
			
			this.visibilityRadioGroup.selectedValue = getDataTrack.lastResult.@codeVisibility;
			this.instituteCombo.enabled = this.possibleInstitutions.length > 1;
			if (getDataTrack.lastResult.@idInstitution != null && getDataTrack.lastResult.@idInstitution != '') {
				for each(var institute:Object in possibleInstitutions) {
					if (institute.@idInstitution == getDataTrack.lastResult.@idInstitution.toString()) {
						instituteCombo.selectedItem = institute;
						break;
					}
				} 
			} else {		
				var hasDefault:Boolean = false;
				if(radioInstitutionVisibility.selected && radioInstitutionVisibility.enabled) {
					for each(var inst:Object in possibleInstitutions) {
						if (inst.@isDefault == 'Y') {
							this.instituteCombo.selectedItem =  inst;
							hasDefault = true;
							break;
						}
					}	
				} else if(radioInstitutionVisibility.selected && !radioInstitutionVisibility.enabled){
					// Default to Member if institution selected but not enabled
					this.visibilityRadioGroup.selectedValue = 'MEM';					
				}					
				if(!hasDefault) {
					this.instituteCombo.selectedIndex = 0;
				}						
			}			
			
			
			labCombo.selectedItem = null;
			for each(var l:XML in parentApplication.promptedLabList) {
				if (l.@idLab == getDataTrack.lastResult.@idLab.toString()) {
					labCombo.selectedItem = l;
					break;
				}
			}
			if (parentDocument.currentState == "AdminState") {
				ownerCombo.selectedItem              = parentApplication.getAppUserList.lastResult.AppUser.(@idAppUser == getDataTrack.lastResult.@idAppUser);
			}
			this.dirtyDataTrack.resetDirty();
			
		} else {
			Alert.show(getDataTrack.lastResult..ACTMESSAGE.@TEXT);
		}		
	}
	
	
	private function checkTopicsVisibility():void {
		if(!parentApplication.isTopicsSupported) {
			if (theTab.contains(this.topicsTab)) {
				theTab.removeChild(topicsTab);
			}				
		}	
	}	
	
	private function onUpdateDataTrack(event:ResultEvent):void {
		if (saveDataTrack.lastResult.name() == "SUCCESS") {
			this.dirtyDataTrack.resetDirty();
			parentDocument.treeItemToSelect = parentDocument.browseTree.selectedItem;
			parentDocument.refreshDataTracks();			
		} else {
			Alert.show(saveDataTrack.lastResult..ACTMESSAGE.@TEXT);
		}	
	}

	private function removeRichTextButtons():void {
		this.descriptionRichText.toolbar.removeChild(descriptionRichText.colorPicker);
		this.descriptionRichText.toolbar.removeChild(descriptionRichText.fontFamilyCombo);
		this.descriptionRichText.toolbar.removeChild(descriptionRichText.fontSizeCombo);
	}
	
	public function save():void {
		var params:Object = new Object();
		params.idDataTrack            = parentDocument.browseTree.selectedItem.@idDataTrack;
		params.name                   = this.dataTrackName.text;
		params.description            = StringUtil.cleanRichTextHTML(this.descriptionRichText.htmlText);
		params.summary                = this.dataTrackSummary.text;
		params.codeVisibility         = this.visibilityRadioGroup.selectedValue != null ? visibilityRadioGroup.selectedValue : "";
		if (params.codeVisibility == 'INST') {
			params.idInstitution = this.instituteCombo.selectedItem != null ? this.instituteCombo.selectedItem.@idInstitution : "";
		} 
		params.idLab                  = this.labCombo.selectedItem != null ? this.labCombo.selectedItem.@idLab : "";
		if (parentDocument.currentState == "AdminState") {
			params.idAppUser              = ownerCombo.selectedItem != null ? ownerCombo.selectedItem.@idAppUser: "";
		} else {
			params.idAppUser              = this.getDataTrack.lastResult.@idAppUser;
		}
		
		params.collaboratorsXML  = "<collaborators>"    + collaborators.toXMLString() +  "</collaborators>";
		
		params.filesToRemoveXML  = "<filesToRemove>" + dataTrackFilesToRemove.toXMLString() + "</filesToRemove>";
		
		this.initializePropertiesFromComponents();
		params.propertiesXML = "<dataTrackProperties>" + dataTrackProperties.toXMLString() + "</dataTrackProperties>";
		
		saveDataTrack.send(params);
	}
	
	
	private function onSaveDataTrack(event:ResultEvent):void {
		if (saveDataTrack.lastResult.name() == "SUCCESS") {
			this.dirtyDataTrack.resetDirty();
			parentDocument.treeItemToSelect = this.parentDocument.browseTree.selectedItem;
			parentDocument.refreshDataTracks();			
		} else {
			Alert.show(saveDataTrack.lastResult..ACTMESSAGE.@TEXT);
		} 
	}
	
	private function removeDataTrackFile():void {
		this.dirtyDataTrack.setDirty();
		for each(var item:Object in dataTrackFileGrid.selectedItems) {
			dataTrackFilesToRemove.addItem(item);
			dataTrackFiles.removeItemAt(dataTrackFiles.getItemIndex(item));
		}
	}


	
	/**
	 *
	 *  ANNOTATION PROPERTY FUNCTIONS
	 *  
	 */
	private function onCreatePropertyLabel(dataTrackProperty:XML, index:int):void {
		if (dataTrackProperty.@codePropertyType == 'TEXT') {
			propertyValueViewStack[index].selectedIndex = 1;
			propertyText[index].text = dataTrackProperty.@value;
		} else if (dataTrackProperty.@codePropertyType == 'URL') {
			propertyValueViewStack[index].selectedIndex = 0;
		} else  if (dataTrackProperty.@codePropertyType == 'OPTION') {
			propertyValueViewStack[index].selectedIndex = 2;
			propertyCombo[index].dataProvider =  dataTrackProperty..PropertyOption;
			for each(var theOption:XML in dataTrackProperty..PropertyOption) {
				if (theOption.@selected == 'Y') { 
					propertyCombo[index].selectedItem =  theOption;
					break;   			
				}
			}
		} else  if (dataTrackProperty.@codePropertyType == 'MOPTION') { 
			propertyValueViewStack[index].selectedIndex = 4; 
		} else if (dataTrackProperty.@codePropertyType == 'CHECK') {
			propertyValueViewStack[index].selectedIndex = 3;
			propertyCheck[index].selected = dataTrackProperty.@value == 'Y' ? true : false;
		}
	}
	
	private function initializePropertiesFromComponents():void {
		for (var i:int = 0; i < dataTrackProperties.length; i++) {
			var property:XML = XML(dataTrackProperties.getItemAt(i));
			if (propertyValueViewStack[i].selectedIndex == 0) {
				// url
				property.@value = "";
				var urlIdx:int = 0;
				for each (var propertyValue:XML in  property..PropertyValue) {
					var url:String = this.urlText[i][urlIdx].text;
					var alias:String = this.aliasText[i][urlIdx].text;
					
					if (url == 'Enter URL here...' || url == '') {
						continue;
					}
					
					var pv:String = url;
					if (alias != null && alias != 'Enter alias here...') {
						pv += ',' + alias;
					}
					propertyValue.@value = pv;
					urlIdx++;
				}

			} else if (propertyValueViewStack[i].selectedIndex == 1) {
				// text
				property.@value = propertyText[i].text;
			} else if (propertyValueViewStack[i].selectedIndex == 2) {
				// combo
				property.@value = "";
				for each (var option:XML in  property..PropertyOption) {
					if (propertyCombo[i].selectedItem != null &&
						option.@idPropertyOption == propertyCombo[i].selectedItem.@idPropertyOption) {
						option.@selected = 'Y';
					} else {
						option.@selected = 'N';
					}
				}
			} else if (propertyValueViewStack[i].selectedIndex == 3) {
				// check
				property.@value = propertyCheck[i].selected ? 'Y' : 'N';
			} else if (propertyValueViewStack[i].selectedIndex == 4) {
				// multi-select
				property.@value = "";		
				var idx:int = 0;
				for each (var opt:XML in  property..PropertyOption) {
					if (multiselectCheck[i][idx].selected) {
						opt.@selected = 'Y';
						if (property.@value != '') {
							property.@value += ",";
						}
						property.@value += opt.@name;
					} else {
						opt.@selected = 'N';
					}
					idx++;
				}
			}
		}
	}
	
	private function onPropertyURLClick(event:TextEvent):void {
		var url:URLRequest = new URLRequest(event.target.text);
		navigateToURL( url, '_blank' );
	}
	
	private function removeProperty(dataTrackProperty:XML):void {
		this.initializePropertiesFromComponents();
		dataTrackProperties.removeItemAt(dataTrackProperties.getItemIndex(dataTrackProperty));
	}
	
	
	private function selectURLText(indices:Array):void {
		if (urlText[indices[0]][indices[1]].text == 'Enter URL here...') {
			urlText[indices[0]][indices[1]].selectionBeginIndex = 0;
			urlText[indices[0]][indices[1]].selectionEndIndex = urlText[indices[0]][indices[1]].text.length;
		} 
	}

	private function selectAliasText(indices:Array):void {
		if (aliasText[indices[0]][indices[1]].text == 'Enter alias here...') {
			aliasText[indices[0]][indices[1]].selectionBeginIndex = 0;
			aliasText[indices[0]][indices[1]].selectionEndIndex = aliasText[indices[0]][indices[1]].text.length;
		} 
	}

	private function onChangeURLText(indices:Array):void {
		var newText:String = urlText[indices[0]][indices[1]].text;
		var values:XMLListCollection = XMLListCollection(urlRepeater[indices[0]].dataProvider);
		values.getItemAt(indices[1]).@value = newText;
		dirtyDataTrack.setDirty();
	}
	
	private function showURLLink(indices:Array):void {
		if (urlText[indices[0]][indices[1]].text == 'Enter URL here...') {
			return;
		}
		var isNew:Boolean = false;
		if ( urlLink[indices[0]][indices[1]].label == 'Enter URL here...' || urlLink[indices[0]][indices[1]].label == '') {
			isNew = true;
		}
		
		var newUrlText:String = urlText[indices[0]][indices[1]].text;
		var newUrlAlias:String = aliasText[indices[0]][indices[1]].text;
		var newUrlDisplay:String = "";
		if (newUrlAlias != 'Enter alias here...' && newUrlAlias != '') {
			newUrlDisplay = newUrlAlias;
		} else {
			newUrlDisplay = newUrlText;
		}
		
		var values:XMLListCollection = XMLListCollection(urlRepeater[indices[0]].dataProvider);
		values.getItemAt(indices[1]).@urlDisplay = newUrlDisplay;
		values.getItemAt(indices[1]).@url = newUrlText;
		values.getItemAt(indices[1]).@urlAlias= newUrlAlias;		
		
		urlLink[indices[0]][indices[1]].label = newUrlDisplay;
		
		urlStack[indices[0]][indices[1]].selectedIndex = 0;
		
		if (isNew) {
			addURL(indices);
		}
		
		
	}

	private function navigateToURLLink(indices:Array):void {
		if (urlLink[indices[0]][indices[1]].label == 'Enter URL here...') {
			return;
		}
		var values:XMLListCollection = XMLListCollection(urlRepeater[indices[0]].dataProvider);
		var urlString:String = values.getItemAt(indices[1]).@url;
		if (urlString.indexOf("http") < 0) {
			urlString = "http://" + urlString;
		}
		var url:URLRequest = new URLRequest(urlString);
		navigateToURL( url, '_blank' );
	}
	
	private function showURLEdit(indices:Array):void {
		urlStack[indices[0]][indices[1]].selectedIndex = 1;
	}
	
	private function tabToURLText(indices:Array):void {
		urlText[indices[0]][indices[1]].setFocus();
	}
	

	private function removeURL(indices:Array):void {
		var values:XMLListCollection = XMLListCollection(urlRepeater[indices[0]].dataProvider);
		
		var property:XML = XML(XMLListCollection(propertyRepeater.dataProvider).getItemAt(indices[0]));
		delete property.PropertyEntryValue[indices[1]];
		
		values.removeItemAt(indices[1]);
		
		this.initializePropertiesFromComponents();
		
		propertyMainBox.removeAllChildren();
		propertyRepeater.initializeRepeater(propertyMainBox, true);
		
	}
	
	private function addURL(indices:Array):void {
		var values:XMLListCollection = XMLListCollection(urlRepeater[indices[0]].dataProvider);
		
		var property:XML = XML(XMLListCollection(propertyRepeater.dataProvider).getItemAt(indices[0]));
		property.appendChild(new XMLList("<PropertyEntryValue idPropertyEntryValue='' urlAlias='Enter alias here...' url='Enter URL here...'/>"));
		values = new XMLListCollection(property.PropertyEntryValue);
		
		this.initializePropertiesFromComponents();
		propertyMainBox.removeAllChildren();
		propertyRepeater.initializeRepeater(propertyMainBox, true);
	}
	
	private function showPropertyConfigWindow():void {
		var configWindow:PropertyWindow = PropertyWindow(PopUpManager.createPopUp(parentApplication.theBody, PropertyWindow, true));
		PopUpManager.centerPopUp(configWindow);
		configWindow.showSampleAnnotations.selected = false;
		configWindow.showAnalysisAnnotations.selected = false;
		configWindow.showDataTrackAnnotations.selected = true;
		configWindow.onPropertyRefreshed(null);
		
	}
	
	private function showCollaboratorWindow():void {
		var collaboratorWindow:CollaboratorWindow = CollaboratorWindow(PopUpManager.createPopUp(parentApplication.theBody, CollaboratorWindow, true));
		PopUpManager.centerPopUp(collaboratorWindow);
		collaboratorWindow.init("Collaborators for Data Track " + getDataTrack.lastResult.@number, 
			collaborators, 
			possibleCollaborators);
		
	}

	private function showUploadWindow(viewStackIndex:int):void {
		var uploadWindow:DataTrackUploadWindow = DataTrackUploadWindow(PopUpManager.createPopUp(parentApplication.theBody, DataTrackUploadWindow, true));
		PopUpManager.centerPopUp(uploadWindow);
		uploadWindow.idDataTrack = parentDocument.browseTree.selectedItem.@idDataTrack;
		uploadWindow.idDataTrackFolder = parentDocument.browseTree.selectedItem.@idDataTrackFolder;
		uploadWindow.idGenomeBuild = parentDocument.browseTree.selectedItem.@idGenomeBuild;
		uploadWindow.dataTrackName = parentDocument.browseTree.selectedItem.@label;
		uploadWindow.uploadBrowseButton.setFocus();
		uploadWindow.init();
		uploadWindow.mainStack.selectedIndex = viewStackIndex;
	}
	
	private function showFolderInfoWindow():void {
		var infoWindow:FolderInfoWindow = FolderInfoWindow(PopUpManager.createPopUp(parentApplication.theBody, FolderInfoWindow, true));
		PopUpManager.centerPopUp(infoWindow);
		infoWindow.init(XML(this.getDataTrack.lastResult));
		
	}

	/*******************************************
	 * 
	 * Download Functions
	 * 
	 */
	public function promptToDownloadSelectedItems():void {
		var itemsToDownload:Array = new Array();
		downloadKeys = new String();
		for each(var item:Object in parentDocument.browseTree.selectedItems) {
			var dataTracks:Array = new Array();
			if (item.name() == "DataTrack") {
				dataTracks.push(item);
			} else {
				getChildDataTracks(item, dataTracks);
			}
			
			for each (var dataTrack:Object in dataTracks) {
				// Get rid of duplicates
				var keep:Boolean = true;
				
				for each(var di:Object in itemsToDownload) {
					if (di.@idDataTrack == dataTrack.@idDataTrack) {
						keep = false;
						break;
					}
				}
				if (keep) {
					itemsToDownload.push(dataTrack);
					var idDataTrackFolder:Object = "-99";
					
					if(dataTrack.hasOwnProperty("@idDataTrackFolder") && dataTrack.@idDataTrackFolder != "") {
						idDataTrackFolder = dataTrack.@idDataTrackFolder;
					}
					//var idDataTrackFolder:Object = dataTrack.@idDataTrackFolder != "" ? dataTrack.@idDataTrackFolder : "-99";
					downloadKeys += dataTrack.@idDataTrack + "," + idDataTrackFolder + ":";         						
				}
			}
		}
		if (itemsToDownload.length == 0) {
			Alert.show("Please select the data tracks or folders to download.");
			return;
		}
		var params:Object = new Object();
		params.keys = downloadKeys;
		this.getDownloadEstimatedSize.send(params);
	}
	
	
	private function onGetDownloadEstimatedSize(event:ResultEvent):void {
		if (getDownloadEstimatedSize.lastResult.@size == 0) {
			Alert.show("No data files exist for selected item(s).", "");
		} else {
			estimatedDownloadSize = getDownloadEstimatedSize.lastResult.@size;
			uncompressedDownloadSize = getDownloadEstimatedSize.lastResult.@uncompressedSize;
			if (parentApplication.isFDTSupported) {
				promptForDownloadMethod();
			} else {
				Alert.show( "Ready to download approximately " + getFileSizeText(estimatedDownloadSize) + " of data.  Proceed?",
					"",
					(Alert.YES | Alert.NO), this, 
					downloadFiles); 
			}
		}
	}
	
	private function promptForDownloadMethod():void {
		var downloadSizeRange:String = getFileSizeText(estimatedDownloadSize);
		if (downloadSizeRange != getFileSizeText(uncompressedDownloadSize)) {
			downloadSizeRange += " - " + getFileSizeText(uncompressedDownloadSize);
		}
		var recommended:String = "(FDT download is recommended for downloads > 1GB.)";
		
		Alert.buttonWidth = 120; 
		Alert.yesLabel = "Normal download";
		Alert.noLabel = "FDT download";
		Alert.show( "Ready to download approximately " + downloadSizeRange + ".\n" +
			"Which download mechanism do you want to use?\n\n" + recommended,
			"Choose download method",
			(Alert.YES | Alert.NO | Alert.CANCEL), this, 
			onPromptForDownloadMethod);
		
	}
	
	private function onPromptForDownloadMethod(event:CloseEvent):void {
		Alert.yesLabel = "Yes";
		Alert.noLabel = "No";
		Alert.buttonWidth = alertButtonWidthDefault;
		if (event.detail==Alert.YES) {
			// If normal download, prompt about size first.
			Alert.show( "Ready to download approximately " + getFileSizeText(estimatedDownloadSize) + " of data.  Proceed?",
				"",
				(Alert.YES | Alert.NO), this, 
				downloadFiles);					
		} else  if (event.detail == Alert.NO){
			// If this is an FDT download, make the request to download the 
			// FDT webstart application
			var url:URLRequest = new URLRequest('FastDataTransferDownloadDataTrackServlet.gx');	
			url.contentType = "text/xml";
			url.method = URLRequestMethod.GET;
			navigateToURL(url, '_self');	
		} 
	}
	
	
	public static function getFileSizeText(theFileSize:Number):String {
		var size:Number = 0;
		var sizeTxt:String = "";
		if (theFileSize > GB ) {
			// Round gigabyte to the one decimal place
			size = Math.round((theFileSize / GB) * 10) / 10;
			if (size == 0) {
				size = 1;
			} 
			sizeTxt = size + " GB";
		}  else if (theFileSize > MB ) {
			// Round megabyte to neareast whole number
			size = Math.round(theFileSize / MB);
			if (size == 0) {
				size = 1;
			}
			sizeTxt = size + " MB";
		} else if (theFileSize > KB ) {
			// Round kb to the nearest 100th place
			size = Math.round((theFileSize / KB) / 100) * 100;
			if (size == 0) {
				size = 1;
			}
			sizeTxt = size + " KB";
		} else {
			// Round bytes to nearest 100th place
			size = Math.round(theFileSize / 100) * 100;
			if (size == 0) {
				size = 1;
			}
			sizeTxt = size + " bytes";
		}
		return sizeTxt;
	}
	
	
	private function downloadFiles(event:CloseEvent):void {
		if (event.detail==Alert.YES) {
			var parms:URLVariables = new URLVariables();
			parms.mode = "zip";
			
			var progressWindow:DownloadProgressView = new DownloadProgressView();	        
			progressWindow.init(this, 
				this.DOWNLOAD_FILES_URL, 
				parms, 
				this.downloadButton, 
				estimatedDownloadSize, 
				this.SUGGESTED_LOCAL_FILENAME);
		}
		
	} 
	
	private function getChildDataTracks(item:Object, children:Array):void {
		for each(var child:Object in item.children()) {
			if (child.name() == "DataTrack") {
				children.push(child);											
			} else {
				this.getChildDataTracks(child, children);
			}
		}
	}	
	
	public function getTopicIcon(item:Object):Class {
		return parentApplication.iconTopic;
	}
	
	private function goToTopic():void {  
		if (this.topicsTree.selectedItem.name() == "Topic") {
			parentApplication.showTopicForNumber(topicsTree.selectedItem.@idTopic);	 
		}	
	}
	
]]>
</mx:Script>

	<mx:TabNavigator id="theTab" width="100%" height="100%" tabWidth="130"  styleName="panelBody">
		
		<mx:VBox width="100%" height="100%" label="Summary" paddingLeft="4" paddingRight="4" paddingBottom="4" verticalGap="0" paddingTop="0">
				<mx:HBox width="100%" verticalAlign="middle" horizontalGap="2">
					<mx:Label text="Name"/>
					<mx:TextInput width="100%" maxChars="2000" text="{getDataTrack.lastResult.@name}" id="dataTrackName" change="{dirtyDataTrack.setDirty()}"/>					    	
				</mx:HBox>
				<mx:VBox width="100%" verticalGap="0">
					<mx:Label text="Summary" width="70"/>
					<mx:TextInput width="100%" text="{getDataTrack.lastResult.@summary}" id="dataTrackSummary" change="{dirtyDataTrack.setDirty()}" maxChars="5000"  height="40"/>
				</mx:VBox>
				<mx:VBox width="100%" id="hbox3" verticalGap="0" height="100%">
					<mx:Label text="Description" width="126"/>
					<mx:RichTextEditor  borderStyle="none"  headerHeight="0"  
										id="descriptionRichText" width="100%" 
										htmlText="{getDataTrack.lastResult.@description}" 
										showControlBar="{getDataTrack.lastResult.@canWrite == 'Y' ? true : false}"
										change="{this.dirtyDataTrack.setDirty()}"
										creationComplete="{removeRichTextButtons()}" 
										paddingLeft="0" paddingRight="0" paddingTop="0" 
										roundedBottomCorners="false" paddingBottom="0" 
										borderThicknessRight="0" borderThicknessLeft="0" 
										borderThicknessBottom="0" borderThickness="0" 
										borderThicknessTop="0" height="100%" minHeight="80" />
				</mx:VBox>
				
		</mx:VBox>
			
		
		<mx:VBox width="100%" height="100%" label="Annotations" paddingLeft="4" paddingRight="4" paddingBottom="4" verticalGap="0" paddingTop="0">
			<mx:VBox id="propertyMainBox" width="100%" height="100%" verticalGap="4" paddingTop="2" >
				<mx:Repeater  id="propertyRepeater" 
							  dataProvider="{dataTrackProperties}">
					<mx:HBox verticalAlign="top" width="100%"  horizontalGap="0" >
						<mx:HBox width="126" horizontalGap="0" paddingLeft="0" paddingRight="0">
							<mx:Text text="{propertyRepeater.currentItem.@name}" width="100%"  styleName="labelSmall"
									 creationComplete="{onCreatePropertyLabel(event.currentTarget.getRepeaterItem(), event.target.instanceIndices[0])}"/>
							
						</mx:HBox>
						<mx:ViewStack id="propertyValueViewStack" creationPolicy="all" height="100%" width="250" >
							<mx:VBox id="urlOuterBox" width="100%" height="100%" verticalGap="0" >
								<mx:Repeater id="urlRepeater" dataProvider="{propertyRepeater.currentItem.PropertyEntryValue}" >
									<mx:ViewStack id="urlStack"  selectedIndex="{urlRepeater.currentItem.@url == 'Enter URL here...' ? 1 : 0}" width="100%" creationPolicy="all">
										<mx:HBox  id="urlBox" verticalAlign="middle" horizontalGap="0" width="100%">
											<mx:LinkButton id="urlLink" label="{urlRepeater.currentItem.@urlDisplay }"  
														   click="{navigateToURLLink(event.target.instanceIndices)}" 
														   paddingLeft="0" textDecoration="underline" color="#121CE8" 
														   width="190" textAlign="left"/>
											<mx:LinkButton label="Edit" 
														   click="{showURLEdit(event.target.instanceIndices)}" 
														   styleName="linkMenuButtonSmall"/>
											<mx:Image source="{parentApplication.iconSmallDelete}"  
													  click="{removeURL(event.currentTarget.instanceIndices)}" />						
										</mx:HBox>
										<mx:HBox width="100%" verticalAlign="middle"  horizontalGap="2" horizontalAlign="left">
											<mx:TextInput id="aliasText"  enter="{tabToURLText(event.target.instanceIndices)}" 
														  click="{selectAliasText(event.currentTarget.instanceIndices)}" 
														  change="{dirtyDataTrack.setDirty()}"
														  editable="{getDataTrack.lastResult.@canWrite == 'Y'}"
														  text="{urlRepeater.currentItem.@urlAlias}"  
														  width="100" color="#8D7B7B"/>	
											<mx:TextInput id="urlText" text="{urlRepeater.currentItem.@url}" 
														  enter="{showURLLink(event.target.instanceIndices)}" 
														  editable="{getDataTrack.lastResult.@canWrite == 'Y'}"
														  change="{onChangeURLText(event.target.instanceIndices)}" 
														  click="{selectURLText(event.currentTarget.instanceIndices)}" 
														  width="100%" color="#8D7B7B"/>						
											<mx:LinkButton label="Show link" click="{showURLLink(event.target.instanceIndices)}" styleName="linkMenuButtonSmall"/>
										</mx:HBox>
									</mx:ViewStack>		
									
								</mx:Repeater>
								
							</mx:VBox>
							
							<mx:HBox >
								<mx:TextInput id="propertyText" change="{dirtyDataTrack.setDirty()}" styleName="labelSmall" text="{propertyRepeater.currentItem.@value}" width="100%">
								</mx:TextInput> 
							</mx:HBox>
							
							<mx:HBox >
								<mx:ComboBox id="propertyCombo" change="{dirtyDataTrack.setDirty()}" styleName="labelSmall" width="240" labelField="@name">
								</mx:ComboBox>						
							</mx:HBox>
							
							<mx:HBox width="100%" >
								<mx:CheckBox id="propertyCheck"  click="{dirtyDataTrack.setDirty()}" styleName="labelSmall">
								</mx:CheckBox>
							</mx:HBox>
							
							<mx:VBox id="multiselectOuterBox" width="100%" height="100%" verticalGap="0" >
								<mx:Repeater id="multiselectRepeater" dataProvider="{propertyRepeater.currentItem.PropertyOption}" >
									<mx:CheckBox id="multiselectCheck"  styleName="labelSmall" 
												 label="{multiselectRepeater.currentItem.@name}"  
												 paddingLeft="0"  
												 paddingTop="0" 
												 click="{dirtyDataTrack.setDirty()}"
												 paddingBottom="0"
												 selected="{multiselectRepeater.currentItem.@selected == 'Y' ? true : false}"
												 width="100%" textAlign="left"/>
								</mx:Repeater>
							</mx:VBox>
							
						</mx:ViewStack>
					</mx:HBox>
				</mx:Repeater>	
			</mx:VBox>
			<mx:LinkButton label="Configure annotations ..." 
						   visible="{getDataTrack.lastResult.@canWrite == 'Y'}"
						   includeInLayout="{getDataTrack.lastResult.@canWrite == 'Y'}"
						   click="showPropertyConfigWindow()" 
						   styleName="linkMenuButtonSmall"  
						   textAlign="left" paddingLeft="0"/>					   
			
		</mx:VBox>

		
		<mx:VBox width="100%" height="100%" label="Files" id="vbox7" paddingTop="0">
			<mx:VBox width="100%" height="100%" verticalGap="0" id="vbox9">
				<mx:HBox horizontalGap="2" width="100%">
					<mx:LinkButton icon="@Embed(source='../../assets/page_remove.png')"
								   disabledIcon="@Embed(source='../../assets/page_remove_disable.png')"
								   enabled="{dataTrackFileGrid.selectedItem != null &amp;&amp; getDataTrack.lastResult.@canWrite == 'Y' ? true : false}"  
								   styleName="linkMenuButton"
								   click="{removeDataTrackFile()}"  label="Remove file(s) from data track"/>
					<mx:Spacer width="100%"/>
					<mx:Label text="{'(' + dataTrackFiles.length + ' files)'}"/>
				</mx:HBox>
				<mx:DataGrid  id="dataTrackFileGrid"
							  dataProvider="{dataTrackFiles}"
							  showHeaders="true" editable="false"
							  width="100%"  height="100%"						    		 
							  allowMultipleSelection="true" >
					<mx:columns>
						<mx:DataGridColumn  dataField="@name" headerText="Name" width="100"/>  
						<mx:DataGridColumn  dataField="@lastModified" headerText="Date" width="10"/>  
						<mx:DataGridColumn  dataField="@size"  headerText="Size" width="10" />  
						<mx:DataGridColumn  dataField="@analysisLabel" editable="false" headerText="Analysis" width="100" itemRenderer="views.renderers.LinkButtonAnalysis"/>  
					</mx:columns>							
				</mx:DataGrid>
			</mx:VBox>
			
		</mx:VBox>
		
		
		
		<mx:VBox width="100%" height="100%" label="Visibility" paddingLeft="4" paddingRight="4" paddingBottom="4" verticalGap="0" paddingTop="0">
			<mx:HBox width="100%" horizontalGap="0" id="hbox1">
				<mx:Text id="labelApplication" text="The level of visibility for this data track:&#xd;"/>
				<mx:RadioButtonGroup id = "radioGroupSeqApp">       	
				</mx:RadioButtonGroup>
			</mx:HBox>
			<mx:HBox paddingLeft="20" horizontalGap="10" width="100%">
				<mx:VBox verticalGap="0">
					<mx:RadioButtonGroup id="visibilityRadioGroup"/>
					<mx:HBox horizontalGap="4" verticalAlign="middle">
						<mx:Image  scaleContent="false" width="16" height="16" source="{parentApplication.iconDataTrackOwner}"/>
						<mx:RadioButton value="OWNER" groupName="visibilityRadioGroup"  click="{dirtyDataTrack.setDirty();}" label="Owner       (the owner and the group manager)"/>								  
					</mx:HBox>
					<mx:HBox horizontalGap="4"  verticalAlign="middle">
						<mx:Image  scaleContent="false" width="16" height="16" source="{parentApplication.iconDataTrackMember}"/>
						<mx:RadioButton value="MEM" selected="true" groupName="visibilityRadioGroup"  click="{dirtyDataTrack.setDirty();}" label="Members   (all members of the group)"/>
					</mx:HBox>
					<mx:HBox horizontalGap="4"  verticalAlign="middle">
						<mx:Image scaleContent="false" width="16" height="16" source="{parentApplication.iconDataTrackInstitution}"/>
						<mx:RadioButton value="INST"  groupName="visibilityRadioGroup"  click="{dirtyDataTrack.setDirty();}" id="radioInstitutionVisibility" enabled="{possibleInstitutions.length > 0}" label="Institution  (all groups that are part of institution)"/>
						<mx:ComboBox width="210" dataProvider="{this.possibleInstitutions}" id="instituteCombo" labelField="@name"  enabled="{visibilityRadioGroup.selectedValue == 'INST'}">			       	
						</mx:ComboBox>					
					</mx:HBox>
					<mx:HBox horizontalGap="4"  verticalAlign="middle">
						<mx:Image  scaleContent="false" width="16" height="16" source="{parentApplication.iconDataTrackPublic}"/>
						<mx:RadioButton value="PUBLIC" label="Public        (anyone)" groupName="visibilityRadioGroup"  click="{dirtyDataTrack.setDirty();}"/>
					</mx:HBox>
					
				</mx:VBox>
			</mx:HBox>
			<mx:VBox width="100%"  verticalGap="0" paddingTop="15">
				<mx:HBox width="100%">
					<mx:Text  text="Individual collaborators allowed access to this data track:"/>
					<mx:Text text="(none)" paddingLeft="10" 
							 visible="{collaborators.length == 0}"
							 includeInLayout="{collaborators.length == 0}" fontStyle="italic"/>					
				</mx:HBox>
				<mx:HBox width="100%" paddingLeft="10">
					<mx:Tile id="collaboratorBox"   borderStyle="solid" visible="{collaborators.length > 0}"
							   includeInLayout="{collaborators.length > 0}"
							   verticalGap="0" horizontalGap="1" width="100%" paddingTop="0" paddingBottom="0" borderColor="#DBE0E3">
						<mx:Repeater id="collaboratorRepeater" dataProvider="{collaborators}">
							<mx:Text text="{collaboratorRepeater.currentItem.@name}" />
						</mx:Repeater>					
					</mx:Tile>
				</mx:HBox>
				<mx:HBox horizontalGap="0" width="100%" paddingLeft="9" textAlign="left" paddingTop="0">
					<mx:LinkButton label="Edit collaborator list" 
						click="showCollaboratorWindow()"  
						styleName="formLinkButton" 
						enabled="{possibleCollaborators.length > 0}"
						visible="{getDataTrack.lastResult.@canWrite == 'Y'}"
						includeInLayout="{getDataTrack.lastResult.@canWrite == 'Y'}"
						leading="0" horizontalGap="0" paddingLeft="1" paddingTop="0"/>
					<mx:Text text="(Collaborator list is empty.  Users must be designated as collaborator for the lab first.)"  
							 visible="{getDataTrack.lastResult.@canWrite == 'Y' &amp;&amp; possibleCollaborators.length == 0}"
							 includeInLayout="{getDataTrack.lastResult.@canWrite == 'Y' &amp;&amp; possibleCollaborators.length == 0}"/>
				</mx:HBox>
			</mx:VBox>	
			<mx:VBox verticalGap="4" width="100%">
				<mx:HBox horizontalGap="4" id="userGroupBox" paddingTop="15" verticalAlign="middle" width="100%">
					<mx:Label text="Lab" />
					<mx:ViewStack id="dataTrackLabStack"  width="200">
						<mx:HBox horizontalGap="0" paddingLeft="0" paddingRight="0" paddingBottom="0" paddingTop="0" width="100%">
							<mx:ComboBox id="labCombo" dataProvider="{parentApplication.promptedLabList}" width="200" labelField="@name" change="{dirtyDataTrack.setDirty()}"></mx:ComboBox>
						</mx:HBox>
						<mx:HBox horizontalGap="0" paddingLeft="0" paddingRight="0" paddingBottom="0" paddingTop="0" verticalAlign="middle">
							<mx:Label width="200" text="{getDataTrack.lastResult.@securityGroup}"/>							         			
						</mx:HBox>
					</mx:ViewStack>
					<mx:Label text="Owner"  id="label2" paddingLeft="5"/>
					<mx:ViewStack id="dataTrackOwnerStack"  width="200">
						<mx:HBox horizontalGap="0" paddingLeft="0" paddingRight="0" paddingBottom="0" paddingTop="0" width="100%">
							<mx:ComboBox width="200" id="ownerCombo" labelField="@displayName" dataProvider="{parentApplication.promptedAppUserList}" change="{dirtyDataTrack.setDirty()}"></mx:ComboBox>							         			
						</mx:HBox>
						<mx:HBox horizontalGap="0" paddingLeft="0" paddingRight="0" paddingBottom="0" paddingTop="0" verticalAlign="middle">
							<mx:Label width="200" text="{getDataTrack.lastResult.@owner}"/>							         			
						</mx:HBox>
					</mx:ViewStack>
				</mx:HBox>
				
			</mx:VBox>
		</mx:VBox>
		<mx:VBox verticalGap="0" width="100%" height="100%" id="topicsTab" label="Topics">
			<mx:Tree width="100%" height="100%" dataProvider="{sortedTopics}" id="topicsTree" 
					 showRoot="false" 
					 dragEnabled="true"
					 dropEnabled="false"
					 dragMoveEnabled="false"
					 iconFunction="getTopicIcon" 
					 doubleClickEnabled="true" 
					 itemDoubleClick="goToTopic()"
					 labelField="@name" >						
			</mx:Tree>
		</mx:VBox>		
	</mx:TabNavigator>
	<mx:ControlBar horizontalAlign="right" width="100%">	
		<mx:HBox width="100%" visible="{getDataTrack.lastResult.@canWrite == 'Y'}" includeInLayout="{getDataTrack.lastResult.@canWrite == 'Y'}" >
			<mx:LinkButton  label="Show folder(s)" styleName="linkMenuButton"
							visible="{parentDocument.currentState == 'AdminState'}"
							includeInLayout="{parentDocument.lcurrentState == 'AdminState'}"
							icon="@Embed(source='../../assets/folder.png')" 
							click="{showFolderInfoWindow()}"/>
			<mx:Spacer width="100%"/>
			<util:DirtyNote id="dirtyDataTrack"  />
			<mx:Button  label="Save" id="saveDataTrackButton" 
						click="save()" 
						enabled="{getDataTrack.lastResult.@canWrite == 'Y' ? true : false}"  
						icon="@Embed(source='../../assets/save.png')"  disabledIcon="@Embed(source='../../assets/save_disable.png')"/>
			
		</mx:HBox>
	</mx:ControlBar>
</mx:VBox>

