<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"     
		   label="Data Tracks" width="100%" height="100%" 
		   xmlns:views="views.*"  
		   xmlns:datatrack="views.datatrack.*"
		   xmlns:util="views.util.*"
		   xmlns:renderers="views.renderers.*"
		   creationPolicy="all"  show="init()"
		   cornerRadius="10" >
	<mx:states>
		<mx:State name="AdminState">
			<mx:SetProperty target="{reloadDas2ServerButton}" name="includeInLayout" value="{currentState == 'AdminState'}"/>
			<mx:SetProperty target="{reloadDas2ServerButton}" name="visible" value="{currentState == 'AdminState'}"/>
			<mx:SetStyle target="{reloadDas2ServerButton}" name="paddingRight" value="1"/>
			<mx:SetStyle target="{linkbutton4}" name="paddingRight" value="1"/>
			<mx:SetStyle target="{linkbutton3}" name="paddingRight" value="1"/>
			<mx:SetStyle target="{duplicateButton}" name="paddingRight" value="1"/>
			<mx:SetStyle target="{downloadButton}" name="paddingRight" value="1"/>
		</mx:State>
		<mx:State name="UserState"/>
		<mx:State name="GuestState"/>
	</mx:states>

<mx:HTTPService  
	id="getDataTrackList" 
	url="GetDataTrackList.gx"
	destination="getDataTrackList"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onGetDataTrackList(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get data track list', event)"
	method="POST" 
	useProxy="false">
	<mx:request>
	</mx:request>
</mx:HTTPService>
	
<mx:HTTPService             
	id="deleteOrganism" 
	url="DeleteOrganism.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onDeleteOrganism(event)"
	fault="parentApplication.onFailHttpRequest('Failed to remove species', event)"
	method="POST"
	useProxy="false">
	<mx:request>
	</mx:request>
</mx:HTTPService> 

<mx:HTTPService             
	id="deleteGenomeBuild" 
	url="DeleteGenomeBuild.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onDeleteGenomeBuild(event)"
	fault="parentApplication.onFailHttpRequest('Failed to remove genome version', event)"
	method="POST"
	useProxy="false">
	<mx:request>
	</mx:request>
</mx:HTTPService> 
	
<mx:HTTPService             
	id="moveDataTrackFolder" 
	url="MoveDataTrackFolder.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onMoveDataTrackFolder(event)"
	fault="parentApplication.onFailHttpRequest('Failed to move dataTrack folder', event)"
	method="POST"
	useProxy="false">
	<mx:request>
	</mx:request>
</mx:HTTPService>
	

<mx:HTTPService             
	id="deleteDataTrackFolder" 
	url="DeleteDataTrackFolder.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onDeleteDataTrackFolder(event)"
	fault="parentApplication.onFailHttpRequest('Failed to remove dataTrack folder', event)"
	method="POST"
	useProxy="false">
	<mx:request>
	</mx:request>
</mx:HTTPService> 

<mx:HTTPService             
	id="duplicateDataTrack" 
	url="DuplicateDataTrack.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onDuplicateDataTrack(event)"
	fault="parentApplication.onFailHttpRequest('Failed to duplicate dataTrack', event)"
	method="POST"
	useProxy="false">
	<mx:request>
		<idDataTrack>{this.browseTree.selectedItem.@idDataTrack}</idDataTrack>
		<idDataTrackFolder>{this.browseTree.selectedItem.@idDataTrackFolder}</idDataTrackFolder>
	</mx:request>
</mx:HTTPService>    

<mx:HTTPService             
	id="deleteDataTrack" 
	url="DeleteDataTrack.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onDeleteDataTrack(event)"
	fault="parentApplication.onFailHttpRequest('Failed to remove dataTrack', event)"
	method="POST"
	useProxy="false">
	<mx:request>
	</mx:request>
</mx:HTTPService> 

<mx:HTTPService             
	id="unlinkDataTrack" 
	url="UnlinkDataTrack.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onUnlinkDataTrack(event)"
	fault="parentApplication.onFailHttpRequest('Failed to unlink dataTrack', event)"
	method="POST"
	useProxy="false">
	<mx:request>
	</mx:request>
</mx:HTTPService> 
	
<mx:HTTPService             
	id="moveDataTrack" 
	url="MoveDataTrack.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onMoveDataTrack(event)"
	fault="parentApplication.onFailHttpRequest('Failed to move dataTrack', event)"
	method="POST"
	useProxy="false">
	<mx:request>
	</mx:request>
</mx:HTTPService>
	
<mx:HTTPService             
	id="makeUCSCLinks" 
	url="MakeDataTrackUCSCLinks.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onMakeUCSCLinks(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get UCSC link URLs', event)"
	method="POST"
	useProxy="false">
	<mx:request>
		<idDataTrack>{browseTree.selectedItem.@idDataTrack}</idDataTrack>
	</mx:request>
</mx:HTTPService> 

<mx:HTTPService             
	id="makeIGVLink" 
	url="MakeDataTrackIGVLink.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onMakeIGVLink(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get IGV link URL', event)"
	method="POST"
	useProxy="false">
	<mx:request>
		<idDataTrack>{browseTree.selectedItem.@idDataTrack}</idDataTrack>
		<launchIGV>{launchIGVString}</launchIGV>
	</mx:request>
</mx:HTTPService> 

<mx:HTTPService             
	id="makeLinks" 
	url="MakeDataTrackLinks.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onMakeLinks(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get link URLs', event)"
	method="POST"
	useProxy="false">
	<mx:request>
		<idDataTrack>{browseTree.selectedItem.@idDataTrack}</idDataTrack>
	</mx:request>
</mx:HTTPService> 

<mx:HTTPService             
	id="refreshDAS2Server" 
	url="genome/refresh"
	resultFormat="e4x"
	showBusyCursor="false"
	result="onRefreshDAS2Server(event)"
	fault="parentApplication.onFailHttpRequest('Failed to refresh annotations on DAS/2 Server', event)"
	method="GET"
	useProxy="false">
	<mx:request>
	</mx:request>
</mx:HTTPService> 

<mx:HTTPService             
	id="verifyDAS2Refresh" 
	url="VerifyDas2Refresh.gx"
	resultFormat="e4x"
	showBusyCursor="true" 
	result="onVerifyDAS2Refresh(event)"
	fault="parentApplication.onFailHttpRequest('Failed to verify genome versions for DAS/2 Server reload', event)"
	method="GET"
	useProxy="false">
	<mx:request>
	</mx:request>
</mx:HTTPService> 

<mx:Script>
<![CDATA[
	import flash.events.TimerEvent;
	import flash.utils.Timer;
	
	import mx.collections.ArrayCollection;
	import mx.collections.XMLListCollection;
	import mx.controls.Alert;
	import mx.controls.Menu;
	import mx.controls.ToolTip;
	import mx.core.DragSource;
	import mx.events.CloseEvent;
	import mx.events.DragEvent;
	import mx.events.ListEvent;
	import mx.events.MenuEvent;
	import mx.managers.DragManager;
	import mx.managers.PopUpManager;
	import mx.managers.ToolTipManager;
	import mx.rpc.events.ResultEvent;
	
	import views.datatrack.RefreshDAS2ProgressWindow;
	import views.renderers.TreeNodeRenderer;
	
	private static var alertButtonWidthDefault:Number = Alert.buttonWidth;
	
	private var refreshDictionaries:Boolean = false;

	public var isInitialized:Boolean = false;
	
	public var dataTrackNumber:String = "";
	
	private var lastTreeItem:ListEvent;
	
	public var treeItemToSelect:Object = null; 
	
	public var refreshItem:Object = null; 

	private var organismFilterToSelect:Object = null;
	
	[Bindable]
	public var launchIGVString:String = "yes";

	[Bindable]
	private var dataTrackCountLabel:String = "";
	
	private var hitCount:int = 0;
	private var firstHitItem:XML = null;
	private var currentIndex:int = 0;
	private var hitToolTip:ToolTip = null;
	
	private var reassignIsMove:Boolean = false;
	
	private var itemToRemove:Object = null;
	private var itemsToRemove:Array = new Array();
	
	private var dragParams:ArrayCollection = null;
	private var dropNode:Object = null;
	
	private var refreshDAS2ProgressWindow:RefreshDAS2ProgressWindow;
	

	
	
	public function checkDirty():void {
	}

	

	
	public function init():void {
		if (refreshItem != null) {
			refreshDataTrackForItem();
		} else if (dataTrackNumber != "") {
			refreshDataTrackForLookup();
		} else {
			getDataTrackList.send();
		}
		checkSecurity();
		
		isInitialized = true;
	}
	
	private function checkSecurity():void {
		currentState = "";
		if (parentApplication.hasPermission("canWriteAnyObject")) {
			currentState = "AdminState";
		} else if (parentApplication.currentState == "GuestState") {
			currentState = "GuestState";
		} else {
			this.currentState = "UserState";
		}
	}
	
	private function onGetDataTrackList(event:ResultEvent): void {
		if (getDataTrackList.lastResult.name() != "DataTrackList") {
			Alert.show(getDataTrackList.lastResult..ACTMESSAGE.@TEXT);
			browseTree.visible = false;
			return;
		}

		if (refreshDictionaries) {
			refreshDictionaries = false;
			parentApplication.getOrganismList.send();
		}
		
		if (getDataTrackList.lastResult.Organism.length() == 0) {
			browseTree.visible = false;
		} else {
			browseTree.visible = true;
		}
		var dataTracks:XMLList = getDataTrackList.lastResult..DataTrack;
		dataTrackCountLabel = dataTracks.length() + " data tracks.";
		
		// If we are looking up a data track by number, get the tree item to select
		if (this.dataTrackNumber != "") {
			var dt:Object = getDataTrackList.lastResult..DataTrack.(@number == dataTrackNumber);			
			if (dt is XMLList && dt.length() > 0) {
				treeItemToSelect = dt[0];
			} else {
				treeItemToSelect = dt;
			}
			dataTrackNumber = "";
		} else if (this.refreshItem != null) {
			refreshItem == null;
		}
		
		// If search text was entered, select the first tree node that matches
		if (locateText.text != '' && locateText.text != 'Enter search here...') {
			selectEmphasizedTreeItem();
			hitCount = getDataTrackList.lastResult.@hitCount;
			this.locateStack.selectedIndex = 1;
			
			this.browseTree.validateNow();
			
			this.nextLocationButton.visible = hitCount > 0 ? true : false;
			
			// Show hit count in tooltip
			var s:String = hitCount + " match" + (hitCount == 1 ? " found." : "es found.");
			var globalPoint:Point  = this.locateText.contentToGlobal(new Point(this.locateText.x, this.locateText.y));
			hitToolTip = ToolTipManager.createToolTip(s, this.locateText.x + 80, globalPoint.y + 11) as ToolTip;
			
			// destroy tooltip in 10 seconds
			var minuteTimer:Timer = new Timer(1000, 5);
			minuteTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onToolTipTimerComplete);
			minuteTimer.start();
		} else {
			this.nextLocationButton.visible = false;
		}


		callLater(expandAppropriateNodes);    	
		
	}
	
	private function selectEmphasizedTreeItem():void {
		for each(var o:Object in getDataTrackList.lastResult.Organism) {
			var found:Boolean = selectEmphasizedNode(o);
			if (found) {
				break;
			}
		}	
	}
	
	private function selectEmphasizedNode(node:Object):Boolean {
		if (node.@emphasize == 'Y') {
			treeItemToSelect = node;
			return true;
		} else {
			var found:Boolean = false;
			for each(var child:Object in node.children()) {
				found = selectEmphasizedNode(child);
				if (found) {
					break;
				}
			}
			return found;
		}
	}
	
	private function expandAppropriateNodes():void {
		var itemToSelect:XML = getItemToSelect();
		
		if (itemToSelect != null && (itemToSelect.name() == "DataTrackFolder" || itemToSelect.name() == "DataTrack")) {
			// If there is a tree item selected, expand so it and its ancestors.
			recurseExpandParent(itemToSelect);
			browseTree.validateNow();
			callLater(selectTreeItem);
		} else {
			// If no item to select or we have selected organism or genome build, 
			// expand out to first folder level for all organisms, genome build.
			browseTree.expandItem(getDataTrackList.lastResult, true);
			for each(var organism:Object in getDataTrackList.lastResult..Organism) {
				if (organism.@isPopulated == "Y") {
					browseTree.expandItem(organism, true);  	
					
					for each(var gb:Object in organism.GenomeBuild) {
						browseTree.expandItem(gb, true);
					}
				}
			}
			callLater(selectTreeItem);
		}
		
	}		
	
	private function recurseExpandParent(item:XML):void {
		if (item.name() != 'DataTrack') {
			browseTree.expandItem(item, true);				
		}
		if (item.parent() != null) {
			recurseExpandParent(item.parent());									
		}
		
	}
	private function selectTreeItem():void {
		if (treeItemToSelect != null) {
			var item:Object = getItemToSelect();
			
			if (item != null) {
				browseTree.selectedItem = item;
				browseTree.scrollToIndex(browseTree.selectedIndex);
			} else {
				browseTree.selectedItem = null;
			}
		}
		selectView();				
		
	}
	
	private function getItemToSelect():XML {
		if (treeItemToSelect == null) {
			return null;
		} 
		if (treeItemToSelect is XMLList && treeItemToSelect.length() == 0) {
			return null;	
		}
		if (treeItemToSelect is XMLList && treeItemToSelect.length() > 0) {
			treeItemToSelect = treeItemToSelect[0];
		}
		
		var item:XMLList = null;
		if (treeItemToSelect.name() == "Organism") {
			item = getDataTrackList.lastResult.Organism.(@idOrganism == treeItemToSelect.@idOrganism);
		} else if (treeItemToSelect.name() == "GenomeBuild") {
			item = getDataTrackList.lastResult..GenomeBuild.(@idGenomeBuild == treeItemToSelect.@idGenomeBuild);
		} else if (treeItemToSelect.name() == "DataTrackFolder") {
			item = getDataTrackList.lastResult..DataTrackFolder.(@idDataTrackFolder == treeItemToSelect.@idDataTrackFolder);
		} else if (treeItemToSelect.name() == "DataTrack") {
			item = getDataTrackList.lastResult..DataTrack.(@idDataTrack == treeItemToSelect.@idDataTrack && @idDataTrackFolder == treeItemToSelect.@idDataTrackFolder);
		} else if (treeItemToSelect.name() == "LaunchDataTrack") {
			item = getDataTrackList.lastResult..DataTrack.(@idDataTrack == treeItemToSelect.@idDataTrack);
		}
		if (item != null && item.length() > 0) {
			return XML(item[0]);				
		} else {
			return null;
		}
		
	}
	
	private function onTreeClick():void {
		this.treeItemToSelect = this.browseTree.selectedItem;
		if (organismView.dirtyOrganism != null) {
			organismView.dirtyOrganism.resetDirty();
		}
		if (genomeBuildView.dirtyGenomeBuild != null) {
			genomeBuildView.dirtyGenomeBuild.resetDirty();
			genomeBuildView.sequenceFilesToRemove = new XMLListCollection();
			
		} 
		if (dataTrackFolderView.dirtyDataTrackFolder != null) {
			dataTrackFolderView.dirtyDataTrackFolder.resetDirty();
		}
		if (dataTrackView.dirtyDataTrack != null) {
			dataTrackView.dirtyDataTrack.resetDirty();
			dataTrackView.dataTrackFilesToRemove = new XMLListCollection();
		}
		this.selectView();
	}

	
	public function selectView():void {
		if (this.browseTree.selectedItem == null) {
			this.removeButtonStack.selectedIndex = 0;
			this.mainViewStack.selectedChild = this.blankView;
			return;
		}
		
		if (this.browseTree.selectedItem.name() == "Organism") {
			this.removeButtonStack.selectedIndex = 1;
			this.mainViewStack.selectedChild = this.organismView;                
		} else if (this.browseTree.selectedItem.name() == "GenomeBuild") {
			this.removeButtonStack.selectedIndex = 2;
			var parms:Object = new Object();
			parms.idGenomeBuild = this.browseTree.selectedItem.@idGenomeBuild;
			genomeBuildView.getGenomeBuild.send(parms);
			this.mainViewStack.selectedChild = this.genomeBuildView;                
		} else if (this.browseTree.selectedItem.name() == "DataTrackFolder") {
			this.removeButtonStack.selectedIndex = 3;
			this.mainViewStack.selectedChild = this.dataTrackFolderView;
			this.dataTrackFolderView.init();
			
			
		} else if (this.browseTree.selectedItem.name() == "DataTrack") {
			this.mainViewStack.selectedChild = this.dataTrackView;                
			
			var parms1:Object = new Object();
			parms1.idDataTrack = this.browseTree.selectedItem.@idDataTrack;
			dataTrackView.getDataTrack.send(parms1);
			
			this.removeButtonStack.selectedIndex = 4;
		} else {
			this.removeButtonStack.selectedIndex = 0;
		}
	}
	
	
	
	private function expandOrganismNodes():void
	{
		browseTree.expandItem(getDataTrackList.lastResult, true);
		for each(var organism:Object in getDataTrackList.lastResult..Organism) {
			browseTree.expandItem(organism, true);
		}
		browseTree.validateNow();
		treeContainer.validateNow();
	}
	private function collapseAllNodes():void {
		
		browseTree.expandItem(getDataTrackList.lastResult, false);
		for each(var organism:Object in getDataTrackList.lastResult..Organism) {
			browseTree.expandItem(organism, false);
		}
		for each(var gb:Object in getDataTrackList.lastResult..GenomeBuild) {
			browseTree.expandItem(gb, false);
		}
		for each(var folder:Object in getDataTrackList.lastResult..DataTrackFolder) {
			browseTree.expandItem(folder, false);
		}
		browseTree.validateNow();
	}

	private function collapseFolderNodes():void {
		for each(var folder:Object in getDataTrackList.lastResult..DataTrackFolder) {
			browseTree.expandItem(folder, false);
		}
		browseTree.validateNow();
		treeContainer.validateNow();
		
	}
	private function collapseOrganismNodes():void {
		for each(var organism:Object in getDataTrackList.lastResult..Organism) {
			browseTree.expandItem(organism, false);
		}
		browseTree.validateNow();
		treeContainer.validateNow();
		
	}
	
	public function expandAllNodes():void
	{
		for each(var organism:Object in getDataTrackList.lastResult..Organism) {
			if (organism.@isPopulated == "Y") {
				browseTree.expandChildrenOf(organism,true);
			}
		}
		browseTree.validateNow();
		treeContainer.validateNow();
	}
	
	
	private function collapseAllBrowseNodes():void {
		if (browseTree == null || browseTree.openItems == null) {
			return;
		}
		
		browseTree.openItems = [];
		browseTree.validateNow();
	}
	
	
	private function expandeSelectedNode():void {
		browseTree.expandChildrenOf(browseTree.selectedItem, true);
		browseTree.validateNow();
		treeContainer.validateNow();
	}
	
	private function collapseSelectedNode():void {
		browseTree.expandChildrenOf(browseTree.selectedItem, false);
		browseTree.validateNow();
		treeContainer.validateNow();
	}

	
	public function refreshDataTrackFilters(idOrganismAdded:Object):void {
		// We want to clear out the organism dropdown selection
		// if a genome build from a different organism
		// or a different organism has been added
		if (organismCombo.selectedItem != null) {
			if (organismCombo.selectedItem.@idOrganism != idOrganismAdded) {
				this.organismCombo.selectedItem = null;
			}
		}
		// If we have added a new organism or a new genome build, clear out
		// the dropdown selection for genome build because it
		// doesn't apply anymore.
		this.genomeBuildCombo.selectedIndex = 0;
		
		// We now need to refresh the dictionaries to get newly added
		// organism or genome build into the dropdown.  Keep track
		// of the organism dropdown selection and re-select it
		// after the dictionaries are refreshed.
		organismFilterToSelect = organismCombo.selectedItem;
		
		// Next time we refresh dataTracks, refresh the dictionary
		// dropdowns
		this.refreshDictionaries = true;      			
	}
	
	public function selectFilter():void {
		if (this.organismFilterToSelect != null) {
			for each(var item:Object in parentApplication.das2OrganismList) {
				if (item.@idOrganism == organismFilterToSelect.@idOrganism) {
					organismCombo.selectedItem = item;
					break;
				}
			}
		}
	}

	
	public function refreshDataTracksAndSelect(itemToSelect:XML):void {
		treeItemToSelect = itemToSelect;
		refreshDataTracks();
	}
	
	public function refreshDataTrackForLookup():void {
		var params:Object = new Object();
		params.number = dataTrackNumber;
		getDataTrackList.send(params);
	}
	
	public function refreshDataTrackForItem():void {
		var params:Object = new Object();
		params.idOrganism = refreshItem.@idOrganism;
		params.idGenomeBuild = refreshItem.@idGenomeBuild;
		params.idLab = refreshItem.@idLab;
		getDataTrackList.send(params);
	}

	public function refreshDataTracks():void {
		var parms:Object = new Object();
		parms.idLab = this.labCombo.visible && this.labCombo.selectedItem != null ? this.labCombo.selectedItem.@idLab : "";
		parms.isVisibilityPublic = this.cbVisibilityPublic.visible && this.cbVisibilityPublic.selected ? "Y" : "N";
		parms.isVisibilityOwner = this.cbVisibilityOwner.visible && this.cbVisibilityOwner.selected ? "Y" : "N";
		parms.isVisibilityMembers = this.cbVisibilityMem.visible && this.cbVisibilityMem.selected ? "Y" : "N";
		parms.isVisibilityInstitute = this.cbVisibilityInstitute.visible && this.cbVisibilityInstitute.selected ? "Y" : "N";
	    parms.idOrganism = this.organismCombo.selectedItem != null ? this.organismCombo.selectedItem.@idOrganism : "";
		parms.idGenomeBuild = this.genomeBuildCombo.selectedItem != null ? this.genomeBuildCombo.selectedItem.@idGenomeBuild : "";
		parms.emphasizeText = this.locateText.text == 'Enter search here... ' ? "" : this.locateText.text;;
		
		getDataTrackList.send(parms);
	}
	
	
	private function selectLocateText():void {
		if (locateText.text == 'Enter search here...') {
			locateText.selectionBeginIndex = 0;
			locateText.selectionEndIndex = locateText.text.length;
		} 
	}
	private function locateByName():void {
		if (locateText.text != 'Enter search here...' && locateText.text != '') {
			refreshDataTracks();
		} 
	}
	

	
	private function onToolTipTimerComplete(evt:TimerEvent):void
	{
		ToolTipManager.destroyToolTip(hitToolTip);
	}
	
	
	private function jumpToNextMatch():void {
		var jump:Boolean = false;
		currentIndex = -1;
		for each(var o:XML in getDataTrackList.lastResult..Organism) {
			incrementIndex(o);
			if (jump) {
				break;
			}
			jump = jumpTo(o);
			if (jump) {
				break;
			}
			for each(var gv:XML in o.GenomeBuild) {
				incrementIndex(gv);
				if (jump) {
					break;
				}
				jump = jumpTo(gv);
				if (jump) {
					break;
				}
				for each(var ra:XML in gv.DataTrack) {
					incrementIndex(ra);
					jump = jumpTo(ra);
					if (jump) {
						break;
					}
				}
				for each(var ag:XML in gv..DataTrackFolder) {
					incrementIndex(ag);
					if (jump) {
						break;
					}
					jump = jumpTo(ag);
					if (jump) {
						break;
					}
					for each(var a:XML in ag.DataTrack) {
						incrementIndex(a);
						jump = jumpTo(a);
						if (jump) {
							break;
						}
					}
				}					
			}	
		}
		if (!jump) {
			this.browseTree.selectedItem = null;
		}
	}
	private function incrementIndex(item:XML):void {
		if (isOpenItem(item)) {
			currentIndex++;
		}
		
		item.@currentIndex = currentIndex;
	}
	
	private function isOpenItem(item:XML):Boolean{
		var isOpen:Boolean = false;
		for each(var openItem:XML in browseTree.openItems) {
			if (item == openItem) {
				isOpen = true;
				break;
			}
			
			if (!isOpen) {
				for each(var openChildItem:XML in openItem.elements()) {
					if (item == openChildItem) {
						isOpen = true;
						break;
					}
				}
				
			}
		} 	
		return isOpen;		
	}
	
	private function jumpTo(item:XML):Boolean {
		if (item.@emphasize == "Y" &&
			this.browseTree.selectedItem != item &&
			this.browseTree.selectedIndex < currentIndex) {
			recurseExpandParent(item);	
			browseTree.selectedItem = item;
			browseTree.scrollToIndex(browseTree.selectedIndex);
			selectView();
			return true;
		} else {
			return false;
		}			
	}

	
	private function promptToRemoveSelectedItems():void {
		itemsToRemove = new Array();
		for each(var item:Object in browseTree.selectedItems) {
			var keep:Boolean = true;
			var ancestorFolders:Array = getAncestors(item, "DataTrackFolder");
			
			// Since we are deleting the folder and its contents, ignore
			// any contents of a folder if the folder is being deleted.
			for each(var ancestor:Object in ancestorFolders) {
				for each(var candidateToDelete:Object in browseTree.selectedItems) {
					if (candidateToDelete.name() == "DataTrackFolder") {
						if (ancestor.@idDataTrackFolder == candidateToDelete.@idDataTrackFolder) {
							keep = false;
							break;  	
						}
						
					}
				}
			}
			
			// Ignore all folders and dataTracks under genome version
			// if the genome version is being deleted.
			var ancestorGenomeBuilds:Array = getAncestors(item, "GenomeBuild");
			for each(var ancestorgv:Object in ancestorGenomeBuilds) {
				for each(var candidate:Object in browseTree.selectedItems) {
					if (candidate.name() == "GenomeBuild") {
						if (ancestorgv.@idGenomeBuild == candidate.@idGenomeBuild) {
							keep = false;
							break;  	
						}
						
					}
				}
			}
			// Ignore all genome versions, folders and dataTracks under organism
			// if the organims is being deleted.
			var ancestorOrganisms:Array = getAncestors(item, "Organism");
			for each(var ancestororg:Object in ancestorOrganisms) {
				for each(var cand:Object in browseTree.selectedItems) {
					if (cand.name() == "Organism") {
						if (ancestororg.@idOrganism == cand.@idOrganism) {
							keep = false;
							break;  	
						}
						
					}
				}
			}
			
			if (keep) {
				itemsToRemove.push(item);
			}
		}
		removeSelectedItems();
	}

	
	private function removeSelectedItems():void {
		if (itemsToRemove.length == 0) {
			return;
		}
		itemToRemove = itemsToRemove.shift();
		if (itemToRemove.name() == "Organism") {
			this.promptToRemoveOrganism();
		} else if (itemToRemove.name() == "GenomeBuild") {
			this.promptToRemoveGenomeBuild();
		} else if (itemToRemove.name() == "DataTrackFolder") {
			this.promptToRemoveDataTrackFolder();
		} else if (itemToRemove.name() == "DataTrack") {
			this.promptToRemoveDataTrack();
		}
		
	}
	
	private function getAncestors(item:Object, ancestorName:String):Array {
		var ancestors:Array = new Array();
		var firstTime:Boolean = true;
		while( item != null)
		{
			if (firstTime) {
				firstTime = false;
			} else if( item.name() == ancestorName ) {
				ancestors.push(item);
			}
			item = item.parent();
		}
		return ancestors;
	}
	
	private function getAncestor(item:XML, ancestorName:String):XML {
		var ancestor:XML = null;
		while( item )
		{
			if( item.name() == ancestorName )
			{
				ancestor = item;
				break;
			}
			item = item.parent();
		}
		return ancestor;
	}
	
	
	/************************************************************************
	 * Make UCSC Links 
	 *
	 */
	private function createUCSCLink():void {
		if (dataTrackView.getDataTrack.lastResult..Dir.@ucscLinkFile == 'convert') {
			Alert.show("Patience! Converting useq to bw/bb format.");
		}
		makeUCSCLinks.send();
	}
	
	private function onMakeUCSCLinks(event:ResultEvent):void {
		if (makeUCSCLinks.lastResult.name() == "SUCCESS") {
			navigateToURL(new URLRequest(makeUCSCLinks.lastResult.@ucscURL1),"UCSC");
			//work around to flex bug
			if (makeUCSCLinks.lastResult.@ucscURL2 != ""){
				var txt:String = "Click to load second track after first completes:<br><br><a href='"+makeUCSCLinks.lastResult.@ucscURL2+"' target='UCSC'><b><u>Load Second Track</u></b></a>";
				var alert:Alert = Alert.show(txt);
				alert.mx_internal::alertForm.mx_internal::textField.htmlText =txt;
			}
			
		}
		else {
			//this should never happen
			Alert.show(makeUCSCLinks.lastResult.toXMLString(), "Error! Failed to convert UCSC link, contact site admin!");
		}
	}
	
	
	/************************************************************************
	 * Make IGV Link 
	 *
	 */
	private function createIGVLink():void {
	
		if (dataTrackView.getDataTrack.lastResult..Dir.@ucscLinkFile == 'convert') {
			Alert.show("Patience! Converting useq to bw/bb format.");
		}
		makeIGVLink.send();
	}
	
	private function onMakeIGVLink(event:ResultEvent):void {
		if (makeIGVLink.lastResult.name() == "SUCCESS") {
			//modify boolean so subsequent calls don't relaunch IGV
			launchIGVString = "no";
			navigateToURL(new URLRequest(makeIGVLink.lastResult.@igvURL),"IGV");
		}
		else {
			//this should never happen
			Alert.show(makeIGVLink.lastResult.toXMLString(), "Error! Failed to make IGV link, contact site admin!");
		}
	}
	
	
	/************************************************************************
	 * Make URL Links for all files, converts useq to bw/bb
	 *
	 */
	private function createURLLinks():void {
		if (dataTrackView.getDataTrack.lastResult.@ucscLinkFile == 'convert') {
			Alert.show("Patience! Converting useq to bw/bb format.");
		}
		//send to server
		makeLinks.send();
	}
	
	//response from server
	private function onMakeLinks(event:ResultEvent):void {
		if (makeLinks.lastResult.name() == "SUCCESS") {
			var txt:String = makeLinks.lastResult.@urlsToLink;
			var alert:Alert = Alert.show(txt, "URL Links:");
			alert.mx_internal::alertForm.mx_internal::textField.htmlText =txt;
			//paste to clipboard, doesn't work on all browsers
			//System.setClipboard(txt);
		}
		else {
			//this should never happen
			Alert.show(makeLinks.lastResult.toXMLString(), "Error! Failed to fetch URL links, contact site admin!");
		}
	}
	

	/***********************************************************************
	 * 
	 * ORGANISM DELETE FUNCTIONS
	 *  
	 */        
	private function promptToRemoveOrganism():void {
		if (itemToRemove.children() != null && itemToRemove.children().length() > 0) {
			Alert.show("Please remove the genome builds for organism " +  itemToRemove.@label + " first.", "Unable to remove organism");	    
		} else {
			Alert.show("Remove organism '" + itemToRemove.@label + "'?",
				"Confirm", 
				(Alert.YES | Alert.NO), this, 
				onPromptToRemoveOrganism);     
		}
	}
	
	private function onPromptToRemoveOrganism(event:CloseEvent):void {
		if (event.detail==Alert.YES) {
			removeOrganism();
		}
	}
	
	private function removeOrganism():void {
		// After the delete operation has finished,
		// select either the next sibling, or if no more children,
		// the parent node.
		if (itemToRemove.childIndex() == 0) {
			this.treeItemToSelect = itemToRemove.parent();
		} else {
			var idx:int = itemToRemove.childIndex() - 1;
			this.treeItemToSelect = itemToRemove.parent().children()[idx];
		}        		
		
		var params:Object = new Object();
		params.idOrganism = itemToRemove.@idOrganism;
		deleteOrganism.send(params);
	}
	
	private function onDeleteOrganism(event:ResultEvent):void {
		if (deleteOrganism.lastResult.name() == "SUCCESS") {
			this.organismView.dirtyOrganism.resetDirty();
			
			if (itemsToRemove.length == 0) {
				refreshDictionaries = true;
				refreshDataTracks();			  		
			}
			
		} else {
			Alert.show(deleteOrganism.lastResult..ACTMESSAGE.@TEXT);
		}
		removeSelectedItems();
	}
	
	/***********************************************************************
	 * 
	 * GENOME VERSION DELETE FUNCTIONS 
	 *  
	 */        
	private function promptToRemoveGenomeBuild():void {
		if (itemToRemove.children() != null && itemToRemove.children().length() > 0) {
			Alert.show("Please remove folders and data tracks for the genome build " + itemToRemove.@label + " first.", "Unable to remove genome build");	        			
		} else {
			Alert.show("Remove genome build '" + itemToRemove.@label + "'?",
				"Confirm", 
				(Alert.YES | Alert.NO), this, 
				onPromptToRemoveGenomeBuild);     
		}
	}
	
	private function onPromptToRemoveGenomeBuild(event:CloseEvent):void {
		if (event.detail==Alert.YES) {
			removeGenomeBuild();
		}
	}
	
	private function removeGenomeBuild():void {
		// After the delete operation has finished,
		// select either the next sibling, or if no more children,
		// the parent node.
		if (itemToRemove.childIndex() == 0) {
			this.treeItemToSelect = itemToRemove.parent();
		} else {
			var idx:int = itemToRemove.childIndex() - 1;
			this.treeItemToSelect = itemToRemove.parent().children()[idx];
		}
		
		var params:Object = new Object();
		params.idGenomeBuild = itemToRemove.@idGenomeBuild;
		deleteGenomeBuild.send(params);
	}
	
	private function onDeleteGenomeBuild(event:ResultEvent):void {
		if (deleteGenomeBuild.lastResult.name() == "SUCCESS") {
			this.genomeBuildView.dirtyGenomeBuild.resetDirty();
			
			if (itemsToRemove.length == 0) {
				refreshDictionaries = true;
				refreshDataTracks();
			}
			
			
		} else {
			Alert.show(deleteGenomeBuild.lastResult..ACTMESSAGE.@TEXT);
		}
		removeSelectedItems();
	}
	/***********************************************************************
	 * 
	 * DATA TRACK FOLDER DELETE AND MOVE FUNCTIONS 
	 *  
	 */        
	private function promptToRemoveDataTrackFolder():void {
		if (itemToRemove.children() != null && itemToRemove.children().length() > 0) {
			Alert.show("Removing folder '" + itemToRemove.@label + "'" +
				" will also remove all descendant folders and dataTracks.\n\n" +
				"Are you sure you want to delete the folder and all of its contents?\n",
				"Warning", 
				(Alert.YES | Alert.NO), this, 
				onPromptToRemoveDataTrackFolder);      			
		} else {
			Alert.show("Remove dataTrack folder '" + itemToRemove.@label + "'?",
				"Confirm", 
				(Alert.YES | Alert.NO), this, 
				onPromptToRemoveDataTrackFolder);     
		}
	}
	
	private function onPromptToRemoveDataTrackFolder(event:CloseEvent):void {
		if (event.detail==Alert.YES) {
			
			removeDataTrackFolder();
		}
	}
	
	private function removeDataTrackFolder():void {
		// After the delete operation has finished,
		// select either the next sibling, or if no more children,
		// the parent node.
		if (itemToRemove.childIndex() == 0) {
			this.treeItemToSelect = itemToRemove.parent();
		} else {
			var idx:int = browseTree.selectedItem.childIndex() - 1;
			this.treeItemToSelect = itemToRemove.parent().children()[idx];
		}
		
		
		// Delete the dataTrack grouping
		var params:Object = new Object();
		params.idDataTrackFolder = itemToRemove.@idDataTrackFolder;
		deleteDataTrackFolder.send(params);
	}
	
	private function onDeleteDataTrackFolder(event:ResultEvent):void {
		if (deleteDataTrackFolder.lastResult.name() == "SUCCESS") {
			dataTrackFolderView.dirtyDataTrackFolder.resetDirty();
			
			if (itemsToRemove.length == 0) {
				refreshDataTracks();			
			}
		} else {
			Alert.show(deleteDataTrackFolder.lastResult..ACTMESSAGE.@TEXT);
		}
		removeSelectedItems();
	}

	/***********************************************************************
	 * 
	 * DATA TRACK DELETE, UNLINK, MOVE, DUPLICATE FUNCTIONS 
	 *  
	 */        
	private function promptToRemoveDataTrack():void {
		var message:String = "";
		// If the dataTrack is referenced under multiple dataTrack
		// groupings, just unlink it.  If the dataTrack is refererenced
		// under only one dataTrack grouping, delete the dataTrack.
		var dataTrack:Object = dataTrackView.getDataTrack.lastResult;
		if (itemToRemove.@folderCount > 1) {
			message = "Remove reference to dataTrack '" + itemToRemove.@name + 
				"' under '" + itemToRemove.parent().@label + "'?";
		} else {
			message = "Delete dataTrack '" + itemToRemove.@label + "'?"	
		}
		Alert.show(message,
			"Confirm", 
			(Alert.YES | Alert.NO), this, 
			onPromptToRemoveDataTrack);     
	}
	
	private function onPromptToRemoveDataTrack(event:CloseEvent):void {
		if (event.detail==Alert.YES) {
			removeDataTrack();
		}
	}
	
	private function removeDataTrack():void {
		// After the delete operation has finished,
		// select either the next sibling, or if no more children,
		// the parent node.
		if (itemToRemove.childIndex() == 0) {
			this.treeItemToSelect = itemToRemove.parent();
		} else {
			var idx:int = itemToRemove.childIndex() - 1;
			this.treeItemToSelect = itemToRemove.parent().children()[idx];
		}        		
		
		// If the dataTrack is referenced under multiple dataTrack
		// groupings, just unlink it.  If the dataTrack is refererenced
		// under only one dataTrack grouping, delete the dataTrack.
		if (itemToRemove.@folderCount > 1) {
			// Unlink dataTrack
			var params:Object = new Object();
			params.idDataTrack = itemToRemove.@idDataTrack;
			params.idGenomeBuild = itemToRemove.@idGenomeBuild;
			if (itemToRemove.parent().name() == "DataTrackFolder") {
				params.idDataTrackFolder = itemToRemove.parent().@idDataTrackFolder;
			}
			unlinkDataTrack.send(params);
		} else {
			// Delete dataTrack
			var params1:Object = new Object();
			params1.idDataTrack = itemToRemove.@idDataTrack;
			deleteDataTrack.send(params1);
		}
	}
	
	
	private function onDeleteDataTrack(event:ResultEvent):void {
		if (deleteDataTrack.lastResult.name() == "SUCCESS") {
			dataTrackView.dirtyDataTrack.resetDirty();
			
			if (itemsToRemove.length== 0) {
				refreshDataTracks();			
			}
		} else {
			Alert.show(deleteDataTrack.lastResult..ACTMESSAGE.@TEXT);
		}
		removeSelectedItems();
	}
	
	
	
	private function onUnlinkDataTrack(event:ResultEvent):void {
		if (unlinkDataTrack.lastResult.name() == "SUCCESS") {
			
			if (dataTrackView.dirtyDataTrack != null) {
				dataTrackView.dirtyDataTrack.resetDirty();
			}
			
			// Check if there are other references to this dataTrack
			if (itemsToRemove.length == 0) {
				if (unlinkDataTrack.lastResult.@numberRemainingDataTrackFolders > 0) {
					Alert.show("DataTrack '" + unlinkDataTrack.lastResult.@name +
						"' is referenced under folders \n" + unlinkDataTrack.lastResult.@remainingDataTrackFolders + 
						".\n" +
						"Do you want to remove all references to this dataTrack?",
						"Confirm", 
						Alert.YES | Alert.NO,
						this,
						onPromptToRemoveDataTrackReferences);
				}
			}
			
			if (itemsToRemove.length == 0) {
				refreshDataTracks();				  		
			}
		} else {
			Alert.show(unlinkDataTrack.lastResult..ACTMESSAGE.@TEXT);
		}
		removeSelectedItems();
	}
	
	private function onPromptToRemoveDataTrackReferences(event:CloseEvent):void {
		if (event.detail == Alert.YES) {
			// Delete dataTrack (and all references)
			var params:Object = new Object();
			params.idDataTrack = unlinkDataTrack.lastResult.@idDataTrack;
			deleteDataTrack.send(params);
		}
	}
	
	private function onDuplicateDataTrack(event:ResultEvent):void {
		if (duplicateDataTrack.lastResult.name() == "SUCCESS") {
			dataTrackView.dirtyDataTrack.resetDirty();
			
			treeItemToSelect = new XML("<DataTrack " +
				"idDataTrack='" + duplicateDataTrack.lastResult.@idDataTrack + "' " +
				"idDataTrackFolder='" + duplicateDataTrack.lastResult.@idDataTrackFolder + "' " +
				"/>");
			
			refreshDataTracks();	
			
		} else if (duplicateDataTrack.lastResult.name() == "Error") {
			Alert.show(duplicateDataTrack.lastResult.@message);
		} else {
			Alert.show("An error occurred while duplicating dataTrack");				
		}
	}

	
	private function onMoveDataTrack(event:ResultEvent):void {
		if (moveDataTrack.lastResult.name() == "SUCCESS") {
			if (dataTrackView.dirtyDataTrack != null) {
				dataTrackView.dirtyDataTrack.resetDirty();
			}
			
			treeItemToSelect = new XML("<DataTrack " +
				"idDataTrack='" + moveDataTrack.lastResult.@idDataTrack + "' " +
				"idDataTrackFolder='" + moveDataTrack.lastResult.@idDataTrackFolder + "' " +
				"idGenomeBuild='" + moveDataTrack.lastResult.@idGenomeBuild + "' " +
				"/>");
			
			
			if (dragParams.length > 0) {
				this.performMoveOrCopy();
			} else {
				refreshDataTracks();			
			}
			
		}else {
			Alert.show(moveDataTrack.lastResult..ACTMESSAGE.@TEXT);
		}
		
	}
	
	private function onMoveDataTrackFolder(event:ResultEvent):void {
		if (moveDataTrackFolder.lastResult.name() == "SUCCESS") {
			if (dataTrackFolderView.dirtyDataTrackFolder != null) {
				dataTrackFolderView.dirtyDataTrackFolder.resetDirty();
			}
			
			treeItemToSelect = new XML("<DataTrackFolder " +
				"idDataTrackFolder='" + moveDataTrackFolder.lastResult.@idDataTrackFolder + "' " +
				"/>");
			
			if (dragParams.length > 0) {
				this.performMoveOrCopy();
			} else {
				refreshDataTracks();			
			}
			
		} else {
			Alert.show(moveDataTrackFolder.lastResult..ACTMESSAGE.@TEXT);
		}
	}

	private function onDragDrop( event:DragEvent ) : void
	{
		
		var ds:DragSource = event.dragSource;
		
		// Determine the drop node
		var dropIndex:int = this.browseTree.calculateDropIndex(event);
		dropNode = this.browseTree.indexToItemRenderer(dropIndex).data as XML;
		// If the drop node is the data track, go up to next level (either folder 
		// or genome build), and make it the drop target
		if (dropNode.name() == "DataTrack") {
			dropNode = dropNode.parent();
		}
		
		
		// retrieve the data associated with the "items" format. This will be the data that
		// the dragInitiator has copied into the DragSource.
		dragParams = new ArrayCollection();
		for each(var dragItem:Object in ds.dataForFormat("treeItems") as Array) {
			var params:Object = new Object();
			var keep:Boolean = true;
			if (dragItem.name() == "DataTrack") {
				params.name = "DataTrack";
				params.idDataTrack = dragItem.@idDataTrack;
				if (dragItem.parent().name() == "DataTrackFolder") {
					params.idDataTrackFolderOld = dragItem.parent().@idDataTrackFolder;
				}
				if (dropNode.name() == "GenomeBuild") {
					params.idGenomeBuild = dropNode.@idGenomeBuild;
				}
				if (dropNode.name() == "DataTrackFolder") {
					params.idDataTrackFolder = dropNode.@idDataTrackFolder;
					params.idGenomeBuild = dropNode.@idGenomeBuild;
				}
				// Ignore operation if user dragged to its own parent
				if (dragItem.parent() == dropNode) {
					keep = false;
				}
				// Disallow operation if user does not have write
				// permissions on dataTrack
				if (dragItem.@canWrite != "Y") {
					Alert.show("Insufficient permissions to move data track " + dragItem.@label + ".");   
					event.preventDefault();
					event.target.hideDropFeedback(event);
					DragManager.showFeedback(DragManager.NONE);		   	
					return;
				}
				// Disallow operation if moving/copying to a different genome build
				if (dropNode.@idGenomeBuild != dragItem.@idGenomeBuild) {
					Alert.show("Cannot move data track to a different genome build");
					event.preventDefault();
					event.target.hideDropFeedback(event);
					DragManager.showFeedback(DragManager.NONE);		   	
					return;	
				}
				
				if (keep) {
					dragParams.addItem(params);
				}
			} else if (dragItem.name() == "DataTrackFolder") {
				params.name = "DataTrackFolder";
				params.idDataTrackFolder = dragItem.@idDataTrackFolder;
				if (dropNode.name() == "GenomeBuild") {
					params.idGenomeBuild = dropNode.@idGenomeBuild;
				}
				if (dropNode.name() == "DataTrackFolder") {
					params.idParentDataTrackFolder = dropNode.@idDataTrackFolder;
					params.idGenomeBuild = dropNode.@idGenomeBuild;
				}
				// Ignore operation if user dragged to its own parent
				if (dragItem.parent() == dropNode) {
					keep = false;
				}
				// Ignore operation if item is dragged back to itself
				if (dragItem == dropNode) {
					keep = false;
				}
				// Disallow operation if user does not have write
				// permissions on dataTrack grouping
				if (dragItem.@canWrite != "Y") {
					Alert.show("Insufficient permissions to move data track folder " + dragItem.@label + ".");
					event.preventDefault();
					event.target.hideDropFeedback(event);
					DragManager.showFeedback(DragManager.NONE);		   	
					return;
				}
				if (dropNode.@idGenomeBuild != dragItem.@idGenomeBuild) {
					Alert.show("Cannot move folder to a different genome build");
					event.preventDefault();
					event.target.hideDropFeedback(event);
					DragManager.showFeedback(DragManager.NONE);		   	
					return;	
				}
				if (keep) {
					dragParams.addItem(params);			       		
				}
			}
		}
		
		
		
		event.preventDefault();
		event.target.hideDropFeedback(event);
		DragManager.showFeedback(DragManager.NONE);		
		
		// Reassign dragged dataTrack or dataTrack grouping to
		// new parent 
		if (dropNode != null && dragParams.length > 0) {
			promptToMoveOrCopy();
		}	
		
		return;       
	} 
	
	private function promptToMoveOrCopy():void {
		reassignIsMove = true;
		Alert.yesLabel = "Move";
		Alert.noLabel = "Copy";
		Alert.buttonWidth = 100;
		
		Alert.show("Do you want to move or copy items to " + dropNode.@label + "?", 
			"", 
			(Alert.YES | Alert.NO | Alert.CANCEL), this, 
			onPromptToMoveOrCopy);     
		
	}
	
	private function onPromptToMoveOrCopy(event:CloseEvent):void {
		if (event.detail==Alert.YES) {
			reassignIsMove = true;
			this.performMoveOrCopy();
		} else if (event.detail==Alert.NO) {
			reassignIsMove = false;
			this.performMoveOrCopy();
		} 
		Alert.yesLabel = "Yes";
		Alert.noLabel = "No";
		Alert.buttonWidth = alertButtonWidthDefault;
	}        
	
	
	private function performMoveOrCopy():void {
		if (dragParams.length == 0) {
			return;
		}
		var params:Object = dragParams[0];
		params.isMove = reassignIsMove ? "Y" : "N";
		if (params.name == "DataTrack") {
			dragParams.removeItemAt(0);
			moveDataTrack.send(params);
			
		} else if (params.name == "DataTrackFolder") {
			dragParams.removeItemAt(0);
			moveDataTrackFolder.send(params);
		} 
		
	}

	public function setLastTreeItem(event:ListEvent):void
	{
		lastTreeItem = event;
	}
	
	
	private function addItem(label:String):void {
		if (label == "Organism") {
			var orgWindow:OrganismAddWindow = OrganismAddWindow(PopUpManager.createPopUp(parentApplication.mainArea, OrganismAddWindow, true));
			PopUpManager.centerPopUp(orgWindow);
			orgWindow.commonName.setFocus();
		} else if (label == "Genome build") {
			var genomeWindow:GenomeBuildAddWindow = GenomeBuildAddWindow(PopUpManager.createPopUp(parentApplication.theBody, GenomeBuildAddWindow, true));
			PopUpManager.centerPopUp(genomeWindow);
			var organism:Object = getAncestor(XML(browseTree.selectedItem), "Organism");
			if (organism == null && organismCombo.selectedItem != null && organismCombo.selectedItem.@idOrganism != '') {
				var item:Object = getDataTrackList.lastResult.Organism.(@idOrganism == organismCombo.selectedItem.@idOrganism);
				organism = item[0];
			}
			genomeWindow.setOrganism(organism);
			genomeWindow.genomeBuildName.setFocus();
		} else if (label == "Data Track Folder") {
			var v:Object = getAncestor(XML(browseTree.selectedItem), "GenomeBuild");
			if (v.@hasSegments == "N") {
				promptToAddDataTrackFolder();
			} else {
				showAddDataTrackFolderWindow();
			}
		} else if (label == "Data Track") {
			var gb:Object = getAncestor(XML(browseTree.selectedItem), "GenomeBuild");
			if (gb.@hasSegments == "N") {
				promptToAddDataTrack();
			} else {
				showAddDataTrackWindow();
			}
		}
	}	
	
	private function promptToAddDataTrackFolder():void {
		Alert.show("The genome build is missing information about the segments.  Continue anyway?",
			"Confirm", 
			(Alert.YES | Alert.NO), this, 
			onPromptToAddDataTrackFolder);     
	}
	
	private function onPromptToAddDataTrackFolder(event:CloseEvent):void {
		if (event.detail == Alert.YES) {
			showAddDataTrackFolderWindow();
		}
	}
	
	private function showAddDataTrackFolderWindow():void {
		var addFolderWindow:DataTrackFolderAddWindow = DataTrackFolderAddWindow(PopUpManager.createPopUp(parentApplication.mainArea, DataTrackFolderAddWindow, true));
		PopUpManager.centerPopUp(addFolderWindow);
		var genomeBuild:Object = getAncestor(XML(browseTree.selectedItem), "GenomeBuild");
		var parent:Object = getAncestor(XML(browseTree.selectedItem), "DataTrackFolder");
		addFolderWindow.init(genomeBuild, parent, this, null);
		addFolderWindow.dataTrackFolderName.setFocus();
	}
	
	private function promptToAddDataTrack():void {
		Alert.show("The genome build is missing information about the segments.  Continue anyway?",
			"Confirm", 
			(Alert.YES | Alert.NO), this, 
			onPromptToAddDataTrack);     
	}
	
	private function onPromptToAddDataTrack(event:CloseEvent):void {
		if (event.detail == Alert.YES) {
			showAddDataTrackWindow();
		}
	}
	
	private function showAddDataTrackWindow():void {
		var aWindow:DataTrackAddWindow = DataTrackAddWindow(PopUpManager.createPopUp(parentApplication.theBody, DataTrackAddWindow, true));
		PopUpManager.centerPopUp(aWindow);
		var gb:Object = getAncestor(XML(browseTree.selectedItem), "GenomeBuild");
		var folder:Object = getAncestor(XML(browseTree.selectedItem), "DataTrackFolder");
		aWindow.init(gb, folder, this, null);
		aWindow.dataTrackName.setFocus();
	}
	

	private function filterGenomeBuild(item:Object):Boolean {
		if (item.@value == "") {
			return true;
		}
		if (item.@isActive == 'N') {
			return false;
		}
		
		if (item.@das2Name == "") {
			return false;
		}
		var doesMatch:Boolean = false;
		if (this.organismCombo.selectedItem != null && 
			this.organismCombo.selectedItem.@idOrganism != null  &&
			this.organismCombo.selectedItem.@idOrganism != "") {
			if (item.@idOrganism.toString() == this.organismCombo.selectedItem.@idOrganism.toString()) {
				doesMatch = true;
			}
		}
		return doesMatch;
	}	
	
	private function expandTree():void {
		browseTree.selectedItem=null;
		this.collapseAllNodes();
		expandAppropriateNodes();  
	}

	/************************************************************************
	 * Refresh DAS2 Server
	 *
	 */
	private function refreshDAS2():void {
		verifyDAS2Refresh.send();		
	}
	
	private function onVerifyDAS2Refresh(event:ResultEvent):void {
		if (verifyDAS2Refresh.lastResult.name() == "SUCCESS") {
			Alert.show(verifyDAS2Refresh.lastResult.@message, 
				"Ready to Refresh DAS/2", 
				(Alert.YES | Alert.NO), 
				this,
				onPromptVerifyDAS2Refresh);
		} else {
			Alert.show(verifyDAS2Refresh.lastResult.@message, 
				"Warning", 
				(Alert.YES | Alert.NO), 
				this,
				onPromptVerifyDAS2Refresh);
		}
	}
	
	private function onPromptVerifyDAS2Refresh(event:CloseEvent):void {
		if (event.detail == Alert.YES || event.detail == Alert.OK) {
			this.startDAS2Refresh();
		}
	}
	
	private function startDAS2Refresh():void {
		refreshDAS2ProgressWindow = RefreshDAS2ProgressWindow(PopUpManager.createPopUp(parentApplication.theBody, RefreshDAS2ProgressWindow, false));
		PopUpManager.centerPopUp(refreshDAS2ProgressWindow);
		
		var das2URL:String = parentApplication.getProperty(parentApplication.PROPERTY_DAS2_URL);
		Security.allowDomain(das2URL + "/refresh");
		refreshDAS2Server.url = das2URL + "/refresh";			
		refreshDAS2Server.send();
	}
	private function onRefreshDAS2Server(event:ResultEvent):void {
		refreshDAS2ProgressWindow.currentState = "FinishedState";
	}
	
	public function getTreeLabel(item:Object):String {
		if (item.name() == "DataTrack") {
			return item.@number + " - " + item.@label;
			
		} else {
			return item.@label;
		}
	}		
	
	public function addToLabel(label:String): String {
		if(label.length > 0) {
			return (" - " + label);
		}
		return label;
	}
]]>
</mx:Script>
	
<mx:XMLListCollection id="filteredGenomeBuildList" filterFunction="filterGenomeBuild" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.GenomeBuildLite').DictionaryEntry}"/>
	
<mx:VBox width="100%" height="100%" id="vbox1" verticalGap="2">
	<mx:VBox styleName="panelBox"
			 width="100%" 
			 verticalGap="0" paddingBottom="0" paddingLeft="4" paddingRight="4" paddingTop="0" backgroundSize="100%" backgroundImage="@Embed(source='../../assets/filterBarGrey.png')">
			<mx:HBox width="100%" verticalAlign="middle" paddingTop="4" paddingBottom="4"
					 id="topBar" horizontalGap="2">
				<mx:Text text="Data Tracks" fontFamily="Tahoma" fontSize="14" fontWeight="bold" paddingRight="20"/>
				<mx:LinkButton   label="New Data Track" 
								 enabled="{currentState != 'GuestState' &amp;&amp; browseTree.selectedItem != null &amp;&amp; (browseTree.selectedItem.name() == 'GenomeBuild' || browseTree.selectedItem.name() == 'DataTrackFolder' || browseTree.selectedItem.name() == 'DataTrack') }"
								 visible="{currentState != 'GuestState'}"
								 includeInLayout="{currentState != 'GuestState'}"
								 toolTip="New data track" 
								 click="{addItem('Data Track')}" 
								 id="linkbutton4"  textAlign="left" 
								 disabledIcon="@Embed(source='../../assets/datatrack_new_disable.png')" 
								 icon="@Embed(source='../../assets/datatrack_new.png')" textDecoration="underline"/>
				<mx:VRule height="20" id="vrule4" width="2" 							   
						  visible="{currentState != 'GuestState'}"
						  includeInLayout="{currentState != 'GuestState'}"/>
				<mx:LinkButton   label="New Folder" 
								 icon="@Embed(source='../../assets/folder_new.png')" 
								 enabled="{currentState != 'GuestState' &amp;&amp; browseTree.selectedItem != null &amp;&amp; (browseTree.selectedItem.name() == 'GenomeBuild' || browseTree.selectedItem.name() == 'DataTrackFolder' || browseTree.selectedItem.name() == 'DataTrack') }"
								 disabledIcon="@Embed(source='../../assets/folder_new_disable.png')" 
								 visible="{currentState != 'GuestState'}"
								 includeInLayout="{currentState != 'GuestState'}"
								 toolTip="New folder" 
								 click="{addItem('Data Track Folder')}" 
								 id="linkbutton3" textAlign="left"   textDecoration="underline"/>
				<mx:VRule height="20" id="vrule5" width="2" 
						  visible="{currentState == 'AdminState'}"
						  includeInLayout="{currentState == 'AdminState'}"/>
				<mx:LinkButton  label="New Genome Build" 
								icon="@Embed(source='../../assets/genome_build_new.png')" 
								enabled="true"
								disabledIcon="@Embed(source='../../assets/genome_build_new_disable.png')" 
								visible="{currentState == 'AdminState'}"
								includeInLayout="{currentState == 'AdminState'}"
								toolTip="Create a new genome build" 
								click="{addItem('Genome build')}" 
								leading="0" id="linkbutton2" textAlign="left" textDecoration="underline"/>
				<mx:VRule height="20" id="vrule6" width="2" 
						  visible="{currentState == 'AdminState'}"
						  includeInLayout="{currentState == 'AdminState'}"/>
				<mx:LinkButton  label="New Organism" 
								icon="@Embed(source='../../assets/organism_new.png')" 
								enabled="true"
								disabledIcon="@Embed(source='../../assets/organism_new_disable.png')"  
								visible="{currentState == 'AdminState'}"
								includeInLayout="{currentState == 'AdminState'}"
								toolTip="Create a new organism"
								click="{addItem('Organism')}" 
								labelPlacement="right" textAlign="left" id="linkbutton1"   textDecoration="underline"/>
				<mx:VRule height="20" id="vrule3" width="2"  visible="{currentState != 'GuestState'}" includeInLayout="{currentState != 'GuestState'}"/>
				<mx:LinkButton label="Duplicate" id="duplicateButton" 
							   disabledIcon="@Embed(source='../../assets/duplicate_disable.png')" 
							   icon="@Embed(source='../../assets/duplicate.png')" textAlign="left"
							   visible="{currentState != 'GuestState'}"
							   includeInLayout="{currentState != 'GuestState'}"
							   click="{duplicateDataTrack.send()}"
							   enabled="{browseTree.selectedItem != null &amp;&amp; browseTree.selectedItem.name() == 'DataTrack' }"
							   textDecoration="underline"/>
				<mx:VRule height="20" id="vrule0" width="2"									   
						  visible="{currentState != 'GuestState'}"
						  includeInLayout="{currentState != 'GuestState'}"/>
				<mx:ViewStack id="removeButtonStack" creationPolicy="all"   
							  visible="{currentState != 'GuestState'}"
							  includeInLayout="{currentState != 'GuestState'}">
					<mx:HBox  horizontalGap="8" horizontalAlign="left" id="hbox5"  >		           
						<mx:LinkButton   
							icon="@Embed(source='../../assets/crossout.png')" 
							label="Remove"
							disabledIcon="@Embed(source='../../assets/crossout_disable.png')"
							enabled="{currentState == 'AdminState'}"
							click="{this.promptToRemoveSelectedItems()}" toolTip="Delete organism" id="linkbutton7"   textDecoration="underline"/>
					</mx:HBox>
					<mx:HBox horizontalGap="8"   width="100%" horizontalAlign="left" id="hbox6"  >
						<mx:LinkButton   
							icon="@Embed(source='../../assets/crossout.png')" 
							disabledIcon="@Embed(source='../../assets/crossout_disable.png')"
							label="Remove" 
							enabled="{browseTree.selectedItem != null &amp;&amp; browseTree.selectedItem.@canWrite == 'Y' ? true : false}"
							styleName="linkMenuButton" 
							click="{this.promptToRemoveSelectedItems()}" toolTip="Delete organism"   id="removeOrganismButton"/>
					</mx:HBox>
					<mx:HBox  horizontalGap="8"  width="100%" horizontalAlign="left" id="hbox7"  >
						<mx:LinkButton label="Remove" icon="@Embed(source='../../assets/crossout.png')" 
									   disabledIcon="@Embed(source='../../assets/crossout_disable.png')"
									   enabled="{browseTree.selectedItem != null &amp;&amp; browseTree.selectedItem.@canWrite == 'Y' ? true : false}"
									   styleName="linkMenuButton" paddingLeft="4"
									   click="{this.promptToRemoveSelectedItems()}" 
									   toolTip="Delete genome version"  id="removeGenomeBuildButton"/>
					</mx:HBox>
					<mx:HBox horizontalGap="8"  width="100%" horizontalAlign="left"  id="hbox16">
						<mx:LinkButton   icon="@Embed(source='../../assets/crossout.png')"  
										 disabledIcon="@Embed(source='../../assets/crossout_disable.png')"
										 label="Remove"
										 enabled="{browseTree.selectedItem != null &amp;&amp; browseTree.selectedItem.@canWrite == 'Y' ? true : false}"								  					        	
										 styleName="linkMenuButton" 
										 click="{this.promptToRemoveSelectedItems()}" 
										 toolTip="Delete dataTrack grouping"  id="removeDataTrackFolderButton" paddingLeft="4"/>
					</mx:HBox>
					<mx:HBox horizontalGap="8"  width="100%" horizontalAlign="left" id="hbox8" >
						<mx:LinkButton  icon="@Embed(source='../../assets/crossout.png')"  
										disabledIcon="@Embed(source='../../assets/crossout_disable.png')"
										label="Remove" paddingLeft="4"
										enabled="{browseTree.selectedItem != null &amp;&amp; browseTree.selectedItem.@canWrite == 'Y' ? true : false}"								  					        	
										styleName="linkMenuButton" 
										click="this.promptToRemoveSelectedItems()" 
										toolTip="Delete dataTrack"  id="removeDataTrackButton"/>
					</mx:HBox>
				</mx:ViewStack>
				<mx:VRule height="20" id="vrule21" width="2" />
				<mx:LinkButton label="Download" 
							   icon="@Embed(source='../../assets/download.png')" 
							   enabled="true"
							   click="{treeItemToSelect=null;dataTrackView.promptToDownloadSelectedItems()}" id="downloadButton"  textDecoration="underline"/>
				
						
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" paddingTop="4" verticalAlign="middle" 
					 paddingBottom="4" id="hbox15"   
					 paddingRight="2" paddingLeft="2">
				    <mx:VBox verticalGap="0">
						<mx:HBox horizontalGap="2">
							<mx:ComboBox labelField="@binomialName" id="organismCombo" change="filteredGenomeBuildList.refresh();refreshDataTracks()" styleName="menuLabelSmall" prompt="Organism..." width="170">
								<mx:dataProvider>{parentApplication.das2OrganismList}</mx:dataProvider>
							</mx:ComboBox>
							<mx:ComboBox dataProvider="{filteredGenomeBuildList}" labelField="@das2Name" id="genomeBuildCombo" change="refreshDataTracks()" styleName="menuLabelSmall" width="170"  prompt="Genome build..."></mx:ComboBox>
							<mx:ComboBox id="labCombo" dataProvider="{parentApplication.promptedLabList}"
										 visible="{currentState == 'AdminState'}"
										 includeInLayout="{currentState == 'AdminState'}"
										 prompt="Lab..."
										 labelField="@name" change="{refreshDataTracks()}" styleName="menuLabelSmall" width="170"></mx:ComboBox>

							
							<mx:HBox horizontalGap="1" paddingLeft="4"
									 visible="{currentState != 'GuestState'}"
									 includeInLayout="{currentState != 'GuestState'}" verticalAlign="top" height="100%">
								<mx:Label text="Visible to" 							
										  visible="{currentState != 'GuestState'}"
										  includeInLayout="{currentState != 'GuestState'}"
										  styleName="menuLabelSmall" id="label3" paddingTop="0" paddingBottom="0"/>
								<mx:VBox verticalGap="0" height="100%" verticalAlign="middle">
									<mx:CheckBox id="cbVisibilityOwner" label="Owner"  
												 visible="{currentState != 'GuestState'}"
												 includeInLayout="{currentState != 'GuestState'}"
												 selected="true" paddingBottom="0" paddingTop="0" styleName="menuLabelSmall" click="refreshDataTracks()"/>
									<mx:CheckBox id="cbVisibilityMem" label="Members"  
												 visible="{currentState != 'GuestState'}"
												 includeInLayout="{currentState != 'GuestState'}"
												 selected="true" paddingBottom="0" paddingTop="0" styleName="menuLabelSmall" click="refreshDataTracks()"/>
									
								</mx:VBox>
								<mx:VBox verticalGap="0" height="100%" verticalAlign="middle">
									<mx:CheckBox id="cbVisibilityInstitute" label="Institution" 							
												 visible="{currentState != 'GuestState'}"
												 includeInLayout="{currentState != 'GuestState'}"
												 paddingLeft="0" selected="true"  paddingTop="0" paddingBottom="0" styleName="menuLabelSmall" click="refreshDataTracks()"/>
									<mx:CheckBox id="cbVisibilityPublic" label="Public"
												 visible="{currentState != 'GuestState'}"
												 includeInLayout="{currentState != 'GuestState'}"
												 selected="true" paddingLeft="0"  paddingTop="0" paddingBottom="0" styleName="menuLabelSmall" click="refreshDataTracks()"/>
									
								</mx:VBox>
								
								
							</mx:HBox>

							
							
						</mx:HBox>
						
					</mx:VBox>
						
					
					
					
				<mx:Spacer width="100%"/>
				<mx:HBox horizontalGap="0"  height="100%">
					<mx:VRule height="20" id="vrule1" width="2"/>
					
					<mx:LinkButton label="Refresh" 
								   icon="@Embed(source='../../assets/refresh.png')" 
								   click="{treeItemToSelect=null;locateText.text='enter search here...';refreshDataTracks()}" id="linkbutton8" textDecoration="underline"/>
					<mx:VRule height="20" id="vrule2" width="2"
							  visible="{currentState != 'GuestState'}"
							  includeInLayout="{currentState != 'GuestState'}"
							  />
					<mx:LinkButton styleName="linkMenuButton" label="Reload DAS2 Server" 
								   visible="{currentState != 'GuestState'}"
								   includeInLayout="{currentState != 'GuestState'}"
								   icon="@Embed(source='../../assets/database_lightning.png')" 
								   click="{refreshDAS2()}" 
								   id="reloadDas2ServerButton"  />
					
					
				</mx:HBox>
			</mx:HBox>

        
		
		
    </mx:VBox>
	
	<mx:HDividedBox height="100%" width="100%" id="hdividedbox1">
		<mx:VBox styleName="panelBox"   width="320" height="100%" id="navPanel" >
			<mx:VBox id="navContainer" width="100%" height="100%" verticalGap="0" paddingTop="0" label="Data Tracks">
				<mx:HBox width="100%" horizontalGap="0" paddingLeft="2" paddingBottom="2" verticalAlign="middle">
					<mx:TextInput id="locateText" text="Enter search here..." width="100%"  enter="locateByName()" 
								  click="{selectLocateText()}"
								  change="{this.locateStack.selectedIndex = 0}" styleName="menuLabelSmall" height="20" borderColor="#42779F" backgroundColor="#FFFFFF"/>
					<mx:ViewStack id="locateStack" >
						<mx:HBox paddingLeft="2">
							<mx:LinkButton label="Find"   width="90" paddingLeft="1" enabled="{locateText.text != ''}" 
										   id="findLocationButton" styleName="linkMenuButton" click="locateByName()" textAlign="left" icon="@Embed(source='../../assets/magnifier.png')"/>
						</mx:HBox>
						<mx:HBox>
							<mx:LinkButton label="Next match" width="90"  paddingLeft="1" visible="true" 
										   id="nextLocationButton" styleName="linkMenuButton" 
										   click="jumpToNextMatch()" textAlign="left" 
										   icon="@Embed(source='../../assets/next.png')"/>
						</mx:HBox>
					</mx:ViewStack>
				</mx:HBox>

				<mx:VBox id="treeContainer"  dropShadowEnabled="true" width="100%" height="100%" paddingLeft="2" verticalGap="0" >
					
					<mx:Tree width="100%" height="100%" 
							 dataProvider="{getDataTrackList.lastResult}" 
							 showRoot="false" 
							 id="browseTree" 
							 itemRollOver="setLastTreeItem(event)"
							 click="onTreeClick();"
							 doubleClickEnabled="false" 
							 borderStyle="solid"
							 labelField="@label"
							 labelFunction="getTreeLabel" 
							 dragEnabled="true" 
							 dropEnabled="true" 
							 dragMoveEnabled="true"
							 dragDrop="onDragDrop(event);" 
							 itemRenderer="views.renderers.TreeNodeRenderer"
							 iconFunction="parentApplication.getDataTrackTreeIcon" backgroundAlpha="1" dropShadowEnabled="true"></mx:Tree>
					
				</mx:VBox>
				
			</mx:VBox>
			<mx:ControlBar width="100%" verticalAlign="bottom">				
				<mx:LinkButton label="Expand" styleName="linkMenuButtonSmall" click="expandeSelectedNode()"/>
				<mx:LinkButton label="Collapse" styleName="linkMenuButtonSmall" click="collapseSelectedNode()"/>
				<mx:Spacer width="100%"/>
				<mx:Label text="{dataTrackCountLabel}" styleName="menuLabelSmall" />
			</mx:ControlBar>
		</mx:VBox>
		
		 
		<mx:ViewStack id="mainViewStack" width="100%" height="100%" creationPolicy="all">
			<mx:Panel id="blankView" width="100%" height="100%"   borderThicknessBottom="27">			    	
			</mx:Panel>
			
			<datatrack:DataTrackView id="dataTrackView" width="100%" height="100%" creationPolicy="all">
			</datatrack:DataTrackView>
			
			<datatrack:OrganismView id="organismView" width="100%" height="100%" creationPolicy="all">
			</datatrack:OrganismView>
			
			<datatrack:GenomeBuildView id="genomeBuildView" width="100%" height="100%" creationPolicy="all">
			</datatrack:GenomeBuildView>

			<datatrack:DataTrackFolderView id="dataTrackFolderView" width="100%" height="100%" creationPolicy="all">
			</datatrack:DataTrackFolderView>
		</mx:ViewStack>

    </mx:HDividedBox>	

	
</mx:VBox>
	
</mx:Canvas>
