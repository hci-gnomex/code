<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="Sample setup" xmlns:mx="http://www.adobe.com/2006/mxml" 
	 width="100%" height="100%" >
   <mx:states>
        <mx:State name="QCSetupState">
        	<mx:RemoveChild target="{sampleOrganismContainer}"/>
        	<mx:RemoveChild target="{sampleSourceContainer}"/>
        	<mx:RemoveChild target="{concentrationLabel}"/>
        	<mx:AddChild  relativeTo="{sampleSetupContainer}">
				<mx:VBox id="bioanalyzerContainer" visible="true" width="100%" height="100%">
					<mx:HBox width="100%" horizontalGap="0">
						<mx:Image source="assets/bullet_orange.png"/>
						<mx:Label text="Select a Bioanalyzer Chip Type:" width="340"/>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Spacer width="8"/>								
						<mx:DataGrid width="100%" height="90" visible="true" id="bioanalyzerChipTypeGrid"  backgroundAlpha="0"  >
							<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.BioanalyzerChipType').DictionaryEntry.(@value != '')}</mx:dataProvider>
							<mx:columns>
							    <mx:DataGridColumn id = "isSelectedChipType" headerText=" " 
							        	width="20" 
							        	editable="true"                        	
							        	dataField="@isSelected" 
							        	editorDataField="selected"
							        	itemRenderer="views.CheckBoxIsSelectedChipType" />
								<mx:DataGridColumn headerText="Chip Type" dataField="@bioanalyzerChipType"/>
								<mx:DataGridColumn headerText="Concentration Range" dataField="@concentrationRange"/>
								<mx:DataGridColumn headerText="Max Sample Buffer Strength" dataField="@maxSampleBufferStrength"/>
								<mx:DataGridColumn headerText="Cost per Sample" dataField="@costPerSample"/>
								<mx:DataGridColumn headerText="Sample Wells per Chip" dataField="@sampleWellsPerChip"/>
								
							</mx:columns>
						</mx:DataGrid>
					</mx:HBox>
					<mx:HBox width="100%" horizontalAlign="center" paddingTop="10">
						<mx:HBox borderStyle="inset" backgroundColor="#ffffff" width="90%" verticalAlign="middle" horizontalAlign="center" paddingLeft="10" paddingRight="10" paddingBottom="10" paddingTop="10">
							<mx:Text width="100%" text="Terms:  Bioanalyzer chips will be run when sufficient samples have been collected to load all wells of a chip.  Expedited service can be obtained if the researcher is willing to accept charges for any remaining empty wells on a chip.  Call the Microarray Core Facility (581-6346) for details." color="#0000ff">									
							</mx:Text>
						</mx:HBox>
					</mx:HBox>
					
				</mx:VBox>
        		
        	</mx:AddChild>
        	
        	
        </mx:State>
        <mx:State name="SolexaSetupState">
            <mx:AddChild relativeTo="{concentrationContainer}">
                <mx:HBox width="100%" horizontalGap="0">
    	            <mx:Label text="Enter approximate volume:"/>
	                <mx:TextInput id="totalVolume"  width="40">
	                	<mx:focusOut>checkTotalSample();parentDocument.samplesView.initializeSamplesGrid();propagateTotalVolume();checkSampleSetupCompleteness();</mx:focusOut>
	                </mx:TextInput>
					<mx:Label text="ÂµL" />
					<mx:HBox id="totalSampleWarning" visible="false" borderStyle="outset" verticalAlign="middle" horizontalAlign="center" width="100%" height="100%" paddingBottom="2">
						<mx:Text  width="100%" text="Warning:  At least 25 ng of nucleic acid is recommended for Solexa sequencing." color="#AB482A" fontWeight="bold" paddingLeft="10" textDecoration="none" visible="true">									
						</mx:Text>
					</mx:HBox>
                </mx:HBox>
            </mx:AddChild>
            <mx:AddChild relativeTo="{concentrationContainer}" position="after">
				<mx:HBox id="isPreppedContainer" width="100%" horizontalGap="0">
					<mx:Image source="assets/bullet_orange.png"/>
					<mx:Label text="Should the samples be prepped by the Core facility?" width="340" />
					<mx:HBox width="100%">
						<mx:RadioButton id="samplesToBePreppedCheckbox"  groupName="samplePrepGroup" change="{samplesToBePreppedCheckbox.selected ? currentState = 'SolexaSetupState' : 'SolexaSetupPreppedState';checkSampleSetupCompleteness();parentDocument.samplesView.showHideColumns()}"  label="Yes, please prep the samples" selected="true" />							
						<mx:RadioButton id="samplesAlreadyPreppedCheckbox" groupName="samplePrepGroup" change="{samplesAlreadyPreppedCheckbox.selected ? currentState = 'SolexaSetupPreppedState' : 'SolexaSetupState';checkSampleSetupCompleteness();parentDocument.samplesView.showHideColumns()}" label="No, the samples are already prepped"  />							
					</mx:HBox>
				</mx:HBox>            	
            </mx:AddChild>
            <mx:AddChild relativeTo="{sampleOrganismContainer}" >
                <mx:HBox width="100%" horizontalGap="0" id="alignContainer">
                		    <mx:Spacer width="15"/>
                	<mx:VBox width="100%" id="alignMoreContainer" paddingRight="4">
                		<mx:HBox width="100%" horizontalGap="2">
                			<mx:CheckBox id="alignCheckBox" label="Align sequence to genome build" click="{if (!alignCheckBox.selected) {genomeBuildCombo.selectedIndex = 0;alignNotes.text = ''};checkSampleSetupCompleteness();}"/>
                			<mx:ComboBox labelField="@display" id="genomeBuildCombo" change="propagateGenomeBuild();checkSampleSetupCompleteness();" visible="{alignCheckBox.selected}" width="200">							
        		        		<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.GenomeBuild').DictionaryEntry}</mx:dataProvider>
		                	</mx:ComboBox>                			
                		</mx:HBox>
                			<mx:HBox width="100%" horizontalGap="0">
                			    <mx:Spacer width="20"/>
                			   	<mx:Label text="Special instructions:" visible="{alignCheckBox.selected}" id="label3"/>
                				<mx:TextInput id="alignNotes" width="100%" visible="{alignCheckBox.selected}" focusOut="propagateAlignNotes()"/>                			
                			</mx:HBox>
                	</mx:VBox>
                </mx:HBox>
            </mx:AddChild>
            <mx:SetProperty target="{label2}" name="text" value="Select a sample preparation method:"/>
            <mx:AddChild relativeTo="{sampleSetupContainer}" >
				<mx:HBox id="flowCellContainer" width="100%" horizontalGap="0">
					<mx:Image source="assets/bullet_orange.png"/>
					<mx:Label text="Select the flow cell type to be used:" width="340" />
					<mx:ComboBox id="flowCellTypeCombo" labelField="@display" change="checkTotalSample();parentDocument.samplesView.initializeSamplesGrid();propagateFlowCellType();checkSampleSetupCompleteness();">
						<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.FlowCellType').DictionaryEntry}</mx:dataProvider>
					</mx:ComboBox>
				</mx:HBox>            	
            </mx:AddChild>
            <mx:AddChild relativeTo="{sampleSetupContainer}" >
				<mx:HBox id="numberOfCyclesContainer" width="100%" horizontalGap="0">
					<mx:Image source="assets/bullet_orange.png"/>
					<mx:Label text="Select the minimum number of sequencing cycles:" width="340" />
					<mx:ComboBox id="numberSequencingCyclesCombo" labelField="@display" change="checkTotalSample();parentDocument.samplesView.initializeSamplesGrid();propagateNumberSequencingCycles();checkSampleSetupCompleteness();">
						<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.NumberSequencingCycles').DictionaryEntry}</mx:dataProvider>
					</mx:ComboBox>
				</mx:HBox>            	
            </mx:AddChild>
            <mx:SetStyle target="{sampleSetupContainer}" name="verticalGap" value="10"/>
            <mx:SetEventHandler target="{sampleConcentration}" name="change">
            </mx:SetEventHandler>
            <mx:SetProperty target="{sampleOrganismCombo}" name="width" value="170"/>
            <mx:SetEventHandler target="{sampleConcentration}" name="focusOut">
                <mx:handler>parentDocument.samplesView.initializeSamplesGrid();propagateSampleConcentration();checkSampleSetupCompleteness();checkTotalSample()</mx:handler>
            </mx:SetEventHandler>
        </mx:State>
        <mx:State name="SolexaSetupPreppedState" basedOn="SolexaSetupState">
            <mx:AddChild relativeTo="{isPreppedContainer}" position="after">
				<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle" id="sampleAlreadyPreppedContainer">
					<mx:Image source="assets/bullet_orange.png"/>
					<mx:Label text="Describe how the samples were prepped:" width="340"/>
					<mx:TextInput id="samplePrepMethodText" change="checkSampleSetupCompleteness();"/>			
					<mx:Spacer width="40"/>				
					<mx:ComboBox labelField="@display" id="solexaLibraryTypeCombo" change="checkSampleSetupCompleteness();" visible="true" width="200">							
								<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SolexaLibraryType').DictionaryEntry}</mx:dataProvider>
					</mx:ComboBox>
					<mx:Spacer width="40"/>									
					<mx:CheckBox id="isSizeSelected" label="Size Selected?" click="checkSampleSetupCompleteness();"/>
					<mx:TextInput id="fragmentSizeFrom" width="30" change="checkSampleSetupCompleteness();"/>	
					<mx:Label text="-" textAlign="center"/>
					<mx:TextInput id="fragmentSizeTo" width="30" change="checkSampleSetupCompleteness();"/>
				</mx:HBox>            	
            </mx:AddChild>
            <mx:RemoveChild target="{samplePrepContainer}">            	
            </mx:RemoveChild>
            <mx:SetProperty target="{label3}" name="text" value="Special instructions:"/>
            <mx:SetEventHandler target="{alignCheckBox}" name="click">
                <mx:handler>genomeBuildCombo.selectedIndex = 0;alignNotes.text='';checkSampleSetupCompleteness();</mx:handler>
            </mx:SetEventHandler>
            <mx:SetEventHandler target="{samplesToBePreppedCheckbox}" name="click">
                <mx:handler>samplePrepMethodCombo.selectedIndex = 0;samplePrepMethodText.text = '';isSizeSelected.selected = false;solexaLibraryTypeCombo.selectedIndex = 0;fragmentSizeFrom.text = '';fragmentSizeTo.text = '';checkSampleSetupCompleteness();</mx:handler>
            </mx:SetEventHandler>
            <mx:SetEventHandler target="{samplesAlreadyPreppedCheckbox}" name="click">
                <mx:handler>samplePrepMethodCombo.selectedIndex = 0;samplePrepMethodText.text = '';isSizeSelected.selected = false;solexaLibraryTypeCombo.selectedIndex = 0;fragmentSizeFrom.text = '';fragmentSizeTo.text = '';checkSampleSetupCompleteness();</mx:handler>
            </mx:SetEventHandler>
        </mx:State>
   	
   </mx:states>
   	 
<mx:Script>
	<![CDATA[
		private function checkTotalSample():void {
			if (sampleConcentration.text != '' && totalVolume.text != '') {
				var totalSample:Number = Number(sampleConcentration.text) * Number(totalVolume.text);
				if (totalSample < 25) {
					totalSampleWarning.visible = true;	
				}  else {
					totalSampleWarning.visible = false;
				}
			} else {
				totalSampleWarning.visible = false;
			}
		}
	
		public function getSelectedCodeBioanalyzerChipType():String {
			var selectedCode:String = '';
			for each(var item:Object in this.bioanalyzerChipTypeGrid.dataProvider) {
				if (item.@isSelected != null && item.@isSelected == "true") {
					selectedCode = item.@value;
					break;
				}
			} 
			return selectedCode;
		}
		public function propagateChipType():void {
       		var codeChipType:String = this.getSelectedCodeBioanalyzerChipType();
			for each (var sample:Object in parentDocument.samples) {
				sample.@codeBioanalyzerChipType = codeChipType;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateSampleType():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idSampleType = this.sampleTypeCombo.selectedItem.@value;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateSamplePrepMethod():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idSamplePrepMethod = this.samplePrepMethodCombo.selectedItem.@value;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateSampleSource():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idSampleSource = this.sampleSourceCombo.selectedItem.@value;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateSampleConcentration():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@concentration = this.sampleConcentration.text;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateSampleOrganism():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idOrganism = this.sampleOrganismCombo.selectedItem.@value;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateTotalVolume():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@totalVolume = this.totalVolume.text;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateFlowCellType():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idFlowCellType = this.flowCellTypeCombo.selectedItem.@value;
			}
			for each (var lane:Object in parentDocument.lanes) {
				lane.@idFlowCellType = this.flowCellTypeCombo.selectedItem.@value;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateGenomeBuild():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idGenomeBuildAlignTo = this.genomeBuildCombo.selectedItem.@value;
			}
			for each (var lane:Object in parentDocument.lanes) {
				lane.@idGenomeBuildAlignTo = this.genomeBuildCombo.selectedItem.@value;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateAlignNotes():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@alignNotes = this.alignNotes.text;
			}
			for each (var lane:Object in parentDocument.lanes) {
				lane.@alignNotes = this.alignNotes.text;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateNumberSequencingCycles():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idNumberSequencingCycles = this.numberSequencingCyclesCombo.selectedItem.@value;
			}
			for each (var lane:Object in parentDocument.lanes) {
				lane.@idNumberSequencingCycles = this.numberSequencingCyclesCombo.selectedItem.@value;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
		
		public function toggleOtherChipTypeSelections(codeSelected:String):void {
			
			for each(var item:Object in this.bioanalyzerChipTypeGrid.dataProvider) {
				if (item.@value != codeSelected) {
					item.@isSelected = "false";
				}
			}
		}

      	public function checkSampleSetupCompleteness():Boolean {
        	var isComplete:Boolean = false;
        	if (parentDocument.request != null && parentDocument.request.@idRequest != '0') {
        		isComplete = true;
        	} else if (parentDocument.isSolexaState()) {
	        	if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
	        	    this.sampleConcentration.text != null && this.sampleConcentration.text != '' &&
	        	    this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '' &&
	        	    this.sampleSourceCombo.selectedItem != null && this.sampleSourceCombo.selectedItem.@value != '' &&
	        	    this.sampleOrganismCombo.selectedItem != null && this.sampleOrganismCombo.selectedItem.@value != '' &&
	        	    this.totalVolume.text != null && this.totalVolume.text != '' &&
	        	    this.flowCellTypeCombo.selectedItem != null && this.flowCellTypeCombo.selectedItem.@value != '' && 
	        	    this.numberSequencingCyclesCombo.selectedItem != null && this.numberSequencingCyclesCombo.selectedItem.@value != '' ) {
        	    	if (!this.alignCheckBox.selected || this.genomeBuildCombo.selectedIndex > 0) {
        	    		if (this.samplesAlreadyPreppedCheckbox.selected && this.samplePrepMethodText.text != '') {
							isComplete = true;		        	    			
        	    		} else if (this.samplesToBePreppedCheckbox.selected && samplePrepMethodCombo.selectedItem != null && samplePrepMethodCombo.selectedItem.@value != '') {
        	    			isComplete = true;
        	    		}
        	    	}
	        	 }
        	
        	} else if (parentDocument.setupView.requestTypeGroup.selectedValue == "QC") {
	        	if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
	        	    this.sampleConcentration.text != null && this.sampleConcentration.text != '' &&
	        	    this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '' &&
	        	    this.samplePrepMethodCombo.selectedItem != null && this.samplePrepMethodCombo.selectedItem.@value != '' ) {
	        	    	
	        		for each(var chipType:Object in this.bioanalyzerChipTypeGrid.dataProvider) {
	        			if (chipType.@isSelected == "true") {
	        				isComplete = true;
	        				break;
	        			}
	        		}
	        	}
        	} else {
	        	if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
	        	    this.sampleConcentration.text != null && this.sampleConcentration.text != '' &&
	        	    this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '' &&
	        	    this.sampleSourceCombo.selectedItem != null && this.sampleSourceCombo.selectedItem.@value != '' &&
	        	    this.sampleOrganismCombo.selectedItem != null && this.sampleOrganismCombo.selectedItem.@value != '' &&
	        	    this.samplePrepMethodCombo.selectedItem != null && this.samplePrepMethodCombo.selectedItem.@value != '' ) {
					isComplete = true;	        	    	
	        	}
        	}

    		parentDocument.samplesView.enabled = isComplete;
			if (parentDocument.theTab.contains(parentDocument.annotationView)) {
				parentDocument.annotationView.enabled = isComplete;        			
	    	}
    		parentDocument.enableNextButtons();

        	callLater(postSampleSetupCompleteness, [isComplete]);
        	
    		return isComplete;
    	    	
        }
        
        private function postSampleSetupCompleteness(isComplete:Boolean):void {
	    		
	    	if (!isComplete) {
	        	if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
		        	parentDocument.hybSetupView.enabled = false;
	        	} 
	
	        	if (parentDocument.theTab.contains(parentDocument.hybsView)) {
		        	parentDocument.hybsView.enabled = false;
	        	} 
	
	        	parentDocument.confirmView.enabled = false;
    		} else {
    			parentDocument.samplesView.checkSamplesCompleteness();
    		}
        	
        }
		
	]]>
</mx:Script>
	<mx:VBox width="100%" height="100%" verticalGap="2">
		<mx:VBox width="100%" height="100%"  paddingTop="12"  verticalGap="20" id="sampleSetupContainer">
			<mx:HBox width="100%" horizontalGap="0">
				<mx:Image source="assets/bullet_orange.png"/>
				<mx:Label text="How many samples will you be submitting?" width="340" />
				<mx:TextInput width="40" id="numberOfSamples" change="parentDocument.samplesView.initializeSamplesGrid();checkSampleSetupCompleteness()" backgroundColor="#ffffff"/>							
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0">
				<mx:Image source="assets/bullet_orange.png"/>
				<mx:Label text="Select the sample type that best describes your samples:" width="340"/>
				<mx:ComboBox labelField="@display" width="300" id="sampleTypeCombo" change="parentDocument.samplesView.initializeSamplesGrid();parentApplication.samplePrepMethodList.refresh();propagateSampleType();checkSampleSetupCompleteness();parentDocument.checkForSampleTypeCompatibility()">							
					<mx:dataProvider></mx:dataProvider>
				</mx:ComboBox>
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" id="sampleOrganismContainer">
				<mx:Image source="assets/bullet_orange.png"/>
				<mx:Label text="Select the organism of your samples:" width="340"/>
				<mx:ComboBox labelField="@display" width="300" id="sampleOrganismCombo" change="parentDocument.samplesView.initializeSamplesGrid();parentDocument.hybSetupView.organismCombo.selectedItem = sampleOrganismCombo.selectedItem;propagateSampleOrganism();checkSampleSetupCompleteness()">							
					<mx:dataProvider></mx:dataProvider>
				</mx:ComboBox>
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" id="sampleSourceContainer">
				<mx:Image source="assets/bullet_orange.png"/>
				<mx:Label text="Select the source of your samples:" width="340"/>
				<mx:ComboBox labelField="@display" width="300" id="sampleSourceCombo" change="parentDocument.samplesView.initializeSamplesGrid();propagateSampleSource();checkSampleSetupCompleteness()">							
					<mx:dataProvider></mx:dataProvider>
				</mx:ComboBox>
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" id="concentrationContainer">
				<mx:Image source="assets/bullet_orange.png"/>
				<mx:Label text="Enter the approximate sample concentration:" width="340"/>
				<mx:TextInput width="40" id="sampleConcentration" change="parentDocument.samplesView.initializeSamplesGrid();propagateSampleConcentration();checkSampleSetupCompleteness()"/>							
				<mx:Label text="ng/ÂµL" id="concentrationLabel"/>
				<mx:Spacer width="25"/>
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" id="samplePrepContainer">
				<mx:Image source="assets/bullet_orange.png"/>
				<mx:Label text="Select the nucleic acid purification/extraction method:" width="340" id="label2"/>
				<mx:ComboBox labelField="@display" width="300" id="samplePrepMethodCombo" change="parentDocument.samplesView.initializeSamplesGrid();propagateSamplePrepMethod();checkSampleSetupCompleteness()" >							
					<mx:dataProvider>{parentApplication.samplePrepMethodList}</mx:dataProvider>
				</mx:ComboBox>
			</mx:HBox>
			
		</mx:VBox>
		
	</mx:VBox>
	
</mx:Canvas>
