<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"     
	xmlns:RequestsView="RequestsView.*" 
	label="Experiments" width="100%" height="100%" 
	xmlns:views="views.*" 
	cornerRadius="10" >


  <mx:HTTPService  
    id="getProjectRequestList" 
    url="http://localhost/gnomex/GetProjectRequestList.gx"
    destination="getProjectRequestList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProjectRequestList(event)"
    method="POST"
    useProxy="false">
    <mx:request>
            <idLab>{browseLabCombo.selectedItem.@idLab}</idLab> 
            <showSamples>N</showSamples>
            <showCategory>N</showCategory>
    </mx:request>
   </mx:HTTPService>
   
   <mx:HTTPService  
    id="getRequest" 
    url="http://localhost/gnomex/GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequest(event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>

   
   <mx:HTTPService  
    id="getProject" 
    url="http://localhost/gnomex/GetProject.gx"
    destination="getProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProject(event)"
    method="POST"
    useProxy="false">
    <mx:request>
      <idProject>{selectedIdProject}</idProject>
    </mx:request>
  </mx:HTTPService>

 
	   <mx:Script> 
        <![CDATA[
        	import mx.controls.Alert;
        
        import mx.rpc.events.ResultEvent;   
        import mx.collections.XMLListCollection;
        
        public var selectedIdRequest:Object;
        public var selectedRequestNumber:Object;
        
        [Bindable]
        public var selectedExperiment:Object;
        
        [Bindable]
        public var selectedProject:Object;
        
        public var selectedIdLab:String;
        
        public var selectedRequestNode:Object;
        
        [Bindable]
        public var selectedIdProject:String;

       
        private function setResultsCount():void {
        	downloadView.setResultsCount();
        }
        
        private function getBrowseTreeLabel(item:Object):String {
        	var label:String = item.@label;
        	
        	if (item.name() == "Request") {
        		label = item.@requestNumber;
        	}
        	return label;
        }
        
       
        
        private function onGetRequestDownloadList(event:ResultEvent): void {        	
        	setResultsCount();
        }
        
        private function onGetProjectRequestList(event:ResultEvent): void {  
        	if (getProjectRequestList.lastResult.Lab.length() == 0) {
        		browseTree.visible = false;
        	} else {
        		browseTree.visible = true;
        	}
        	expandAllBrowseNodes();  
        	callLater(reselectTreeItem);    	
	    }
	    
	    private function reselectTreeItem():void {
			if (selectedIdProject != null) {
				var selectedNode:Object = getProjectRequestList.lastResult..Project.(@idProject == selectedIdProject);
				browseTree.selectedItem = selectedNode;
			} else if (selectedRequestNumber != null) {
				selectedRequestNode = getProjectRequestList.lastResult..Request.(@requestNumber == selectedRequestNumber);
				browseTree.openItems = getProjectRequestList.lastResult..Project;
				callLater(selectRequestNode);
				
			}
	    	
	    }
	    
	    private function selectRequestNode():void {
	    	browseTree.selectedItem = selectedRequestNode;
	    }
	    
        
        
	    private function expandAllBrowseNodes():void
  		{
  			browseTree.openItems = getProjectRequestList.lastResult..Lab;
  			//browseTree.openItems = getProjectRequestList.lastResult..Project;
  			browseTree.validateNow();
  			treeContainer.validateNow();
  		}
  		
  		private function collapseAllBrowseNodes():void {
  			browseTree.openItems = [];
  			browseTree.validateNow();
  		}

		private function onBrowseTree():void {
			
			if (browseTree.selectedItem.name() == 'Request') {
				selectedIdRequest = browseTree.selectedItem.@idRequest;
				var parms:Object = new Object();
				parms.idRequest = selectedIdRequest;
				getRequest.send(parms);
				selectedIdLab = null;
				selectedIdProject = null;
				
			} else {												
				selectedIdLab = browseTree.selectedItem.@idLab.toString();
				
				if (browseTree.selectedItem.name() == 'Project') {
					selectedIdProject = browseTree.selectedItem.@idProject.toString();
					getProject.send();
				} else {
					selectedIdProject = null;
				}
				
				theViews.selectedIndex=0;
			} 
			browseView.refreshVisibilityList();
			theViews.visible = true;
			
			
		}
		

		
		private function onGetRequest(event:ResultEvent):void {
			if (selectedIdRequest != null) {
				selectedExperiment = getRequest.lastResult.Request.(@idRequest == selectedIdRequest);			
			} else {
				selectedExperiment = getRequest.lastResult.Request.(@number == selectedRequestNumber);
				
				var params:Object = new Object();
				params.idProject = selectedExperiment.@idProject;
				params.showSamples = "N";
				params.showCategory = "N";
				getProjectRequestList.send(params);
			}
		    theViews.selectedIndex = 1;
		    theViews.visible = true;
		}
		
		private function onGetProject(event:ResultEvent):void {
			selectedProject = getProject.lastResult.Project.(@idProject == selectedIdProject);
			browseView.setResultsCount();
			browseView.refreshBrowseList();
			browseView.refreshDownloadList();
			browseView.refreshTrackList();
			browseView.refreshVisibilityList();
		}

		public function getTreeIcon(item:Object):Class {
				if (item.name() == "Lab") {
					return parentApplication.iconGroup;
				} else if (item.name() == "Project") {
					return parentApplication.iconProject;
				} else if (item.name() == "RequestCategory") {
					return parentApplication.iconCategory;
				} else if (item.name() == "Request" &&
				           item.@codeRequestCategory == "QC") {
					return parentApplication.iconQC;
				}else {
					return parentApplication.iconExperiment;
				}
		}
		
		public function refreshExperiments():void {
			getProjectRequestList.send();
		}
		
		public function initializeExperiments():void {
			var canAccessAnyObject:Object = parentApplication.createSecurityAdvisor.lastResult..Permission.(@name == 'canAccessAnyObject');
			if (canAccessAnyObject.length() > 0) {
				browseLabCombo.height = 20;
				browseLabCombo.visible = true;
				groupLabel.height = 20;
				groupLabel.visible = true;
				
			} else {
				browseLabCombo.visible = false;
				
				if (getProjectRequestList.lastResult == null ||
				    selectedRequestNumber != null) {
				    collapseAllBrowseNodes();
				    selectedRequestNumber = null;
					refreshExperiments();
				}
				
			}
		}
		
       ]]>
    </mx:Script>
    
    
    
	<mx:HDividedBox height="100%" width="100%">
	
	
			
			<mx:Canvas label="Experiments"  height="100%">
				<mx:VBox width="100%" height="100%" verticalGap="1">
				        <mx:Label id="groupLabel" visible="false" height="0" text="Select group to show experiments:"/>
						<mx:ComboBox id="browseLabCombo" 
							labelField="@name"
							dataProvider="{parentApplication.promptedLabList}"
							 change="getProjectRequestList.send()"  
							 visible="false" height="0" width="220">
						</mx:ComboBox>
					<mx:VBox id="treeContainer" width="100%" height="100%" backgroundAlpha="0.84">
					<mx:Tree width="100%" height="100%" 
						dataProvider="{getProjectRequestList.lastResult}" 
						showRoot="false" 
						labelFunction="getBrowseTreeLabel"
						id="browseTree" click="onBrowseTree()" 
						borderStyle="none"
						iconFunction="getTreeIcon" selectionColor="#FBF5B5" rollOverColor="#CECECE" backgroundAlpha="0.0"></mx:Tree>
						
					</mx:VBox>
				</mx:VBox>
			</mx:Canvas> 


		
       <mx:Canvas height="100%" dropShadowEnabled="true" dropShadowColor="#C0C0C0" width="100%">
	     <mx:ViewStack id="theViews" creationPolicy="all" visible="false" width="100%" height="100%">

	        <views:ExperimentBrowseView id="browseView" width="100%" height="100%">
	        </views:ExperimentBrowseView>

	        <views:ExperimentDetailView id="detailView" width="100%" height="100%">
	        </views:ExperimentDetailView>

	        <views:ExperimentDownloadView id="downloadView" width="100%" height="100%">
	        </views:ExperimentDownloadView>
	        
	        <views:SubmitRequestView id="SubmitRequestView" width="100%" height="100%">	
	        </views:SubmitRequestView>
	        
	        <views:TrackRequestsView id="TrackRequestsView" width="100%" height="100%">
	        </views:TrackRequestsView>
	        
	        
	        


         </mx:ViewStack>
		</mx:Canvas>
		
	</mx:HDividedBox>
	
	
	

    
</mx:Canvas>
