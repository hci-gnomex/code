<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"     
	xmlns:RequestsView="RequestsView.*" 
	label="Experiments" width="100%" height="100%" 
	xmlns:views="views.*" 
	cornerRadius="10" >


  <mx:HTTPService  
    id="getProjectRequestList" 
    url="http://localhost/gnomex/GetProjectRequestList.gx"
    destination="getProjectRequestList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProjectRequestList(event)"
    method="POST"
    useProxy="false">
    <mx:request>
            <idLab>{browseLabCombo.selectedItem.@idLab}</idLab> 
            <showSamples>N</showSamples>
            <showCategory>N</showCategory>
            <showMyLabsAlways>Y</showMyLabsAlways>
    </mx:request>
   </mx:HTTPService>
   
   <mx:HTTPService  
    id="getRequest" 
    url="http://localhost/gnomex/GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequest(event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>

   
   <mx:HTTPService  
    id="getProject" 
    url="http://localhost/gnomex/GetProject.gx"
    destination="getProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProject(event)"
    method="POST"
    useProxy="false">
    <mx:request>
      <idProject>{selectedIdProject}</idProject>
    </mx:request>
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="saveRequestProject" 
    url="http://localhost/gnomex/SaveRequestProject.gx"
    destination="saveRequestProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveRequestProject(event)"
    method="POST"
    useProxy="false">    
  </mx:HTTPService>


 
	   <mx:Script> 
        <![CDATA[
        import mx.controls.Alert;
        import mx.managers.DragManager;
        import mx.core.DragSource;
        import mx.events.DragEvent;
        import mx.events.CloseEvent;
        import mx.controls.Menu;
        import mx.collections.ArrayCollection;

        import mx.rpc.events.ResultEvent;   
        import mx.collections.XMLListCollection;
        
        public var selectedIdRequest:Object;
        public var selectedRequestNumber:Object;
        
        [Bindable]
        public var selectedExperiment:Object;
        
        [Bindable]
        public var selectedProject:Object;
        
        public var selectedIdLab:String;
        
        public var selectedNode:Object;
        
        private var dropProject:Object;
        private var dragRequest:Object;
        
        [Bindable]
        public var selectedIdProject:String;
        
        [Bindable]
    	public var rowCountMessage:String = new String();
    

	 	public static const millisecondsPerDay:int = 1000 * 60 * 60 * 24;
	 	public static const millisecondsPerWeek:Number = 1000 * 60 * 60 * 24 * 7;
	 	public static const millisecondsPerMonth:Number = 1000 * 60 * 60 * 24 * 30;
	 	public static const millisecondsPerYear:Number = 1000 * 60 * 60 * 24 * 365;


        private function getBrowseTreeLabel(item:Object):String {
        	var label:String = item.@label;
        	
        	if (item.name() == "Request") {
        		label = item.@requestNumber;
        	}
        	return label;
        }
        
       
        
        private function onGetRequestDownloadList(event:ResultEvent): void {        	
        	setResultsCount();
        }
        
        private function onGetProjectRequestList(event:ResultEvent): void {  
        	if (getProjectRequestList.lastResult.Lab.length() == 0) {
        		browseTree.visible = false;
        	} else {
        		browseTree.visible = true;
        	}
        	if (selectedRequestNumber != null) {
	        	expandAllNodes();          		
        	} else {
        		expandLabNodes();
        	}
        	callLater(reselectTreeItem);    	
	    }
	    

	    
	    
	    private function reselectTreeItem():void {
			if (selectedIdProject != null) {
				selectedNode = getProjectRequestList.lastResult..Project.(@idProject == selectedIdProject);
				callLater(selectTreeNode);
				// Can't expand project because it messes up dropindex for future drag operations.
				
			} else if (selectedRequestNumber != null) {
				selectedNode = getProjectRequestList.lastResult..Request.(@requestNumber == selectedRequestNumber);
				browseTree.openItems = getProjectRequestList.lastResult..Project;
				callLater(selectTreeNode);
				
			} else if (selectedIdLab != null) {
				selectedNode = getProjectRequestList.lastResult..Lab.(@idLab == selectedIdLab);
				callLater(selectTreeNode);
				
				
			} else {
				selectedNode = getProjectRequestList.lastResult..Lab[0];
				browseTree.selectedItem = selectedNode;
				onBrowseTree();
			}
	    	
	    }
	    
	    private function selectTreeNode():void {
	    	browseTree.selectedItem = selectedNode;
	    	//browseTree.firstVisibleItem = selectedRequestNode;
	    	onBrowseTree();
	    }
	    
        
        
	    private function expandLabNodes():void
  		{
  			browseTree.openItems = getProjectRequestList.lastResult..Lab;
  			browseTree.validateNow();
  			treeContainer.validateNow();
  		}

	    private function expandAllNodes():void
  		{
  			browseTree.openItems = getProjectRequestList.lastResult..Lab;
  			browseTree.openItems = getProjectRequestList.lastResult..Project;
  			browseTree.validateNow();
  			treeContainer.validateNow();
  		}
  		
  		
  		private function collapseAllBrowseNodes():void {
  			browseTree.openItems = [];
  			browseTree.validateNow();
  		}
  		
	    public function setResultsCount():void {
	    	if (browseTree.selectedItem == null) {
	    		rowCountMessage = "";
	    	} else if (browseTree.selectedItem..Request.length() == 1) {
		    	rowCountMessage = "(" + browseTree.selectedItem..Request.length() + " experiment)";
	    	} else {
			   	rowCountMessage = "(" + browseTree.selectedItem..Request.length() + " experiments)";
	    	}
	    }
    

		private function onBrowseTree():void {
			setResultsCount();

			selectedProject = null;
			selectedIdProject = null;
			selectedIdLab = null;
			
			browseView.deleteProjectButton.visible = false;
			
			if (browseTree.selectedItem.name() == 'Request') {
				bodyPanel.title = "Experiment " + browseTree.selectedItem.@requestNumber;
				bodyPanel.titleIcon = parentApplication.iconExperiment;
				selectedIdRequest = browseTree.selectedItem.@idRequest;
				var parms:Object = new Object();
				parms.idRequest = selectedIdRequest;
				getRequest.send(parms);
				selectedIdLab = null;
				selectedIdProject = null;
				
			} else {												
				selectedIdLab = browseTree.selectedItem.@idLab.toString();
				
				if (browseTree.selectedItem.name() == 'Project') {
					bodyPanel.title = "Project " + browseTree.selectedItem.@projectName + "\t\t" + rowCountMessage;
					bodyPanel.titleIcon = parentApplication.iconProject;
					selectedIdProject = browseTree.selectedItem.@idProject.toString();
					if (!browseView.theViews.contains(browseView.projectDetailView)) {
						browseView.theViews.addChild(browseView.projectDetailView);
					}
					getProject.send();
					
				} else {
					bodyPanel.title =  browseTree.selectedItem.@labName + "\t\t" + rowCountMessage;;
					bodyPanel.titleIcon = parentApplication.iconGroup;
					selectedIdProject = null;
					if (browseView.theViews.contains(browseView.projectDetailView)) {
						browseView.theViews.removeChild(browseView.projectDetailView);
					}
					browseView.buttonStack.selectedChild = browseView.browseButtonView;
					browseView.refreshButtonStack();
					
				}
				
				theViews.selectedIndex=0;
			} 
			
			browseView.requestNumberCombo.selectedIndex = -1;
			browseView.browseList.refresh();
			refreshRequestNumbers(browseView.browseList);
			browseView.refreshVisibilityList();
			theViews.visible = true;
			
			
		}
		
		public function refreshRequestNumbers(experimentList:XMLListCollection):void {
	    	requestNumbers.removeAll();
	    	browseView.requestNumberCombo.selectedIndex = -1;
	
			var blankItem:Object = new Object();
			blankItem.data = "";
			blankItem.label = "";
	    	requestNumbers.addItem(blankItem);
	    	
	    	for(var x:Number = 0; x < experimentList.length; x++) {
	    		var item:Object = experimentList.getItemAt(x, 0);
	    		
	    		var found:Boolean = false;
	    		for(var i:Number = 0; i < requestNumbers.length; i++) {
	    			if (requestNumbers.getItemAt(i).label == item.@requestNumber) {
	    				found = true;
	    				break;
	    			}
	    		}
	    		if (found == false) {
	    			var newItem:Object = new Object();
	    			newItem.data = item.@requestNumber;
	    			newItem.label = item.@requestNumber;
	    			requestNumbers.addItem(newItem);
	    		}
	    	}
	    	requestNumbers.refresh();
	    }		
		
		public function sortRequestNumbers(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var num1:String = obj1.label;
				var num2:String = obj2.label;
				
				if (num1 == 'Other') {
					return 1;
				} else if (num2 == 'Other') {
					return  -1;
				} else {
					if (num1 < num2) {
						return -1;
					} else if (num1 > num2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}

		public function filterExperimentList(item:Object):Boolean {
			var experimentDate:Date = new Date(item.@createDate.toString());
			
        	var keep:Boolean = true;
        	if (browseView.requestNumberCombo.selectedItem != null && browseView.requestNumberCombo.selectedItem.label != "") {
        		keep = false; 
        		if (item.@requestNumber == browseView.requestNumberCombo.selectedItem.label) {
        			keep = true;
        		}
        	}   
        	if (keep) {
	        	if (browseView.myExperimentsCheckbox.selected == true) {
	        		keep = false;
	        		if (item.@idAppUser == parentApplication.createSecurityAdvisor.lastResult.@idAppUser) {
	        			keep = true;
	        		}
	        	}
        	}    
        	if (keep) {
        		if (browseView.lastWeekCheckbox.selected == true) {
        			keep = false;
					var oneWeekAgo:Date = new Date();
					oneWeekAgo.setTime(oneWeekAgo.getTime() - millisecondsPerWeek);
        			if (experimentDate >= oneWeekAgo) {
        				keep = true;
        			}
        		}
        	} 	
        	if (keep) {
        		if (browseView.lastMonthCheckbox.selected == true) {
        			keep = false;
					var oneMonthAgo:Date = new Date();
					oneMonthAgo.setTime(oneMonthAgo.getTime() - millisecondsPerMonth);
        			if (experimentDate >= oneMonthAgo) {
        				keep = true;
        			}
        		}
        	}
        	if (keep) {
        		if (browseView.lastYearCheckbox.selected == true) {
        			keep = false;
					var oneYearAgo:Date = new Date();
					oneYearAgo.setTime(oneYearAgo.getTime() - millisecondsPerYear);
        			if (experimentDate >= oneYearAgo) {
        				keep = true;
        			}
        		}
        	}  	
        	return keep;
        }
        
 

		
		private function onGetRequest(event:ResultEvent):void {
			if (selectedIdRequest != null) {
				selectedExperiment = getRequest.lastResult.Request.(@idRequest == selectedIdRequest);			
			} else {
				selectedExperiment = getRequest.lastResult.Request.(@number == selectedRequestNumber);
				
				var params:Object = new Object();
				params.idProject = selectedExperiment.@idProject;
				params.showSamples = "N";
				params.showCategory = "N";
				getProjectRequestList.send(params);
				
			    bodyPanel.title = "Experiment " + selectedRequestNumber;
			    bodyPanel.titleIcon = parentApplication.iconExperiment;
			}
		    theViews.selectedChild = detailView;

		    theViews.visible = true;
		}
		
		private function onGetProject(event:ResultEvent):void {
			selectedProject = getProject.lastResult.Project.(@idProject == selectedIdProject);
			browseView.refreshDownloadList();
			browseView.refreshTrackList();
			browseView.refreshVisibilityList();
			
			browseView.refreshButtonStack();
			if (!browseView.theViews.contains(browseView.projectDetailView)) {
				browseView.theViews.addChild(browseView.projectDetailView);
			}
			browseView.projectDetailView.checkSecurity();

		}

		public function getTreeIcon(item:Object):Class {
				if (item.name() == "Lab") {
					return parentApplication.iconGroup;
				} else if (item.name() == "Project") {
					return parentApplication.iconProject;
				} else if (item.name() == "RequestCategory") {
					return parentApplication.iconCategory;
				} else if (item.name() == "Request" &&
				           item.@codeRequestCategory == "QC") {
					return parentApplication.iconQC;
				}else {
					return parentApplication.iconExperiment;
				}
		}
		
		public function refreshExperiments():void {
			getProjectRequestList.send();
		}
		
		public function initializeExperiments():void {
			var canAccessAnyObject:Object = parentApplication.createSecurityAdvisor.lastResult..Permission.(@name == 'canAccessAnyObject');
			if (canAccessAnyObject.length() > 0) {
				browseLabCombo.height = 20;
				browseLabCombo.visible = true;
				groupLabel.height = 20;
				groupLabel.visible = true;
				
			} else {
				browseLabCombo.visible = false;
				
				if (getProjectRequestList.lastResult == null ||
				    selectedRequestNumber != null) {
				    collapseAllBrowseNodes();
				    selectedRequestNumber = null;
					refreshExperiments();
				}
				
			}
		}
		
	  
	  	private function onDragDrop( event:DragEvent ) : void
		{
	       var ds:DragSource = event.dragSource;
	       var dropTarget:Tree = Tree(event.currentTarget);
	
	       // retrieve the data associated with the "items" format. This will be the data that
	       // the dragInitiator has copied into the DragSource.
	       var items:Array = ds.dataForFormat("treeItems") as Array;
	
	       // determine where in the tree the drop occurs and select that node by the index; followed by 
	       // retrieving the node itself. 
	       var r:int = browseTree.calculateDropIndex(event);
	       browseTree.selectedIndex = r;
	       var node:XML = browseTree.selectedItem as XML;
	       var p:*;
	
	
	       if (node.name() == "Project") {
	       		p = node;
	       } else if (node.name() == "Request") {
	       		p = node.parent();
	       }else {
	       		//ignore drop operations on lab.
	       }
	
	       // taking all of the items in the DragSouce, insert them into the 
	       // tree using parent p. 
	       if (p != null) {
		       for(var i:Number=0; i < items.length; i++) {
		       	if (items[i].name() == "Request") {
		             browseTree.dataDescriptor.addChildAt(p, items[i], r+i);
		             
		             dropProject = p;
		             dragRequest = items[i];
		           	 promptToReassignProject();
		             
		       	} 
		       }
	       	
	       }	       
		}
		
	    public function promptToReassignProject():void {
	   		var message:String = "Reassign experiment " + dragRequest.@requestNumber +
	               " to project " + dropProject.@projectName + "?";
	
			Alert.show(message, 
						null, 
						(Alert.YES | Alert.NO), this, 
						onPromptToReassignProject);
			
		}
		
		private function onPromptToReassignProject(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
	            selectedProject = dropProject;
	            selectedIdProject = dropProject.@idProject;
	            selectedIdLab = dropProject.@idLab;
	            
	            var params:Object = new Object();
	            params.idRequest = dragRequest.@idRequest;
	            params.idProject = dropProject.@idProject;
	                  		
           		saveRequestProject.send(params);
            }
        }

       	private function onSaveRequestProject(event:ResultEvent): void {
   			dropProject = null;
   			dragRequest = null;
       		if (saveRequestProject.lastResult.name() == "SUCCESS") {
				this.refreshExperiments();
			
        	} else {
        		Alert.show(saveRequestProject.lastResult..ACTMESSAGE.@TEXT);
        	}	    	
	    }

		
		
       ]]>
    </mx:Script>
   	  <mx:ArrayCollection id="requestNumbers"  sort="{requestNumberSorter}"/>
	  <mx:Sort id="requestNumberSorter" compareFunction="sortRequestNumbers" unique="true"/>
    
	<mx:DateFormatter id="dateFormatter" formatString="YYYYMMDD"/>

    
	<mx:HDividedBox height="100%" width="100%">
	
	
			
			<mx:Accordion label="Experiments"  height="100%">
				<mx:VBox width="100%" height="100%" verticalGap="1" label="Experiments">
				        <mx:Label id="groupLabel" visible="false" height="0" text="Select group to show experiments:"/>
						<mx:ComboBox id="browseLabCombo" 
							labelField="@name"
							dataProvider="{parentApplication.promptedLabList}"
							 change="getProjectRequestList.send()"  
							 visible="false" height="0" width="220">
						</mx:ComboBox>
					<mx:VBox id="treeContainer" width="100%" height="100%" >
						<mx:Tree width="100%" height="100%" 
							dataProvider="{getProjectRequestList.lastResult}" 
							showRoot="false" 
							id="browseTree" click="onBrowseTree();" 
							borderStyle="none"
							labelField="@label"
					        dragEnabled="true" 
					        dropEnabled="true" 
					        dragMoveEnabled="true"
							dragDrop="onDragDrop(event);" 
							iconFunction="getTreeIcon" selectionColor="#FBF5B5" rollOverColor="#CECECE" backgroundAlpha="1"></mx:Tree>
						
					</mx:VBox>
				</mx:VBox>
			</mx:Accordion> 


		
       <mx:Panel height="100%" dropShadowEnabled="true" width="100%" title="Experiments" paddingTop="0" id="bodyPanel">
	     <mx:ViewStack id="theViews" creationPolicy="all" visible="false" width="100%" height="100%">

	        <views:ExperimentBrowseView id="browseView"  width="100%" height="100%">
	        </views:ExperimentBrowseView>

	        <views:ExperimentDetailView id="detailView" width="100%" height="100%">
	        </views:ExperimentDetailView>

	        <views:ExperimentDownloadView id="downloadView" width="100%" height="100%">
	        </views:ExperimentDownloadView>
	        
	        <views:SubmitRequestView id="SubmitRequestView" width="100%" height="100%">	
	        </views:SubmitRequestView>
	        
	        <views:TrackRequestsView id="TrackRequestsView" width="100%" height="100%">
	        </views:TrackRequestsView>
	        
	        
	        


         </mx:ViewStack>
		</mx:Panel>
		
	</mx:HDividedBox>
	
	
	

    
</mx:Canvas>
