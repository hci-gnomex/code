<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"     
	xmlns:SubmitRequestView="SubmitRequestView.*" 
	styleName="form"
	label="Submit Request" width="100%" height="100%" 
	titleIcon="@Embed('../assets/cart_add.png')" 
	title="Submit Request" backgroundColor="#ffffff">

   <mx:HTTPService  
    id="getNewProject" 
    url="http://localhost/gnomex/GetProject.gx"
    destination="getProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetNewProject(event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idProject>0</idProject>    	
    </mx:request>
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="getProject" 
    url="http://localhost/gnomex/GetProject.gx"
    destination="getProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProject(event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
    <mx:HTTPService  
    id="getProjectForEdit" 
    url="http://localhost/gnomex/GetProject.gx"
    destination="getProjectForEdit"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProjectForEdit(event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="getProjectRequestList" 
    url="http://localhost/gnomex/GetProjectRequestList.gx"
    destination="getProjectRequestList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProjectRequestList(event)"
    method="POST"
    useProxy="false">
    <mx:request>
            <idLab>{labCombo.selectedItem.@idLab}</idLab> 
            <showSamples>N</showSamples>
            <showCategory>N</showCategory>
            <showMyLabsAlways>N</showMyLabsAlways>
            <listKind>ProjectRequestCloneList</listKind>
    </mx:request>
   </mx:HTTPService>
   
   <mx:HTTPService  
    id="getNewRequest" 
    url="http://localhost/gnomex/GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetNewRequest(event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idRequest>0</idRequest>    	
    </mx:request>
  </mx:HTTPService>

   <mx:HTTPService  
    id="getRequestToClone" 
    url="http://localhost/gnomex/GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequestToClone(event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idRequest>{requestToClone.@idRequest}</idRequest>    	
    </mx:request>
  </mx:HTTPService>
  
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
		
		import mx.rpc.events.ResultEvent;
		import mx.managers.PopUpManager;
		import mx.events.CloseEvent;
		
		[Bindable]
		private var request:Object;
		
		private var projectDetailWindow:views.ProjectDetailWindow;
		private var selectedIdProject:Object;
		
		private var requestCloneWindow:views.RequestCloneWindow;
		
		[Bindable]
		public var requestToClone:Object;
		
		private function getSamplesGridRowNumber(item:Object,col:int):String
        {
        	if (samples!= null) {
	           var x:int = samples.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
		private function getHybsGridRowNumber(item:Object,col:int):String
        {
        	if (hybs!= null) {
	           var x:int = hybs.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }


		public function filterProject(item:Object):Boolean {
			var keep:Boolean = false;
			if (item.@idProject == '') {
				keep = true;
			} else if (labCombo.selectedItem != null) {
				if (item.@idLab == labCombo.selectedItem.@idLab) {
					keep = true;
				}
			}
			return keep;
		}
		
		private function addSamplePrepMethodFilter():void {
			parentApplication.samplePrepMethodList.filterFunction = filterSamplePrepMethod;
			parentApplication.samplePrepMethodList.refresh();
		}
		
	    private function filterSamplePrepMethod(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}
        	var doesMatch:Boolean = true;
        	if (sampleTypeCombo.selectedItem != null && 
        	    sampleTypeCombo.selectedItem.@value != null  &&
        	    sampleTypeCombo.selectedItem.@value != "") {
        	   	doesMatch = false;
        	   	var applicableSamplePrepMethods:XMLList = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethodSampleType').DictionaryEntry.(@value != '' && @idSampleType == sampleTypeCombo.selectedItem.@value);
        	   	for each (var xref:Object in applicableSamplePrepMethods) {
        	   		if (xref.@idSamplePrepMethod == item.@value) {
        	   		    doesMatch = true;
        	   		    break;
        	   		}
        	   	}
        	}
        	return doesMatch;
        }  
        
		private function addSlideProductFilter():void {
			parentApplication.filteredSlideProductListForSubmitRequests.filterFunction = filterSlideProduct;
			parentApplication.filteredSlideProductListForSubmitRequests.refresh();
		}
       
        private function filterSlideProduct(item:Object):Boolean {
        	if (item.@idSlideProduct == null || item.@idSlideProduct == "") {
        		return true;
        	}
        	var doesMatchOrganism:Boolean = true;
        	if (organismCombo.selectedItem != null && 
        	    organismCombo.selectedItem.@value != null  &&
        	    organismCombo.selectedItem.@value != "") {
        		if (item.@idOrganism == organismCombo.selectedItem.@idOrganism) {
        			doesMatchOrganism = true;
        		} else {
        			doesMatchOrganism = false;
        		}
        	}
        	var doesMatchExperimentCategory:Boolean = true;
        	if (microarrayCategoryCombo.selectedItem != null && 
        	    microarrayCategoryCombo.selectedItem.@value != null &&
        	    microarrayCategoryCombo.selectedItem.@value != "") {
        		doesMatchExperimentCategory = false;
        		var categoriesForSlideProduct:XMLList  = item.microarrayCategories.MicroarrayCategory;
        		for(var x:Number = 0; x < categoriesForSlideProduct.length(); x++) {
        			if (categoriesForSlideProduct[x].@codeMicroarrayCategory == microarrayCategoryCombo.selectedItem.@value) {
        				doesMatchExperimentCategory = true;
        				break;
        			}
        		}
        	}
        	var doesMatchGroup:Boolean = true;
        	if (labCombo.selectedItem != null && labCombo.selectedItem.@idLab != "" && isCustomRadio.selected) {
        		if (item.@isCustom == "Y" && item.@idLab == labCombo.selectedItem.@idLab) {
        			doesMatchGroup = true;
        		} else {
        			doesMatchGroup = false;
        		}
        	} else if (labCombo.selectedItem != null && labCombo.selectedItem.@idLab != "" && isCatalogRadio.selected) {
        		if (item.@isCustom != "Y") {
        			doesMatchGroup = true;
        		} else {
        			doesMatchGroup = false;
        		}
        	}
        	
        	return doesMatchOrganism && doesMatchExperimentCategory && doesMatchGroup;
        }  
		


		private function showNewProjectWindow():void {
			getNewProject.send();		
		}
		
		private function showEditProjectWindow():void {
			selectedIdProject = projectCombo.selectedItem.@idProject;
			var params:Object = new Object();
			params.idProject = projectCombo.selectedItem.@idProject;
			getProjectForEdit.send(params);			
		}
	
		private function onGetNewProject(event:ResultEvent):void {
			if (getNewProject.lastResult.name() == "OpenProjectList") {
				 parentApplication.navExperimentView.selectedProject = getNewProject.lastResult.Project.(@idProject == 0);
				 parentApplication.navExperimentView.selectedProject.@idAppUser = parentApplication.createSecurityAdvisor.lastResult.@idAppUser;
				 parentApplication.navExperimentView.selectedProject.@idLab = labCombo.selectedItem.@idLab;

				 this.projectDetailWindow = views.ProjectDetailWindow(PopUpManager.createPopUp(this, views.ProjectDetailWindow, true));
				 this.projectDetailWindow.projectDetailView.fromSubmitRequestWindow = true;
				 this.projectDetailWindow.projectDetailView.experimentDesignEntries.refresh();
				 this.projectDetailWindow.projectDetailView.experimentFactorEntries.refresh();
				 
				 this.projectDetailWindow.labCombo.selectedItem = labCombo.selectedItem;
				 this.projectDetailWindow.labCombo.enabled = false;
				 
				 PopUpManager.centerPopUp(this.projectDetailWindow);		
				
			} else {
				mx.controls.Alert.show(getNewProject.lastResult..ACTMESSAGE.@TEXT, "Get new project failed");
			}
		}
		
		public function onProjectAdded(idProject:Object):void {
			selectedIdProject = idProject;
			var params:Object = new Object();
			params.idProject = idProject;
			getProject.send(params);
		}
		
		private function onGetProject(event:ResultEvent):void {
			var newProject:Object = getProject.lastResult..Project.(@idProject == selectedIdProject);
			parentApplication.filteredProjectListForSubmitRequests.addItem(newProject);
			this.projectCombo.selectedItem = newProject;
		}
		
		private function onGetProjectRequestList(event:ResultEvent):void {
			
			this.requestCloneWindow = views.RequestCloneWindow(PopUpManager.createPopUp(this, views.RequestCloneWindow, true));
			PopUpManager.centerPopUp(requestCloneWindow);
			requestCloneWindow.expandAllNodes();
		}
		
		private function onPickStartingPoint():void {
			if (cloneRequestRadio.selected) {
				getProjectRequestList.send();
			}
		}
		
		public function cloneRequest(requestToClone:Object):void {
			this.requestToClone = requestToClone;
			getRequestToClone.send();
		}
		
		private function onGetRequestToClone(event:ResultEvent):void {
			request = getRequestToClone.lastResult..Request.(@idRequest = requestToClone.@idRequest);
			request.@idRequest = "0";
			request.@idLab = labCombo.selectedItem.@idLab;
			request.@idAppUser = parentApplication.createSecurityAdvisor.lastResult.@idAppUser;
			request.@idProject = projectCombo.selectedItem.@idProject;
			this.initializeControls();
			
			
		}
		
		private function onGetProjectForEdit(event:ResultEvent):void {
			if (getProjectForEdit.lastResult.name() == "OpenProjectList") {
				 parentApplication.navExperimentView.selectedProject = getProjectForEdit.lastResult.Project.(@idProject == projectCombo.selectedItem.@idProject);

				 this.projectDetailWindow = views.ProjectDetailWindow(PopUpManager.createPopUp(this, views.ProjectDetailWindow, true));
				 this.projectDetailWindow.title = "Edit Project";
				 this.projectDetailWindow.projectDetailView.fromSubmitRequestWindow = true;
				 this.projectDetailWindow.projectDetailView.experimentDesignEntries.refresh();
				 this.projectDetailWindow.projectDetailView.experimentFactorEntries.refresh();
				 
				 this.projectDetailWindow.labCombo.selectedItem = labCombo.selectedItem;
				 this.projectDetailWindow.labCombo.enabled = false;
				 
				 PopUpManager.centerPopUp(this.projectDetailWindow);		
				
			} else {
				mx.controls.Alert.show(getNewProject.lastResult..ACTMESSAGE.@TEXT, "Get project for edit failed");
			}
			
		}
		
		private function onGetNewRequest(event:ResultEvent):void {
			request = getNewRequest.lastResult..Request.(@idRequest = '0');
			request.@idAppUser = parentApplication.createSecurityAdvisor.lastResult.@idAppUser;

		}
		
		private function initializeControls():void {
			callLater(initializeControlsImpl);
		}
		
		private function initializeControlsImpl():void {
			numberOfSamples.text = new String(request.samples.Sample.length());
			sampleTypeCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleType').DictionaryEntry.(@value == request.@idSampleTypeDefault);
			sampleOrganismCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry.(@value == request.@idOrganismSampleDefault);
			sampleSourceCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleSource').DictionaryEntry.(@value == request.@idSampleSourceDefault);
			samplePrepMethodCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethod').DictionaryEntry.(@value == request.@idSamplePrepMethodDefault);
			theTab.selectedChild = setupView;
			
		}
		
		public function sortSampleCharacteristics(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var sc1:String = obj1.@sampleCharacteristic;
				var sc2:String = obj2.@sampleCharacteristic;
				
				if (sc1 == 'Other') {
					return 1;
				} else if (sc2 == 'Other') {
					return  -1;
				} else {
					if (sc1 < sc2) {
						return -1;
					} else if (sc1 > sc2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}	
		
		
		public function showSampleAnnotationColumn(codeSampleCharacteristic:String, show:Boolean):void {
			if (samplesGrid == null) {
				return;
			}
			for (var x:Number = 0; x < samplesGrid.columnCount; x++) {
				var dc:DataGridColumn = samplesGrid.columns[x];
				if ( dc.dataField == "@" + codeSampleCharacteristic) {
					dc.visible = show;
				}
			}
		}
		
		private function addSample():void {
			var emptyNode:XML = new XML("<Sample idSample='' name='' description='' " + 
				" concentration='" + sampleConcentration.text + "'" +
				" idSampleType='" + sampleTypeCombo.selectedItem.@value + "'" +
				" idSamplePrepMethod='" + samplePrepMethodCombo.selectedItem.@value + "'" +				
				" idOrganism='" + this.sampleOrganismCombo.selectedItem.@value + "'" +				
				" idSampleSource='" + sampleSourceCombo.selectedItem.@value + "'" +				
				"/>");
			
			samples.addItem(emptyNode);
	        	
		}
		
		private function deleteSample():void {
			if (samplesGrid.selectedIndex != -1) {
				for each(var i:int in samplesGrid.selectedIndices) {					
					samples.removeItemAt(i);
				}
			}
		}
		
		private function copySample():void {
			if (samplesGrid.selectedIndex != -1) {
				for each(var i:int in samplesGrid.selectedIndices) {					
					var sampleToCopy:Object = samples[i];
					
					var emptyNode:XML = new XML("<Sample idSample='' " + 
					" name='" +  sampleToCopy.@name + "'" + 
					" description='" + sampleToCopy.@description + "'" + 
					" idSampleType='" + sampleToCopy.@idSampleType + "'" +
					" idSamplePrepMethod='" + sampleToCopy.@idSamplePrepMethod + "'" +				
					" idOrganism='" + sampleToCopy.@idOrganism + "'" +				
					" idSampleSource='" + sampleToCopy.@idSampleSource + "'" +				
					" concentration='" + sampleToCopy.@concentration + "'" +				
					" AGE='" + sampleToCopy.@AGE + "'" +				
					" CELLLINE='" + sampleToCopy.@CELLLINE + "'" +				
					" CELLTYPE='" + sampleToCopy.@CELLTYPE + "'" +				
					" CLININFO='" + sampleToCopy.@CLININFO + "'" +				
					" COMPOUND='" + sampleToCopy.@COMPOUND + "'" +				
					" DISSTATE='" + sampleToCopy.@DISSTATE + "'" +				
					" DOSE='" + sampleToCopy.@DOSE + "'" +				
					" GENMOD='" + sampleToCopy.@GENMOD + "'" +				
					" GENOTYPE='" + sampleToCopy.@GENOTYPE + "'" +				
					" INDIV='" + sampleToCopy.@INDIV + "'" +				
					" GROWTHCOND='" + sampleToCopy.@GROWTHCOND + "'" +				
					" ORGPART='" + sampleToCopy.@ORGPART + "'" +				
					" OTHER='" + sampleToCopy.@OTHER + "'" +				
					" SEX='" + sampleToCopy.@SEX + "'" +				
					" TEMP='" + sampleToCopy.@TEMP + "'" +				
					" TIME='" + sampleToCopy.@TIME + "'" +				
					"/>");
			
					samples.addItem(emptyNode);
					
				}
			}
		}
		
		public function promptToClearAllSamples():void {
			Alert.show("Remove all samples currently showing in list?",
						null, 
						(Alert.YES | Alert.NO), this, 
						onPromptToClearAllSamples);
			
		}
		
		private function onPromptToClearAllSamples(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	samples.removeAll();
            }
        }
        
        private function initializeSamplesGrid():void {
        	if (requestToClone != null) {
        		return;
        	}
        	
        	if (numberOfSamples.text == null || numberOfSamples.text == "0" || numberOfSamples.text == '') {
        		return;
        	}
        	if (sampleTypeCombo.selectedItem == null || sampleTypeCombo.selectedItem.@value == '') {
        		return;
        	}
        	if (samplePrepMethodCombo.selectedItem == null || samplePrepMethodCombo.selectedItem.@value == '') {
        		return;
        	}
        	if (sampleSourceCombo.selectedItem == null || sampleSourceCombo.selectedItem.@value == '') {
        		return;
        	}
        	if (sampleOrganismCombo.selectedItem == null || sampleOrganismCombo.selectedItem.@value == '') {
        		return;
        	}
        	if (sampleConcentration.text == null || this.sampleConcentration.text == '') {
        		return;
        	}
        	
    		var numberOfSamplesToAdd:Number = new Number(numberOfSamples.text);
    		if(samples.length <= numberOfSamplesToAdd) {
    			numberOfSamplesToAdd = numberOfSamplesToAdd - samples.length;
    		} else {
    			numberOfSamplesToAdd = 0;
    		}
    		for(var x:int = 0; x < numberOfSamplesToAdd; x++) {
    			addSample();
    		}
        }

		private function addHyb():void {
			var emptyNode:XML = new XML("<Hybridization idHybridization='' notes='' " + 
				" codeSlideSource='" + slideSourceGroup.selectedValue + "'" +
				" idSampleChannel1=''" +
				" idSampleChannel2=''" +
				"/>");
			
			hybs.addItem(emptyNode);
	        	
		}
		
		private function deleteHyb():void {
			if (hybsGrid.selectedIndex != -1) {
				for each(var i:int in hybsGrid.selectedIndices) {					
					hybs.removeItemAt(i);
				}
			}
		}
		
		private function copyHyb():void {
			if (hybsGrid.selectedIndex != -1) {
				for each(var i:int in hybsGrid.selectedIndices) {					
					var hybToCopy:Object = hybs[i];
					
					var emptyNode:XML = new XML("<Hybridization idHybridization='' " + 
					" notes='" + hybToCopy.@notes + "'" + 
					" idSampleChannel1='" + hybToCopy.@idSampleChannel1 + "'" +
					" idSampleChannel2='" + hybToCopy.@idSampleChannel2 + "'" +				
					"/>");
			
					hybs.addItem(emptyNode);
					
				}
			}
		}
		
		public function promptToClearAllHybs():void {
			Alert.show("Remove all samples currently showing in list?",
						null, 
						(Alert.YES | Alert.NO), this, 
						onPromptToClearAllHybs);
			
		}
		
		private function onPromptToClearAllHybs(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	samples.removeAll();
            }
        }

		]]>
	</mx:Script>
	
  	<mx:XMLListCollection id="sampleCharacteristicEntries" source="{request.SampleCharacteristicEntries.SampleCharacteristicEntry}" 
	  	 sort="{sampleCharacteristicSorter}"/>
	<mx:Sort id="sampleCharacteristicSorter" compareFunction="sortSampleCharacteristics" unique="true"/>


	<mx:XMLListCollection id="samples" source="{request.samples.Sample}"/>

	<mx:XMLListCollection id="hybs" source="{request.hybridizations.Hybridization}"/>

	<mx:VBox  width="100%" height="100%" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
		<mx:TabNavigator  click="theTab.creationPolicy='all'" id="theTab" width="100%" height="100%" paddingLeft="4" paddingRight="4" paddingTop = "12" paddingBottom="4" >
			<mx:Canvas  id="setupView" label="Request setup" width="100%" height="100%">
				<mx:VBox width="100%" height="100%" verticalGap="30">
					<mx:HBox width="100%" horizontalGap="0">
						<mx:Image source="assets/arrow_right.png"/>
						<mx:Label text="Select the lab submitting this request:" width="240"/>
						<mx:ComboBox dataProvider="{parentApplication.promptedSubmitRequestLabList}" 
							selectedIndex="-1" labelField="@name" 
							width="370"
							 change="parentApplication.filteredProjectListForSubmitRequests.refresh();projectCombo.selectedIndex = -1;" id="labCombo">
						</mx:ComboBox>
					</mx:HBox>
					<mx:VBox width="100%" verticalGap="0">
						<mx:HBox width="100%" horizontalGap="0">
							<mx:Image source="assets/arrow_right.png"/>
							<mx:Label text="Select the account to be billed:" width="240"/>
							<mx:ComboBox labelField="@accountName" width="370">
								<mx:dataProvider>{labCombo.selectedItem.billingAccounts.BillingAccount}</mx:dataProvider>
							</mx:ComboBox>
						</mx:HBox>
						<mx:HBox width="100%">
							<mx:Text paddingTop="2" textIndent="12" width="100%">
								<mx:htmlText><![CDATA[NOTE:  If billing account is inactive, please download the work aurthorization form below.<BR>Forward the completed form to the Microarray Core Facility (HCI room 3350; Fax 585-0900)]]></mx:htmlText>
							</mx:Text>
							
						</mx:HBox>
						<mx:HBox width="100%">
						    <mx:Spacer width="1"/>
							<mx:LinkButton label="Work authorization form (pdf)" useHandCursor="true" textDecoration="underline" color="#0000ff">
								<mx:click>navigateToURL(new URLRequest('https://hci-as1.hci.utah.edu/gnomex/microarray_work_authorization_form_0906.pdf'), '_blank');</mx:click>
							</mx:LinkButton>
							<mx:LinkButton label="Work authorization form (Microsoft work doc)" textDecoration="underline" useHandCursor="true" color="#0000ff">
								<mx:click>navigateToURL(new URLRequest('https://hci-as1.hci.utah.edu/gnomex/microarray_work_authorization_form_0906.doc'), '_blank');</mx:click>
							</mx:LinkButton>
						</mx:HBox>
						
					</mx:VBox>
					<mx:VBox width="100%" verticalGap="1">
					    <mx:HBox>
							<mx:Image source="assets/arrow_right.png"/>
							<mx:Label text="Select a request type:" width="230"/>
					    	
					    </mx:HBox>
						<mx:HBox width="100%">
						    <mx:Spacer width="6"/>
							<mx:VBox verticalGap = "0">
								<mx:RadioButton groupName="requestTypeGroup" label="Agilent Oligo Microarray Platform"/>							
								<mx:RadioButton groupName="requestTypeGroup" label="Affymetrix Microarray Platform"/>							
								<mx:RadioButton groupName="requestTypeGroup" label="NimbleGen  Microarray Platform"/>							
							</mx:VBox>
							<mx:VBox>
								<mx:RadioButton groupName="requestTypeGroup" label="Sample Quality"/>														
							</mx:VBox>
								<mx:RadioButton groupName="requestTypeGroup" label="Solexa Sequencing"/>														
							<mx:VBox>
								
							</mx:VBox>
						</mx:HBox>
					</mx:VBox>
					<mx:HBox width="100%" horizontalGap="0">
						<mx:Image source="assets/arrow_right.png"/>
						<mx:Text width="240" height="50">
							<mx:htmlText>Select a project or create a new project which describes the overall experimental purpose and design:</mx:htmlText>
						</mx:Text>
						<mx:VBox verticalGap="2">
							<mx:ComboBox dataProvider="{parentApplication.filteredProjectListForSubmitRequests}" labelField="@name" width="370" id="projectCombo">
							</mx:ComboBox>
							<mx:HBox width="100%" horizontalAlign="right">
								<mx:Button id="editProjectButton" label="Edit project..." icon="@Embed('../assets/folder.png')" click="showEditProjectWindow()"/>
								<mx:Button id="newProjectButton" label="New project..." icon="@Embed('../assets/folder_add.png')" click="showNewProjectWindow()"/>
							</mx:HBox>					
						</mx:VBox>
					</mx:HBox>
					<mx:VBox width="100%" verticalGap="1">
					    <mx:HBox>
					    <mx:Image source="assets/arrow_right.png"/>
					    <mx:Label text="Pick a starting point:" width="230"/>
					    	
					    </mx:HBox>
						<mx:HBox width="100%">
						    <mx:Spacer width="6"/>
							<mx:VBox verticalGap = "0">
								<mx:RadioButton groupName="requestTemplateGroup" label="Submit a new request from scratch" selected="true"/>							
								<mx:RadioButton groupName="requestTemplateGroup" label="Use a previous request as a template" click="onPickStartingPoint()" id="cloneRequestRadio"/>						
							</mx:VBox>
							<mx:VBox verticalAlign="bottom" height="100%" width="100%">
								<mx:Label text="{requestToClone.@label}" color="#0000ff"/>
								
							</mx:VBox>
						</mx:HBox>
					</mx:VBox>
					
				</mx:VBox>
			</mx:Canvas>
			<mx:Canvas id="sampleSetupView" label="Sample setup" width="100%" height="100%">
				<mx:VBox width="100%" height="100%" verticalGap="30">
					<mx:HBox width="100%">
						<mx:Image source="assets/arrow_right.png"/>
						<mx:Label text="How many samples will you be submitting?" width="340" />
						<mx:TextInput width="40" id="numberOfSamples" change="initializeSamplesGrid()"/>							
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Image source="assets/arrow_right.png"/>
						<mx:Label text="Select the sample type that best describes your samples:" width="340"/>
						<mx:ComboBox labelField="@display" width="300" id="sampleTypeCombo" change="initializeSamplesGrid();parentApplication.samplePrepMethodList.refresh()">							
							<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleType').DictionaryEntry}</mx:dataProvider>
						</mx:ComboBox>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Image source="assets/arrow_right.png"/>
						<mx:Label text="Select the organism of your samples:" width="340"/>
						<mx:ComboBox labelField="@display" width="300" id="sampleOrganismCombo" change="initializeSamplesGrid();organismCombo.selectedItem = sampleOrganismCombo.selectedItem;">							
							<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry}</mx:dataProvider>
						</mx:ComboBox>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Image source="assets/arrow_right.png"/>
						<mx:Label text="Select the source of your samples:" width="340"/>
						<mx:ComboBox labelField="@display" width="300" id="sampleSourceCombo" change="initializeSamplesGrid()">							
							<mx:dataProvider>{parentApplication.sampleSourceList}</mx:dataProvider>
						</mx:ComboBox>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Image source="assets/arrow_right.png"/>
						<mx:Label text="Enter the approximate sample concentration:" width="340"/>
						<mx:TextInput width="40" id="sampleConcentration" change="initializeSamplesGrid()"/>							
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Image source="assets/arrow_right.png"/>
						<mx:Label text="Select the nucleic acid purification/extraction method:" width="340"/>
						<mx:ComboBox labelField="@display" width="300" id="samplePrepMethodCombo" change="initializeSamplesGrid()" creationComplete="addSamplePrepMethodFilter()">							
							<mx:dataProvider>{parentApplication.samplePrepMethodList}</mx:dataProvider>
						</mx:ComboBox>
					</mx:HBox>
				</mx:VBox>
				
			</mx:Canvas>
			<mx:Canvas label="Annotations" width="100%" height="100%">
				<mx:HBox width="100%" height="100%" horizontalGap="24">
					<mx:VBox height="100%">
					    <mx:HBox>
						    <mx:Image source="assets/arrow_right.png"/>
						    <mx:Text  htmlText="Specify all sample characteristics you wish to &lt;BR&gt; annotate in subsequent columns:"/>
					    	
					    </mx:HBox>
						<mx:DataGrid id="sampleAnnotationGrid" height="100%" 
							dataProvider="{sampleCharacteristicEntries}" 
							selectionColor="#FFFFFF" fontSize="9"
						showHeaders="true" headerHeight="20" variableRowHeight="true" width="280">
						    <mx:columns>
						        <mx:DataGridColumn headerText=" " 
						        	width="17" 
						        	editable="true"                        	
						        	dataField="@isSelected" 
						        	editorDataField="selected"
						        	itemRenderer="views.CheckBoxIsSelectedSampleCharacteristic" >
						        </mx:DataGridColumn>
						        <mx:DataGridColumn  
						        	headerText="Sample characteristics"
						        	editable="false" editorDataField="selected" 
						        	dataField="@sampleCharacteristic">
						            <mx:itemRenderer>
						                <mx:Component >
						                     <mx:HBox>
						                       <mx:Label text="{data.@sampleCharacteristic}">			                           	
						                       </mx:Label>
						                       <mx:TextInput id="scOtherLabel" fontSize="9"
						                       	text="{data.@otherLabel}"
						                       	change="{data.@otherLabel = scOtherLabel.text}" 
						                       	width="{data.@sampleCharacteristic == 'Other' ? 130 : 0}"  
						                       	height="{data.@sampleCharacteristic == 'Other' ? 20 : 0}"  
						                       	visible="{data.@sampleCharacteristic == 'Other' ? true : false}" 
						                       	editable="{data.@sampleCharacteristic == 'Other' ? true : false}">			                           
						                       </mx:TextInput>
						                     	
						                     </mx:HBox>
						                </mx:Component>
						            </mx:itemRenderer>
						        </mx:DataGridColumn>
						    </mx:columns>
						</mx:DataGrid>
						
					</mx:VBox>
					<mx:VBox width="100%" height="100%">
						<mx:HBox>
							<mx:Image source="assets/arrow_right.png"/>
							<mx:Text  htmlText="Describe in general terms how the samples differ:" width="100%" height="28"/>
							
						</mx:HBox>
						<mx:TextArea width="100%" height="100"/>
						
					</mx:VBox>
					
					
				</mx:HBox>
			</mx:Canvas>
			<mx:Canvas label="Samples"  id="samplesView" width="100%" height="100%">
				<mx:VBox width="100%" height="100%">
					<mx:Label text="Fill in sample details.  Fields in pink are required."/>
					<mx:HBox width="100%">
						<mx:HBox>
							<mx:Button label="Add" click="addSample()" icon="@Embed('../assets/table_row_insert.png')"/>
							<mx:Button label="Copy" click="copySample()" icon="@Embed('../assets/table_multiple.png')"/>
							<mx:Button label="Delete" click="deleteSample()" icon="@Embed('../assets/table_row_delete.png')"/>
						</mx:HBox>
						<mx:HBox horizontalAlign="right" width="100%">
							<mx:Button label="Clear all" click="promptToClearAllSamples()" icon="@Embed('../assets/folder_delete.png')"/>
						</mx:HBox>
							
					</mx:HBox>
					<mx:DataGrid width="100%" height="100%" id="samplesGrid"  editable="true" dataProvider="{samples}" allowMultipleSelection="true">
						<mx:columns>
  					        <mx:DataGridColumn editable="false" headerText=""  width="2" labelFunction="getSamplesGridRowNumber"/>
							<mx:DataGridColumn headerText="Sample Name" width="10" dataField="@name"/>
							<mx:DataGridColumn headerText="Concentration" width="5" dataField="@concentration"/>
			                <mx:DataGridColumn headerText="Sample Type"  width="12" dataField="@idSampleType" 
			                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="true" itemRenderer="views.ComboBoxSampleType" />
			                <mx:DataGridColumn headerText="Organism"  width="12" dataField="@idOrganism" 
			                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="true" itemRenderer="views.ComboBoxOrganism" />
			                <mx:DataGridColumn headerText="Sample Source"  width="12" dataField="@idSampleSource" 
			                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="true" itemRenderer="views.ComboBoxSampleSource" />
			                <mx:DataGridColumn headerText="Sample Prep Method"  width="12" dataField="@idSamplePrepMethod" 
			                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="true" itemRenderer="views.ComboBoxSamplePrepMethod" />
							<mx:DataGridColumn id="AGE" headerText="Age" dataField="@AGE" editable="true" visible="false"/>
							<mx:DataGridColumn id="CELLLINE" headerText="Cell line" dataField="@CELLLINE" editable="true" visible="false"/>
							<mx:DataGridColumn id="CELLTYPE" headerText="Cell Type" dataField="@CELLTYPE" editable="true" visible="false"/>
							<mx:DataGridColumn id="CLININFO" headerText="Clinical Info" dataField="@CLININFO" editable="true" visible="false"/>
							<mx:DataGridColumn id="COMPOUND" headerText="Compound" dataField="@COMPOUND" editable="true" visible="false"/>
							<mx:DataGridColumn id="DISSTATE" headerText="Disease State" dataField="@DISSTATE" editable="true" visible="false"/>
							<mx:DataGridColumn id="DOSE" headerText="Dose" dataField="@DOSE" editable="true" visible="false"/>
							<mx:DataGridColumn id="GENMOD" headerText="Genetic Modification" dataField="@GENMOD" editable="true" visible="false"/>
							<mx:DataGridColumn id="GENOTYPE" headerText="Genotype" dataField="@GENOTYPE" editable="true" visible="false"/>
							<mx:DataGridColumn id="GROWTHCOND" headerText="Growth Conditions" dataField="@GROWTHCOND" editable="true" visible="false"/>
							<mx:DataGridColumn id="INDIV" headerText="Individual" dataField="@INDIV" editable="true" visible="false"/>
							<mx:DataGridColumn id="ORGPART" headerText="Organ / Tissue" dataField="@ORGPART" editable="true" visible="false"/>
							<mx:DataGridColumn id="SEX" headerText="Sex" dataField="@SEX" editable="true" visible="false"/>
							<mx:DataGridColumn id="TEMP" headerText="Temperature" dataField="@TEMP" editable="true" visible="false"/>
							<mx:DataGridColumn id="TIME" headerText="Time Course" dataField="@TIME" editable="true" visible="false"/>
							<mx:DataGridColumn id="Other" headerText="Other" dataField="@OTHER" editable="true" visible="false"/>
							<mx:DataGridColumn headerText="Description" width="20" dataField="@description"/>
						</mx:columns>
					</mx:DataGrid>
					
				</mx:VBox>
			</mx:Canvas>
			<mx:Canvas label="Hyb setup" width="100%" height="100%">
				<mx:VBox width="100%" height="100%" verticalGap="30">
					<mx:HBox width="100%">
						<mx:Image source="assets/arrow_right.png"/>
						<mx:Label text="Select an organism:" width="340" />
						<mx:ComboBox labelField="@display" width="300" id="organismCombo">							
							<mx:change>parentApplication.filteredSlideProductListForSubmitRequests.refresh();slideProductCombo.selectedIndex = -1;</mx:change>
							<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry}</mx:dataProvider>
						</mx:ComboBox>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Image source="assets/arrow_right.png"/>
						<mx:Label text="Select an experiment category:" width="340" />
						<mx:ComboBox labelField="@display" width="300" id="microarrayCategoryCombo">							
							<mx:change>parentApplication.filteredSlideProductListForSubmitRequests.refresh();slideProductCombo.selectedIndex = -1;</mx:change>
							<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.MicroarrayCategory').DictionaryEntry}</mx:dataProvider>
						</mx:ComboBox>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Image source="assets/arrow_right.png"/>
						<mx:Label text="Select on of the following:" width="340" />
						<mx:RadioButtonGroup id="customVsCatalogRadioGroup"/>
						<mx:RadioButton label="Catalog microarray" groupName="customVsCatalogRadioGroup" id="isCatalogRadio" selected="true">
							<mx:change>parentApplication.filteredSlideProductListForSubmitRequests.refresh();slideProductCombo.selectedIndex = -1;</mx:change>
						</mx:RadioButton>
						<mx:RadioButton label="Custom microarray" groupName="customVsCatalogRadioGroup" id="isCustomRadio">
							<mx:change>parentApplication.filteredSlideProductListForSubmitRequests.refresh();slideProductCombo.selectedIndex = -1;</mx:change>
						</mx:RadioButton>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Image source="assets/arrow_right.png"/>
						<mx:Text width="340">
							<mx:htmlText><![CDATA[Select the microarray slide or slide set to be used <BR> for these hybridizations:]]></mx:htmlText>
						</mx:Text>
						<mx:ComboBox labelField="@display" width="420" id="slideProductCombo" creationComplete="addSlideProductFilter()">							
							<mx:dataProvider>{parentApplication.filteredSlideProductListForSubmitRequests}</mx:dataProvider>
						</mx:ComboBox>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Image source="assets/arrow_right.png"/>
						<mx:Text width="340" >
							<mx:htmlText><![CDATA[How many hybridizations will be performed on this <BR>experiment request?]]></mx:htmlText>
						</mx:Text>
						<mx:TextInput width="40" id="numberOfHybs">
							
						</mx:TextInput>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Image source="assets/arrow_right.png"/>
						<mx:Label text="Where will the microarrays come from?" width="340" />
						<mx:VBox verticalGap="1">
							
							<mx:RadioButtonGroup id="slideSourceGroup"/>
							<mx:RadioButton label="New microarray purchased from core facility" groupName="slideSourceGroup" id="coreSlideSourceRadio" selected="true" value="CORE"/>
							<mx:RadioButton label="New microarray purchased by lab" groupName="slideSourceGroup" id="customSlideSourceRadio" value="CLIENT"/>
							<mx:RadioButton label="Strip and reuse existing microarray" groupName="slideSourceGroup" id="stripSlideSourceRadio" value="REUSE"/>
						</mx:VBox>
					</mx:HBox>
					
				</mx:VBox>
			</mx:Canvas>
			<mx:Canvas label="Hybs" width="100%" height="100%">
				<mx:VBox width="100%" height="100%">
					<mx:Label text="Fill in the samples to be used on each hybridization."/>
					<mx:HBox width="100%">
						<mx:HBox>
							<mx:Button label="Add" click="addHyb()" icon="@Embed('../assets/table_row_insert.png')"/>
							<mx:Button label="Copy" click="copyHyb()" icon="@Embed('../assets/table_multiple.png')"/>
							<mx:Button label="Delete" click="deleteHyb()" icon="@Embed('../assets/table_row_delete.png')"/>
						</mx:HBox>
						<mx:HBox horizontalAlign="right" width="100%">
							<mx:Button label="Clear all" click="promptToClearAllHybs()" icon="@Embed('../assets/folder_delete.png')"/>
						</mx:HBox>
							
					</mx:HBox>
					<mx:DataGrid width="100%" height="100%" id="hybsGrid"  editable="true" dataProvider="{hybs}" allowMultipleSelection="true">
						<mx:columns>
						    <mx:DataGridColumn editable="false" headerText=""  width="2" labelFunction="getHybsGridRowNumber"/>
				             <mx:DataGridColumn headerText="Slide"  width="32" dataField="@idSlideDesign" 
				                editorDataField="value" sortable="false" editable="true" rendererIsEditor="true" itemRenderer="views.ComboBoxSlideDesign" />
				             <mx:DataGridColumn headerText="Slide Source"  width="12" dataField="@codeSlideSource" 
				                editorDataField="value" sortable="false" editable="true" rendererIsEditor="true" itemRenderer="views.ComboBoxSlideSource" />
							<mx:DataGridColumn headerText="Notes" width="20" dataField="@notes"/>
						</mx:columns>
					</mx:DataGrid>
					
				</mx:VBox>
			</mx:Canvas>
			<mx:Canvas label="Confirm" width="100%" height="100%">
			</mx:Canvas>
		</mx:TabNavigator>
	</mx:VBox>
	
	
    
</mx:Panel>
