<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"     
	xmlns:SubmitRequestView="SubmitRequestView.*" 
	label="Submit Request" width="100%" height="100%" 
	titleIcon="@Embed('../assets/cart_add.png')" 
	title="Submit Request" backgroundColor="#ffffff" borderColor="#ffffff" themeColor="#ffffff">
 
   <mx:HTTPService  
    id="getNewProject" 
    url="http://localhost/gnomex/GetProject.gx"
    destination="getProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetNewProject(event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idProject>0</idProject>    	
    </mx:request>
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="getProject" 
    url="http://localhost/gnomex/GetProject.gx"
    destination="getProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProject(event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
    <mx:HTTPService  
    id="getProjectForEdit" 
    url="http://localhost/gnomex/GetProject.gx"
    destination="getProjectForEdit"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProjectForEdit(event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="getProjectRequestList" 
    url="http://localhost/gnomex/GetProjectRequestList.gx"
    destination="getProjectRequestList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProjectRequestList(event)"
    method="POST"
    useProxy="false">
    <mx:request>
            <idLab>{labCombo.selectedItem.@idLab}</idLab> 
            <showSamples>N</showSamples>
            <showCategory>N</showCategory>
            <showMyLabsAlways>N</showMyLabsAlways>
            <listKind>ProjectRequestCloneList</listKind>
    </mx:request>
   </mx:HTTPService>
   
   <mx:HTTPService  
    id="getNewRequest" 
    url="http://localhost/gnomex/GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetNewRequest(event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idRequest>0</idRequest>    	
    </mx:request>
  </mx:HTTPService>

   <mx:HTTPService  
    id="getRequestToClone" 
    url="http://localhost/gnomex/GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequestToClone(event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idRequest>{requestToClone.@idRequest}</idRequest>    	
    </mx:request>
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="saveNewRequest" 
    url="http://localhost/gnomex/SaveRequest.gx"
    destination="saveNewRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveNewRequest(event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
		
		import mx.rpc.events.ResultEvent;
		import mx.managers.PopUpManager;
		import mx.events.CloseEvent;
        import mx.managers.DragManager;
        import mx.core.DragSource;
        import mx.events.DragEvent;
        
        [Bindable]
        private var submittedIdRequest:String;
        [Bindable]
        private var submittedRequestNumber:String;

		[Bindable]
		private var requestCategoryName:String;
		
		[Bindable]
		public var request:Object;
		
		private var projectDetailWindow:views.ProjectDetailWindow;
		private var selectedIdProject:Object;
		
		private var requestCloneWindow:views.RequestCloneWindow;
		
		[Bindable]
		public var requestToClone:Object;
		
		[Bindable]
		public var slideDesigns:XMLListCollection = new XMLListCollection();
		[Bindable]
		private var selectedIdSlideProduct:Object;
		
		
		public function initializeForm():void {
			if (setupView == null || setupView.enabled) {
				return;
			}
			requestToClone = null;
			submittedIdRequest = null;
			submittedRequestNumber = null;

			setupView.enabled = true;
			labCombo.selectedIndex = -1;
			billingAccountCombo.selectedIndex = -1;
			projectCombo.selectedIndex = -1;
			this.requestTypeGroup.selectedValue = '';
			this.requestRadioAffy.selected = false;
			this.requestRadioAgilent.selected = false;
			this.requestRadioNimbleGen.selected = false;
			this.requestRadioQC.selected = false;
			this.requestRadioSolexa.selected = false;
			submitNewRequestRadio.selected = true;
			
			numberOfSamples.text = '';
			sampleTypeCombo.selectedIndex = -1;
			samplePrepMethodCombo.selectedIndex = -1;
			sampleSourceCombo.selectedIndex = -1;
			this.sampleOrganismCombo.selectedIndex = -1;
			this.sampleConcentration.text = '';
						
			organismCombo.selectedIndex = -1;
			microarrayCategoryCombo.selectedIndex = -1;
			slideProductCombo.selectedIndex = -1;
			numberOfHybs.text = '';
			isCatalogRadio.selected = true;
			this.slideSourceGroup.selectedValue = '';
			coreSlideSourceRadio.selected = true;
			
			confirmButtonStack.selectedIndex = 0;
			
			sampleSetupView.enabled = false;
			annotationView.enabled = false;			
			samplesView.enabled = false;
			hybSetupView.enabled = false;
			hybsView.enabled = false;
			confirmView.enabled = false;
			this.theTab.selectedChild = setupView;
			
			
			
		}
		
		private function setRequestCategoryName():void {
			requestCategoryName = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry.(@value == requestTypeGroup.selectedValue).@display.toString();
		}
		
		private function getSamplesGridRowNumber(item:Object,col:int):String
        {
        	if (samples!= null) {
	           var x:int = samples.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
		private function getHybsGridRowNumber(item:Object,col:int):String
        {
        	if (hybs!= null) {
	           var x:int = hybs.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
		private function getSampleChannel1Name(item:Object,col:int):String
        {
        	var sampleName:String = "";
        	if (hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel1) {
        				sampleName = sample.@name;
        				break;
        			}
        		}
        	} 
        	return sampleName;
        }
		private function getSampleChannel2Name(item:Object,col:int):String
        {
        	var sampleName:String = "";
        	if (hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel2) {
        				sampleName = sample.@name;
        				break;
        			}
        		}
        	} 
        	return sampleName;
        }
		private function getChannel1Count(item:Object,col:int):String
        {
        	var count:int = 0;
        	if (hybs!= null) {
        		for each(var hyb:Object in hybs) {
        			if (hyb.@idSampleChannel1 == item.@idSample) {
        				count++;
        			}
        		}
        	} 
        	if (count == 0) {
        		return "";
        	} else {
	        	return new String(count);        		
        	}
        }
		private function getChannel2Count(item:Object,col:int):String
        {
        	var count:int = 0;
        	if (hybs!= null) {
        		for each(var hyb:Object in hybs) {
        			if (hyb.@idSampleChannel2 == item.@idSample) {
        				count++;
        			}
        		}
        	} 
        	if (count == 0) {
        		return "";
        	} else {
	        	return new String(count);        		
        	}
        }
        
        private function lookupSampleTypeName(item:Object,col:int):String {
        	var dict:Object = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleType').DictionaryEntry.(@value == item.@idSampleType);
        	if (dict != null) {
        		return dict.@display;
        	} else {
        		return "";
        	}
        }
        private function lookupOrganism(item:Object,col:int):String {
        	var dict:Object = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry.(@value == item.@idOrganism);
        	if (dict != null) {
        		return dict.@display;
        	} else {
        		return "";
        	}
        }
        private function lookupSamplePrepMethod(item:Object,col:int):String {
        	var dict:Object = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethod').DictionaryEntry.(@value == item.@idSamplePrepMethod);
        	if (dict != null) {
        		return dict.@display;
        	} else {
        		return "";
        	}
        }
        private function lookupSampleSource(item:Object,col:int):String {
        	var dict:Object = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleSource').DictionaryEntry.(@value == item.@idSampleSource);
        	if (dict != null) {
        		return dict.@display;
        	} else {
        		return "";
        	}
        }
        private function lookupSlideSource(item:Object,col:int):String {
        	var dict:Object = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SlideSource').DictionaryEntry.(@value == item.@codeSlideSource);
        	if (dict != null) {
        		return dict.@display;
        	} else {
        		return "";
        	}
        }
        private function lookupSlideDesignName(item:Object,col:int):String {
        	var sd:Object = parentApplication.getSlideProductList.lastResult..SlideDesign.(@idSlideDesign == item.@idSlideDesign);
        	if (sd != null) {
        		return sd.@name;
        	} else {
        		return "";
        	}
        }


		public function filterProject(item:Object):Boolean {
			var keep:Boolean = false;
			if (item.@idProject == '') {
				keep = true;
			} else if (labCombo.selectedItem != null) {
				if (item.@idLab == labCombo.selectedItem.@idLab) {
					keep = true;
				}
			}
			return keep;
		}
		
		private function addSamplePrepMethodFilter():void {
			parentApplication.samplePrepMethodList.filterFunction = filterSamplePrepMethod;
			parentApplication.samplePrepMethodList.refresh();
		}
		
		private function filterSamplePrepMethod(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}
        	var doesMatch:Boolean = true;
        	if (sampleTypeCombo.selectedItem != null && 
        	    sampleTypeCombo.selectedItem.@value != null  &&
        	    sampleTypeCombo.selectedItem.@value != "") {
        	   	doesMatch = false;
        	   	var applicableSamplePrepMethods:XMLList = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethodSampleType').DictionaryEntry.(@value != '' && @idSampleType == sampleTypeCombo.selectedItem.@value);
        	   	for each (var xref:Object in applicableSamplePrepMethods) {
        	   		if (xref.@idSamplePrepMethod == item.@value) {
        	   		    doesMatch = true;
        	   		    break;
        	   		}
        	   	}
        	}
        	return doesMatch;
        }  
        
		private function addSlideProductFilter():void {
			parentApplication.filteredSlideProductListForSubmitRequests.filterFunction = filterSlideProduct;
			parentApplication.filteredSlideProductListForSubmitRequests.refresh();
		}
       
        private function filterSlideProduct(item:Object):Boolean {
        	if (item.@idSlideProduct == null || item.@idSlideProduct == "") {
        		return true;
        	}
        	var doesMatchOrganism:Boolean = true;
        	if (organismCombo.selectedItem != null && 
        	    organismCombo.selectedItem.@value != null  &&
        	    organismCombo.selectedItem.@value != "") {
        		if (item.@idOrganism == organismCombo.selectedItem.@idOrganism) {
        			doesMatchOrganism = true;
        		} else {
        			doesMatchOrganism = false;
        		}
        	}
        	var doesMatchExperimentCategory:Boolean = true;
        	if (microarrayCategoryCombo.selectedItem != null && 
        	    microarrayCategoryCombo.selectedItem.@value != null &&
        	    microarrayCategoryCombo.selectedItem.@value != "") {
        		doesMatchExperimentCategory = false;
        		var categoriesForSlideProduct:XMLList  = item.microarrayCategories.MicroarrayCategory;
        		for(var x:Number = 0; x < categoriesForSlideProduct.length(); x++) {
        			if (categoriesForSlideProduct[x].@codeMicroarrayCategory == microarrayCategoryCombo.selectedItem.@value) {
        				doesMatchExperimentCategory = true;
        				break;
        			}
        		}
        	}
        	var doesMatchGroup:Boolean = true;
        	if (labCombo.selectedItem != null && labCombo.selectedItem.@idLab != "" && isCustomRadio.selected) {
        		if (item.@isCustom == "Y" && item.@idLab == labCombo.selectedItem.@idLab) {
        			doesMatchGroup = true;
        		} else {
        			doesMatchGroup = false;
        		}
        	} else if (labCombo.selectedItem != null && labCombo.selectedItem.@idLab != "" && isCatalogRadio.selected) {
        		if (item.@isCustom != "Y") {
        			doesMatchGroup = true;
        		} else {
        			doesMatchGroup = false;
        		}
        	}
        	
        	return doesMatchOrganism && doesMatchExperimentCategory && doesMatchGroup;
        }  
		


		private function showNewProjectWindow():void {
			getNewProject.send();		
		}
		
		private function showEditProjectWindow():void {
			selectedIdProject = projectCombo.selectedItem.@idProject;
			var params:Object = new Object();
			params.idProject = projectCombo.selectedItem.@idProject;
			getProjectForEdit.send(params);			
		}
	
		private function onGetNewProject(event:ResultEvent):void {
			if (getNewProject.lastResult.name() == "OpenProjectList") {
				 parentApplication.navExperimentView.selectedProject = getNewProject.lastResult.Project.(@idProject == 0);
				 parentApplication.navExperimentView.selectedProject.@idAppUser = parentApplication.createSecurityAdvisor.lastResult.@idAppUser;
				 parentApplication.navExperimentView.selectedProject.@idLab = labCombo.selectedItem.@idLab;

				 this.projectDetailWindow = views.ProjectDetailWindow(PopUpManager.createPopUp(this, views.ProjectDetailWindow, true));
				 this.projectDetailWindow.projectDetailView.fromSubmitRequestWindow = true;
				 this.projectDetailWindow.projectDetailView.experimentDesignEntries.refresh();
				 this.projectDetailWindow.projectDetailView.experimentFactorEntries.refresh();
				 
				 this.projectDetailWindow.labCombo.selectedItem = labCombo.selectedItem;
				 this.projectDetailWindow.labCombo.enabled = false;
				 
				 PopUpManager.centerPopUp(this.projectDetailWindow);		
				
			} else {
				mx.controls.Alert.show(getNewProject.lastResult..ACTMESSAGE.@TEXT, "Get new project failed");
			}
		}
		
		public function onProjectAdded(idProject:Object):void {
			selectedIdProject = idProject;
			var params:Object = new Object();
			params.idProject = idProject;
			getProject.send(params);
		}
		
		private function onGetProject(event:ResultEvent):void {
			var newProject:Object = getProject.lastResult..Project.(@idProject == selectedIdProject);
			parentApplication.filteredProjectListForSubmitRequests.addItem(newProject);
			this.projectCombo.selectedItem = newProject;
		}
		
		private function onGetProjectRequestList(event:ResultEvent):void {
			
			this.requestCloneWindow = views.RequestCloneWindow(PopUpManager.createPopUp(this, views.RequestCloneWindow, true));
			PopUpManager.centerPopUp(requestCloneWindow);
			requestCloneWindow.expandAllNodes();
		}
		
		private function onPickStartingPoint():void {
			if (cloneRequestRadio.selected) {
				getProjectRequestList.send();
			}
		}
		
		public function cloneRequest(requestToClone:Object):void {
			this.requestToClone = requestToClone;
			getRequestToClone.send();
		}
		
		private function onGetRequestToClone(event:ResultEvent):void {
			request = getRequestToClone.lastResult..Request.(@idRequest == requestToClone.@idRequest);
			request.@idRequest = "0";
			request.@number = "";
			request.@idLab = labCombo.selectedItem.@idLab;
			request.@idAppUser = parentApplication.createSecurityAdvisor.lastResult.@idAppUser;
			request.@idProject = projectCombo.selectedItem.@idProject;

			// Make sure we render the annotation tab because
			// otherwise we won't activate the renderer code that
			// hides/shows the sample annotation columns in the samples
			// grid
			theTab.selectedChild = this.annotationView;
						
			callLater(initializeControls);
			
			
			callLater(checkSampleSetupCompleteness);
			callLater(checkSamplesCompleteness);
			callLater(checkHybSetupCompleteness);
			callLater(checkHybsCompleteness);
			
			
		}
		
		private function onGetProjectForEdit(event:ResultEvent):void {
			if (getProjectForEdit.lastResult.name() == "OpenProjectList") {
				 parentApplication.navExperimentView.selectedProject = getProjectForEdit.lastResult.Project.(@idProject == projectCombo.selectedItem.@idProject);

				 this.projectDetailWindow = views.ProjectDetailWindow(PopUpManager.createPopUp(this, views.ProjectDetailWindow, true));
				 this.projectDetailWindow.title = "Edit Project";
				 this.projectDetailWindow.projectDetailView.fromSubmitRequestWindow = true;
				 this.projectDetailWindow.projectDetailView.experimentDesignEntries.refresh();
				 this.projectDetailWindow.projectDetailView.experimentFactorEntries.refresh();
				 
				 this.projectDetailWindow.labCombo.selectedItem = labCombo.selectedItem;
				 this.projectDetailWindow.labCombo.enabled = false;
				 
				 PopUpManager.centerPopUp(this.projectDetailWindow);		
				
			} else {
				mx.controls.Alert.show(getNewProject.lastResult..ACTMESSAGE.@TEXT, "Get project for edit failed");
			}
			
		}
		
		private function onGetNewRequest(event:ResultEvent):void {
			request = getNewRequest.lastResult..Request.(@idRequest = '0');
			request.@idAppUser = parentApplication.createSecurityAdvisor.lastResult.@idAppUser;

		}

		private function initializeControls():void {
			numberOfSamples.text = new String(request.samples.Sample.length());
			sampleConcentration.text = "100";
			sampleTypeCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleType').DictionaryEntry.(@value == request.@idSampleTypeDefault);
			sampleOrganismCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry.(@value == request.@idOrganismSampleDefault);
			sampleSourceCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleSource').DictionaryEntry.(@value == request.@idSampleSourceDefault);
			samplePrepMethodCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethod').DictionaryEntry.(@value == request.@idSamplePrepMethodDefault);
			
			
			selectedIdSlideProduct = request.@idSlideProduct;
			numberOfHybs.text = new String(request.hybridizations.Hybridization.length());
			var theSlideProduct:Object = parentApplication.getSlideProductList.lastResult.SlideProduct.(@idSlideProduct == request.@idSlideProduct);
			microarrayCategoryCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.MicroarrayCategory').DictionaryEntry.(@value == request.@codeMicroarrayCategory);
			organismCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry.(@value == theSlideProduct.@idOrganism);
			parentApplication.filteredSlideProductListForSubmitRequests.refresh();
			slideProductCombo.selectedItem = theSlideProduct;
			initializeSlideDesigns();
			
			// We have problems with the SlideDesignComboBox item renderer selecting the correct slidedesign AFTER the
			// dataprovider is refreshed (filtered by organism, etc.)  So to work around this problem,
			// the column is hidden and then shown again in the 'show' event of the hybs tab.
			// This somehow forces the correct order of events to occur.
			slideDesignColumn.visible = false;
			
			theTab.selectedChild = this.setupView;
			
			
			
		}
		
		private function initializeSlideDesigns():void {
			selectedIdSlideProduct = slideProductCombo.selectedItem.@idSlideProduct;
			slideDesigns = new XMLListCollection(parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SlideDesign').DictionaryEntry.(@value == '' || @idSlideProduct == selectedIdSlideProduct));
			
			// If there is only one slide design (besides the blank entry) for the slide product,
			// set all of the hybs to it.
			if (slideDesigns.length == 2) {
				for each (var hyb:Object in hybs) {
					hyb.@idSlideDesign = slideDesigns[1].@idSlideDesign;
				}
			}
			// If there is more than one slide design, add an empty node so that
			// the user notices that a selection is required for each
			// hyb slide design. 
			else {
				//var emptyNode:XML = <SlideDesign idSlideDesign='' name=''/>;
				//slideDesigns.addItemAt(emptyNode, 0);				
			}
			checkHybsCompleteness();
			slideDesignColumn.visible = false;
		}
		
		private function clearHybSlideDesigns():void {
			if (request.@idSlideProduct == '' ||
				request.@idSlideProduct != slideProductCombo.selectedItem.@idSlideProduct) {
			
				for each (var hyb:Object in hybs) {
					hyb.@idSlideDesign = '';
				}
				checkHybsCompleteness();
			}
			
		}
		
		private function showSlideDesignColumn():void {
			slideDesignColumn.visible = true;
		}
		
		
		
		public function sortSampleCharacteristics(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var sc1:String = obj1.@sampleCharacteristic;
				var sc2:String = obj2.@sampleCharacteristic;
				
				if (sc1 == 'Other') {
					return 1;
				} else if (sc2 == 'Other') {
					return  -1;
				} else {
					if (sc1 < sc2) {
						return -1;
					} else if (sc1 > sc2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}	
		
		public function clearOutUncheckedSampleAnnotations():void {
			for each(var annotation:Object in sampleCharacteristicEntries) {
				var isSelected:String;
				var value:String;
				if (annotation.@isSelected == "false") {
					isSelected = "N";
					value = '';
				} else {
					isSelected = "Y";
					value = null;
				}
					
				for each(var sample:XML in samples) {
					switch (annotation.@codeSampleCharacteristic.toString()) { 
						case 'AGE' :
							sample.@AGE = (value == null ? sample.@AGE : value);
							request.@AGE = isSelected;
							break;
						case 'CELLLINE' :
							sample.@CELLLINE = (value == null ? sample.@CELLLINE : value);
							request.@CELLLINE = isSelected;
							break;
						case 'CELLTYPE' :
							sample.@CELLTYPE = (value == null ? sample.@CELLTYPE : value);
							request.@CELLTYPE = isSelected;
							break;
						case 'CLININFO' :
							sample.@CLININFO = (value == null ? sample.@CLININFO : value);
							request.@CLININFO = isSelected;
							break;
						case 'COMPOUND' :
							sample.@COMPOUND = (value == null ? sample.@COMPOUND : value);
							request.@COMPOUND = isSelected;
							break;
						case 'DOSE' :
							sample.@DOSE = (value == null ? sample.@DOSE : value);
							request.@DOSE = isSelected;
							break;
						case 'DISSTATE' :
							sample.@DISSTATE = (value == null ? sample.@DISSTATE : value);
							request.@DISSTATE = isSelected;
							break;
						case 'GENMOD' :
							sample.@GENMOD = (value == null ? sample.@GENMOD : value);
							request.@GENMOD = isSelected;
							break;
						case 'GROWTHCOND' :
							sample.@GROWTHCOND = (value == null ? sample.@GROWTHCOND : value);
							request.@GROWTHCOND = isSelected;
							break;
						case 'GENOTYPE' :
							sample.@GENOTYPE = (value == null ? sample.@GENOTYPE : value);
							request.@GENOTYPE = isSelected;
							break;
						case 'INDIV' :
							sample.@INDIV = (value == null ? sample.@INDIV : value);
							request.@INDIV = isSelected;
							break;
						case 'ORGPART' :
							sample.@ORGPART = (value == null ? sample.@ORGPART : value);
							request.@ORGPART = isSelected;
							break;
						case 'OTHER' :
							sample.@OTHER = (value == null ? sample.@OTHER : value);
							request.@OTHER = isSelected;
							break;
						case 'SEX' :
							sample.@SEX = (value == null ? sample.@SEX : value);
							request.@SEX = isSelected;
							break;
						case 'TEMP' :
							sample.@TEMP = (value == null ? sample.@TEMP : value);
							request.@TEMP = isSelected;
							break;
						case 'TIME' :
							sample.@TIME = (value == null ? sample.@TIME : value);
							request.@TIME = isSelected;
							break;
						default :
							break;    							 
					}
				}
			}
		}
		
		
		public function showSampleAnnotationColumn(codeSampleCharacteristic:String, show:Boolean):void {
			if (samplesGrid == null) {
				return;
			}
			for (var x:Number = 0; x < samplesGrid.columnCount; x++) {
				var dc:DataGridColumn = samplesGrid.columns[x];
				if ( dc.dataField == "@" + codeSampleCharacteristic) {
					dc.visible = show;
					break;					
				}
			}
			for (var x1:Number = 0; x1 < this.samplesGridConfirm.columnCount; x1++) {
				var dc1:DataGridColumn = samplesGridConfirm.columns[x1];
				if ( dc1.dataField == "@" + codeSampleCharacteristic) {
					dc1.visible = show;
					break;
				}
			}
		}
		
		private function addSample():void {
			var emptyNode:XML = new XML("<Sample " +
			    " idSample='" + "Sample" + samples.length + "'" +
			    " name='' description='' " +
				" concentration='" + sampleConcentration.text + "'" +
				" idSampleType='" + sampleTypeCombo.selectedItem.@value + "'" +
				" idSamplePrepMethod='" + samplePrepMethodCombo.selectedItem.@value + "'" +				
				" idOrganism='" + this.sampleOrganismCombo.selectedItem.@value + "'" +				
				" idSampleSource='" + sampleSourceCombo.selectedItem.@value + "'" +				
				"/>");
			
			samples.addItem(emptyNode);
	        	
		}
		
		private function deleteSample():void {
			if (samplesGrid.selectedIndex != -1) {
				for each(var i:int in samplesGrid.selectedIndices) {					
					samples.removeItemAt(i);
				}
			}
		}
		
		private function copySample():void {
			if (samplesGrid.selectedIndex != -1) {
				for each(var i:int in samplesGrid.selectedIndices) {					
					var sampleToCopy:Object = samples[i];
					
					var emptyNode:XML = new XML("<Sample " +
					" idSample='" + "Sample" + samples.length + "'" +
					" name='" +  sampleToCopy.@name + "'" + 
					" description='" + sampleToCopy.@description + "'" + 
					" idSampleType='" + sampleToCopy.@idSampleType + "'" +
					" idSamplePrepMethod='" + sampleToCopy.@idSamplePrepMethod + "'" +				
					" idOrganism='" + sampleToCopy.@idOrganism + "'" +				
					" idSampleSource='" + sampleToCopy.@idSampleSource + "'" +				
					" concentration='" + sampleToCopy.@concentration + "'" +				
					" AGE='" + sampleToCopy.@AGE + "'" +				
					" CELLLINE='" + sampleToCopy.@CELLLINE + "'" +				
					" CELLTYPE='" + sampleToCopy.@CELLTYPE + "'" +				
					" CLININFO='" + sampleToCopy.@CLININFO + "'" +				
					" COMPOUND='" + sampleToCopy.@COMPOUND + "'" +				
					" DISSTATE='" + sampleToCopy.@DISSTATE + "'" +				
					" DOSE='" + sampleToCopy.@DOSE + "'" +				
					" GENMOD='" + sampleToCopy.@GENMOD + "'" +				
					" GENOTYPE='" + sampleToCopy.@GENOTYPE + "'" +				
					" INDIV='" + sampleToCopy.@INDIV + "'" +				
					" GROWTHCOND='" + sampleToCopy.@GROWTHCOND + "'" +				
					" ORGPART='" + sampleToCopy.@ORGPART + "'" +				
					" OTHER='" + sampleToCopy.@OTHER + "'" +				
					" SEX='" + sampleToCopy.@SEX + "'" +				
					" TEMP='" + sampleToCopy.@TEMP + "'" +				
					" TIME='" + sampleToCopy.@TIME + "'" +				
					"/>");
			
					samples.addItem(emptyNode);
					
				}
			}
		}
		
		public function promptToClearAllSamples():void {
			Alert.show("Remove all samples currently showing in list?",
						null, 
						(Alert.YES | Alert.NO), this, 
						onPromptToClearAllSamples);
			
		}
		
		private function onPromptToClearAllSamples(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	samples.removeAll();
            }
        }
        
        private function initializeSamplesGrid():void {
        	if (requestToClone != null) {
        		return;
        	}
        	
        	if (numberOfSamples.text == null || numberOfSamples.text == "0" || numberOfSamples.text == '') {
        		return;
        	}
        	if (sampleTypeCombo.selectedItem == null || sampleTypeCombo.selectedItem.@value == '') {
        		return;
        	}
        	if (samplePrepMethodCombo.selectedItem == null || samplePrepMethodCombo.selectedItem.@value == '') {
        		return;
        	}
        	if (sampleSourceCombo.selectedItem == null || sampleSourceCombo.selectedItem.@value == '') {
        		return;
        	}
        	if (sampleOrganismCombo.selectedItem == null || sampleOrganismCombo.selectedItem.@value == '') {
        		return;
        	}
        	if (sampleConcentration.text == null || this.sampleConcentration.text == '') {
        		return;
        	}
        	
    		var numberOfSamplesToAdd:Number = new Number(numberOfSamples.text);
    		if(samples.length <= numberOfSamplesToAdd) {
    			numberOfSamplesToAdd = numberOfSamplesToAdd - samples.length;
    		} else {
    			numberOfSamplesToAdd = 0;
    		}
    		for(var x:int = 0; x < numberOfSamplesToAdd; x++) {
    			addSample();
    		}
        }
        
        private function checkSetupCompleteness():void {
        	if (this.requestTypeGroup.selectedValue != null &&
        	    this.labCombo.selectedItem != null && this.labCombo.selectedItem.@idLab != '' &&
        	    this.billingAccountCombo.selectedItem != null && 
        	    this.projectCombo.selectedItem != null && this.projectCombo.selectedItem.@idProject != '') {
        	    	
        		this.nextButton1.enabled = true;
        		this.sampleSetupView.enabled = true;
        		this.annotationView.enabled = true;
        	    	
        	} else {
        		this.nextButton1.enabled = false;
        		this.sampleSetupView.enabled = false;
        		this.annotationView.enabled = false;
        	}
        }
        
        private function checkSampleSetupCompleteness():void {
        	if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
        	    this.sampleConcentration.text != null && this.sampleConcentration.text != '' &&
        	    this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '' &&
        	    this.sampleSourceCombo.selectedItem != null && this.sampleSourceCombo.selectedItem.@value != '' &&
        	    this.sampleOrganismCombo.selectedItem != null && this.sampleOrganismCombo.selectedItem.@value != '' &&
        	    this.samplePrepMethodCombo.selectedItem != null && this.samplePrepMethodCombo.selectedItem.@value != '' ) {
        	    	
        		this.nextButton2.enabled = true;
        		this.samplesView.enabled = true;
        	    	
        	} else {
        		this.nextButton2.enabled = false;
        		this.samplesView.enabled = false;
        	}
        }
        
        public function checkSamplesCompleteness():void {
        	var completeCount:int = 0;
        	for each(var sample:Object in samples) {
        		if (sample.@name != null && sample.@name != '' &&
        			sample.@idSampleType != null && sample.@idSampleType != '' &&
        			sample.@idSamplePrepMethod != null && sample.@idSamplePrepMethod != '' &&
        			sample.@concentration != null && sample.@concentration != '' &&
        			sample.@idSampleSource != null && sample.@idSampleSource != '' &&
        			sample.@idOrganism != null && sample.@idOrganism != '') {
        			completeCount++;       				
        		}
        	}
        	if (samples.length > 0 && completeCount == samples.length) {
        		this.nextButton4.enabled = true;
        		this.hybSetupView.enabled = true;
        		
        	} else {
        		this.nextButton4.enabled = false;
        		this.hybSetupView.enabled = false;
        	}
        
        }
        public function checkHybsCompleteness():void {
        	var completeCount:int = 0;
        	for each(var hyb:Object in hybs) {
        		if (hyb.@idSampleChannel1 != null && hyb.@idSampleChannel1 != '0'  &&
        			hyb.@idSlideDesign != null && hyb.@idSlideDesign != '') {
        			completeCount++;       				
        		}
        	}
        	if (hybs.length > 0 && completeCount == hybs.length) {
        		this.nextButton6.enabled = true;
        		this.confirmView.enabled = true;
        		
        	} else {
        		this.nextButton6.enabled = false;
        		this.confirmView.enabled = false;
        	}
        
        }


		private function addHyb():void {
			var emptyNode:XML = new XML("<Hybridization " +
			    " idHybridization='" + "Hyb" + hybs.length + "'" +
			    " notes='' " + 
				" codeSlideSource='" + slideSourceGroup.selectedValue + "'" +
				" idSampleChannel1='0'" +
				" idSampleChannel2='0'" +
				"/>");
			
			hybs.addItem(emptyNode);
	        	
		}
		
		private function checkHybSetupCompleteness():void {
        	if (this.numberOfHybs.text != null && this.numberOfHybs.text != '' &&
        	    this.slideProductCombo.selectedItem != null && this.slideProductCombo.selectedItem.@value != '' &&
        	    this.slideSourceGroup.selectedValue != null ) {
        	    	
        		this.nextButton5.enabled = true;
        		this.hybsView.enabled = true;
        	    	
        	} else {
        		this.nextButton5.enabled = false;
        		this.hybsView.enabled = false;
        	}
        }

		
		private function deleteHyb():void {
			if (hybsGrid.selectedIndex != -1) {
				for each(var i:int in hybsGrid.selectedIndices) {					
					hybs.removeItemAt(i);
				}
			}
		}
		
		private function copyHyb():void {
			if (hybsGrid.selectedIndex != -1) {
				for each(var i:int in hybsGrid.selectedIndices) {					
					var hybToCopy:Object = hybs[i];
					
					var emptyNode:XML = new XML("<Hybridization " +
    			    " idHybridization='" + "Hyb" + hybs.length + "'" +
					" notes='" + hybToCopy.@notes + "'" + 
					" idSampleChannel1='" + hybToCopy.@idSampleChannel1 + "'" +
					" idSampleChannel2='" + hybToCopy.@idSampleChannel2 + "'" +	
					" codeSlideSource='" + hybToCopy.@codeSlideSource + "'" +			
					"/>");
			
					hybs.addItem(emptyNode);
					
				}
			}
		}
		
		public function promptToClearAllHybs():void {
			Alert.show("Remove all hybs currently showing in list?",
						null, 
						(Alert.YES | Alert.NO), this, 
						onPromptToClearAllHybs);
			
		}
		
		private function onPromptToClearAllHybs(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	hybs.removeAll();
            }
        }
        private function initializeHybsGrid():void {
        	if (requestToClone != null) {
        		return;
        	}
        	
        	if (numberOfHybs.text == null || numberOfHybs.text == "0" || numberOfHybs.text == '') {
        		return;
        	}
        	if (slideProductCombo.selectedItem == null || slideProductCombo.selectedItem.@value == '') {
        		return;
        	}
    		var numberOfHybsToAdd:Number = new Number(numberOfHybs.text);
    		if(hybs.length <= numberOfHybsToAdd) {
    			numberOfHybsToAdd = numberOfHybsToAdd - hybs.length;
    		} else {
    			numberOfHybsToAdd = 0;
    		}
    		for(var x:int = 0; x < numberOfHybsToAdd; x++) {
    			addHyb();
    		}
        }

	  	private function onDragDrop(event:DragEvent) : void
		{
		   var isChannel1Drop:Boolean = false;
		   var isChannel2Drop:Boolean = false;
			
	       var ds:DragSource = event.dragSource;
	       var colXStart:int = 0;
	       var colXEnd:int = 0;
	       for each(var col:DataGridColumn in hybsGrid.columns) {
	       		colXEnd += col.width;
	       		
	       		if (event.localX >= colXStart && event.localX <= colXEnd) {
	       			if (col.headerText == "Cy3 Sample (green)") {
	       				isChannel1Drop = true;
	       				break;
	       			} else if (col.headerText == "Cy5 Sample (red)") {
	       				isChannel2Drop = true;
	       				break;
	       			}
	       		}
	       		colXStart = colXEnd;
	       }

		   // The user didn't drag over cy3 or cy5 sample column, so disregard 
		   // operation.	       
	       if (!isChannel1Drop && !isChannel2Drop) {
		       	event.preventDefault();
		       	event.target.hideDropFeedback(event);
		       	DragManager.showFeedback(DragManager.NONE);
		       	checkHybsCompleteness();
		       	return;
	       }
	       
	       // retrieve the data associated with the "items" format. This will be the data that
	       // the dragInitiator has copied into the DragSource.
	       var items:Array = ds.dataForFormat("items") as Array;
	
	       // determine where in the grid the drop occurs and select that node by the index; followed by 
	       // retrieving the node itself. 
	       var r:int = hybsGrid.calculateDropIndex(event);
	       hybsGrid.selectedIndex = r;
	       var node:XML = hybsGrid.selectedItem as XML;
	       var p:*;
	
	
	       if (node.name()  == "Hybridization") {
	       		p = node;
	       } else {
	       		//ignore drop operations not on existing hyb row
	       }
	
	       // taking all of the items in the DragSouce, update the appropriate
	       // sample id on the hyb node.
	       if (p != null) {
		       for(var i:Number=0; i < items.length; i++) {
		       	if (items[i].name() == "Sample") {
		       		if (isChannel1Drop) {
			       		hybsGrid.selectedItem.@idSampleChannel1 = items[i].@idSample;	       			
		       		} else if (isChannel2Drop) {
			       		hybsGrid.selectedItem.@idSampleChannel2 = items[i].@idSample;	       			
		       			
		       		}
		       	} 
		       }
	       	
	       }	
	       
	       this.sampleDragGrid.invalidateDisplayList();
	       this.sampleDragGrid.invalidateList();
	       
	       // Don't allow flex to do any default moves to the data.  
	       // We handle it in the code above.
	       event.preventDefault();
	       
	       checkHybsCompleteness();
		}
		
		private function submitRequest():void {
			request.@codeRequestCategory = this.requestTypeGroup.selectedValue;
			request.@idLab = labCombo.selectedItem.@idLab;
			request.@idAppUser = parentApplication.createSecurityAdvisor.lastResult.@idAppUser;
			request.@idBillingAccount = this.billingAccountCombo.selectedItem.@idBillingAccount;
			request.@idProject = projectCombo.selectedItem.@idProject;
			request.@idSlideProduct = slideProductCombo.selectedItem.@idSlideProduct;
			
			request.@idSampleTypeDefault = sampleTypeCombo.selectedItem.@value;
			request.@idSampleSourceDefault = sampleSourceCombo.selectedItem.@value;
			request.@idSamplePrepMethodDefault = samplePrepMethodCombo.selectedItem.@value;
			request.@idOrganismSampleDefault = this.sampleOrganismCombo.selectedItem.@value;
			request.@codeMicroarrayCategory = this.microarrayCategoryCombo.selectedItem.@codeMicroarrayCategory;
			
			request.replace("samples", <samples></samples>); 
			for each(var sample:Object in samples) {
				request.samples.appendChild(sample);
			}
			request.replace("hybridizations", <hybridizations></hybridizations>); 
			for each(var hyb:Object in hybs) {
				request.hybridizations.appendChild(hyb);
			}

			var params:Object = new Object();
			params.requestXMLString = request.toXMLString();
			params.idProject = projectCombo.selectedItem.@idProject;
			saveNewRequest.send(params);			
		}
		
		private function onSaveNewRequest(event:ResultEvent):void {
			if (saveNewRequest.lastResult.name() == "SUCCESS") {
				submittedIdRequest = saveNewRequest.lastResult.@idRequest;
				submittedRequestNumber = saveNewRequest.lastResult.@requestNumber;
				confirmButtonStack.selectedIndex = 1;
				
				setupView.enabled = false;
				sampleSetupView.enabled = false;
				annotationView.enabled = false;
				samplesView.enabled = false;
				hybSetupView.enabled = false;
				hybsView.enabled = false;
				
			} else {
				Alert.show(saveNewRequest.lastResult..ACTMESSAGE.@TEXT);
			}
		}
		
		private function showPrintableRequestForm():void {
			var url:URLRequest = new URLRequest('http://localhost/gnomex/ShowRequestForm.gx?idRequest=' + submittedIdRequest);
			navigateToURL(url, '_blank');			
		}


		]]>
	</mx:Script>
	
  	<mx:XMLListCollection id="sampleCharacteristicEntries" source="{request.SampleCharacteristicEntries.SampleCharacteristicEntry}" 
	  	 sort="{sampleCharacteristicSorter}"/>
	<mx:Sort id="sampleCharacteristicSorter" compareFunction="sortSampleCharacteristics" unique="true"/>


	<mx:XMLListCollection id="samples" source="{request.samples.Sample}"/>

	<mx:XMLListCollection id="hybs" source="{request.hybridizations.Hybridization}"/>
  
 	<mx:VBox  width="100%" height="100%" paddingBottom="6" paddingLeft="6" paddingRight="6" paddingTop="6">
		<mx:TabNavigator  click="theTab.creationPolicy='all'"  id="theTab" width="100%" height="100%" paddingLeft="8" paddingRight="4" paddingBottom="4"  paddingTop="6">
			<mx:Canvas  id="setupView" label="Request setup" width="100%" height="100%">
				<mx:VBox width="100%" height="100%" verticalGap="20">
					<mx:VBox width="100%" verticalGap="1">
					    <mx:HBox  width="100%" horizontalAlign="left" paddingBottom="14">
					        <mx:Button label="&lt; Back" enabled="false" visible="true"/>
					        <mx:Button id="nextButton1"  label="Next &gt;" enabled="false" click="{theTab.selectedChild = sampleSetupView;}"/>
					        <mx:Button label="Cancel" id="cancelButton1"/>
					    </mx:HBox>
					    <mx:HBox width="100%" horizontalGap="0">
					    <mx:Image source="assets/bullet_orange.png"/>
					    <mx:Label text="Select a request type:" width="240"/>
							<mx:HBox width="100%" horizontalGap="8">
								<mx:VBox verticalGap="1">
								    <mx:RadioButtonGroup id="requestTypeGroup" />
									<mx:RadioButton groupName="requestTypeGroup" label="Agilent Oligo Microarray Platform" value="AGIL" click="setRequestCategoryName()" change="checkSetupCompleteness()" id="requestRadioAgilent"/>							
									<mx:RadioButton groupName="requestTypeGroup" label="Affymetrix Microarray Platform" value="AFFY" click="setRequestCategoryName()" change="checkSetupCompleteness()" id="requestRadioAffy"/>							
									<mx:RadioButton groupName="requestTypeGroup" label="NimbleGen Microarray Platform" value="NIMBLE" click="setRequestCategoryName()" change="checkSetupCompleteness()" id="requestRadioNimbleGen"/>							
								</mx:VBox>
								<mx:VBox>									
									<mx:RadioButton groupName="requestTypeGroup" label="Sample Quality" value="QC" click="setRequestCategoryName()" change="checkSetupCompleteness()" id="requestRadioQC"/>														
								</mx:VBox>
								<mx:VBox>
									<mx:RadioButton groupName="requestTypeGroup" label="Solexa Sequencing" value="SOLEXA" click="setRequestCategoryName()" change="checkSetupCompleteness()" id="requestRadioSolexa"/>																							
								</mx:VBox>
							</mx:HBox>
					    </mx:HBox>
					</mx:VBox>
					<mx:HBox width="100%" horizontalGap="0">
						<mx:Image source="assets/bullet_orange.png"/>
						<mx:Label text="Select the lab submitting this request:" width="240"/>
						<mx:ComboBox dataProvider="{parentApplication.promptedSubmitRequestLabList}" 
							selectedIndex="-1" labelField="@name" 
							width="370"
							 change="parentApplication.filteredProjectListForSubmitRequests.refresh();projectCombo.selectedIndex = -1;checkSetupCompleteness()" id="labCombo">
						</mx:ComboBox>
					</mx:HBox>
					<mx:VBox width="100%" verticalGap="0">
						<mx:HBox width="100%" horizontalGap="0">
							<mx:Image source="assets/bullet_orange.png"/>
							<mx:Label text="Select the account to be billed:" width="240"/>
							<mx:ComboBox labelField="@accountName" width="370" id="billingAccountCombo" change="checkSetupCompleteness()">
								<mx:dataProvider>{labCombo.selectedItem.billingAccounts.BillingAccount}</mx:dataProvider>
							</mx:ComboBox>
						</mx:HBox>
						<mx:HBox width="100%">
						    <mx:Spacer width="240"/>
						    <mx:Text width="100%">
						        <mx:htmlText><![CDATA[ If billing account is inactive, please download the work authorization form below.<br> Forward the completed form to the Microarray Core Facility (HCI room 3350; Fax 585-0900)]]></mx:htmlText>
							</mx:Text>
							
						</mx:HBox>
						<mx:HBox width="100%">
						    <mx:Spacer width="240"/>
							<mx:LinkButton label="Work authorization form (pdf)" useHandCursor="true" textDecoration="underline" color="#0000ff">
								<mx:click>navigateToURL(new URLRequest('https://hci-as1.hci.utah.edu/gnomex/microarray_work_authorization_form_0906.pdf'), '_blank');</mx:click>
							</mx:LinkButton>
							<mx:LinkButton label="Work authorization form (Microsoft work doc)" textDecoration="underline" useHandCursor="true" color="#0000ff">
								<mx:click>navigateToURL(new URLRequest('https://hci-as1.hci.utah.edu/gnomex/microarray_work_authorization_form_0906.doc'), '_blank');</mx:click>
							</mx:LinkButton>
						</mx:HBox>
						
					</mx:VBox>
					<mx:HBox width="100%" horizontalGap="0">
						<mx:Image source="assets/bullet_orange.png"/>
						<mx:Text width="240" height="50">
							<mx:htmlText>Select a project or create a new project which describes the overall experimental purpose and design:</mx:htmlText>
						</mx:Text>
						<mx:VBox verticalGap="2">
							<mx:ComboBox dataProvider="{parentApplication.filteredProjectListForSubmitRequests}" labelField="@name" width="370" id="projectCombo" change="checkSetupCompleteness()">
							</mx:ComboBox>
							<mx:HBox width="100%" horizontalAlign="right">
								<mx:Button id="editProjectButton" label="Edit project..." icon="@Embed('../assets/folder.png')" click="showEditProjectWindow()"/>
								<mx:Button id="newProjectButton" label="New project..." icon="@Embed('../assets/folder_add.png')" click="showNewProjectWindow()"/>
							</mx:HBox>					
						</mx:VBox>
					</mx:HBox>
					<mx:VBox width="100%" verticalGap="1">
					    <mx:HBox horizontalGap="0">
					    <mx:Image source="assets/bullet_orange.png"/>
					    <mx:Label text="Pick a starting point:" width="240"/>
					    	<mx:VBox verticalGap="1" width="100%">
								<mx:RadioButton groupName="requestTemplateGroup" label="Submit a new request from scratch" selected="true" id="submitNewRequestRadio"/>							
								<mx:HBox width="100%">
									<mx:RadioButton groupName="requestTemplateGroup" label="Use a previous request as a template" click="onPickStartingPoint()" id="cloneRequestRadio"/>						
									<mx:Label text="{requestToClone.@label}" color="#0000ff" width="100%"/>
									
								</mx:HBox>
					    		
					    	</mx:VBox>
					    </mx:HBox>
					</mx:VBox>
					
				</mx:VBox>
			</mx:Canvas>
			<mx:Canvas id="sampleSetupView" label="Sample setup" width="100%" height="100%" enabled="false">
				<mx:VBox width="100%" height="100%" verticalGap="2">
					<mx:HBox width="100%" horizontalAlign="left">
					    <mx:Button label="&lt; Back" enabled="true" click="{theTab.selectedChild = setupView;}"/>
					    <mx:Button label="Next &gt;" id="nextButton2" enabled="false" click="{theTab.selectedChild = annotationView;}"/>
					    <mx:Button label="Cancel"/>
					</mx:HBox>
					<mx:VBox width="100%" height="100%"  paddingTop="12"  verticalGap="20">
						<mx:HBox width="100%" horizontalGap="0">
							<mx:Image source="assets/bullet_orange.png"/>
							<mx:Label text="How many samples will you be submitting?" width="340" />
							<mx:TextInput width="40" id="numberOfSamples" change="initializeSamplesGrid();checkSampleSetupCompleteness()"/>							
						</mx:HBox>
						<mx:HBox width="100%" horizontalGap="0">
							<mx:Image source="assets/bullet_orange.png"/>
							<mx:Label text="Select the sample type that best describes your samples:" width="340"/>
							<mx:ComboBox labelField="@display" width="300" id="sampleTypeCombo" change="initializeSamplesGrid();parentApplication.samplePrepMethodList.refresh();checkSampleSetupCompleteness()">							
								<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleType').DictionaryEntry}</mx:dataProvider>
							</mx:ComboBox>
						</mx:HBox>
						<mx:HBox width="100%" horizontalGap="0">
							<mx:Image source="assets/bullet_orange.png"/>
							<mx:Label text="Select the organism of your samples:" width="340"/>
							<mx:ComboBox labelField="@display" width="300" id="sampleOrganismCombo" change="initializeSamplesGrid();organismCombo.selectedItem = sampleOrganismCombo.selectedItem;checkSampleSetupCompleteness()">							
								<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry}</mx:dataProvider>
							</mx:ComboBox>
						</mx:HBox>
						<mx:HBox width="100%" horizontalGap="0">
							<mx:Image source="assets/bullet_orange.png"/>
							<mx:Label text="Select the source of your samples:" width="340"/>
							<mx:ComboBox labelField="@display" width="300" id="sampleSourceCombo" change="initializeSamplesGrid();checkSampleSetupCompleteness()">							
								<mx:dataProvider>{parentApplication.sampleSourceList}</mx:dataProvider>
							</mx:ComboBox>
						</mx:HBox>
						<mx:HBox width="100%" horizontalGap="0">
							<mx:Image source="assets/bullet_orange.png"/>
							<mx:Label text="Enter the approximate sample concentration:" width="340"/>
							<mx:TextInput width="40" id="sampleConcentration" change="initializeSamplesGrid();checkSampleSetupCompleteness()"/>							
						</mx:HBox>
						<mx:HBox width="100%" horizontalGap="0">
							<mx:Image source="assets/bullet_orange.png"/>
							<mx:Label text="Select the nucleic acid purification/extraction method:" width="340"/>
							<mx:ComboBox labelField="@display" width="300" id="samplePrepMethodCombo" change="initializeSamplesGrid();checkSampleSetupCompleteness()" creationComplete="addSamplePrepMethodFilter()">							
								<mx:dataProvider>{parentApplication.samplePrepMethodList}</mx:dataProvider>
							</mx:ComboBox>
						</mx:HBox>
						
					</mx:VBox>
					
				</mx:VBox>
				
			</mx:Canvas>
			<mx:Canvas label="Annotations" width="100%" height="100%" enabled="false" id="annotationView">
				<mx:VBox width="100%" height="100%">
					<mx:HBox width="100%" horizontalAlign="left">
					    <mx:Button label="&lt; Back" enabled="true" click="{theTab.selectedChild = sampleSetupView;}"/>
					    <mx:Button label="Next &gt;" id="nextButton3" enabled="true" click="{theTab.selectedChild = samplesView;}"/>
					    <mx:Button label="Cancel"/>
					</mx:HBox>
					<mx:HBox width="100%" height="100%" horizontalGap="24">
						<mx:VBox height="100%">
						    <mx:HBox>
							    <mx:Image source="assets/bullet_orange.png"/>
							    <mx:Text  htmlText="Specify all sample characteristics you wish to &lt;BR&gt; annotate in subsequent columns:"/>
						    	
						    </mx:HBox>
							<mx:DataGrid id="sampleAnnotationGrid" height="100%" 
								dataProvider="{sampleCharacteristicEntries}" 
								selectionColor="#FFFFFF" fontSize="9"
							showHeaders="true" headerHeight="20" variableRowHeight="true" width="280">
							    <mx:columns>
							        <mx:DataGridColumn headerText=" " 
							        	width="17" 
							        	editable="true"                        	
							        	dataField="@isSelected" 
							        	editorDataField="selected"
							        	itemRenderer="views.CheckBoxIsSelectedSampleCharacteristic" >
							        </mx:DataGridColumn>
							        <mx:DataGridColumn  
							        	headerText="Sample characteristics"
							        	editable="false" editorDataField="selected" 
							        	dataField="@sampleCharacteristic">
							            <mx:itemRenderer>
							                <mx:Component >
							                     <mx:HBox>
							                       <mx:Label text="{data.@sampleCharacteristic}">			                           	
							                       </mx:Label>
							                       <mx:TextInput id="scOtherLabel" fontSize="9"
							                       	text="{data.@otherLabel}"
							                       	change="{data.@otherLabel = scOtherLabel.text;parentDocument.request.@otherLabel = scOtherLabel.text;parentDocument.otherDataColumn.headerText = scOtherLabel.text;parentDocument.otherDataColumnConfirm.headerText = scOtherLabel.text}" 
							                       	width="{data.@sampleCharacteristic == 'Other' ? 130 : 0}"  
							                       	height="{data.@sampleCharacteristic == 'Other' ? 20 : 0}"  
							                       	visible="{data.@sampleCharacteristic == 'Other' ? true : false}" 
							                       	editable="{data.@sampleCharacteristic == 'Other' ? true : false}">			                           
							                       </mx:TextInput>
							                     	
							                     </mx:HBox>
							                </mx:Component>
							            </mx:itemRenderer>
							        </mx:DataGridColumn>
							    </mx:columns>
							</mx:DataGrid>
							
						</mx:VBox>
						<mx:VBox width="100%" height="100%">
							<mx:HBox>
								<mx:Image source="assets/bullet_orange.png"/>
								<mx:Text  htmlText="Describe in general terms how the samples differ:" width="100%" height="28"/>
								
							</mx:HBox>
							<mx:TextArea width="100%" height="100"/>
							
						</mx:VBox>
						
						
					</mx:HBox>
				
				</mx:VBox>
			</mx:Canvas>
			<mx:Canvas label="Samples"  id="samplesView" width="100%" height="100%"  enabled="false">
				<mx:VBox width="100%" height="100%">
					<mx:HBox width="100%" horizontalAlign="left">
					    <mx:Button label="&lt; Back" enabled="true" click="{theTab.selectedChild = annotationView;}"/>
					    <mx:Button label="Next &gt;" id="nextButton4" enabled="false" click="{theTab.selectedChild = hybSetupView;}"/>
					    <mx:Button label="Cancel"/>
					</mx:HBox>
					<mx:Panel title="Samples" headerHeight="20" width="100%" height="100%">
						<mx:Label text="Fill in sample details.  Fields in pink are required."/>
						<mx:HBox width="100%">
							<mx:HBox>
								<mx:Button label="Add" click="addSample()" icon="@Embed('../assets/table_row_insert.png')"/>
								<mx:Button label="Copy" click="copySample()" icon="@Embed('../assets/table_multiple.png')"/>
								<mx:Button label="Delete" click="deleteSample()" icon="@Embed('../assets/table_row_delete.png')"/>
							</mx:HBox>
							<mx:HBox horizontalAlign="right" width="100%">
								<mx:Button label="Clear all" click="promptToClearAllSamples()" icon="@Embed('../assets/folder_delete.png')"/>
							</mx:HBox>
								
						</mx:HBox>
						<mx:DataGrid width="100%" height="100%" id="samplesGrid"  editable="true" dataProvider="{samples}" allowMultipleSelection="true" itemFocusOut="checkSamplesCompleteness()">
							<mx:columns>
	  					        <mx:DataGridColumn editable="false" headerText=""  width="15" resizable="false" labelFunction="getSamplesGridRowNumber"/>
								<mx:DataGridColumn headerText="Sample Name" width="10" dataField="@name"/>
								<mx:DataGridColumn headerText="Concentration" width="5" dataField="@concentration"/>
				                <mx:DataGridColumn headerText="Sample Type"  width="12" dataField="@idSampleType" 
				                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="true" itemRenderer="views.ComboBoxSampleType" />
				                <mx:DataGridColumn headerText="Organism"  width="12" dataField="@idOrganism" 
				                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="true" itemRenderer="views.ComboBoxOrganism" />
				                <mx:DataGridColumn headerText="Sample Source"  width="12" dataField="@idSampleSource" 
				                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="true" itemRenderer="views.ComboBoxSampleSource" />
				                <mx:DataGridColumn headerText="Sample Prep Method"  width="12" dataField="@idSamplePrepMethod" 
				                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="true" itemRenderer="views.ComboBoxSamplePrepMethod" />
								<mx:DataGridColumn id="AGE" headerText="Age" dataField="@AGE" editable="true" visible="false"/>
								<mx:DataGridColumn id="CELLLINE" headerText="Cell line" dataField="@CELLLINE" editable="true" visible="false"/>
								<mx:DataGridColumn id="CELLTYPE" headerText="Cell Type" dataField="@CELLTYPE" editable="true" visible="false"/>
								<mx:DataGridColumn id="CLININFO" headerText="Clinical Info" dataField="@CLININFO" editable="true" visible="false"/>
								<mx:DataGridColumn id="COMPOUND" headerText="Compound" dataField="@COMPOUND" editable="true" visible="false"/>
								<mx:DataGridColumn id="DISSTATE" headerText="Disease State" dataField="@DISSTATE" editable="true" visible="false"/>
								<mx:DataGridColumn id="DOSE" headerText="Dose" dataField="@DOSE" editable="true" visible="false"/>
								<mx:DataGridColumn id="GENMOD" headerText="Genetic Modification" dataField="@GENMOD" editable="true" visible="false"/>
								<mx:DataGridColumn id="GENOTYPE" headerText="Genotype" dataField="@GENOTYPE" editable="true" visible="false"/>
								<mx:DataGridColumn id="GROWTHCOND" headerText="Growth Conditions" dataField="@GROWTHCOND" editable="true" visible="false"/>
								<mx:DataGridColumn id="INDIV" headerText="Individual" dataField="@INDIV" editable="true" visible="false"/>
								<mx:DataGridColumn id="ORGPART" headerText="Organ / Tissue" dataField="@ORGPART" editable="true" visible="false"/>
								<mx:DataGridColumn id="SEX" headerText="Sex" dataField="@SEX" editable="true" visible="false"/>
								<mx:DataGridColumn id="TEMP" headerText="Temperature" dataField="@TEMP" editable="true" visible="false"/>
								<mx:DataGridColumn id="TIME" headerText="Time Course" dataField="@TIME" editable="true" visible="false"/>
								<mx:DataGridColumn id="otherDataColumn" headerText="Other" dataField="@OTHER" editable="true" visible="false"/>
								<mx:DataGridColumn headerText="Description" width="20" dataField="@description"/>
							</mx:columns>
						</mx:DataGrid>
						
					</mx:Panel>
					
				</mx:VBox>
			</mx:Canvas>
			<mx:Canvas label="Hyb setup" width="100%" height="100%" enabled="false" id="hybSetupView">
				<mx:VBox width="100%" height="100%" verticalGap="20">
					<mx:HBox width="100%" horizontalAlign="left">
					    <mx:Button label="&lt; Back" enabled="true" click="{theTab.selectedChild = samplesView;}"/>
					    <mx:Button label="Next &gt;" id="nextButton5" enabled="false" click="{theTab.selectedChild = hybsView;}"/>
					    <mx:Button label="Cancel"/>
					</mx:HBox>
					<mx:HBox width="100%" horizontalGap="0">
						<mx:Image source="assets/bullet_orange.png"/>
						<mx:Label text="Select an organism:" width="300" />
						<mx:ComboBox labelField="@display" width="300" id="organismCombo">							
							<mx:change>parentApplication.filteredSlideProductListForSubmitRequests.refresh();slideProductCombo.selectedIndex = -1;checkHybSetupCompleteness()</mx:change>
							<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry}</mx:dataProvider>
						</mx:ComboBox>
					</mx:HBox>
					<mx:HBox width="100%" horizontalGap="0">
						<mx:Image source="assets/bullet_orange.png"/>
						<mx:Label text="Select an experiment category:" width="300" />
						<mx:ComboBox labelField="@display" width="300" id="microarrayCategoryCombo">							
							<mx:change>parentApplication.filteredSlideProductListForSubmitRequests.refresh();slideProductCombo.selectedIndex = -1;checkHybSetupCompleteness()</mx:change>
							<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.MicroarrayCategory').DictionaryEntry}</mx:dataProvider>
						</mx:ComboBox>
					</mx:HBox>
					<mx:HBox width="100%" horizontalGap="0">
						<mx:Image source="assets/bullet_orange.png"/>
						<mx:Label text="Select on of the following:" width="300" />
						<mx:RadioButtonGroup id="customVsCatalogRadioGroup"/>
						<mx:RadioButton label="Catalog microarray" groupName="customVsCatalogRadioGroup" id="isCatalogRadio" selected="true">
							<mx:change>parentApplication.filteredSlideProductListForSubmitRequests.refresh();slideProductCombo.selectedIndex = -1;checkHybSetupCompleteness()</mx:change>
						</mx:RadioButton>
						<mx:RadioButton label="Custom microarray" groupName="customVsCatalogRadioGroup" id="isCustomRadio">
							<mx:change>parentApplication.filteredSlideProductListForSubmitRequests.refresh();slideProductCombo.selectedIndex = -1;checkHybSetupCompleteness()</mx:change>
						</mx:RadioButton>
					</mx:HBox>
					<mx:HBox width="100%" horizontalGap="0">
						<mx:Image source="assets/bullet_orange.png"/>
						<mx:Text width="300">
							<mx:htmlText><![CDATA[Select the microarray slide or slide set to be used <BR> for these hybridizations:]]></mx:htmlText>
						</mx:Text>
						<mx:ComboBox labelField="@display" width="420" id="slideProductCombo"  change="{initializeHybsGrid();clearHybSlideDesigns();initializeSlideDesigns();checkHybSetupCompleteness()}" creationComplete="addSlideProductFilter()">							
							<mx:dataProvider>{parentApplication.filteredSlideProductListForSubmitRequests}</mx:dataProvider>
						</mx:ComboBox>
					</mx:HBox>
					<mx:HBox width="100%" horizontalGap="0">
						<mx:Image source="assets/bullet_orange.png"/>
						<mx:Text width="300" >
							<mx:htmlText><![CDATA[How many hybridizations will be performed on this <BR>experiment request?]]></mx:htmlText>
						</mx:Text>
						<mx:TextInput width="40" id="numberOfHybs" change="initializeHybsGrid();clearHybSlideDesigns();initializeSlideDesigns();checkHybSetupCompleteness()">
							
						</mx:TextInput>
					</mx:HBox>
					<mx:HBox width="100%" horizontalGap="0">
						<mx:Image source="assets/bullet_orange.png"/>
						<mx:Label text="Where will the microarrays come from?" width="300" />
						<mx:VBox verticalGap="1">
							
							<mx:RadioButtonGroup id="slideSourceGroup"/>
							<mx:RadioButton label="New microarray purchased from core facility" groupName="slideSourceGroup" id="coreSlideSourceRadio" selected="true" value="CORE" change="checkHybSetupCompleteness()"/>
							<mx:RadioButton label="New microarray purchased by lab" groupName="slideSourceGroup" id="customSlideSourceRadio" value="CLIENT" change="checkHybSetupCompleteness()"/>
							<mx:RadioButton label="Strip and reuse existing microarray" groupName="slideSourceGroup" id="stripSlideSourceRadio" value="REUSE" change="checkHybSetupCompleteness()"/>
						</mx:VBox>
					</mx:HBox>
					
				</mx:VBox>
			</mx:Canvas>
			<mx:Canvas label="Hybs" width="100%" height="100%" show="{slideDesignColumn.visible = true}" enabled="false" id="hybsView">
			    <mx:VBox width="100%" height="100%" verticalGap="10">
				    <mx:HBox width="100%" horizontalAlign="left">
				        <mx:Button label="&lt; Back" enabled="true" click="{theTab.selectedChild = hybSetupView;}"/>
				        <mx:Button label="Next &gt;" id="nextButton6" enabled="false" click="{theTab.selectedChild = confirmView;}"/>
				        <mx:Button label="Cancel"/>
				    </mx:HBox>
				    <mx:HDividedBox height="100%" width="100%">
				        <mx:VBox height="100%" verticalGap="4">
				        	<mx:Label text="Drag sample to hybridizations grid. "/>
				        	<mx:DataGrid height="100%" width="100%" dataProvider="{samples}" labelField="@name" dragEnabled="true" id="sampleDragGrid">
								<mx:columns>
									<mx:DataGridColumn headerText = "Sample" width="15" dataField="@name"/>
									<mx:DataGridColumn headerText = "Cy3"  width="3" labelFunction="getChannel1Count"/>
									<mx:DataGridColumn headerText = "Cy5" width="3" labelFunction="getChannel2Count"/>
								</mx:columns>
											        				        		
				        	</mx:DataGrid>
				        </mx:VBox>
						<mx:Panel title="Hybridizations" id="hybsContainer" width="100%" height="100%" headerHeight="20">
							<mx:HBox width="100%">
								<mx:HBox>
									<mx:Button label="Add" click="addHyb()" icon="@Embed('../assets/table_row_insert.png')"/>
									<mx:Button label="Copy" click="copyHyb()" icon="@Embed('../assets/table_multiple.png')"/>
									<mx:Button label="Delete" click="deleteHyb()" icon="@Embed('../assets/table_row_delete.png')"/>
								</mx:HBox>
								<mx:HBox horizontalAlign="right" width="100%">
									<mx:Button label="Clear all" click="promptToClearAllHybs()" icon="@Embed('../assets/folder_delete.png')"/>
								</mx:HBox>
									
							</mx:HBox>
							<mx:DataGrid width="100%" height="100%" id="hybsGrid"  editable="true" dataProvider="{hybs}" allowMultipleSelection="true" dropEnabled="true" dragDrop="onDragDrop(event)" itemFocusOut="checkHybsCompleteness()">
								<mx:columns>
								    <mx:DataGridColumn editable="false" headerText=""   resizable="false" width="15" labelFunction="getHybsGridRowNumber"/>
								    <mx:DataGridColumn editable="false" headerText="Cy3 Sample (green)"  width="22" labelFunction="getSampleChannel1Name"/>
								    <mx:DataGridColumn editable="false" headerText="Cy5 Sample (red)"  width="22" labelFunction="getSampleChannel2Name"/>
						             <mx:DataGridColumn id="slideDesignColumn" headerText="Slide"  width="92" dataField="@idSlideDesign" 
						                editorDataField="value" sortable="false" editable="true" rendererIsEditor="true" itemRenderer="views.ComboBoxSlideDesign" />
						             <mx:DataGridColumn headerText="Slide Source"  width="18" dataField="@codeSlideSource" 
						                editorDataField="value" sortable="false" editable="true" rendererIsEditor="true" itemRenderer="views.ComboBoxSlideSource" />
									<mx:DataGridColumn headerText="Notes" width="20" dataField="@notes"/>
								</mx:columns>
							</mx:DataGrid>
							
						</mx:Panel>
				    	
				    </mx:HDividedBox>

			    </mx:VBox>
			</mx:Canvas>
			<mx:Canvas label="Confirm" width="100%" height="100%" enabled="false" id="confirmView">
			<mx:VBox id="confirmContainer"  width="100%" height="100%" backgroundAlpha="0.0" verticalGap="0">
			    <mx:ViewStack id="confirmButtonStack" width="100%" height="36">
					<mx:HBox width="100%" horizontalAlign="left">
					    <mx:Button label="&lt; Back" enabled="true" click="{theTab.selectedChild = hybsView;}"/>
					    <mx:Button label="Submit" id="submitButton" enabled="true" icon="@Embed('../assets/tick.png')" click="submitRequest()"/>
					    <mx:Button label="Cancel"/>
					</mx:HBox>
					<mx:HBox width="100%" horizontalAlign="left" verticalAlign="top" borderStyle="outset" backgroundColor="#ffffff" paddingTop="2" paddingRight="2" paddingLeft="2">
						<mx:Button label="Printable request form" click="showPrintableRequestForm()" icon="@Embed('../assets/page.png')"/>
						<mx:HBox width="100%" >
							<mx:Text fontWeight="bold" color="#008040" text="{'Request #   ' + submittedRequestNumber + '    has been submitted.'}">
							</mx:Text>
							<mx:Text width="100%" fontWeight="bold" color="#008040">
								<mx:text>Please print off the request form and deliver it along with your samples to the Microarray Core Facility.</mx:text>
							</mx:Text>
							
						</mx:HBox>
					</mx:HBox>
			    	
			    </mx:ViewStack>
			<mx:VDividedBox   width="100%" height="100%" backgroundAlpha="0.0" verticalGap="10" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="0">
				<mx:HBox width="100%" horizontalGap="20">
					<mx:VBox height="100%" verticalGap="0">
						<mx:Label text="Request Kind" textDecoration="underline"/>
						<mx:Text text="{requestCategoryName}" id="requestKindLabel"/>
					</mx:VBox>
					<mx:VBox height="100%" verticalGap="0">
						<mx:Label text="Lab" textDecoration="underline"/>
						<mx:Text text="{labCombo.selectedItem.@name}"/>
					</mx:VBox>
					<mx:VBox height="100%" verticalGap="0">
						<mx:Label text="Project" textDecoration="underline"/>
						<mx:Text text="{projectCombo.selectedItem.@name}"/>
					</mx:VBox>
					<mx:VBox height="100%" verticalGap="0">
						<mx:Label text="Billing Account" textDecoration="underline"/>
						<mx:Text text="{billingAccountCombo.selectedItem.@accountName}"/>
					</mx:VBox>
				</mx:HBox>
					<mx:VBox verticalGap="0" width="100%">
						<mx:Label text="{samples.length + ' Samples'}"/>
						<mx:DataGrid width="100%" id="samplesGridConfirm"  editable="false" dataProvider="{samples}" backgroundAlpha="0" borderStyle="solid">
							<mx:columns>
							    <mx:DataGridColumn editable="false" headerText=""  width="10" resizable="false" labelFunction="getSamplesGridRowNumber"/>
								<mx:DataGridColumn headerText="Sample Name" width="10" dataField="@name"/>
								<mx:DataGridColumn headerText="Concentration" width="5" dataField="@concentration"/>
					            <mx:DataGridColumn headerText="Sample Type"  width="12" labelFunction="lookupSampleTypeName"/>
					            <mx:DataGridColumn headerText="Organism"  width="12" labelFunction="lookupOrganism"/>
					            <mx:DataGridColumn headerText="Sample Source"  width="12" labelFunction="lookupSampleSource"/>
					            <mx:DataGridColumn headerText="Sample Prep Method"  width="12" labelFunction="lookupSamplePrepMethod"/>
								<mx:DataGridColumn id="AGE0" headerText="Age" dataField="@AGE" editable="true" visible="false"/>
								<mx:DataGridColumn id="CELLLINE0" headerText="Cell line" dataField="@CELLLINE" editable="true" visible="false"/>
								<mx:DataGridColumn id="CELLTYPE0" headerText="Cell Type" dataField="@CELLTYPE" editable="true" visible="false"/>
								<mx:DataGridColumn id="CLININFO0" headerText="Clinical Info" dataField="@CLININFO" editable="true" visible="false"/>
								<mx:DataGridColumn id="COMPOUND0" headerText="Compound" dataField="@COMPOUND" editable="true" visible="false"/>
								<mx:DataGridColumn id="DISSTATE0" headerText="Disease State" dataField="@DISSTATE" editable="true" visible="false"/>
								<mx:DataGridColumn id="DOSE0" headerText="Dose" dataField="@DOSE" editable="true" visible="false"/>
								<mx:DataGridColumn id="GENMOD0" headerText="Genetic Modification" dataField="@GENMOD" editable="true" visible="false"/>
								<mx:DataGridColumn id="GENOTYPE0" headerText="Genotype" dataField="@GENOTYPE" editable="true" visible="false"/>
								<mx:DataGridColumn id="GROWTHCOND0" headerText="Growth Conditions" dataField="@GROWTHCOND" editable="true" visible="false"/>
								<mx:DataGridColumn id="INDIV0" headerText="Individual" dataField="@INDIV" editable="true" visible="false"/>
								<mx:DataGridColumn id="ORGPART0" headerText="Organ / Tissue" dataField="@ORGPART" editable="true" visible="false"/>
								<mx:DataGridColumn id="SEX0" headerText="Sex" dataField="@SEX" editable="true" visible="false"/>
								<mx:DataGridColumn id="TEMP0" headerText="Temperature" dataField="@TEMP" editable="true" visible="false"/>
								<mx:DataGridColumn id="TIME0" headerText="Time Course" dataField="@TIME" editable="true" visible="false"/>
								<mx:DataGridColumn id="otherDataColumnConfirm" headerText="Other" dataField="@OTHER" editable="true" visible="false"/>
								<mx:DataGridColumn headerText="Description" width="20" dataField="@description"/>
							</mx:columns>
						</mx:DataGrid>
						
				</mx:VBox>
					<mx:VBox width="100%" height="100%" verticalGap="0">
						<mx:Label text="{hybs.length + ' Hybridizations'}"/>
						<mx:DataGrid width="100%" height="100%" id="hybsGridConfirm"  editable="false" dataProvider="{hybs}"  backgroundAlpha="0" borderStyle="solid">
							<mx:columns>
							    <mx:DataGridColumn editable="false" headerText=""   resizable="false" width="19" labelFunction="getHybsGridRowNumber"/>
							    <mx:DataGridColumn editable="false" headerText="Cy3 Sample (green)"  width="28" labelFunction="getSampleChannel1Name"/>
							    <mx:DataGridColumn editable="false" headerText="Cy5 Sample (red)"  width="28" labelFunction="getSampleChannel2Name"/>
							     <mx:DataGridColumn id="slideDesignColumn0" headerText="Slide"  width="72" labelFunction="lookupSlideDesignName" />
							     <mx:DataGridColumn headerText="Slide Source"  width="18"  labelFunction="lookupSlideSource" />
								<mx:DataGridColumn headerText="Notes" width="20" dataField="@notes"/>
							</mx:columns>
						</mx:DataGrid>
						
					</mx:VBox>
				</mx:VDividedBox>
				
			</mx:VBox>
			</mx:Canvas>
		</mx:TabNavigator>
	</mx:VBox>
	
	
    
</mx:Panel>
