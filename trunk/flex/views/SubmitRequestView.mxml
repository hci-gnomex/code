<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"     
	xmlns:SubmitRequestView="SubmitRequestView.*" 
    xmlns:views="views.*"
	label="Submit Request" width="100%" height="100%" 
	>
    <mx:states>
        <mx:State name="SolexaBaseState">
            <mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
            <mx:RemoveChild target="{sampleSetupView.bioanalyzerContainer}"/>
            <mx:RemoveChild target="{hybsConfirmContainer}"/>
            <mx:AddChild relativeTo="{samplesConfirmContainer}" position="after">
				<mx:VBox  id="lanesConfirmContainer"  verticalGap="0" width="100%" height="100%">
						<mx:Label text="{lanes.length + ' Sequencing Lanes'}"/>
						<mx:DataGrid width="100%" height="100%" id="lanesConfirmGrid"  editable="false" dataProvider="{lanes}"  rollOverColor="#C0C0C0" selectionColor="#FFFFB9" horizontalScrollPolicy="auto">
						<mx:columns>
						    <mx:DataGridColumn editable="false" headerText=""   resizable="false" width="25" labelFunction="getLanesGridRowNumber"/>
						    <mx:DataGridColumn  headerText="Sample"  width="222" labelFunction="getLaneSampleName" editable="false"/>
				             <mx:DataGridColumn  width="200" id="flowCellTypeCol" headerText="Flow Cell Type"  labelFunction="parentApplication.lookupFlowCellType" editable="false" dataField="@idFlowCellType"/> 						             						             
				             <mx:DataGridColumn width="65" id="numberOfSequencingCyclesCol" headerText="# Cycles"   labelFunction="parentApplication.lookupNumberSequencingCycles" editable="false" dataField="@idNumberSequencingCycles"/> 						             						             
							<mx:DataGridColumn width="150" headerText="Notes"   dataField="@notes"/>
						</mx:columns>
					</mx:DataGrid>
					
				</mx:VBox>					        			
            
            </mx:AddChild>
            <mx:AddChild relativeTo="{samplesView}" position="after">
            	<mx:Canvas label="Sequencing Lanes" id="lanesView" enabled="false">
            		<mx:VBox id="lanesSetupContainer" width="100%" height="100%" verticalGap="6">
            			<mx:HBox id="laneFlowCellContainer">
							<mx:Image source="assets/bullet_orange.png"/>
            				<mx:Label width="230" text="Select the type of flow cell to be used:"/>
            				<mx:ComboBox id="flowCellTypeCombo" labelField="@display" change="initializeLanesGrid();propagateFlowCellType()">
            					<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.FlowCellType').DictionaryEntry}</mx:dataProvider>
            				</mx:ComboBox>
            				<mx:Spacer width="10"/>
            				<mx:HBox>
            					<mx:Label width="300" text="Select the minimum number of sequencing cycles:"/>
            					<mx:ComboBox id="numberSequencingCyclesCombo" labelField="@display" change="initializeLanesGrid();propagateNumberSequencingCycles()">
            						<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.NumberSequencingCycles').DictionaryEntry}</mx:dataProvider>
            					</mx:ComboBox>
            				</mx:HBox>
            			</mx:HBox>
            			<mx:HDividedBox width="100%" height="100%" paddingTop="10">
					        <mx:Panel  title="Samples" height="100%" verticalGap="4">
					        	<views:DataGrid
					        		dragProxyImage="views.DataGridSampleDragProxy" 
					        		 height="100%" width="100%" 
					        		 dataProvider="{samples}" labelField="@name" 
					        		 dragEnabled="true" id="sampleLaneDragGrid" selectionColor="#FFFFB9" rollOverColor="#C0C0C0" showHeaders="false">
									<views:columns>
										<mx:DataGridColumn headerText = "Samples" width="80" dataField="@name"/>
<!--							            <mx:DataGridColumn width="20"  labelFunction="getChannelCountLabelFunction" headerText="">
							                <mx:itemRenderer>
							                    <mx:Component >
							                        <mx:HBox  horizontalGap="0" >
							                          <mx:Image source="{data.@laneCount > 0 ? '../assets/tick.png' : ''}">
							                    	 </mx:Image> 
							                        </mx:HBox>
							                    </mx:Component>
							                </mx:itemRenderer>
							            </mx:DataGridColumn> 
 -->									</views:columns>												        				        		
					         	</views:DataGrid>
					        </mx:Panel>            	

							<mx:Panel  id="lanesContainer" width="100%" height="100%">
							   <mx:title><![CDATA[Sequencing Lanes    (Drag sample onto sequencing lane sample cell)]]></mx:title>
									<mx:HBox width="100%" verticalAlign="middle" paddingLeft="4" paddingTop="4">
										<mx:HBox>
											<mx:Button label="Add" click="addLane();checkLanesCompleteness()" icon="@Embed('../assets/table_row_insert.png')" id="addLaneButton"/>
											<mx:Button label="Copy" click="addLane();checkLanesCompleteness()" icon="@Embed('../assets/table_multiple.png')" id="copyLaneButton"/>
											<mx:Button label="Delete" click="deleteLane();checkLanesCompleteness()" icon="@Embed('../assets/table_row_delete.png')" id="deleteLaneButton"/>
											<mx:Button label="Clear all" click="promptToClearAllLanes()" icon="@Embed('../assets/folder_delete.png')" id="clearLaneButton"/>
										</mx:HBox>
										
									</mx:HBox>
								<mx:DataGrid width="100%" height="100%" id="lanesGrid"  editable="true" dataProvider="{lanes}" allowMultipleSelection="true" dropEnabled="true" dragDrop="onDragDropLane(event)" itemFocusOut="checkLanesCompleteness()" rollOverColor="#C0C0C0" selectionColor="#FFFFB9" horizontalScrollPolicy="auto">
									<mx:columns>
									    <mx:DataGridColumn editable="false" headerText=""   resizable="false" width="25" labelFunction="getLanesGridRowNumber"/>
									    <mx:DataGridColumn  headerText="Sample"  width="222" 
									    	labelFunction="getLaneSampleName" 
	                                        editorDataField="text" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.TextInputLaneSample" itemRenderer="views.renderers.LabelLaneSample" />								    	
							             <mx:DataGridColumn  width="200" headerText="Flow Cell Type"  labelFunction="parentApplication.lookupFlowCellType" editable="false" dataField="@idFlowCellType"/> 						             						             
							             <mx:DataGridColumn width="65"  headerText="# Cycles"   labelFunction="parentApplication.lookupNumberSequencingCycles" editable="false" dataField="@idNumberSequencingCycles"/> 						             						             
										<mx:DataGridColumn width="150" headerText="Notes"   dataField="@notes"/>
									</mx:columns>
								</mx:DataGrid>
								
							</mx:Panel>					        			
            			</mx:HDividedBox>
            		</mx:VBox>
            	</mx:Canvas>
            </mx:AddChild>
         </mx:State>
        <mx:State name="SolexaSetupState" basedOn="SolexaBaseState">
            <mx:AddChild relativeTo="{sampleSetupView.concentrationContainer}">
                <mx:HBox width="100%">
    	            <mx:Label text="Enter approximate volume:"/>
	                <mx:TextInput id="volume" />
					<mx:Label text="ng" />
                </mx:HBox>
            </mx:AddChild>
            <mx:AddChild relativeTo="{sampleSetupView.concentrationContainer}" position="after">
				<mx:HBox id="isPreppedContainer" width="100%" horizontalGap="0">
					<mx:Image source="assets/bullet_orange.png"/>
					<mx:Label text="Are the samples already prepped?" width="340" />
					<mx:RadioButton id="samplesAlreadyPreppedCheckbox" change="{samplesAlreadyPreppedCheckbox.selected ? currentState = 'SolexaSetupPreppedState' : 'SolexaSetupState'}" label="Yes, samples have already been prepped" />							
					<mx:RadioButton id="samplesToBePreppedCheckbox" change="{samplesToBePreppedCheckbox.selected ? currentState = 'SolexaSetupState' : 'SolexaSetupPreppedState'}"  label="No, please prep the samples" selected="true"/>							
				</mx:HBox>            	
            </mx:AddChild>
            <mx:RemoveChild target="{label1}"/>
            <mx:AddChild relativeTo="{sampleSetupView.sampleSetupContainer}" >
                <mx:HBox width="100%" horizontalGap="0" id="alignContainer">
                	<mx:Image source="assets/bullet_orange.png"/>
                	<mx:Label text="Should the sequence be aligned to a genome build?" width="340"/>
                	<mx:VBox width="100%" id="alignMoreContainer">
                		<mx:HBox>
                			<mx:CheckBox id="alignCheckBox" label="Yes, align to build"/>
                			<mx:ComboBox labelField="@display" width="300" id="genomeBuildCombo" change="samplesView.initializeSamplesGrid();hybSetupView.organismCombo.selectedItem = sampleSetupView.sampleOrganismCombo.selectedItem;sampleSetupView.checkSampleSetupCompleteness()" visible="{alignCheckBox.selected}">							
        		        		<mx:dataProvider>{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.GenomeBuild').DictionaryEntry}</mx:dataProvider>
		                	</mx:ComboBox>                			
                		</mx:HBox>
                		<mx:HBox width="100%">
		                	<mx:Label text="Alignment instructions:" visible="{alignCheckBox.selected}"/>
        		        	<mx:TextInput id="alignNotes" width="100%" visible="{alignCheckBox.selected}"/>                			
                		</mx:HBox>                		
                	</mx:VBox>
                </mx:HBox>
            </mx:AddChild>
            <mx:SetProperty target="{sampleSetupView.label2}" name="text" value="Select a sample preparation method:"/>
            <mx:AddChild relativeTo="{laneFlowCellContainer}"  position="after">
        	         <mx:HBox id="numberOfLanesContainer">
						<mx:Image source="assets/bullet_orange.png"/>
          				<mx:Label width="230" text="How many sequencing lanes will be run?"/>
        				<mx:TextInput id="numberOfLanes" width="40" change="initializeLanesGrid()"/>
        			</mx:HBox>
            </mx:AddChild>
            <mx:AddChild relativeTo="{numberOfLanesContainer}"  position="after">
        			<mx:HBox id="testRunContainer">
						<mx:Image source="assets/bullet_orange.png"/>
        				<mx:Label width="230" text="Should a test run be performed?"/>
        				<mx:RadioButton id="performTestRunRadio" label="Yes, perform test run" click="initializeLanesGrid()"/>
        				<mx:RadioButton id="dontPerformTestRunRadio" label="No, run all lanes for all samples at once" click="initializeLanesGrid()"/>
        			</mx:HBox>

            </mx:AddChild>
        </mx:State>
        <mx:State name="SolexaSetupPreppedState" basedOn="SolexaSetupState">
            <mx:AddChild relativeTo="{isPreppedContainer}" position="after">
				<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle" id="sampleAlreadyPreppedContainer">
					<mx:Image source="assets/bullet_orange.png"/>
					<mx:Label text="Describe how the samples were prepped:" width="340"/>
					<mx:TextInput id="samplePrepMethodText"/>			
					<mx:Spacer width="40"/>				
					<mx:RadioButton id="isFragLib" label="Fragment"/>
					<mx:RadioButton id="isPairedEndLib" label="Paired Ends"/>
					<mx:Spacer width="40"/>				
					<mx:CheckBox id="isSizeSelected" label="Size Selected?"/>
					<mx:TextInput id="sizeSelectedFrom" width="30"/>	
					<mx:Label text="-" textAlign="center"/>
					<mx:TextInput id="sizeSelectedTo" width="30"/>
				</mx:HBox>            	
            </mx:AddChild>
            <mx:RemoveChild target="{sampleSetupView.samplePrepContainer}">            	
            </mx:RemoveChild>
        </mx:State>
    </mx:states>
    

  
  <mx:HTTPService  
    id="getProjectRequestList" 
    url="http://localhost/gnomex/GetProjectRequestList.gx"
    destination="getProjectRequestList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProjectRequestList(event)"
    method="POST"
    useProxy="false">
    <mx:request>
            <idLab>{setupView.labCombo.selectedItem.@idLab}</idLab> 
            <showSamples>N</showSamples>
            <showCategory>N</showCategory>
            <showMyLabsAlways>N</showMyLabsAlways>
            <listKind>ProjectRequestCloneList</listKind>
    </mx:request>
   </mx:HTTPService>
   
   <mx:HTTPService  
    id="getNewRequest" 
    url="http://localhost/gnomex/GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetNewRequest(event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idRequest>0</idRequest>    	
    </mx:request>
  </mx:HTTPService>

   <mx:HTTPService  
    id="getRequestToClone" 
    url="http://localhost/gnomex/GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequestToClone(event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idRequest>{requestToClone.@idRequest}</idRequest>    	
    </mx:request>
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="saveNewRequest" 
    url="http://localhost/gnomex/SaveRequest.gx"
    destination="saveNewRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveNewRequest(event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>

  <mx:HTTPService  
    id="saveExistingRequest" 
    url="http://localhost/gnomex/SaveRequest.gx"
    destination="saveExistingRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveExistingRequest(event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
	<mx:Script>
		<![CDATA[
		import mx.controls.Alert;
		import mx.core.UIComponent;
		import mx.core.Container;
		
		import mx.rpc.events.ResultEvent;
		import mx.managers.PopUpManager;
		import mx.events.CloseEvent;
        import mx.managers.DragManager;
        import mx.core.DragSource;
        import mx.events.DragEvent;
        
        private var editMode:Boolean = false;
        
		[Bindable]
		private var errorMessage:String = "";
		[Bindable]
		private var warningMessage:String = "";
		        
        
    	[Bindable]
		public var selectedIdSlideProduct:Object;

        [Bindable]
        private var submittedIdRequest:String;
        [Bindable]
        private var submittedRequestNumber:String;

		[Bindable]
		private var requestCategoryName:String;
		
		[Bindable]
		public var request:Object;
		
		private var requestCloneWindow:views.RequestCloneWindow;
		
		[Bindable]
		public var requestToClone:Object;
		
		[Bindable]
		public var slideDesigns:XMLListCollection = new XMLListCollection();
		
		
		public function initializeData():void {
			if (!this.isSolexaState()) {
				if (theTab.contains(sampleSetupView)) {
					sampleSetupView.sampleTypeCombo.dataProvider = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleType').DictionaryEntry;
					sampleSetupView.sampleSourceCombo.dataProvider = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleSource').DictionaryEntry;
					sampleSetupView.sampleOrganismCombo.dataProvider = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry;					
				}
				if (theTab.contains(hybSetupView)) {
					hybSetupView.organismCombo.dataProvider = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry;
					hybSetupView.microarrayCategoryCombo.dataProvider = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.MicroarrayCategory').DictionaryEntry;
				}
				
			}
			
			initFilters();
		}
		
		private function initFilters():void {
	        parentApplication.filteredProjectListForSubmitRequests.filterFunction = this.filterProject;
	        parentApplication.filteredProjectListForSubmitRequests.refresh();
			
			parentApplication.filteredSlideProductListForSubmitRequests.filterFunction = filterSlideProduct;
			parentApplication.filteredSlideProductListForSubmitRequests.refresh();
		}
		
		public function isSolexaState():Boolean {
			if (currentState == 'SolexaBaseState' ||
			    currentState == 'SolexaSetupState' ||
			    currentState == 'SolexaSetupPreppedState') {
				return true;    	
			} else {
				return false;
			}
		}
		
		public function checkSecurity():void {
			setupView.checkSecurity();			
		}
		
		public function isRequestPending():Boolean {
			if (this.setupView == null || request == null) {
				return false;
			} else if (request.@idRequest == '0'  && submittedIdRequest == null) {
				if (nextButton.enabled) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		}
		
		private function promptToCancelRequest():void {
			if (isRequestPending()) {
				Alert.show( "The request has not been saved.  Are you sure you want to quit?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToCancelRequest,						
						parentApplication.iconWarning);
			}
			
		}
		
		private function onPromptToCancelRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	cancelRequest();
            }
        }
        
        private function promptToCancelPriorRequest():void {
			if (isRequestPending()) {
				Alert.show( "The request you have entered has not been saved.  Do you want to start over?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToCancelPriorRequest,						
						parentApplication.iconWarning);
			}
			
		}
		
		private function onPromptToCancelPriorRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	initializeForm();
            }
        }

        
        
        public function cancelRequest():void {
        	getNewRequest.send();
			initializeForm();
        	parentApplication.theViews.selectedIndex = -1;
        	parentApplication.theViews.visible = false;
        }
        
        public function setupForm():void {
        	// Have to separate out tab selection from
        	// getting new request; otherwise current state
        	// of Solexa messes up window state.
        	setupForm1();
        	callLater(setupForm2);
        }
		
		
		private function setupForm1():void {
			currentState = '';
			if (!theTab.contains(setupView)) {
				theTab.addChildAt(setupView, 0);
			}
			setupView.enabled = true;
			theTab.selectedIndex = 0;

			if (!theTab.contains(confirmView)) {
				theTab.addChildAt(confirmView, 6);
			}
			confirmView.enabled = true;
			theTab.selectedChild = confirmView;
		}
		private function setupForm2():void {
			getNewRequest.send();
			buttonStack.selectedIndex = 0;
			initializeForm();			
		}
		
		
		public function initializeForm():void {	
			editMode = false;

			theTab.creationPolicy = 'all';
			showWorkflowLabel.visible = false;
			samplesView.showQCFieldsCheckBox.visible = false;
			showCy3LabelingFieldsCheckBox.visible = false;
			showCy5LabelingFieldsCheckBox.visible = false;
			showHybFieldsCheckBox.visible = false;
			showExtFieldsCheckBox.visible = false;
			if (setupView == null) {
				return;
			}
			if (!theTab.contains(setupView)) {
				theTab.addChildAt(setupView, 0);
			}
			if (!theTab.contains(sampleSetupView)) {
				theTab.addChildAt(sampleSetupView, 1);
			}
			if (!theTab.contains(hybSetupView)) {
				theTab.addChildAt(hybSetupView, 4);
			}
			if (!theTab.contains(confirmView)) {
				theTab.addChildAt(confirmView, 6);
			}
			hybSetupView.label = "Hyb setup";
			hybSetupView.numberOfHybsContainer.visible = true;
			hybSetupView.slideSourceContainer.visible = true;

			
			setupView.enabled = true;
			theTab.selectedChild = setupView;
			
			requestToClone = null;
			submittedIdRequest = null;
			submittedRequestNumber = null;

			setupView.labCombo.selectedIndex = -1;
			setupView.billingAccountCombo.selectedIndex = -1;
			setupView.projectCombo.selectedIndex = -1;
			setupView.requestTypeGroup.selectedValue = '';
			setupView.requestRadioAffy.selected = false;
			setupView.requestRadioAgilent.selected = false;
			setupView.requestRadioNimbleGen.selected = false;
			setupView.requestRadioQC.selected = false;
			setupView.requestRadioSolexa.selected = false;
			setupView.submitNewRequestRadio.selected = true;
			
			
			if (theTab.contains(sampleSetupView)) {
				sampleSetupView.numberOfSamples.text = '';
				sampleSetupView.sampleTypeCombo.selectedIndex = -1;
				sampleSetupView.samplePrepMethodCombo.selectedIndex = -1;
				sampleSetupView.sampleSourceCombo.selectedIndex = -1;
				sampleSetupView.sampleOrganismCombo.selectedIndex = -1;
				sampleSetupView.sampleConcentration.text = '';
				sampleSetupView.enabled = false;
				if (theTab.contains(annotationView)) {
					annotationView.enabled = false;								
				}
			}
					
			if (theTab.contains(hybSetupView)) {
				hybSetupView.organismCombo.selectedIndex = -1;
				hybSetupView.microarrayCategoryCombo.selectedIndex = -1;
				hybSetupView.slideProductCombo.selectedIndex = -1;
				hybSetupView.numberOfHybs.text = '';
				hybSetupView.isCatalogRadio.selected = true;
				hybSetupView.coreSlideSourceCheckbox.selected = false;
			 	hybSetupView.clientSlideSourceCheckbox.selected = false;
				hybSetupView.stripSlideSourceCheckbox.selected = false;
				
			}	
			
			
			if (theTab.contains(samplesView)) {
				samplesView.enabled = false;			
			}
			if (theTab.contains(hybSetupView)) {
				hybSetupView.enabled = false;
			}
			if (theTab.contains(hybsView)) {
				hybsView.enabled = false;
			}
			if (theTab.contains(confirmView)) {
				confirmView.enabled = false;
				if (confirmButtonStack != null) {
					confirmButtonStack.selectedIndex = 0;
				}
			}
			
			
			samplesView.addSampleButton.visible = true;
			samplesView.copySampleButton.visible = true;
			samplesView.deleteSampleButton.visible = true;
			samplesView.clearSamplesButton.visible = true;
			addHybButton.visible = true;
			copyHybButton.visible = true;
			deleteHybButton.visible = true;
			clearHybsButton.visible = true;

			hybSetupView.organismCombo.enabled = true;
			hybSetupView.microarrayCategoryCombo.enabled = true;
			hybSetupView.slideProductCombo.enabled = true;
			hybSetupView.isCatalogRadio.enabled = true;
			hybSetupView.isCustomRadio.enabled = true;
			
		}
		
		
		private function nextTab():void {
			theTab.selectedIndex++;
		}
		
		private function previousTab():void {
			if (theTab.selectedIndex > 0) {
				theTab.selectedIndex--;				
			}
		}
		
		public function enableNextButtons():void {
			if (theTab.selectedIndex < theTab.getChildren().length - 1) {
				confirmButtonStack.selectedIndex = 0;
				var nextChild:UIComponent = UIComponent(theTab.getChildAt(theTab.selectedIndex + 1));
				if (nextChild.enabled) {
					nextButton.enabled = true;
				} else {
					nextButton.enabled = false;
				}
					
			} else {
				nextButton.enabled = false;
				confirmButtonStack.selectedIndex = 1;
			}
			if (theTab.selectedIndex > 0) {
				var prevChild:UIComponent = UIComponent(theTab.getChildAt(theTab.selectedIndex - 1));
				if (prevChild != null && prevChild.enabled) {
					backButton.enabled = true;
				} else {
					backButton.enabled = false;
				}
			} else {
				backButton.enabled = false;
			}
		}

		
		
		public function setRequestCategoryName():void {
			var requestCategory:Object = setupView.getRequestCategory();
			requestCategoryName = requestCategory.@display.toString();

			if (setupView.requestTypeGroup.selectedValue == 'SOLEXA') {
				this.currentState = 'SolexaSetupState';				
			} else {
				this.currentState = '';
				if (setupView.requestTypeGroup.selectedValue == "QC") {
					if (!sampleSetupView.sampleSetupContainer.contains(sampleSetupView.bioanalyzerContainer)) {
						sampleSetupView.sampleSetupContainer.addChildAt(sampleSetupView.bioanalyzerContainer, 6);
					}
					if (sampleSetupView.sampleSetupContainer.contains(sampleSetupView.sampleOrganismContainer)) {
						sampleSetupView.sampleSetupContainer.removeChild(sampleSetupView.sampleOrganismContainer);
					}
					if (sampleSetupView.sampleSetupContainer.contains(sampleSetupView.sampleSourceContainer)) {
						sampleSetupView.sampleSetupContainer.removeChild(sampleSetupView.sampleSourceContainer);
					}
					hybsConfirmContainer.visible = false;
					hybsConfirmContainer.height = 0;
					if (this.theTab.contains(annotationView)) {
						this.theTab.removeChild(annotationView);				
					}
					if (this.theTab.contains(hybSetupView)) {
						this.theTab.removeChild(hybSetupView);				
					}
					if (this.theTab.contains(hybsView)) {
						this.theTab.removeChild(hybsView);				
					}
					samplesView.sampleOrganismColumn.visible = false;
					this.sampleOrganismConfirmColumn.visible = false;
					samplesView.sampleSourceColumn.visible  = false;
					this.sampleSourceConfirmColumn.visible  = false;
					samplesView.concentrationUnitColumn.visible = true;
					this.concentrationUnitConfirmColumn.visible = true;
					samplesView.chipTypeColumn.visible = true;
					this.chipTypeConfirmColumn.visible = true;
				} else {
					if (theTab.contains(sampleSetupView)) {
						if (sampleSetupView.sampleSetupContainer.contains(sampleSetupView.bioanalyzerContainer)) {
							sampleSetupView.sampleSetupContainer.removeChild(sampleSetupView.bioanalyzerContainer);
						}
						if (!sampleSetupView.sampleSetupContainer.contains(sampleSetupView.sampleOrganismContainer)) {
							sampleSetupView.sampleSetupContainer.addChildAt(sampleSetupView.sampleOrganismContainer, 2);
						}
						if (!sampleSetupView.sampleSetupContainer.contains(sampleSetupView.sampleSourceContainer)) {
							sampleSetupView.sampleSetupContainer.addChildAt(sampleSetupView.sampleSourceContainer, 3);
						}
					}
					hybsConfirmContainer.visible = true;
					hybsConfirmContainer.percentHeight = 100;
					if (!this.theTab.contains(annotationView)) {
						this.theTab.addChildAt(annotationView, 3);				
					}
					if (!this.theTab.contains(hybSetupView)) {
						this.theTab.addChildAt(hybSetupView, 4);				
					}
					if (!this.theTab.contains(hybsView)) {
						this.theTab.addChildAt(hybsView, 5);				
					}
					samplesView.sampleOrganismColumn.visible = true;
					this.sampleOrganismConfirmColumn.visible = true;
					samplesView.sampleSourceColumn.visible  = true;
					this.sampleSourceConfirmColumn.visible  = true;
					samplesView.concentrationUnitColumn.visible = false;
					this.concentrationUnitConfirmColumn.visible = false;
					samplesView.chipTypeColumn.visible = false;
					this.chipTypeConfirmColumn.visible = false;
	
					// Hide/Show the channel 2 sample column
					if (requestCategory.@numberOfChannels == "2") {
						this.channel2SampleColumn.visible = true;
						this.channel2SampleConfirmColumn.visible = true;
					} else {
						this.channel2SampleColumn.visible = false;
						this.channel2SampleConfirmColumn.visible = false;
					}
	
				}
			}
			
			
			
		}
		
		public function getSamplesGridRowNumber(item:Object,col:int):String
        {
        	if (samples!= null) {
	           var x:int = samples.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
		public function getHybsGridRowNumber(item:Object,col:int):String
        {
        	if (hybs!= null) {
	           var x:int = hybs.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
		private function getLanesGridRowNumber(item:Object,col:int):String
        {
        	if (lanes!= null) {
	           var x:int = lanes.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
		private function getSampleChannel1Name(item:Object,col:int):String
        {
        	var sampleName:String = "";
        	if (hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel1) {
        				sampleName = sample.@name;
        				break;
        			}
        		}
        	} 
        	return sampleName;
        }
		private function getSampleChannel2Name(item:Object,col:int):String
        {
        	var sampleName:String = "";
        	if (hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel2) {
        				sampleName = sample.@name;
        				break;
        			}
        		}
        	} 
        	return sampleName;
        }
		private function getLaneSampleName(item:Object,col:int):String
        {
        	var sampleName:String = "";
        	if (lanesGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSample) {
        				sampleName = sample.@name;
        				break;
        			}
        		}
        	} 
        	return sampleName;
        }
		private function getChannelCountLabelFunction(item:Object,col:int):String
        {
        	var channel1Count:int = 0;
        	var channel2Count:int = 0;
        	if (hybs!= null) {
        		for each(var hyb:Object in hybs) {
        			if (hyb.@idSampleChannel1 == item.@idSample) {
        				channel1Count++;
        			}
        			if (hyb.@idSampleChannel2 == item.@idSample) {
        				channel2Count++;
        			}
        		}
        	} 
			item.@channel1Count = channel1Count;
			item.@channel2Count = channel2Count;
			return "";
        }
        


		public function filterProject(item:Object):Boolean {
			var keep:Boolean = false;
			if (item.@idProject == '') {
				keep = true;
			} else if (setupView.labCombo.selectedItem != null) {
				if (item.@idLab == setupView.labCombo.selectedItem.@idLab) {
					keep = true;
				}
			}
			return keep;
		}
		
		public function addSamplePrepMethodFilter():void {
			parentApplication.samplePrepMethodList.filterFunction = filterSamplePrepMethod;
			parentApplication.samplePrepMethodList.refresh();
		}
		
		private function filterSamplePrepMethod(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}
        	
        	if (item.@isActive == 'N') {
        		return false;
        	}
        	var doesMatch:Boolean = true;
        	if (sampleSetupView.sampleTypeCombo.selectedItem != null && 
        	    sampleSetupView.sampleTypeCombo.selectedItem.@value != null  &&
        	    sampleSetupView.sampleTypeCombo.selectedItem.@value != "") {
        	   	doesMatch = false;
        	   	var applicableSamplePrepMethods:XMLList = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethodSampleType').DictionaryEntry.(@value != '' && @idSampleType == sampleTypeCombo.selectedItem.@value);
        	   	for each (var xref:Object in applicableSamplePrepMethods) {
        	   		if (xref.@idSamplePrepMethod == item.@value) {
        	   		    doesMatch = true;
        	   		    break;
        	   		}
        	   	}
        	}
        	return doesMatch;
        }  
        
       
        private function filterSlideProduct(item:Object):Boolean {
        	if (item.@idSlideProduct == null || item.@idSlideProduct == "") {
        		return true;
        	}
        	
        	if (item.@isActive == 'N') {
        		return false;	
        	}
        	
			var doesMatchRequestCategoryVendor:Boolean = true;
        	if (setupView.requestTypeGroup.selectedValue != null && 
        	    setupView.requestTypeGroup.selectedValue != "") {
				var requestCategory:Object = setupView.getRequestCategory();
        		doesMatchRequestCategoryVendor = false;
        		if (item.@idVendor == requestCategory.@idVendor) {
        			doesMatchRequestCategoryVendor = true;
        		}
        	} else if(request != null && request.@idRequest != '0') {
        		doesMatchRequestCategoryVendor = false;
				var rCategory:Object = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry.(@value == request.@codeRequestCategory);
        		if (item.@idVendor == rCategory.@idVendor) {
        			doesMatchRequestCategoryVendor = true;        			
        		}
        	}       	
        	
        	var doesMatchOrganism:Boolean = true;
        	if (hybSetupView.organismCombo.selectedItem != null && 
        	    hybSetupView.organismCombo.selectedItem.@value != null  &&
        	    hybSetupView.organismCombo.selectedItem.@value != "") {
        		if (item.@idOrganism == hybSetupView.organismCombo.selectedItem.@idOrganism) {
        			doesMatchOrganism = true;
        		} else {
        			doesMatchOrganism = false;
        		}
        	}
        	var doesMatchExperimentCategory:Boolean = true;
        	if (hybSetupView.microarrayCategoryCombo.selectedItem != null && 
        	    hybSetupView.microarrayCategoryCombo.selectedItem.@value != null &&
        	    hybSetupView.microarrayCategoryCombo.selectedItem.@value != "") {
        		doesMatchExperimentCategory = false;
        		var categoriesForSlideProduct:XMLList  = item.microarrayCategories.MicroarrayCategory;
        		for(var x:Number = 0; x < categoriesForSlideProduct.length(); x++) {
        			if (categoriesForSlideProduct[x].@codeMicroarrayCategory == hybSetupView.microarrayCategoryCombo.selectedItem.@value) {
        				doesMatchExperimentCategory = true;
        				break;
        			}
        		}
        	}
        	var doesMatchGroup:Boolean = true;
        	if (setupView.labCombo.selectedItem != null && setupView.labCombo.selectedItem.@idLab != "" && hybSetupView.isCustomRadio.selected) {
        		if (item.@isCustom == "Y" && item.@idLab == setupView.labCombo.selectedItem.@idLab) {
        			doesMatchGroup = true;
        		} else {
        			doesMatchGroup = false;
        		}
        	} else if (setupView.labCombo.selectedItem != null && setupView.labCombo.selectedItem.@idLab != "" && hybSetupView.isCatalogRadio.selected) {
        		if (item.@isCustom != "Y") {
        			doesMatchGroup = true;
        		} else {
        			doesMatchGroup = false;
        		}
        	}
        	
        	return doesMatchRequestCategoryVendor && doesMatchOrganism && doesMatchExperimentCategory && doesMatchGroup;
        }  
		
		
		
		private function onGetProjectRequestList(event:ResultEvent):void {
			
			this.requestCloneWindow = views.RequestCloneWindow(PopUpManager.createPopUp(this, views.RequestCloneWindow, true));
			PopUpManager.centerPopUp(requestCloneWindow);
			requestCloneWindow.expandAllNodes();
		}
		
		public function cloneRequest(requestToClone:Object):void {
			this.requestToClone = requestToClone;
			getRequestToClone.send();
		}
		
		private function onGetRequestToClone(event:ResultEvent):void {
			
			var clonedRequest:Object = getRequestToClone.lastResult..Request.(@idRequest == requestToClone.@idRequest);
			if (setupView.requestTypeGroup.selectedValue == "QC" || setupView.requestTypeGroup.selectedValue == "SOLEXA") {
				clonedRequest.replace("hybridizations", <hybridizations></hybridizations>); 	
			} 
			
			request = clonedRequest;
			request.@idRequest = "0";
			request.@number = "";
			request.@idLab = setupView.labCombo.selectedItem.@idLab;
			request.@idAppUser = setupView.idAppUser;
			request.@idProject = setupView.projectCombo.selectedItem.@idProject;

			var requestCategory:Object = setupView.getRequestCategory();
			
			// Clear out workflow fields from sample and hyb
			for each(var sample:Object in samples) {
				sample.@qualDate = '';
				sample.@qualCompleted = 'N';
				sample.@qualFailed = 'N';
				sample.@qualBypassed="N"; 
				sample.@qual260nmTo230nmRatio=""; 
				sample.@qual260nmTo280nmRatio=""; 
				sample.@qual28sTo18sRibosomalRatio=""; 
				sample.@qualAverageFragmentLength=""; 
				sample.@qualRINNumber=""; 
				sample.@qualCalcConcentration="";
				sample.@qualStatus = "";
				sample.@treatment = "";
			}
			for each(var hyb:Object in hybs) {
				 // If this is a 1 channel kind if request, clear out channel2 of the cloned request
				 if (requestCategory.@numberOfChannels != "2") {
					hyb.@idSampleChannel2 = "0";
				 }
				 hyb.@idArrayCoordinate="" 
				 hyb.@idScanProtocol="";
				 hyb.@extractionDate="";
				 hyb.@extractionFailed=""; 
				 hyb.@extractionBypassed="";
				 hyb.@hybFailed="";
				 hyb.@hybBypassed="";
				 hyb.@idSlide = "";
				 hyb.@idFeatureExtractionProtocol="";
				 hyb.@hybDate; 
				 hyb.@idLabeledSampleChannel1="";
				 hyb.@idLabeledSampleChannel2=""
				 hyb.@slideNumber="";
				 hyb.@slide="";
				 hyb.@hasResults=""; 
				 hyb.@slideBarcode="";
				 hyb.@hybCompleted="N"; 
				 hyb.@extractionCompleted="N";
				 hyb.@arrayCoordinate="";
				 hyb.@idLabelingProtocolChannel1=""; 
				 hyb.@idLabelingProtocolChannel2="";
				 hyb.@labelingYieldChannel1="";
				 hyb.@codeLabelingReactionSizeChannel1="STD"; 
				 hyb.@labelingYieldChannel2=""; 
				 hyb.@numberOfReactionsChannel2="" 
				 hyb.@codeLabelingReactionSizeChannel2="STD"; 
				 hyb.@labelingFailedChannel1="N"; 
				 hyb.@labelingFailedChannel2="N"; 
				 hyb.@labelingCompleteChannel1="N"; 
				 hyb.@labelingCompleteChannel2="N"; 
				 hyb.@labelingStatusChannel1=""; 
				 hyb.@labelingStatusChannel2=""; 
				 hyb.@arrayCoordinateName=""; 
				 hyb.@hybStatus=""; 
				 hyb.@extractionStatus="";
			}
			

			// Clear out sample annotations for QC request cloned from another request
			if (setupView.requestTypeGroup.selectedValue == "QC") {
				for each(var annotation:Object in sampleCharacteristicEntries) {
					annotation.@isSelected = "false";
				}
				annotationView.clearOutUncheckedSampleAnnotations();
			}
			
			// Make sure we render the annotation tab because
			// otherwise we won't activate the renderer code that
			// hides/shows the sample annotation columns in the samples
			// grid
			if (theTab.contains(annotationView)) {
				theTab.selectedChild = this.annotationView;
			}
						
			callLater(initializeControls);
			callLater(hybSetupView.assignSlideNumbers);
			
			
			callLater(sampleSetupView.checkSampleSetupCompleteness);
			callLater(samplesView.checkSamplesCompleteness);
			callLater(hybSetupView.checkHybSetupCompleteness);
			callLater(checkHybsCompleteness);
			
			
		}

		public function setupEditForm(theRequest:Object):void {
			currentState = '';
			editMode = true;

			request = theRequest;

			var requestCategory:Object = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry.(@value == request.@codeRequestCategory);
			requestCategoryName = requestCategory.@display.toString();

			buttonStack.selectedIndex = 1;
			theTab.creationPolicy = 'all';	
			
			var prevSelectedTab:Container = theTab.selectedChild;			
			
			if (theTab.contains(setupView)) {
				theTab.removeChild(setupView);
			}
			if (theTab.contains(sampleSetupView)) {
				theTab.removeChild(sampleSetupView);
			}
			if (theTab.contains(hybSetupView)) {
				hybSetupView.label = "Slide";
				hybSetupView.numberOfHybsContainer.visible = false;
				hybSetupView.slideSourceContainer.visible = false;
			}
			if (request.@codeRequestCategory == 'QC') {
				if (theTab.contains(hybSetupView)) {
					theTab.removeChild(hybSetupView);
				}
				if (theTab.contains(hybsView)) {
					theTab.removeChild(hybsView);
				}
			} else if (request.@codeRequestCategory == 'SOLEXA') {
				currentState = 'SolexaBaseState';
			
			} else {
				if (!theTab.contains(hybSetupView)) {
					theTab.addChildAt(hybSetupView, 2);
				}
				if (!theTab.contains(hybsView)) {
					theTab.addChildAt(hybsView, 3);
				}
				if (theTab.contains(hybsView)) {
					hybsView.enabled = true;
				}
			}
			if (theTab.contains(confirmView)) {
				theTab.removeChild(confirmView);
			}
			annotationView.enabled = true;			
			samplesView.enabled = true;			

			// Make sure we render the annotation tab because
			// otherwise we won't activate the renderer code that
			// hides/shows the sample annotation columns in the samples
			// grid
			if (theTab.contains(annotationView)) {
				theTab.selectedChild = this.annotationView;
			} 
			
			
			if (parentApplication.hasPermission("canWriteAnyObject")) {
				samplesView.addSampleButton.visible = true;
				samplesView.copySampleButton.visible = true;
				samplesView.deleteSampleButton.visible = true;
				samplesView.clearSamplesButton.visible = true;
				addHybButton.visible = true;
				copyHybButton.visible = true;
				deleteHybButton.visible = true;
				clearHybsButton.visible = true;
			} else {
				samplesView.addSampleButton.visible = false;
				samplesView.copySampleButton.visible = false;
				samplesView.deleteSampleButton.visible = false;
				samplesView.clearSamplesButton.visible = false;
				addHybButton.visible = false;
				copyHybButton.visible = false;
				deleteHybButton.visible = false;
				clearHybsButton.visible = false;
			}

			var canChangeSlide:Boolean = false;			
			if (parentApplication.hasPermission("canWriteAnyObject")) {
				canChangeSlide = true;		
			} else {
				for each(var hyb:Object in hybs) {
					if (hyb.@canChangeSlideDesign == "Y") {
						canChangeSlide = true;
						break;
					}
				}
			}
			hybSetupView.organismCombo.enabled = canChangeSlide;
			hybSetupView.microarrayCategoryCombo.enabled = canChangeSlide;
			hybSetupView.slideProductCombo.enabled = canChangeSlide;
			hybSetupView.isCatalogRadio.enabled = canChangeSlide;
			hybSetupView.isCustomRadio.enabled = canChangeSlide;
			
						if (this.isSolexaState()) {
				
			} else {
				showWorkflowLabel.visible = true;
				samplesView.showQCFieldsCheckBox.visible = true;
				showCy3LabelingFieldsCheckBox.visible = true;
				showCy5LabelingFieldsCheckBox.visible = true;
				showHybFieldsCheckBox.visible = true;
				showExtFieldsCheckBox.visible = true;
					
			}

			
			callLater(initializeControls);
			callLater(hybSetupView.assignSlideNumbers);			
			callLater(samplesView.checkSamplesCompleteness);
			callLater(hybSetupView.checkHybSetupCompleteness);
			callLater(checkHybsCompleteness);
			
		}
		
		
		private function onGetNewRequest(event:ResultEvent):void {
			request = getNewRequest.lastResult..Request.(@idRequest = '0');
			request.@idAppUser = setupView.idAppUser;

		}

		private function initializeControls():void {
			
			if (theTab.contains(sampleSetupView)) {
				sampleSetupView.numberOfSamples.text = new String(request.samples.Sample.length());
				sampleSetupView.sampleConcentration.text = "100";
				sampleSetupView.sampleTypeCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleType').DictionaryEntry.(@value == request.@idSampleTypeDefault);
				sampleSetupView.samplePrepMethodCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethod').DictionaryEntry.(@value == request.@idSamplePrepMethodDefault);
				
			}

			
			if (request != null && request.@idRequest != '0' && request.@codeRequestCategory == "QC") {
				
			} else if (setupView.requestTypeGroup.selectedValue == "QC") {
				
			}else {
				sampleSetupView.sampleOrganismCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry.(@value == request.@idOrganismSampleDefault);
				sampleSetupView.sampleSourceCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleSource').DictionaryEntry.(@value == request.@idSampleSourceDefault);

				selectedIdSlideProduct = request.@idSlideProduct;
				hybSetupView.numberOfHybs.text = new String(request.hybridizations.Hybridization.length());
				var theSlideProduct:Object = parentApplication.getSlideProductList.lastResult.SlideProduct.(@idSlideProduct == request.@idSlideProduct);
				hybSetupView.microarrayCategoryCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.MicroarrayCategory').DictionaryEntry.(@value == request.@codeMicroarrayCategory);
				hybSetupView.organismCombo.selectedItem = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry.(@value == theSlideProduct.@idOrganism);
				checkForSampleTypeCompatibility();
				hybSetupView.initializeSlideProductCombo();
				initializeSlideDesigns();
				hybSetupView.coreSlideSourceCheckbox.selected = true;
				
			}			
			
			if (theTab.contains(setupView)) {
				theTab.selectedChild = this.setupView;			
			} else {
				theTab.selectedChild = this.samplesView;
			}
			
			
			
		}
		
		
		public function initializeSlideDesigns():void {
			var slideDesign:Object = hybSetupView.getDefaultSlideDesign();
			if (slideDesign != null) {
				for each (var hyb:Object in hybs) {
					hyb.@idSlideDesign = slideDesign.@idSlideDesign;
				}
			}
		}
		

		
		
		
		public function sortSampleCharacteristics(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var sc1:String = obj1.@sampleCharacteristic;
				var sc2:String = obj2.@sampleCharacteristic;
				
				if (sc1 == 'Other') {
					return 1;
				} else if (sc2 == 'Other') {
					return  -1;
				} else {
					if (sc1 < sc2) {
						return -1;
					} else if (sc1 > sc2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}	
		
		

		
		
		
        
 
        
        public function checkHybsCompleteness():void {
        	if (request != null && request.codeRequestCategory == "QC") {
        		return;
        	}else if (setupView.requestTypeGroup.selectedValue == "QC") {
        		return;
        	}
        	
        	var completeCount:int = 0;
        	for each(var hyb:Object in hybs) {
        		if (hyb.@idSampleChannel1 != null && hyb.@idSampleChannel1 != '0'  &&
        			hyb.@idSlideDesign != null && hyb.@idSlideDesign != '' &&
        			hyb.@codeSlideSource != null && hyb.@codeSlideSource != '') {
        			completeCount++;       				
        		}
        	}
        	if (hybs.length > 0 && completeCount == hybs.length) {
        		if (theTab.contains(confirmView)){
	        		this.confirmView.enabled = true;
        		}
        		
        	} else if (request.@idRequest != '0') {
        		if (theTab.contains(confirmView)) {
 		       		this.confirmView.enabled = true;        			
        		}
        	} else {
        		if (theTab.contains(confirmView)) {
	        		this.confirmView.enabled = false;        			
        		}
        	}
        	enableNextButtons();
        
        }



		private function addHyb():void {
			var defaultSlideDesign:Object = hybSetupView.getDefaultSlideDesign();
			var idSlideDesign:String = '';
			if (defaultSlideDesign != null) {
				idSlideDesign = defaultSlideDesign.@idSlideDesign;
			}
			
			
			var emptyNode:XML = new XML("<Hybridization " +
			    " idHybridization='" + "Hyb" + hybs.length + "'" +
			    " notes='' " + 
				" idSlideDesign='" + idSlideDesign + "'" +
				" codeSlideSource='" + hybSetupView.getCheckedCodeSlideSource() + "'" +
				" idSampleChannel1='0'" +
				" idSampleChannel2='0'" +
				"/>");
			
			hybs.addItem(emptyNode);
	        hybSetupView.assignSlideNumbers();	
		}
		
		private function propagateHybChannel1Samples():void {
			var requestCategory:Object = setupView.getRequestCategory();
			if (requestCategory.@numberOfChannels == "1") {
				var count:int = 0;
				for each(var sample:Object in samples) {
					if (hybs.length == count) {
						break;
					}
					var hyb:Object = hybs.getItemAt(count);
					hyb.@idSampleChannel1 = sample.@idSample;
					count++;
				}
			}
			
		}
		
        
        public function isSampleTypeCompatibile():Boolean {
        	var compatible:Boolean = true;
        	var sampleTypeX:Object = null;
        	if (this.isSolexaState()) {
        		return compatible;		
        	}
        	
        	if (editMode) {
        		if (request.@codeMicroarrayCategory!= '' &&
	        	    request.@idSampleTypeDefault != '') {
    	    	    compatible = false;
					for each(sampleTypeX in parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleTypeMicroarrayCategory').DictionaryEntry) {
						if (sampleTypeX.@codeMicroarrayCategory == request.@codeMicroarrayCategory &&
					    	sampleTypeX.@idSampleType == request.@idSampleTypeDefault) {
							compatible = true;
							break;
					}
				}        		    	
        	}

        	} else {
	        	if (hybSetupView.microarrayCategoryCombo.selectedItem != null &&
	        	    hybSetupView.microarrayCategoryCombo.selectedItem.@value != '' &&
	        	    sampleSetupView.sampleTypeCombo.selectedItem != null &&
	        	    sampleSetupView.sampleTypeCombo.selectedItem.@value != '') {
	        	    compatible = false;
					for each(sampleTypeX in parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleTypeMicroarrayCategory').DictionaryEntry) {
						if (sampleTypeX.@codeMicroarrayCategory == hybSetupView.microarrayCategoryCombo.selectedItem.@value &&
						    sampleTypeX.@idSampleType == sampleSetupView.sampleTypeCombo.selectedItem.@value) {
							compatible = true;
							break;
						}
					}        		    	
	        	}
        		
        	}
        	return compatible;
        }
        
        public function checkForSampleTypeCompatibility():void {
        	if (!this.isSampleTypeCompatibile()) {
        		if (editMode) {
					var sampleType:Object = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.SampleType').DictionaryEntry.(@value == request.@idSampleTypeDefault);
					var sampleTypeName:String = sampleType.@display.toString();
        			
	        		Alert.show('Sample type ' + sampleTypeName + 
	        		' cannot be used for ' + hybSetupView.microarrayCategoryCombo.selectedItem.@display + 
	        		' experiments.  Please change the microarray category.');
        			
        		} else {
	        		Alert.show('Sample type ' + sampleSetupView.sampleTypeCombo.selectedItem.@display + 
	        		' cannot be used for ' + hybSetupView.microarrayCategoryCombo.selectedItem.@display + 
	        		' experiments.  Please change the sample type or microarray category.');
        			
        		}

        		hybSetupView.slideProductCombo.selectedIndex = 0;
        	}
        }

		
		private function deleteHyb():void {
			if (hybsGrid.selectedItems.length > 0) {
				for each(var hyb:Object in hybsGrid.selectedItems) {					
					hybs.removeItemAt(hybs.getItemIndex(hyb));
				}
			}
	        hybSetupView.assignSlideNumbers();	
		}
		
		private function copyHyb():void {
			if (hybsGrid.selectedIndex != -1) {
				for each(var i:int in hybsGrid.selectedIndices) {					
					var hybToCopy:Object = hybs[i];
					
					var emptyNode:XML = new XML("<Hybridization " +
    			    " idHybridization='" + "Hyb" + hybs.length + "'" +
					" notes='" + hybToCopy.@notes + "'" + 
					" idSampleChannel1='" + hybToCopy.@idSampleChannel1 + "'" +
					" idSampleChannel2='" + hybToCopy.@idSampleChannel2 + "'" +	
					" codeSlideSource='" + hybToCopy.@codeSlideSource + "'" +			
					" idSlideDesign='" + hybToCopy.@idSlideDesign + "'" +			
					"/>");
			
					hybs.addItem(emptyNode);
					
				}
			}
	        hybSetupView.assignSlideNumbers();	
		}
		
		public function promptToClearAllHybs():void {
			Alert.show("Remove all hybs currently showing in list?",
						null, 
						(Alert.YES | Alert.NO), this, 
						onPromptToClearAllHybs);
			
		}
		
		private function onPromptToClearAllHybs(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	hybs.removeAll();
            	checkHybsCompleteness();
            }
        }
        public function initializeHybsGrid():void {
        	if (requestToClone != null) {
        		return;
        	}
        	
        	if (hybSetupView.numberOfHybs.text == null || hybSetupView.numberOfHybs.text == "0" || hybSetupView.numberOfHybs.text == '') {
        		return;
        	}
        	if (hybSetupView.slideProductCombo.selectedItem == null || hybSetupView.slideProductCombo.selectedItem.@value == '') {
        		return;
        	}
        	if (hybSetupView.getCheckedCodeSlideSource() == '') {
        		return;
        	}
        	
        	
    		var numberOfHybsToAdd:Number = new Number(hybSetupView.numberOfHybs.text);
    		if(hybs.length <= numberOfHybsToAdd) {
    			numberOfHybsToAdd = numberOfHybsToAdd - hybs.length;
    		} else {
    			numberOfHybsToAdd = 0;
    		}
    		for(var x:int = 0; x < numberOfHybsToAdd; x++) {
    			addHyb();
    		}
    		
    		this.propagateHybChannel1Samples();
        }

	  	private function onDragDrop(event:DragEvent) : void
		{
		   var isChannel1Drop:Boolean = false;
		   var isChannel2Drop:Boolean = false;
			
	       var ds:DragSource = event.dragSource;
	       var colXStart:int = 0;
	       var colXEnd:int = 0;
	       for each(var col:DataGridColumn in hybsGrid.columns) {
	       		colXEnd += col.width;
	       		
	       		if (event.localX >= colXStart && event.localX <= colXEnd) {
	       			if (col.headerText == "Cy3 Sample (green)") {
	       				isChannel1Drop = true;
	       				break;
	       			} else if (col.headerText == "Cy5 Sample (red)") {
	       				isChannel2Drop = true;
	       				break;
	       			}
	       		}
	       		colXStart = colXEnd;
	       }
	      

		   // The user didn't drag over cy3 or cy5 sample column, so disregard 
		   // operation.	       
	       if (!isChannel1Drop && !isChannel2Drop) {
		       	event.preventDefault();
		       	event.target.hideDropFeedback(event);
		       	DragManager.showFeedback(DragManager.NONE);
		       	checkHybsCompleteness();
		       	return;
	       }
	       
	       // retrieve the data associated with the "items" format. This will be the data that
	       // the dragInitiator has copied into the DragSource.
	       var items:Array = ds.dataForFormat("items") as Array;
	
	       // determine where in the grid the drop occurs and select that node by the index; followed by 
	       // retrieving the node itself. 
	       var r:int = hybsGrid.calculateDropIndex(event);
	       hybsGrid.selectedIndex = r;
	       var node:XML = hybsGrid.selectedItem as XML;
	       var p:*;
	
	
	       if (node.name()  == "Hybridization") {
	       		p = node;
	       } else {
	       		//ignore drop operations not on existing hyb row
	       }
	       
	        
	       // Disallow operation if samples cannot be changed on hyb
	       if (hybsGrid.selectedItem.@canChangeSampleDesignations == "Y" ||
	           parentApplication.hasPermission("canWriteAnyObject")) {
	           	
	       } else {
	       	  	Alert.show("Cy3 and Cy5 samples cannot be changed.");
		       	event.preventDefault();
		       	event.target.hideDropFeedback(event);
		       	DragManager.showFeedback(DragManager.NONE);
				return;	       	  	
	       }
	
	       // taking all of the items in the DragSouce, update the appropriate
	       // sample id on the hyb node.
	       if (p != null) {
		       for(var i:Number=0; i < items.length; i++) {
		       	if (items[i].name() == "Sample") {
		       		if (isChannel1Drop) {
			       		hybsGrid.selectedItem.@idSampleChannel1 = items[i].@idSample;	       			
		       		} else if (isChannel2Drop) {
			       		hybsGrid.selectedItem.@idSampleChannel2 = items[i].@idSample;	       			
		       			
		       		}
		       	} 
		       }
	       	
	       }	
	       
	       this.sampleDragGrid.invalidateDisplayList();
	       this.sampleDragGrid.invalidateList();
	       
	       // Don't allow flex to do any default moves to the data.  
	       // We handle it in the code above.
	       event.preventDefault();
	       
	       checkHybsCompleteness();
		}
		
		private function addLane():void {
			var emptyNode:XML = new XML("<SequenceLane " +
			    " idSequenceLane='" + "SequenceLane" + lanes.length + "'" +
			    " notes='' " + 
				" idFlowCellType='" + flowCellTypeCombo.selectedItem.@value + "'" +
				" idNumberSequencingCycles='" + numberSequencingCyclesCombo.selectedItem.@value + "'" +
				" idSample='0'" +
				"/>");
			
			lanes.addItem(emptyNode);
		}

		private function copyLane():void {
			if (lanesGrid.selectedIndex != -1) {
				for each(var i:int in lanesGrid.selectedIndices) {					
					var laneToCopy:Object = lanes[i];
					
					var emptyNode:XML = new XML("<SequenceLane " +
    			    " idSequenceLane='" + "SequenceLane" + lanes.length + "'" +
					" notes='" + laneToCopy.@notes + "'" + 
					" idSample='" + laneToCopy.@idSample + "'" +
					" idFlowCellType='" + laneToCopy.@idFlowCellType + "'" +			
					" idNumberSequencingCycles='" + laneToCopy.@idNumberSequencingCycles + "'" +			
					"/>");
			
					lanes.addItem(emptyNode);
					
				}
			}
		}
		private function deleteLane():void {
			if (lanesGrid.selectedItems.length > 0) {
				for each(var lane:Object in lanesGrid.selectedItems) {		
					var index:int = lanes.getItemIndex(lane);			
					lanes.removeItemAt(index);
				}
			}
		}
		public function promptToClearAllLanes():void {
			Alert.show("Remove all sequence lanes currently showing in list?",
						null, 
						(Alert.YES | Alert.NO), this, 
						onPromptToClearAllLanes);
			
		}
        private function initializeLanesGrid():void {
        	if (requestToClone != null) {
        		return;
        	}
        	
        	if (numberOfLanes.text == null || numberOfLanes.text == "0" || numberOfLanes.text == '') {
        		return;
        	}
        	if (flowCellTypeCombo.selectedItem == null || flowCellTypeCombo.selectedItem.@value == '') {
        		return;
        	}
        	if (numberSequencingCyclesCombo.selectedItem == null || numberSequencingCyclesCombo.selectedItem.@value == '') {
        		return;
        	}
        	if (!this.performTestRunRadio.selected && !this.dontPerformTestRunRadio.selected) {
        		return;
        	}
        	
        	
    		var numberOfLanesToAdd:Number = new Number(numberOfLanes.text);
    		if(lanes.length <= numberOfLanesToAdd) {
    			numberOfLanesToAdd = numberOfLanesToAdd - lanes.length;
    		} else {
    			numberOfLanesToAdd = 0;
    		}
    		for(var x:int = 0; x < numberOfLanesToAdd; x++) {
    			addLane();
    		}
    		
        }
		private function propagateFlowCellType():void {
			for each (var lane:Object in lanes) {
				lane.@idFlowCellType = this.flowCellTypeCombo.selectedItem.@value;
			}
			callLater(checkLanesCompleteness);
		}
		private function propagateNumberSequencingCycles():void {
			for each (var lane:Object in lanes) {
				lane.@idNumberSequencingCycles = this.numberSequencingCyclesCombo.selectedItem.@value;
			}
			callLater(checkLanesCompleteness);
		}

		private function onPromptToClearAllLanes(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	lanes.removeAll();
            	checkLanesCompleteness();
            }
        }
        public function checkLanesCompleteness():void {
        	var completeCount:int = 0;
        	for each(var lane:Object in lanes) {
        		if (lane.@idSample != null && lane.@idSample!= '0'  &&
        			lane.@idFlowCellType != null && lane.@idFlowCellType != '' &&
        			lane.@idNumberSequencingCycles != null && lane.@idNumberSequencingCycles != '') {
        			completeCount++;       				
        		}
        	}
        	if (lanes.length > 0 && completeCount == lanes.length) {
        		if (theTab.contains(confirmView)){
	        		this.confirmView.enabled = true;
        		}
        		
        	} else if (request.@idRequest != '0') {
        		if (theTab.contains(confirmView)) {
 		       		this.confirmView.enabled = true;        			
        		}
        	} else {
        		if (theTab.contains(confirmView)) {
	        		this.confirmView.enabled = false;        			
        		}
        	}
        	enableNextButtons();
        
        }

	  	private function onDragDropLane(event:DragEvent) : void
		{
	       // retrieve the data associated with the "items" format. This will be the data that
	       // the dragInitiator has copied into the DragSource.
	       var items:Array = event.dragSource.dataForFormat("items") as Array;
	
	       // determine where in the grid the drop occurs and select that node by the index; followed by 
	       // retrieving the node itself. 
	       var r:int = lanesGrid.calculateDropIndex(event);
	       lanesGrid.selectedIndex = r;
	       var node:XML = lanesGrid.selectedItem as XML;
	       var p:*;
	
	
	       if (node.name()  == "SequenceLane") {
	       		p = node;
	       } else {
	       		//ignore drop operations not on existing hyb row
	       }
	       
	        
	       // Disallow operation if samples cannot be changed on hyb
	       if (lanesGrid.selectedItem.@canChangeSampleDesignations == "Y" ||
	           parentApplication.hasPermission("canWriteAnyObject")) {
	           	
	       } else {
	       	  	Alert.show("Lane samples cannot be changed.");
		       	event.preventDefault();
		       	event.target.hideDropFeedback(event);
		       	DragManager.showFeedback(DragManager.NONE);
				return;	       	  	
	       }
	
	       // taking all of the items in the DragSouce, update the appropriate
	       // sample id on the hyb node.
	       if (p != null) {
		       for(var i:Number=0; i < items.length; i++) {
		       	if (items[i].name() == "Sample") {
			    	lanesGrid.selectedItem.@idSample = items[i].@idSample;	       			
		       	} 
		       }
	       	
	       }	
	       
	       this.sampleLaneDragGrid.invalidateDisplayList();
	       this.sampleLaneDragGrid.invalidateList();
	       
	       // Don't allow flex to do any default moves to the data.  
	       // We handle it in the code above.
	       event.preventDefault();
	       
	       checkLanesCompleteness();
		}

		private function validateRequest():void {
			errorMessage = '';
			warningMessage = '';
			
			// All samples must be used on at least one hyb
			var allSamplesUsed:Boolean = true;
			var unusedSampleList:String = '';
			var unusedSampleCount:int = 0;
			var target:String = "";
			if (setupView.requestTypeGroup.selectedValue != "QC") {
				for each(var sample:Object in samples) {
					var useCount:int = 0;
					if (setupView.requestTypeGroup.selectedValue == "SOLEXA") {
						useCount = getLaneCount(sample);
						target = "sequence lane";
					} else {
						useCount = getChannelCount(sample);
						target = "hybridization";
					}
					
					if (useCount == 0) {
						allSamplesUsed = false;
						if (unusedSampleList != '') {
							unusedSampleList += ', ';							
						}
						unusedSampleList += sample.@name;
						unusedSampleCount++;
						
					}
				}
				if (unusedSampleCount > 0) {
					if (unusedSampleCount == 1) {
						errorMessage = 'The sample ' + unusedSampleList + 
						' is not used on any ' + target + 's.\n' +
						'The request cannot be submitted until the unused sample is removed from the list or assigned to a ' + target + '.';
						
					} else {
						errorMessage = 'The samples  (' + unusedSampleList + 
						')  are not used on any ' + target + 's.\n' +
						'The request cannot be submitted until the unused samples are removed from the list or assigned to ' + target + 's.';
						
					}
				}
			}	
			
			// Warn if some of the arrays (on a multi-array slide) are not used.	
			
			if (!this.isSolexaState() && setupView.requestTypeGroup.selectedValue != "QC") {
				if (hybSetupView.slideProductCombo.selectedItem.@arraysPerSlide != '' && hybSetupView.slideProductCombo.selectedItem.@arraysPerSlide != 1) {
					if (hybs.length % hybSetupView.slideProductCombo.selectedItem.@arraysPerSlide != 0) {
						warningMessage = "There are unused arrays on the multi-array slide  '" + hybSetupView.slideProductCombo.selectedItem.@name +
						 "'. ";
					}
				}
				
			}
		}
		
		private function getChannelCount(sample:Object):int {
			var count:int = 0;
        	if (hybs!= null) {
        		for each(var hyb:Object in hybs) {
        			if (hyb.@idSampleChannel1 == sample.@idSample ||
        			    hyb.@idSampleChannel2 == sample.@idSample) {
        				count++;
        			}
        		}
        	} 								
        	return count;
		}
		private function getLaneCount(sample:Object):int {
			var count:int = 0;
        	if (lanes!= null) {
        		for each(var sequenceLane:Object in lanes) {
        			if (sequenceLane.@idSample == sample.@idSample) {
        				count++;
        			}
        		}
        	} 								
        	return count;
		}
		
		private function validateAndSubmitRequest():void {
			
			// Only submit request if it is valid
			validateRequest();
			if (errorMessage != '') {
				Alert.show(errorMessage, "Error", Alert.OK, null, null, parentApplication.iconError);
				return;
			}
			if (warningMessage != '') {
				promptToSubmitRequest();
				return;
			}
			submitRequest();
		}
		
		private function validateAndSaveRequest():void {
			
			// Only save request if it is valid
			validateRequest();
			if (errorMessage != '') {
				Alert.show(errorMessage, "Error", Alert.OK, null, null, parentApplication.iconError);
				return;
			}
			if (warningMessage != '') {
				promptToSaveRequest();
				return;
			}
			saveRequest();
		}
		
		
		
		private function submitRequest():void {
			
			request.@codeRequestCategory = setupView.requestTypeGroup.selectedValue;
			request.@idLab = setupView.labCombo.selectedItem.@idLab;
			request.@idAppUser = setupView.idAppUser;
			request.@idBillingAccount = setupView.billingAccountCombo.selectedItem.@idBillingAccount;
			request.@idProject = setupView.projectCombo.selectedItem.@idProject;
			
			request.@idSampleTypeDefault = sampleSetupView.sampleTypeCombo.selectedItem.@value;
			
			if (setupView.requestTypeGroup.selectedValue != "QC") {
				request.@idSampleSourceDefault = sampleSetupView.sampleSourceCombo.selectedItem.@value;
				request.@idOrganismSampleDefault = sampleSetupView.sampleOrganismCombo.selectedItem.@value;
			}
			request.@idSamplePrepMethodDefault = sampleSetupView.samplePrepMethodCombo.selectedItem.@value;

			if (!this.isSolexaState() && setupView.requestTypeGroup.selectedValue != "QC") {
				request.@idSlideProduct = hybSetupView.slideProductCombo.selectedItem.@idSlideProduct;
				request.@codeMicroarrayCategory = hybSetupView.microarrayCategoryCombo.selectedItem.@codeMicroarrayCategory;				
			}
			
			var requestCategory:Object = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry.(@value == request.@codeRequestCategory);
			
			request.replace("samples", <samples></samples>); 
			for each(var sample:Object in samples) {
				request.samples.appendChild(sample);
			}
			request.replace("hybridizations", <hybridizations></hybridizations>); 
			if (request.@codeRequestCategory != "QC" && request.@codeRequestCategory != "SOLEXA") {
				for each(var hyb:Object in hybs) {
					if (requestCategory.@numberOfChannels != "2") {
						hyb.@idSampleChannel2 = "0";
					}
					request.hybridizations.appendChild(hyb);
				 }
			} else {
				request.@codeMicroarrayCategory = '';
				request.@idSlideProduct = '';
			}
			request.replace("sequenceLanes", <sequenceLanes></sequenceLanes>); 
			if (request.@codeRequestCategory == "SOLEXA") {
				for each(var lane:Object in lanes) {
					request.sequenceLanes.appendChild(lane);
				}
			
			}			

			var params:Object = new Object();
			params.requestXMLString = request.toXMLString();
			params.idProject = setupView.projectCombo.selectedItem.@idProject;
			saveNewRequest.send(params);			
			
		}

		
		private function saveRequest():void {
			
			if (!this.isSolexaState()) {
				request.@idSlideProduct = hybSetupView.slideProductCombo.selectedItem.@idSlideProduct;
				request.@codeMicroarrayCategory = hybSetupView.microarrayCategoryCombo.selectedItem.@codeMicroarrayCategory;
			} 			
			
			request.replace("samples", <samples></samples>); 
			for each(var sample:Object in samples) {
				request.samples.appendChild(sample);
			}
			request.replace("hybridizations", <hybridizations></hybridizations>); 
			if (request.@codeRequestCategory != "QC") {
				for each(var hyb:Object in hybs) {
					request.hybridizations.appendChild(hyb);
				 }
			}
			request.replace("sequenceLanes", <sequenceLanes></sequenceLanes>); 
			if (request.@codeRequestCategory == "SOLEXA") {
				for each(var lane:Object in lanes) {
					request.sequenceLanes.appendChild(lane);
				}
			}

			var params:Object = new Object();
			params.requestXMLString = request.toXMLString();
			params.idProject = request.@idProject;
			saveExistingRequest.send(params);			
			
		}
		
		public function promptToSubmitRequest():void {
			Alert.show( warningMessage + "\n\nDo you want to submit the request anyway?", 
						"Warning", 
						(Alert.YES | Alert.NO), this, 
						onPromptSubmitRequest,
						parentApplication.iconWarning);
			
		}
		
		private function onPromptSubmitRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	warningMessage = '';
            	submitRequest();
            }
        }
		
		public function promptToSaveRequest():void {
			Alert.show( warningMessage + "\n\nDo you want to save the request anyway?", 
						"Warning", 
						(Alert.YES | Alert.NO), this, 
						onPromptSaveRequest,
						parentApplication.iconWarning);
			
		}
		
		private function onPromptSaveRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	warningMessage = '';
            	saveRequest();
            }
        }
		
		private function onSaveNewRequest(event:ResultEvent):void {
			if (saveNewRequest.lastResult.name() == "SUCCESS") {
				submittedIdRequest = saveNewRequest.lastResult.@idRequest;
				submittedRequestNumber = saveNewRequest.lastResult.@requestNumber;

				confirmButtonStack.selectedIndex = 2;
				var message:String = 'Request #  ' + submittedRequestNumber + ' has been submitted. Please print off the request form and deliver it along with your samples to the Microarray Core Facility.';
				Alert.show(message); 
 				nextButton.enabled = false;
				backButton.enabled = false;
				
				setupView.enabled = false;
				sampleSetupView.enabled = false;
				if (theTab.contains(annotationView)) {
					annotationView.enabled = false;
				}
				samplesView.enabled = false;

				if (this.isSolexaState()) {
					lanesView.enabled = false;
				} else {
					if (theTab.contains(hybSetupView)) {
						hybSetupView.enabled = false;
					}
					if (theTab.contains(hybsView)) {
						hybsView.enabled = false;
					}					
				} 
				
			} else {
				Alert.show(saveNewRequest.lastResult..ACTMESSAGE.@TEXT);
			}
		}
		
		private function onSaveExistingRequest(event:ResultEvent):void {
			if (saveExistingRequest.lastResult.name() == "SUCCESS") {
				
			} else {
				Alert.show(saveExistingRequest.lastResult..ACTMESSAGE.@TEXT);
			}
		}

		private function showPrintableRequestForm():void {
			var url:URLRequest = new URLRequest('http://localhost/gnomex/ShowRequestForm.gx?idRequest=' + submittedIdRequest);
			navigateToURL(url, '_blank');			
		}
		

		private function showCy3LabelCols(isVisible:Boolean):void {
			labelCol1.visible = isVisible;
			labelCol2.visible = isVisible;
			labelCol3.visible = isVisible;
			labelCol4.visible = isVisible;
			labelCol5.visible = isVisible;
		}
			
		private function showCy5LabelCols(isVisible:Boolean):void {
			labelCol6.visible = isVisible;
			labelCol7.visible = isVisible;
			labelCol8.visible = isVisible;
			labelCol9.visible = isVisible;
			labelCol10.visible = isVisible;
		}

		]]>
		
		
	</mx:Script>
	
  	<mx:XMLListCollection id="sampleCharacteristicEntries" source="{request.SampleCharacteristicEntries.SampleCharacteristicEntry}" 
	  	 sort="{sampleCharacteristicSorter}"/>
	<mx:Sort id="sampleCharacteristicSorter" compareFunction="sortSampleCharacteristics" unique="true"/>


	<mx:XMLListCollection id="samples" source="{request.samples.Sample}"/>

	<mx:XMLListCollection id="hybs" source="{request.hybridizations.Hybridization}"/>


	<mx:XMLListCollection id="lanes" source="{request.sequenceLanes.SequenceLane}"/>
  
 	<mx:VBox  width="100%" height="100%" paddingBottom="6" paddingLeft="6" paddingRight="6" paddingTop="6" verticalGap="0">
 	    	
		<mx:TabNavigator  click="theTab.creationPolicy='all'"  id="theTab" width="100%" height="100%" paddingLeft="8" paddingRight="4" paddingBottom="4"  paddingTop="6" change="enableNextButtons()">
		    <views:SubmitRequestSetupView id="setupView">		    	
		    </views:SubmitRequestSetupView>
		    
		    <views:SubmitRequestSampleSetupView id="sampleSetupView">		    	
		    </views:SubmitRequestSampleSetupView>
		   
		    <views:SubmitRequestAnnotationView id="annotationView">		    	
		    </views:SubmitRequestAnnotationView> 
		    
		    <views:SubmitRequestSamplesView id="samplesView">		    	
		    </views:SubmitRequestSamplesView>
		    
			<views:SubmitRequestHybSetupView id="hybSetupView">				
			</views:SubmitRequestHybSetupView>
			
			<mx:Canvas label="Hybs" width="100%" height="100%" enabled="false" id="hybsView">
			    <mx:VBox width="100%" height="100%" verticalGap="0">
				    <mx:HDividedBox height="100%" width="100%">
				        <mx:Panel  title="Samples" height="100%" verticalGap="4">
				        	<views:DataGrid
				        		dragProxyImage="views.DataGridSampleDragProxy" 
				        		 height="100%" width="100%" 
				        		 dataProvider="{samples}" labelField="@name" 
				        		 dragEnabled="true" id="sampleDragGrid" selectionColor="#FFFFB9" rollOverColor="#C0C0C0" showHeaders="false">
								<views:columns>
									<mx:DataGridColumn headerText = "Samples" width="80" dataField="@name"/>
						            <mx:DataGridColumn width="20"  labelFunction="getChannelCountLabelFunction" headerText="">
						                <mx:itemRenderer>
						                    <mx:Component >
						                        <mx:HBox  horizontalGap="0" >
						                          <mx:Image source="{data.@channel1Count > 0 ? '../assets/bullet_green.png' : ''}">
						                    	 </mx:Image> 
						                          <mx:Image source="{data.@channel2Count > 0 ? '../assets/bullet_red.png' : ''}">
						                    	 </mx:Image> 
						                        </mx:HBox>
						                    </mx:Component>
						                </mx:itemRenderer>
						            </mx:DataGridColumn> 
								</views:columns>
											        				        		
				         	</views:DataGrid>
				        </mx:Panel>
						<mx:Panel  id="hybsContainer" width="100%" height="100%">
						   <mx:title><![CDATA[Hybridizations    (Drag sample onto Cy3 or Cy5 Sample cell)]]></mx:title>
								<mx:HBox width="100%" verticalAlign="middle" paddingLeft="4" paddingTop="4">
									<mx:HBox>
										<mx:Button label="Add" click="addHyb();checkHybsCompleteness()" icon="@Embed('../assets/table_row_insert.png')" id="addHybButton"/>
										<mx:Button label="Copy" click="copyHyb();checkHybsCompleteness()" icon="@Embed('../assets/table_multiple.png')" id="copyHybButton"/>
										<mx:Button label="Delete" click="deleteHyb();checkHybsCompleteness()" icon="@Embed('../assets/table_row_delete.png')" id="deleteHybButton"/>
										<mx:Button label="Clear all" click="promptToClearAllHybs()" icon="@Embed('../assets/folder_delete.png')" id="clearHybsButton"/>
									</mx:HBox>
									
									<mx:HBox horizontalAlign="right" width="100%">
										<mx:HBox width="100%" horizontalGap="0"  horizontalAlign="left" label="Show Cy5 Labeling data" paddingBottom="2" verticalAlign="middle" paddingLeft="8" paddingTop="2">
											<mx:Label text="Show other columns:" id="showWorkflowLabel"/>
											<mx:CheckBox id="showCy3LabelingFieldsCheckBox" label="Cy3 Labeling" click="showCy3LabelCols(showCy3LabelingFieldsCheckBox.selected)" paddingLeft="0" paddingBottom="0" paddingRight="0"/>
											<mx:CheckBox id="showCy5LabelingFieldsCheckBox" label="Cy5 Labeling" click="showCy5LabelCols(showCy5LabelingFieldsCheckBox.selected)" paddingLeft="0" paddingRight="0"/>
											<mx:CheckBox id="showHybFieldsCheckBox" label="Hyb" paddingLeft="0" paddingRight="0"/>
											<mx:CheckBox id="showExtFieldsCheckBox" label="Scan/FE data" paddingLeft="0" paddingRight="0"/>
										</mx:HBox>
									</mx:HBox>
										
								</mx:HBox>
							<views:DataGridAlternatingGroup width="100%" height="100%" id="hybsGrid"  editable="true" dataProvider="{hybs}" allowMultipleSelection="true" dropEnabled="true" dragDrop="onDragDrop(event)" itemFocusOut="checkHybsCompleteness()" rollOverColor="#C0C0C0" selectionColor="#FFFFB9" horizontalScrollPolicy="auto">
								<views:columns>
								    <mx:DataGridColumn editable="false" headerText=""   resizable="false" width="25" labelFunction="getHybsGridRowNumber"/>
						            <mx:DataGridColumn width="50" id="slideNumberColumn" headerText="Slide">
						                <mx:itemRenderer>
						                    <mx:Component >
						                        <mx:HBox  horizontalGap="0" >
						                          <mx:Image id="experimentImage"  source="{data.@showSlideIcon == 'Y' ? '../assets/color_swatch.png' : ''}">
						                    	 </mx:Image> 
						                          <mx:Label  text="{data.@showSlideIcon == 'Y' ? data.@slideNumber : ''}">
						                    	 </mx:Label>  
						                        </mx:HBox>
						                    </mx:Component>
						                </mx:itemRenderer>
						            </mx:DataGridColumn> 
								    <mx:DataGridColumn headerText="Cy3 Sample (green)"  width="122" 
								    	labelFunction="getSampleChannel1Name" 
                                        editorDataField="text" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.TextInputSampleChannel1" itemRenderer="views.renderers.LabelSampleChannel1" />								    	
								    <mx:DataGridColumn id="channel2SampleColumn" headerText="Cy5 Sample (red)"  width="122" 
								    	labelFunction="getSampleChannel2Name" 
                                        editorDataField="text" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.TextInputSampleChannel2" itemRenderer="mx.controls.Label" />								    	
                                        
                                        
								<mx:DataGridColumn id="labelCol1"  visible="false"  headerText="Channel1 Labeling protocol"  labelFunction="parentApplication.lookupLabelingProtocolChannel1" width="80" dataField="@idLabelingProtocolChannel1">
									<mx:headerRenderer >
									<mx:Component>
										<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
										    <mx:Label text="Cy3 Label"/>
										    <mx:Label text="Protocol"/>
										</mx:VBox>
									</mx:Component>
									</mx:headerRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn id="labelCol2"  visible="false" headerText="Channel1 Labeling yield" width="80" dataField="@labelingYieldChannel1">
									<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
										    <mx:Label text="Cy3 Label"/>
										    <mx:Label text="Yield"/>
										</mx:VBox>
									</mx:Component>
									</mx:headerRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn id="labelCol3"  visible="false" headerText="Channel1 Labeling Reaction size" width="80" dataField="@codeLabelingReactionSizeChannel1">
									<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
										    <mx:Label text="Cy3 Label"/>
										    <mx:Label text="Reaction size"/>
										</mx:VBox>
									</mx:Component>
									</mx:headerRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn id="labelCol4"  visible="false" headerText="Channel1 Labeling # Reactions" width="80" dataField="@numberOfReactionsChannel1">
									<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
										    <mx:Label text="Cy3 Label"/>
										    <mx:Label text="# reactions"/>
										</mx:VBox>
									</mx:Component>
									</mx:headerRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn  id="labelCol5"   visible="false" headerText="Channel1 Labeling Status" width="80" dataField="@labelingStatusChannel1">
									<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
										    <mx:Label text="Cy3 Label"/>
										    <mx:Label text="Status"/>
										</mx:VBox>
									</mx:Component>
									</mx:headerRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn id="labelCol6"   visible="false" headerText="Channel2 Labeling protocol"  labelFunction="parentApplication.lookupLabelingProtocolChannel2" width="80" dataField="@idLabelingProtocolChannel2">
									<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
										    <mx:Label text="Cy5 Label"/>
										    <mx:Label text="Protocol"/>
										</mx:VBox>
									</mx:Component>
									</mx:headerRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn id="labelCol7"   visible="false" headerText="Channel2 Labeling yield" width="80" dataField="@labelingYieldChannel2">
									<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
										    <mx:Label text="Cy5 Label"/>
										    <mx:Label text="Yield"/>
										</mx:VBox>
									</mx:Component>
									</mx:headerRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn id="labelCol8"  visible="false" headerText="Channel2 Labeling Reaction size" width="80" dataField="@codeLabelingReactionSizeChannel2">
									<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
										    <mx:Label text="Cy5 Label"/>
										    <mx:Label text="Reaction size"/>
										</mx:VBox>
									</mx:Component>
									</mx:headerRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn id="labelCol9"  visible="false"  headerText="Channel2 Labeling # Reactions" width="80" dataField="@numberOfReactionsChannel2">
									<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
										    <mx:Label text="Cy5 Label"/>
										    <mx:Label text="# reactions"/>
										</mx:VBox>
									</mx:Component>
									</mx:headerRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn id="labelCol10"   visible="false" headerText="Channel2 Labeling Status" width="80" dataField="@labelingStatusChannel2">
									<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
										    <mx:Label text="Cy5 Label"/>
										    <mx:Label text="Status"/>
										</mx:VBox>
									</mx:Component>
									</mx:headerRenderer>
								</mx:DataGridColumn>



								<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Hyb Slide barcode" width="70" dataField="@slideBarcode"/>
								<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Coordinate" width="70" dataField="@arrayCoordinateName"/>
								<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Hyb Protocol" width="70" labelFunction="parentApplication.lookupHybProtocol"  dataField="@idHybProtocol"/>
								<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Hyb Status" width="90" dataField="@hybStatus"/>


								<mx:DataGridColumn visible="{showExtFieldsCheckBox.selected}" headerText="Scan Protocol" width="70" labelFunction="parentApplication.lookupScanProtocol" dataField="@idScanProtocol"/>
								<mx:DataGridColumn visible="{showExtFieldsCheckBox.selected}" headerText="F/E Protocol" width="70" labelFunction="parentApplication.lookupFeatureExtractionProtocol" dataField="@idFeatureExtractionProtocol"/>
								<mx:DataGridColumn visible="{showExtFieldsCheckBox.selected}" headerText="Ext Status" width="90" dataField="@extractionStatus"/>


                                        
                                        
                                        
                                        
                                        
						             <mx:DataGridColumn id="slideDesignColumn" visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showHybFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"  headerText="Slide"  width="250" dataField="@idSlideDesign" 						             						             
						                editorDataField="value" sortable="false" labelFunction="parentApplication.lookupSlideDesignName" editable="true" rendererIsEditor="false" itemRenderer="views.renderers.LabelSlideDesign" itemEditor="views.renderers.ComboBoxSlideDesign" />
						             <mx:DataGridColumn visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showHybFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"  headerText="Slide Source"  width="78" dataField="@codeSlideSource" 
						                editorDataField="value" sortable="false" editable="true" labelFunction="parentApplication.lookupSlideSource" rendererIsEditor="false" itemRenderer="views.renderers.LabelSlideSource" itemEditor="views.renderers.ComboBoxSlideSource" />
									<mx:DataGridColumn headerText="Notes" visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showHybFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"  width="100" dataField="@notes"/>
								</views:columns>
							</views:DataGridAlternatingGroup>
							
						</mx:Panel>
				    	
				    </mx:HDividedBox>

			    </mx:VBox>
			</mx:Canvas>
			<mx:Canvas label="Confirm" width="100%" height="100%" enabled="false" id="confirmView">
			<mx:VBox id="confirmHeaderContainer"  width="100%" height="100%" backgroundAlpha="0.0" verticalGap="0">




			<mx:VBox   width="100%" height="100%" backgroundAlpha="0.0" verticalGap="5" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="0" id="confirmContainer">
				<mx:HBox width="100%" horizontalGap="20">
					<mx:VBox height="100%" verticalGap="0">
						<mx:Label text="Request Kind" textDecoration="underline" height="16"/>
						<mx:Text text="{requestCategoryName}" id="requestKindLabel"/>
					</mx:VBox>
					<mx:VBox height="100%" verticalGap="0">
						<mx:Label text="Lab" textDecoration="underline" height="16"/>
						<mx:Text text="{setupView.labCombo.selectedItem.@name}"/>
					</mx:VBox>
					<mx:VBox height="100%" verticalGap="0">
						<mx:Label text="Project" textDecoration="underline" height="16"/>
						<mx:Text text="{setupView.projectCombo.selectedItem.@name}"/>
					</mx:VBox>
					<mx:VBox height="100%" verticalGap="0">
						<mx:Label text="Billing Account" textDecoration="underline" height="16"/>
						<mx:Text text="{setupView.billingAccountCombo.selectedItem.@accountName}"/>
					</mx:VBox>
				</mx:HBox>
					<mx:VBox verticalGap="0" width="100%" height="100%" id="samplesConfirmContainer">
						<mx:Label text="{samples.length + ' Samples'}" id="label1"/>
						<mx:DataGrid width="100%" id="samplesGridConfirm"  editable="false" dataProvider="{samples}" backgroundAlpha="0" borderStyle="solid" selectionColor="#FFFFB9" rollOverColor="#C0C0C0" horizontalScrollPolicy="auto" height="100%">
							<mx:columns>
							    <mx:DataGridColumn editable="false" headerText=""  width="25" resizable="false" labelFunction="getSamplesGridRowNumber"/>
								<mx:DataGridColumn headerText="Sample Name" width="100" dataField="@name"/>
								<mx:DataGridColumn headerText="Conc." width="65" dataField="@concentration"/>
				                <mx:DataGridColumn id="concentrationUnitConfirmColumn" headerText="Unit"  width="60" labelFunction="parentApplication.lookupConcentrationUnit" />
					            <mx:DataGridColumn headerText="Sample Type"  width="130" labelFunction="parentApplication.lookupSampleTypeName"/>
					            <mx:DataGridColumn headerText="Organism" id="sampleOrganismConfirmColumn" width="100" labelFunction="parentApplication.lookupOrganism"/>
					            <mx:DataGridColumn headerText="Sample Source" id="sampleSourceConfirmColumn" width="90" labelFunction="parentApplication.lookupSampleSource"/>
					            <mx:DataGridColumn headerText="Sample Prep Method"  width="160" labelFunction="parentApplication.lookupSamplePrepMethod"/>
				                <mx:DataGridColumn id="chipTypeConfirmColumn" headerText="Chip Type"  width="80" labelFunction="parentApplication.lookupChipType" />
								<mx:DataGridColumn id="AGE0" headerText="Age" dataField="@AGE" editable="true" visible="false"/>
								<mx:DataGridColumn id="CELLLINE0" headerText="Cell line" dataField="@CELLLINE" editable="true" visible="false"/>
								<mx:DataGridColumn id="CELLTYPE0" headerText="Cell Type" dataField="@CELLTYPE" editable="true" visible="false"/>
								<mx:DataGridColumn id="CLININFO0" headerText="Clinical Info" dataField="@CLININFO" editable="true" visible="false"/>
								<mx:DataGridColumn id="COMPOUND0" headerText="Compound" dataField="@COMPOUND" editable="true" visible="false"/>
								<mx:DataGridColumn id="DISSTATE0" headerText="Disease State" dataField="@DISSTATE" editable="true" visible="false"/>
								<mx:DataGridColumn id="DOSE0" headerText="Dose" dataField="@DOSE" editable="true" visible="false"/>
								<mx:DataGridColumn id="GENMOD0" headerText="Genetic Modification" dataField="@GENMOD" editable="true" visible="false"/>
								<mx:DataGridColumn id="GENOTYPE0" headerText="Genotype" dataField="@GENOTYPE" editable="true" visible="false"/>
								<mx:DataGridColumn id="GROWTHCOND0" headerText="Growth Conditions" dataField="@GROWTHCOND" editable="true" visible="false"/>
								<mx:DataGridColumn id="INDIV0" headerText="Individual" dataField="@INDIV" editable="true" visible="false"/>
								<mx:DataGridColumn id="ORGPART0" headerText="Organ / Tissue" dataField="@ORGPART" editable="true" visible="false"/>
								<mx:DataGridColumn id="SEX0" headerText="Sex" dataField="@SEX" editable="true" visible="false"/>
								<mx:DataGridColumn id="TEMP0" headerText="Temperature" dataField="@TEMP" editable="true" visible="false"/>
								<mx:DataGridColumn id="TIME0" headerText="Time Course" dataField="@TIME" editable="true" visible="false"/>
								<mx:DataGridColumn id="otherDataColumnConfirm" headerText="Other" dataField="@OTHER" editable="true" visible="false"/>
								<mx:DataGridColumn id="treatmentConfirmColumn" headerText="Treatment" visible="false" width="100" dataField="@treatment"/>
								<mx:DataGridColumn headerText="Description" width="100" dataField="@description"/>
							</mx:columns>
						</mx:DataGrid>
						
				</mx:VBox>
					<mx:VBox width="100%" height="100%" verticalGap="0" id="hybsConfirmContainer">
						<mx:Label text="{hybs.length + ' Hybridizations'}"/>
						<mx:DataGrid width="100%" height="100%" id="hybsGridConfirm" editable="false" dataProvider="{hybs}"  backgroundAlpha="0" borderStyle="solid" rollOverColor="#C0C0C0" selectionColor="#FFFFB9">
							<mx:columns>
							    <mx:DataGridColumn editable="false" headerText=""   resizable="false" width="70" labelFunction="getHybsGridRowNumber"/>
							    <mx:DataGridColumn editable="false" headerText="Cy3 Sample (green)"  width="122" labelFunction="getSampleChannel1Name"/>
							    <mx:DataGridColumn id="channel2SampleConfirmColumn" editable="false" headerText="Cy5 Sample (red)"  width="122" labelFunction="getSampleChannel2Name"/>
							     <mx:DataGridColumn headerText="Slide"  width="320" labelFunction="parentApplication.lookupSlideDesignName" />
							     <mx:DataGridColumn headerText="Slide Source"  width="82"  labelFunction="parentApplication.lookupSlideSource" />
								<mx:DataGridColumn headerText="Notes" width="100" dataField="@notes"/>
							</mx:columns>
						</mx:DataGrid>
						
					</mx:VBox>
				</mx:VBox>
				
			</mx:VBox>
			</mx:Canvas>
		</mx:TabNavigator>
	</mx:VBox>
	
 	   <mx:ControlBar>
 		<mx:ViewStack id="buttonStack" width="100%">
	 	    <mx:HBox width="100%" >
				<mx:Button label="&lt; Back" enabled="false" visible="true" id="backButton" click="previousTab()"/>
				<mx:Button id="nextButton"  label="Next &gt;" enabled="false" click="nextTab()"/>
				<mx:ViewStack id="confirmButtonStack" width="100%" height="28">
							<mx:HBox width="100%"  verticalAlign="top" horizontalAlign="left">
								<mx:Button visible="false" />
							</mx:HBox>
							<mx:HBox width="100%"  verticalAlign="top" horizontalAlign="left">
								<mx:Button label="Submit" id="submitButton" enabled="true" icon="@Embed('../assets/tick.png')" click="validateAndSubmitRequest()"  visible="true"/>
							</mx:HBox>
							<mx:HBox width="100%" horizontalAlign="left" verticalAlign="top" borderStyle="none"  paddingTop="0" paddingRight="2" paddingLeft="2">
								<mx:Button label="Request form" click="showPrintableRequestForm()" icon="@Embed('../assets/page.png')"/>
								<mx:HBox width="100%" >
									<mx:Text width="100%" color="#0000ff" condenseWhite="true" letterSpacing=".1" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" leading="0" height="28">
									</mx:Text>
									
								</mx:HBox>
							</mx:HBox>
					    	
				</mx:ViewStack>
				<mx:HBox horizontalAlign="right">
					<mx:Button label="Cancel" id="cancelButton0" click="promptToCancelRequest()"/>
				</mx:HBox>
	 	    </mx:HBox>
	 	    <mx:HBox width="100%">
 				<mx:Button id="saveButton" label="Save" 
	            	icon="@Embed('../assets/action_save.gif')" click="validateAndSaveRequest()">
	            </mx:Button>
				<mx:Button label="Close" enabled="true" visible="true" click="PopUpManager.removePopUp(this)"/>								

	 	    </mx:HBox>
 			
 		</mx:ViewStack>
 	   	
 	   </mx:ControlBar>
	
    
</mx:Panel>
