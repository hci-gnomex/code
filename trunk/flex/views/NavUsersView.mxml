<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"     
	xmlns:UsersView="UsersView.*" label="Users And Groups" 
	width="100%" height="100%" xmlns:views="views.*" 
	 creationComplete="checkSecurity()"
	cornerRadius="8"  paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" shadowDirection="left" initialize="callInitialServices()">



     <mx:HTTPService 
    id="getAppUserList" 
    url="http://localhost/gnomex/GetAppUserList.gx"
    resultFormat="e4x"
    result="resultHandler(event)"
    destination="getAppUserList"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="getAppUser" 
    url="http://localhost/gnomex/GetAppUser.gx"
    destination="getAppUser"
    showBusyCursor="true"
    resultFormat="e4x"
    result="resultHandler(event)"
    useProxy="false">
    <mx:request>
            <idAppUser>{selectedUser.@idAppUser}</idAppUser>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="deleteAppUser" 
    url="http://localhost/gnomex/DeleteAppUser.gx"
    destination="deleteAppUser"
    showBusyCursor="true"
    resultFormat="e4x"
    result="onDeleteAppUser(event)"
    useProxy="false">
    <mx:request>
            <idAppUser>{selectedUser.@idAppUser}</idAppUser>
    </mx:request>
    </mx:HTTPService >
    
     <mx:HTTPService 
    id="getLabList" 
    url="http://localhost/gnomex/GetLabList.gx"
    showBusyCursor="true"
    resultFormat="e4x"
    result="resultHandler(event)"
    destination="getLabList"
    useProxy="false">
    <mx:request>
           <listKind>UnboundedLabList</listKind>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="getLab" 
    url="http://localhost/gnomex/GetLab.gx"
    destination="getLab"
    showBusyCursor="true"
    resultFormat="e4x"
    result="resultHandler(event)"
    useProxy="false">
    <mx:request>
            <idLab>{selectedLab.@idLab}</idLab>
    </mx:request>
    </mx:HTTPService >
  
    
    <mx:HTTPService 
    id="deleteLab" 
    url="http://localhost/gnomex/DeleteLab.gx"
    destination="deleteLab"
    showBusyCursor="true"
    resultFormat="e4x"
    result="onDeleteLab(event)"
    useProxy="false">
    <mx:request>
            <idLab>{selectedLab.@idLab}</idLab>
    </mx:request>
    </mx:HTTPService >


    <mx:XMLListCollection id="appUsers" source="{getAppUserList.lastResult..AppUser}" filterFunction="filterUser"/>
    <mx:XMLListCollection id="labs" source="{getLabList.lastResult..Lab}" filterFunction="filterLab"/>
    
    <mx:XMLListCollection id="membershipLabs" source="{getAppUser.lastResult.AppUser.(@idAppUser = selectedUser.@idAppUser).labs.Lab}"/>
    <mx:XMLListCollection id="collaboratingLabs" source="{getAppUser.lastResult.AppUser.(@idAppUser = selectedUser.@idAppUser).collaboratingLabs.Lab}"/>
    <mx:XMLListCollection id="managingLabs" source="{getAppUser.lastResult.AppUser.(@idAppUser = selectedUser.@idAppUser).managingLabs.Lab}"/>
    	

    <mx:Script>
        <![CDATA[

          import mx.rpc.events.ResultEvent; 
		  import mx.controls.Alert;
		  import mx.events.CloseEvent;

          [Bindable]
          public var selectedUser:Object;
          [Bindable]
          public var selectedLab:Object;
          [Bindable]
          public var fullUser:Object;
          [Bindable]
          public var fullLab:Object;
          [Bindable]
          public var filteredAppGroupXML:XMLList;
          

		 private function checkSecurity():void {
 			if (parentApplication.hasPermission("canAdministerUsers")) {
 				navStack.selectedIndex = 0;
 				detailViews.selectedChild = this.userEmptyView;
			} else {
				navStack.selectedIndex = 1;
				detailViews.selectedChild = this.groupEmptyView;
			}
		 }
        
          private function userRowSelected():void 
           {
           	this.selectedUser = usersGrid.selectedItem;
            callGetAppUser();
 
          }
          
          private function labRowSelected():void 
           {
           	this.selectedLab = labsGrid.selectedItem;
           	callGetLab();
            detailViews.selectedChild = this.groupDetailView;
          }

          private function manageLabRowSelected():void 
           {
           	this.selectedLab = manageLabsGrid.selectedItem;
           	callGetLab();
            detailViews.selectedChild = this.groupManageView;
          }
          
          public function prepareToAddUser():void 
           {
           	this.selectedUser = null;
           	this.fullUser = null;
            detailViews.selectedChild = this.userDetailView;
          }
          public function prepareToAddGroup():void 
           {
           	this.selectedLab = null;
           	this.fullLab = null;
            detailViews.selectedChild = this.groupDetailView;
          }
          private function callInitialServices():void
          {
          	callGetAppUserList();
          	callGetLabList();
          }
          
          public function refreshAppUserList():void 
           {
          	callGetAppUserList();
          	appUsers.refresh()
          }
          
          public function refreshGroupList():void 
           {
          	callGetLabList();
          	labs.refresh();
          }
          
          private function callGetAppUser():void 
           {
          	var call:Object = getAppUser.send();
          	call.marker = "doneGetAppUser";
          }
          
          private function callGetAppUserList():void
          {
          	var call:Object = getAppUserList.send();
          	call.marker = "doneGetAppUserList";
          }
          
          public function callGetLabList():void
          {
          	var call:Object = getLabList.send();
          	call.marker = "doneGetLabList";
          }
          
          private function callGetLab():void
          {
          	var call:Object = getLab.send();
          	call.marker = "doneGetLab";
          }
          
		  public function promptToDeleteAppUser():void {
				Alert.show("Delete user " + selectedUser.@displayName + "?", 
							null, 
							(Alert.YES | Alert.NO), this, 
							onPromptToDeleteAppUser);
				
		  }
			
		  private function onPromptToDeleteAppUser(event:CloseEvent):void {
	            if (event.detail==Alert.YES) {
	            	callDeleteAppUser();
	            }
	      }

          
		  public function promptToDeleteGroup():void {
				Alert.show("Delete group " + selectedLab.@name + "?", 
							null, 
							(Alert.YES | Alert.NO), this, 
							onPromptToDeleteGroup);
				
		  }
			
		  private function onPromptToDeleteGroup(event:CloseEvent):void {
	            if (event.detail==Alert.YES) {
	            	callDeleteGroup();
	            }
	      }
          public function callDeleteAppUser():void
          {
          	var call:Object = deleteAppUser.send();
          }
          public function callDeleteGroup():void
          {
          	var call:Object = deleteLab.send();
          }
          
          


          private function filterUser(item:Object):Boolean {
                return item.@displayName.toString().match(new RegExp("^" + userSearchText.text + ".*", "i"));
          }          
          private function filterLab(item:Object):Boolean {
                return item.@name.toString().match(new RegExp("^" + labSearchText.text + ".*", "i"));
          }    
                     

          private function resultHandler(event:ResultEvent):void {
            var call:Object = event.token;
            if (call.marker == "doneGetAppUser") {
              fullUser = getAppUser.lastResult.AppUser.(@idAppUser = selectedUser.@idAppUser);
              userDetailView.isActive.selected =  fullUser.@isActive == 'Y' ? true : false;
              detailViews.selectedChild = this.userDetailView;
            } else if (call.marker == "doneGetAppUserList") {
              filteredAppGroupXML = new XMLList(getAppUserList.lastResult);
            } else if (call.marker == "doneGetLabList") {
            } if (call.marker == "doneGetLab") {
            	fullLab = getLab.lastResult.Lab.(@idLab = selectedLab.@idLab);
	            if (parentApplication.hasPermission("canAdministerUsers")) {
	            	detailViews.selectedChild = this.groupDetailView;
            	} else {
            		detailViews.selectedChild = this.groupManageView;	
            	}
            } 

          }
          
          private function onDeleteLab(event:ResultEvent):void {          	
          	if (deleteLab.lastResult.name() == "SUCCESS") {          		
              refreshGroupList();
              detailViews.selectedChild = this.groupEmptyView;              
            } else {
            	Alert.show("Delete group failed. " + deleteLab.lastResult..ACTMESSAGE.@TEXT);
            }
          }
          private function onDeleteAppUser(event:ResultEvent):void {          	
          	if (deleteAppUser.lastResult.name() == "SUCCESS") {          		
              refreshAppUserList();
              detailViews.selectedChild = this.userDetailView;              
            } else {
            	Alert.show("Delete user failed. " + deleteAppUser.lastResult..ACTMESSAGE.@TEXT);
            }
          }

           
         
        ]]>
    </mx:Script>

    
    

 <mx:HDividedBox height="100%" width="100%" paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0">    
	
    <mx:ViewStack id="navStack" width="250" height="100%">
	    <mx:TabNavigator id="navBar" height="100%" width="100%"  styleName="userTabNavigator" >
	      <mx:change>{navBar.selectedChild == usersView ? detailViews.selectedChild = userEmptyView : detailViews.selectedChild = groupEmptyView}</mx:change>
	      <mx:Canvas id="usersView" label="Users" height="100%" width="100%">
	        

	        <mx:VBox height="100%" paddingBottom="6" width="100%" 
	        	paddingLeft="6" paddingRight="6" paddingTop="0">
	       	      <mx:TextInput id="userSearchText" editable="true" 
	       	      	change="appUsers.refresh()" width="100%" toolTip="type user name here to find in list"/>
		    
	
	    	      <mx:DataGrid id="usersGrid" 
	    	      	visible="true" width="100%" editable="false" enabled="true" 
	    	      	dataProvider="{appUsers}" height="100%"  
	    	      	itemClick="userRowSelected()" showHeaders="false">
					<mx:columns>
								<mx:DataGridColumn headerText="Users" width="100" dataField="@displayName"/>			
				    </mx:columns>
	      	     </mx:DataGrid>
	      	     <mx:HBox>
		    	      <mx:Button id="addUserButton" click="prepareToAddUser()" icon="@Embed('../assets/user_add.png')" toolTip="Add user" label="New"/>
		    	      <mx:Button id="deleteUserButton" click="promptToDeleteAppUser()" icon="@Embed('../assets/user_delete.png')" toolTip="Delete user" label="Delete"/>
		    	      <mx:Button id="refreshButton0" click="refreshAppUserList()" icon="@Embed('../assets/action_refresh.gif')" toolTip="Refresh list"/>
	      	     	
	      	     </mx:HBox>
              	


    	    </mx:VBox>
    	    
	      </mx:Canvas>
	      
	      
	      <mx:Canvas id="groupsView" label="Groups" width="100%" height="100%" 
	      	>
	      
	        <mx:VBox height="100%" paddingLeft="6" paddingRight="6" paddingTop="0" paddingBottom="6" width="100%">
       	      <mx:TextInput id="labSearchText" editable="true" change="labs.refresh()" width="100%" toolTip="Type lab name here to locate in list."/>
	    
	         
    	      <mx:DataGrid id="labsGrid" visible="true" width="100%" editable="false" enabled="true" dataProvider="{labs}" height="100%"  top="40" left="20"  right="20" itemClick="labRowSelected()" showHeaders="false">
				<mx:columns>
							<mx:DataGridColumn headerText="Groups" width="100" dataField="@name"/>
						
			    </mx:columns>
      	     </mx:DataGrid>
      	     <mx:HBox>
	    	      <mx:Button id="addGroupButton" icon="@Embed('../assets/group_add.png')" toolTip="Add group" label="New" click="prepareToAddGroup()"/>
	    	      <mx:Button id="deleteGroupButton"  icon="@Embed('../assets/group_delete.png')" toolTip="Delete group" label="Delete" click="promptToDeleteGroup()"/>
	    	      <mx:Button id="refreshButton1"  click="refreshGroupList()" icon="@Embed('../assets/action_refresh.gif')" toolTip="Refresh list"/>
      	     	
      	     </mx:HBox>
    	    </mx:VBox>

	      </mx:Canvas>
	      
	    </mx:TabNavigator>

		<mx:Panel title="Manage Groups">
			<mx:DataGrid id="manageLabsGrid" visible="true" width="100%" editable="false" enabled="true" dataProvider="{parentApplication.createSecurityAdvisor.lastResult.groupsToManage.Lab}" height="100%" showHeaders="false" itemClick="manageLabRowSelected()">
			<mx:columns>
						<mx:DataGridColumn headerText="Groups" width="100" dataField="@name"/>
					
			   </mx:columns>
			 </mx:DataGrid>
		</mx:Panel>
		
			
 	</mx:ViewStack>
	
			
	
	    
    <mx:ViewStack id="detailViews" width="100%" height="100%" creationPolicy="all">
            <mx:Panel id="userEmptyView" title="Users"/>
            
		    <views:UserDetailView id="userDetailView" height="100%">	
	        </views:UserDetailView>
	        
	        <mx:Panel id="groupEmptyView" title="Groups"/>
            
		    <views:GroupDetailView id="groupDetailView" height="100%">	
	        </views:GroupDetailView>

		    <views:GroupManageView id="groupManageView" height="100%">	
	        </views:GroupManageView>
   </mx:ViewStack>
	
    
</mx:HDividedBox>

</mx:Canvas>
