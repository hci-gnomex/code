<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:views="views.*" label="Hybs" width="100%" height="100%" enabled="false" >
<mx:Script>
	<![CDATA[ 
		import mx.events.CloseEvent;
		import mx.controls.Alert;
		import mx.events.DragEvent;
		import mx.managers.DragManager;
        import mx.core.DragSource;
        import mx.collections.XMLListCollection;

		[Bindable]
		public var slideDesigns:XMLListCollection = new XMLListCollection();
		
		
       	private function getChannelCountLabelFunction(item:Object,col:int):String
        {
        	var channel1Count:int = 0;
        	var channel2Count:int = 0;
        	if (parentDocument == null) {
        		return "";
        	}
        	if (parentDocument.hybs!= null) {
        		for each(var hyb:Object in parentDocument.hybs) {
        			if (hyb.@idSampleChannel1 == item.@idSample) {
        				channel1Count++;
        			}
        			if (hyb.@idSampleChannel2 == item.@idSample) {
        				channel2Count++;
        			}
        		}
        	} 
			item.@channel1Count = channel1Count;
			item.@channel2Count = channel2Count;
			return "";
        }
        
 
		private function addHyb():void {
			var defaultSlideDesign:Object = parentDocument.hybSetupView.getDefaultSlideDesign();
			var idSlideDesign:String = '';
			if (defaultSlideDesign != null) {
				idSlideDesign = defaultSlideDesign.@idSlideDesign;
			}
			
			
			var emptyNode:XML = new XML("<Hybridization " +
			    " idHybridization='" + "Hyb" + parentDocument.hybs.length + "'" +
			    " canChangeSampleDesignations='Y'" +
			    " canChangeSlideSource='Y'" +
			    " canChangeSlideDesign='Y'" +
			    " notes='' " + 
				" idSlideDesign='" + idSlideDesign + "'" +
				" codeSlideSource='" + parentDocument.hybSetupView.getCheckedCodeSlideSource() + "'" +
				" idSampleChannel1='0'" +
				" idSampleChannel2='0'" +
				"/>");
			
			parentDocument.hybs.addItem(emptyNode);
	        parentDocument.hybSetupView.assignSlideNumbers();	
		}
        
		private function deleteHyb():void {
			if (hybsGrid.selectedItems.length > 0) {
				for each(var hyb:Object in hybsGrid.selectedItems) {					
					if (hyb.@idHybridization.indexOf("Hyb") < 0) {
						Alert.show("Existing hyb " + hyb.@number + " cannot be deleted from the experiment.");
						continue;
					}		
					parentDocument.hybs.removeItemAt(parentDocument.hybs.getItemIndex(hyb));
				}
			}
	        parentDocument.hybSetupView.assignSlideNumbers();	
		}
		
		private function copyHyb():void {
			if (hybsGrid.selectedIndex != -1) {
				for each(var i:int in hybsGrid.selectedIndices) {					
					var hybToCopy:Object = parentDocument.hybs[i];
					
					var emptyNode:XML = new XML("<Hybridization " +
    			    " idHybridization='" + "Hyb" + parentDocument.hybs.length + "'" +
					" notes='" + hybToCopy.@notes + "'" + 
					" idSampleChannel1='" + hybToCopy.@idSampleChannel1 + "'" +
					" idSampleChannel2='" + hybToCopy.@idSampleChannel2 + "'" +	
					" codeSlideSource='" + hybToCopy.@codeSlideSource + "'" +			
					" idSlideDesign='" + hybToCopy.@idSlideDesign + "'" +			
					"/>");
			
					parentDocument.hybs.addItem(emptyNode);
					
				}
			}
	        parentDocument.hybSetupView.assignSlideNumbers();	
		}
		public function propagateSlideSourceToHybsSameSlide(theHyb:Object):void {
			for each (var hyb:Object in parentDocument.hybs) {
				if (theHyb.@slideNumber == hyb.@slideNumber) {
					hyb.@codeSlideSource = theHyb.@codeSlideSource;
				}
			}
			
		}
		
		
		public function promptToClearAllHybs():void {
			Alert.show("Remove all hybs currently showing in list?",
						null, 
						(Alert.YES | Alert.NO), this, 
						onPromptToClearAllHybs);
			
		}
		
		private function onPromptToClearAllHybs(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	parentDocument.hybs.removeAll();
            	checkHybsCompleteness();
            }
        }
        public function initializeHybsGrid():void {
        	if (parentDocument.requestToClone != null) {
        		return;
        	}
        	
        	if (parentDocument.hybSetupView.numberOfHybs.text == null || 
        	parentDocument.hybSetupView.numberOfHybs.text == "0" || 
        	parentDocument.hybSetupView.numberOfHybs.text == '' ||
        	!parentDocument.hybSetupView.validNumberOfHybs) {
        		return;
        	}
        	if (parentDocument.hybSetupView.slideProductCombo.selectedItem == null || parentDocument.hybSetupView.slideProductCombo.selectedItem.@value == '') {
        		return;
        	}
        	if (parentDocument.hybSetupView.getCheckedCodeSlideSource() == '') {
        		return;
        	}
        	
        	
    		var numberOfHybsToAdd:Number = new Number(parentDocument.hybSetupView.numberOfHybs.text);
    		if(parentDocument.hybs.length <= numberOfHybsToAdd) {
    			numberOfHybsToAdd = numberOfHybsToAdd - parentDocument.hybs.length;
    		} else {
    			numberOfHybsToAdd = 0;
    		}
    		for(var x:int = 0; x < numberOfHybsToAdd; x++) {
    			addHyb();
    		}
    		
    		this.propagateHybChannel1Samples();
        }
        
 		
		private function propagateHybChannel1Samples():void {
			var requestCategory:Object = parentDocument.setupView.getRequestCategory();
			if (requestCategory.@numberOfChannels == "1") {
				var count:int = 0;
				for each(var sample:Object in parentDocument.samples) {
					if (parentDocument.hybs.length == count) {
						break;
					}
					var hyb:Object = parentDocument.hybs.getItemAt(count);
					hyb.@idSampleChannel1 = sample.@idSample;
					count++;
				}
			}
			
		}
		       
        public function checkHybsCompleteness():void {
        	if (parentDocument == null) {
        		return;
        	}
        	if (parentDocument.request != null && parentDocument.request.codeRequestCategory == "QC") {
        		return;
        	}else if (parentDocument.setupView.requestTypeGroup.selectedValue == "QC") {
        		return;
        	}
        	
        	var completeCount:int = 0;
        	for each(var hyb:Object in parentDocument.hybs) {
        		if (hyb.@idSampleChannel1 != null && hyb.@idSampleChannel1 != '0'  &&
        			hyb.@idSlideDesign != null && hyb.@idSlideDesign != '' &&
        			hyb.@codeSlideSource != null && hyb.@codeSlideSource != '') {
        			completeCount++;       				
        		}
        	}
        	if (parentDocument.hybs.length > 0 && completeCount == parentDocument.hybs.length) {
        		if (parentDocument.theTab.contains(parentDocument.confirmView)){
	        		parentDocument.confirmView.enabled = true;
        		}
        		
        	} else if (parentDocument.request.@idRequest != '0') {
        		if (parentDocument.theTab.contains(parentDocument.confirmView)) {
 		       		parentDocument.confirmView.enabled = true;        			
        		}
        	} else {
        		if (parentDocument.theTab.contains(parentDocument.confirmView)) {
	        		parentDocument.confirmView.enabled = false;        			
        		}
        	}
        	parentDocument.enableNextButtons();
        
        }
        
        private function onDragDrop(event:DragEvent) : void
		{
		   var isChannel1Drop:Boolean = false;
		   var isChannel2Drop:Boolean = false;
			
	       var ds:DragSource = event.dragSource;
	       var colXStart:int = 0;
	       var colXEnd:int = 0;
	       for each(var col:DataGridColumn in hybsGrid.columns) {
	       		if (!col.visible) {
	       			continue;
	       		}
	       		colXEnd += col.width;
	       		
	       		
	       		
	       		if (event.localX >= colXStart && event.localX <= colXEnd) {
	       			if (col.headerText == "Cy3 Sample (green)") {
	       				isChannel1Drop = true;
	       				break;
	       			} else if (col.headerText == "Cy5 Sample (red)") {
	       				isChannel2Drop = true;
	       				break;
	       			}
	       		}
	       		colXStart = colXEnd;
	       }
	      

		   // The user didn't drag over cy3 or cy5 sample column, so disregard 
		   // operation.	       
	       if (!isChannel1Drop && !isChannel2Drop) {
	       		Alert.show("Please drag sample onto either Cy3 or Cy5 cell of hybs grid");
		       	event.preventDefault();
		       	event.target.hideDropFeedback(event);
		       	DragManager.showFeedback(DragManager.NONE);
		       	checkHybsCompleteness();
		       	return;
	       }
	       
	       // retrieve the data associated with the "items" format. This will be the data that
	       // the dragInitiator has copied into the DragSource.
	       var items:Array = ds.dataForFormat("items") as Array;
	
	       // determine where in the grid the drop occurs and select that node by the index; followed by 
	       // retrieving the node itself. 
	       var r:int = hybsGrid.calculateDropIndex(event);
	       hybsGrid.selectedIndex = r;
	       var node:XML = hybsGrid.selectedItem as XML;
	       var p:*;
	
	
	       if (node.name()  == "Hybridization") {
	       		p = node;
	       } else {
	       		//ignore drop operations not on existing hyb row
	       }
	       
	        
	       // Disallow operation if samples cannot be changed on hyb
	       if (hybsGrid.selectedItem.@canChangeSampleDesignations == "Y" ||
	           parentApplication.hasPermission("canWriteAnyObject")) {
	           	
	       } else {
	       	  	Alert.show("Cy3 and Cy5 samples cannot be changed.");
		       	event.preventDefault();
		       	event.target.hideDropFeedback(event);
		       	DragManager.showFeedback(DragManager.NONE);
				return;	       	  	
	       }
	
	       // taking all of the items in the DragSouce, update the appropriate
	       // sample id on the hyb node.
	       if (p != null) {
		       for(var i:Number=0; i < items.length; i++) {
		       	if (items[i].name() == "Sample") {
		       		if (isChannel1Drop) {
			       		hybsGrid.selectedItem.@idSampleChannel1 = items[i].@idSample;	       			
		       		} else if (isChannel2Drop) {
			       		hybsGrid.selectedItem.@idSampleChannel2 = items[i].@idSample;	       			
		       			
		       		}
		       	} 
		       }
	       	
	       }	
	       
	       this.sampleDragGrid.invalidateDisplayList();
	       this.sampleDragGrid.invalidateList();
	       
	       // Don't allow flex to do any default moves to the data.  
	       // We handle it in the code above.
	       event.preventDefault();
	       
	       checkHybsCompleteness();
		}
		private function showCy3LabelCols(isVisible:Boolean):void {
			labelCol1.visible = isVisible;
			labelCol2.visible = isVisible;
			labelCol3.visible = isVisible;
			labelCol4.visible = isVisible;
			labelCol5.visible = isVisible;
		}
			
		private function showCy5LabelCols(isVisible:Boolean):void {
			labelCol6.visible = isVisible;
			labelCol7.visible = isVisible;
			labelCol8.visible = isVisible;
			labelCol9.visible = isVisible;
			labelCol10.visible = isVisible;
		}

		
	]]>
</mx:Script>
    <mx:VBox width="100%" height="100%" verticalGap="0">
	    <mx:HDividedBox height="100%" width="100%">
	        <mx:VBox  height="100%" verticalGap="4"  borderStyle="outset">
	            <mx:Label text="Samples"/>
	        	<mx:DataGrid
	        		 height="100%" width="100%" 
	        		 dataProvider="{parentDocument.samples}" labelField="@name" 
	        		 dragEnabled="true" id="sampleDragGrid" selectionColor="#FFFFB9" rollOverColor="#C0C0C0" showHeaders="false">
					<mx:columns>
						<mx:DataGridColumn headerText = "Samples" width="90" dataField="@name"/>
			            <mx:DataGridColumn width="30"  labelFunction="getChannelCountLabelFunction" headerText="">
			                <mx:itemRenderer>
			                    <mx:Component >
			                        <mx:HBox  horizontalGap="0" >
			                          <mx:Image source="{data.@channel1Count > 0 ? parentApplication.iconGreenBullet : ''}">
			                    	 </mx:Image> 
			                          <mx:Image source="{data.@channel2Count > 0 ? parentApplication.iconRedBullet : ''}">
			                    	 </mx:Image> 
			                        </mx:HBox>
			                    </mx:Component>
			                </mx:itemRenderer>
			            </mx:DataGridColumn> 
					</mx:columns>
								        				        		
	         	</mx:DataGrid>
	        </mx:VBox>
			<mx:VBox  id="hybsContainer" width="100%" height="100%" borderStyle="outset">
			   <mx:Label text="Hybridizations    (Drag sample onto Cy3 or Cy5 Sample cell)"></mx:Label>
					<mx:HBox width="100%" verticalAlign="middle" paddingLeft="4" paddingTop="4">
						<mx:HBox id="buttonContainer">
							<mx:Button label="Add" click="addHyb();checkHybsCompleteness()" icon="@Embed('../assets/table_row_insert.png')" id="addHybButton"/>
							<mx:Button label="Copy" click="copyHyb();checkHybsCompleteness()" icon="@Embed('../assets/table_multiple.png')" id="copyHybButton"/>
							<mx:Button label="Delete" click="deleteHyb();checkHybsCompleteness()" icon="@Embed('../assets/table_row_delete.png')" id="deleteHybButton"/>
							<mx:Button label="Clear all" click="promptToClearAllHybs()" icon="@Embed('../assets/folder_delete.png')" id="clearHybsButton"/>
						</mx:HBox>
						
						<mx:HBox horizontalAlign="right" width="100%">
							<mx:HBox width="100%" horizontalGap="0"  horizontalAlign="right" label="Show Cy5 Labeling data" paddingBottom="2" verticalAlign="middle" paddingLeft="8" paddingTop="2" id="workflowCheckBoxContainer">
								<mx:Label text="Show other columns:" id="showWorkflowLabel"/>
								<mx:CheckBox id="showCy3LabelingFieldsCheckBox" label="Cy3 Labeling" click="showCy3LabelCols(showCy3LabelingFieldsCheckBox.selected)" paddingLeft="0" paddingBottom="0" paddingRight="0"/>
								<mx:CheckBox id="showCy5LabelingFieldsCheckBox" label="Cy5 Labeling" click="showCy5LabelCols(showCy5LabelingFieldsCheckBox.selected)" paddingLeft="0" paddingRight="0"/>
								<mx:CheckBox id="showHybFieldsCheckBox" label="Hyb" paddingLeft="0" paddingRight="0"/>
								<mx:CheckBox id="showExtFieldsCheckBox" label="Scan/FE data" paddingLeft="0" paddingRight="0"/>
							</mx:HBox>
						</mx:HBox>
							
					</mx:HBox>
				<views:DataGridAlternatingGroup width="100%" height="100%" id="hybsGrid"  editable="true" dataProvider="{parentDocument.hybs}" allowMultipleSelection="true" dropEnabled="true" dragDrop="onDragDrop(event)" itemFocusOut="checkHybsCompleteness()" rollOverColor="#C0C0C0" selectionColor="#FFFFB9" horizontalScrollPolicy="auto">
					<views:columns>
					    <mx:DataGridColumn id="hybRowNumberCol" editable="false" visible="{currentState == 'HybsState'}" headerText=""   resizable="false" width="25" labelFunction="parentDocument.getHybsGridRowNumber"/>
  					    <mx:DataGridColumn id="hybNumberCol"  headerText="ID" visible="{currentState == 'HybsAdminState' || currentState == 'HybsEditState'}" width="60"   dataField="@number"  editable="false"/>
			            <mx:DataGridColumn width="50" id="slideNumberColumn" headerText="Slide">
			                <mx:itemRenderer>
			                    <mx:Component >
			                        <mx:HBox  horizontalGap="0" >
			                          <mx:Image id="experimentImage"  source="{data.@showSlideIcon == 'Y' ? parentApplication.iconExperiment : ''}">
			                    	 </mx:Image> 
			                          <mx:Label  text="{data.@showSlideIcon == 'Y' ? data.@slideNumber : ''}">
			                    	 </mx:Label>  
			                        </mx:HBox>
			                    </mx:Component>
			                </mx:itemRenderer>
			            </mx:DataGridColumn> 
					    <mx:DataGridColumn headerText="Cy3 Sample (green)"  width="122" 
					    	labelFunction="parentDocument.getSampleChannel1Name" 
                            editorDataField="text" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.TextInputSampleChannel1" itemRenderer="views.renderers.LabelSampleChannel1" />								    	
  					    <mx:DataGridColumn headerText="ID" visible="{currentState == 'HybsAdminState' || currentState == 'HybsEditState'}" width="60"  labelFunction="parentDocument.getSampleChannel1Number" editable="false"/>
					    <mx:DataGridColumn id="channel2SampleColumn" headerText="Cy5 Sample (red)"  width="122" 
					    	labelFunction="parentDocument.getSampleChannel2Name" 
                            editorDataField="text" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.TextInputSampleChannel2" itemRenderer="mx.controls.Label" />								    	
  					    <mx:DataGridColumn headerText="ID" visible="{currentState == 'HybsAdminState' || currentState == 'HybsEditState'}" width="60"  labelFunction="parentDocument.getSampleChannel2Number" editable="false"/>
                            
                            
					<mx:DataGridColumn id="labelCol1"  visible="false"  headerText="Channel1 Labeling protocol"  labelFunction="parentApplication.lookupLabelingProtocolChannel1" width="80" dataField="@idLabelingProtocolChannel1"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.ComboBoxLabelingProtocolChannel1" itemRenderer="mx.controls.Label" >
						<mx:headerRenderer >
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy3 Label"/>
							    <mx:Label text="Protocol"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol2"  visible="false" headerText="Channel1 Labeling yield" width="80" dataField="@labelingYieldChannel1">
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy3 Label"/>
							    <mx:Label text="Yield"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol3"  visible="false" headerText="Channel1 Labeling Reaction size" width="80" dataField="@codeLabelingReactionSizeChannel1"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.ComboBoxLabelingReactionSizeChannel1" itemRenderer="mx.controls.Label" >
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy3 Label"/>
							    <mx:Label text="Reaction size"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol4"  visible="false" headerText="Channel1 Labeling # Reactions" width="80" dataField="@numberOfReactionsChannel1">
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy3 Label"/>
							    <mx:Label text="# reactions"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn  id="labelCol5"   visible="false" headerText="Channel1 Labeling Status" width="80" dataField="@labelingStatusChannel1"
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.ComboBoxLabelingStatusChannel1" itemRenderer="mx.controls.Label" >
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy3 Label"/>
							    <mx:Label text="Status"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol6"   visible="false" headerText="Channel2 Labeling protocol"  labelFunction="parentApplication.lookupLabelingProtocolChannel2" width="80" dataField="@idLabelingProtocolChannel2"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.ComboBoxLabelingProtocolChannel2" itemRenderer="mx.controls.Label" >
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy5 Label"/>
							    <mx:Label text="Protocol"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol7"   visible="false" headerText="Channel2 Labeling yield" width="80" dataField="@labelingYieldChannel2">
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy5 Label"/>
							    <mx:Label text="Yield"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol8"  visible="false" headerText="Channel2 Labeling Reaction size" width="80" dataField="@codeLabelingReactionSizeChannel2"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.ComboBoxLabelingReactionSizeChannel2" itemRenderer="mx.controls.Label" >
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy5 Label"/>
							    <mx:Label text="Reaction size"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol9"  visible="false"  headerText="Channel2 Labeling # Reactions" width="80" dataField="@numberOfReactionsChannel2">
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy5 Label"/>
							    <mx:Label text="# reactions"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol10"   visible="false" headerText="Channel2 Labeling Status" width="80" dataField="@labelingStatusChannel2"
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.ComboBoxLabelingStatusChannel2" itemRenderer="mx.controls.Label" >
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy5 Label"/>
							    <mx:Label text="Status"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>



					<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Hyb Slide barcode" width="70" dataField="@slideBarcode"/>
					<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Coordinate" width="70" dataField="@arrayCoordinateName"/>
					<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Hyb Protocol" width="70" labelFunction="parentApplication.lookupHybProtocol"  dataField="@idHybProtocol"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.ComboBoxHybProtocolForEdit" itemRenderer="mx.controls.Label" />					
					<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Hyb Status" width="90" dataField="@hybStatus"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.ComboBoxHybStatus" itemRenderer="mx.controls.Label" />
					


					<mx:DataGridColumn visible="{showExtFieldsCheckBox.selected}" headerText="Scan Protocol" width="70" labelFunction="parentApplication.lookupScanProtocol" dataField="@idScanProtocol"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.ComboBoxScanProtocolForEdit" itemRenderer="mx.controls.Label" />
					<mx:DataGridColumn visible="{showExtFieldsCheckBox.selected}" headerText="F/E Protocol" width="70" labelFunction="parentApplication.lookupFeatureExtractionProtocol" dataField="@idFeatureExtractionProtocol"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.ComboBoxFeatureExtractionProtocolForEdit" itemRenderer="mx.controls.Label" />
					<mx:DataGridColumn visible="{showExtFieldsCheckBox.selected}" headerText="Ext Status" width="90" dataField="@extractionStatus"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemEditor="views.renderers.ComboBoxExtractionStatus" itemRenderer="mx.controls.Label" />
					


                            
                            
                            
                            
                            
			             <mx:DataGridColumn id="slideDesignColumn" visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showHybFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"  headerText="Slide"  width="250" dataField="@idSlideDesign" 						             						             
			                editorDataField="value" sortable="false" labelFunction="parentApplication.lookupSlideDesignName" editable="true" rendererIsEditor="false" itemRenderer="views.renderers.LabelSlideDesign" itemEditor="views.renderers.ComboBoxSlideDesign" />
			             <mx:DataGridColumn visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showHybFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"  headerText="Slide Source"  width="78" dataField="@codeSlideSource" 
			                editorDataField="value" sortable="false" editable="true" labelFunction="parentApplication.lookupSlideSource" rendererIsEditor="false" itemRenderer="views.renderers.LabelSlideSource" itemEditor="views.renderers.ComboBoxSlideSource" />
						<mx:DataGridColumn headerText="Notes" visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showHybFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"  width="100" dataField="@notes"/>
					</views:columns>
				</views:DataGridAlternatingGroup>
				
			</mx:VBox>
	    	
	    </mx:HDividedBox>

    </mx:VBox>
    
    <mx:states>
    	<mx:State name="HybsState">
    	    <mx:RemoveChild target="{workflowCheckBoxContainer}"/>
    	</mx:State>
    	<mx:State name="HybsEditState">
    		<mx:RemoveChild target="{buttonContainer}"/>
    		<mx:SetStyle target="{workflowCheckBoxContainer}" name="horizontalAlign" value="right"/>
    	</mx:State>
    	<mx:State name="HybsAdminState">
    		<mx:SetStyle target="{workflowCheckBoxContainer}" name="horizontalAlign" value="right"/>
    		<mx:RemoveChild target="{addHybButton}"/>
    		<mx:RemoveChild target="{clearHybsButton}"/>
    	</mx:State>
    	
    </mx:states>

</mx:Canvas>
