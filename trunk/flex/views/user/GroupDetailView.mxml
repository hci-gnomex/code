<?xml version="1.0" encoding="utf-8"?>
<util:PanelBox  xmlns:mx="http://www.adobe.com/2006/mxml"  
     xmlns:util="views.util.*" 
	 height="100%" width="100%" label="Group Detail" 
	 >
<mx:Label id="titleLabel" styleName="titleLabel" text="{parentDocument.fullLab.@name}" />
	  
  <mx:HTTPService   
    id="saveGroup" 
    url="SaveLab.gx"
    destination="saveGroup" 
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveGroup(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to save group', event)"
    method="POST"
    useProxy="false">
    <mx:request>    
    </mx:request>
  </mx:HTTPService>
    
    <mx:HTTPService 
    id="getLab" 
    url="GetLab.gx"
    destination="getLab"
    showBusyCursor="true"
    resultFormat="e4x"
    result="onGetLab(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to get group', event)"
    useProxy="false">
    </mx:HTTPService >
  
   <mx:HTTPService 
    id="generateUserAccountEmail" 
    url="GenerateUserAccountEmail.gx"
    showBusyCursor="true"
    resultFormat="e4x"
    result="onGenerateUserAccountEmail(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to generate user account email', event)"
    destination="generateUserAccountEmail"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
	  
<mx:Script>
	<![CDATA[
		import mx.events.CollectionEvent;
		import hci.flex.dictionary.DictionaryEditor; 
		import mx.rpc.events.ResultEvent;
		import mx.controls.Alert;
		import mx.rpc.events.FaultEvent;
		import mx.events.CloseEvent;
		import mx.managers.PopUpManager;
		import hci.flex.dictionary.DictionaryEvent;
		import hci.flex.controls.ComboBox;
		import hci.flex.controls.DropdownLabel;
		import hci.flex.controls.CheckBox;
		import mx.events.DataGridEvent;
		import mx.events.CollectionEventKind;
        import mx.events.PropertyChangeEvent;


		
		private var savedIdLab:Object = '';
		private var dictionaryEditor:DictionaryEditor;
		
		public function initializeData():void {
			// Get the list of all users
          	parentApplication.navUsersView.getAppUserList.send();
          	
			this.contactStateCombo.dataProvider = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.State');
			
		}
		
		public function promptToSaveDirty():void {
			if (dirty.isDirty()) {
				Alert.show("Your changes to group " + parentDocument.fullLab.@name + " have not been saved.  Save now?", 
							null, 
							(Alert.YES | Alert.NO), this, 
							onPromptToSaveDirty);
				
			} 
		}
	
			
		private function onPromptToSaveDirty(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	save();
            } else {
				dirty.resetDirty();
		    }
	    }
		
		private function addBillingAccount():void {
			dirty.setDirty();
			var node:XML = new XML("<BillingAccount " +
			    " idBillingAccount='" + "BillingAccount" + billingAccounts.length + "'" +
			    " accountName='" + accountName.text + "'" +
 			    " expirationDateOther=''" + 
			    " accountNumberBus=''" + 
			    " accountNumberOrg=''" + 
			    " accountNumberFund=''" + 
			    " accountNumberActivity=''" + 
			    " accountNumberProject=''" +  
			    " accountNumberAccount=''" + 
			    " accountNumberAu=''" + 
			    " accountNumberYear=''" +  
			    " isDirty='Y'" +
			    " isPO='N'" +
			    " isSelectedPeerReviewedFunding='false'" + 
				"/>");
			billingAccounts.addItem(node);
			
			accountName.text = '';


			
		}
		
		private function removeBillingAccount():void {
			dirty.setDirty();
			if (billingAccountGrid.selectedIndex != -1) {
				billingAccounts.removeItemAt(billingAccountGrid.selectedIndex);
			}
		}
		
		private function addMember():void {
			dirty.setDirty();
			var node:XML = new XML("<AppUser " +
			    " idAppUser='" + memberCombo.selectedItem.@idAppUser + "'" +
			    " displayName='" + memberCombo.selectedItem.@displayName + "'" +
				"/>");
			members.addItem(node);
		}
		
		private function removeMember():void {
			dirty.setDirty();
			if (membersGrid.selectedIndex != -1) {
				members.removeItemAt(membersGrid.selectedIndex);
			}
		}
		private function addCollaborator():void {
			dirty.setDirty();
			var node:XML = new XML("<AppUser " +
			    " idAppUser='" + collaboratorCombo.selectedItem.@idAppUser + "'" +
			    " displayName='" + collaboratorCombo.selectedItem.@displayName + "'" +
				"/>");
			collaborators.addItem(node);
		}
		
		private function removeCollaborator():void {
			dirty.setDirty();
			if (collaboratorsGrid.selectedIndex != -1) {
				collaborators.removeItemAt(collaboratorsGrid.selectedIndex);
			}
		}
		private function addManager():void {
			dirty.setDirty();
			var node:XML = new XML("<AppUser " +
			    " idAppUser='" + managerCombo.selectedItem.@idAppUser + "'" +
			    " displayName='" + managerCombo.selectedItem.@displayName + "'" +
				"/>");
			managers.addItem(node);
		}
		
		private function removeManager():void {
			dirty.setDirty();
			if (managerCombo.selectedIndex != -1) {
				managers.removeItemAt(managersGrid.selectedIndex);
			}
		}
		
		private function getExpirationDateString(item:Object,col:int):String
        {
        	return item.@expirationDateOther.toString();
        }
        
        
        private function isChartFieldFilledIn(ba:Object):Boolean {
        	if (ba.@accountNumberBus != '' && 
        	    ba.@accountNumberBus != '' &&
				ba.@accountNumberOrg != '' &&
				ba.@accountNumberFund != '' &&
				(ba.@accountNumberActivity != '' || ba.@accountNumberProject != '') &&
				ba.@accountNumberAccount != '' &&
			    ba.@accountNumberAu != '' &&
				ba.@accountNumberYear != '') {
				return true;		
			} else {
				return false;
			}
        }
        
        private function isChartFieldBlank(ba:Object):Boolean {
        	if (ba.@accountNumberBus == '' && 
        	    ba.@accountNumberBus == '' &&
				ba.@accountNumberOrg == '' &&
				ba.@accountNumberFund == '' &&
				ba.@accountNumberActivity == '' && 
				ba.@accountNumberProject == '' &&
				ba.@accountNumberAccount == '' &&
			    ba.@accountNumberAu == '' &&
				ba.@accountNumberYear == '') {
				return true;		
			} else {
				return false;
			}
        }
        
        private function blankOutChartFields(ba:Object):void {
        	ba.@accountNumberBus = '';
        	ba.@accountNumberBus = '';
			ba.@accountNumberOrg = '';
			ba.@accountNumberFund = '';
			ba.@accountNumberActivity = ''; 
			ba.@accountNumberProject = '';
			ba.@accountNumberAccount = '';
			ba.@accountNumberAu = '';
			ba.@accountNumberYear = '';
        }
        
        private function validateAndSave():void {
        	
        	// Check for account chartfield numbers before saving
        	var warningMessage:String = "";
        	for each(var ba:Object in billingAccounts) {
        		// Only validate dirty billing accounts
        		if (ba.hasOwnProperty("@isDirty") && ba.@isDirty == 'Y') {
					if(ba.@isPO == "" || ba.@isPO == "N") {
						if (!this.isChartFieldFilledIn(ba)) {
							if (warningMessage != "") {
								warningMessage += "\n";
							}
							warningMessage += "All of the chart fields have not been filled in for account " + ba.@accountName + ".";
						}
					}else if(ba.@isPO == "Y") {
						if (!this.isChartFieldBlank(ba)) {
							if (warningMessage != "") {
								warningMessage += "\n";
							}
							warningMessage += "Chart fields will be blanked out for PO account " + ba.@accountName + ".";
						}
					}
        		}
			}	
			
			if (warningMessage == "") {
				save();
			} else {
				Alert.show(warningMessage + "\n\nDo you want to proceed with save?",
						   "Warning", 
						   (Alert.YES | Alert.NO), 
						   this,
						   onPromptToSave); 
			}
        }
        
        private function onPromptToSave(event:CloseEvent):void {
        	if (event.detail == Alert.YES) {
        		save();
        	}
        }
        
        private function save():void {
        	
        	// Blank out chartfields on PO accounts
        	for each(var ba:Object in billingAccounts) {
        		if (ba.hasOwnProperty("@isDirty") && ba.@isDirty == 'Y') {
	        		if(ba.@isPO == "Y") {
    	    			this.blankOutChartFields(ba);
        			}
        		}
        	}
        	
			var params:Object = new Object();
			
			if (parentDocument.fullLab != null) {
				params.idLab = parentDocument.fullLab.@idLab;			
			} else {
				params.idLab = '';
			}
			params.firstName =  this.groupFirstName.text;
			params.lastName =  this.groupLastName.text;
			params.department = this.department.text;
			params.contactName =  this.contactName.text;
			params.contactAddress = this.contactAddress.text;
			params.contactCity =  this.contactCity.text;
			params.contactCodeState =  this.contactStateCombo.selectedItem != null ? this.contactStateCombo.selectedItem.@value : "";
			params.contactZip = this.contactZip.text; 
			params.contactPhone = this.contactPhone.text;
			params.contactEmail = this.contactEmail.text;
			params.isCcsgMember = this.isCcsgMemberCheckBox.selected ? "Y" : "N";
			params.isActive = this.isActiveCheckBox.selected ? "Y" : "N";
			params.isExternalPricing = this.isExternalPricingButton.selected ? "Y" : "N"; 
			
			for each(var acct:Object in billingAccounts) {
				acct.@expirationDate = acct.@expirationDateOther;
			}
			
			params.accountsXMLString = "<billingAccounts>" + billingAccounts.toXMLString() + "</billingAccounts>";
			params.membersXMLString = "<members>" + members.toXMLString() + "</members>";
			params.collaboratorsXMLString = "<collaborators>" + collaborators.toXMLString() + "</collaborators>";
			params.managersXMLString = "<managers>" + managers.toXMLString() + "</managers>";

			saveGroup.send(params);		
			
		} 
		
		private function onSaveGroup(event:ResultEvent):void {
			if (saveGroup.lastResult.name() == "SUCCESS") {
				savedIdLab = saveGroup.lastResult.@idLab;

				var params:Object = new Object();
				params.idLab = savedIdLab;
	 			getLab.send(params);
	 			
				dirty.resetDirty();
			} else {
				Alert.show(saveGroup.lastResult..ACTMESSAGE.@TEXT);
			}
			
		}
 
        
        private function onGetLab(event:ResultEvent):void {
          parentDocument.fullLab = getLab.lastResult.Lab.(@idLab = savedIdLab);
          
          var itemToSelect:XML = new XML("<Lab id='" + savedIdLab + "'/>");
          parentApplication.navUsersView.itemToSelect = itemToSelect;
          
          parentApplication.navUsersView.refreshGroupList();
        }

          public function promptToVerifyUserAccounts():void {
          
          	Alert.show("GNomEx will send an email to " + parentDocument.fullLab.@firstName + " " + parentDocument.fullLab.@lastName  + " to verify the active user accounts." +
				            "\n\nDo you wish to continue?", 
							null, 
							(Alert.YES | Alert.NO), this, 
							onPromptToVerifyUserAccounts);
				
		  }
			
		  private function onPromptToVerifyUserAccounts(event:CloseEvent):void {
	            if (event.detail==Alert.YES) {
	            	var params:Object = new Object();
	            	params.idLab = parentDocument.fullLab.@idLab;
	            	generateUserAccountEmail.send(params);
	            }
	      }
         
         private function onGenerateUserAccountEmail(event:ResultEvent):void {
			if (generateUserAccountEmail.lastResult.name() == "SUCCESS") {          		
			  Alert.show("An email has been sent to " + parentDocument.fullLab.@firstName + " " + parentDocument.fullLab.@lastName + ".");         
            } else {
            	Alert.show("Generate user account email failed. " + generateUserAccountEmail.lastResult..ACTMESSAGE.@TEXT);
            }         
         }


        //
        // Edit state dictionary
        //
		private function editState():void {
			dictionaryEditor = DictionaryEditor(PopUpManager.createPopUp(parentApplication.navUsersView, DictionaryEditor, true));
			dictionaryEditor.addEventListener(DictionaryEvent.DICTIONARY_WINDOW_INITIALIZED,   
			                          onDictionaryStateInitialized);
			dictionaryEditor.addEventListener(DictionaryEvent.DICTIONARY_WINDOW_DICTIONARY_SELECTED, 
			                          onDictionaryStateSelected);			
			parentApplication.addEventListener(DictionaryEvent.DICTIONARY_LOADED,   
			                                   onDictionaryStateRefreshed);
			PopUpManager.centerPopUp(dictionaryEditor);
		}
       	private function onDictionaryStateInitialized(event:Event):void{
			dictionaryEditor.selectDictionary("hci.gnomex.model.State");
        }          
       	private function onDictionaryStateRefreshed(event:Event):void{
			contactStateCombo.dataProvider     = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.State');								
			contactStateCombo.selectedItem     = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.State', parentDocument.fullLab.@contactCodeState);				
        }	
       	private function onDictionaryStateSelected(event:Event):void{
       		if (this.contactStateCombo.selectedItem != null && this.contactStateCombo.selectedItem.@value != "") {
       			dictionaryEditor.selectDictionaryEntry(contactStateCombo.selectedItem);
       		}
        }
        private function checkPricingChange():void {
        	if(isExternalPricingButton.selected) {
        		if(parentDocument.fullLab.@isExternalPricing != 'Y') {
        			dirty.setDirty();
        		}
        	} else {
        		if(parentDocument.fullLab.@isExternalPricing == 'Y') {
        			dirty.setDirty();
        		}
        		
        	}
        		

        }
        
        public function setDirtyBillingAccount(billingAccount:Object):void {
        	billingAccount.@isDirty = 'Y';
        	dirty.setDirty();
        }
        
        private function verifyChartfieldEdit(event:DataGridEvent) : void {
        	// Mark that this billing account is dirty.  We will only warn about
        	// validation when the billing account has been changed.
        	setDirtyBillingAccount(billingAccounts.getItemAt(event.rowIndex));
        	
        	// PO checkbox, account name, and expiration data are always editable
			if (event.dataField == '@isPO' || event.dataField == '@accountName' || event.dataField == '@expirationDate') {
        		return;
        	}
        	
        	// Other fields are only editable on non-PO accounts.  
    		if(billingAccounts.getItemAt(event.rowIndex).@isPO == 'Y') {
        		event.preventDefault(); 
        	} 
        }

	]]>
</mx:Script>	  

	<mx:XMLListCollection id="billingAccounts" source="{parentDocument.fullLab.billingAccounts.BillingAccount}"/>
	<mx:XMLListCollection id="members" source="{parentDocument.fullLab.members.AppUser}"/>
	<mx:XMLListCollection id="collaborators" source="{parentDocument.fullLab.collaborators.AppUser}"/>
	<mx:XMLListCollection id="managers" source="{parentDocument.fullLab.managers.AppUser}"/>
	<mx:DateFormatter id="dateFormatter" formatString="MM/DD/YYYY"/>
	
	
	<mx:VBox  height="100%" width="100%" verticalGap="0" >
 
		
		<mx:TabNavigator width="100%" height="100%"  styleName="form" >
			<mx:VBox label="Group" width="100%" height="100%"  paddingTop="0">
				
				<mx:HBox   paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4"  horizontalGap="8" horizontalAlign="left" width="100%">
				   <mx:VBox   height="100%" verticalGap="8" width="100%">
					   	<mx:HBox verticalAlign="bottom" horizontalGap="10" width="100%">
							<mx:VBox  verticalGap="0">
								<mx:Label text="Investigator's Last Name (or lab name)"/>
								<mx:TextInput id="groupLastName" maxChars="200" editable="true" enabled="true" text="{parentDocument.fullLab.@lastName}" width="240" change="dirty.setDirty()"/>
							</mx:VBox>
							<mx:VBox  verticalGap="0">
								<mx:Label text="Investigator's First Name"/>
								<mx:TextInput id="groupFirstName" maxChars="200" editable="true" enabled="true" text="{parentDocument.fullLab.@firstName}" width="160" change="dirty.setDirty()"/>
							</mx:VBox>
							<mx:CheckBox id="isActiveCheckBox" selected="{parentDocument.fullLab.@isActive == 'Y' ? true : false}" label="Lab is Active" click="dirty.setDirty()"/>
							<mx:CheckBox id="isCcsgMemberCheckBox" selected="{parentDocument.fullLab.@isCcsgMember == 'Y' ? true : false}" label="CCSG Member?" click="dirty.setDirty()"/>
							<mx:RadioButtonGroup id="pricingModel"/>
					   	</mx:HBox>
					   	<mx:HBox width="100%" verticalAlign="bottom">
					   		<mx:VBox  verticalGap="0" width="100%">
					   		    <mx:HBox verticalGap="8">
						   			<mx:Label text="Email(s) " />
						   			<mx:Label text="(For multiple email addresses, place a comma between emails.)" fontStyle="italic"/>
					   		    </mx:HBox>
					   			<mx:TextInput id="contactEmail" text="{parentDocument.fullLab.@contactEmail}" width="100%" change="dirty.setDirty()"/>
					   		</mx:VBox>

					   	</mx:HBox>
					   	<mx:HBox width="100%" verticalAlign="bottom">
					   		<mx:VBox  verticalGap="0">
					   			<mx:Label text="Phone" />
					   			<mx:TextInput id="contactPhone" text="{parentDocument.fullLab.@contactPhone}" width="100" change="dirty.setDirty()"/>
					   		</mx:VBox>
					   		<mx:VBox  verticalGap="0"> 
					   			<mx:Label text="Department" />
					   			<mx:TextInput id="department" text="{parentDocument.fullLab.@department}" width="240" change="dirty.setDirty()"/>
					   	    </mx:VBox>

					   	</mx:HBox>
				   	<mx:HRule width="100%"/>
						
				   </mx:VBox>
				</mx:HBox>
				<mx:HBox label="Membership" paddingLeft="4" height="100%" horizontalGap="8" width="100%" paddingRight="4" paddingBottom="4">
				   <mx:VBox verticalGap="4" height="100%" borderStyle="solid" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" borderThickness="1" width="100%">
				       <mx:Label text="Members"/>
				   	   <mx:HBox width="100%" horizontalAlign="left" horizontalGap="6">
					       <mx:ComboBox width="170" dataProvider="{parentDocument.promptedAppUserList}" id="memberCombo" labelField="@displayName">			       	
					       </mx:ComboBox>
				   	   	   <mx:Button click="addMember()" icon="@Embed(source='../../assets/add.png')" disabledIcon="@Embed(source='../../assets/add_disable.png')" width="25">
				   	   	   	   <mx:enabled>{memberCombo.selectedItem != null &amp;&amp; memberCombo.selectedIndex > 0 ? true : false}</mx:enabled>
				   	   	   </mx:Button>
				   	   	   <mx:Button click="removeMember()" icon="@Embed(source='../../assets/delete.png')" disabledIcon="@Embed(source='../../assets/delete_disable.png')" enabled="{membersGrid.selectedItem != null}" width="25"/>
				   	   </mx:HBox>
		 			   <mx:DataGrid id="membersGrid" width="100%" dataProvider="{members}" height="100%">
				           <mx:columns>
				               <mx:DataGridColumn dataField="@displayName" headerText="Name"/>
				           </mx:columns>
				       </mx:DataGrid>			   	
				   </mx:VBox>
				   <mx:VBox width="100%" verticalGap="4" backgroundAlpha=".1" borderStyle="solid" height="100%" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" borderThickness="1">
				       <mx:Label text="Collaborators"/>
				   	   <mx:HBox width="100%" horizontalGap="6">
					       <mx:ComboBox width="170" id="collaboratorCombo" dataProvider="{parentDocument.promptedAppUserList}" labelField="@displayName">			       	
					       </mx:ComboBox>
				   	   	   <mx:Button click="addCollaborator()" icon="@Embed(source='../../assets/add.png')" disabledIcon="@Embed(source='../../assets/add_disable.png')" width="25">
				   	   	   	   <mx:enabled>{collaboratorCombo.selectedItem != null &amp;&amp; collaboratorCombo.selectedIndex > 0 ? true : false}</mx:enabled>
				   	   	   </mx:Button>
				   	   	   <mx:Button click="removeCollaborator()" icon="@Embed(source='../../assets/delete.png')" disabledIcon="@Embed(source='../../assets/delete_disable.png')" enabled="{collaboratorsGrid.selectedItem != null}" width="25"/>
				   	   </mx:HBox>
		 			   <mx:DataGrid id="collaboratorsGrid" width="100%" dataProvider="{collaborators}" height="100%">
				           <mx:columns>
				               <mx:DataGridColumn dataField="@displayName" headerText="Name"/>
				           </mx:columns>
				       </mx:DataGrid>			   	
				   </mx:VBox>
				   <mx:VBox  width="100%" verticalGap="4" backgroundAlpha=".1" borderStyle="solid" height="100%" paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2" borderThickness="1">
				       <mx:Label text="Managers"/>
				   	   <mx:HBox width="100%" horizontalGap="6">
					       <mx:ComboBox width="170" id="managerCombo" dataProvider="{parentDocument.promptedAppUserList}" labelField="@displayName">			       	
					       </mx:ComboBox>
				   	   	   <mx:Button click="addManager()" icon="@Embed(source='../../assets/add.png')" disabledIcon="@Embed(source='../../assets/add_disable.png')" width="25">
				   	   	   	   <mx:enabled>{managerCombo.selectedItem != null &amp;&amp; managerCombo.selectedIndex > 0 ? true : false}</mx:enabled>
				   	   	   </mx:Button>
				   	   	   <mx:Button click="removeManager()" icon="@Embed(source='../../assets/delete.png')" disabledIcon="@Embed(source='../../assets/delete_disable.png')" enabled="{managersGrid.selectedItem != null}" width="25"/>
				   	   </mx:HBox>
					    <mx:DataGrid id="managersGrid" width="100%" dataProvider="{managers}" height="100%">
				           <mx:columns>
				               <mx:DataGridColumn dataField="@displayName" headerText="Name"/>
				           </mx:columns>
				       </mx:DataGrid>			   	
				   </mx:VBox>
				    			    
	
				</mx:HBox>
			</mx:VBox>		
			<mx:VBox label="Billing Contact" width="100%" height="100%"	verticalGap="2" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
										<mx:HBox  verticalGap="0" height="100%" horizontalAlign="left" horizontalGap="10" width="100%">
							<mx:VBox height="100%"   verticalGap="10" horizontalGap="3" horizontalAlign="left" borderStyle="none" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4" width="100%">
							 <mx:HBox verticalGap="0" width="100%">
							 <mx:VBox  verticalGap="0">
							 	<mx:Label text="Billing Contact" />
							 	<mx:TextInput id="contactName" text="{parentDocument.fullLab.@contactName}" width="300" change="dirty.setDirty()"/>
							 </mx:VBox>
							 </mx:HBox>
							 <mx:VBox  verticalGap="0" width="100%">
							 	<mx:Label text="Address" />
							 	<mx:TextInput id="contactAddress" text="{parentDocument.fullLab.@contactAddress}" width="100%" change="dirty.setDirty()"/>
							 </mx:VBox>
							 <mx:HBox verticalGap="0" width="100%">
							      <mx:VBox  verticalGap="0">
							      	<mx:Label text="City" />
							      	<mx:TextInput id="contactCity" text="{parentDocument.fullLab.@contactCity}" width="200" change="dirty.setDirty()"/>
							      </mx:VBox>
							      <mx:HBox width="100%">
							      <mx:VBox  verticalGap="0">
							      	<mx:Label text="State" /> 
							      	<mx:VBox verticalGap="0" horizontalAlign="right">
								      	<mx:ComboBox id="contactStateCombo"  text="{parentDocument.fullLab.@contactCodeState}" width="70" change="dirty.setDirty()" labelField="@value">
								      	</mx:ComboBox>
										<mx:LinkButton label="Edit..." textDecoration="underline" color="#2335E5" click="editState()">
										</mx:LinkButton>						      		
							      	</mx:VBox>
							      </mx:VBox>
							      <mx:VBox  verticalGap="0" width="100%">
							      	<mx:Label text="Zip" />
							      	<mx:TextInput id="contactZip" text="{parentDocument.fullLab.@contactZip}" width="110" click="dirty.setDirty()"/>
							      </mx:VBox>
							      	
							      </mx:HBox>
							 </mx:HBox>
								
							</mx:VBox>
						</mx:HBox>

			</mx:VBox>
			<mx:VBox label="Billing Accounts" width="100%" verticalGap="2" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
				<mx:HBox horizontalGap="12">
					<mx:RadioButton label="Internal Pricing" groupName="pricingModel" selected="{parentDocument.fullLab.@isExternalPricing == 'Y' ? false : true}" click="checkPricingChange()"/>
					<mx:RadioButton id="isExternalPricingButton" label="External Pricing" groupName="pricingModel" selected="{parentDocument.fullLab.@isExternalPricing == 'Y' ? true : false}" click="checkPricingChange()"/>
				</mx:HBox>
				<mx:Spacer height="8"/>
				<mx:Label text="Accounts:" fontWeight="bold"/>
				<mx:HBox horizontalAlign="left" width="100%">
					<mx:HBox width="100%" horizontalAlign="right" verticalAlign="middle">
						<mx:Label text="Add Account    Name:"/>
						<mx:TextInput id="accountName" width="100%"/>
						<mx:Button icon="@Embed(source='../../assets/add.png')" click="addBillingAccount()" disabledIcon="@Embed(source='../../assets/add_disable.png')" enabled="{accountName.text != ''}" width="24"/>
						<mx:Button icon="@Embed('../../assets/delete.png')" click="removeBillingAccount()" disabledIcon="@Embed(source='../../assets/delete_disable.png')" enabled="{billingAccountGrid.selectedItem != null}" width="24"/>						
					</mx:HBox>
				</mx:HBox>
				<mx:DataGrid width="100%" height="100%" id="billingAccountGrid" editable="true" 
					itemEditBeginning="verifyChartfieldEdit(event)" 
					horizontalScrollPolicy="auto">
					<mx:dataProvider>{billingAccounts}</mx:dataProvider>
					<mx:columns>
			            <mx:DataGridColumn headerText="PO"  
			            	width="30" 
			            	editable="false"                        	
			            	dataField="@isPO" 
			            	editorDataField="selected" 
			            	textAlign="center" 
			            	itemRenderer="{views.renderers.CheckBoxIsPO.create()}" >
		            	</mx:DataGridColumn>
	   					<mx:DataGridColumn headerText="Account name" dataField="@accountName" width="130"/>
						<mx:DataGridColumn dataField="@expirationDate" width="75"
			                headerText="Expires"  
			          		itemEditor="views.renderers.DateFieldExpiration" 
			           		itemRenderer="mx.controls.Label" 
			                rendererIsEditor="false" 
			                labelFunction="getExpirationDateString"
			                editorDataField="selectedDate"/>
						<mx:DataGridColumn headerText="Funding agency" dataField="@idFundingAgency" 
							editorDataField="value" editable="true"  rendererIsEditor="false"  width="130"
						   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.FundingAgency').DictionaryEntry, '@display', '@value', '@idFundingAgency')}"
    	                   itemEditor="{hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.FundingAgency').DictionaryEntry, '@display', '@value', '@idFundingAgency', true)}"/>			                
						<mx:DataGridColumn headerText="Bus" dataField="@accountNumberBus" width="30"/>
						<mx:DataGridColumn headerText="Org"  dataField="@accountNumberOrg" width="50"/>
						<mx:DataGridColumn headerText="Fund" dataField="@accountNumberFund" width="50"/>
						<mx:DataGridColumn headerText="Activity" dataField="@accountNumberActivity" width="70"/>
						<mx:DataGridColumn headerText="Project" dataField="@accountNumberProject" width="70"/>
						<mx:DataGridColumn headerText="Acct" dataField="@accountNumberAccount" width="50"/>
						<mx:DataGridColumn headerText="AU" dataField="@accountNumberAu" width="25"/>
						<mx:DataGridColumn headerText="Year" dataField="@accountNumberYear" width="30"/>
					</mx:columns>
				</mx:DataGrid>
				
			</mx:VBox>
		</mx:TabNavigator>
	   
    </mx:VBox>
		<mx:ControlBar width="100%"  horizontalAlign="right" id="controlbar1">
		    <mx:LinkButton id="emailUserAccounts"  click="promptToVerifyUserAccounts()" icon="@Embed('../../assets/email_go.png')" toolTip="Send email to verify group's user accounts" textDecoration="underline" label="Verify users"/>
		    <mx:Spacer width="100%"/>
		    <util:DirtyNote id="dirty"/>
			<mx:Button label="Save" icon="@Embed('../../assets/action_save.gif')" click="validateAndSave()" id="button1"/>
		</mx:ControlBar>
	    
  
</util:PanelBox>
