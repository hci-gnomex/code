<?xml version="1.0" encoding="utf-8"?>
<mx:Panel label="Hybridization"  xmlns:mx="http://www.adobe.com/2006/mxml"   xmlns:views="views.*"  xmlns:util="views.util.*"
	width="100%" height="100%" title="Scan / Feature Extraction"
	borderThicknessTop="2">
	
	<mx:HTTPService 
    id="getWorkList" 
    url="GetWorkItemList.gx"
    resultFormat="e4x"
    destination="getWorkList"
    showBusyCursor="true"
    result="onGetWorkList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get work list', event)"
    useProxy="false">
    <mx:request>
        <codeStepNext>EXT</codeStepNext>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="saveWorkItem" 
    url="SaveWorkItemExtraction.gx"
    resultFormat="e4x"
    destination="saveWorkItem"
    showBusyCursor="true"
    result="onSaveWorkItem(event)"
    fault="parentApplication.onFailHttpRequest('Unable to save work list', event)"
    method="POST"
    useProxy="false">
    <mx:request>
        <workItemXMLString>{dirtyWorkItems.toXMLString()}</workItemXMLString>
    </mx:request>
    </mx:HTTPService >
    
    <mx:XMLListCollection id="workList" source="{getWorkList.lastResult.WorkItem}"/>
    

    <mx:Script>
        <![CDATA[
        import mx.events.CollectionEvent;
        import mx.events.CollectionEventKind;
        import mx.collections.ArrayCollection;
        import mx.collections.XMLListCollection;
        import mx.rpc.events.FaultEvent; 
        import mx.rpc.events.ResultEvent;   
        import mx.controls.Alert;
        import views.renderers.ComboBoxWorkflowStatus;
        import hci.flex.renderers.ComboBoxDictionary;
        import hci.flex.renderers.LabelDictionary;
        
        [Bindable]
        private var requestNumberCount:String;
        
        [Bindable]
        private var dirtyWorkItems:XMLListCollection;
        
        [Bindable]
        private var requestNumbers:ArrayCollection;
        
        private function refreshWorkList():void {
        	dirty.resetDirty();
        	getWorkList.send();
        }
 		private function underlyingWorkItemDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets to work list
			} else {
				dirty.setDirty();
				this.workList.filterFunction = null;
			}
		}
        private function getGridRowNumber(item:Object,col:int):String
        {
        	if (workList!= null) {
	           var x:int = workList.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
        
		private function getSlideDesignName(item:Object, col:int):String {
			var de:XMLList = parentApplication.getSlideProductList.lastResult.SlideProduct..SlideDesign.(@idSlideDesign == item.@idSlideDesign);
	    	if (de.length() == 1) {
		    	return de[0].@name;
	    	} else {
	    		return "";
	    	}
		}            
                
        public function onEdit():void {
        	workList.filterFunction = null;
	    	workListGrid.selectedItem.@isDirty = "Y";
        }
        
        private function save():void {
        	var dirtyItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');        	
        	dirtyWorkItems = new XMLListCollection(dirtyItems);
        	saveWorkItem.send();
        }
        
        private function onGetWorkList(event:ResultEvent):void {
        	if (event.result.name() == "WorkItemList") {
    	    	refreshRequestNumbers();
	        	workList.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingWorkItemDataChange);
        	} else {
        		Alert.show(event.result..ERROR.@message.toString(), "Error getting work list");
        	} 
        }
        
        private function onSaveWorkItem(event:ResultEvent):void {
        	if (saveWorkItem.lastResult.name() == "WorkItemList" || saveWorkItem.lastResult.name() == "SUCCESS" ) {
        		dirty.resetDirty();
        	    this.getWorkList.send();
        	} else {
        		Alert.show(saveWorkItem.lastResult..ACTMESSAGE.@TEXT);
        	}
        }
        
        private function onFailSaveWorkItem(event:FaultEvent):void {
        	var startPos:int = event.message.body.indexOf("TEXT=");
        	var endPos:int   = event.message.body.indexOf("TYPE=");
        	if (startPos != -1 && endPos != -1) {
	        	Alert.show(event.message.body.toString().substring(startPos + 5, endPos), "Failed to save work list");    		
        	} else {
        		Alert.show(event.message.body.toString(), "Failed to save work list");
        	}
        }
        
        private function refreshRequestNumbers():void {
        	requestNumbers = new ArrayCollection();

			var blankItem:Object = new Object();
			blankItem.data = "";
			blankItem.label = "";
        	requestNumbers.addItem(blankItem);
        	
        	for(var x:Number = 0; x < workList.length; x++) {
        		var item:Object = workList.getItemAt(x, 0);
        		
        		var found:Boolean = false;
        		for(var i:Number = 0; i < requestNumbers.length; i++) {
        			if (requestNumbers.getItemAt(i).label == item.@requestNumber) {
        				found = true;
        				break;
        			}
        		}
        		if (found == false) {
	    			var newItem:Object = new Object();
	    			newItem.data = item.@requestNumber;
	    			newItem.label = item.@requestNumber;
        			requestNumbers.addItem(newItem);
        		}
        	}
        	requestNumberCount = (requestNumbers.length - 1) + " requests in work list.";
        	
        }
        
        private function filterWorkList(item:Object):Boolean {
        	var keep:Boolean = true;
        	if (requestNumberCombo.selectedItem != null && requestNumberCombo.selectedItem.label != "") {
        		keep = false;
        		if (item.@requestNumber == requestNumberCombo.selectedItem.label) {
        			keep = true;
        		}
        	}        	
        	return keep;
        }
  
   		public function lookupUserName(item:Object, col:DataGridColumn):String 
    	{ 
    		return parentApplication.getAppUserList.lastResult.AppUser.(@idAppUser == item.@idAppUser).@displayName;
    	}
		private function getFeatureExtractionProtocol(item:Object,col:DataGridColumn):String
        {
        	return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.FeatureExtractionProtocol", item.@idFeatureExtractionProtocol);
        }           	
		private function getScanProtocol(item:Object,col:DataGridColumn):String
        {
        	return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.ScanProtocol", item.@idScanProtocol);
        }           	

        ]]>
    </mx:Script> 
    
   
    <mx:VBox   width="100%" height="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
        
    
    
    

            <mx:HBox width="100%" horizontalAlign="left" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" verticalAlign="bottom">
                <mx:Image source="{parentApplication.iconExperiment}"/>
                <mx:Label text="{requestNumberCount}"/>
            	<mx:HBox width="100%" horizontalAlign="right" paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0" verticalAlign="middle">
	            	<mx:Label text="Request #"/>
	            	<mx:ComboBox id="requestNumberCombo" 
	            		dataProvider="{requestNumbers}" 
	            		change="workList.filterFunction = filterWorkList;workList.refresh()"  
	            		width="90">
	            	</mx:ComboBox>
            		
            	</mx:HBox>
            	
            	
            </mx:HBox>
        	
		<mx:VBox width="100%" height="100%" verticalGap="0">
	
			<util:DataGridAlternatingGroup height="100%" id="workListGrid"  width="100%" dataProvider="{workList}" editable="true" itemEditEnd="onEdit()">
				<util:columns>
					<mx:DataGridColumn editable="false" headerText=""  width="1" labelFunction="getGridRowNumber"/>
	                <mx:DataGridColumn editable="false" headerText="Hyb #" width="7" dataField="@hybNumber"/>
					<mx:DataGridColumn editable="false" headerText="Client"  width="15" dataField="@idAppUser" labelFunction="lookupUserName"/>
					<mx:DataGridColumn headerText="Scan Protocol"  width="22" dataField="@idScanProtocol" 
	                   editorDataField="value"
	                   labelFunction="getScanProtocol"
                       sortable="false" 
	                   editable="true"
	                   rendererIsEditor="false"
	                   itemRenderer="mx.controls.Label"                 							
 	                   itemEditor="{ComboBoxDictionary.create(parentApplication.dictionaryManager, 'hci.gnomex.model.ScanProtocol', '@idScanProtocol')}"/>			                
					<mx:DataGridColumn headerText="Feature Extraction Protocol"  width="22" dataField="@idFeatureExtractionProtocol" 
	                   editorDataField="value"
	                   labelFunction="getFeatureExtractionProtocol"
	                   sortable="false" 
	                   editable="true"
	                   rendererIsEditor="false"
	                   itemRenderer="mx.controls.Label"                 							
 	                   itemEditor="{ComboBoxDictionary.create(parentApplication.dictionaryManager, 'hci.gnomex.model.FeatureExtractionProtocol', '@idFeatureExtractionProtocol')}"/>			                
	                <mx:DataGridColumn headerText="Status"  width="14" dataField="@extractionStatus" 
	                   editorDataField="value"
	                   sortable="false" 
	                   editable="true"
	                   rendererIsEditor="false"
 	                   itemEditor="{ComboBoxWorkflowStatus.create('@extractionStatus')}"/>	          	                   			                
				</util:columns>
		</util:DataGridAlternatingGroup>
			
		</mx:VBox>
	  	
	  </mx:VBox>
					
 <mx:ControlBar>
 	            	<mx:Button icon="@Embed('../../assets/action_refresh.gif')" 
 	            		click="refreshWorkList();" toolTip="Refresh worklist"/>
	 	            <mx:HBox width="100%" horizontalAlign="right">
	 	                <util:DirtyNote id="dirty"/>
	 	            	<mx:Button label="Save" click="save()" icon="@Embed('../../assets/action_save.gif')">
		            	</mx:Button>
	 	            </mx:HBox>

 </mx:ControlBar>						

</mx:Panel>
