<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"  xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%" 
	xmlns:util="views.util.*" xmlns:util1="util.*" ><!-- defaultButton="{lookupButton}" -->

	
	<mx:HTTPService  
		id="saveFlowCell" 
		url="SaveFlowCell.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		result="onSaveFlowCell(event)"
		fault="parentApplication.onFailHttpRequest('Failed to save flow cell', event)"
		method="POST" 
		useProxy="false">
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="deleteFlowCell" 
		url="DeleteFlowCell.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		result="onDeleteFlowCell(event)"
		fault="parentApplication.onFailHttpRequest('Failed to save flow cell', event)"
		method="POST" 
		useProxy="false">
	</mx:HTTPService>

   <mx:HTTPService  
    id="getFlowCellList" 
    url="GetFlowCellList.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetFlowCellList(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get flow cell list', event)"
    method="POST"
    useProxy="false">
    <mx:request xmlns="">
    	<codeSequencingPlatform>{codeSequencingPlatform}</codeSequencingPlatform>
 <!--  	<flowCellNumber>{lookupField.text.toUpperCase().indexOf('FC') > -1 ? lookupField.text : ''}</flowCellNumber>
    	<requestNumber>{lookupField.text.toUpperCase().indexOf('R') > -1 ? lookupField.text : ''}</requestNumber>
        <lastWeek>{lastWeekCheckbox.selected ? 'Y' : 'N'}</lastWeek>
        <lastMonth>{lastMonthCheckbox.selected ? 'Y' : 'N'}</lastMonth>
        <lastThreeMonths>{lastThreeMonthsCheckbox.selected ? 'Y' : 'N'}</lastThreeMonths>
        <lastYear>{lastYearCheckbox.selected ? 'Y' : 'N'}</lastYear> -->
		<codeStepNext>{codeStepNext}</codeStepNext>
    </mx:request>
  </mx:HTTPService> 
	
	<mx:HTTPService  
		id="getFlowCell" 
		url="GetFlowCell.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetFlowCell(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get flow cell', event)"
		method="POST"
		useProxy="false">
		<mx:request xmlns="">
			<id>{selectedIdFlowCell}</id>
			<codeStepNext>{codeStepNext}</codeStepNext>
		</mx:request>
	</mx:HTTPService> 
	
	<mx:XMLListCollection id="flowCellChannelsList" />
	<mx:XMLListCollection id="flowCellsList" source="{getFlowCellList.lastResult.FlowCell}" sort="{sortFlowCellsList}" />
	<mx:XMLListCollection id="sequenceProtocolsList" filterFunction="filterSequenceProtocolsList"  /> <!-- active protocols -->
	<mx:Sort id="sortFlowCellsList" compareFunction="compareFlowCellsList" />
<mx:Script> 
	<![CDATA[
		import hci.flex.controls.DropdownLabel;
		
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.controls.dataGridClasses.DataGridColumn;
		import mx.events.CloseEvent;
		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;
		import mx.events.ItemClickEvent;
		import mx.events.ListEvent;
		import mx.events.PropertyChangeEvent;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		
//		import views.workflow.EditFlowCellWindow;
		
		[Bindable]
		public var selectedFlowCell:Object;
		
		[Bindable]
		public var codeSequencingPlatform:String;
		private var addWindow:EditFlowCellWindow;
		
		public var selectedFlowCellNumber:String = null;
		[Bindable]
		private var selectedIdFlowCell:int = -1;
		
		[Bindable]
		public var codeStepNext:String;
		
		[Bindable]
		private var flowCellRunFolder:String = '';
		
		public function filterSequenceProtocolsList(item:Object):Boolean {
			return item.@codeRequestCategory == codeSequencingPlatform || item.@name == "Choose a protocol...";
		}
		
		public function compareFlowCellsList(a:Object, b:Object, fields:Array = null ):int {
			if(a == null && b == null)
				return 0;
			if(a == null)
				return 1;
			if(b == null)
				return -1;
			if (a < b)
				return 1;
			if (a > b)
				return -1;
			return 0;
		}		
		private function deleteFC():void {
			var params:Object = new Object();
			params.idFlowCell = selectedFlowCell.@idFlowCell;
			deleteFlowCell.send(params);
		}
		private function onDeleteFlowCell(event:ResultEvent):void {
			if (deleteFlowCell.lastResult.name() == "SUCCESS") {
				Alert.show("Flow Cell " + deleteFlowCell.lastResult.@flowCellNumber + " has been deleted.");
				refresh();
			} else  {
				Alert.show(event.result..ERROR.@message.toString(), "Error deleting flow cell");
			}
		}
		
		private function save():void {
			var isValid:Boolean = true;
			var protocolMismatch:Boolean = false;
			var errorMessage:String = '';
			if(flowCellBarcode.text == '') {
				isValid = false;
				errorMessage += '\n\t Barcode cannot be blank.\n';
			}
			if(flowCellRunNumber.text == '') {
				isValid = false;
				errorMessage += '\n\t Run number cannot be blank.\n';
			}
			if(flowCellDate.text == '') {
				isValid = false;
				errorMessage += '\n\t Create date cannot be blank.\n';
			}
			if(flowCellInstrument.text == '') {
				isValid = false;
				errorMessage += '\n\t You must choose an instrument.\n';
			}
			if(this.codeSequencingPlatform=='HISEQ' && flowCellSide.selectedValue == null) {
				isValid = false;
				errorMessage += '\n\t Choose side A or B.\n';
			}
			if(flowCellProtocol.selectedItem == null) {
				isValid = false;
				errorMessage += '\n\t You must choose a sequencing protocol.\n';
			}
			for each(var sl:XML in flowCellChannelsList) {
				if(sl.@idNumberSequencingCyclesAllowed != flowCellProtocol.selectedItem.@idNumberSequencingCyclesAllowed) {
					protocolMismatch = true;
				}
			}
			
			for each(var chan:XML in flowCellChannelsList){
				if(validator.validate(sl.@flowCellChannelSampleConcentrationpM).results != null){ 
					isValid = false;
					errorMessage += '\n\t One of your sample concentrations contains invalid data\n';
					break;
				}
				
			}
			
			
			if(!isValid) {
				Alert.show(errorMessage,"Cannot save flow cell");
			} else if(protocolMismatch) {				
				Alert.show("One or more sequence lanes have a different sequencing protocol from the flow cell.\n\nThe sequence lanes will have their protocols changed to match the flow cell."
					+ "\n\n\t\t\t     Continue Saving?"
					,"Protocol Mismatch Warning"
					,(Alert.YES|Alert.NO),this,onProtocolMistmatch,null,Alert.NO);
			} else {
				saveFC();
			}
		}
		
		public function onProtocolMistmatch(event:CloseEvent):void {
			if(event.detail == Alert.YES) {
				saveFC();
			}
		}
		
		private function saveFC():void {
			updateSampleConcpM();

			var params:Object = new Object();
			params.number = selectedFlowCell.@number;
			params.createDate = this.flowCellDate.text;
			params.notes = selectedFlowCell.@notes;
			params.idFlowCell = selectedFlowCell.@idFlowCell;
			params.idNumberSequencingCycles = selectedFlowCell.@idNumberSequencingCycles;
			params.barcode = this.flowCellBarcode.text;
			params.codeSequencingPlatform = selectedFlowCell.@codeSequencingPlatform;
			params.runNumber = this.flowCellRunNumber.text;
			params.idInstrument = this.flowCellInstrument.selectedItem.@value;
			params.side = this.flowCellSide.selectedValue;
			params.idSeqRunType = this.selectedFlowCell.@idSeqRunType;
			params.idCoreFacility = selectedFlowCell.@idCoreFacility;
			params.idNumberSequencingCyclesAllowed = this.flowCellProtocol.selectedItem.@idNumberSequencingCyclesAllowed;
			params.runFolder = this.flowCellRunFolder;
			params.numberSequencingCyclesActual = this.flowCellProtocol.selectedItem.@numberSequencingCyclesDisplay;
			params.idSeqRunType = this.flowCellProtocol.selectedItem.@idSeqRunType;
			params.channelsXMLString =  "<fcChannels>" + this.selectedFlowCell.flowCellChannels.FlowCellChannel.toXMLString() + "</fcChannels>";
			//params.lastCycleDate = this.lastCycleDateInput.text;
			
			
			saveFlowCell.send(params);
			
		}
		
		private function updateSampleConcpM():void{
			for each(var fc:XML in selectedFlowCell.flowCellChannels.FlowCellChannel){
				for each(var sl:XML in flowCellChannelsList){
					if(fc.@fileName == sl.@fileName){
						fc.@sampleConcentrationpM = sl.@flowCellChannelSampleConcentrationpM;
						break;
					}
				}
			}
		}
		
		private function onSaveFlowCell(event:ResultEvent): void {
			if (saveFlowCell.lastResult.name() == "SUCCESS") {
				refresh();
			} else  {
				Alert.show(event.result..ERROR.@message.toString(), "Error saving flow cell");
			}
		}

		
//		public function clearAndRefreshList():void {
//			flowCellChannelsList.source = null;
//			flowCellChannelsList.refresh();
//			getFlowCellList.send();
//		}

//		public function clearAndRefreshList2():void {
//			if(getFlowCell.lastResult != null) {
//				flowCellsList.removeAll();
//			}
//
//			getFlowCell.send();
//		}
		
		public function init():void {
			//this.getFlowCellList.send();
			//this.addEventListener("changed",refresh);
			if(codeStepNext == 'HSEQFINFC') {
				titleLabel.text = 'Illumina HiSeq Finalize Flow Cell';
				hboxGroupSide.visible = true;
				hboxGroupSide.includeInLayout = true;
				codeSequencingPlatform = 'HISEQ';
			} else if (codeStepNext == 'MISEQFINFC') {
				titleLabel.text = 'Illumina MiSeq Finalize Flow Cell';
				hboxGroupSide.visible = false;
				hboxGroupSide.includeInLayout = false;
				codeSequencingPlatform = 'MISEQ';
			} 
			sequenceProtocolsList.source = parentApplication.dictionaryManager.getEntriesExcludeBlank('hci.gnomex.model.NumberSequencingCyclesAllowed').(@isActive == 'Y')
			sequenceProtocolsList.addItemAt(new XML('<Default name="Choose a protocol..." />'),0);
			flowCellProtocol.selectedIndex = 0;
		}
		private function createFlowCellFileName():void {
			var runFolder:String = '';
			if(this.flowCellBarcode.text.length > 0 && this.flowCellRunNumber.text.length > 0 && this.flowCellDate.selectedDate != null && this.flowCellSide.selectedValue != null && this.flowCellInstrument.selectedIndex != 0 && this.flowCellProtocol.selectedIndex != 0 && this.codeSequencingPlatform == 'HISEQ') 
			{				 
				var year:String = (flowCellDate.selectedDate.fullYear.toString()).substr(2,3);
				var month:String = (flowCellDate.selectedDate.month + 1).toString();
				if(month.length == 1) { month = "0" + month; }
				var date:String =  flowCellDate.selectedDate.date.toString();
				if(date.length == 1) { date = "0" + date; }
				runFolder += year + month + date;
				runFolder += "_";
				runFolder += this.flowCellInstrument.selectedItem.@instrument;
				runFolder += "_";
				var runNumberPlus:Number = Number(this.flowCellRunNumber.text) + 10000;
				runFolder += runNumberPlus.toString().substring(1,5);
				runFolder += "_";
				runFolder += this.flowCellSide.selectedValue;
				runFolder += this.flowCellBarcode.text;
				
			}
			flowCellRunFolder = runFolder;
		}
		

		private function refresh():void{
			this.selectedFlowCell = null;
			this.flowCellBarcode.text = ''; this.flowCellRunNumber.text = '';
			this.flowCellDate.selectedDate = null;
			this.flowCellSide.selectedValue = null; this.flowCellSide.selection = null;
			this.flowCellInstrument.selectedItem = null;
			this.flowCellProtocol.selectedIndex = 0;
			flowCellChannelsList.source = null;
			init();
			this.getFlowCellList.send();
		}    	

        private function onGetFlowCellList(event:ResultEvent):void {
        	if (event.result.name() == "FlowCellList") {
				
        	} else {
        		Alert.show(event.result..ERROR.@message.toString(), "Error getting flow cell list.");
        	}
        }
		public function flowCellSelected():void {
			selectedFlowCell = flowCellsGrid.selectedItem;
			selectedIdFlowCell = selectedFlowCell.@idFlowCell; // needed for servlet
			if(selectedIdFlowCell < 0) {
				
			} else {
				flowCellChannelsGrid.dataProvider = null;
				flowCellChannelsList.source = null;
				
				getFlowCell.send();
			}
		}
		private function onGetFlowCell(event:ResultEvent):void {
			if (event.result.name() == "FlowCell") {
				populateChannels();
				populateFlowCellInfo();
				createFlowCellFileName();
			} else {
				Alert.show(event.result..ERROR.@message.toString(), "Error getting flow cell.");
			}
		}
		private function prepareToEdit():void {
			if (selectedFlowCell != null) {
				showEdit();
			}
		}

		
		private function populateChannels():void {
			var source:XMLList = getFlowCell.lastResult.FlowCell..FlowCellChannel;
			var destination:XMLList = new XMLList();
			for each( var flowCellChannel:XML in source) {
				var isFirst:Boolean = true;
				for each( var sequencingControl:XML in flowCellChannel..SequencingControl) {
					if(isFirst) {
						sequencingControl.@isControl = flowCellChannel.@isControl;
						sequencingControl.@editable = "true";
						isFirst = false;
					}
					sequencingControl.@number = sequencingControl.@display;
					sequencingControl.@flowCellChannelNumber = flowCellChannel.@number;
					destination += sequencingControl;
				}
				for each( var sequenceLane:XML in flowCellChannel..SequenceLane ) {
					sequenceLane.@oldFileName = sequenceLane.@fileName;
					if(isFirst) {
						sequenceLane.@isControl = flowCellChannel.@isControl;
						sequenceLane.@editable = "true";
						isFirst = false;
					}
					destination += sequenceLane;
				}				
			}
			flowCellChannelsList.source = destination;
			flowCellChannelsGrid.dataProvider = flowCellChannelsList;
		}
		private function populateFlowCellInfo():void {
			var flowCell:XMLList = getFlowCell.lastResult.FlowCell;
			this.flowCellBarcode.text = flowCell.@barcode.toString();
			var createDate:Array = flowCell.@createDate.split('-');
			if(createDate.length == 3) {
				this.flowCellDate.selectedDate = new Date(createDate[0],Number(createDate[1])-1,createDate[2]);
			}
			this.flowCellRunNumber.text = flowCell.@runNumber.toString();
			for(var i:int = 0; i < flowCellSide.numRadioButtons; i++) {
				var side:RadioButton = flowCellSide.getRadioButtonAt(i);
				if(side.value.toString() == flowCell.@side.toString()) {
					this.flowCellSide.selection = side;					
					break;
				}
			}
			for each(var instrument:XML in flowCellInstrument.dataProvider) {
				if(instrument.@value == flowCell.@idInstrument) {
					this.flowCellInstrument.selectedItem = instrument;
					break;
				}
			}
			for each(var protocol:XML in flowCellProtocol.dataProvider) {
				if(protocol.@idNumberSequencingCyclesAllowed == flowCell.@idNumberSequencingCyclesAllowed) {
					this.flowCellProtocol.selectedItem = protocol;
					break;
				}
			}
		}
		
		private function showPrintableForm():void {
			var url:URLRequest = new URLRequest('ShowFlowCellForm.gx?idFlowCell=' + this.flowCellsGrid.selectedItem.@idFlowCell);
			navigateToURL(url, '_blank');			
		}
		private function showPrintablePrepForm():void {
			var url:URLRequest = new URLRequest('ShowFlowCellPrepForm.gx?idFlowCell=' + this.flowCellsGrid.selectedItem.@idFlowCell);
			navigateToURL(url, '_blank');			
		}
		
		public function showEdit():void {
			var number:String = getFlowCell.lastResult.FlowCell.@number;
			if (number != "") {
				this.addWindow = EditFlowCellWindow(mx.managers.PopUpManager.createPopUp(parentApplication.theBody, EditFlowCellWindow, true));
				this.addWindow.selectedFC = getFlowCell.lastResult.FlowCell;
				this.addWindow.parentView = this;
				this.addWindow.addEventListener("changed", refresh);
				mx.managers.PopUpManager.centerPopUp(this.addWindow);
				addWindow.setFocus();				
			} else {
				Alert.show("Could not find the requested Flow Cell");
			}

		}
		
//		public function toggleDateCheckboxes(checkBoxNumber:int):void {
//			this.lookupField.text = "";
//			if (checkBoxNumber == 1) {
//				this.lastMonthCheckbox.selected = false;
//				this.lastThreeMonthsCheckbox.selected = false;
//				this.lastYearCheckbox.selected  = false;
//			} else if (checkBoxNumber == 2) {
//				this.lastWeekCheckbox.selected = false;
//				this.lastThreeMonthsCheckbox.selected = false;
//				this.lastYearCheckbox.selected  = false;
//			} else if (checkBoxNumber == 3) {
//				this.lastWeekCheckbox.selected  = false;
//				this.lastMonthCheckbox.selected = false; 
//				this.lastYearCheckbox.selected  = false;
//			}  else if (checkBoxNumber == 4) {
//				this.lastWeekCheckbox.selected  = false;
//				this.lastMonthCheckbox.selected = false; 
//				this.lastThreeMonthsCheckbox.selected = false;
//			}   
//		} 			
//		
//		private function setDefaultButton():void {
//			if (this.lookupField.text != '') {
//				this.lastWeekCheckbox.selected = false;
//				this.lastMonthCheckbox.selected = false;
//				this.lastThreeMonthsCheckbox.selected = false;
//				this.lastYearCheckbox.selected = false;
//			} 		
//		}
		
		private function lookupNumberSequencingCyclesAllowed(item:Object, col:Object):String {			
			if (item != null  && item.hasOwnProperty("@idNumberSequencingCyclesAllowed")) {
				var d:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.NumberSequencingCyclesAllowed', item.@idNumberSequencingCyclesAllowed);
				if (d != null) {
					return d.@name; 
				} else {
					return "";
				}
			} else {
				return "";
			}
		}
		
		private function lookupOligoBarcode(item:Object, col:Object):String {
			if (item != null && item.hasOwnProperty("@sampleIdOligoBarcode")) {
				if (item.@sampleIdOligoBarcode != '') {
					return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.OligoBarcode", item.@sampleIdOligoBarcode);    		
				} else {
					return item.@barcodeSequence;
				}
			} else {
				return "";
			}
			
		}			
		private function lookupOligoBarcodeB(item:Object, col:Object):String {
			if (item != null && item.hasOwnProperty("@sampleIdOligoBarcodeB")) {
				if (item.@sampleIdOligoBarcodeB != '') {
					return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.OligoBarcode", item.@sampleIdOligoBarcodeB);    		
				} else {
					return item.@barcodeSequenceB;
				}
			} else {
				return "";
			}
			
		}
		
		public function updateSeqLanepMValue():void{
			var seqLaneSet:Object = new Object();
			for each(var seqLane:XML in flowCellChannelsList){
				if(seqLaneSet[seqLane.@fileName] != null && seqLaneSet[seqLane.@fileName] != ""){
					seqLane.@flowCellChannelSampleConcentrationpM = seqLaneSet[seqLane.@fileName];
				} else{
					seqLaneSet[seqLane.@fileName] = seqLane.@flowCellChannelSampleConcentrationpM;	
				}	
			}
		}
		
//		private function flowCellLabeler(item:Object, col:Object):String {
//			var result:String = "";
//			if (item != null && item.hasOwnProperty("@number") ) {
//				result += item.@number;
//			}
//			if (item!= null && item.hasOwnProperty("@idNumberSequencingCyclesAllowed") ){
//				var d:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.NumberSequencingCyclesAllowed', item.@idNumberSequencingCyclesAllowed);
//				if (d != null) {
//					result += " (" + d.@name + ") "; 
//				} 
//			}
//			return result;
//		}
		public function flowCellProtocolChangeHandler(event:ListEvent):void {
			Alert.show("Changing the protocol for the flow cell will change the protocol for all samples it contains.", "Warning");
		}	
	]]>
</mx:Script>
	
	<mx:NumberValidator id="validator"  
		decimalPointCountError="The decimal separator can only occur once." 
		decimalSeparator="."
		invalidCharError="Min/Max range must be an integer."
		domain="real" allowNegative="false"  />

	<mx:HDividedBox width="100%" height="100%">
		<mx:VBox id="LHS" width="50%" height="100%" horizontalScrollPolicy="off">
			<mx:VBox width="100%" height="120">
				<mx:HBox verticalAlign="middle" width="100%">
					<mx:Image source="{parentApplication.iconFlowCell}"/>
					<mx:Label id="titleLabel" styleName="titleLabel" text="Flow Cells" />
					<util:ContextHelp context1="finalizeFlowCellHelp" />
				</mx:HBox>
				<mx:Spacer height="100%" />
				<mx:VBox id="flowCellControls" width="100%">
					<mx:HBox width="100%">
						<mx:Label text="Assembled Flow Cells" fontWeight="normal" styleName="formLabel" fontSize="12"/>
						<mx:Label text="{'(' + this.flowCellsList.length + ' flow cells)'}" fontWeight="normal" textAlign="right" />
					</mx:HBox>
				<!--<mx:HBox id="filterBox" horizontalGap="20" verticalAlign="middle">
						<mx:Label text="Filter by" />
						<mx:HBox horizontalGap="0" verticalAlign="middle">
							<mx:Label text="Flow Cell # or Experiment #" id="label1" />
							<mx:TextInput id="lookupField" width="60"
										  change="{setDefaultButton()}" />
							<mx:Button id="lookupButton" fontFamily="Arial" height="18"
									   width="30" color="#400040"
									   click="{if (lookupField.text.toUpperCase().indexOf('R') &gt; -1 || lookupField.text.toUpperCase().indexOf('FC') &gt; -1 ) this.getFlowCellList.send();}"
									   visible="true" icon="@Embed('../../assets/arrow_right.png')" />
							<mx:TextInput id="lookupField2" width="10" visible="false" />
						</mx:HBox>
						<mx:HBox horizontalGap="0" verticalAlign="middle" verticalGap="0"
								 horizontalAlign="right" paddingRight="0" id="hbox3">
							<mx:CheckBox id="lastWeekCheckbox" label="In last week"
										 paddingRight="0" paddingLeft="0" horizontalGap="0"
										 selected="false">
								<mx:click>toggleDateCheckboxes(1);</mx:click>
							</mx:CheckBox>
							<mx:CheckBox id="lastMonthCheckbox" label="month"
										 paddingRight="0" paddingLeft="2" horizontalGap="0"
										 selected="false">
								<mx:click>toggleDateCheckboxes(2);</mx:click>
							</mx:CheckBox>
							<mx:CheckBox id="lastThreeMonthsCheckbox" label="3 months"
										 paddingRight="0" paddingLeft="2" horizontalGap="0"
										 selected="false">
								<mx:click>toggleDateCheckboxes(3);</mx:click>
							</mx:CheckBox>
							<mx:CheckBox id="lastYearCheckbox" label="year"
										 paddingRight="0" paddingLeft="2" horizontalGap="0"
										 selected="false">
								<mx:click>toggleDateCheckboxes(4);</mx:click>
							</mx:CheckBox>
						</mx:HBox>
						<mx:VBox height="100%" verticalAlign="middle">
							<mx:LinkButton id="findButton" height="25" label="Find"
										   toolTip="Run Search" click="{this.getFlowCellList.send();}"
										   icon="@Embed('../../assets/magnifier.png')" />
						</mx:VBox>
					</mx:HBox>
					<mx:HBox width="100%" verticalAlign="bottom">
						<mx:HBox width="100%" verticalAlign="middle"
								 paddingTop="8">
							
							<mx:LinkButton label="Preparation report"
										   fontStyle="normal" textDecoration="underline"
										   color="#2017D8" click="showPrintablePrepForm()"
										   enabled="{flowCellsGrid.selectedItem != null}" />
							<mx:LinkButton label="Run report" fontStyle="normal"
										   textDecoration="underline" color="#2017D8"
										   click="showPrintableForm()"
										   enabled="{flowCellsGrid.selectedItem != null}" />
							<mx:LinkButton label="Edit flow cell"
										   fontStyle="normal" textDecoration="underline"
										   color="#2017D8" click="prepareToEdit();"
										   enabled="{this.selectedFlowCell != null}" />
						</mx:HBox>
					</mx:HBox>-->
				</mx:VBox>
			</mx:VBox>
			<mx:VBox width="100%" height="90%">
				<mx:DataGrid id="flowCellsGrid" width="100%" height="100%" fontSize="10"
							 dataProvider="{flowCellsList}" click="flowCellSelected();"
							 alternatingItemColors="{[ 0xEEEEE0, 0xFFFFFF]}" sortableColumns="true" draggableColumns="false">
					<mx:columns>
						<mx:DataGridColumn dataField="@number" headerText="Flow Cell" width="55" />
						<mx:DataGridColumn dataField="@barcode"
										   headerText="Barcode" width="80" />
						<mx:DataGridColumn dataField="@createDate"
										   headerText="Create Date" width="65" />
						<mx:DataGridColumn dataField="@idNumberSequencingCyclesAllowed" labelFunction="lookupNumberSequencingCyclesAllowed"
										   headerText="Sequencing Protocol" width="180" />
						<mx:DataGridColumn dataField="@notes"
										   headerText="Content" width="120" />
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
		</mx:VBox>
<!--													END LHS								-->
<!--													RHS									-->
		<mx:VBox id="RHS" width="50%" height="100%" horizontalScrollPolicy="off">
			<mx:VBox id="flowCellChannelsControls" width="100%" height="120">
				<mx:HBox width="100%">
					<mx:Label text="Flow Cell to Finalize"
							  styleName="formLabel" fontSize="12" />
					<mx:Label text="{flowCellsGrid.selectedItem.@number}"
							  styleName="formLabel" fontSize="12" />
					<mx:Spacer width="100%" />
					<mx:LinkButton textDecoration="underline" label="Refresh"  icon="@Embed('../../assets/action_refresh.gif')" 
								   toolTip="Refresh worklist" click="refresh()"/>
				</mx:HBox>
				<mx:HBox width="100%" verticalAlign="middle">
					<mx:Label text="{this.codeSequencingPlatform == 'MISEQ' ? 'Reagent Cartridge Barcode' : 'Flowcell Barcode'}" styleName="formLabel" 
							  width="{this.codeSequencingPlatform == 'MISEQ' ? 140 : 90}"/>
					<mx:TextInput id="flowCellBarcode" width="130" change="createFlowCellFileName()"
								  fontSize="10" />
					<mx:Label text="Run #" styleName="formLabel" />
					<mx:TextInput id="flowCellRunNumber" width="40" restrict="0-9" change="createFlowCellFileName()"
								  fontSize="10" />
					<mx:Label text="Create Date" styleName="formLabel"
							  width="83" textAlign="right" />
					<mx:DateField id="flowCellDate" showToday="true" change="createFlowCellFileName()"
								  fontSize="10" />
				</mx:HBox>
				<mx:HBox width="100%" verticalAlign="middle">
					<mx:Label text="Instrument" styleName="formLabel"
							  width="70" />
					<mx:ComboBox width="130" id="flowCellInstrument" change="createFlowCellFileName()"
								 labelField="@display"
								 dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Instrument').DictionaryEntry.(@isActive=='Y')}"
								 fontSize="11"></mx:ComboBox>
					<mx:HBox id="hboxGroupSide" paddingTop="0"
							 paddingBottom="0" borderStyle="none" cornerRadius="10"
							 borderColor="#466D88" paddingLeft="0" paddingRight="0">
						<mx:RadioButtonGroup id="flowCellSide" change="createFlowCellFileName()" />
						<mx:RadioButton groupName="flowCellSide"
										label="Side A" styleName="labelSmall" id="radioSideA"
										paddingBottom="0" paddingLeft="4" paddingRight="0"
										paddingTop="0" textAlign="left" horizontalGap="0"
										verticalGap="0" value="A"></mx:RadioButton>
						<mx:RadioButton groupName="flowCellSide"
										label="Side B" styleName="labelSmall" id="radioSideB"
										paddingLeft="0" paddingBottom="0" paddingRight="4"
										paddingTop="0" horizontalGap="0" verticalGap="0"
										value="B"></mx:RadioButton>
					</mx:HBox>
					<mx:Label text="Protocol" styleName="formLabel" width="50"/>
					<mx:ComboBox width="250" id="flowCellProtocol" labelField="@name" rowCount="{sequenceProtocolsList.length}" dataProvider="{sequenceProtocolsList}" visible="{true}" includeInLayout="{true}"
								 change="createFlowCellFileName();flowCellProtocolChangeHandler(event);"/>
				</mx:HBox>
				<mx:HBox horizontalGap="20" verticalAlign="middle" width="100%" includeInLayout="{this.codeSequencingPlatform == 'HISEQ'}" visible="{this.codeSequencingPlatform == 'HISEQ'}">
						
					<mx:Label text="File Name" styleName="formLabel" width="60"/>
					<mx:Label text="{flowCellRunFolder}" width="100%" />
				</mx:HBox>
			</mx:VBox>
			<mx:VBox  width="100%" height="90%">
				<util:AdvancedDataGridGroupedRowColorsFlowCellChannelNumber id="flowCellChannelsGrid" width="100%"
													   height="100%" sortableColumns="true" draggableColumns="false" editable="true"
													   dataProvider="{flowCellChannelsList}" fontSize="10" resizableColumns="true"
													   updateComplete="{}">
					<util:columns>
						<mx:AdvancedDataGridColumn dataField="@number" editable="false"
												   headerText="Experiment" width="75">
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox verticalGap="0"
											 horizontalScrollPolicy="off" horizontalAlign="center"
											 verticalAlign="middle">
										<mx:Label text="Experiment" />
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn width="50" editable="false">
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox verticalGap="0" horizontalScrollPolicy="off"
											 horizontalAlign="center" verticalAlign="middle">
										<mx:Label text="Control" />
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
							<mx:itemRenderer>
								<mx:Component>
									<mx:Box verticalGap="0" horizontalScrollPolicy="off"
											horizontalAlign="center" verticalAlign="middle">
										<mx:CheckBox visible="{data.@editable == 'true'}"
													 includeInLayout="{data.@editable == 'true'}"
													 selected="{data.@isControl == 'Y'}"
													 enabled="false" />
									</mx:Box>
								</mx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn dataField="@flowCellChannelNumber" textAlign="center" editable="false"
												   width="50" >
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox verticalGap="0"
											 horizontalScrollPolicy="off" horizontalAlign="center"
											 verticalAlign="middle">
										<mx:Label text="Lane" />
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn dataField="@sampleIdOligoBarcode"
												   labelFunction="lookupOligoBarcode" width="120" editable="false">
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox verticalGap="0"
											 horizontalScrollPolicy="off" horizontalAlign="center"
											 verticalAlign="middle">
										<mx:Label text="Index Tag A" />
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn dataField="@sampleIdOligoBarcodeB"
												   labelFunction="lookupOligoBarcodeB" width="120" editable="false">
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox verticalGap="0"
											 horizontalScrollPolicy="off" horizontalAlign="center"
											 verticalAlign="middle">
										<mx:Label text="Index Tag B" />
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn width="200"
												   dataField="@idNumberSequencingCyclesAllowed"
												   labelFunction="lookupNumberSequencingCyclesAllowed" editable="false">
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox verticalGap="0"
											 horizontalScrollPolicy="off" horizontalAlign="center"
											 verticalAlign="middle">
										<mx:Label text="Sequencing Protocol" />
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn width="200" editable="true" editorDataField="text"  visible="{parentApplication.getCoreFacilityProperty(selectedFlowCell.@idCoreFacility, parentApplication.PROPERTY_SHOW_SAMPLE_CONC_PM) == 'Y'}"
												   dataField="@flowCellChannelSampleConcentrationpM">
							<mx:itemEditor>
								<mx:Component>
									<mx:TextInput text="{data.@flowCellChannelSampleConcentrationpM}" focusOut="outerDocument.updateSeqLanepMValue()" />
								</mx:Component>
							</mx:itemEditor>
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox verticalGap="0"
											 horizontalScrollPolicy="off" horizontalAlign="center"
											 verticalAlign="middle">
										<mx:Label text="Sample Conc. pM" />
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>
				</util:columns>
			</util:AdvancedDataGridGroupedRowColorsFlowCellChannelNumber>
		</mx:VBox>			
	</mx:VBox>		
	</mx:HDividedBox>
	<mx:ControlBar horizontalAlign="right" width="100%">
		<mx:HBox width="100%" horizontalAlign="left">
		</mx:HBox>
		<util:DirtyNote id="dirty"/>
		<mx:Button label="Delete" id="deleteButton" icon="@Embed(source='../../assets/delete.png')" disabledIcon="@Embed(source='../../assets/delete_disable.png')" click="deleteFC()"/>
		<mx:Button label="Save" id="saveButton" icon="@Embed(source='../../assets/save.png')" disabledIcon="@Embed(source='../../assets/save_disable.png')" click="save()"/>
	</mx:ControlBar>
</mx:VBox>

