<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"  xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%"
	xmlns:util="views.util.*" 
	xmlns:renderers="views.renderers.*" verticalGap="0" paddingTop="0" paddingRight="4" paddingLeft="4" paddingBottom="0"
	initialize="initializeData(0)">
	<mx:HBox verticalAlign="middle" width="100%" >
		<mx:Image source="{parentApplication.iconSolexa}"/>
		<mx:Label id="titleLabel" styleName="titleLabel" 
				  text="" />
		<mx:Spacer width="100%"/>
		
		<mx:HBox  horizontalAlign="center">
			<mx:LinkButton id="instructions" icon="@Embed(source='../../assets/information.png')" label="Instructions" click="{showHideInstructions()}"/>
			<mx:TextArea styleName="instructionBox" visible="false" includeInLayout="false" id="instructionText" wordWrap="false" height="20" paddingLeft="4" paddingRight="4" width="600">
				<mx:htmlText><![CDATA[To assemble flow cell, drag ctrl or seq. req. onto flow cell.  To drag multiple, hold SHIFT or CTRL key while selecting.]]></mx:htmlText>
			</mx:TextArea>	
		</mx:HBox>  
		<mx:LinkButton textDecoration="underline" label="Refresh"  icon="@Embed('../../assets/action_refresh.gif')" 
					   click="refreshWorkList();" toolTip="Refresh worklist"/>
		
	</mx:HBox>
	
	<mx:HTTPService 
		id="getWorkList" 
		url="GetWorkItemList.gx"
		resultFormat="e4x"
		destination="getWorkList"
		showBusyCursor="true"
		result="onGetWorkList(event)"
		fault="parentApplication.onFailHttpRequest('Unable to get work list', event)"
		useProxy="false">
		<mx:request>
			<codeStepNext>{codeStepNext}</codeStepNext>
		</mx:request>
	</mx:HTTPService >
	<mx:HTTPService 
		id="saveWorkItem" 
		url="SaveWorkItemSolexaAssemble.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onSaveWorkItem(event)"
		fault="parentApplication.onFailHttpRequest('Unable to save work list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >    
	
	<mx:HTTPService 
		id="deleteWorkItem"   
		url="DeleteWorkItem.gx" 
		resultFormat="e4x"
		showBusyCursor="true"
		result="onDeleteWorkItem(event)"
		fault="parentApplication.onFailHttpRequest('Unable to delete work item', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	
	<mx:XMLListCollection id="pendingWorkList"  filterFunction="filterPendingWorkList"/> <!-- Left Hand Side Work List -->
	<mx:XMLListCollection id="assembleFlowCellWorkList" sort="{sortRHSList}" filterFunction="filterRHSList" source="{pendingWorkList.source}"/> <!-- Right Hand Side Work List -->
	<mx:Sort id="sortRHSList" compareFunction="sortRHS" />
	<mx:ArrayCollection id="flowCellChannelCountArray" /> <!-- number of flow cell channels that can be selected -->
	<mx:XMLListCollection id="controlsList"  />
	<mx:XMLListCollection id="numberSequencingCyclesAllowedList" source="{parentApplication.dictionaryManager.getEntriesExcludeBlank('hci.gnomex.model.NumberSequencingCyclesAllowed').copy()}" /> <!-- active protocols -->
	<mx:XMLListCollection id="channelCountList" source="{ChannelCount}"/>
		<mx:XMLList id="ChannelCount">
			<FlowCellChannelCount display=""  value=""  />
			<FlowCellChannelCount display="1" value="1" />
			<FlowCellChannelCount display="2" value="2" />
			<FlowCellChannelCount display="3" value="3" />
			<FlowCellChannelCount display="4" value="4" />
			<FlowCellChannelCount display="5" value="5" />
			<FlowCellChannelCount display="6" value="6" />
			<FlowCellChannelCount display="7" value="7" />
			<FlowCellChannelCount display="8" value="8" />
		</mx:XMLList>		
	
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.ComboBox;
			import hci.flex.controls.Label;
			import hci.flex.controls.TextInput;
			
			import mx.collections.Sort;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.rpc.events.ResultEvent;
			
			import views.renderers.ComboBox;
			
			
			[Bindable]
			private var controlsCount:int = 1;
			
			[Bindable]
			public var codeStepNext:String;
			
			private var maxFlowCellCount:int = 0
			private var isValid:Boolean = true;			
			private var warningMessage:String = "";
			
			private function reloadWorklist():void {
				pendingLanesGrid.dataProvider =  null;
				pendingWorkList.filterFunction = this.filterPendingWorkList;
				pendingWorkList.refresh();
				pendingLanesGrid.dataProvider =  pendingWorkList;
				pendingLanesGrid.invalidateList();
				pendingLanesGrid.dataProvider.refresh();
				
			}
			
			public function removePendingLane():void {
				var ids:Dictionary = getSelectedWorkItemIds();
				var idString:String = "";
				for (var key:* in ids) {
					if (idString.length > 0) {
						idString += ",";
					}
					idString += key;
				}
				var params:Object = new Object();
				params.workItemIds = idString;
				
				deleteWorkItem.send(params);
			}
			
			private function promptForRemove():void {
				// ids: idWorkItem -> <WorkItem> (collects all <WorkItems> selected for deletion)
				var ids:Dictionary = getSelectedWorkItemIds();
				// requestCount:  requestNumber -> number of <WorkItem>s to be deleted for this request (used for confirmation alert)
				var requestCount:Dictionary = new Dictionary();
				// length of the ids Dictionary. Amazingly flash.utils.Dictionary does NOT have a length method or property.
				var numIds:int = 0;
				for (var key:* in ids) {
					var item:XML = ids[key];
					//var cnt:int = 0;
					var k1:String = item.@requestNumber.toString();
					if (requestCount[k1] != null) {
						//cnt = requestCount[k1];
						//delete requestCount[k1];
						requestCount[k1]++;
					}else {
					//cnt++;
					requestCount[k1] = 1;
					}
					numIds++;
				}
				
				if (numIds < 1) {
					Alert.show("Please select item(s) to remove", "Select Item");
					return;
				}
				
				var a:Array = new Array();
				for (var ks:* in requestCount) {
					a.push(ks);
				}
				a.sort();
				
				var countString:String = "";
				for (var i:int = 0; i < a.length; i++) {
					var key1:String = a[i];
					var cnt1:int = requestCount[key1];
					countString += "    " + key1 + " (" + cnt1.toString() + " samples)\n";
				}
				var warningMessage:String = "Are you sure you want to remove the following " + numIds + " work items from the work list?\n" + countString;
				Alert.show(warningMessage, "Warning", (Alert.YES | Alert.NO), null, onPromptForRemove);
			}
			
			private function getSelectedWorkItemIds():Dictionary {
				// ids: idWorkItem -> <WorkItem> (collects all <WorkItems> selected for deletion)
				var ids:Dictionary = new Dictionary();
				// add all <WorkItem>s selected for deletion, ignore their parent nodes (<Request>,<MultiplexLane>)
				for each(var item:XML in pendingLanesGrid.selectedItems) {
					getSelectedWorkItemIdsRecurse(ids, item);
				}
				
				return ids;
			}
			
			private function getSelectedWorkItemIdsRecurse(ids:Dictionary, item:XML):void {
				// is this item a <WorkItem> or a parent node (<Request>, <MultiplexLane>)?
				if (item.name() == "WorkItem") {
					// it is a <WorkItem>, did we already add it to ids? (how could that happen?)
					var found:Boolean = false;
					for(var key:* in ids) {
						if (key == item.@idWorkItem) {
							found = true; // we already have it
							break;
						}
					}
					if (!found) { // we didn't already have it. Add it.
						ids[item.@idWorkItem] = item;
					}
				} else { // it is not a <WorkItem>, it is a <Request> or <MultiplexLane>. Recurse.
					for each(var n:XML in item.children()) {
						getSelectedWorkItemIdsRecurse(ids, n);
					}
				}
			}
			
			private function onPromptForRemove(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					removePendingLane();
				}
			}
			
			public function filterPendingWorkList(item:Object):Boolean {
				// if there are no user selected filters, include all
				if ((this.labCombo.selectedItem == null || this.labCombo.selectedItem.@idLab == '') &&
					this.numberOfCyclesFilter.text == '' && 
					this.lookupExperimentNumber.text == '' &&
					(this.seqRunTypeFilterCombo.selectedItem == null || 
						this.seqRunTypeFilterCombo.selectedItem.@idSeqRunType == '')) {
					return true;
				}
				// if a specific experiment number is entered, return only that experiment
				if (this.lookupExperimentNumber.text != '') {
					return item.@number.toString().match(new RegExp(this.lookupExperimentNumber.text + ".*", "i"));
				}
				
				// for number of cycles, seqruntype and lab, include the item unless it fails one of the remaining user selected filters
				var matchesCycles:Boolean = true;
				var matchesSeqRunType:Boolean = true;
				var matchesLab:Boolean = true;
				if(numberOfCyclesFilter.text != '') {
					if(item.@numberSequencingCycles != numberOfCyclesFilter.text) {
						matchesCycles = false;
					}
				}
				if (this.seqRunTypeFilterCombo.selectedItem != null && this.seqRunTypeFilterCombo.selectedItem.@idSeqRunType != '') {
					if (item.@idSeqRunType != seqRunTypeFilterCombo.selectedItem.@idSeqRunType) {
						matchesSeqRunType = false;
					}
				}
				if (labCombo.selectedItem != null && labCombo.selectedItem.@idLab != '') {
					if (item.@idLab != labCombo.selectedItem.@idLab) {
						matchesLab = false;
					}
				}
				return matchesCycles && matchesSeqRunType && matchesLab;
			}
			
			public function filterRHSList(item:Object):Boolean {
				if(item.hasOwnProperty("@flowCellChannelNumber") && item.@flowCellChannelNumber != '') {
					return true;
				} else {
					return false;
				}
			}
				
			
			// called by NavWorkflowView/onHiSeqWorklistChange
			public function initializeData(maxFlowCells:int):void {
				maxFlowCellCount = maxFlowCells;
				flowCellChannelCountArray = new ArrayCollection();
				flowCellChannelCountArray.addItem("");
				for(var i:int = 1; i <= maxFlowCellCount; i++) {
					flowCellChannelCountArray.addItem(i);
				}
				
				//assembleFlowCellWorkList.source = new XMLList();				
				//maxFlowCellCount = maxFlowCells;
				
				if(codeStepNext == 'HSEQASSEM'){
					titleLabel.text = 'Illumina HiSeq Seq Run Setup';
					hboxGroupSide.visible = true;
					hboxGroupSide.includeInLayout = true;
				} else if (codeStepNext == 'MISEQASSEM') {
					titleLabel.text = 'Illumina MiSeq Seq Run Setup';
					hboxGroupSide.visible = false;
					hboxGroupSide.includeInLayout = false;
				}
		
				initializeControlsList();
				numberSequencingCyclesAllowedList.source = parentApplication.dictionaryManager.getEntriesExcludeBlank('hci.gnomex.model.NumberSequencingCyclesAllowed').copy();
				numberSequencingCyclesAllowedList.addItemAt(new XML('<Default name="Choose a protocol..." />'),0);
				flowCellProtocolChooser.dataProvider= numberSequencingCyclesAllowedList;
				flowCellProtocolChooser.initialize();				
			}
			
			private function initializeControlsList():void {
				controlsList.source = parentApplication.dictionaryManager.getEntriesExcludeBlank('hci.gnomex.model.SequencingControl').copy();
				controlsCount = controlsList.source.length();
				for each(var control:XML in controlsList) {
					control.@number = control.@display;	
					control.@editable = "true";
					control.@isControl = "true";
				}
				controlsList.refresh();
				controlsGrid.dataProvider = controlsList;
				controlsGrid.initialize();
				
			}
			private function onGetWorkList(event:ResultEvent):void {
				if (event.result.name() == "WorkItemList") {					
					pendingWorkList.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingWorkItemDataChange);
					initializePendingWorkList()
					this.pendingLanesGrid.validateNow();
					pendingWorkList.refresh();
					initializeControlsList();
				} else {
					Alert.show(event.result..ERROR.@message.toString(), "Error getting work list");
				}
			}
			
			private function initializePendingWorkList():void {
				var source:XMLListCollection  = new XMLListCollection(getWorkList.lastResult.Request.MultiplexLane.WorkItem.copy());
				for each(var wi:XML in source) {
					wi.@idRequestAndMultiplexGroup = wi.@idRequest + "-" + wi.@multiplexGroupNumber;
				}
				pendingWorkList.source = source.copy();
			}
			
			
			private function underlyingWorkItemDataChange(event:CollectionEvent):void {
				if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
					// ignore refresh and resets to work list
				} else if(["@flowCellChannelNumber","@isChecked"].indexOf(event.items[0].property) > -1) {
					// ignore
				}else {
					//dirty.setDirty();
				}
			}
			
			private function refreshWorkList():void {
				this.labCombo.selectedItem = null;
				this.numberOfCyclesFilter.text = "";
				seqRunTypeFilterCombo.selectedItem = null;
				pendingWorkList.filterFunction = this.filterPendingWorkList;
				//assembleFlowCellWorkList = new XMLListCollection; // XMLListCollection.removeAll() doesn't work, leaves one node
				//dirty.resetDirty();
				getWorkList.send();

			}
			
			private function save():void {								
				warningMessage = "";
				isValid = true;
				if(flowCellProtocolChooser.selectedIndex == 0) {
					isValid = false;
					warningMessage += "Please choose a sequencing protocol for the flow cell.\n\n";
					Alert.show(warningMessage, "Warning");
					return;
				}
				if (assembleFlowCellWorkList.length > 0) {
					validateNumberOfLanes();
					validateSequencingControl();
					validateProtocol();
					validateIndexTags();
					//validateSeqRunType();
					//validateNumberSequencingCycles();
				}
				if (isValid) {
					saveWorkItems();				    
				} else {
					promptForWarning();
				}
			}
			private function validateNumberOfLanes():void {
				var tmp:ArrayCollection = new ArrayCollection(["1","2","3","4","5","6","7","8"]);
				for each(var tmpx:XML in assembleFlowCellWorkList) {
					if(tmpx.hasOwnProperty("@flowCellChannelNumber") && tmp.contains(tmpx.@flowCellChannelNumber.toString())) {
						tmp.removeItemAt(tmp.getItemIndex(tmpx.@flowCellChannelNumber.toString()));
						tmp.refresh();
					}
				}
				if (tmp.length > 0) {
					if(maxFlowCellCount > 1) {
						warningMessage = "Not all " + maxFlowCellCount + " channels are populated.\n\n";
					} else {
						warningMessage = "The channel is not populated.\n\n";
					}
					isValid = false;
				}					
			}			
			// Warn if no channel is selected as a control
			private function validateSequencingControl():void {
				var theItem:Object;
				var item:Object;
				var controlCount:int = 0;
				
				// Make sure at least one sequencing control specified
				for each (theItem in assembleFlowCellWorkList) {
					if (theItem.hasOwnProperty("@idSequencingControl")) {
						controlCount++;
					} else if (theItem != null && theItem.hasOwnProperty("@isControl") && theItem.@isControl != null && theItem.@isControl == "true") {
						controlCount++;
					}
				}
				if (controlCount == 0) {
					warningMessage += "No sequencing control specified for any of the channels.\n\n";
				}
			}			
			//Warn if not all channels are of the same protocol type
			private function validateProtocol():void {
				var firstProtocol:String = '';
				// get the protocol of the first WorkItem in the list
				for each(var wi:XML in assembleFlowCellWorkList) {
					if(wi.name() == "DictionaryEntry") {
						continue;
					} else {
						firstProtocol = wi.@idNumberSequencingCyclesAllowed;
						break;
					}
				}
				for each(wi in assembleFlowCellWorkList) {
					if(wi.name() == "DictionaryEntry") {
						continue;
					} else if(wi.@idNumberSequencingCyclesAllowed == firstProtocol) {
						continue;
					} else {
						warningMessage += "The flow cell channels have samples destined for different sequence lane types.\n\n";
						isValid = false;
						break;
					}
				}
			}
			private function validateIndexTags():void {
				for each(var i:int in flowCellChannelCountArray) {
					if(!areIndexTagsUnique(i)) {
						warningMessage += "Two or more samples in channel " + i + " have the same index tags. This should only occur when samples (and their sequence reads) are meant to be pooled.\n\n";
						isValid=false;
					}
				}
			}
			private function areIndexTagsUnique(multiplexGroupNumber:Object):Boolean {
				var workItemCount:int = 0;
				var sequenceTagMap:Object = new Object();
				for each(var wi:Object in assembleFlowCellWorkList) {
					if (wi.@multiplexGroupNumber == multiplexGroupNumber) {
						var tag:Object = wi.@barcodeSequence + "-" + wi.@barcodeSequenceB;
						sequenceTagMap[tag] = tag;					// if two tags are the same the second will overwrite the first
						workItemCount++;							// number of workItems in the multiplexGroupNumber group of interest
					}
				}
				var uniqueTagCount:int = 0;
				for (var sequenceTag:Object in sequenceTagMap) {
					uniqueTagCount++;								// the map has stored only unique tags
				}
				
				return uniqueTagCount == workItemCount;			// if two tags were identical these will not match
			}
			
			private function saveWorkItems():void {
				//    		var dirtyStatusWorkItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');
				//    		if ( this.dirtyChannelWorkList.length == 0 && dirtyStatusWorkItems.length == 0) {
				//    			Alert.show("No changes have been made.");
				//    			return;
				//    		}
				
				var params:Object = new Object();
				params.flowCellBarcode = this.flowCellBarcode.text;
				params.flowCellDate = this.flowCellDate.text;
				params.workItemXMLString = assembleFlowCellWorkList.toXMLString();
				if(codeStepNext == 'SEQASSEM') {
					params.codeStepNext = 'SEQPIPE';
				} else if (codeStepNext == 'HSEQASSEM') {
					params.codeStepNext = 'HSEQFINFC'; // new step between assem and pipe
				} else if (codeStepNext == 'MISEQASSEM') {
					params.codeStepNext = 'MISEQFINFC';
				}
				params.runNumber = this.runNumber.text;
				params.idNumberSequencingCyclesAllowed = this.flowCellProtocolChooser.selectedItem.@idNumberSequencingCyclesAllowed
				params.side = this.radiogroupSide.selectedValue;
				
				if (this.comboInstrument.selectedItem != null && this.comboInstrument.selectedItem.@value != '') {
					params.idInstrument = this.comboInstrument.selectedItem.@value;
				}
				
				// These are the work items still on the cluster
				// gen work list that have a new status 
				//    		params.dirtyWorkItemXMLString = dirtyStatusWorkItems.toXMLString();     	
				
				saveWorkItem.send(params);
			}	
			
			private function promptForWarning():void {
				if (warningMessage != "") {
					warningMessage += "Continue saving?";
					Alert.show(warningMessage, "Warning", (Alert.YES | Alert.NO), null, onPromptForWarning);
				}
			}
			private function onPromptForWarning(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					saveWorkItems();
				}
			}
			
//			public function getPendingTreeIcon(item:Object):Class {
//				if (item == null) {
//					return null;  				
//				} else if (item.name() == "Request") {
//					if (item.@codeRequestCategory == "SOLEXA") {
//						return parentApplication.iconSolexa;
//					} else if (item.@codeRequestCategory == "HISEQ") {
//						return parentApplication.iconHiSeq;
//					} else if (item.@codeRequestCategory == "MISEQ") {
//						return parentApplication.iconMiSeq;
//					} else {
//						return null;
//					}
//				} else {
//					return null;
//				}
//			}
//			
			//
			// Need to use these label functions instead of LabelDictionary item renderer because drag image is blank otherwise.
			//
			private function lookupSeqRunType(item:Object, col:Object):String {
				if (item != null  && item.hasOwnProperty("@idSeqRunType")) {
					var d:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SeqRunType', item.@idSeqRunType);
					if (d != null) {
						return d.@display;
					} else {
						return "";
					}
				} else {
					return "";
				}
			}		
			private function lookupNumberSequencingCycles(item:Object, col:Object):String {
				if (item != null  && item.hasOwnProperty("@idNumberSequencingCycles")) {
					var d:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.NumberSequencingCycles', item.@idNumberSequencingCycles);
					if (d != null) {
						return d.@display; 
					} else {
						return "";
					}
				} else {
					return "";
				}
			}		
			private function lookupOligoBarcode(item:Object, col:Object):String {
				if (item != null && item.hasOwnProperty("@idOligoBarcode")) {
					if (item.@idOligoBarcode != '') {
						return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.OligoBarcode", item.@idOligoBarcode);    		
					} else {
						return item.@barcodeSequence;
					}
				} else {
					return "";
				}
				
			}			
			private function lookupOligoBarcodeB(item:Object, col:Object):String {
				if (item != null && item.hasOwnProperty("@idOligoBarcodeB")) {
					if (item.@idOligoBarcodeB != '') {
						return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.OligoBarcode", item.@idOligoBarcodeB);    		
					} else {
						return item.@barcodeSequenceB;
					}
				} else {
					return "";
				}
				
			}
			
			private function onSaveWorkItem(event:ResultEvent):void {
				if (saveWorkItem.lastResult.name() == "WorkItemList" || saveWorkItem.lastResult.name() == "SUCCESS" ) {
					if (saveWorkItem.lastResult.hasOwnProperty("@flowCellNumber") && saveWorkItem.lastResult.@flowCellNumber != "") {
						Alert.show("Flow Cell " + saveWorkItem.lastResult.@flowCellNumber + " has been created.");    			
					}
//					dirty.resetDirty();
					this.getWorkList.send();
					//        		this.getNextWorkList.send();
//					assembleFlowCellWorkList.removeAll();
//					this.flowCellBarcode.text = "";
					
				} else {
					Alert.show(saveWorkItem.lastResult..ACTMESSAGE.@TEXT);
				}        	
			}    
			private function onDeleteWorkItem(event:ResultEvent):void {
				if (deleteWorkItem.lastResult.name() == "SUCCESS") {
					this.getWorkList.send();
				} else {
					Alert.show(deleteWorkItem.lastResult..ACTMESSAGE.@TEXT);
				}        	
			}
			
			private function showHideInstructions():void {
				if (instructionText.visible) {
					instructionText.visible = false;
					instructionText.includeInLayout = false;
					instructions.label = "Instructions";
				} else {
					instructionText.visible = true;
					instructionText.includeInLayout = true;
					instructions.label = "Hide instructions";
				}
			}
			
//////////////////////////////////////////////////////////////////////////////////////////			
			
			public function addOrRemoveRHS(event:Event):void {
//				if(!event.currentTarget.parentDocument.data.hasOwnProperty("@flowCellChannelNumber") || event.currentTarget.parentDocument.data.@flowCellChannelNumber == "") {
//					Alert.show("Please select a flowCellChannelNumber first", "No flowCellChannelNumber Selected");
//					//event.currentTarget.selected = false;
//					return;
//				}
				for each(var workItem:XML in assembleFlowCellWorkList) {
					if(event.currentTarget.parentDocument.data.hasOwnProperty("@number") && event.currentTarget.parentDocument.data.@number == workItem.@number) {							
						event.currentTarget.parentDocument.data.@isChecked = "false";
						removeFromRHS(workItem);
						assembleFlowCellWorkList.sort=sortRHSList;				
						assembleFlowCellWorkList.refresh();
						return;	// the RHS contained the value, we have removed it
					}			
				}
				var cp:XML = new XML(event.currentTarget.parentDocument.data.toXMLString()); // make a copy instead of just adding event.currentTarget.data, for some reason that is making duplicates in the LHSList!
				event.currentTarget.parentDocument.data.@isChecked = "true";
				addToRHS(cp);
				sortRHSList.compareFunction=sortRHS;						
				assembleFlowCellWorkList.sort=sortRHSList;				
				assembleFlowCellWorkList.refresh();
			}
			
			public function removeFromRHS(workItem:XML):void {
				// are we removing the first workItem in a flowCellChannel? The first workItem contains information for whether this channel is a "control" channel
				if(workItem.@editable != null && workItem.@editable == "true") {
					// it is, is there another workItem in this flowCellChannel?
					var i:int = -1;
					for each(var tempWorkItem:XML in assembleFlowCellWorkList) {
						i++;
						// don't compare the workItem with itself
						if(tempWorkItem == workItem) {
							//delete assembleFlowCellWorkList.source[i];
							assembleFlowCellWorkList.removeItemAt(i);
							continue;
						}
						if(tempWorkItem.@flowCellChannelNumber == workItem.@flowCellChannelNumber) {							
							tempWorkItem.@editable = "true";		// we marked a new first workItem						
							// it could be a "control" channel but is it? If so, mark the new first workItem to reflect this
							if(workItem.@isControl == "true") {
								tempWorkItem.@isControl = "true";
							}
							break;
						}
					}
				} // it is not the first work item, just remove it.
				else {
					var j:int = -1;
					for each(tempWorkItem in assembleFlowCellWorkList) {
						j++;						
						if(tempWorkItem == workItem) {
							//delete assembleFlowCellWorkList.source[j];
							assembleFlowCellWorkList.removeItemAt(j);
							break;
						}
					}
					
				}
				
			}
			
			
			public function addToRHS(workItem:XML):void {
				// Auto-select the flow cell protocol if none is selected
				if(flowCellProtocolChooser.selectedItem.@name == "Choose a protocol..." || workItem.name() != "DictionaryEntry") {
					for each(var temp:XML in flowCellProtocolChooser.dataProvider) {
						if(workItem.@idNumberSequencingCyclesAllowed == temp.@idNumberSequencingCyclesAllowed) {
							flowCellProtocolChooser.selectedItem = temp;
							break;
						}
					}
				}
				// Warn if this item does not have the same protocol as the flow cell
				if(workItem.name() != "DictionaryEntry") {
					if(workItem.@idNumberSequencingCyclesAllowed != flowCellProtocolChooser.selectedItem.@idNumberSequencingCyclesAllowed) {
						Alert.show("Lane protocol type incompatible with flow cell protocol type.", "Warning");
					}
				}
				workItem.@hasFlowCell = "true"; // need flag for AdvancedDataGridGroupedRowColors
				for each(var tempWorkItem:XML in assembleFlowCellWorkList) {				
					if(tempWorkItem.@flowCellChannelNumber == workItem.@flowCellChannelNumber) {
						assembleFlowCellWorkList.addItem(workItem);
						return;									// this is not the first for this flowCellChannel
					}
				}
				workItem.@editable = "true";					// this is the first for this flowCellChannel
				assembleFlowCellWorkList.addItem(workItem);
				
			}
			
			public function updateIsControl(event:Event):void {
				firstLoop: for each(var flowCellChannel:XML in assembleFlowCellWorkList) {
						if(event.currentTarget.parentDocument.data.hasOwnProperty("@number") && event.currentTarget.parentDocument.data.@number == flowCellChannel.@number) {
							if(event.currentTarget.parentDocument.data.hasOwnProperty("@isControl") && event.currentTarget.parentDocument.data.@isControl == 'true') {
								event.currentTarget.parentDocument.data.@isControl = 'false';
							} else {
								event.currentTarget.parentDocument.data.@isControl = 'true'
							}
							break firstLoop;
						}
				}
				
			}
			
			public function updateLane(event:Event, laneNumber:String):void {
				var LHS:XMLListCollection;
				event.currentTarget.parentDocument.data.name() == "DictionaryEntry" ? LHS = controlsList :LHS = pendingWorkList;
				
				// update the WorkItem (or SequenceControl DictionaryEntry) in the left hand side (LHS)
				var workItemLHS:XML;
				LHSLoop:for each(workItemLHS in LHS.source) {
					if(event.currentTarget.parentDocument.data.hasOwnProperty("@number") && event.currentTarget.parentDocument.data.@number == workItemLHS.@number) {
						workItemLHS.@flowCellChannelNumber = laneNumber;
						break LHSLoop;
					}
				}
				// 
//				var workItemRHS:XML;
//				RHSLoop:for each(workItemRHS in assembleFlowCellWorkList) {
//					if(event.currentTarget.parentDocument.data.hasOwnProperty("@number") && event.currentTarget.parentDocument.data.@number == workItemRHS.@number) {
//						// it exists in the assemble flowcell grid (RHS). If it is the first in a channel we have to update more than just the laneNumber, instead let's remove and add it.
//						if(laneNumber == "") {
//							removeFromRHS(workItemRHS);
//						} else {
//							removeFromRHS(workItemRHS);
//							addToRHS(workItemLHS.copy());
//						}
//						break RHSLoop;
//					}
//				}
				addOrRemoveRHS(event);
			}
			
			public function updateProtocol(event:Event, item:Object):void {
				var LHS:XMLListCollection;
				LHS = pendingWorkList;
				
				LHSLoop:for each(var workItem:XML in LHS.source) {
					if(event.currentTarget.parentDocument.data.hasOwnProperty("@number") && event.currentTarget.parentDocument.data.@number == workItem.@number) {
						workItem.@idNumberSequencingCyclesAllowed = item.@idNumberSequencingCyclesAllowed;
						break LHSLoop;
					}
				}
				RHSLoop:for each(workItem in assembleFlowCellWorkList) {
					if(event.currentTarget.parentDocument.data.hasOwnProperty("@number") && event.currentTarget.parentDocument.data.@number == workItem.@number) {
						workItem.@idNumberSequencingCyclesAllowed = item.@idNumberSequencingCyclesAllowed;
						break RHSLoop;
					}
				}				
			}
			
			public function getchannelNumber(laneNumber:String):int {
				if(laneNumber == null || laneNumber == '') 
				{ return 0; } 
				else {return int(laneNumber);}	
			}
			
			public function getNumberSequencingCyclesAllowedIndex(data:Object):int {
				var i:int = -1;
				for each(var x:XML in numberSequencingCyclesAllowedList) {
					i++;
					if(x.@idNumberSequencingCyclesAllowed == data.@idNumberSequencingCyclesAllowed) {
						return i;
					}
				}
				return -1;				
			}
			 
			private function lookupNumberSequencingCyclesAllowed(item:Object, col:Object):String {			
				if (item != null  && item.hasOwnProperty("@idNumberSequencingCyclesAllowed")) {
					var d:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.NumberSequencingCyclesAllowed', item.@idNumberSequencingCyclesAllowed);
					if (d != null) {
						return d.@name; 
					} else {
						return "";
					}
				} else {
					return "";
				}
			}	
			
			public function sortRHS(a:Object, b:Object, fields:Array = null ):int {
				var result:int = 0;
				var i:int = 0;
				var propList:Array = fields ? fields : ['@flowCellChannelNumber'];
				var len:int = propList.length;
				var propName:String;
				while (result == 0 && (i < len)) {
					propName = propList[i];
					result = compareValues(a[propName], b[propName]);					
					i++;
				}
				// there was a tie, but if one is editable it needs to go UP
				if(result == 0 && (a.hasOwnProperty('@editable') || b.hasOwnProperty('@editable'))){
					if(a.@editable == 'true') {
						return -1;
					} else {
						return 1;
					}
				}else {
					return result;					
				}
				
			}
			public function compareValues(a:Object, b:Object):int {
				if(a == null && b == null)
					return 0;
				if(a == null)
					return 1;
				if(b == null)
					return -1;
				if (a < b)
					return -1;
				if (a > b)
					return 1;
				return 0;
			}			
			
		]]>
	</mx:Script>
	
	<mx:HBox width="100%" height="100%">
		<!--																______________________________LHS START______________________________ 															-->
		<mx:VBox width="50%" height="100%">
			<mx:VBox width="100%" height="10%">
				<mx:HBox width="100%">
					<mx:Label text="Pending Sequence Lanes" fontWeight="normal" styleName="formLabel" fontSize="12"/>
					<mx:Spacer width="100%"/>
					<mx:Label text="{'(' + pendingWorkList.length + ' experiments)'}" fontWeight="normal" fontSize="11" fontStyle="italic"/>
				</mx:HBox>
				<mx:HBox paddingTop="0" width="100%" verticalAlign="middle" paddingBottom="1" horizontalGap="8">
					<mx:HBox verticalAlign="middle"  horizontalGap="0">
						<mx:Label text="# Cycles" styleName="labelSmall" width="70"/>
						<mx:TextInput width="60" id="numberOfCyclesFilter" change="{lookupExperimentNumber.text='';reloadWorklist()}" enter="{lookupExperimentNumber.text='';reloadWorklist();}"  fontSize="10"/>
					</mx:HBox>
					<mx:HBox horizontalGap="1" borderStyle="none" cornerRadius="10" borderColor="#466D88" styleName="labelSmall">
						<renderers:FilterComboBox dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SeqRunType').DictionaryEntry.(@isActive == 'Y' &amp;&amp; @display != '')}" 
												  labelField="@display" fontSize="11"
												  prompt="Select a Sequence Run Type..." close="{lookupExperimentNumber.text='';this.reloadWorklist();}" 
												  width="200"
												  id="seqRunTypeFilterCombo" >
						</renderers:FilterComboBox>
					</mx:HBox>
				</mx:HBox>
				<mx:HBox width="100%"  horizontalGap="8" paddingBottom="2" paddingTop="2">
					<mx:HBox verticalAlign="middle"   horizontalGap="0">
						<mx:Label text="Experiment #" styleName="labelSmall" width="70"/>
						<mx:TextInput width="60" id="lookupExperimentNumber" change="{reloadWorklist()}" enter="{reloadWorklist()}"  fontSize="10"/>
					</mx:HBox>					
					<renderers:FilterComboBox dataProvider="{parentApplication.submitRequestLabList.source}" 
											  labelField="@name" fontSize="11"
											  prompt="Select a lab..." close="{lookupExperimentNumber.text='';this.reloadWorklist();}" 
											  width="200"
											  id="labCombo" >
					</renderers:FilterComboBox>
					<mx:Spacer width="100%"/>
					<mx:Button id="removePendingLaneButton" icon="@Embed(source='../../assets/delete.png')" width="24" disabledIcon="@Embed(source='../../assets/delete_disable.png')" click="promptForRemove()">
						<!--<mx:enabled>{pendingLanesGrid.selectedItems.length > 0 ? true : false}</mx:enabled>-->
						<mx:enabled>{false}</mx:enabled>
					</mx:Button>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="100%" height="80%">
				<util:AdvancedDataGridGroupedRowColorsIdRequestAndMultiplexGroup
					id="pendingLanesGrid" width="100%" height="100%" 
					sortableColumns="false" 				
					fontSize="10"
					resizableColumns="false"
					dataProvider="{pendingWorkList}"
					allowMultipleSelection="true"
					editable="true"
					>
					<util:columns>
						<mx:AdvancedDataGridColumn dataField="@number" editable="false" headerText="Experiment" width="75" >
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox width="75" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
										<mx:Label text="Experiment"/>
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>
						<!-- <mx:AdvancedDataGridColumn id="checkboxcolumn" width="20">			
							<mx:itemRenderer>
								<mx:Component>
									<mx:VBox width="20" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
										<mx:CheckBox id="checkbox" selected="{data.@isChecked == 'true'}" click="outerDocument.addOrRemoveRHS(event);" visible="true" includeInLayout="true" />
									</mx:VBox>
								</mx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn> -->
						<!--<mx:AdvancedDataGridColumn id="channelChooserColumn1" width="100" headerText="Select&#13;Channel"
												   dataField="@display" editable="true" visible="true"
												   
												   itemEditor="{views.renderers.GridColumnFillButton.create(views.renderers.ComboBox.create(ChannelCount,'@display', '@value', '@flowCellChannelNumber', null, true).newInstance(), 'idRequestAndMultiplexGroup')}" 
												   
												   />-->
						<mx:AdvancedDataGridColumn id="channelChooserColumn" width="100" headerText="Select&#13;Channel"
												   dataField="@flowCellChannelNumber" editable="true"
												   rendererIsEditor="false"
												   itemRenderer="{hci.flex.controls.Label.create('@flowCellChannelNumber')}"
												   itemEditor="{views.renderers.GridColumnFillButton.create(views.renderers.ComboBox.create(ChannelCount,'@display', '@value', '@flowCellChannelNumber', null, true).newInstance(), 'idRequestAndMultiplexGroup')}" 
												   editorDataField="value"
												   
												   />
				<!--		<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sampleTypeCol"  headerText="Sample Type" visible="true" width="180"   dataField="@idSampleType" 
															 editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
															 itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType', true, true)}"                 
															 itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType', true).newInstance(), '')}"/>
-->
				<!--		<mx:AdvancedDataGridColumn id="multiplexGroupNumberEditColumn" headerText="Multiplex Group #" dataField="@multiplexGroupNumber" editable="true" visible="true"
												   width="69" rendererIsEditor="false" itemRenderer="{hci.flex.controls.Label.create('@multiplexGroupNumber')}"
												   itemEditor="{views.renderers.GridColumnFillButton.create(views.renderers.TextInput.create('@multiplexGroupNumber', true, '0-9').newInstance(), '')}" editorDataField="value"
												   showDataTips="true"/> -->
				<!--		<mx:AdvancedDataGridColumn  id="laneChooserColumn" width="100" headerText="Select&#13;Channel" editable="false" >
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox width="50" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
										<mx:Label text="Select" />
										<mx:Label text="Channel" />
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>				
							<mx:itemRenderer  >
								<mx:Component>
									<mx:VBox width="50" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
										<mx:ComboBox id="flowCellLaneChooser" width="50" rowCount="{parentDocument.maxFlowCellCount}" dataProvider="{parentDocument.flowCellChannelCountArray}" visible="{data.name() == 'WorkItem'}" includeInLayout="{data.name() == 'WorkItem'}"
													 change="outerDocument.updateLane(event, flowCellLaneChooser.selectedLabel)"
													 selectedIndex="{outerDocument.getchannelNumber(data.@flowCellChannelNumber)}"										  />
									</mx:VBox>
								</mx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn> -->
						<mx:AdvancedDataGridColumn dataField="@idOligoBarcode" labelFunction="lookupOligoBarcode" width="120" editable="false">
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox width="120" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
										<mx:Label text="Index"/>
										<mx:Label text="Tag A"/>
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn dataField="@idOligoBarcodeB" labelFunction="lookupOligoBarcodeB" width="120" editable="false">
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox width="120" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
										<mx:Label text="Index"/>
										<mx:Label text="Tag B"/>
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn id="protocolChooserColumn" width="300" headerText="Select&#13;Protocol"
												   dataField="@idNumberSequencingCyclesAllowed" editable="false"
												   rendererIsEditor="false"
												   itemRenderer="{views.renderers.DropdownLabel.create(numberSequencingCyclesAllowedList.source, '@display', '@value', '@idNumberSequencingCyclesAllowed', true, true)}"
												   itemEditor="{views.renderers.GridColumnFillButton.create(views.renderers.ComboBox.create(numberSequencingCyclesAllowedList.source,'@display', '@value', '@idNumberSequencingCyclesAllowed', null, true).newInstance(), 'idRequestAndMultiplexGroup')}" 
												   editorDataField="value"
												   
												   />
						<!--<mx:AdvancedDataGridColumn width="300"  >
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox width="300" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
										<mx:Label text="NumberSequencing"/>
										<mx:Label text="CyclesAllowed"/>
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
							<mx:itemRenderer>
								<mx:Component>
									<mx:VBox width="300" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
										<mx:ComboBox width="300" id="numberSequencingCyclesAllowedChooser" labelField="@name" rowCount="{outerDocument.numberSequencingCyclesAllowedList.length}" dataProvider="{outerDocument.numberSequencingCyclesAllowedList}"  visible="{true}" includeInLayout="{true}"
													 change="outerDocument.updateProtocol(event, numberSequencingCyclesAllowedChooser.selectedItem)"	 
													 selectedIndex="{outerDocument.getNumberSequencingCyclesAllowedIndex(data)}"
													 										  />
									</mx:VBox>									
								</mx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>-->
						<mx:AdvancedDataGridColumn />
					</util:columns>		
				</util:AdvancedDataGridGroupedRowColorsIdRequestAndMultiplexGroup>
			</mx:VBox>
			<mx:HBox width="100%" height="8%" verticalGap="0" borderStyle="solid">				
				<mx:AdvancedDataGrid id="controlsGrid" width="145" height="100%"
									 fontSize="10" resizableColumns="false" sortableColumns="false"
									 visible="{controlsCount == 0 ? false : true}" borderStyle="none"
									 dataProvider="{controlsList}">
					<mx:columns>
						<mx:AdvancedDataGridColumn  dataField="@number" width="75">
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox width="75" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle" maxWidth="150" >
										<mx:Label width="75" text="Control"/>										
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>
					<!--<mx:AdvancedDataGridColumn width="20">			
							<mx:itemRenderer>
								<mx:Component>
									<mx:VBox width="20" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
										<mx:CheckBox id="checkbox" selected="{data.@isChecked == 'true'}" change="outerDocument.addOrRemoveRHS(event);" visible="true" includeInLayout="true" />
									</mx:VBox>
								</mx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>-->
						<mx:AdvancedDataGridColumn width="45">	
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox width="45" verticalGap="0"    horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle" height="30"  maxWidth="60">
										<mx:Label width="45" text="Select"/>
										<mx:Label width="45" text="Lane"/>
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
							<mx:itemRenderer>
								<mx:Component>
									<mx:VBox width="45"  verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle"  maxWidth="60">								
										<mx:ComboBox width="45" id="flowCellLaneChooser"  rowCount="{parentDocument.maxFlowCellCount}" dataProvider="{parentDocument.flowCellChannelCountArray}" visible="{data.name() == 'DictionaryEntry'}" includeInLayout="{data.name() == 'DictionaryEntry'}"
													 change="parentDocument.updateLane(event, flowCellLaneChooser.selectedLabel)"
													 selectedIndex="{parentDocument.getchannelNumber(data.@flowCellChannelNumber)}"								  />
									</mx:VBox>
								</mx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>						
					</mx:columns>				
				</mx:AdvancedDataGrid>
				<mx:DataGrid dataProvider="{pendingLanesGrid.selectedItems}" fontSize="8">
					<mx:columns>							
						<mx:DataGridColumn dataField="@number" headerText="Num" />
						<mx:DataGridColumn dataField="@idRequest" headerText="Req"/>
						<mx:DataGridColumn dataField="@multiplexGroupNumber" headerText="Mplex" />
						<mx:DataGridColumn dataField="@idRequestAndMultiplexGroup" headerText="idReq&amp;Mplex"/>
						<mx:DataGridColumn dataField="@flowCellChannelNumber" headerText="Chnl"/>
						<mx:DataGridColumn dataField="@codeRequestCategory" headerText="ReqCat" />
						<mx:DataGridColumn dataField="@idSeqRunType" headerText="SeqType" labelFunction="lookupSeqRunType" />
						<mx:DataGridColumn dataField="@idNumberSequenceCycles" headerText="NumCycls" labelFunction="lookupNumberSequencingCycles"/>						
					</mx:columns>
				</mx:DataGrid>
			</mx:HBox>
		</mx:VBox>
		<!-- 																______________________________LHS END______________________________ 															-->
		<!-- 																______________________________RHS START______________________________ 															-->
		<mx:VBox width="50%" height="100%">
			<mx:VBox width="100%" height="10%">
				<mx:Label text="Flow Cell to Assemble" styleName="formLabel" fontSize="12"/>
				<mx:HBox width="100%" verticalAlign="middle">
					<mx:Label text="Barcode" styleName="formLabel" width="70"/>
					<mx:TextInput id="flowCellBarcode" width="130" fontSize="10"/>
					<mx:Label text="Run #" styleName="formLabel"/>
					<mx:TextInput id="runNumber" width="40" restrict="0-9" fontSize="10"/>
					<mx:Label text="Create Date" styleName="formLabel" width="83" textAlign="right"/>
					<mx:DateField id="flowCellDate" showToday="true" fontSize="10"/>
				</mx:HBox>
				<mx:HBox width="100%" verticalAlign="middle">
					<mx:Label text="Instrument" styleName="formLabel" width="70"/>
					<mx:ComboBox width="130" id="comboInstrument"
								 labelField="@display"
								 dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Instrument').DictionaryEntry.(@isActive=='Y')}" fontSize="11">
					</mx:ComboBox>
					<mx:HBox id="hboxGroupSide" paddingTop="0" paddingBottom="0" borderStyle="none" cornerRadius="10" borderColor="#466D88" paddingLeft="0" paddingRight="0">
						<mx:RadioButtonGroup id="radiogroupSide"/>
						<mx:RadioButton groupName="radiogroupSide" label="Side A" styleName="labelSmall" id="radioSideA" paddingBottom="0" paddingLeft="4" paddingRight="0" paddingTop="0" textAlign="left" horizontalGap="0" verticalGap="0" value="A">
						</mx:RadioButton>
						<mx:RadioButton groupName="radiogroupSide" label="Side B" styleName="labelSmall" id="radioSideB" paddingLeft="0" paddingBottom="0" paddingRight="4" paddingTop="0" horizontalGap="0" verticalGap="0" value="B">
						</mx:RadioButton>
					</mx:HBox>
					
				</mx:HBox>
				<mx:HBox horizontalGap="20" verticalAlign="middle">
					<mx:Label text="Protocol" styleName="formLabel" width="60"/>
					<mx:ComboBox width="300" id="flowCellProtocolChooser" labelField="@name" rowCount="{numberSequencingCyclesAllowedList.length}" dataProvider="{numberSequencingCyclesAllowedList}" visible="{true}" includeInLayout="{true}"
								 />	
				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="100%" height="90%">
			<util:AdvancedDataGridGroupedRowColorsFlowCellChannelNumber  id="assembleFlowCellGrid" width="100%" height="100%" displayItemsExpanded="true"
								 sortableColumns="false" 
								 dataProvider="{assembleFlowCellWorkList}"
								 fontSize="10" resizableColumns="false">
				<util:columns>
					<mx:AdvancedDataGridColumn dataField="@number" editable="false" headerText="Experiment" width="75" >
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox width="75" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
									<mx:Label text="Experiment"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer>
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn width="50">
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
									<mx:Label text="Control"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer>
						<mx:itemRenderer>
							<mx:Component>
								<mx:Box verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
									<mx:CheckBox change="outerDocument.updateIsControl(event);" visible="{data.@editable == 'true'}" includeInLayout="{data.@editable == 'true'}" selected="{data.@isControl == 'true'}" />
								</mx:Box>
							</mx:Component>
						</mx:itemRenderer>
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn dataField="@flowCellChannelNumber" headerText="Channel #" width="30">			
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox width="30" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
									<mx:Label width="30" text="Lane"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer>	
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn dataField="@idOligoBarcode" labelFunction="lookupOligoBarcode" width="120" >
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox width="120" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
									<mx:Label text="Index"/>
									<mx:Label text="Tag A"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer>
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn dataField="@idOligoBarcodeB" labelFunction="lookupOligoBarcodeB" width="120" >
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox width="120" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
									<mx:Label text="Index"/>
									<mx:Label text="Tag B"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer>
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn width="300" dataField="@idNumberSequencingCyclesAllowed" labelFunction="lookupNumberSequencingCyclesAllowed"   >
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox width="300" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
									<mx:Label text="NumberSequencing"/>
									<mx:Label text="CyclesAllowed"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer>
					</mx:AdvancedDataGridColumn>
				</util:columns>		
			</util:AdvancedDataGridGroupedRowColorsFlowCellChannelNumber>				
			</mx:VBox>
		</mx:VBox>
		<!-- 																______________________________RHS END_______________________________________ 															-->
	</mx:HBox>
	<mx:ControlBar horizontalAlign="right" width="100%">
		<mx:HBox width="100%" horizontalAlign="left">
		</mx:HBox>
		<util:DirtyNote id="dirty"/>
		<mx:Button label="Save" id="saveButton" icon="@Embed(source='../../assets/save.png')" disabledIcon="@Embed(source='../../assets/save_disable.png')" click="save()"/>
	</mx:ControlBar>	
</mx:VBox>
