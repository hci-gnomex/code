<?xml version="1.0" encoding="utf-8"?>
<util:PanelBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%" 
	xmlns:util="views.util.*">
	
<mx:HBox>
	<mx:Image source="assets/text_align_justify.png"/>
	<mx:Label id="titleLabel" styleName="titleLabel" 
		text="{codeStepNext == 'SEQASSEM' ? 'Illumina GAIIx Cluster Gen' : 'Illumina HiSeq Cluster Gen'}"/>
</mx:HBox>
<mx:TextArea styleName="instructionBox" wordWrap="false" height="20" paddingLeft="4" paddingRight="4" width="764">
		<mx:htmlText><![CDATA[To assemble flow cell, drag control or sequence request onto flow cell.  To drag multiple rows, hold SHIFT or CTRL key while selecting.]]></mx:htmlText>
</mx:TextArea>	
	
	<mx:HTTPService 
    id="getWorkList" 
    url="GetWorkItemList.gx"
    resultFormat="e4x"
    destination="getWorkList"
    showBusyCursor="true"
    result="onGetWorkList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get work list', event)"
    useProxy="false">
    <mx:request>
        <codeStepNext>{codeStepNext}</codeStepNext>
    </mx:request>
    </mx:HTTPService >
    
    	
	<mx:HTTPService 
    id="getNextWorkList" 
    url="GetWorkItemList.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetNextWorkList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get next work list', event)"
    useProxy="false">
    <mx:request>
        <codeStepNext>SEQRUN</codeStepNext>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="saveWorkItem" 
    url="SaveWorkItemSolexaAssemble.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveWorkItem(event)"
    fault="parentApplication.onFailHttpRequest('Unable to save work list', event)"
    method="POST"
    useProxy="false">
    </mx:HTTPService >    
    
    <mx:HTTPService 
    id="deleteWorkItem"   
    url="DeleteWorkItem.gx" 
    resultFormat="e4x"
    showBusyCursor="true"
    result="onDeleteWorkItem(event)"
    fault="parentApplication.onFailHttpRequest('Unable to delete work item', event)"
    method="POST"
    useProxy="false">
    </mx:HTTPService >    

    <mx:XMLListCollection id="workList" source="{getWorkList.lastResult.WorkItem}"/>
    <mx:XMLListCollection id="dirtyChannelWorkList" />
    <mx:XMLListCollection id="dirtyStatusWorkList" />
    <mx:XMLListCollection id="nextWorkList" source="{getNextWorkList.lastResult.WorkItem}"/>
    
<mx:Script>
	<![CDATA[
		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;
		import mx.rpc.events.ResultEvent;
		import mx.controls.Alert;
		import mx.events.DragEvent;
		import mx.managers.DragManager;
		import mx.events.CloseEvent;
		import hci.flex.controls.ComboBox;
		import hci.flex.controls.DropdownLabel;
		import views.renderers.CheckBoxFlowCellIsControl;
		
		[Bindable]
        public var codeStepNext:String;
        
		
		private var isValid:Boolean = true;
		
		private var warningMessage:String = "";
		
		public function initializeData():void {
			controlsGrid.dataProvider = parentApplication.dictionaryManager.getEntriesExcludeBlank('hci.gnomex.model.SequencingControl'); 
        }
		
		private function onGetWorkList(event:ResultEvent):void {
			if (event.result.name() == "WorkItemList") {
    	    	workList.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingWorkItemDataChange);
        	} else {
        		Alert.show(event.result..ERROR.@message.toString(), "Error getting work list");
        	}
        }
		private function onGetNextWorkList(event:ResultEvent):void {
        	if (event.result.name() != "WorkItemList") {
        		Alert.show(event.result..ERROR.@message.toString(), "Error getting next work list");
        	}
        }
		private function underlyingWorkItemDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets to work list
			} else {
				dirty.setDirty();
				this.workList.filterFunction = null;
			}
		}
		private function refreshWorkList():void {
			dirtyChannelWorkList.removeAll();
        	dirty.resetDirty();
        	getWorkList.send();
        	getNextWorkList.send();
        }

    	private function getAssembleLaneRowNumber(item:Object,col:int):String
    	{
       		var x:int = dirtyChannelWorkList.getItemIndex(item) + 1;
       		return String(x);
    	} 
    	private function getPendingLaneRowNumber(item:Object,col:int):String
    	{
       		var x:int = workList.getItemIndex(item) + 1;
       		return String(x);
    	} 	
    	
    	private function save():void {
    		// Prevent save if max flow cell channels exceeded.
    		if (dirtyChannelWorkList.length > 0) {
	    		var lastWorkItem:Object = dirtyChannelWorkList.getItemAt(dirtyChannelWorkList.length - 1);
	    		if (lastWorkItem.@channelNumber > 8) {
					Alert.show("Max 8 flow cell channels loaded.  Please remove extra lanes");
					return;				
				}	    			
    		}
    		// Prevent save if flow cell barcode is not entered, but items
    		// have been dragged over to flowcell
    		if (dirtyChannelWorkList.length > 0) {
	    		if (this.flowCellBarcode.text == "") {
    				this.flowCellBarcode.setFocus();
    				Alert.show("Please enter the flow cell barcode");
    				return;
    			}
    		}
    		// Prevent save if flow cell date is not entered, but
    		// items have been draddged over to flowcell
    		if (dirtyChannelWorkList.length > 0) {
	    		if (this.flowCellDate.text == "") {
    				this.flowCellDate.setFocus();
    				Alert.show("Please enter the cluster gen date");
    				return;
    			}    			
    		}
    		
    		// Prevent save if sample concentration not entered on all
    		// flow cell channels (other than sequencing control).
    		if (dirtyChannelWorkList.length > 0) {
		       	for each (var item:Object in dirtyChannelWorkList) {
		       		if (item.name() == "WorkItem") {
		       			if (item.@channelNumberDisplay != '' && item.@sampleConcentrationpM == '') {
		       				Alert.show("Please enter sample concentration for highlighted flow cell channels");
		       				return;
		       			}
		       		}
		       	}
    		}
	       	
    		
    		warningMessage = "";
    		isValid = true;
    		if (dirtyChannelWorkList.length > 0) {
	    		validateNumberOfLanes();
    			validateSequencingControl();
    			validateSeqRunType();
    			validateOrganism();
	    		validateNumberSequencingCycles();
    		}
    		if (isValid) {
	    		saveWorkItems();				    
    		} else {
    			promptForWarning();
    		}
    	}
    	
    	private function saveWorkItems():void {
    		var dirtyStatusWorkItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');
    		if ( this.dirtyChannelWorkList.length == 0 && dirtyStatusWorkItems.length == 0) {
    			Alert.show("No changes have been made.");
    			return;
    		}
    		
    		var params:Object = new Object();
    		params.flowCellBarcode = this.flowCellBarcode.text;
    		params.flowCellDate = this.flowCellDate.text;
    		params.workItemXMLString = dirtyChannelWorkList.toXMLString();
    		params.codeStepNext = codeStepNext == 'SEQASSEM' ? 'SEQRUN' : 'HSEQRUN';

    		
    		// These are the work items still on the cluster
    		// gen work list that have a new status 
    		params.dirtyWorkItemXMLString = dirtyStatusWorkItems.toXMLString();     	
    		
        	saveWorkItem.send(params);
    	}	

    	private function promptForWarning():void {
    		if (warningMessage != "") {
    			warningMessage += "Continue saving?";
				Alert.show(warningMessage, "Warning", (Alert.YES | Alert.NO), null, onPromptForWarning);
	       	}
    	}
    	
    	private function onPromptForWarning(event:CloseEvent):void {
    		if (event.detail == Alert.YES) {
    			saveWorkItems();
    		}
    	}

        private function onSaveWorkItem(event:ResultEvent):void {
        	if (saveWorkItem.lastResult.name() == "WorkItemList" || saveWorkItem.lastResult.name() == "SUCCESS" ) {
        		if (saveWorkItem.lastResult.hasOwnProperty("@flowCellNumber") && saveWorkItem.lastResult.@flowCellNumber != "") {
	        		Alert.show("Flow Cell " + saveWorkItem.lastResult.@flowCellNumber + " has been created.");    			
        		}
        		dirty.resetDirty();
        		this.getWorkList.send();
        		this.getNextWorkList.send();
        		dirtyChannelWorkList.removeAll();
        		this.flowCellBarcode.text = "";

        	} else {
        		Alert.show(saveWorkItem.lastResult..ACTMESSAGE.@TEXT);
        	}        	
        }    
        private function onDeleteWorkItem(event:ResultEvent):void {
        	if (deleteWorkItem.lastResult.name() == "SUCCESS") {
        		this.getWorkList.send();
        	} else {
        		Alert.show(deleteWorkItem.lastResult..ACTMESSAGE.@TEXT);
        	}        	
        }     
    	private function validateNumberOfLanes():void {
    		if (dirtyChannelWorkList.length < 8) {
    			warningMessage = "Not all 8 channels are populated.\n\n";
    			isValid = false;
    		}
    	}
    	
    	private function validateSequencingControl():void {
    		var theItem:Object;
    		var item:Object;
    		var controlCount:int = 0;
	       // Make sure at least one sequencing control specified
	       for each (theItem in dirtyChannelWorkList) {
	       		if (theItem.hasOwnProperty("@idSequencingControl")) {
	       			controlCount++;
	       		}
	       }
   			if (controlCount == 0) {
   				warningMessage += "No sequencing control specified for any of the channels.\n\n";
   			}
    	}
    	
    	private function validateSeqRunType():void {
    		var theItem:Object;
    		var item:Object;
    		var invalidCount:int = 0;
	       //Warn if different flow cell type 
	       for each (theItem in dirtyChannelWorkList) {
	       		if (theItem.hasOwnProperty("@idSequencingControl")) {
	       			continue;
	       		}
	       		for each (item in dirtyChannelWorkList) {
	       			if (item.hasOwnProperty("@idSequencingControl")) {
	       				continue;
	       			}
	       			if (theItem.@idSeqRunType != item.@idSeqRunType) {
	       				warningMessage += "The flow cell channels have samples destined for different sequence run types.\n\n";
	       				isValid = false;
	       				invalidCount++;
	       				break;
	       			}
	       		}
	       		if (invalidCount > 0) {
	       			break;
	       		}
	       }

    	}    	
    	        	
    	private function validateOrganism():void {
    		var theItem:Object;
    		var item:Object;
    		var invalidCount:int = 0;
	       //Warn if different organism or number of seq cycles
	       for each (theItem in dirtyChannelWorkList) {
	       		if (theItem.hasOwnProperty("@idSequencingControl")) {
	       			continue;
	       		}
	       		for each (item in dirtyChannelWorkList) {
	       			if (item.hasOwnProperty("@idSequencingControl")) {
	       				continue;
	       			}
	       			if (theItem.@idOrganism != item.@idOrganism) {
	       				warningMessage += "Flow cell channels contain samples from different organisms.\n\n";
	       				isValid = false;
	       				invalidCount++;
	       				break;
	       			}
	       		}
	       		if (invalidCount > 0) {
	       			break;
	       		}
	       }

    	}
    	
    	
    	private function validateNumberSequencingCycles():void {
    		var theItem:Object;
    		var item:Object;
    		var invalidCount:int = 0;
	       for each (theItem in dirtyChannelWorkList) {
	       		if (theItem.hasOwnProperty("@idSequencingControl")) {
	       			continue;
	       		}
	       		for each (item in dirtyChannelWorkList) {
	       			if (item.hasOwnProperty("@idSequencingControl")) {
	       			continue;
	       			}
	       			if (theItem.@idNumberSequencingCycles != item.@idNumberSequencingCycles) {
	       				isValid = false;
	       				warningMessage += "Flow cell channels have different number of sequencing cycles requested.\n\n";
	       				invalidCount++;
	       				break;
	       			}
	       		}
	       		if (invalidCount > 0) {
	       			break;
	       		}
	       }    		

    	}
 	
    	
    	private function moveAssembleLaneUp():void {
    		var pos:int = this.assembleLanesGrid.selectedIndex;
    		if (pos == 0) {
    			return;
    		}

    		var item:Object = this.assembleLanesGrid.selectedItem;
    		var prevItem:Object  = dirtyChannelWorkList.getItemAt(pos - 1);
    		
    		dirtyChannelWorkList.removeItemAt(dirtyChannelWorkList.getItemIndex(item));
    		dirtyChannelWorkList.removeItemAt(dirtyChannelWorkList.getItemIndex(prevItem));
    		
    		pos--;
    		dirtyChannelWorkList.addItemAt(item, pos);
    		dirtyChannelWorkList.addItemAt(prevItem, pos + 1);
    		
    		assembleLanesGrid.selectedItem = item;
    		
    	}
    	private function moveAssembleLaneDown():void {
    		var pos:int = this.assembleLanesGrid.selectedIndex;
    		if (pos == (dirtyChannelWorkList.length - 1)) {
    			return;
    		}

    		var item:Object = this.assembleLanesGrid.selectedItem;
    		var nextItem:Object  = dirtyChannelWorkList.getItemAt(pos + 1);
    		
    		dirtyChannelWorkList.removeItemAt(dirtyChannelWorkList.getItemIndex(item));
    		dirtyChannelWorkList.removeItemAt(dirtyChannelWorkList.getItemIndex(nextItem));
    		
    		dirtyChannelWorkList.addItemAt(nextItem, pos);
    		dirtyChannelWorkList.addItemAt(item, pos + 1);
    		
    		assembleLanesGrid.selectedItem = item; 
    	}   	
	  	private function onDragDropLane(event:DragEvent) : void
		{
	       // retrieve the data associated with the "items" format. This will be the data that
	       // the dragInitiator has copied into the DragSource.
	       var items:Array = event.dragSource.dataForFormat("items") as Array;
	
	       // determine where in the grid the drop occurs and select that node by the index; followed by 
	       // retrieving the node itself. 
	       var row:int = assembleLanesGrid.calculateDropIndex(event);
	       assembleLanesGrid.selectedIndex = row;
	       var node:XML = assembleLanesGrid.selectedItem as XML;	       
	        

	       // Disallow operation if seq run is of different type
	       for each (var dragItem:Object in items) {
	       		if (dragItem.name() == "DictionaryEntry") {
	       			continue;
    	   		}
    	   		if (dragItem.@assembleStatus == "On Hold") {
       				Alert.show("Warning - " + dragItem.@laneNumber + "  is 'On Hold'.  Please change the status first.");
       				event.preventDefault();
		       		event.target.hideDropFeedback(event);
		       		DragManager.showFeedback(DragManager.NONE);
       				return;
       			}
	       		for each (var item:Object in dirtyChannelWorkList) {
	       			if (item.name() == "WorkItem") {	       				
		       			if (dragItem.@idSeqRunType != item.@idSeqRunType) {
		       				Alert.show("Warning - Incompatible sequence run type.");
				       		event.preventDefault();
				       		event.target.hideDropFeedback(event);
				       		DragManager.showFeedback(DragManager.NONE);
							return;	       	  	
		       			} 
		       		}
	       		}
	       }
	       

	       
	
	       // taking all of the items in the DragSouce, move to work items
	       // to the dirtyWorkItems list
	       for(var i:Number=0; i < items.length; i++) {
	       	if (items[i].name() == "WorkItem") {
	       		items[i].@sampleConcentrationpM = '';
		    	dirtyChannelWorkList.addItemAt(items[i], row);
		    	workList.removeItemAt(workList.getItemIndex(items[i]));	       			
	       	} else if (items[i].name() == "DictionaryEntry") {
	       		items[i].@sampleConcentrationpM = '';
	       		var newItem:Object = new XML(XML(items[i]).toXMLString());
	       		newItem.@isControl = 'true';
		    	dirtyChannelWorkList.addItemAt(newItem, row); 
	       	} 
	       }
	       
	       // Reassign channel numbers based based on any multiplexing.
	       reassignChannelNumbers();
	       
	           	
    		// Warn if flow cell channels exceeded.
    		if (dirtyChannelWorkList.length > 0) {
	    		var lastWorkItem:Object = dirtyChannelWorkList.getItemAt(dirtyChannelWorkList.length - 1);
	    		if (lastWorkItem.@channelNumber > 8) {
					Alert.show("Max 8 flow cell channels loaded.  Please remove extra lanes");			
				}	    			
    		}
    		
	       // Don't allow flex to do any default moves to the data.  
	       // We handle it in the code above.
	       event.preventDefault();
		   event.target.hideDropFeedback(event);
		   DragManager.showFeedback(DragManager.NONE);
		}
		
		private function reassignChannelNumbers():void {
			var channelNumber:int = 0;
			var prevBarcodes:XMLListCollection = new XMLListCollection();
			var altColor:Boolean = true;
			for each(var wi:Object in dirtyChannelWorkList) {
				var nextChannel:Boolean = true;
				if (wi.hasOwnProperty('@idOligoBarcode') && wi.@idOligoBarcode != null && wi.@idOligoBarcode != '') {
					if (prevBarcodes.length > 0) {
						nextChannel = false;
						for each(var bc:Object in prevBarcodes) {
							if (wi.@idOligoBarcode == bc.@idOligoBarcode) {
								nextChannel = true;
								break;
							}
						}
					}
					prevBarcodes.addItem(wi);
				}
				if (nextChannel) {
					channelNumber++;
					prevBarcodes = new XMLListCollection();
					wi.@channelNumberDisplay = channelNumber; 
					wi.@editable = 'true';
					altColor = !altColor;
				} else {
					wi.@channelNumberDisplay = '';
					wi.@editable = 'false';
				}
				wi.@channelNumber = channelNumber;
				wi.@altColor = altColor;
				if (wi.hasOwnProperty('@idOligoBarcode') && wi.@idOligoBarcode != null && wi.@idOligoBarcode != '') {
					prevBarcodes.addItem(wi);
				}
			}
		}
		
		public function removeAssembleLane():void {
			var item:Object = this.assembleLanesGrid.selectedItem;
		   	workList.addItem(item);
		    dirtyChannelWorkList.removeItemAt(dirtyChannelWorkList.getItemIndex(item));	       			
	 	}
		public function removePendingLane():void {
			var item:Object = this.pendingLanesGrid.selectedItem;
			var params:Object = new Object();
			params.idWorkItem = item.@idWorkItem;
			
			deleteWorkItem.send(params);
	 	}
	 	
    	private function promptForRemove():void {
    		var warningMessage:String = "Are you sure you want to remove " + pendingLanesGrid.selectedItem.@laneNumber + " from the work list?";
			Alert.show(warningMessage, "Warning", (Alert.YES | Alert.NO), null, onPromptForRemove);
    	}
    	
    	private function onPromptForRemove(event:CloseEvent):void {
    		if (event.detail == Alert.YES) {
    			removePendingLane();
    		}
    	}
	 	
		
		//
		// Need to use these label functions instead of LabelDictionary item renderer because drag image is blank otherwise.
		//
        private function lookupOrganism(item:Object, col:DataGridColumn):String {
        	var d:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Organism', item.@idOrganism);
        	if (d != null) {
        		return d.@display;
        	} else {
        		return ""; 
        	}
        }		
        private function lookupSeqRunType(item:Object, col:DataGridColumn):String {
        	var d:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SeqRunType', item.@idSeqRunType);
        	if (d != null) {
        		return d.@display;
        	} else {
        		return "";
        	}
        }		
        private function lookupNumberSequencingCycles(item:Object, col:DataGridColumn):String {
        	var d:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.NumberSequencingCycles', item.@idNumberSequencingCycles);
        	if (d != null) {
        		return d.@display; 
        	} else {
        		return "";
        	}
        }		
        private function lookupOligoBarcode(item:Object, col:DataGridColumn):String {
        	var d:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.OligoBarcode', item.@idOligoBarcode);
        	if (d != null) {
        		return d.@barcodeSequence;
        	} else {
        		return "";
        	}
        }		
        
        
	]]>
</mx:Script>    	
	<mx:HDividedBox width="100%" height="100%" styleName="form" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
	    <mx:VDividedBox width="50%" height="100%"  >
			<mx:VBox width="100%" height="74"   verticalGap="0">	
			
				<mx:HBox width="100%" verticalAlign="bottom" paddingBottom="1">
					<mx:Label text="Controls" fontWeight="bold"/>
			    </mx:HBox>
				<mx:DataGrid id="controlsGrid" width="100%" height="100%" dragEnabled="true" showHeaders="false">
					<mx:columns>
						<mx:DataGridColumn  dataField="@display"             headerText="Control Name" width="40"/>
					</mx:columns>				
				</mx:DataGrid>			 
			</mx:VBox>
			<mx:VBox width="100%" height="100%"   verticalGap="0">	
			    <mx:HBox paddingTop="8" width="100%" verticalAlign="bottom" paddingBottom="1">
					<mx:Label text="{'Pending Sequence Requests (' + workList.length + ')' }" fontWeight="bold"/>

					<mx:HBox width="100%" horizontalAlign="right">
						<mx:Button id="removePendingLaneButton" icon="@Embed(source='../../assets/delete.png')" width="24" disabledIcon="@Embed(source='../../assets/delete_disable.png')" click="promptForRemove()">
							<mx:enabled>{pendingLanesGrid.selectedItem != null ? true : false}</mx:enabled>
						</mx:Button>						
					</mx:HBox>
			    </mx:HBox>
				<util:DataGridAlternatingGroup id="pendingLanesGrid" width="100%" height="100%" 
					dataProvider="{workList}" 
					dragEnabled="true" 
					editable="true"
					allowMultipleSelection="true">
					<util:columns>
						<mx:DataGridColumn  dataField="@laneNumber" editable="false" headerText="Flow Cell Sample #" width="40">
							<mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								    <mx:Label text="Flow Cell"/>
								    <mx:Label text="Sample #"/>
								</mx:VBox> 
							</mx:Component>
							</mx:headerRenderer>
	  					</mx:DataGridColumn>	
	  					<mx:DataGridColumn  dataField="@idOligoBarcode" editable="false" headerText="Sample Barcode"   width="28" labelFunction="lookupOligoBarcode">
							<mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Barcode"/>
								    <mx:Label text="Tag"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>	
						<mx:DataGridColumn  dataField="@idSeqRunType" editable="false" headerText="Paired/Single"   width="35" labelFunction="lookupSeqRunType">
							<mx:headerRenderer > 
							  <mx:Component>
								<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Single/"/>
								    <mx:Label text="Paired"/>
								</mx:VBox>
							  </mx:Component>
							</mx:headerRenderer>                     
						
						</mx:DataGridColumn>
	                    <mx:DataGridColumn  dataField="@idOrganism"   editable="false" headerText="Organism"   width="35"  labelFunction="lookupOrganism"/>
						<mx:DataGridColumn  dataField="@idNumberSequencingCycles"  editable="false" headerText="# Cycles"   width="32"  labelFunction="lookupNumberSequencingCycles"/>
						<mx:DataGridColumn headerText="Status"  width="39" dataField="@assembleStatus" 
	                	    editorDataField="value" 
	                	    editable="true"
	                        rendererIsEditor="false" 
	                        itemRenderer="mx.controls.Label"  
 	                        itemEditor="{views.renderers.ComboBoxWorkflowStatus.create('@assembleStatus', false, false, false, false, true)}">
					</mx:DataGridColumn>
					</util:columns>				
				</util:DataGridAlternatingGroup>		
			</mx:VBox> 
			
	    	
	    </mx:VDividedBox>
	    <mx:VBox height="100%">
	    	<mx:Spacer height="45"/>
	        <mx:Image source="assets/arrow_right.png"/>
	    	<mx:Spacer height="100"/>
	        <mx:Image source="assets/arrow_right.png"/>
	    	 
	    </mx:VBox>
		<mx:VBox width="50%" height="100%" verticalGap="1" borderColor="#4E7C9C">			
			    <mx:VBox width="100%" paddingTop="3" paddingBottom="4" borderStyle="outset" cornerRadius="10" borderColor="#466D88" paddingLeft="4" paddingRight="4" height="100%">
					<mx:Label text="Flow Cell to Assemble" fontWeight="bold" color="#153A64"/>
					<mx:HBox width="100%" horizontalGap="2">
						<mx:Label text="Barcode:"/>
						<mx:TextInput id="flowCellBarcode" width="100%"/>
						<mx:Label text="Cluster Gen Date:"/>
						<mx:DateField id="flowCellDate" showToday="true"/>
						<mx:HBox width="100%" horizontalAlign="right" paddingTop="0" paddingBottom="0" horizontalGap="4">
							<mx:Button click="moveAssembleLaneUp();reassignChannelNumbers()" icon="@Embed(source='../../assets/arrow_up.png')" width="24" toolTip="Move sample up a lane"/>
							<mx:Button click="moveAssembleLaneDown();reassignChannelNumbers()" width="24" icon="@Embed(source='../../assets/arrow_down.png')" toolTip="Move sample down a lane"/>
							<mx:VRule height="20"/>
							<mx:Button id="removeFlowCellButton" icon="@Embed(source='../../assets/delete.png')" width="24" disabledIcon="@Embed(source='../../assets/delete_disable.png')" click="removeAssembleLane();reassignChannelNumbers()">
								<mx:enabled>{assembleLanesGrid.selectedItem != null ? true : false}</mx:enabled>
							</mx:Button>
						</mx:HBox> 
						 
					</mx:HBox> 
			<util:DataGridAlternatingGroup  id="assembleLanesGrid" sortableColumns="false" dataProvider="{dirtyChannelWorkList}" width="100%" height="100%" 
				 dropEnabled="true" editable="true" dragDrop="onDragDropLane(event)"	>	 
				<util:columns>
			        <mx:DataGridColumn headerText="Control" 
			        	width="30"        
			        	editable="false"             	
			        	dataField="@isControl" 
			        	editorDataField="selected"
			        	itemRenderer="views.renderers.CheckBoxFlowCellIsControl" >
			        </mx:DataGridColumn>
					<mx:DataGridColumn editable="false" headerText="Chan #"  dataField="@channelNumberDisplay" width="30" showDataTips="true" />
					<mx:DataGridColumn  editable="false" dataField="@laneNumber" width="45" headerText="Flow Cell Sample #" showDataTips="true" >
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"  >
							    <mx:Label text="Flow Cell"/>
							    <mx:Label text="Sample #"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>	
					<mx:DataGridColumn  dataField="@idOligoBarcode" headerText="Sample Barcode"  editable="false" width="25" labelFunction="lookupOligoBarcode">
						<mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Barcode"/>
								    <mx:Label text="Tag"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn  editable="false"  dataField="@idSeqRunType" headerText="Paired/Single" width="25" 
					 showDataTips="true" 
                     itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry,'@display', '@value', '@idSeqRunType')}">
						<mx:headerRenderer > 
						  <mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Single/"/>
							    <mx:Label text="Paired"/>
							</mx:VBox>
						  </mx:Component>
						</mx:headerRenderer>                     
                    </mx:DataGridColumn>                 											
					<mx:DataGridColumn  editable="false"  dataField="@idOrganism" headerText="Organism" width="35"  
					 showDataTips="true" 
                     itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Organism').DictionaryEntry,'@display', '@value', '@idOrganism')}"/>                 											
					<mx:DataGridColumn  editable="false"  dataField="@idNumberSequencingCycles" headerText="# Cycles"  width="32" 
					 showDataTips="true" 
                     itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry,'@display', '@value', '@idNumberSequencingCycles')}">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="#"/>
							    <mx:Label text="Cycles"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>					

                     <mx:DataGridColumn dataField="@sampleConcentrationpM" 
                     	showDataTips="true"
                     	headerText="Sample conc. (pM)" width="45"
                     	rendererIsEditor="false" 
                     	itemRenderer="{views.renderers.LabelFlowCellSampleConcentration.create('@sampleConcentrationpM')}"
                     	itemEditor="{views.renderers.TextInputFlowCellSampleConcentration.create('@sampleConcentrationpM')}">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Sample"/>
							    <mx:Label text="conc. (pM)"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
                    </mx:DataGridColumn>                 											
				</util:columns>			
			</util:DataGridAlternatingGroup>		 
			    </mx:VBox> 
			<mx:Spacer height="10"/>
		</mx:VBox>
	</mx:HDividedBox>
	<mx:ControlBar horizontalAlign="right" width="100%">
	    <mx:HBox width="100%" horizontalAlign="left">
			<mx:LinkButton textDecoration="underline" label="Refresh"  icon="@Embed('../../assets/action_refresh.gif')" 
				click="refreshWorkList();" toolTip="Refresh worklist"/>
	    </mx:HBox>
		<util:DirtyNote id="dirty"/>
		<mx:Button label="Save" id="saveButton" icon="@Embed(source='../../assets/save.png')" disabledIcon="@Embed(source='../../assets/save_disable.png')" click="save()"/>
	</mx:ControlBar>	
</util:PanelBox>
