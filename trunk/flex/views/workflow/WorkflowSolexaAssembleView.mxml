<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"  xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%"
	xmlns:util="views.util.*" 
	xmlns:renderers="views.renderers.*" verticalGap="0" paddingTop="0" paddingRight="4" paddingLeft="4" paddingBottom="0"
>
	<mx:HBox verticalAlign="middle" width="100%" >
		<mx:Image source="{parentApplication.iconSolexa}"/>
		<mx:Label id="titleLabel" styleName="titleLabel" 
				  text="" />
		<mx:Spacer width="100%"/>
		
		<mx:HBox  horizontalAlign="center">
			<mx:LinkButton id="instructions" icon="@Embed(source='../../assets/information.png')" label="Instructions" click="{showHideInstructions()}"/>
			<mx:TextArea styleName="instructionBox" visible="false" includeInLayout="false" id="instructionText" wordWrap="false" height="20" paddingLeft="4" paddingRight="4" width="600">
				<mx:htmlText><![CDATA[To assemble flow cell, drag ctrl or seq. req. onto flow cell.  To drag multiple, hold SHIFT or CTRL key while selecting.]]></mx:htmlText>
			</mx:TextArea>	
		</mx:HBox>  
		<mx:LinkButton textDecoration="underline" label="Refresh"  icon="@Embed('../../assets/action_refresh.gif')" 
					   click="refresh();" toolTip="Refresh worklist"/>
		
	</mx:HBox>
	
	<mx:HTTPService 
		id="getWorkList" 
		url="GetWorkItemList.gx"
		resultFormat="e4x"
		destination="getWorkList"
		showBusyCursor="true"
		result="onGetWorkList(event)"
		fault="parentApplication.onFailHttpRequest('Unable to get work list', event)"
		useProxy="false">
		<mx:request>
			<codeStepNext>{codeStepNext}</codeStepNext>
		</mx:request>
	</mx:HTTPService >
	<mx:HTTPService 
		id="saveWorkItem" 
		url="SaveWorkItemSolexaAssemble.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onSaveWorkItem(event)"
		fault="parentApplication.onFailHttpRequest('Unable to save work list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >    
	
	<!--<mx:HTTPService 
		id="deleteWorkItem"   
		url="DeleteWorkItem.gx" 
		resultFormat="e4x"
		showBusyCursor="true"
		result="onDeleteWorkItem(event)"
		fault="parentApplication.onFailHttpRequest('Unable to delete work item', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService > -->
	
	<mx:XMLListCollection id="masterWorkList"																														/>
	<mx:XMLListCollection id="pendingSequenceLanesWorkList"			source="{masterWorkList.source}" filterFunction="filterPendingSequenceLanesWorkList" 								/> <!-- Left Hand Side Work List -->
	<mx:XMLListCollection id="assembleFlowCellWorkList" 			source="{masterWorkList.source}" filterFunction="filterAssembleFlowCellWorkList"  sort="{sortRHSList}" /> <!-- Right Hand Side Work List -->
	<mx:XMLListCollection id="controlsList" 						source="{masterWorkList.source}" filterFunction="filterControlsList" 									/>
	<mx:XMLListCollection id="sequenceProtocolsList"			 									 filterFunction="filterSequenceProtocolsList"	 					 /> <!-- active protocols -->
	<mx:XMLListCollection id="flowCellChannelsCountList" />
	<mx:Sort id="sortRHSList" compareFunction="sortRHS" />
	<!-- <mx:Binding source="flowCellChannelsCountList" destination="{channelChooserColumn.itemEditor.}" /> -->
	
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.ComboBox;
			import hci.flex.controls.Label;
			import hci.flex.controls.TextInput;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.rpc.events.ResultEvent;
			
			import views.renderers.ComboBox;
			
			
			[Bindable]
			private var controlsCount:int = 0;
			
			[Bindable]
			public var codeStepNext:String;
			
			[Bindable]
			private var codeSequencingPlatform:String;
			
			private var flowCellChannelsCount:int = 0
			private var isValid:Boolean = true;			
			private var warningMessage:String = "";
		]]>
	</mx:Script>
	<!--							Initialize and Refresh Functions				-->
	<mx:Script>
		<![CDATA[
			
			// called by NavWorkflowView/onHiSeqWorklistChange
			public function initializeData(maxFlowCells:int):void {
				flowCellChannelsCount = maxFlowCells;				
				if(codeStepNext == 'HSEQASSEM'){
					titleLabel.text = 'Illumina HiSeq Flow Cell Assembly';
					hboxGroupSide.visible = true;
					hboxGroupSide.includeInLayout = true;
					codeSequencingPlatform = "HISEQ";
				} else if (codeStepNext == 'MISEQASSEM') {
					titleLabel.text = 'Illumina MiSeq Flow Cell Assembly';
					hboxGroupSide.visible = false;
					hboxGroupSide.includeInLayout = false;
					codeSequencingPlatform = "MISEQ";
				}
				if(codeStepNext != null && codeStepNext != '') {
					refresh();
				}
			}
			private function initializeSequenceProtocolsList():void {
				sequenceProtocolsList.source = parentApplication.dictionaryManager.getEntriesExcludeBlank('hci.gnomex.model.NumberSequencingCyclesAllowed').copy();
				sequenceProtocolsList.addItemAt(new XML('<Default name="Choose a protocol..." />'),0);
				flowCellProtocolChooser.selectedIndex = 0;
			}			
			private function initializeFlowCellChannelsCountList():void {
				flowCellChannelsCountList.addItem(new XML('<FlowCellChannelCount display=""  value=""  />'));
				for(var i:int = 1; i <= flowCellChannelsCount; i++) {
					flowCellChannelsCountList.addItem(new XML('<FlowCellChannelCount display="' + i + '" value="' + i + '" />'));
				}
				
			}			
			private function initializeMasterWorkList():void {
				var source:XMLListCollection  = new XMLListCollection(getWorkList.lastResult.Request.MultiplexLane.WorkItem.copy());
				
				// add idRequestAndMultiplexGroup for grouping in pendingSequenceLanesGrid
				for each(var wi:XML in source) {
					wi.@idRequestAndMultiplexGroup = wi.@idRequest + "-" + wi.@multiplexGroupNumber;
				}				
				// add controls to masterWorkList
				for each(var control:XML in parentApplication.dictionaryManager.getEntriesExcludeBlank('hci.gnomex.model.SequencingControl') ) {
					controlsCount++;
					control.@number = control.@display;	
					control.@editable = "true";
					control.@isControl = "true";
					source.addItem(control);
				}				
				masterWorkList.source = source.copy();

				//channelChooserColumn.itemEditor=views.renderers.GridColumnFillButton.create(views.renderers.ComboBox.create(flowCellChannelsCountList,'@display', '@value', '@flowCellChannelNumber', null, true).newInstance(), 'idRequestAndMultiplexGroup');
			}
			
			
			private function refresh():void {
				// reset user filters
				this.labCombo.selectedItem = null;
				this.numberOfCyclesFilter.text = "";
				this.seqRunTypeFilterCombo.selectedItem = null;
				this.lookupExperimentNumber.text = "";
				// reset flow cell info
				this.flowCellBarcode.text = ""; 
				this.flowCellRunNumber.text = ""; 
				this.flowCellCreateDate.selectedDate = null; 
				this.flowCellInstrument.selectedIndex = 0; 
				this.flowCellSide.selectedValue = null; 
				this.flowCellProtocolChooser.selectedIndex = 0;
				
				initializeFlowCellChannelsCountList();
				initializeSequenceProtocolsList();
				getWorkList.send();
			}
			private function onGetWorkList(event:ResultEvent):void {
				if (event.result.name() == "WorkItemList") {					
					masterWorkList.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingWorkItemDataChange);
					initializeMasterWorkList();		
					
					
				} else {
					Alert.show(event.result..ERROR.@message.toString(), "Error getting work list");
				}
			}
			private function refreshWorkList():void {
				
				getWorkList.send();
				
			}
			
		]]>
	</mx:Script>
	<!--						End Initilize and Refresh Functions					-->
	<!--							Filters											-->
	<mx:Script>
		<![CDATA[
			
			public function filterSequenceProtocolsList(item:Object):Boolean {
				return item.@codeRequestCategory == codeSequencingPlatform || item.@name == "Choose a protocol...";
			}
			
			public function filterPendingSequenceLanesWorkList(item:Object):Boolean {
				// if there are no user selected filters, include all <WorkItem>s
				if ((this.labCombo.selectedItem == null || this.labCombo.selectedItem.@idLab == '') &&
					this.numberOfCyclesFilter.text == '' && 
					this.lookupExperimentNumber.text == '' &&
					(this.seqRunTypeFilterCombo.selectedItem == null || 
						this.seqRunTypeFilterCombo.selectedItem.@idSeqRunType == '')) {
					if(item.name() == 'WorkItem') {
						return true;
					} else {
						return false;
					}					
				}
				// if a specific experiment number is entered, return only that experiment
				if (this.lookupExperimentNumber.text != '') {
					return item.@number.toString().match(new RegExp(this.lookupExperimentNumber.text + ".*", "i"));
				}
				
				// for number of cycles, seqruntype and lab, include the item unless it fails one of the remaining user selected filters
				var matchesCycles:Boolean = true;
				var matchesSeqRunType:Boolean = true;
				var matchesLab:Boolean = true;
				if(numberOfCyclesFilter.text != '') {
					if(item.@numberSequencingCycles != numberOfCyclesFilter.text) {
						matchesCycles = false;
					}
				}
				if (this.seqRunTypeFilterCombo.selectedItem != null && this.seqRunTypeFilterCombo.selectedItem.@idSeqRunType != '') {
					if (item.@idSeqRunType != seqRunTypeFilterCombo.selectedItem.@idSeqRunType) {
						matchesSeqRunType = false;
					}
				}
				if (labCombo.selectedItem != null && labCombo.selectedItem.@idLab != '') {
					if (item.@idLab != labCombo.selectedItem.@idLab) {
						matchesLab = false;
					}
				}
				return matchesCycles && matchesSeqRunType && matchesLab;
			}			
			public function filterAssembleFlowCellWorkList(item:Object):Boolean {
				if(item.hasOwnProperty("@flowCellChannelNumber") && item.@flowCellChannelNumber != '') {
					return true;
				} else {
					return false;
				}
			}
			public function filterControlsList(item:Object):Boolean {
				if(item.name() == "DictionaryEntry") {
					return true;
				} else {
					return false;
				}
			}
		]]>
	</mx:Script>
	<mx:Script>
		<![CDATA[
			

			
			
			private function underlyingWorkItemDataChange(event:CollectionEvent):void {
				if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
					// ignore refresh and resets to work list
				} else if( (["@flowCellChannelNumber"].indexOf(event.items[0].property) > -1) && (event.items[0].source.@flowCellChannelNumber != '') ) {
					// we are adding to the assembleFlowCellGrid
					if(flowCellProtocolChooser.selectedIndex == 0) {
						for each(var protocol:XML in sequenceProtocolsList) {
							if(protocol.@idNumberSequencingCyclesAllowed == event.items[0].source.@idNumberSequencingCyclesAllowed) {
								flowCellProtocolChooser.selectedItem = protocol;
								break;
							}
						}						
					}					
					if(flowCellProtocolChooser.selectedItem.@idNumberSequencingCyclesAllowed.toString() != event.items[0].source.@idNumberSequencingCyclesAllowed.toString() ) {
						Alert.show("This sample has a different sequence protocol than the flow cell","Warning!");
					}
					for each(var sl:XML in assembleFlowCellWorkList) {
						if(sl.@flowCellChannelNumber == event.items[0].source.@flowCellChannelNumber) {
							if( (sl.@number.toString() != event.items[0].source.@number.toString()) 
								&& (sl.@idOligoBarcode.toString() == event.items[0].source.@idOligoBarcode.toString()) 
								&& (sl.@idOligoBarcodeB.toString() == event.items[0].source.@idOligoBarcodeB.toString()) ) {
								Alert.show("This sample has the same barcode as another sample in channel " + sl.@flowCellChannelNumber.toString(), "Warning");
							}
						}
					}
					if(assembleFlowCellWorkList.length == 0) {
						event.items[0].source.@editable = 'true'; // this is the first to be added
					}
					var identifier:String = '';
					for each(sl in assembleFlowCellWorkList) {
						if(sl.@flowCellChannelNumber.toString() != identifier) {
							identifier = sl.@flowCellChannelNumber.toString();
							if(sl.@editable == 'true') { 
								continue; // leave this the lane with the isControl checkbox
							} else {
								sl.@editable = 'true'
							}								
						}
						else {
							sl.@editable = 'false';
						}
					}

				} else if( (["@flowCellChannelNumber"].indexOf(event.items[0].property) > -1) && (event.items[0].source.@flowCellChannelNumber == '') ) {
					// we are removing from the assembleFlowCell side
					// if this is the first sequence lane in the channel and it is marked as a control we need to mark the next sequence lane, if there is one
					if(event.items[0].source.hasOwnProperty("@editable") && event.items[0].source.@editable == "true") { // is this the first in the channel?
						event.items[0].source.@editable = "false";
						// find the next sequence lane in this channel, if one exists.
						for each(sl in assembleFlowCellWorkList) {
							if(sl.@flowCellChannelNumber == event.items[0].oldValue) {
								sl.@editable = "true";
								if(event.items[0].source.hasOwnProperty("@isControl") && event.items[0].source.@isControl == "true") {
									event.items[0].source.@isControl = "false";
									sl.@isControl = "true";
								}
							}
						}
					}
				} else  {
					//dirty.setDirty();
				}
			}
	]]>
</mx:Script>
	<!--					Save Functions							-->
<mx:Script>
	<![CDATA[			
			private function save():void {								
				warningMessage = "";
				isValid = true;
				if(flowCellProtocolChooser.selectedIndex == 0) {
					isValid = false;
					warningMessage += "Please choose a sequencing protocol for the flow cell.\n\n";
					Alert.show(warningMessage, "Warning");
					return;
				}
				if (assembleFlowCellWorkList.length > 0) {
					validateNumberOfLanes();
					validateSequencingControl();
					validateProtocol();
					validateProtocolAndLanes();
					validateIndexTags();
					//validateSeqRunType();
					//validateNumberSequencingCycles();
				}
				if (isValid) {
					saveWorkItems();				    
				} else {
					promptForWarning();
				}
			}
			private function validateNumberOfLanes():void {
				var tmp:ArrayCollection = new ArrayCollection();
				for(var i:int = 1; i < flowCellChannelsCount; i++) {
					tmp.addItem(i + "");
				}
				for each(var tmpx:XML in assembleFlowCellWorkList) {
					if(tmpx.hasOwnProperty("@flowCellChannelNumber") && tmp.contains(tmpx.@flowCellChannelNumber.toString())) {
						tmp.removeItemAt(tmp.getItemIndex(tmpx.@flowCellChannelNumber.toString()));
						tmp.refresh();
					}
				}
				if (tmp.length > 0) {
					if(flowCellChannelsCount > 1) {
						warningMessage = "Not all " + flowCellChannelsCount + " channels are populated.\n\n";
					} else {
						warningMessage = "The channel is not populated.\n\n";
					}
					isValid = false;
				}					
			}			
			// Warn if no channel is selected as a control
			private function validateSequencingControl():void {
				var theItem:Object;
				var item:Object;
				var controlCount:int = 0;
				
				// Make sure at least one sequencing control specified
				for each (theItem in assembleFlowCellWorkList) {
					if (theItem.hasOwnProperty("@idSequencingControl")) {
						controlCount++;
					} else if (theItem != null && theItem.hasOwnProperty("@isControl") && theItem.@isControl != null && theItem.@isControl == "true") {
						controlCount++;
					}
				}
				if (controlCount == 0) {
					warningMessage += "No sequencing control specified for any of the channels.\n\n";
				}
			}			
			//Warn if not all channels are of the same protocol type
			private function validateProtocol():void {
				var firstProtocol:String = '';
				// get the protocol of the first WorkItem in the list
				for each(var wi:XML in assembleFlowCellWorkList) {
					if(wi.name() == "DictionaryEntry") {
						continue;
					} else {
						firstProtocol = wi.@idNumberSequencingCyclesAllowed;
						break;
					}
				}
				for each(wi in assembleFlowCellWorkList) {
					if(wi.name() == "DictionaryEntry") {
						continue;
					} else if(wi.@idNumberSequencingCyclesAllowed == firstProtocol) {
						continue;
					} else {
						warningMessage += "The samples do not all have the same protocol.\n\n";
						isValid = false;
						break;
					}
				}
			}
			// Warn if not all lanes have same protocol as flow cell
			private function validateProtocolAndLanes():void {
				for each(var wi:XML in assembleFlowCellWorkList) {
					if(wi.name() == "DictionaryEntry") {
						continue;
					}
					if(wi.@idNumberSequencingCyclesAllowed != flowCellProtocolChooser.selectedItem.@idNumberSequencingCyclesAllowed) {
						warningMessage += "One or more samples have different protocols from the flow cell\n\n";
						isValid = false;
						break;
					}
				}
			}
			private function validateIndexTags():void {
				for each(var i:int in flowCellChannelsCountList) {
					if(!areIndexTagsUnique(i)) {
						warningMessage += "Two or more samples in channel " + i + " have the same index tags. This should only occur when samples (and their sequence reads) are meant to be pooled.\n\n";
						isValid=false;
					}
				}
			}
			private function areIndexTagsUnique(flowCellChannelNumber:Object):Boolean {
				var workItemCount:int = 0;
				var sequenceTagMap:Object = new Object();
				for each(var wi:Object in assembleFlowCellWorkList) {
					if (wi.@flowCellChannelNumber == flowCellChannelNumber) {
						var tag:Object = wi.@barcodeSequence + "-" + wi.@barcodeSequenceB;
						sequenceTagMap[tag] = tag;					// if two tags are the same the second will overwrite the first
						workItemCount++;							// number of workItems in the multiplexGroupNumber group of interest
					}
				}
				var uniqueTagCount:int = 0;
				for (var sequenceTag:Object in sequenceTagMap) {
					uniqueTagCount++;								// the map has stored only unique tags
				}
				
				return uniqueTagCount == workItemCount;			// if two tags were identical these will not match
			}
			
			private function saveWorkItems():void {
				//    		var dirtyStatusWorkItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');
				//    		if ( this.dirtyChannelWorkList.length == 0 && dirtyStatusWorkItems.length == 0) {
				//    			Alert.show("No changes have been made.");
				//    			return;
				//    		}
				
				var params:Object = new Object();
				params.flowCellBarcode = this.flowCellBarcode.text;
				params.flowCellDate = this.flowCellCreateDate.text
				params.workItemXMLString = assembleFlowCellWorkList.toXMLString();
				if(codeStepNext == 'SEQASSEM') {
					params.codeStepNext = 'SEQPIPE';
				} else if (codeStepNext == 'HSEQASSEM') {
					params.codeStepNext = 'HSEQFINFC';
				} else if (codeStepNext == 'MISEQASSEM') {
					params.codeStepNext = 'MISEQFINFC';
				}
				params.runNumber = this.flowCellRunNumber.text;
				params.idNumberSequencingCyclesAllowed = this.flowCellProtocolChooser.selectedItem.@idNumberSequencingCyclesAllowed
				params.side = this.flowCellSide.selectedValue;
				
				if (this.flowCellInstrument.selectedItem != null && this.flowCellInstrument.selectedItem.@value != '') {
					params.idInstrument = this.flowCellInstrument.selectedItem.@value;
				}				
				saveWorkItem.send(params);
			}	
			
			private function promptForWarning():void {
				if (warningMessage != "") {
					warningMessage += "Continue saving?";
					Alert.show(warningMessage, "Warning", (Alert.YES | Alert.NO), null, onPromptForWarning);
				}
			}
			private function onPromptForWarning(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					saveWorkItems();
				}
			}
			private function onSaveWorkItem(event:ResultEvent):void {
				if (saveWorkItem.lastResult.name() == "WorkItemList" || saveWorkItem.lastResult.name() == "SUCCESS" ) {
					if (saveWorkItem.lastResult.hasOwnProperty("@flowCellNumber") && saveWorkItem.lastResult.@flowCellNumber != "") {
						Alert.show("Flow Cell " + saveWorkItem.lastResult.@flowCellNumber + " has been created.");    			
					}
					refresh();
					
				} else {
					Alert.show(saveWorkItem.lastResult..ACTMESSAGE.@TEXT);
				}        	
			}
		]]>
	</mx:Script>
	<!--								END Save Functions								-->
	<!--								Grid Labeling Functions							-->
	<mx:Script>
		<![CDATA[
	
			//
			// Need to use these label functions instead of LabelDictionary item renderer because drag image is blank otherwise.
			//
			private function lookupSeqRunType(item:Object, col:Object):String {
				if (item != null  && item.hasOwnProperty("@idSeqRunType")) {
					var d:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SeqRunType', item.@idSeqRunType);
					if (d != null) {
						return d.@display;
					} else {
						return "";
					}
				} else {
					return "";
				}
			}		
			private function lookupNumberSequencingCycles(item:Object, col:Object):String {
				if (item != null  && item.hasOwnProperty("@idNumberSequencingCycles")) {
					var d:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.NumberSequencingCycles', item.@idNumberSequencingCycles);
					if (d != null) {
						return d.@display; 
					} else {
						return "";
					}
				} else {
					return "";
				}
			}		
			private function lookupOligoBarcode(item:Object, col:Object):String {
				if (item != null && item.hasOwnProperty("@idOligoBarcode")) {
					if (item.@idOligoBarcode != '') {
						return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.OligoBarcode", item.@idOligoBarcode);    		
					} else {
						return item.@barcodeSequence;
					}
				} else {
					return "";
				}
				
			}			
			private function lookupOligoBarcodeB(item:Object, col:Object):String {
				if (item != null && item.hasOwnProperty("@idOligoBarcodeB")) {
					if (item.@idOligoBarcodeB != '') {
						return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.OligoBarcode", item.@idOligoBarcodeB);    		
					} else {
						return item.@barcodeSequenceB;
					}
				} else {
					return "";
				}
				
			}
			private function lookupNumberSequencingCyclesAllowed(item:Object, col:Object):String {			
				if (item != null  && item.hasOwnProperty("@idNumberSequencingCyclesAllowed")) {
					var d:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.NumberSequencingCyclesAllowed', item.@idNumberSequencingCyclesAllowed);
					if (d != null) {
						return d.@name; 
					} else {
						return "";
					}
				} else {
					return "";
				}
			}
		]]>
	</mx:Script>
	<!--							END Grid Labeling Functions						-->
	<mx:Script>
		<![CDATA[			

			
			private function showHideInstructions():void {
				if (instructionText.visible) {
					instructionText.visible = false;
					instructionText.includeInLayout = false;
					instructions.label = "Instructions";
				} else {
					instructionText.visible = true;
					instructionText.includeInLayout = true;
					instructions.label = "Hide instructions";
				}
			}
			public function updateIsControl(event:Event):void {
				if(event.currentTarget.parentDocument.data.hasOwnProperty("@isControl") && event.currentTarget.parentDocument.data.@isControl == "true") {
					event.currentTarget.parentDocument.data.@isControl = "false";
				} else {
					event.currentTarget.parentDocument.data.@isControl = "true";
				}				
			}
			
			public function sortRHS(a:Object, b:Object, fields:Array = null ):int {
				var result:int = 0;
				var i:int = 0;
				var propList:Array = fields ? fields : ['@flowCellChannelNumber'];
				var len:int = propList.length;
				var propName:String;
				while (result == 0 && (i < len)) {
					propName = propList[i];
					result = compareValues(a[propName], b[propName]);					
					i++;
				}
				// there was a tie, but if one is editable it needs to go UP
				if(result == 0 && (a.hasOwnProperty('@editable') || b.hasOwnProperty('@editable'))){
					if(a.@editable == 'true') {
						return -1;
					} else {
						return 1;
					}
				}else {
					return result;					
				}
				
			}
			public function compareValues(a:Object, b:Object):int {
				if(a == null && b == null)
					return 0;
				if(a == null)
					return 1;
				if(b == null)
					return -1;
				if (a < b)
					return -1;
				if (a > b)
					return 1;
				return 0;
			}			
			
		]]>
	</mx:Script>
	
	<mx:HDividedBox width="100%" height="100%">
		<!--																______________________________LHS START______________________________ 															-->
		<mx:VBox width="50%" height="100%">
			<mx:VBox width="100%" height="90">
				<mx:HBox height="100%" width="100%">
					<mx:VBox height="100%" width="100%">
						<mx:HBox width="100%">
							<mx:Label text="Pending Sequence Lanes" fontWeight="normal" styleName="formLabel" fontSize="12"/>
							<mx:Spacer width="100%"/>
							<mx:Label text="{'(' + pendingSequenceLanesWorkList.length + ' experiments)'}" fontWeight="normal" fontSize="11" fontStyle="italic"/>
						</mx:HBox>
						<mx:HBox paddingTop="0" width="100%" verticalAlign="middle" paddingBottom="1" horizontalGap="8">
							<mx:HBox verticalAlign="middle"  horizontalGap="0">
								<mx:Label text="# Cycles" styleName="labelSmall" width="70"/>
								<mx:TextInput width="60" id="numberOfCyclesFilter" change="{lookupExperimentNumber.text='';pendingSequenceLanesWorkList.refresh()}" enter="{lookupExperimentNumber.text='';pendingSequenceLanesWorkList.refresh();}"  fontSize="10"/>
							</mx:HBox>
							<mx:HBox horizontalGap="1" borderStyle="none" cornerRadius="10" borderColor="#466D88" styleName="labelSmall">
								<renderers:FilterComboBox dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SeqRunType').DictionaryEntry.(@isActive == 'Y' &amp;&amp; @display != '')}" 
														  labelField="@display" fontSize="11"
														  prompt="Select a Sequence Run Type..." close="{lookupExperimentNumber.text='';pendingSequenceLanesWorkList.refresh();}" 
														  width="200"
														  id="seqRunTypeFilterCombo" >
								</renderers:FilterComboBox>
							</mx:HBox>
						</mx:HBox>
						<mx:HBox width="100%"  horizontalGap="8" paddingBottom="2" paddingTop="2">
							<mx:HBox verticalAlign="middle"   horizontalGap="0">
								<mx:Label text="Experiment #" styleName="labelSmall" width="70"/>
								<mx:TextInput width="60" id="lookupExperimentNumber" change="{pendingSequenceLanesWorkList.refresh()}" enter="{pendingSequenceLanesWorkList.refresh()}"  fontSize="10"/>
							</mx:HBox>					
							<renderers:FilterComboBox dataProvider="{parentApplication.submitRequestLabList.source}" 
													  labelField="@name" fontSize="11"
													  prompt="Select a lab..." close="{lookupExperimentNumber.text='';pendingSequenceLanesWorkList.refresh();}" 
													  width="200"
													  id="labCombo" >
							</renderers:FilterComboBox>
						</mx:HBox>
					</mx:VBox>
					<mx:Spacer width="100%"/>
					<mx:VBox paddingRight="20">
						<mx:AdvancedDataGrid id="controlsGrid" width="145" height="75"
											 fontSize="10" resizableColumns="false" sortableColumns="false"
											 visible="{controlsCount == 0 ? false : true}" borderStyle="none"
											 dataProvider="{controlsList}"
											 alternatingItemColors="{[ 0xEEEEE0, 0xFFFFFF]}"
											 >
							<mx:columns>
								<mx:AdvancedDataGridColumn  dataField="@number" width="75">
									<mx:headerRenderer>
										<mx:Component>
											<mx:VBox width="75" height="20" verticalGap="0" horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle" maxWidth="150" >
												<mx:Label width="75" text="Control" />										
											</mx:VBox>
										</mx:Component>
									</mx:headerRenderer>
								</mx:AdvancedDataGridColumn>
								<mx:AdvancedDataGridColumn width="60">	
									<mx:headerRenderer>
										<mx:Component>
											<mx:VBox width="55" verticalGap="0"    horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle" height="20"  maxWidth="60">
												<mx:Label width="55" text="Channel" />
											</mx:VBox>
										</mx:Component>
									</mx:headerRenderer>
									<mx:itemRenderer>
										<mx:Component>
											<mx:VBox width="55"  verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle"  maxWidth="60">								
												<mx:ComboBox width="55" id="flowCellLaneChooser" labelField="@display"
															 dataProvider="{outerDocument.flowCellChannelsCountList.source}"
															 change = " data.@flowCellChannelNumber = flowCellLaneChooser.selectedLabel "
															 selectedIndex="{parentDocument.getchannelNumber(data.@flowCellChannelNumber)}"								  />
											</mx:VBox>
										</mx:Component>
									</mx:itemRenderer>
								</mx:AdvancedDataGridColumn>
							</mx:columns>				
						</mx:AdvancedDataGrid>					
					</mx:VBox>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="100%" height="90%">
				<util:AdvancedDataGridGroupedRowColorsIdRequestAndMultiplexGroup
					id="pendingSequenceLanesGrid" width="100%" height="100%" 
					sortableColumns="false" 				
					fontSize="10"
					resizableColumns="false"
					dataProvider="{pendingSequenceLanesWorkList}"
					allowMultipleSelection="true"
					editable="true">
					<util:columns>
						<mx:AdvancedDataGridColumn dataField="@number" editable="false" headerText="Experiment" width="75" >
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox width="75" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
										<mx:Label text="Experiment"/>
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn id="channelChooserColumn" width="60"
												   dataField="@flowCellChannelNumber" editable="true"
												   rendererIsEditor="false"												    
												   editorDataField="value"  >
							<mx:itemEditor>
								<mx:Component id ="channelChooserColumnItemEditor">
									<renderers:GridColumnFillButton fillColumnKey="idRequestAndMultiplexGroup">
										<renderers:edtComponent>
											<renderers:ComboBox id="channelChooserComboBox" dataProvider="{outerDocument.flowCellChannelsCountList}" labelField="@display" valueField="@value" dataField="@flowCellChannelNumber" />	
										</renderers:edtComponent>										
									</renderers:GridColumnFillButton>
								</mx:Component>
							</mx:itemEditor> 
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox width="55" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
										<mx:Label text="Channel"/>
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn dataField="@idOligoBarcode" labelFunction="lookupOligoBarcode" width="120" editable="false">
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox width="120" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
										<mx:Label text="Index Tag A"/>										
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn dataField="@idOligoBarcodeB" labelFunction="lookupOligoBarcodeB" width="120" editable="false">
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox width="120" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
										<mx:Label text="Index Tag B"/>
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn id="protocolChooserColumn" width="300"
												   dataField="@idNumberSequencingCyclesAllowed" editable="false"
												   rendererIsEditor="false"
												   itemRenderer="{views.renderers.DropdownLabel.create(sequenceProtocolsList.source, '@display', '@value', '@idNumberSequencingCyclesAllowed', true, true)}"
												   itemEditor="{views.renderers.GridColumnFillButton.create(views.renderers.ComboBox.create(sequenceProtocolsList.source,'@display', '@value', '@idNumberSequencingCyclesAllowed', null, true).newInstance(), 'idRequestAndMultiplexGroup')}" 
												   editorDataField="value" >
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox width="120" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
										<mx:Label text="Sequencing Protocol"/>
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>							
					</util:columns>		
				</util:AdvancedDataGridGroupedRowColorsIdRequestAndMultiplexGroup>
			</mx:VBox>
<!--			<mx:HBox width="100%" height="8%" verticalGap="0" borderStyle="solid">				
				
				<mx:DataGrid dataProvider="{pendingSequenceLanesGrid.selectedItems}" fontSize="8">
					<mx:columns>							
						<mx:DataGridColumn dataField="@number" headerText="Num" />
						<mx:DataGridColumn dataField="@idRequest" headerText="Req"/>
						<mx:DataGridColumn dataField="@multiplexGroupNumber" headerText="Mplex" />
						<mx:DataGridColumn dataField="@idRequestAndMultiplexGroup" headerText="idReq&amp;Mplex"/>
						<mx:DataGridColumn dataField="@flowCellChannelNumber" headerText="Chnl"/>
						<mx:DataGridColumn dataField="@codeRequestCategory" headerText="ReqCat" />
						<mx:DataGridColumn dataField="@idSeqRunType" headerText="SeqType" labelFunction="lookupSeqRunType" />
						<mx:DataGridColumn dataField="@idNumberSequenceCycles" headerText="NumCycls" labelFunction="lookupNumberSequencingCycles"/>						
					</mx:columns>
				</mx:DataGrid>
			</mx:HBox> -->
		</mx:VBox>
		<!-- 																______________________________LHS END______________________________ 															-->
		<!-- 																______________________________RHS START______________________________ 															-->
		<mx:VBox width="50%" height="100%">
			<mx:VBox width="100%" height="90">

				<mx:Label text="Flow Cell to Assemble" styleName="formLabel" fontSize="12"/>
				<mx:HBox width="100%" verticalAlign="middle">
					<mx:Label text="Barcode" styleName="formLabel" width="70"/>
					<mx:TextInput id="flowCellBarcode" width="130" fontSize="10"/>
					<mx:Label text="Run #" styleName="formLabel"/>
					<mx:TextInput id="flowCellRunNumber" width="40" restrict="0-9" fontSize="10"/>
					<mx:Label text="Create Date" styleName="formLabel" width="83" textAlign="right"/>
					<mx:DateField id="flowCellCreateDate" showToday="true" fontSize="10"/>
				</mx:HBox>
				<mx:HBox width="100%" verticalAlign="middle">
					<mx:Label text="Instrument" styleName="formLabel" width="70"/>
					<mx:ComboBox width="130" id="flowCellInstrument"
								 labelField="@display"
								 dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Instrument').DictionaryEntry.(@isActive=='Y')}" fontSize="11">
					</mx:ComboBox>
					<mx:HBox id="hboxGroupSide" paddingTop="0" paddingBottom="0" borderStyle="none" cornerRadius="10" borderColor="#466D88" paddingLeft="0" paddingRight="0">
						<mx:RadioButtonGroup id="flowCellSide"/>
						<mx:RadioButton groupName="flowCellSide" label="Side A" styleName="labelSmall" id="radioSideA" paddingBottom="0" paddingLeft="4" paddingRight="0" paddingTop="0" textAlign="left" horizontalGap="0" verticalGap="0" value="A">
						</mx:RadioButton>
						<mx:RadioButton groupName="flowCellSide" label="Side B" styleName="labelSmall" id="radioSideB" paddingLeft="0" paddingBottom="0" paddingRight="4" paddingTop="0" horizontalGap="0" verticalGap="0" value="B">
						</mx:RadioButton>
					</mx:HBox>
					<mx:HBox horizontalGap="20" verticalAlign="middle">
						<mx:Label text="Protocol" styleName="formLabel" width="45"/>
						<mx:ComboBox width="200" id="flowCellProtocolChooser" labelField="@name" rowCount="{sequenceProtocolsList.length}" dataProvider="{sequenceProtocolsList}" visible="{true}" includeInLayout="{true}"/>
					</mx:HBox>					
				</mx:HBox>							
			</mx:VBox>
		<mx:VBox width="100%" height="90%">
			<util:AdvancedDataGridGroupedRowColorsFlowCellChannelNumber  id="assembleFlowCellGrid" width="100%" height="100%" displayItemsExpanded="true"
								 sortableColumns="false" 
								 dataProvider="{assembleFlowCellWorkList}"
								 fontSize="10" resizableColumns="false">
				<util:columns>
					<mx:AdvancedDataGridColumn dataField="@number" editable="false" headerText="Experiment" width="75" >
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox width="75" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
									<mx:Label text="Experiment"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer>
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn width="50">
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
									<mx:Label text="Control"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer>
						<mx:itemRenderer>
							<mx:Component>
								<mx:Box verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
									<mx:CheckBox change="outerDocument.updateIsControl(event);" visible="{data.@editable == 'true'}" includeInLayout="{data.@editable == 'true'}" selected="{data.@isControl == 'true'}" />
								</mx:Box>
							</mx:Component>
						</mx:itemRenderer>
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn dataField="@flowCellChannelNumber" width="45">			
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox width="45" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
									<mx:Label width="45" text="Channel"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer>	
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn dataField="@idOligoBarcode" labelFunction="lookupOligoBarcode" width="120" >
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox width="120" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
									<mx:Label text="Index Tag A"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer>
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn dataField="@idOligoBarcodeB" labelFunction="lookupOligoBarcodeB" width="120" >
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox width="120" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
									<mx:Label text="Index Tag B"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer>
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn width="300" dataField="@idNumberSequencingCyclesAllowed" labelFunction="lookupNumberSequencingCyclesAllowed"   >
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox width="300" verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
									<mx:Label text="Sequencing Protocol"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer>
					</mx:AdvancedDataGridColumn>
				</util:columns>		
			</util:AdvancedDataGridGroupedRowColorsFlowCellChannelNumber>				
			</mx:VBox>
			
		</mx:VBox>
		<!-- 																______________________________RHS END_______________________________________ 															-->
	</mx:HDividedBox>
	<mx:ControlBar horizontalAlign="right" width="100%">
		<mx:HBox width="100%" horizontalAlign="left">
		</mx:HBox>
		<util:DirtyNote id="dirty"/>
		<mx:Button label="Save" id="saveButton" icon="@Embed(source='../../assets/save.png')" disabledIcon="@Embed(source='../../assets/save_disable.png')" click="save()"/>
	</mx:ControlBar>	
</mx:VBox>
