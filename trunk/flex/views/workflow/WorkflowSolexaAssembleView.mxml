<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"  xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%"
	xmlns:util="views.util.*" 
	xmlns:renderers="views.renderers.*" verticalGap="0" paddingTop="0" paddingRight="4" paddingLeft="4" paddingBottom="0">
	
<mx:HBox verticalAlign="middle" width="100%" >
	<mx:Image source="{parentApplication.iconSolexa}"/>
	<mx:Label id="titleLabel" styleName="titleLabel" 
		text="" />
	<mx:Spacer width="100%"/>
	
	<mx:HBox  horizontalAlign="center">
		<mx:LinkButton id="instructions" icon="@Embed(source='../../assets/information.png')" label="Instructions" click="{showHideInstructions()}"/>
		<mx:TextArea styleName="instructionBox" visible="false" includeInLayout="false" id="instructionText" wordWrap="false" height="20" paddingLeft="4" paddingRight="4" width="600">
			<mx:htmlText><![CDATA[To assemble flow cell, drag ctrl or seq. req. onto flow cell.  To drag multiple, hold SHIFT or CTRL key while selecting.]]></mx:htmlText>
		</mx:TextArea>	
	</mx:HBox>  
	<mx:LinkButton textDecoration="underline" label="Refresh"  icon="@Embed('../../assets/action_refresh.gif')" 
				   click="refreshWorkList();" toolTip="Refresh worklist"/>

</mx:HBox>
	
	<mx:HTTPService 
    id="getWorkList" 
    url="GetWorkItemList.gx"
    resultFormat="e4x"
    destination="getWorkList"
    showBusyCursor="true"
    result="onGetWorkList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get work list', event)"
    useProxy="false">
    <mx:request>
        <codeStepNext>{codeStepNext}</codeStepNext>
    </mx:request>
    </mx:HTTPService >
    
    	
	<mx:HTTPService 
    id="getNextWorkList" 
    url="GetWorkItemList.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetNextWorkList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get next work list', event)"
    useProxy="false">
    <mx:request>
        <codeStepNext>SEQRUN</codeStepNext>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="saveWorkItem" 
    url="SaveWorkItemSolexaAssemble.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveWorkItem(event)"
    fault="parentApplication.onFailHttpRequest('Unable to save work list', event)"
    method="POST"
    useProxy="false">
    </mx:HTTPService >    
    
    <mx:HTTPService 
    id="deleteWorkItem"   
    url="DeleteWorkItem.gx" 
    resultFormat="e4x"
    showBusyCursor="true"
    result="onDeleteWorkItem(event)"
    fault="parentApplication.onFailHttpRequest('Unable to delete work item', event)"
    method="POST"
    useProxy="false">
    </mx:HTTPService >    

    <mx:XMLListCollection id="workList" source="{getWorkList.lastResult.Request}" filterFunction="{filterWorklist}" />
    <mx:XMLListCollection id="dirtyChannelWorkList" />
    <mx:XMLListCollection id="dirtyStatusWorkList" />
    <mx:XMLListCollection id="nextWorkList" source="{getNextWorkList.lastResult.WorkItem}"/>
    
<mx:Script>
	<![CDATA[
		import hci.flex.controls.ComboBox;
		import hci.flex.controls.DropdownLabel;
		
		import mx.collections.IHierarchicalCollectionView;
		import mx.collections.IList;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;
		import mx.events.DragEvent;
		import mx.managers.DragManager;
		import mx.rpc.events.ResultEvent;
		
		import views.renderers.CheckBoxFlowCellIsControl;
		import views.renderers.GridColumnFillButton;
		
		[Bindable]
		private var controlsCount:int = 1;
		
		[Bindable]
        public var codeStepNext:String;
		
		private var prevChannelCount:int = 0;
        
		
		private var isValid:Boolean = true;
		
		private var warningMessage:String = "";
		
		private var maxFlowCellCount:int;
		
		private var draggedItems:Array = null;
		
		public function initializeData(maxFlowCells:int):void {
			maxFlowCellCount = maxFlowCells;
			if(codeStepNext == 'SEQASSEM') {
				titleLabel.text = 'Illumina GAIIx Seq Run Setup';
				hboxGroupSide.visible = true;
				hboxGroupSide.includeInLayout = true;
			} else if (codeStepNext == 'HSEQASSEM') {
				titleLabel.text = 'Illumina HiSeq Seq Run Setup';
				hboxGroupSide.visible = true;
				hboxGroupSide.includeInLayout = true;
			} else if (codeStepNext == 'MISEQASSEM') {
				titleLabel.text = 'Illumina MiSeq Seq Run Setup';
				hboxGroupSide.visible = false;
				hboxGroupSide.includeInLayout = false;
			}
			controlsGrid.dataProvider = parentApplication.dictionaryManager.getEntriesExcludeBlank('hci.gnomex.model.SequencingControl'); 
			
			controlsCount = parentApplication.dictionaryManager.getEntriesExcludeBlank('hci.gnomex.model.SequencingControl').length();
        }
		
		private function onGetWorkList(event:ResultEvent):void {
			if (event.result.name() == "WorkItemList") {

				workList.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingWorkItemDataChange);
    	    	this.pendingLanesGrid.validateNow();
				this.radiogroupSeqRunType.selection = null;
				this.numberOfCycles.text = null;
				
				
				workList.refresh();
        	} else {
        		Alert.show(event.result..ERROR.@message.toString(), "Error getting work list");
        	}
        }
		private function onGetNextWorkList(event:ResultEvent):void {
        	if (event.result.name() != "WorkItemList") {
        		Alert.show(event.result..ERROR.@message.toString(), "Error getting next work list");
        	}
        }
		private function underlyingWorkItemDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets to work list
			} else {
				dirty.setDirty();
				//this.workList.filterFunction = null;
			}
		}
		private function refreshWorkList():void {
			this.labCombo.selectedItem = null;
			this.numberOfCyclesFilter.text = "";
			radiogroupSeqRunTypeFilter.selectedValue = "ANY";
			workList.filterFunction = this.filterWorklist;

			
			dirtyChannelWorkList.removeAll();
        	dirty.resetDirty();
        	getWorkList.send();
        	getNextWorkList.send();
        }

    	private function getAssembleLaneRowNumber(item:Object,col:int):String
    	{
       		var x:int = dirtyChannelWorkList.getItemIndex(item) + 1;
       		return String(x);
    	} 
    	private function getPendingLaneRowNumber(item:Object,col:int):String
    	{
       		var x:int = workList.getItemIndex(item) + 1;
       		return String(x);
    	} 	
    	
    	private function save():void {
    		// Prevent save if max flow cell channels exceeded.
			if (dirtyChannelWorkList.length > 0) {
				var lastWorkItem:Object = dirtyChannelWorkList.getItemAt(dirtyChannelWorkList.length - 1);
				if (lastWorkItem.@channelNumber > maxFlowCellCount) {
					Alert.show("Max " + maxFlowCellCount + " flow cell channels loaded.  Please remove extra lanes");	
					return;
				}	    			
			}
			
			
			
    		// Prevent save if flow cell barcode is not entered, but items
    		// have been dragged over to flowcell
    		if (dirtyChannelWorkList.length > 0) {
	    		if (this.flowCellBarcode.text == "") {
    				this.flowCellBarcode.setFocus();
    				Alert.show("Please enter the flow cell barcode");
    				return;
    			}
    		}
    		// Prevent save if flow cell date is not entered, but
    		// items have been draddged over to flowcell
    		if (dirtyChannelWorkList.length > 0) {
	    		if (this.flowCellDate.text == "") {
    				this.flowCellDate.setFocus();
    				Alert.show("Please enter the cluster gen date");
    				return;
    			}    			
    		}
			// Prevent save if run number is not entered, but
			// items have been draddged over to flowcell
			if (dirtyChannelWorkList.length > 0) {
				if (this.runNumber.text == "") {
					this.runNumber.setFocus();
					Alert.show("Please enter the run #");
					return;
				}    			
			}
			// Prevent save if flow cell date is not entered, but
			// items have been draddged over to flowcell
			if (dirtyChannelWorkList.length > 0) {
				if (this.comboInstrument.selectedItem == null || this.comboInstrument.selectedItem.@value == "") {
					this.comboInstrument.setFocus();
					Alert.show("Please choose the instrument");
					return;
				}    			
			}
			// Prevent save if side is not entered, but
			// items have been draddged over to flowcell
			if (!(codeStepNext == 'MISEQASSEM') && dirtyChannelWorkList.length > 0) {
				if (this.radiogroupSide.selectedValue == null || this.radiogroupSide.selectedValue == "") {
					this.radioSideA.setFocus();
					Alert.show("Please choose the side");
					return;
				}    			
			}
    		
    		warningMessage = "";
    		isValid = true;
    		if (dirtyChannelWorkList.length > 0) {
	    		validateNumberOfLanes();
    			validateSequencingControl();
    			validateSeqRunType();
	    		validateNumberSequencingCycles();
    		}
    		if (isValid) {
	    		saveWorkItems();				    
    		} else {
    			promptForWarning();
    		}
    	}
    	
    	private function saveWorkItems():void {
    		var dirtyStatusWorkItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');
    		if ( this.dirtyChannelWorkList.length == 0 && dirtyStatusWorkItems.length == 0) {
    			Alert.show("No changes have been made.");
    			return;
    		}
    		
    		var params:Object = new Object();
    		params.flowCellBarcode = this.flowCellBarcode.text;
    		params.flowCellDate = this.flowCellDate.text;
    		params.workItemXMLString = dirtyChannelWorkList.toXMLString();
			if(codeStepNext == 'SEQASSEM') {
				params.codeStepNext = 'SEQPIPE';
			} else if (codeStepNext == 'HSEQASSEM') {
				params.codeStepNext = 'HSEQPIPE';
			} else if (codeStepNext == 'MISEQASSEM') {
				params.codeStepNext = 'MISEQPIPE';
			}
			params.runNumber = this.runNumber.text;
			params.numberSequencingCyclesActual = this.numberOfCycles.text;
			params.side = this.radiogroupSide.selectedValue;
			params.idSeqRunType = this.radiogroupSeqRunType.selectedValue;
			if (this.comboInstrument.selectedItem != null && this.comboInstrument.selectedItem.@value != '') {
				params.idInstrument = this.comboInstrument.selectedItem.@value;
			}

    		// These are the work items still on the cluster
    		// gen work list that have a new status 
    		params.dirtyWorkItemXMLString = dirtyStatusWorkItems.toXMLString();     	
    		
        	saveWorkItem.send(params);
    	}	

    	private function promptForWarning():void {
    		if (warningMessage != "") {
    			warningMessage += "Continue saving?";
				Alert.show(warningMessage, "Warning", (Alert.YES | Alert.NO), null, onPromptForWarning);
	       	}
    	}
    	
    	private function onPromptForWarning(event:CloseEvent):void {
    		if (event.detail == Alert.YES) {
    			saveWorkItems();
    		}
    	}

        private function onSaveWorkItem(event:ResultEvent):void {
        	if (saveWorkItem.lastResult.name() == "WorkItemList" || saveWorkItem.lastResult.name() == "SUCCESS" ) {
        		if (saveWorkItem.lastResult.hasOwnProperty("@flowCellNumber") && saveWorkItem.lastResult.@flowCellNumber != "") {
	        		Alert.show("Flow Cell " + saveWorkItem.lastResult.@flowCellNumber + " has been created.");    			
        		}
        		dirty.resetDirty();
        		this.getWorkList.send();
        		this.getNextWorkList.send();
        		dirtyChannelWorkList.removeAll();
        		this.flowCellBarcode.text = "";

        	} else {
        		Alert.show(saveWorkItem.lastResult..ACTMESSAGE.@TEXT);
        	}        	
        }    
        private function onDeleteWorkItem(event:ResultEvent):void {
        	if (deleteWorkItem.lastResult.name() == "SUCCESS") {
        		this.getWorkList.send();
        	} else {
        		Alert.show(deleteWorkItem.lastResult..ACTMESSAGE.@TEXT);
        	}        	
        }     
    	private function validateNumberOfLanes():void {
			if (dirtyChannelWorkList.length < maxFlowCellCount) {
				if(maxFlowCellCount > 1) {
					warningMessage = "Not all " + maxFlowCellCount + " channels are populated.\n\n";
				} else {
					warningMessage = "The channel is not populated.\n\n";
				}
				isValid = false;
			}					
    	}
    	
    	private function validateSequencingControl():void {
    		var theItem:Object;
    		var item:Object;
    		var controlCount:int = 0;
	       
			// Make sure at least one sequencing control specified
	       	for each (theItem in dirtyChannelWorkList) {
	       		if (theItem.hasOwnProperty("@idSequencingControl")) {
	       			controlCount++;
	       		} else if (theItem != null && theItem.hasOwnProperty("@isControl") && theItem.@isControl != null && theItem.@isControl == "true") {
					controlCount++;
				}
	       	}
   			if (controlCount == 0) {
   				warningMessage += "No sequencing control specified for any of the channels.\n\n";
   			}
    	}
    	
    	private function validateSeqRunType():void {
    		var theItem:Object;
    		var item:Object;
    		var invalidCount:int = 0;
			
	       	//Warn if different flow cell type 
	       	for each (theItem in dirtyChannelWorkList) {
	       		if (theItem.hasOwnProperty("@idSequencingControl")) {
	       			continue;
	       		}
	       		for each (item in dirtyChannelWorkList) {
	       			if (item.hasOwnProperty("@idSequencingControl")) {
	       				continue;
	       			}
	       			if (theItem.@idSeqRunType != item.@idSeqRunType) {
	       				warningMessage += "The flow cell channels have samples destined for different sequence lane types.\n\n";
	       				isValid = false;
	       				invalidCount++;
	       				break;
	       			}
	       		}
	       		if (invalidCount > 0) {
	       			break;
	       		}
	       	}

    	}    	
    	
    	
    	private function validateNumberSequencingCycles():void {
    		var theItem:Object;
    		var item:Object;
    		var invalidCount:int = 0;
	       for each (theItem in dirtyChannelWorkList) {
	       		if (theItem.hasOwnProperty("@idSequencingControl")) {
	       			continue;
	       		}
	       		for each (item in dirtyChannelWorkList) {
	       			if (item.hasOwnProperty("@idSequencingControl")) {
	       			continue;
	       			}
	       			if (theItem.@idNumberSequencingCycles != item.@idNumberSequencingCycles) {
	       				isValid = false;
	       				warningMessage += "Flow cell channels have different number of sequencing cycles requested.\n\n";
	       				invalidCount++;
	       				break;
	       			}
	       		}
	       		if (invalidCount > 0) {
	       			break;
	       		}
	       }    		

    	}
    	
 		public function getPendingTreeIcon(item:Object):Class {
 			if (item == null) {
				return null;  				
 			} else if (item.name() == "Request") {
 				if (item.@codeRequestCategory == "SOLEXA") {
 					return parentApplication.iconSolexa;
				} else if (item.@codeRequestCategory == "HISEQ") {
					return parentApplication.iconHiSeq;
				} else if (item.@codeRequestCategory == "MISEQ") {
					return parentApplication.iconMiSeq;
 				} else {
 					return null;
 				}
 			} else {
 				return null;
 			}
		}   

    	
    	private function moveAssembleLaneUp():void {
    		var pos:int = this.assembleLanesGrid.selectedIndex;
    		if (pos == 0) {
    			return;
    		}

    		var item:Object = this.assembleLanesGrid.selectedItem;
    		var prevItem:Object  = dirtyChannelWorkList.getItemAt(pos - 1);
    		
    		dirtyChannelWorkList.removeItemAt(dirtyChannelWorkList.getItemIndex(item));
    		dirtyChannelWorkList.removeItemAt(dirtyChannelWorkList.getItemIndex(prevItem));
    		
    		pos--;
    		dirtyChannelWorkList.addItemAt(item, pos);
    		dirtyChannelWorkList.addItemAt(prevItem, pos + 1);
    		
    		assembleLanesGrid.selectedItem = item;
    		
    	}
    	private function moveAssembleLaneDown():void {
    		var pos:int = this.assembleLanesGrid.selectedIndex;
    		if (pos == (dirtyChannelWorkList.length - 1)) {
    			return;
    		}

    		var item:Object = this.assembleLanesGrid.selectedItem;
    		var nextItem:Object  = dirtyChannelWorkList.getItemAt(pos + 1);
    		
    		dirtyChannelWorkList.removeItemAt(dirtyChannelWorkList.getItemIndex(item));
    		dirtyChannelWorkList.removeItemAt(dirtyChannelWorkList.getItemIndex(nextItem));
    		
    		dirtyChannelWorkList.addItemAt(nextItem, pos);
    		dirtyChannelWorkList.addItemAt(item, pos + 1);
    		
    		assembleLanesGrid.selectedItem = item; 
    	}   
		
		private function mergeSamples():void {
			// If the selected samples span mutiple requests, prompt user 
			// to ensure that samples should be merged into one lane
			var requestNumbers:Dictionary = new Dictionary();
			for each(var wi:XML in this.assembleLanesGrid.dataProvider) {
				requestNumbers[wi.@requestNumber.toString()] = wi.@requestNumber.toString();
			}
			var requestNumberCount:int = 0;     
			for (var key:* in requestNumbers) {         
				requestNumberCount++;     
			} 
			
			if (requestNumberCount > 1) {
				Alert.show("Are you sure you want to merge samples from different experiments into one channel?", 
					"Warning", 
					(Alert.YES | Alert.NO), 
					null, onPromptForMerge);
				
			} else {
				mergeSamplesImpl();
			}
			
		}
		
		private function onPromptForMerge(event:CloseEvent):void {
			if (event.detail == Alert.YES) {
				mergeSamplesImpl();
			}
		}
    	
    	private function mergeSamplesImpl():void {
    		prevChannelCount = getChannelCount();
			// Find a unique multiplex number that will guarantee that these samples get
			// combined into same channel
			var specialMultiplexNumber:Number = 999;
			for each(var wi:XML in this.assembleLanesGrid.dataProvider) {
				if (wi.@multiplexGroupNumber > specialMultiplexNumber) {
					specialMultiplexNumber = wi.@multiplexGroupNumber;
				}
			}
			specialMultiplexNumber++;
    		for each(var workItem:XML in this.assembleLanesGrid.selectedItems) {
    			workItem.@multiplexGroupNumber = specialMultiplexNumber;
				workItem.@allowMultiRequestMerge = 'Y';
    		}
			if (this.areIndexTagsUnique(specialMultiplexNumber)) {
				this.reassignChannelNumbers(true);
				if (prevChannelCount > getChannelCount()) {
					Alert.show("Samples from different multiplex groups have been combined into one channel.  Please adjust billing to reflect the new number of lanes for the sequencing charges.");
				} else {
					Alert.show("Unable to combine samples into one channel.  Samples must have unique index tag sequences or unique index tag groups and be adjacent to each other on the flowcell grid.");
				}
			} else {
				Alert.show("Some of the samples to be multiplexed in one flow cell channel have the same index tag.  This should only occur when samples (and their sequence reads) are meant to be pooled.  Proceed with duplicate index tags?",
					"Warning",
					(Alert.YES | Alert.NO),
					null,
					onPromptForMergeDuplicateIndexTags);
			}
    	}
		
		private function onPromptForMergeDuplicateIndexTags(event:CloseEvent):void {
			if (event.detail == Alert.YES) {
				this.reassignChannelNumbers(false);
				if (prevChannelCount > getChannelCount()) {
					Alert.show("Samples from different multiplex groups have been combined into one channel.  Please adjust billing to reflect the new number of lanes for the sequencing charges.");
				} else {
					Alert.show("Unable to combine samples into one channel.  Samples must be adjacent to each other on the flowcell grid and belong to the sample request.");
				}
			}
		}
		
		private function onDragComplete(event:DragEvent) : void {
			
			event.preventDefault(); 
			for each (var draggedItem : XML in draggedItems) { 
				var idx:int = 0;
				for each (var workItem:Object in workList) {					
					// Is this request node the parent of the dragged item or the dragged item?
					if (workItem.@idRequest == draggedItem.@idRequest) {
						// We only delete request nodes that don't have children
						if (workItem.children().length() == 0) {
							this.workList.removeItemAt(idx);
							break;
						}
					}
					idx++;
				}
			}
			
		}
		
	  	private function onDragDropLane(event:DragEvent) : void
		{
	       // retrieve the data associated with the "items" format. This will be the data that
	       // the dragInitiator has copied into the DragSource.
	       var draggedFormat:String = event.dragSource.formats[0];
		   draggedItems  = event.dragSource.dataForFormat(draggedFormat) as Array;	
	
	       // determine where in the grid the drop occurs and select that node by the index; followed by 
	       // retrieving the node itself. 
	       var row:int = assembleLanesGrid.calculateDropIndex(event);
	       assembleLanesGrid.selectedIndex = row;
	       var node:XML = assembleLanesGrid.selectedItem as XML;	       
	        

	       // Disallow operation if seq run is of different type
	       for each (var dragItem:XML in draggedItems) {
	       		if (dragItem.name() == "DictionaryEntry") {
	       			continue;
    	   		}
    	   		if (dragItem.@assembleStatus == "On Hold") {
       				Alert.show("Warning - " + dragItem.@laneNumber + "  is 'On Hold'.  Please change the status first.");
       				event.preventDefault();
		       		event.target.hideDropFeedback(event);
		       		DragManager.showFeedback(DragManager.NONE);
       				return;
       			}
	       		for each (var channelItem:XML in dirtyChannelWorkList) {
	       			if (channelItem.name() == "WorkItem") {
	       				if (dragItem.name() == "WorkItem") {
			       			if (!checkCompatibleSeqRun(dragItem, channelItem, event)) {
			       				return;
			       			} 					
	       				} else if (dragItem.name() == "MultiplexLane") {
	       					for each(var n:XML in dragItem.children()) {
	       						if (!checkCompatibleSeqRun(n, channelItem, event)) {
	       							return;
	       						}
	       					}
	       				} else if (dragItem.name() == "Request") {
	       					var multiplexLaneNode:XML = dragItem.children()[0];
	       					for each(var n1:XML in multiplexLaneNode.children()) {
	       						if (!checkCompatibleSeqRun(n1, channelItem, event)) {
	       							return;
	       						}
	       					}
	       				}	       				
		       		}
	       		}
	       }
	       

	       
	
	       // taking all of the items in the DragSouce, move to work items
	       // to the dirtyWorkItems list
	       for(var i:Number=0; i < draggedItems.length; i++) {
		       	var dragNode:XML = draggedItems[i] as XML;
		       	if (dragNode.name() == "MultiplexLane") {
					// Drag all work item in multiplex lane
		       		for each(var workItemNode:XML in dragNode.children()) {
		       			dragWorkItem(workItemNode, row);
						row++;
		       		}
		       	} else if (dragNode.name() == "Request") {
					// Drag over all multiplex lane nodes of request
					for each(var laneNode:XML in dragNode.children()) {
			       		for each(var workItemNode1:XML in laneNode.children()) {
			       			dragWorkItem(workItemNode1, row);
							row++;
			       		}
					}
		       	} else if (dragNode.name() == "WorkItem") {
			    	
					dragWorkItem(dragNode, row);		    	
			    	
			    		       			
		       	} else if (dragNode.name() == "DictionaryEntry") {
		       		dragNode.@sampleConcentrationpM = '';
		       		var newItem:Object = dragNode.copy();
					newItem.@isControl = 'true';
			    	dirtyChannelWorkList.addItemAt(newItem, row); 
		       	}
	       } 
	       
	       // Reassign channel numbers based based on any multiplexing.
	       reassignChannelNumbers(true);
	       
	           	
    		// Warn if flow cell channels exceeded.
    		if (dirtyChannelWorkList.length > 0) {
	    		var lastWorkItem:Object = dirtyChannelWorkList.getItemAt(dirtyChannelWorkList.length - 1);
	    		if (lastWorkItem.@channelNumber > maxFlowCellCount) {
					Alert.show("Max " + maxFlowCellCount + " flow cell channels loaded.  Please remove extra lanes");			
				}	    			
    		}
    		
	       // Don't allow flex to do any default moves to the data.  
	       // We handle it in the code above.
	       event.preventDefault();
		   event.target.hideDropFeedback(event);
		   DragManager.showFeedback(DragManager.NONE);
		}
		
		private function checkCompatibleSeqRun(dragNode:XML, channelNode:XML, event:DragEvent):Boolean {
			if (dragNode.@idSeqRunType != channelNode.@idSeqRunType) {
   				Alert.show("Warning - Incompatible sequence lane type.");
	       		event.preventDefault();
	       		event.target.hideDropFeedback(event);
	       		DragManager.showFeedback(DragManager.NONE);
				return false;	       	  	
   			} else {
   				return true;
   			} 	      			
		} 
		
		private function dragWorkItem(dragNode:XML, row:int):void {
       		dragNode.@sampleConcentrationpM = '';
	    	dirtyChannelWorkList.addItemAt(dragNode, row);
	    	defaultFlowCellFields(dragNode);
			
	    	var multiplexLaneNode:XML = dragNode.parent();
	    	var requestNode:XML = multiplexLaneNode.parent();
	    	var x:int = 0;
	    	for each(var child:XML in multiplexLaneNode.children()) {
	    		if (child.@number == dragNode.@number) {
		    		delete multiplexLaneNode.children()[x];
		    		break;
	    		}
	    		x++;
	    	}
	    	
	    	
	    	if (multiplexLaneNode.children().length() == 0) {
	    		x = 0;
	    		for each(var laneNode:XML in requestNode.children()) {
	    			if (laneNode.@number == multiplexLaneNode.@number) {
		    			delete requestNode.children()[x];
		    			break;
		    		}
		    		x++;
		    	}
	    	}


			
		}
		
		private function defaultFlowCellFields(dragNode:XML):void {
			if (this.numberOfCycles.text == null || this.numberOfCycles.text == "") {
				if (dragNode.hasOwnProperty("@idNumberSequencingCycles") && dragNode.@idNumberSequencingCycles != null && dragNode.@idNumberSequencingCycles != "") {
					this.numberOfCycles.text = this.lookupNumberSequencingCycles(dragNode, null);
				}
			}
			if (this.radiogroupSeqRunType.selectedValue == null) {
				if (dragNode.hasOwnProperty("@idSeqRunType") && dragNode.@idSeqRunType != null && dragNode.@idSeqRunType != "") {
					this.radiogroupSeqRunType.selectedValue = dragNode.@idSeqRunType;
				}
			}
		}
		
		private function getChannelCount():int {
			if (dirtyChannelWorkList.length > 0) {
				return dirtyChannelWorkList.getItemAt(dirtyChannelWorkList.length - 1).@channelNumber;			
			} else {
				return 0;
			}
		}
		
		private function areIndexTagsUnique(multiplexGroupNumber:Object):Boolean {
			var workItemCount:int = 0;
			var sequenceTagMap:Object = new Object();
			for each(var wi:Object in dirtyChannelWorkList) {
				if (wi.@multiplexGroupNumber == multiplexGroupNumber) {
					sequenceTagMap[wi.@barcodeSequence] = wi.@barcodeSequence;
					workItemCount++;
				}
			}
			var uniqueTagCount:int = 0;
			for (var sequenceTag:Object in sequenceTagMap) {
				uniqueTagCount++;
			}
			
			return uniqueTagCount == workItemCount;
		}
		
		private function reassignChannelNumbers(checkForDupIndexTagOnMerge:Boolean):void {
			var channelNumber:int = 0;
			var prevBarcodes:XMLListCollection = new XMLListCollection();
			var altColor:Boolean = true;
			var prevRequestNumber:String = "%%%";
			var prevMultiplexNumber:String = "%%%";
			var prevAllowMultiRequestMerge:String = 'N';
			for each(var wi:Object in dirtyChannelWorkList) {
				var nextChannel:Boolean = true;
				if (wi.hasOwnProperty("@allowMultiRequestMerge") && wi.@allowMultiRequestMerge == 'Y') {
					nextChannel = checkForDupIndexTagOnMerge;
				    if (wi.@multiplexGroupNumber != prevMultiplexNumber) {
						nextChannel = true;
					} else if (checkForDupIndexTagOnMerge && wi.hasOwnProperty('@barcodeSequence') && wi.@barcodeSequence != null && wi.@barcodeSequence != '') {
						if (prevBarcodes.length > 0) {
							nextChannel = false;
							for each(var bc:Object in prevBarcodes) {
								if (wi.@barcodeSequence == bc.@barcodeSequence) {
									nextChannel = true;
									break;
								}
							}
						}
						prevBarcodes.addItem(wi);
					}
					
				} else {
					if (wi.@requestNumber != prevRequestNumber) {
						nextChannel = true;
					} else if (wi.@multiplexGroupNumber != prevMultiplexNumber) {
						nextChannel = true;
					} else if (wi.hasOwnProperty('@barcodeSequence') && wi.@barcodeSequence != null && wi.@barcodeSequence != '') {
						if (prevBarcodes.length > 0) {
							nextChannel = false;
							for each(var barcode:Object in prevBarcodes) {
								if (wi.@barcodeSequence == barcode.@barcodeSequence) {
									nextChannel = true;
									break;
								}
							}
						}
						prevBarcodes.addItem(wi);
					}
					
				}
				if (nextChannel) {
					channelNumber++;
					prevBarcodes = new XMLListCollection();
					wi.@channelNumberDisplay = channelNumber; 
					wi.@editable = 'true';
					altColor = !altColor;
				} else {
					wi.@channelNumberDisplay = '';
					wi.@editable = 'false';
				}
				wi.@channelNumber = channelNumber;
				wi.@altColor = altColor;
				if (wi.hasOwnProperty('@barcodeSequence') && wi.@barcodeSequence != null && wi.@barcodeSequence != '') {
					prevBarcodes.addItem(wi);
				}
				prevRequestNumber = wi.@requestNumber;
				prevMultiplexNumber = wi.@multiplexGroupNumber;
				prevAllowMultiRequestMerge = wi.hasOwnProperty("@allowMultiRequestMerge") ? wi.@allowMultiRequestMerge : "N";

			}
		}
		
		public function removeAssembleLane():void {
			var item:Object = this.assembleLanesGrid.selectedItem;
		   	workList.addItem(item);
		    dirtyChannelWorkList.removeItemAt(dirtyChannelWorkList.getItemIndex(item));	       			
	 	}
		
		public function removePendingLane():void {
			var ids:Dictionary = getSelectedWorkItemIds();
			var idString:String = "";
			for (var key:* in ids) {
				if (idString.length > 0) {
					idString += ",";
				}
				idString += key;
			}
			var params:Object = new Object();
			params.workItemIds = idString;
			
			deleteWorkItem.send(params);
	 	}
	 	
    	private function promptForRemove():void {
			var ids:Dictionary = getSelectedWorkItemIds();
			var requestCount:Dictionary = new Dictionary();
			var numIds:int = 0;
			for (var key:* in ids) {
				var item:XML = ids[key];
				var cnt:int = 0;
				var k1:String = item.@requestNumber.toString();
				if (requestCount[k1] != null) {
					cnt = requestCount[k1];
					delete requestCount[k1];
				}
				cnt++;
				requestCount[k1] = cnt;
				numIds++;
			}
			
			if (numIds < 1) {
				Alert.show("Please select item(s) to remove", "Select Item");
				return;
			}
			
			var a:Array = new Array();
			for (var ks:* in requestCount) {
				a.push(ks);
			}
			a.sort();
			
			var countString:String = "";
			for (var i:int = 0; i < a.length; i++) {
				var key1:String = a[i];
				var cnt1:int = requestCount[key1];
				countString += "    " + key1 + " (" + cnt1.toString() + " samples)\n";
			}
    		var warningMessage:String = "Are you sure you want to remove the following " + numIds + " work items from the work list?\n" + countString;
			Alert.show(warningMessage, "Warning", (Alert.YES | Alert.NO), null, onPromptForRemove);
    	}
    	
		private function getSelectedWorkItemIds():Dictionary {
			var ids:Dictionary = new Dictionary();
			for each(var item:XML in pendingLanesGrid.selectedItems) {
				getSelectedWorkItemIdsRecurse(ids, item);
			}
			
			return ids;
		}

		private function getSelectedWorkItemIdsRecurse(ids:Dictionary, item:XML):void {
			if (item.name() == "WorkItem") {
				var found:Boolean = false;
				for(var key:* in ids) {
					if (key == item.@idWorkItem) {
						found = true;
						break;
					}
				}
				if (!found) {
					ids[item.@idWorkItem] = item;
				}
			} else {
				for each(var n:XML in item.children()) {
					getSelectedWorkItemIdsRecurse(ids, n);
				}
			}
		}
		
    	private function onPromptForRemove(event:CloseEvent):void {
    		if (event.detail == Alert.YES) {
    			removePendingLane();
    		}
    	}
	 	
		
		//
		// Need to use these label functions instead of LabelDictionary item renderer because drag image is blank otherwise.
		//
        private function lookupSeqRunType(item:Object, col:Object):String {
        	if (item != null  && item.hasOwnProperty("@idSeqRunType")) {
	        	var d:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SeqRunType', item.@idSeqRunType);
	        	if (d != null) {
	        		return d.@display;
	        	} else {
	        		return "";
	        	}
        	} else {
        		return "";
        	}
        }		
        private function lookupNumberSequencingCycles(item:Object, col:Object):String {
        	if (item != null  && item.hasOwnProperty("@idNumberSequencingCycles")) {
	        	var d:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.NumberSequencingCycles', item.@idNumberSequencingCycles);
	        	if (d != null) {
	        		return d.@display; 
	        	} else {
	        		return "";
	        	}
        	} else {
        		return "";
        	}
        }		
        private function lookupOligoBarcode(item:Object, col:Object):String {
        	if (item != null && item.hasOwnProperty("@idOligoBarcode")) {
        		if (item.@idOligoBarcode != '') {
		        	return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.OligoBarcode", item.@idOligoBarcode);    		
        		} else {
	        		return item.@barcodeSequence;
	        	}
	        } else {
	        	return "";
	        }
	        
        }		
		
		public function filterWorklist(item:Object):Boolean {
			if ((this.labCombo.selectedItem == null || this.labCombo.selectedItem.@idLab == '') &&
				this.numberOfCyclesFilter.text == '' && 
				this.lookupExperimentNumber.text == '' &&
				(this.radiogroupSeqRunTypeFilter.selectedValue == null || 
				 this.radiogroupSeqRunTypeFilter.selectedValue == '')) {
				return true;
			}
			
			if (this.lookupExperimentNumber.text != '') {
				return item.@number.toString().match(new RegExp(this.lookupExperimentNumber.text + ".*", "i"));
			}

			for each(var workItem:Object in item..WorkItem) {
				var matchesCycles:Boolean = true;
				if (numberOfCyclesFilter.text != '') {
					if (workItem.@numberSequencingCycles == numberOfCyclesFilter.text) {
						matchesCycles = true;
					} else { 
						matchesCycles = false;
					}
				}
				
				var matchesSeqRunType:Boolean = true;
				if (this.radiogroupSeqRunTypeFilter.selectedValue != '' && this.radiogroupSeqRunTypeFilter.selectedValue != 'ANY') { 
					if (workItem.@idSeqRunType == radiogroupSeqRunTypeFilter.selectedValue) {
						matchesSeqRunType = true;
					} else {
						matchesSeqRunType = false;
					}
				}
				
				var matchesLab:Boolean = true;
				if (labCombo.selectedItem != null && labCombo.selectedItem.@idLab != '') {
					matchesLab = false;
					if (labCombo.selectedItem.@idLab == workItem.@idLab) {
						matchesLab = true;
					}
				}

				
				if (matchesCycles && matchesSeqRunType && matchesLab) {
					break;
				}
			}
			
				
			return matchesCycles && matchesSeqRunType && matchesLab;
		}
		
		private function reloadWorklist():void {
			pendingLanesGrid.dataProvider =  null;
			workList.filterFunction = this.filterWorklist;
			workList.refresh();
			pendingLanesGrid.dataProvider =  new HierarchicalData(workList);
			pendingLanesGrid.invalidateList();
			pendingLanesGrid.dataProvider.refresh();
			
		}
		private function showHideInstructions():void {
			if (instructionText.visible) {
				instructionText.visible = false;
				instructionText.includeInLayout = false;
				instructions.label = "Instructions";
			} else {
				instructionText.visible = true;
				instructionText.includeInLayout = true;
				instructions.label = "Hide instructions";
			}
		}

        
	]]>
</mx:Script>    	
	<mx:HDividedBox width="100%" height="100%"  paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" >
	    <mx:VDividedBox width="50%" height="100%"   paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2"  borderStyle="solid">
			<mx:VBox width="100%" height="100%"   verticalGap="0">	
				<mx:HBox width="100%">
					<mx:Label text="Pending Sequence Lanes" fontWeight="normal" styleName="formLabel" fontSize="12"/>
					<mx:Spacer width="100%"/>
					<mx:Label text="{'(' + workList.length + ' experiments)'}" fontWeight="normal" fontSize="11" fontStyle="italic"/>
				</mx:HBox>
			    <mx:HBox paddingTop="0" width="100%" verticalAlign="middle" paddingBottom="1" horizontalGap="8">
					<mx:HBox verticalAlign="middle"  horizontalGap="0">
						<mx:Label text="# Cycles" styleName="labelSmall" width="70"/>
						<mx:TextInput width="60" id="numberOfCyclesFilter" change="{lookupExperimentNumber.text='';reloadWorklist()}" enter="{lookupExperimentNumber.text='';reloadWorklist();}"  fontSize="10"/>
					</mx:HBox>
					<mx:HBox horizontalGap="1" borderStyle="none" cornerRadius="10" borderColor="#466D88" styleName="labelSmall">
						<mx:RadioButtonGroup id="radiogroupSeqRunTypeFilter"/>
						<mx:Repeater id="seqRunTypeRepeaterFilter" dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SeqRunType').DictionaryEntry.(@isActive == 'Y' &amp;&amp; @display != '')}">
							<mx:RadioButton groupName="radiogroupSeqRunTypeFilter" 
											id="seqRunTypeFilter"  click="{lookupExperimentNumber.text='';reloadWorklist()}"
											label="{seqRunTypeRepeaterFilter.currentItem.@display}" 
											value="{seqRunTypeRepeaterFilter.currentItem.@value}" 
											paddingBottom="0" paddingLeft="4" paddingRight="0" paddingTop="0" 
											textAlign="left" horizontalGap="0" verticalGap="0" height="100%" styleName="labelSmall">
							</mx:RadioButton>
						</mx:Repeater>
						<mx:RadioButton value="ANY" groupName="radiogroupSeqRunTypeFilter" label="Either" click="{lookupExperimentNumber.text='';reloadWorklist()}" 
										horizontalGap="0" styleName="labelSmall" selected="true"/>
					</mx:HBox>
			    </mx:HBox>
				<mx:HBox width="100%"  horizontalGap="8" paddingBottom="2" paddingTop="2">
					<mx:HBox verticalAlign="middle"   horizontalGap="0">
						<mx:Label text="Experiment #" styleName="labelSmall" width="70"/>
						<mx:TextInput width="60" id="lookupExperimentNumber" change="{reloadWorklist()}" enter="{reloadWorklist()}"  fontSize="10"/>
					</mx:HBox>

					<renderers:FilterComboBox dataProvider="{parentApplication.submitRequestLabList.source}" 
											  labelField="@name" fontSize="11"
											  prompt="Select a lab..." close="{lookupExperimentNumber.text='';this.reloadWorklist();}" 
											  width="170"
											  id="labCombo" >
					</renderers:FilterComboBox>

					<mx:Spacer width="100%"/>
					<mx:Button id="removePendingLaneButton" icon="@Embed(source='../../assets/delete.png')" width="24" disabledIcon="@Embed(source='../../assets/delete_disable.png')" click="promptForRemove()">
						<mx:enabled>{pendingLanesGrid.selectedItems.length > 0 ? true : false}</mx:enabled>
					</mx:Button>
				</mx:HBox>

				<mx:AdvancedDataGrid id="pendingLanesGrid" width="100%" height="100%" 
					dragEnabled="true"  dragComplete="onDragComplete(event)"
					sortExpertMode="true"
				    sortableColumns="false"
				    displayItemsExpanded="true"
					editable="true"
					iconFunction="getPendingTreeIcon"
					allowMultipleSelection="true" fontSize="10">
					<mx:dataProvider>
						<mx:HierarchicalData id="hdWorkList" source="{workList}"/>
					</mx:dataProvider>
				 	
					<mx:columns>
						<mx:AdvancedDataGridColumn  dataField="@number" editable="false" headerText="Experiment" width="70">
	  					</mx:AdvancedDataGridColumn>	
	  					<mx:AdvancedDataGridColumn  dataField="@idOligoBarcode" editable="false" headerText="Index Tag"   width="28" labelFunction="lookupOligoBarcode">
							<mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Index"/>
								    <mx:Label text="Tag"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:AdvancedDataGridColumn>	
						<mx:AdvancedDataGridColumn  dataField="@idSeqRunType" editable="false" headerText="Paired/Single"   width="25" labelFunction="lookupSeqRunType">
							<mx:headerRenderer > 
							  <mx:Component>
								<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Single/"/>
								    <mx:Label text="Paired"/>
								</mx:VBox>
							  </mx:Component>
							</mx:headerRenderer>                     
						
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn  dataField="@idNumberSequencingCycles"  editable="false" headerText="# Cycles"   width="32"  labelFunction="lookupNumberSequencingCycles"/>
						<mx:AdvancedDataGridColumn headerText="Status"  width="39" dataField="@assembleStatus" 
	                	    editorDataField="value" 
	                	    editable="true"
	                        rendererIsEditor="false" 
	                        itemRenderer="mx.controls.Label"  
 	                        itemEditor="{views.renderers.ComboBoxWorkflowStatus.create('@assembleStatus', false, false, false, false, true)}">
					</mx:AdvancedDataGridColumn>
					</mx:columns>				
				</mx:AdvancedDataGrid>		
			</mx:VBox> 
			
			<mx:VBox width="100%" verticalGap="0" borderStyle="solid">	
				
				<mx:DataGrid id="controlsGrid" width="100%" dragEnabled="true" showHeaders="true" fontSize="10" rowCount="{controlsCount}" visible="{controlsCount == 0 ? false : true}" borderStyle="none">
					<mx:columns>
						<mx:DataGridColumn  dataField="@display"             headerText="" width="40"/>
					</mx:columns>				
				</mx:DataGrid>			 
			</mx:VBox>

	    	 
	    </mx:VDividedBox>
			    <mx:VBox width="60%" paddingTop="2" paddingBottom="2" borderStyle="solid" paddingLeft="2" paddingRight="2" height="100%" verticalGap="1" >
			        <mx:Label text="Flow Cell to Assemble" styleName="formLabel" fontSize="12"/>
			        <mx:HBox width="100%" verticalAlign="middle">
				    	<mx:Label text="Barcode" styleName="formLabel" width="70"/>
				    	<mx:TextInput id="flowCellBarcode" width="130" fontSize="10"/>
						<mx:Label text="Run #" styleName="formLabel"/>
						<mx:TextInput id="runNumber" width="40" restrict="0-9" fontSize="10"/>
				    	<mx:Label text="Create Date" styleName="formLabel" width="83" textAlign="right"/>
				    	<mx:DateField id="flowCellDate" showToday="true" fontSize="10"/>
				    </mx:HBox>
					<mx:HBox width="100%" verticalAlign="middle">
						<mx:Label text="Instrument" styleName="formLabel" width="70"/>
						<mx:ComboBox width="130" id="comboInstrument"
									 labelField="@display"
									 dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Instrument').DictionaryEntry.(@isActive=='Y')}" fontSize="11">
						</mx:ComboBox>
						<mx:HBox id="hboxGroupSide" paddingTop="0" paddingBottom="0" borderStyle="none" cornerRadius="10" borderColor="#466D88" paddingLeft="0" paddingRight="0">
							<mx:RadioButtonGroup id="radiogroupSide"/>
							<mx:RadioButton groupName="radiogroupSide" label="Side A" styleName="labelSmall" id="radioSideA" paddingBottom="0" paddingLeft="4" paddingRight="0" paddingTop="0" textAlign="left" horizontalGap="0" verticalGap="0" value="A">
							</mx:RadioButton>
							<mx:RadioButton groupName="radiogroupSide" label="Side B" styleName="labelSmall" id="radioSideB" paddingLeft="0" paddingBottom="0" paddingRight="4" paddingTop="0" horizontalGap="0" verticalGap="0" value="B">
							</mx:RadioButton>
						</mx:HBox>

					</mx:HBox>
					<mx:HBox horizontalGap="20" verticalAlign="middle">
						<mx:Label text="# Cycles" styleName="formLabel" width="60"/>
						<mx:TextInput id="numberOfCycles" width="40" restrict="0-9" fontSize="10"/>
						<mx:HBox horizontalGap="0" borderStyle="none" cornerRadius="10" borderColor="#466D88">
							<mx:RadioButtonGroup id="radiogroupSeqRunType"/>
							<mx:Repeater id="seqRunTypeRepeater" dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SeqRunType').DictionaryEntry.(@isActive == 'Y' &amp;&amp; @display != '')}">
								<mx:RadioButton groupName="radiogroupSeqRunType" 
												id="seqRunType"
												label="{seqRunTypeRepeater.currentItem.@display}" 
												styleName="labelSmall" 
												value="{seqRunTypeRepeater.currentItem.@value}" 
												paddingBottom="0" paddingLeft="4" paddingRight="0" paddingTop="0" 
												textAlign="left" horizontalGap="0" verticalGap="0">
								</mx:RadioButton>
							</mx:Repeater>
						</mx:HBox>
						
					</mx:HBox>
					<mx:HBox width="100%" horizontalGap="2" paddingTop="4">
						<mx:HBox horizontalAlign="left" paddingTop="4" paddingBottom="0" horizontalGap="4" width="100%">
							<mx:Button click="moveAssembleLaneUp();reassignChannelNumbers(true)" icon="@Embed(source='../../assets/arrow_up.png')" width="24" toolTip="Move sample up a lane"/>
							<mx:Button click="moveAssembleLaneDown();reassignChannelNumbers(true)" width="24" icon="@Embed(source='../../assets/arrow_down.png')" toolTip="Move sample down a lane"/>
							<mx:Spacer width="15"/>
							<mx:Button click="mergeSamples()"  label="Combine" toolTip="Combine samples from a request into one channel" fontSize="11"/>
							<mx:Spacer width="100%"/>
							<mx:Button id="removeFlowCellButton" icon="@Embed(source='../../assets/delete.png')" width="24" disabledIcon="@Embed(source='../../assets/delete_disable.png')" click="removeAssembleLane();reassignChannelNumbers(true)">
								<mx:enabled>{assembleLanesGrid.selectedItem != null ? true : false}</mx:enabled>
							</mx:Button>
						</mx:HBox> 
						 
					</mx:HBox> 
			<mx:AdvancedDataGrid  id="assembleLanesGrid" 
				 sortableColumns="false"
				 sortExpertMode="true"
				 dataProvider="{dirtyChannelWorkList}" width="100%" height="100%" 
				 dropEnabled="true" 
				 editable="true" 
				 dragDrop="onDragDropLane(event)"	  
				 selectionMode="multipleRows" fontSize="10" >	 
				<mx:columns>
			        <mx:AdvancedDataGridColumn headerText="Control" 
			        	width="15"        
			        	editable="false"             	
			        	dataField="@isControl" 
			        	editorDataField="selected"
			        	itemRenderer="views.renderers.CheckBoxFlowCellIsControl" >
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"  >
							    <mx:Label text="Con"/>
							    <mx:Label text="trol"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
			        </mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn editable="false" headerText="Chan #"  dataField="@channelNumberDisplay" width="20" showDataTips="true">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"  >
							    <mx:Label text="Chan"/>
							    <mx:Label text="#"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
			        </mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn  editable="false" dataField="@laneNumber" width="25" headerText="Flow Cell Sample #" showDataTips="true" >
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"  >
							    <mx:Label text="Flow Cell"/>
							    <mx:Label text="Sample #"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn  dataField="@labName" headerText="Lab" editable="false" width="30"/>
					<mx:AdvancedDataGridColumn  dataField="@idOligoBarcode" headerText="Index Tag"  editable="false" width="35" labelFunction="lookupOligoBarcode">
						<mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Index"/>
								    <mx:Label text="Tag"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn  editable="false"  dataField="@idSeqRunType" headerText="Paired/Single" width="25" 
					 showDataTips="true" 
                     itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry,'@display', '@value', '@idSeqRunType')}">
						<mx:headerRenderer > 
						  <mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Single/"/>
							    <mx:Label text="Paired"/>
							</mx:VBox>
						  </mx:Component>
						</mx:headerRenderer>                     
                    </mx:AdvancedDataGridColumn>                 											
					<mx:AdvancedDataGridColumn  editable="false"  dataField="@idNumberSequencingCycles" headerText="# Cycles"  width="25" 
					 showDataTips="true" 
                     itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry,'@display', '@value', '@idNumberSequencingCycles')}">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="#"/>
							    <mx:Label text="Cycles"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:AdvancedDataGridColumn>					

				</mx:columns>			
			</mx:AdvancedDataGrid>		 
			    </mx:VBox> 
	</mx:HDividedBox>
	<mx:ControlBar horizontalAlign="right" width="100%">
	    <mx:HBox width="100%" horizontalAlign="left">
	    </mx:HBox>
		<util:DirtyNote id="dirty"/>
		<mx:Button label="Save" id="saveButton" icon="@Embed(source='../../assets/save.png')" disabledIcon="@Embed(source='../../assets/save_disable.png')" click="save()"/>
	</mx:ControlBar>	
</mx:VBox>
