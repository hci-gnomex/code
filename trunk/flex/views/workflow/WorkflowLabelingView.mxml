<?xml version="1.0" encoding="utf-8"?>
<mx:Panel label="Labeling"  xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:views="views.*"  xmlns:util="views.util.*"
	 width="100%" height="100%" 
	title="Labeling"
	 borderThicknessTop="2">
	
	<mx:HTTPService 
    id="getWorkList" 
    url="GetWorkItemList.gx"
    resultFormat="e4x"
    destination="getWorkList"
    showBusyCursor="true"
    result="onGetWorkList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get work list', event)"
    useProxy="false">
    <mx:request>
        <codeStepNext>LABEL</codeStepNext>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="saveWorkItemLabeling" 
    url="SaveWorkItemLabeling.gx"
    resultFormat="e4x"
    destination="saveWorkItemLabeling"
    showBusyCursor="true"
    result="onSaveWorkItemLabeling(event)"
    fault="parentApplication.onFailHttpRequest('Unable to save work list', event)"
    method="POST"
    useProxy="false">
    <mx:request>
        <workItemXMLString>{dirtyWorkItems.toXMLString()}</workItemXMLString>
    </mx:request>
    </mx:HTTPService >
    
    <mx:XMLListCollection id="workList" source="{getWorkList.lastResult.WorkItem}"/>
    

    <mx:Script>
        <![CDATA[
        import mx.events.CollectionEvent;
        import mx.events.CollectionEventKind;
        import mx.validators.NumberValidator;
        import mx.events.ValidationResultEvent;        
        import mx.collections.ArrayCollection;
        import mx.collections.XMLListCollection;
        import mx.rpc.events.FaultEvent; 
        import mx.rpc.events.ResultEvent;   
        import mx.controls.Alert;
        import views.renderers.ComboBox;
        
        [Bindable]
        private var requestNumberCount:String;

        [Bindable]
        private var dirtyWorkItems:XMLListCollection;
        
        [Bindable]
        private var requestNumbers:ArrayCollection;
        
        private function refreshWorkList():void {
        	dirty.resetDirty();
        	getWorkList.send();
        }
 		private function underlyingWorkItemDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets to work list
			} else {
				dirty.setDirty();
				this.workList.filterFunction = null;
			}
		}
        private function getGridRowNumber(item:Object,col:int):String
        {
        	if (workList!= null) {
	           var x:int = workList.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
                
        public function onEdit():void {
        	workList.filterFunction = null;
        	workListGrid.selectedItem.@isDirty = "Y";
        }
        
        private function save():void {
        	if (!validate()) {
        		return;
        	}
        	var dirtyItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');        	
        	dirtyWorkItems = new XMLListCollection(dirtyItems);
        	saveWorkItemLabeling.send();
        }
        
        private function onGetWorkList(event:ResultEvent):void {
        	if (event.result.name() == "WorkItemList") {
    	    	refreshRequestNumbers();
	        	workList.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingWorkItemDataChange);
        	} else {
        		Alert.show(event.result..ERROR.@message.toString(), "Error getting work list");
        	} 
        }
        
        private function onSaveWorkItemLabeling(event:ResultEvent):void {
        	if (saveWorkItemLabeling.lastResult.name() == "WorkItemList" || saveWorkItemLabeling.lastResult.name() == "SUCCESS" ) {
        		dirty.resetDirty();
        		this.getWorkList.send();

        	} else {
        		Alert.show(saveWorkItemLabeling.lastResult..ACTMESSAGE.@TEXT);
        	}        	
        }
        
        private function onFailSaveWorkItemLabeling(event:FaultEvent):void {
        	var startPos:int = event.message.body.indexOf("TEXT=");
        	var endPos:int   = event.message.body.indexOf("TYPE=");
        	if (startPos != -1 && endPos != -1) {
	        	Alert.show(event.message.body.toString().substring(startPos + 5, endPos), "Failed to save work list");    		
        	} else {
        		Alert.show(event.message.body.toString(), "Failed to save work list");
        	}
        }
        
        private function refreshRequestNumbers():void {
        	requestNumbers = new ArrayCollection();

			var blankItem:Object = new Object();
			blankItem.data = "";
			blankItem.label = "";
        	requestNumbers.addItem(blankItem);
        	
        	for(var x:Number = 0; x < workList.length; x++) {
        		var item:Object = workList.getItemAt(x, 0);
        		
        		var found:Boolean = false;
        		for(var i:Number = 0; i < requestNumbers.length; i++) {
        			if (requestNumbers.getItemAt(i).label == item.@requestNumber) {
        				found = true;
        				break;
        			}
        		}
        		if (found == false) {
	    			var newItem:Object = new Object();
	    			newItem.data = item.@requestNumber;
	    			newItem.label = item.@requestNumber;
        			requestNumbers.addItem(newItem);
        		}
        	}
        	requestNumberCount = (requestNumbers.length - 1) + " requests in work list.";

        }
        
        private function filterWorkList(item:Object):Boolean {
        	var keep:Boolean = true;
        	if (requestNumberCombo.selectedItem != null && requestNumberCombo.selectedItem.label != "") {
        		keep = false;
        		if (item.@requestNumber == requestNumberCombo.selectedItem.label) {
        			keep = true;
        		}
        	}        	
        	return keep;
        }
        
        
        private function validate():Boolean {
        	var message:String = "";
        	var dirtyItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');        	
    		
    		var nv:NumberValidator = new NumberValidator();
	    	nv.domain = "real";
	    	nv.required = false;
	    	nv.minValue = "0";
	    	nv.maxValue = "999999";
	    	nv.precision = 2;
	    	nv.allowNegative = false;
	    	nv.exceedsMaxError = "exceeds max.";
	    	nv.invalidCharError = "contains invalid characters.";
	    	nv.negativeError = "cannot be negative.";
	    	nv.precisionError = "has too many digits beyond the decimal point";
        	
        	var item:Object = null;
        	var vr:ValidationResultEvent  = null;
        	for each (item in dirtyItems) {
		    	vr = nv.validate(item.@labelingYield);
		    	if (vr.type == ValidationResultEvent.INVALID) {
		    		message += "\nLabeling yield " + item.@labelingYield + " " + vr.message;
		    		break;
		    	}
	    	} 
	    	
	    	nv.maxValue = null;
	    	nv.precision = null;
	    	nv.domain = "int";
	    	for each (item in dirtyItems) {
		    	vr = nv.validate(item.@numberOfReactions);
		    	if (vr.type == ValidationResultEvent.INVALID) {
		    		message += "\nNumber of reactions " + item.@numberOfReactions + " " + vr.message;
		    		break;
		    	}
	    	} 
	    	  	
	    	if (message != "") {
	    		Alert.show(message);
	    		return false;
	    	} else {
	    		return true;
	    	}
        }

  
           

        ]]>
    </mx:Script> 
    
   
    <mx:VBox width="100%" height="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
    
            <mx:HBox width="100%" horizontalAlign="left" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" verticalAlign="bottom">
                <mx:Image source="{parentApplication.iconLabeling}"/>
                <mx:Label text="{requestNumberCount}"/>
            	<mx:HBox width="100%" horizontalAlign="right" verticalAlign="middle">
	            	<mx:Label text="Request #"/>
	            	<mx:ComboBox id="requestNumberCombo" 
	            		dataProvider="{requestNumbers}" 
	            		change="workList.filterFunction = filterWorkList;workList.refresh()"  
	            		width="90">
	            	</mx:ComboBox>
            		
            	</mx:HBox>
            	
            	
            </mx:HBox>
        	
    
		<mx:VBox width="100%" height="100%">
		<util:DataGridAlternatingGroup height="100%" id="workListGrid"  width="100%" dataProvider="{workList}" editable="true" itemEditEnd="onEdit()">
			<util:columns>
				<mx:DataGridColumn editable="false" headerText=""  width="5" labelFunction="getGridRowNumber"/>
				<mx:DataGridColumn editable="false" headerText="Req #"  width="8" dataField="@requestNumber"/>
				<mx:DataGridColumn editable="false" headerText="Submit Date" width="12" dataField="@createDate"/>
				<mx:DataGridColumn editable="false" headerText="Requester name"  width="15" dataField="@idAppUser" labelFunction="parentApplication.getUserName"/>
                <mx:DataGridColumn editable="false" headerText="Sample #" width="10" dataField="@sampleNumber"/>
				<mx:DataGridColumn editable="false"  headerText="Mod Nuc." width="8"  dataField="@idLabel"
                   itemRenderer="{gnomexFlex.createRendererWithProperties(views.renderers.LabelDictionary, {dictionary: 'hci.gnomex.model.Label', dataField: '@idLabel'})}"/>                 							
				<mx:DataGridColumn headerText="Labeling Protocol"  width="29" dataField="@idLabelingProtocol" 
                   editorDataField="value"
                   sortable="false" 
                   editable="true"
                   rendererIsEditor="false"
                   itemRenderer="{gnomexFlex.createRendererWithProperties(views.renderers.LabelDictionary, {dictionary: 'hci.gnomex.model.LabelingProtocol', dataField: '@idLabelingProtocol'})}"                 							
 	               itemEditor="{gnomexFlex.createRendererWithProperties(views.renderers.ComboBox, {dictionary: 'hci.gnomex.model.LabelingProtocol', dataField: '@idLabelingProtocol'})}"/>			                
	            <mx:DataGridColumn headerText="Yield" width="7" dataField="@labelingYield"/>
				<mx:DataGridColumn headerText="Reaction Size" width="11" 
					dataField="@codeLabelingReactionSize"
					editorDataField="value"
                   sortable="false" 
                   editable="true"
                   rendererIsEditor="false"  
                   itemRenderer="{gnomexFlex.createRendererWithProperties(views.renderers.LabelDictionary, {dictionary: 'hci.gnomex.model.LabelingReactionSize', dataField: '@codeLabelingReactionSize'})}"                 							
 	               itemEditor="{gnomexFlex.createRendererWithProperties(views.renderers.ComboBox, {dictionary: 'hci.gnomex.model.LabelingReactionSize', dataField: '@codeLabelingReactionSize'})}"/>			                
				<mx:DataGridColumn headerText="# Reactions" width="12" dataField="@numberOfReactions"/>
                <mx:DataGridColumn headerText="Status"  width="15" dataField="@labelingStatus" 
                	editorDataField="value"
                   sortable="false" 
                   editable="true"
                   rendererIsEditor="false"  
                   itemRenderer="mx.controls.Label"
 	               itemEditor="{gnomexFlex.createRendererWithProperties(views.renderers.ComboBoxWorkflowStatus, {dataField: '@labelingStatus'})}"/>			                
			</util:columns>
		</util:DataGridAlternatingGroup>
			
	    </mx:VBox>
	  	
	  </mx:VBox>
					
 <mx:ControlBar>
 	            	<mx:Button icon="@Embed('../../assets/action_refresh.gif')" 
 	            		click="refreshWorkList();" toolTip="Refresh worklist"/>
	 	            <mx:HBox width="100%" horizontalAlign="right">
	 	                <util:DirtyNote id="dirty"/>
	 	            	<mx:Button label="Save" click="save()" icon="@Embed('../../assets/action_save.gif')">
		            	</mx:Button>
	 	            </mx:HBox>

 </mx:ControlBar>						

</mx:Panel>
