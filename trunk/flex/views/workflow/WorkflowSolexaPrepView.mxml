<?xml version="1.0" encoding="utf-8"?>
<mx:Panel label="Solexa Sample Prep"  
	xmlns:mx="http://www.adobe.com/2006/mxml"  
	xmlns:views="views.*" 
	xmlns:util="views.util.*"
	width="100%" height="100%" 
	title="Illumina Lib Prep" 
	show="init()"
	borderThicknessTop="2">
	
	<mx:HTTPService 
    id="getWorkList" 
    url="GetWorkItemList.gx"
    resultFormat="e4x"
    destination="getWorkList"
    showBusyCursor="true"
    result="onGetWorkList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get work list', event)"
    useProxy="false">
    <mx:request>
        <codeStepNext>SEQPREP</codeStepNext>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="saveWorkItem" 
    url="SaveWorkItemSolexaPrep.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveWorkItem(event)"
    fault="parentApplication.onFailHttpRequest('Unable to save work list', event)"
    method="POST"
    useProxy="false">
    <mx:request>
        <workItemXMLString>{dirtyWorkItems.toXMLString()}</workItemXMLString>
    </mx:request>
    </mx:HTTPService >
    
    <mx:XMLListCollection id="workList" source="{getWorkList.lastResult.WorkItem}"/>
    


    <mx:Script>
        <![CDATA[
        import mx.events.CollectionEvent;
        import mx.events.CollectionEventKind;
        import mx.validators.NumberValidator;
        import mx.events.ValidationResultEvent;
        import mx.collections.ArrayCollection;
        import mx.collections.XMLListCollection;
        import mx.rpc.events.FaultEvent; 
        import mx.rpc.events.ResultEvent;   
        import mx.controls.Alert;
        import views.renderers.ComboBox;
        
        [Bindable]
        private var requestNumberCount:String;
        
        [Bindable]
        private var inputNumber:String;
        
        [Bindable]
        private var dirtyWorkItems:XMLListCollection;
        
        [Bindable]
        private var requestNumbers:ArrayCollection;
        
        public var samplePrepMethods:XMLListCollection;
        
        private function init():void {
        	samplePrepMethods = new XMLListCollection();

        	var de:Object;
        	// Filter to only show Illumina seq prep methods
        	for each(de in parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SamplePrepMethod')) {
        		
	        	var doesMatchRequestCategory:Boolean = false;
    			var theSamplePrepMethods:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethodRequestCategory').DictionaryEntry.(@value != '' && @idSamplePrepMethod == de.@value.toString());
	   			for each (var xref1:Object in theSamplePrepMethods) {
	   				if (xref1.@codeRequestCategory.toString() == "SOLEXA") {
   						doesMatchRequestCategory = true;
	   		    		break;
	   				}
	   			}
	   			if (doesMatchRequestCategory || de.@value == '') {
	   				samplePrepMethods.addItem(de);
	   			}				
        		
        	}
        }
        
        private function refreshWorkList():void {
        	dirty.resetDirty();
        	getWorkList.send();
        }
 
		private function underlyingWorkItemDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets to work list
			} else {
				dirty.setDirty();
				this.workList.filterFunction = null;
			}
		}
		private function getGridRowNumber(item:Object,col:int):String
        {
        	if (workList!= null) {
	           var x:int = workList.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
                
        public function onEdit():void {
        	workList.filterFunction = null;
	    	workListGrid.selectedItem.@isDirty = "Y";
        }
        
        private function validate():Boolean {
        	var message:String = "";
        	var dirtyItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');        	
        	
    		var nv:NumberValidator = new NumberValidator();
	    	nv.domain = "real";
	    	nv.minValue = "0";
	    	nv.maxValue = "99999";
	    	nv.precision = 3;
	    	nv.allowNegative = false;
	    	nv.exceedsMaxError = "exceeds max.";
	    	nv.invalidCharError = "contains invalid characters.";
	    	nv.negativeError = "cannot be negative.";
	    	nv.precisionError = "has too many digits beyond the decimal point";
	    	nv.requiredFieldError = "is required.";
        	
        	var item:Object = null;
        	var vr:ValidationResultEvent  = null;
		    
		    nv.domain = "integer";
		    nv.precision = 0;
        	for each (item in dirtyItems) {
		    	nv.required = item.@seqPrepStatus == 'Completed' ? true : false;
		    	vr = nv.validate(item.@seqPrepLibConcentration);
		    	if (vr.type == ValidationResultEvent.INVALID) {
		    		message += "\n" + item.@sampleNumber + " Library Concentration " + item.@seqPrepLibConcentration + " " + vr.message;
		    		break;
		    	}
	    	}         	
 
	    	nv.domain = "integer";
	    	nv.precision = 0;
        	for each (item in dirtyItems) {
		    	nv.required = item.@seqPrepStatus == 'Completed' ? true : false;
		    	vr = nv.validate(item.@seqPrepGelFragmentSizeFrom);
		    	if (vr.type == ValidationResultEvent.INVALID) {
		    		message += "\n" + item.@sampleNumber + " Fragment Size (from) " + item.@seqPrepGelFragmentSizeFrom + " " + vr.message;
		    		break;
		    	}
	    	}         	
        	
	    	nv.domain = "integer";
	    	nv.precision = 0;
        	for each (item in dirtyItems) {
		    	nv.required = item.@seqPrepStatus == 'Completed' ? true : false;
		    	vr = nv.validate(item.@seqPrepGelFragmentSizeTo);
		    	if (vr.type == ValidationResultEvent.INVALID) {
		    		message += "\n" + item.@sampleNumber + " Fragment Size (to) " + item.@seqPrepGelFragmentSizeTo + " " + vr.message;
		    		break;
		    	}
	    	}  


			// Make sure sample prep method is entered.
        	for each (item in dirtyItems) {
        		if (item.@seqPrepStatus == 'Completed' && item.@idSamplePrepMethod == '') {
        			message += "\n" + item.@sampleNumber + " Sample prep method is required.";
        			break;
        		}
	    	} 	    	       	
	    	
        	if (message != "") {
	    		Alert.show(message);
	    		return false;
	    	} else {
	    		return true;
	    	}
        	
	   		return true;
        }
        
        private function save():void {
        	if (validate() == false) {
        		return;
        	}
        	var dirtyItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');        	
        	dirtyWorkItems = new XMLListCollection(dirtyItems);
        	saveWorkItem.send();
        }
        
        private function onGetWorkList(event:ResultEvent):void {
        	if (event.result.name() == "WorkItemList") {
    	    	refreshRequestNumbers();
	        	workList.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingWorkItemDataChange);
        	} else {
        		Alert.show(event.result..ERROR.@message.toString(), "Error getting work list");
        	}        
        }
        
        private function onSaveWorkItem(event:ResultEvent):void {
        	if (saveWorkItem.lastResult.name() == "WorkItemList" || saveWorkItem.lastResult.name() == "SUCCESS" ) {
        		dirty.resetDirty();
        		this.getWorkList.send();
        	} else {
        		Alert.show(saveWorkItem.lastResult..ACTMESSAGE.@TEXT);
        	}
        }
        

        private function refreshRequestNumbers():void {
        	requestNumbers = new ArrayCollection();

			var blankItem:Object = new Object();
			blankItem.data = "";
			blankItem.label = "";
        	requestNumbers.addItem(blankItem);
        	
        	for(var x:Number = 0; x < workList.length; x++) {
        		var item:Object = workList.getItemAt(x, 0);
        		
        		var found:Boolean = false;
        		for(var i:Number = 0; i < requestNumbers.length; i++) {
        			if (requestNumbers.getItemAt(i).label == item.@requestNumber) {
        				found = true;
        				break;
        			}
        		}
        		if (found == false) {
	    			var newItem:Object = new Object();
	    			newItem.data = item.@requestNumber;
	    			newItem.label = item.@requestNumber;
        			requestNumbers.addItem(newItem);
        		}
        	}
        	requestNumberCount = (requestNumbers.length - 1) + " requests in work list.";
        }
        
        private function filterWorkList(item:Object):Boolean {
        	var keep:Boolean = true;
        	if (requestNumberCombo.selectedItem != null && requestNumberCombo.selectedItem.label != "") {
        		keep = false;
        		if (item.@requestNumber == requestNumberCombo.selectedItem.label) {
        			keep = true;
        		}
        	}        	
        	return keep;
        } 
        
		public function lookupUserName(item:Object, col:DataGridColumn):String 
    	{ 
    		return parentApplication.getAppUserList.lastResult.AppUser.(@idAppUser == item.@idAppUser).@displayName;
    	}  
           
		private function getBioanalyzerChipType(item:Object,col:DataGridColumn):String
        {
        	return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.BioanalyzerChipType", item.@seqPrepQualCodeBioanalyzerChipType);
        }
		private function getSeqLibProtocol(item:Object,col:DataGridColumn):String
        {
        	return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.SeqLibProtocol", item.@idSeqLibProtocol);
        }
		private function getSampleType(item:Object,col:DataGridColumn):String
        {
        	return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.SampleType", item.@idSampleType);
        }
        ]]>
    </mx:Script> 
    
   
    <mx:VBox width="100%" height="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
            <mx:HBox width="100%" horizontalAlign="left" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" verticalAlign="bottom">
                <mx:Image source="{parentApplication.iconSamplePrep}"/>
                <mx:Label text="{requestNumberCount}"/>
            	<mx:HBox width="100%" horizontalAlign="right"  verticalAlign="middle">
	            	<mx:Label text="Request #"/>
	            	<mx:ComboBox id="requestNumberCombo" dataProvider="{requestNumbers}" change="workList.filterFunction = filterWorkList;workList.refresh()"  width="90"></mx:ComboBox>
            		
            	</mx:HBox>
            	
            	
            </mx:HBox>
        	
		<mx:VBox width="100%" height="100%" verticalGap="0">
	
			<util:DataGridAlternatingGroup height="100%" id="workListGrid"  width="100%" dataProvider="{workList}" editable="true" itemEditEnd="onEdit()">
				<util:columns>
					<mx:DataGridColumn editable="false" headerText=""   width="5" labelFunction="getGridRowNumber"/>
	                <mx:DataGridColumn editable="false" headerText="Sample #" width="12" dataField="@sampleNumber"/>
					<mx:DataGridColumn editable="false" headerText="Client"  width="12" dataField="@idAppUser" labelFunction="lookupUserName"/>
					<mx:DataGridColumn editable="false" width="9" dataField="@seqPrepByCore">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Prepped"/>
							    <mx:Label text="by Core?"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn editable="false" width="15" dataField="@idSampleType"  headerText="Sample Type" labelFunction="getSampleType">
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="Seq Libarary kit"  width="45" 
					dataField="@idSeqLibProtocol" 
					   editorDataField="value"
		               editable="true"  
		               rendererIsEditor="false" 
		               itemRenderer="mx.controls.Label"		
		               labelFunction="getSeqLibProtocol"                
					   itemEditor="{views.renderers.ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqLibProtocol').DictionaryEntry,'@display', '@value', '@idSeqLibProtocol', null, true)}"/>		                
				    <mx:DataGridColumn editable="true" headerText="Lib conc. ng/uL"  width="9" dataField="@seqPrepLibConcentration">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Lib conc."/>
							    <mx:Label text="ng/uL"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="Bioanalyzer meth"  width="12" dataField="@seqPrepQualCodeBioanalyzerChipType"
						labelFunction="getBioanalyzerChipType" 
		               editorDataField="value"
		               editable="true"  
		               rendererIsEditor="false" 
					   itemEditor="{views.renderers.ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry,'@display', '@value', '@seqPrepQualCodeBioanalyzerChipType', null, true)}">		                
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Bioanalyzer"/>
							    <mx:Label text="method"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="Gel size rangee (from)" width="11" dataField="@seqPrepGelFragmentSizeFrom">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Gel size"/>
							    <mx:Label text="range (from)"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="Gel size range (to)" width="11" dataField="@seqPrepGelFragmentSizeTo"> 
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Gel size"/>
							    <mx:Label text="range (to)"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>

	                <mx:DataGridColumn headerText="Status"  width="20" dataField="@seqPrepStatus" 
	                	editorDataField="value" 
	                   rendererIsEditor="false"
	                   itemRenderer="mx.controls.Label"  
 	                   itemEditor="{views.renderers.ComboBoxWorkflowStatus.create('@seqPrepStatus')}"/>			                

				</util:columns>
		</util:DataGridAlternatingGroup>
			
		</mx:VBox>
	  	
	  </mx:VBox>
					
 <mx:ControlBar>
 	            	<mx:LinkButton textDecoration="underline" label="Refresh"  icon="@Embed('../../assets/action_refresh.gif')" 
 	            		click="refreshWorkList();" toolTip="Refresh worklist"/>
	 	            <mx:HBox width="100%" horizontalAlign="right">
	 	            	<util:DirtyNote id="dirty"/>
	 	            	<mx:Button label="Save" click="save()" icon="@Embed('../../assets/action_save.gif')">
		            	</mx:Button>
	 	            </mx:HBox>

 </mx:ControlBar>						

</mx:Panel>
