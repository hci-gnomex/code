<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"    
	xmlns:mx="http://www.adobe.com/2006/mxml"  
	xmlns:views="views.*" 
	xmlns:util="views.util.*"
	xmlns:renderers="views.renderers.*"
	width="100%" height="100%" 
	show="init()"
	>
<mx:HBox verticalAlign="middle">
	<mx:Image source="{parentApplication.iconLibPrep}"/>
	<mx:Label id="titleLabel" styleName="titleLabel" 
		text="" />	
</mx:HBox>
	
	<mx:HTTPService 
    id="getWorkList" 
    url="GetWorkItemList.gx"
    resultFormat="e4x"
    destination="getWorkList"
    showBusyCursor="true"
    result="onGetWorkList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get work list', event)"
    useProxy="false">
    <mx:request>
        <codeStepNext>{codeStepNext}</codeStepNext>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="saveWorkItem" 
    url="SaveWorkItemSolexaPrep.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveWorkItem(event)"
    fault="parentApplication.onFailHttpRequest('Unable to save work list', event)"
    method="POST"
    useProxy="false">
    <mx:request>
        <workItemXMLString>{dirtyWorkItems.toXMLString()}</workItemXMLString>
    </mx:request>
    </mx:HTTPService >
    
    <mx:XMLListCollection id="workList" source="{getWorkList.lastResult.WorkItem}"/>

    <mx:Sort id="barcodeSort"  compareFunction="sortBarcodes"/>
    <mx:XMLListCollection id="barcodes" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OligoBarcode').DictionaryEntry}" sort="{barcodeSort}"/>


    <mx:Script>
        <![CDATA[
        import mx.collections.ArrayCollection;
        import mx.collections.XMLListCollection;
        import mx.controls.Alert;
        import mx.events.CollectionEvent;
        import mx.events.CollectionEventKind;
        import mx.events.ValidationResultEvent;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;
        import mx.validators.NumberValidator;
        
        import views.renderers.ComboBox;

		[Bindable]
        public var codeStepNext:String;
                
        [Bindable]
        private var requestNumberCount:String;
        
        [Bindable]
        private var inputNumber:String;
        
        [Bindable]
        private var dirtyWorkItems:XMLListCollection;
        
        [Bindable]
        private var requestNumbers:ArrayCollection;
           
        private function init():void {
        	barcodes.refresh();
        }
			
		public function titleInit():void {
			if(codeStepNext == 'SEQPREP') {
				titleLabel.text = 'Illumina GAIIx Library Prep';
			} else if (codeStepNext == 'HSEQPREP') {
				titleLabel.text = 'Illumina HiSeq Library Prep';
			} else if (codeStepNext == 'MISEQPREP') {
				titleLabel.text = 'Illumina MiSeq Library Prep';
			}
			
		}  
			
        private function refreshWorkList():void {
        	dirty.resetDirty();
        	getWorkList.send();
        }
 
		private function underlyingWorkItemDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets to work list
			} else {
				dirty.setDirty();
				this.workList.filterFunction = null;
			}
		}
		private function getGridRowNumber(item:Object,col:int):String
        {
        	if (workList!= null) {
	           var x:int = workList.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
                
        public function onEdit():void {
        	workList.filterFunction = null;
	    	workListGrid.selectedItem.@isDirty = "Y";
        }
        
        private function validate():Boolean {
        	var message:String = "";
        	var dirtyItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');        	
        	
    		var nv:NumberValidator = new NumberValidator();
	    	nv.domain = "real";
	    	nv.minValue = "0";
	    	nv.maxValue = "99999";
	    	nv.precision = 3;
	    	nv.allowNegative = false;
	    	nv.exceedsMaxError = "exceeds max.";
	    	nv.invalidCharError = "contains invalid characters.";
	    	nv.negativeError = "cannot be negative.";
	    	nv.precisionError = "has too many digits beyond the decimal point";
	    	nv.requiredFieldError = "is required.";
        	
        	var item:Object = null;
        	var vr:ValidationResultEvent  = null;

	    	
        	if (message != "") {
	    		Alert.show(message);
	    		return false;
	    	} else {
	    		return true;
	    	}
        	
	   		return true;
        }
        
        private function save():void {
        	if (validate() == false) {
        		return;
        	}
        	var dirtyItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');        	
        	dirtyWorkItems = new XMLListCollection(dirtyItems);
        	saveWorkItem.send();
        }
        
        private function onGetWorkList(event:ResultEvent):void {
        	if (event.result.name() == "WorkItemList") {
				var sort:Sort = new Sort();
				sort.compareFunction = this.sortSampleNumber;
				workList.sort = sort;
				requestNumberCombo.selectedIndex = 0;
				workList.refresh();
    	    	refreshRequestNumbers();
	        	workList.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingWorkItemDataChange);
        	} else {
        		Alert.show(event.result..ERROR.@message.toString(), "Error getting work list");
        	}        
        }
        
        private function onSaveWorkItem(event:ResultEvent):void {
        	if (saveWorkItem.lastResult.name() == "WorkItemList" || saveWorkItem.lastResult.name() == "SUCCESS" ) {
        		dirty.resetDirty();
        		this.getWorkList.send();
        	} else {
        		Alert.show(saveWorkItem.lastResult..ACTMESSAGE.@TEXT);
        	}
        }
        

        private function refreshRequestNumbers():void {
        	requestNumbers = new ArrayCollection();

			var blankItem:Object = new Object();
			blankItem.data = "";
			blankItem.label = "";
        	requestNumbers.addItem(blankItem);
        	
        	for(var x:Number = 0; x < workList.length; x++) {
        		var item:Object = workList.getItemAt(x, 0);
        		
        		var found:Boolean = false;
        		for(var i:Number = 0; i < requestNumbers.length; i++) {
        			if (requestNumbers.getItemAt(i).label == item.@requestNumber) {
        				found = true;
        				break;
        			}
        		}
        		if (found == false) {
	    			var newItem:Object = new Object();
	    			newItem.data = item.@requestNumber;
	    			newItem.label = item.@requestNumber;
        			requestNumbers.addItem(newItem);
        		}
        	}
        	requestNumberCount = (requestNumbers.length - 1) + " requests in work list.";
        }
        
        private function filterWorkList(item:Object):Boolean {
        	var keep:Boolean = true;
        	if (requestNumberCombo.selectedItem != null && requestNumberCombo.selectedItem.label != "") {
        		keep = false;
        		if (item.@requestNumber == requestNumberCombo.selectedItem.label) {
        			keep = true;
        		}
        	}        	
        	return keep;
        } 

           
		private function getBioanalyzerChipType(item:Object,col:DataGridColumn):String
        {
        	return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.BioanalyzerChipType", item.@seqPrepQualCodeBioanalyzerChipType);
        }
		private function getSeqLibProtocol(item:Object,col:DataGridColumn):String
        {
        	return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.SeqLibProtocol", item.@idSeqLibProtocol);
        }
		public function getOligoBarcodeName(item:Object,col:DataGridColumn):String
        {
        	if (item.@idOligoBarcode != '') {
	        	return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.OligoBarcode", item.@idOligoBarcode);    		
        	} else {
        		return item.@barcodeSequence;
        	}
        }
		public function getOligoBarcodeNameB(item:Object,col:DataGridColumn):String
		{
			if (item.@idOligoBarcodeB != '') {
				return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.OligoBarcode", item.@idOligoBarcodeB);
			} else {
				return '';
			}
		}
		public function getIndexTagName(item:Object):String
		{
			if (item.@idOligoBarcode != '') {
				return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.OligoBarcode", item.@idOligoBarcode);    		
			} else {
				return item.@barcodeSequence;
			}
		}

		private function getSampleType(item:Object,col:DataGridColumn):String
        {
        	return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.SampleType", item.@idSampleType);
        }
        
        private function sortBarcodes(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var scheme1:String = obj1.@oligoBarcodeSchemeDisplay;
				var scheme2:String = obj2.@oligoBarcodeSchemeDisplay;
				
				if (scheme1 < scheme2) {
					return -1;
				} else if (scheme1 > scheme2) {
					return 1;
				} else {
					var order1:int = obj1.@sortOrder;
					var order2:int = obj2.@sortOrder;
					
					if (obj1.@value == '') {
						return -1;
					} else if (obj2.@value == '') {
						return 1;
					} else {
						if (order1 < order2) {
							return -1;
						} else if (order1 > order2) {
							return 1;
						} else {
							return 0;
						}
					}
					
				}
				
			}			
		}			
			
			private function sortSampleNumber(item1:Object, item2:Object, fields:Array=null):int {
				var n1:String  = item1.@sampleNumber;
				var n2:String  = item2.@sampleNumber;
				
				var parts:Array = n1.split("X");
				var num1:String = parts[0];
				var rem1:String = parts[1];
				var firstChar1:String = num1.substr(0,1);
				if ("0123456789".indexOf(firstChar1) >= 0) {
					firstChar1 = "0";
				} else {
					num1 = num1.substr(1);
				}
				
				parts = n2.split("X");
				var num2:String = parts[0];
				var rem2:String = parts[1];
				var firstChar2:String = num2.substr(0,1);
				if ("0123456789".indexOf(firstChar2) >= 0) {
					firstChar2 = "0";
				} else {
					num2 = num2.substr(1);
				}
				
				var comp:int = stringCompare(firstChar1, firstChar2);
				
				if (comp == 0) {
					var number1:Number = Number(num1);
					var number2:Number = Number(num2);
					if (number1 > number2) {
						comp = 1;
					} else if (number2 > number1) {
						comp = -1;
					}
				}
				
				if (comp == 0) {
					var remNum1:Number = Number(rem1);
					var remNum2:Number = Number(rem2);
					if (remNum1 > remNum2) {
						comp = 1
					} else if (remNum2 > remNum1) {
						comp = -1;
					}
				}
				
				return comp;
			}
			
			private static function stringCompare(s1:String, s2:String):int {
				if (s1 > s2) {
					return 1;
				} else if (s2 > s1) {
					return -1;
				} else {
					return 0;
				}
			}


        ]]>
    </mx:Script> 
    
   
    <mx:VBox verticalGap="2" width="100%" height="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
            <mx:HBox width="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" verticalAlign="bottom">
            	<mx:HBox  verticalAlign="middle">
	            	<mx:Label text="Request #"/>
	            	<mx:ComboBox id="requestNumberCombo" dataProvider="{requestNumbers}" change="workList.filterFunction = filterWorkList;workList.refresh()"  width="90"></mx:ComboBox>
            	</mx:HBox>
            	<mx:Spacer width="100%"/>
                <mx:Label text="{requestNumberCount}"/>
            </mx:HBox>
        	
		<mx:VBox width="100%" height="100%" verticalGap="0">
	
			<util:DataGridAlternatingGroup height="100%" id="workListGrid"  width="100%" dataProvider="{workList}" editable="true" itemEditEnd="onEdit()">
				<util:columns>
					<mx:DataGridColumn editable="false" headerText=""   width="5" labelFunction="getGridRowNumber"/>
	                <mx:DataGridColumn editable="false" headerText="Sample #" width="12" dataField="@sampleNumber" sortCompareFunction="sortSampleNumber"/>
	                
					<mx:DataGridColumn editable="false" headerText="Client"  width="12" dataField="@appUserName" />
					<mx:DataGridColumn editable="false" width="9" dataField="@seqPrepByCore">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Prepped"/>
							    <mx:Label text="by Core?"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn editable="false" width="25" dataField="@idSampleType"  
						headerText="Sample Type" labelFunction="getSampleType">
					</mx:DataGridColumn>
					<mx:DataGridColumn editable="false" width="9" dataField="@multiplexGroupNumber"  
						headerText="Index Tag Group" >
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox  horizontalScrollPolicy="off"  verticalGap="0">
									<mx:Label text="Idx Tag"/>
									<mx:Label text="Group"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn> 
					<mx:DataGridColumn headerText="Seq Library Protocol"  width="44" 
									   dataField="@idSeqLibProtocol" 
									   editorDataField="value"
									   editable="true"  
									   rendererIsEditor="false" 
									   itemRenderer="mx.controls.Label"		
									   labelFunction="getSeqLibProtocol" 
									   sortable="false"
									   itemEditor="{views.renderers.GridColumnFillButton.create(views.renderers.ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqLibProtocol').DictionaryEntry,'@display', '@value', '@idSeqLibProtocol', null, true).newInstance(), 'idRequest')}"/>		                

					<mx:DataGridColumn headerText="Index A"  width="20" id="indexTagACol"
										dataField="@idOligoBarcode" 
						               	editable="true"  
						               	rendererIsEditor="false" 
						               	itemRenderer="mx.controls.Label"		
						               	labelFunction="getOligoBarcodeName">	
						<mx:itemEditor>
							<mx:Component>
								<renderers:FilterComboBoxOligoBarcode idSeqLibProtocol="{data.@idSeqLibProtocol}"
																	  parentApp="{outerDocument.parentApplication}"
																	  fontSize="10"
																	  indexTagLetter="A"
																	  prompt="{null}"
																	  filterString="{outerDocument.getOligoBarcodeName(data,outerDocument.indexTagACol)}"
																	  text="{outerDocument.getOligoBarcodeName(data,outerDocument.indexTagACol)}"
																	  labelFunction="{outerDocument.getIndexTagName}"
																	  removeFilterOnSelection="false"
																	  removeInputOnFocusOut="false"
																	  focusOut="{selectedItem!=null ? data.@idOligoBarcode = this.selectedItem.@idOligoBarcode : data.@idOligoBarcode = data.@idOligoBarcode; data.@barcodeSequence = ''; outerDocument.workListGrid.dataProvider = outerDocument.workList;}" >
								</renderers:FilterComboBoxOligoBarcode>
							</mx:Component>
						</mx:itemEditor>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="Index B"  width="20" id="indexTagBCol"
									   dataField="@idOligoBarcodeB" 
									   editable="true"  
									   rendererIsEditor="false" 
									   itemRenderer="mx.controls.Label"		
									   labelFunction="getOligoBarcodeNameB">	
						<mx:itemEditor>
							<mx:Component>
								<renderers:FilterComboBoxOligoBarcode idSeqLibProtocol="{data.@idSeqLibProtocol}"
																	  parentApp="{outerDocument.parentApplication}"
																	  fontSize="10"
																	  indexTagLetter="B"
																	  prompt="{null}"
																	  filterString="{outerDocument.getOligoBarcodeNameB(data,outerDocument.indexTagBCol)}"
																	  text="{outerDocument.getOligoBarcodeNameB(data,outerDocument.indexTagBCol)}"
																	  labelFunction="{outerDocument.getIndexTagName}"
																	  removeFilterOnSelection="false"
																	  removeInputOnFocusOut="false"
																	  focusOut="{selectedItem!=null ? data.@idOligoBarcodeB = this.selectedItem.@idOligoBarcode : data.@idOligoBarcodeB = data.@idOligoBarcodeB; data.@barcodeSequence = ''; outerDocument.workListGrid.dataProvider = outerDocument.workList;}" >
								</renderers:FilterComboBoxOligoBarcode>
							</mx:Component>
						</mx:itemEditor>
					</mx:DataGridColumn>
					<mx:DataGridColumn id='meanLibSizeActualCol' headerText="Actual Mean Insert Size" width="20" headerWordWrap="true" wordWrap="true" dataField="@meanLibSizeActual" editable="true"/>
					
                <mx:DataGridColumn headerText="Status"  width="20" dataField="@seqPrepStatus" 
	                	editorDataField="value" 
	                   rendererIsEditor="false"
	                   itemRenderer="mx.controls.Label" 
					   sortable="false"
 	                   itemEditor="{views.renderers.GridColumnFillButton.create(views.renderers.ComboBoxWorkflowStatus.create('@seqPrepStatus').newInstance(), 'idRequest')}"/>			                
	
				</util:columns>
		</util:DataGridAlternatingGroup>
			
		</mx:VBox>
	  	
	  </mx:VBox>
					
 <mx:ControlBar width="100%">
 	            	<mx:LinkButton textDecoration="underline" label="Refresh"  icon="@Embed('../../assets/action_refresh.gif')" 
 	            		click="refreshWorkList();" toolTip="Refresh worklist"/>
	 	            <mx:HBox width="100%" horizontalAlign="right">
	 	            	<util:DirtyNote id="dirty"/>
	 	            	<mx:Button label="Save" click="save()" icon="@Embed('../../assets/action_save.gif')">
		            	</mx:Button>
	 	            </mx:HBox>

 </mx:ControlBar>						

</mx:VBox>
