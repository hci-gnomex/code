<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"  label="Sample Quality"  
	xmlns:mx="http://www.adobe.com/2006/mxml"  
	xmlns:views="views.*" 
	xmlns:util="views.util.*"
	width="100%" height="100%" >
<mx:HBox verticalAlign="middle">
	<mx:Image source="@Embed('../../assets/chart_curve.png')"/>
	<mx:Label id="titleLabel" styleName="titleLabel" text="Sample Quality" fontFamily="Tahoma" fontWeight="bold" fontSize="14"/>
</mx:HBox> 
	
	<mx:HTTPService 
    id="getWorkListQC" 
    url="GetWorkItemList.gx"
    resultFormat="e4x"
    destination="getWorkListQC"
    showBusyCursor="true"
    result="onGetWorkList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get work list', event)"
    useProxy="false">
    <mx:request>
        <codeStepNext>QC</codeStepNext>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="saveWorkItemQC" 
    url="SaveWorkItemQualityControl.gx"
    resultFormat="e4x"
    destination="saveWorkItemQualityControl"
    showBusyCursor="true"
    result="onSaveWorkItemQualityControl(event)"
    fault="parentApplication.onFailHttpRequest('Unable to save work list', event)"
    method="POST"
    useProxy="false">
    <mx:request>
        <workItemXMLString>{dirtyWorkItems.toXMLString()}</workItemXMLString>
    </mx:request>
    </mx:HTTPService >
    
    <mx:XMLListCollection id="workList" source="{getWorkListQC.lastResult.WorkItem}"/>
    


    <mx:Script>
        <![CDATA[
        import mx.events.CollectionEvent;
        import mx.events.CollectionEventKind;
        import mx.validators.NumberValidator;
        import mx.events.ValidationResultEvent;
        import mx.collections.ArrayCollection;
        import mx.collections.XMLListCollection;
        import mx.rpc.events.FaultEvent; 
        import mx.rpc.events.ResultEvent;   
        import mx.controls.Alert;
        import views.renderers.ComboBoxWorkflowStatus;
        
        [Bindable]
        private var requestNumberCount:String;
        
        [Bindable]
        private var inputNumber:String;
        
        [Bindable]
        private var dirtyWorkItems:XMLListCollection;
        
        [Bindable]
        private var requestNumbers:ArrayCollection;
        
        private function refreshWorkList():void {
        	dirty.resetDirty();
        	getWorkListQC.send();
        }
 
		private function underlyingWorkItemDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets to work list
			} else {
				dirty.setDirty();
				this.workList.filterFunction = null;
			}
		}
		private function getGridRowNumber(item:Object,col:int):String
        {
        	if (workList!= null) {
	           var x:int = workList.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
                
        public function onEdit():void {
        	workList.filterFunction = null;
	    	workListGrid.selectedItem.@isDirty = "Y";
        }
        
        private function validate():Boolean {
        	var message:String = "";
        	var dirtyItems:XMLList = getWorkListQC.lastResult.WorkItem.(@isDirty == 'Y');        	
    		
    		var nv:NumberValidator = new NumberValidator();
	    	nv.domain = "real";
	    	nv.required = false;
	    	nv.minValue = "0";
	    	nv.maxValue = "99999";
	    	nv.precision = 3;
	    	nv.allowNegative = false;
	    	nv.exceedsMaxError = "exceeds max.";
	    	nv.invalidCharError = "contains invalid characters.";
	    	nv.negativeError = "cannot be negative.";
	    	nv.precisionError = "has too many digits beyond the decimal point";
        	
        	var item:Object = null;
        	var vr:ValidationResultEvent  = null;
        	for each (item in dirtyItems) {
		    	vr = nv.validate(item.@qualCalcConcentration);
		    	if (vr.type == ValidationResultEvent.INVALID) {
		    		message += "\nConcentration " + item.@qualCalcConcentration + " " + vr.message;
		    		break;
		    	}
	    	} 
	    	
	    	nv.maxValue = "9";
	    	nv.precision = 2;
	    	for each (item in dirtyItems) {
		    	vr = nv.validate(item.@qual260nmTo230nmRatio);
		    	if (vr.type == ValidationResultEvent.INVALID) {
		    		message += "\n260/230 " + item.@qual260nmTo230nmRatio + " " + vr.message;
		    		break;
		    	}
	    	} 
	    	for each (item in dirtyItems) {
		    	vr = nv.validate(item.@qual260nmTo280nmRatio);
		    	if (vr.type == ValidationResultEvent.INVALID) {
		    		message += "\n260/280 " + item.@qual260nmTo280nmRatio + " " + vr.message;
		    		break;
		    	}
	    	} 

	    	nv.maxValue = "9";
	    	nv.precision = 1;
	    	for each (item in dirtyItems) {
		    	vr = nv.validate(item.@qual28sTo18sRibosomalRatio);
		    	if (vr.type == ValidationResultEvent.INVALID) {
		    		message += "\n28s/18s " + item.@qual28sTo18sRibosomalRatio + " " + vr.message;
		    		break;
		    	}
	    	} 	  
	    	
	    	  	
	    	if (message != "") {
	    		Alert.show(message);
	    		return false;
	    	} else {
	    		return true;
	    	}
        }
        
        private function save():void {
        	if (validate() == false) {
        		return;
        	}
        	var dirtyItems:XMLList = getWorkListQC.lastResult.WorkItem.(@isDirty == 'Y');        	
        	dirtyWorkItems = new XMLListCollection(dirtyItems);
        	saveWorkItemQC.send();
        }
        
        private function onGetWorkList(event:ResultEvent):void {
        	if (event.result.name() == "WorkItemList") {
    	    	refreshRequestNumbers();
	        	workList.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingWorkItemDataChange);
        	} else {
        		Alert.show(event.result..ERROR.@message.toString(), "Error getting work list");
        	} 
       	}
        
        private function onSaveWorkItemQualityControl(event:ResultEvent):void {
        	if (saveWorkItemQC.lastResult.name() == "WorkItemList" || saveWorkItemQC.lastResult.name() == "SUCCESS" ) {
        		dirty.resetDirty();
        		this.getWorkListQC.send();
        	} else {
        		Alert.show(saveWorkItemQC.lastResult..ACTMESSAGE.@TEXT);
        	}
        }
        

        private function refreshRequestNumbers():void {
        	requestNumbers = new ArrayCollection();

			var blankItem:Object = new Object();
			blankItem.data = "";
			blankItem.label = "";
        	requestNumbers.addItem(blankItem);
        	
        	for(var x:Number = 0; x < workList.length; x++) {
        		var item:Object = workList.getItemAt(x, 0);
        		
        		var found:Boolean = false;
        		for(var i:Number = 0; i < requestNumbers.length; i++) {
        			if (requestNumbers.getItemAt(i).label == item.@requestNumber) {
        				found = true;
        				break;
        			}
        		}
        		if (found == false) {
	    			var newItem:Object = new Object();
	    			newItem.data = item.@requestNumber;
	    			newItem.label = item.@requestNumber;
        			requestNumbers.addItem(newItem);
        		}
        	}
        	requestNumberCount = (requestNumbers.length - 1) + " requests in work list.";
        }
        
        private function filterWorkList(item:Object):Boolean {
        	var keep:Boolean = true;
        	if (requestNumberCombo.selectedItem != null && requestNumberCombo.selectedItem.label != "") {
        		keep = false;
        		if (item.@requestNumber == requestNumberCombo.selectedItem.label) {
        			keep = true;
        		}
        	}        	
        	return keep;
        }
        

           

        ]]>
    </mx:Script> 
    
   
    <mx:VBox verticalGap="2" width="100%" height="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
            <mx:HBox width="100%" horizontalAlign="left" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" verticalAlign="bottom">
            	<mx:HBox  verticalAlign="middle">
	            	<mx:Label text="Request #"/>
	            	<mx:ComboBox id="requestNumberCombo" 
	            		dataProvider="{requestNumbers}" 
	            		change="workList.filterFunction = filterWorkList;workList.refresh()"  
	            		width="90">
	            	</mx:ComboBox>
            		
            	</mx:HBox>
            	<mx:Spacer width="100%"/>
                <mx:Label text="{requestNumberCount}"/>
            </mx:HBox>
        	
		<mx:VBox width="100%" height="100%" verticalGap="0">
	
			<util:DataGridAlternatingGroup height="100%" id="workListGrid"  width="100%" dataProvider="{workList}" editable="true" itemEditEnd="onEdit()">
				<util:columns>
					<mx:DataGridColumn editable="false" headerText=""   width="5" labelFunction="getGridRowNumber"/>
	                <mx:DataGridColumn editable="false" headerText="Sample #" width="12" dataField="@sampleNumber"/>
					<mx:DataGridColumn editable="false" headerText="Experiment Type" width="20" dataField="@experimentType"/>
					<mx:DataGridColumn editable="false" headerText="Sample Type" width="20" dataField="@sampleType"/>
					<mx:DataGridColumn editable="false" headerText="Client"  width="20" dataField="@appUserName" />
					<mx:DataGridColumn headerText="Conc. ng/uL" width="10" dataField="@qualCalcConcentration"
									   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), 'idRequest')}" editorDataField="value">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Conc."/>
							    <mx:Label text="ng/uL"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="260/230" width="15" dataField="@qual260nmTo230nmRatio"
									   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), 'idRequest')}" editorDataField="value"/>
					<mx:DataGridColumn headerText="RIN#" width="15" dataField="@qualRINNumber"
									   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), 'idRequest')}" editorDataField="value"/>
	                <mx:DataGridColumn headerText="Status"  width="20" dataField="@qualStatus" 
	                	editorDataField="value"
	                   rendererIsEditor="false"
	                   itemRenderer="mx.controls.Label"  
 	                   itemEditor="{views.renderers.GridColumnFillButton.create(ComboBoxWorkflowStatus.create('@qualStatus').newInstance(), 'idRequest')}"/>			                
				</util:columns>
		</util:DataGridAlternatingGroup>
			
		</mx:VBox>
	  	
	  </mx:VBox>
					
 <mx:ControlBar width="100%">
 	            	<mx:LinkButton textDecoration="underline" label="Refresh"  icon="@Embed('../../assets/action_refresh.gif')" 
 	            		click="refreshWorkList();" toolTip="Refresh worklist"/>
	 	            <mx:HBox width="100%" horizontalAlign="right">
	 	            	<util:DirtyNote id="dirty"/>
	 	            	<mx:Button label="Save" click="save()" icon="@Embed('../../assets/action_save.gif')">
		            	</mx:Button>
	 	            </mx:HBox>

 </mx:ControlBar>						

</mx:VBox>
