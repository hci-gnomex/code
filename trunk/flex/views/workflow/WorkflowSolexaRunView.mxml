<?xml version="1.0" encoding="utf-8"?>
<mx:Panel label="Solexa Sequencing"  
	xmlns:mx="http://www.adobe.com/2006/mxml"  
	xmlns:views="views.*" 
	xmlns:util="views.util.*"
	width="100%" height="100%" 
	title="Solexa Sequencing Run" 
	borderThicknessTop="2">
	
	<mx:HTTPService 
    id="getWorkList" 
    url="GetWorkItemList.gx"
    resultFormat="e4x"
    destination="getWorkList"
    showBusyCursor="true"
    result="onGetWorkList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get work list', event)"
    useProxy="false">
    <mx:request>
        <codeStepNext>SEQRUN</codeStepNext>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="saveWorkItem" 
    url="SaveWorkItemSolexaRun.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveWorkItem(event)"
    fault="parentApplication.onFailHttpRequest('Unable to save work list', event)"
    method="POST"
    useProxy="false">
    <mx:request>
        <workItemXMLString>{dirtyWorkItems.toXMLString()}</workItemXMLString>
    </mx:request>
    </mx:HTTPService >
    
    <mx:XMLListCollection id="workList" source="{getWorkList.lastResult.WorkItem}"/>
    


    <mx:Script>
        <![CDATA[
        import mx.events.CollectionEvent;
        import mx.events.CollectionEventKind;
        import mx.validators.NumberValidator;
        import mx.events.ValidationResultEvent;
        import mx.collections.ArrayCollection;
        import mx.collections.XMLListCollection;
        import mx.rpc.events.FaultEvent; 
        import mx.rpc.events.ResultEvent;   
        import mx.controls.Alert;
        import hci.flex.renderers.LabelDictionary;
        import views.renderers.ComboBoxWorkflowStatus;
        
        [Bindable]
        private var flowCellChannelCount:String;
        
        [Bindable]
        private var inputNumber:String;
        
        [Bindable]
        private var dirtyWorkItems:XMLListCollection;

        private function refreshWorkList():void {
        	dirty.resetDirty();
        	getWorkList.send();
        }
 
		private function underlyingWorkItemDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets to work list
			} else {
				dirty.setDirty();
				this.workList.filterFunction = null;
			}
		}
		private function getGridRowNumber(item:Object,col:int):String
        {
        	if (workList!= null) {
	           var x:int = workList.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
                
        public function onEdit():void {
        	workListGrid.selectedItem.@isDirty = "Y";
        }
        
        private function validate():Boolean {
        	var message:String = "";
        	var dirtyItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');        	
        	
    		var nv:NumberValidator = new NumberValidator();
	    	nv.domain = "real";
	    	nv.minValue = "0";
	    	nv.maxValue = "99999";
	    	nv.precision = 3;
	    	nv.required = false;
	    	nv.allowNegative = false;
	    	nv.exceedsMaxError = "exceeds max.";
	    	nv.invalidCharError = "contains invalid characters.";
	    	nv.negativeError = "cannot be negative.";
	    	nv.precisionError = "has too many digits beyond the decimal point";
        	
        	var item:Object = null;
        	var vr:ValidationResultEvent  = null;
		    
		    nv.domain = "integer";
		    nv.precision = 0;
        	for each (item in dirtyItems) {
		    	vr = nv.validate(item.@clustersPerTile);
		    	if (vr.type == ValidationResultEvent.INVALID) {
		    		message += "\nClusters per tile - " + item.@clustersPerTile + " " + vr.message;
		    		break;
		    	}
	    	}         	

	    	nv.domain = "integer";
	    	nv.precision = 0;
        	for each (item in dirtyItems) {
		    	vr = nv.validate(item.@numberSequencingCyclesActual);
		    	if (vr.type == ValidationResultEvent.INVALID) {
		    		message += "\nActual Number of sequencing cycles - " + item.@numberSequencingCyclesActual + " " + vr.message;
		    		break;
		    	}
	    	}         	
         	
        	if (message != "") {
	    		Alert.show(message);
	    		return false;
	    	} else {
	    		return true;
	    	}
        	
	   		return true;
        }

        
        private function save():void {
        	if (validate() == false) {
        		return;
        	}
        	var dirtyItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');        	
        	dirtyWorkItems = new XMLListCollection(dirtyItems);
        	saveWorkItem.send();
        }
        
        private function onGetWorkList(event:ResultEvent):void {
        	if (event.result.name() == "WorkItemList") {
    	    	flowCellChannelCount = workList.length + ' flow cells channels on work list.';
	        	workList.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingWorkItemDataChange);
        	} else {
        		Alert.show(event.result..ERROR.@message.toString(), "Error getting work list");
        	}        
        }
        
        private function onSaveWorkItem(event:ResultEvent):void {
        	if (saveWorkItem.lastResult.name() == "WorkItemList" || saveWorkItem.lastResult.name() == "SUCCESS" ) {
        		dirty.resetDirty();
        		this.getWorkList.send();
        	} else {
        		Alert.show(saveWorkItem.lastResult..ACTMESSAGE.@TEXT);
        	}
        }
        
                
		public function getFullFlowCellChannelNumber(item:Object, col:DataGridColumn):String 
    	{ 
    		return item.@flowCellNumber + "-" + item.@channelNumber;
    	}  

        ]]>
    </mx:Script> 
    
   
    <mx:VBox width="100%" height="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
            <mx:HBox width="100%" horizontalAlign="left" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" verticalAlign="bottom">
                <mx:Image source="{parentApplication.iconSolexa}"/>
                <mx:Label text="{flowCellChannelCount}"/>
            	<mx:HBox width="100%" horizontalAlign="right"  verticalAlign="middle">
            	</mx:HBox>
            	
            	
            </mx:HBox>
        	
		<mx:VBox width="100%" height="100%" verticalGap="0">
	
			<util:DataGridAlternatingGroup height="100%" id="workListGrid"  width="100%" dataProvider="{workList}" editable="true" itemEditEnd="onEdit()">
				<util:columns>
					<mx:DataGridColumn editable="false" headerText=""   width="10" labelFunction="getGridRowNumber"/>
					<mx:DataGridColumn editable="false" headerText="Flow Cell Channel #"  width="23" dataField="@flowCellNumber" labelFunction="getFullFlowCellChannelNumber">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Flow Cell"/>
							    <mx:Label text="Channel #"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn editable="false" headerText="Sample Seq #"  width="28" dataField="@number">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Flow Cell"/>
							    <mx:Label text="Sample #"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn editable="false" headerText="Requested # Cycles"  width="25" dataField="@idNumberSequencingCycles" 
                           itemRenderer="{LabelDictionary.create(parentApplication.dictionaryManager, 'hci.gnomex.model.NumberSequencingCycles', '@idNumberSequencingCycles')}">                 											
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Requested"/>
							    <mx:Label text="# Cycles"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
	                <mx:DataGridColumn headerText="First Cycle Status"  width="30" dataField="@firstCycleStatus" 
	                	editorDataField="value" 
	                   rendererIsEditor="false"
	                   itemRenderer="mx.controls.Label"  
 	                   itemEditor="{ComboBoxWorkflowStatus.create('@firstCycleStatus', true, true, true, false)}">			                
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="First Cycle"/>
							    <mx:Label text="Status"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
 	                <mx:DataGridColumn headerText="Clusters per tile" width="30" dataField="@clustersPerTile" editable="true">			                
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Clusters per"/>
							    <mx:Label text="Tile"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
 	                <mx:DataGridColumn headerText="File name" width="35" dataField="@fileName" editable="true"/>			                
 	                <mx:DataGridColumn headerText="Actual # Cycles"  width="25" dataField="@numberSequencingCyclesActual" editable="true">			                
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Actual"/>
							    <mx:Label text="# Cycles"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
	                <mx:DataGridColumn headerText="Last Cycle Status"  width="30" dataField="@lastCycleStatus" 
	                	editorDataField="value" 
	                   rendererIsEditor="false"
	                   itemRenderer="mx.controls.Label"  
 	                   itemEditor="{ComboBoxWorkflowStatus.create('@lastCycleStatus', false, true, true, false)}">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Last Cycle"/>
							    <mx:Label text="Status"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
				</util:columns>
		</util:DataGridAlternatingGroup>
			
		</mx:VBox>
	  	
	  </mx:VBox>
					
 <mx:ControlBar>
 	            	<mx:Button icon="@Embed('../../assets/action_refresh.gif')" 
 	            		click="refreshWorkList();" toolTip="Refresh worklist"/>
	 	            <mx:HBox width="100%" horizontalAlign="right">
	 	            	<util:DirtyNote id="dirty"/>
	 	            	<mx:Button label="Save" click="save()" icon="@Embed('../../assets/action_save.gif')">
		            	</mx:Button>
	 	            </mx:HBox>

 </mx:ControlBar>						

</mx:Panel>
