<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"  
	xmlns:mx="http://www.adobe.com/2006/mxml"  
	xmlns:views="views.*" 
	xmlns:util="views.util.*"
	width="100%" height="100%"  
>
<mx:HBox verticalAlign="middle">
	<mx:Image source="{parentApplication.iconServer}"/>
	<mx:Label id="titleLabel" styleName="titleLabel" 
		text="" />
</mx:HBox>
	
	<mx:HTTPService  
    id="getWorkList" 
    url="GetWorkItemList.gx"
    resultFormat="e4x"
    destination="getWorkList"
    showBusyCursor="true"
    result="onGetWorkList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get work list', event)"
    useProxy="false">
    <mx:request>
        <codeStepNext>{codeStepNext}</codeStepNext>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="saveWorkItem" 
    url="SaveWorkItemSolexaPipeline.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveWorkItem(event)"
    fault="parentApplication.onFailHttpRequest('Unable to save work list', event)"
    method="POST"
    useProxy="false">
    <mx:request>
        <workItemXMLString>{dirtyWorkItems.toXMLString()}</workItemXMLString>
    </mx:request>
    </mx:HTTPService >
    
    <mx:XMLListCollection id="workList" source="{getWorkList.lastResult.WorkItem}"/>
    


    <mx:Script>
        <![CDATA[
        import mx.events.CollectionEvent;
        import mx.events.CollectionEventKind;
        import mx.validators.NumberValidator;
        import mx.events.ValidationResultEvent;
        import mx.collections.ArrayCollection;
        import mx.collections.XMLListCollection;
        import mx.rpc.events.FaultEvent; 
        import mx.rpc.events.ResultEvent;   
        import mx.controls.Alert;
        import hci.flex.controls.DropdownLabel;
        import views.renderers.ComboBoxWorkflowStatus;
		import mx.validators.NumberValidator; 
		import mx.controls.TextInput;

		[Bindable]
        public var codeStepNext:String;
                
        [Bindable]
        private var flowCellChannelCount:String;
        
        [Bindable]
        private var inputNumber:String;
        
        [Bindable]
        private var dirtyWorkItems:XMLListCollection;
			
		public function initTitle():void {
			if(codeStepNext == 'SEQPIPE') {
				titleLabel.text = 'Illumina GAIIx Data Pipeline';
			} else if (codeStepNext == 'HSEQPIPE') {
				titleLabel.text = 'Illumina HiSeq Data Pipeline';
			} else if (codeStepNext == 'MISEQPIPE') {
				titleLabel.text = 'Illumina MiSeq Data Pipeline';
			}
			
		}			

        private function refreshWorkList():void {
        	dirty.resetDirty();
        	getWorkList.send();
        }
 
		private function underlyingWorkItemDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets to work list
			} else {
				dirty.setDirty();
				this.workList.filterFunction = null;
			}
		}
		private function getGridRowNumber(item:Object,col:int):String
        {
        	if (workList!= null) {
	           var x:int = workList.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
                
        public function onEdit():void {
        	workListGrid.selectedItem.@isDirty = "Y";
        }
        
        
        private function save():void {
			if (!validate()) {
				return;
			}
			var dirtyItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');        	
        	dirtyWorkItems = new XMLListCollection(dirtyItems);
        	saveWorkItem.send();
        }
			
		private function validate():Boolean {
			var message:String = "";
			var dirtyItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');        	
			
			var nv:NumberValidator = new NumberValidator();
			nv.domain = "real";
			nv.required = false;
			nv.minValue = "0";
			nv.maxValue = "9999";
			nv.precision = 2;
			nv.allowNegative = false;
			nv.exceedsMaxError = "exceeds max (9999.99)";
			nv.invalidCharError = "contains invalid characters.";
			nv.negativeError = "cannot be negative.";
			nv.precisionError = "has too many digits beyond the decimal point";
			
			var item:Object = null;
			var vr:ValidationResultEvent  = null;
			for each (item in dirtyItems) {
				vr = nv.validate(item.@read1ClustersPassedFilterM);
				if (vr.type == ValidationResultEvent.INVALID) {
					message += "\nClusters Passed Filter (M) " + item.@read1ClustersPassedFilterM + " " + vr.message;
					break;
				}
			} 
			
			
			if (message != "") {
				Alert.show(message);
				return false;
			} else {
				return true;
			}
		}

        
        private function onGetWorkList(event:ResultEvent):void {
        	if (event.result.name() == "WorkItemList") {
    	    	flowCellChannelCount = workList.length + ' flow cells channels on work list.';
	        	workList.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingWorkItemDataChange);
        	} else {
        		Alert.show(event.result..ERROR.@message.toString(), "Error getting work list");
        	}        
        }
        
        private function onSaveWorkItem(event:ResultEvent):void {
        	if (saveWorkItem.lastResult.name() == "WorkItemList" || saveWorkItem.lastResult.name() == "SUCCESS" ) {
        		dirty.resetDirty();
        		this.getWorkList.send();
        	} else {
        		Alert.show(saveWorkItem.lastResult..ACTMESSAGE.@TEXT);
        	}
        }
        
                
		public function getFullFlowCellChannelNumber(item:Object, col:DataGridColumn):String 
    	{ 
    		return item.@flowCellNumber + "-" + item.@channelNumber;
    	}  
		public function getNumberSequencingCycles(item:Object, col:DataGridColumn):String 
    	{ 
    		return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.NumberSequencingCycles", item.@idNumberSequencingCycles);
    	}  

		public function handleQ30TextChanges(evt:Event):void {
			
			var target:TextInput = evt.currentTarget as TextInput;
			
			if(!target) return;
			
			var value:String = target.text;
			
			if(value.length > 0) {
				var firstDecPt:int = value.indexOf(".");
				if(firstDecPt > 0 && firstDecPt < value.length) {
					// If more than one decimal then trim
					var anotherDecPt:int = value.indexOf(".", firstDecPt+1);
					if(anotherDecPt > 0) {
						value = value.substr(0, anotherDecPt);
						target.text = value.substr(0, anotherDecPt);
					}
				}
				
				var num:Number = Number(value);
				if(num >= 100.0) {
					target.text = "100";
					return;
				}
			}
		}
			
		]]>
    </mx:Script> 
    
   
    <mx:VBox width="100%" height="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" verticalGap="2">
            <mx:HBox width="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" verticalAlign="bottom">
                <mx:Spacer width="100%"/>
                <mx:Label text="{flowCellChannelCount}"/>
            </mx:HBox>
        	
		<mx:VBox width="100%" height="100%" verticalGap="0">
	
			<util:DataGridAlternatingGroup height="100%" id="workListGrid"  width="100%" dataProvider="{workList}" editable="true" itemEditEnd="onEdit()" sortableColumns="false">
				<util:columns>
						<mx:DataGridColumn editable="false" headerText=""   width="5" labelFunction="getGridRowNumber"/>
						<mx:DataGridColumn editable="false" headerText="Flow Cell Channel #"  width="17" dataField="@flowCellNumber" labelFunction="getFullFlowCellChannelNumber">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Flow Cell"/>
							    <mx:Label text="Channel #"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn editable="false" headerText="Sample Seq #"  width="17" dataField="@number">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Flow Cell"/>
							    <mx:Label text="Sample #"/>
							</mx:VBox> 
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn editable="false" headerText="Requested # Cycles"  width="14" dataField="@idNumberSequencingCycles" 
						    labelFunction="getNumberSequencingCycles">                 											
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Requested"/>
							    <mx:Label text="# Cycles"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
 	                <mx:DataGridColumn headerText="Actual # Cycles"  width="14" dataField="@numberSequencingCyclesActual" editable="true">			                
						<mx:itemEditor>
							<mx:Component>
								<mx:TextInput restrict="0-9" maxChars="3" /> 
							</mx:Component>
						</mx:itemEditor> 
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Actual"/>
							    <mx:Label text="# Cycles"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer> 
					</mx:DataGridColumn>					
 	               
 	                <mx:DataGridColumn headerText="Folder name" width="40" dataField="@fileName" editable="false" itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), 'flowCellNumber')}" editorDataField="value"/>			                
					<mx:DataGridColumn headerText="Reads Pass Filters (M)"  width="20" dataField="@read1ClustersPassedFilterM" editable="true">			                
						<mx:itemEditor>
							<mx:Component>
								<mx:TextInput restrict="0-9." /> 
							</mx:Component>
						</mx:itemEditor> 
						<mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
									<mx:Label text="Reads"/>
									<mx:Label text="PF (M)"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer> 
					</mx:DataGridColumn>					
					<mx:DataGridColumn headerText="Q30 (%)" width="14" dataField="@q30PercentForDisplay" editable="true">
						<mx:itemEditor>
							<mx:Component>
								<mx:TextInput restrict="0-9." change="parentDocument.handleQ30TextChanges(event);"/> 
							</mx:Component>
						</mx:itemEditor> 
					</mx:DataGridColumn>			                
	               
	                <mx:DataGridColumn headerText="Status"  width="20" dataField="@pipelineStatus" 
	                	editorDataField="value" 
	                	editable="true"
	                   rendererIsEditor="false"
	                   itemRenderer="mx.controls.Label"  
 	                   itemEditor="{views.renderers.GridColumnFillButton.create(ComboBoxWorkflowStatus.create('@pipelineStatus', false, true, true, false).newInstance(), 'flowCellNumber')}">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Pipeline"/>
							    <mx:Label text="Status"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
				</util:columns>
		</util:DataGridAlternatingGroup>
			
		</mx:VBox>
	  	
	  </mx:VBox>
					
 <mx:ControlBar width="100%">
 	            	<mx:LinkButton textDecoration="underline" label="Refresh"  icon="@Embed('../../assets/action_refresh.gif')" 
 	            		click="refreshWorkList();" toolTip="Refresh worklist"/>
	 	            <mx:HBox width="100%" horizontalAlign="right">
	 	            	<util:DirtyNote id="dirty"/>
	 	            	<mx:Button label="Save" click="save()" icon="@Embed('../../assets/action_save.gif')">
		            	</mx:Button>
	 	            </mx:HBox>

 </mx:ControlBar>						

</mx:VBox>
