<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="Annotations"  xmlns:mx="http://www.adobe.com/2006/mxml" 
		   width="100%" height="100%" enabled="false">
	<mx:states>
		<mx:State name="EditState">
			<mx:RemoveChild target="{textarea1}"/>
			<mx:RemoveChild target="{vbox1}"/>
		</mx:State>
		<mx:State name="ExternalState">
			<mx:RemoveChild target="{vbox2}"/>
			<mx:RemoveChild target="{textarea1}"/>
			<mx:RemoveChild target="{vbox1}"/>
			<mx:SetProperty target="{text1}" name="text" value="Check the sample annotations that apply"/>
		</mx:State>
	</mx:states>
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			import hci.flex.controls.TextInput;
			import hci.flex.dictionary.DictionaryEditor;
			import hci.flex.dictionary.DictionaryEvent;
			
			import mx.collections.XMLListCollection;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.controls.dataGridClasses.DataGridItemRenderer;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import views.renderers.CheckBoxRenderer;
			import views.renderers.ComboBox;
			import views.renderers.MultiselectRenderer;
			import views.renderers.URLRenderer;
			import views.util.AnnotationAdvancedDataGridColumn;
			import views.util.AnnotationDataGridColumn;
			import views.admin.PropertyEvent;
			import views.admin.PropertyWindow;
			
			private var dictionaryEditor:DictionaryEditor; 
			
			public var ignoreToggle:Boolean = false;
			
			public function checkSecurity():void {
				if (parentDocument.isEditState() && parentDocument.request.@isExternal == 'Y') {
					currentState = "ExternalState";
				} else if (parentDocument.isEditState()  && parentDocument.request.@isExternal != 'Y') {
					currentState = "EditState";
				} else if (parentApplication.submitInternalExperiment()) {
					currentState = "";
				} else {
					currentState = "ExternalState";
				}
				
			}
			
			private function propagateTreatment():void {
				for each (var sample:Object in parentDocument.samples) {
					sample.@treatment = this.treatmentTextInput.text;
				}
				if (this.treatmentTextInput.text != '') {
					parentDocument.samplesView.treatmentColumn.visible = true;
					if (!parentDocument.isEditState()) {
						parentDocument.confirmView.treatmentConfirmColumn.visible = true;				
					}
					parentDocument.request.@treatment = 'Y';
				} else {
					parentDocument.samplesView.treatmentColumn.visible = false;
					if (!parentDocument.isEditState()) {
						parentDocument.confirmView.treatmentConfirmColumn.visible = false;				
					}
					parentDocument.request.@treatment = 'N';
					
				}
			}
			
			public function showSampleAnnotationColumn(idProperty:String, show:Boolean):void {
				if (parentDocument.samplesView.samplesGrid == null) {
					return;
				}
				for (var x:Number = 0; x < parentDocument.samplesView.samplesGrid.columnCount; x++) {
					var dc:AdvancedDataGridColumn = parentDocument.samplesView.samplesGrid.columns[x];
					if (idProperty == "-1") {
						// Special treatment for "Description"
						if ( dc.dataField == "@description") {
							dc.visible = show;
							break;					
						}
					} else {
						if ( dc.dataField == "@ANNOT" + idProperty) {
							dc.visible = show;
							break;					
						}						
					}

				}
				for (var x1:Number = 0; x1 < parentDocument.confirmView.samplesGridConfirm.columnCount; x1++) {
					var dc1:DataGridColumn =parentDocument.confirmView.samplesGridConfirm.columns[x1];
					if (idProperty == "-1") {
						// Special treatment for "Description"
						if ( dc1.dataField == "@description") {
							dc1.visible = show;
							break;					
						}
					} else {
						if ( dc1.dataField == "@ANNOT" + idProperty) {
							dc1.visible = show;
							break;
						}						
					}					
				}
			}
			
			private function toggleSampleAnnotationCheck(event:ListEvent):void {
				if (event.columnIndex == 0) {
					return;
				}
				
				
				// We don't want the typing in the the text field for "Other" to be treated
				// as a toggle off
				var sc:Object = parentApplication.getSampleProperty(sampleAnnotationGrid.selectedItem.@idProperty);
				if (sc.@name.toString() == "Other") {
					if (ignoreToggle) {
						return;					
					}
				}
				
				if (sampleAnnotationGrid.selectedItem.@isSelected == "true") {
					
					sampleAnnotationGrid.selectedItem.@isSelected = "false";
					showSampleAnnotationColumn(sampleAnnotationGrid.selectedItem.@idProperty, false);
					
				} else {
					sampleAnnotationGrid.selectedItem.@isSelected = "true";
					showSampleAnnotationColumn(sampleAnnotationGrid.selectedItem.@idProperty, true);
				}
			}
			
			//
			// Configure sample characteristics
			//
			private function editPropertyDictionary():void {
				var configWindow:PropertyWindow = PropertyWindow(PopUpManager.createPopUp(parentApplication.theBody, PropertyWindow, true));
				PopUpManager.centerPopUp(configWindow);
				
				parentApplication.removeEventListener(PropertyEvent.DATA_REFRESHED,
					onPropertyRefreshed);		                                  
				parentApplication.addEventListener(PropertyEvent.DATA_REFRESHED,   
					onPropertyRefreshed);
				
				
			}
			
			
			public function onPropertyRefreshed(event:Event):void{
				parentDocument.propertyEntries.refresh();
				
				this.checkForRemovedAnnotations();   
				this.checkForNewAnnotations();
				this.addNonStandardSampleColumns();
				
				
				//if (parentDocument.isEditState()) {
				//	callLater(refreshEditWindow);
				//}    		
			}	
			
			private function refreshEditWindow():void {
				//parentDocument.setupEditForm(parentApplication.navExperimentView.selectedExperiment);
			}
			
			private function checkForNewAnnotations():void {
				var sc:XML;
				var annotation:Object;
				var exists:Boolean = false;
				for each(sc in parentApplication.propertyList) {
					exists = false; 
					
					
					for each(annotation in parentDocument.request.PropertyEntries.PropertyEntry) {
						if (sc.@value == annotation.@idProperty) {
							exists = true;
							break;
						}      				
					}
					if (!exists) {
						
						var node:XML = new XML("<PropertyEntry/>");
						node.@idProperty = sc.@value;
						node.@name = sc.@display; 
						node.@otherLabel = "";
						node.@isSelected = "false";
						
						parentDocument.propertyEntries.addItem(node);
						
						
						
					}
				}
				parentDocument.propertyEntries.refresh();
			}
			
			public function addNonStandardSampleColumns():void {
				var annotation:Object;
				for each(annotation in parentDocument.propertyEntries) {
					addNonStandardColumn(annotation);
					parentDocument.samplesView.samplesGrid.validateNow();
				}
				
			}
			
			private function addNonStandardColumn(annotation:Object):void {
				var addNewColumn:Boolean = true;
				var colExisting:AdvancedDataGridColumn = null;
				var colConfirmExisting:DataGridColumn = null;
				
				var property:XML = parentApplication.getSampleProperty(annotation.@idProperty);
				if (property == null) {
					return;
				}
				
				
				var headerName:String = "";
				if (property.@name == "Other" && annotation.@otherLabel != "" ) {
					headerName = annotation.@otherLabel;
					annotation.@isSelected = "true";
				} else {
					headerName = annotation.@name;
				}
				
				// Find out if we have already added this column.  If we have,
				// we won't add it again, but we will update it because
				// its sample characteristic may have changed.
				addNewColumn = true;
				for each(var col:AdvancedDataGridColumn in parentDocument.samplesView.samplesGrid.columns) {
					if (col.dataField == ("@ANNOT" + annotation.@idProperty)) {
						colExisting = col;
						addNewColumn = false;
						break;
					}    				
				}
				if (!parentDocument.isEditState()) {
					for each(var cCol:DataGridColumn in parentDocument.confirmView.samplesGridConfirm.columns) {
						if (cCol.dataField == ("@ANNOT" + annotation.@idProperty)) {
							colConfirmExisting = cCol;
							break;
						}    				
					}
				}
				
				
				
				// new column for sample grid
				var newCol:AnnotationAdvancedDataGridColumn = new AnnotationAdvancedDataGridColumn(fieldName);
				var fieldName:String = "@ANNOT" + annotation.@idProperty;
				newCol.dataField  = fieldName;
				newCol.headerText = headerName;
				newCol.visible    = annotation.@isSelected == "true" ? true : false;
				
				// new column for sample grid on confirmation tab
				var aCol:AnnotationDataGridColumn = new AnnotationDataGridColumn(fieldName);
				aCol.dataField  = "@ANNOT" + annotation.@idProperty;
				aCol.headerText = headerName;
				aCol.visible    = annotation.@isSelected == "true" ? true : false;
				
				if (colExisting != null) {
					colExisting.headerText = headerName;
					colExisting.visible    = annotation.@isSelected == "true" ? true : false;
					
				}
				if (colConfirmExisting != null) {
					colConfirmExisting.headerText = headerName;
					colConfirmExisting.visible    = annotation.@isSelected == "true" ? true : false;
				}
				
				// We only show inactive options when it is edit state.
				var includeInactiveOptions:Boolean = parentDocument.isEditState();
				
				newCol.editable = false;
				aCol.editable = false;
				newCol.propertyType = property.@codePropertyType;
				if (property.@codePropertyType == 'MOPTION') {
					newCol.itemRenderer =  MultiselectRenderer.create();
					aCol.itemRenderer =  MultiselectRenderer.create(false);
					if (colExisting != null) {
						colExisting.itemRenderer =  MultiselectRenderer.create();
					}
					if (colConfirmExisting != null) {
						colConfirmExisting.itemRenderer =  MultiselectRenderer.create();
					}
				} else if (property.@codePropertyType == 'URL') {
					newCol.itemRenderer = URLRenderer.create();
					aCol.itemRenderer = URLRenderer.create(false);
					if (colExisting != null) {
						colExisting.itemRenderer = URLRenderer.create();
					}
					if (colConfirmExisting != null) {
						colConfirmExisting.itemRenderer = URLRenderer.create();
					}
				} else if (property.@codePropertyType == 'CHECK') {
					newCol.itemRenderer = CheckBoxRenderer.create();
					if (colExisting != null) {
						colExisting.itemRenderer = CheckBoxRenderer.create();
					}
					if (colConfirmExisting != null) {
						colExisting.itemRenderer = CheckBoxRenderer.create();
					}
				} else if (property.@codePropertyType == 'OPTION') {
					newCol.editable = true;
					newCol.editorDataField = "value"
					newCol.itemRenderer = views.renderers.DropdownLabel.create(
						parentApplication.getPropertyOptions(annotation.@idProperty, includeInactiveOptions), 
						'@option', 
						'@idPropertyOption', 
						fieldName);                
					aCol.itemRenderer = views.renderers.DropdownLabel.create(
						parentApplication.getPropertyOptions(annotation.@idProperty, includeInactiveOptions), 
						'@option', 
						'@idPropertyOption', 
						fieldName,
						false);       
					newCol.itemEditor = views.renderers.ComboBox.create(
						parentApplication.getPropertyOptions(annotation.@idProperty, includeInactiveOptions),
						"@option",
						"@idPropertyOption",
						fieldName, 
						null,
						true,
						true, 
						false,
						true);
					if (colExisting != null) {
						colExisting.editable = true;
						colExisting.editorDataField = "value"
						colExisting.itemRenderer = views.renderers.DropdownLabel.create(
							parentApplication.getPropertyOptions(annotation.@idProperty, includeInactiveOptions), 
							'@option', 
							'@idPropertyOption', 
							fieldName); 
						colExisting.itemEditor = views.renderers.ComboBox.create(
							parentApplication.getPropertyOptions(annotation.@idProperty, includeInactiveOptions),
							"@option",
							"@idPropertyOption",
							fieldName, 
							null,
							true,
							true,
							false,
							true);
						
					}
					if (colConfirmExisting != null) {
						colConfirmExisting.editable = true;
						colConfirmExisting.editorDataField = "value"
						colConfirmExisting.itemRenderer = views.renderers.DropdownLabel.create(
							parentApplication.getPropertyOptions(annotation.@idProperty, includeInactiveOptions), 
							'@option', 
							'@idPropertyOption', 
							fieldName); 
						
					}
				} else  {
					// Assume text
					newCol.editable   = true;
					newCol.itemRenderer = views.renderers.Label.createCustom(fieldName, parentApplication.annotationColor, parentApplication.annotationColorBorder, 0);
					newCol.itemEditor   = views.renderers.TextInput.create(fieldName);
					if (colExisting != null) {
						colExisting.editable   = true;
						colExisting.itemRenderer = views.renderers.Label.createCustom(fieldName, parentApplication.annotationColor, parentApplication.annotationColorBorder, 0);
						colExisting.itemEditor   = views.renderers.TextInput.create(fieldName);
					}
					if (colConfirmExisting != null) {
						colConfirmExisting.editable   = true;
						colConfirmExisting.itemRenderer = views.renderers.Label.createCustom(fieldName, parentApplication.annotationColor, parentApplication.annotationColorBorder, 0);
						colConfirmExisting.itemEditor   = views.renderers.TextInput.create(fieldName);
					}
				}
				
				
				if (addNewColumn) {
					var columns:Array = parentDocument.samplesView.samplesGrid.columns;
					var newColumns:Array = new Array();
					for each(var column:AdvancedDataGridColumn in columns) {
						if (column.dataField == "@description") {
							newColumns.push(newCol);
						}
						newColumns.push(column);
					}
					parentDocument.samplesView.samplesGrid.columns = newColumns;
					
				}
				
				// Add to confirm samples grid     (if this is a submit request, not an edit request)  				
				if (addNewColumn && !parentDocument.isEditState()) {
					
					var confirmColumns:Array = parentDocument.confirmView.samplesGridConfirm.columns;
					var newConfirmColumns:Array = new Array();
					for each(var confirmCol:DataGridColumn in confirmColumns) {
						if (confirmCol.dataField == "@description") {
							newConfirmColumns.push(aCol);
						}
						newConfirmColumns.push(confirmCol);
					}
					parentDocument.confirmView.samplesGridConfirm.columns = newConfirmColumns;
					
				}
				
			}
			
			private function checkForRemovedAnnotations():void {
				var annotation:Object;
				var exists:Boolean = false;
				for each(annotation in parentDocument.propertyEntries) {
					exists = false;
					for each(var sc:XML in parentApplication.propertyList) {
						if (sc.@value == annotation.@idProperty || annotation.@idProperty == "-1") {
							exists = true;
							break;
						}      				 
					}
					if (!exists) {
						// Remove the sample characteristic entry
						parentDocument.propertyEntries.removeItemAt(parentDocument.propertyEntries.getItemIndex(annotation));
					}
				}
				
				// Hide the existing annotation columns that don't have a corresponding sample characteristic entry
				for each(var property:Object in parentApplication.propertyList) {
					exists = false;
					for each(var sce:XML in parentDocument.propertyEntries) {
						if (sce.@value == property.@idProperty) {
							exists = true;
							break;
						}      				 
					}
					
					if (!exists) {
						for each(var col:AdvancedDataGridColumn in parentDocument.samplesView.samplesGrid.columns) {
							if (col.dataField == ("@ANNOT" + property.@idProperty)) {
								col.visible = false;
								break;
							}    				
						}
						if (!parentDocument.isEditState()) {
							for each(var cCol:DataGridColumn in parentDocument.confirmView.samplesGridConfirm.columns) {
								if (cCol.dataField == ("@ANNOT" + property.@idProperty)) {
									cCol.visible = false;
									break;
								}    				
							}
						}
						
					}
					
				}
				
				
			}
			public function changeOtherHeaderLabelAndToggle(data:Object):void {
				if (data.@otherLabel == '' ) {
					data.@isSelected = false;	
				} else {
					data.@isSelected = true;
				}		
				changeOtherHeaderLabel(data);
				
			}
			
			public function changeOtherHeaderLabel(data:Object):void {
				
				parentDocument.request.@otherLabel = data.@otherLabel;
				
				if (parentDocument.samplesView.samplesGrid != null) {
					for (var x:Number = 0; x < parentDocument.samplesView.samplesGrid.columnCount; x++) {
						var dc:AdvancedDataGridColumn = parentDocument.samplesView.samplesGrid.columns[x];
						if ( dc.dataField == "@ANNOT" + data.@idProperty) {
							dc.headerText = data.@otherLabel;
							dc.visible = data.@isSelected == "true" ? true : false;
							break;	
						}
					}
				}
				if (parentDocument.confirmView != null && parentDocument.confirmView.samplesGridConfirm != null) {
					for (var y:Number = 0; y < parentDocument.confirmView.samplesGridConfirm.columnCount; y++) {
						var dc1:DataGridColumn = parentDocument.confirmView.samplesGridConfirm.columns[y];
						if ( dc1.dataField == "@ANNOT" + data.@idProperty) {
							dc1.headerText = data.@otherLabel;
							dc1.visible = data.@isSelected == "true" ? true : false;
							break;					
						}
					}
				}
			}
			
			public function createToolTip(event:ListEvent):void{
				sampleAnnotationGrid.toolTip = sampleAnnotationGrid.dataProvider[event.rowIndex].@description;	
			}
			
			public function deleteToolTip(obj:Object):void{
				sampleAnnotationGrid.toolTip = null;
			}
			
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" height="100%">
		<mx:HBox verticalAlign="bottom"  horizontalAlign="left" paddingLeft="4" width="100%" id="vbox1">
			<mx:TextArea styleName="instructionBox" width="660" wordWrap="true" height="74" visible="true" id="textarea1">
				<mx:htmlText><![CDATA[Instructions<br>  1.  Optional: Characteristics that are listed on this page can be used to provide additional annotation of your samples on a<br>       subsequent screen. Please select any characteristics that you would like to annotate by clicking on the appropriate box(es).<br>  2.  Optional: Provide a short description of how the samples for this study differ from each other.<br>  3.  After completing all line items, click the 'Next' button at the bottom of the page to proceed.]]></mx:htmlText>
			</mx:TextArea>
		</mx:HBox>
		
		<mx:HBox width="100%" height="100%" horizontalGap="24">
			<mx:VBox height="100%" verticalGap="1">
				<mx:HBox>
					<mx:Text width="300" height="100%" id="text1">
						<mx:text>(1) Check sample characteristics:</mx:text>
					</mx:Text>
					
				</mx:HBox>
				<mx:HBox width="100%" height="100%">
					<mx:VBox width="100%" height="100%" verticalGap="0">
						<mx:DataGrid id="sampleAnnotationGrid" height="100%"
									 dataProvider="{parentDocument.propertyEntries}" 
									 showHeaders="false" headerHeight="20" variableRowHeight="true" width="100%" itemClick="toggleSampleAnnotationCheck(event)" rowHeight="20" itemRollOver="createToolTip(event)" itemRollOut="deleteToolTip(event)" >
							<mx:columns>
								<mx:DataGridColumn headerText=" " 
												   width="20" 
												   editable="true"                        	
												   dataField="@isSelected" 
												   editorDataField="selected"
												   itemRenderer="views.renderers.CheckBoxIsSelectedProperty">
								</mx:DataGridColumn>
								<mx:DataGridColumn  
									headerText="Sample annotations"
									editable="false" editorDataField="selected" 
									dataField="@name" >
									<mx:itemRenderer>
										<mx:Component >
											<mx:HBox>
												<mx:Label text="{data.@name}">			                           	
												</mx:Label>
												<mx:TextInput id="scOtherLabel" fontSize="9"
															  text="{data.@otherLabel}"
															  focusIn="{parentDocument.ignoreToggle = true}"
															  focusOut="{parentDocument.ignoreToggle = false}"
															  change="{parentDocument.ignoreToggle = true;data.@otherLabel = scOtherLabel.text;parentDocument.changeOtherHeaderLabelAndToggle(data)}" 
															  width="{data.@name == 'Other' ? 130 : 0}"  
															  height="{data.@name == 'Other' ? 20 : 0}"  
															  visible="{data.@name == 'Other' ? true : false}" 
															  editable="{data.@name == 'Other' ? true : false}">			                           
												</mx:TextInput>
												
											</mx:HBox>
										</mx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
							</mx:columns>
						</mx:DataGrid>
						
						<mx:LinkButton label="New/Edit..." textDecoration="underline" styleName="blueLinkButton" click="editPropertyDictionary()" id="editSampleAnnotationButton">		  	
						</mx:LinkButton>						
					</mx:VBox>
				</mx:HBox>
				
			</mx:VBox>
			<mx:VBox height="100%" verticalGap="2" width="100%" id="vbox2">
				<mx:HBox width="100%">
					<mx:Text  htmlText="(2) Describe in general terms how the samples differ:" width="100%"/>
					
				</mx:HBox>
				<mx:HBox height="100%" width="100%" paddingLeft="10" paddingRight="30">
					<mx:TextArea id="treatmentTextInput" focusOut="propagateTreatment()" width="100%" height="100">
					</mx:TextArea>
					
				</mx:HBox>
				
			</mx:VBox>
			
		</mx:HBox>
		
	</mx:VBox>
	
</mx:Canvas>
