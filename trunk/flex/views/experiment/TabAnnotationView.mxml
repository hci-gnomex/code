<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="Annotations"  xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" enabled="false" >
	<mx:states>
		<mx:State name="EditState">
			<mx:SetProperty target="{textarea1}" name="htmlText">
				<mx:value><![CDATA[Instructions<br>  1.  Optional: Characterisitics that are listed on this page can be used to provide <br>       additional annotation of your samples on a subsequent screen.<br>       Please select any characteristics that you would like to annotate by clicking on the appropriate box(es).<br>  2.  Optional: Provide a short description of how the samples for this study differ from each other.]]></mx:value>
			</mx:SetProperty>
			<mx:SetProperty target="{textarea1}" name="height" value="80"/>
		</mx:State>
	</mx:states>
<mx:Script>
	<![CDATA[
		import hci.flex.controls.DropdownLabel;
		import hci.flex.controls.TextInput;
		import hci.flex.dictionary.DictionaryEditor;
		import hci.flex.dictionary.DictionaryEvent;
		
		import mx.collections.XMLListCollection;
		import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
		import mx.controls.dataGridClasses.DataGridColumn;
		import mx.events.ListEvent;
		import mx.managers.PopUpManager;
		
		import views.renderers.CheckBoxRenderer;
		import views.renderers.ComboBox;
		import views.renderers.MultiselectRenderer;
		import views.renderers.URLRenderer;
		import views.util.AnnotationAdvancedDataGridColumn;
		import views.util.AnnotationDataGridColumn;
		
		private var dictionaryEditor:DictionaryEditor; 
		
		public var ignoreToggle:Boolean = false;
		
       	private function propagateTreatment():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@treatment = this.treatmentTextInput.text;
			}
			if (this.treatmentTextInput.text != '') {
				parentDocument.samplesView.treatmentColumn.visible = true;
				if (!parentDocument.isEditState()) {
					parentDocument.confirmView.treatmentConfirmColumn.visible = true;				
				}
				parentDocument.request.@treatment = 'Y';
			} else {
				parentDocument.samplesView.treatmentColumn.visible = false;
				if (!parentDocument.isEditState()) {
					parentDocument.confirmView.treatmentConfirmColumn.visible = false;				
				}
				parentDocument.request.@treatment = 'N';
				
			}
		}
		
		public function showSampleAnnotationColumn(idSampleCharacteristic:String, show:Boolean):void {
			if (parentDocument.samplesView.samplesGrid == null) {
				return;
			}
			for (var x:Number = 0; x < parentDocument.samplesView.samplesGrid.columnCount; x++) {
				var dc:AdvancedDataGridColumn = parentDocument.samplesView.samplesGrid.columns[x];
				if ( dc.dataField == "@ANNOT" + idSampleCharacteristic) {
					dc.visible = show;
					break;					
				}
			}
			for (var x1:Number = 0; x1 < parentDocument.confirmView.samplesGridConfirm.columnCount; x1++) {
				var dc1:DataGridColumn =parentDocument.confirmView.samplesGridConfirm.columns[x1];
				if ( dc1.dataField == "@ANNOT" + idSampleCharacteristic) {
					dc1.visible = show;
					break;
				}
			}
		}
		public function clearOutUncheckedSampleAnnotations():void {
			if (parentDocument == null) {
				return;
			}
			for each(var annotation:Object in parentDocument.sampleCharacteristicEntries) {
				var isSelected:String;
				var value:String;
				if (annotation.@isSelected == "false") {
					isSelected = "N";
					value = '';
				} else {
					isSelected = "Y";
					value = null;
				}
					
				for each(var sample:XML in parentDocument.samples) {
					switch (annotation.@idSampleCharacteristic.toString()) { 
						case 'AGE' :
							sample.@AGE = (value == null ? sample.@AGE : value);
							parentDocument.request.@AGE = isSelected;
							break;
						case 'CELLLINE' :
							sample.@CELLLINE = (value == null ? sample.@CELLLINE : value);
							parentDocument.request.@CELLLINE = isSelected;
							break;
						case 'CELLTYPE' :
							sample.@CELLTYPE = (value == null ? sample.@CELLTYPE : value);
							parentDocument.request.@CELLTYPE = isSelected;
							break;
						case 'CLININFO' :
							sample.@CLININFO = (value == null ? sample.@CLININFO : value);
							parentDocument.request.@CLININFO = isSelected;
							break;
						case 'COMPOUND' :
							sample.@COMPOUND = (value == null ? sample.@COMPOUND : value);
							parentDocument.request.@COMPOUND = isSelected;
							break;
						case 'DOSE' :
	 						sample.@DOSE = (value == null ? sample.@DOSE : value);
							parentDocument.request.@DOSE = isSelected;
							break;
						case 'DISSTATE' :
							sample.@DISSTATE = (value == null ? sample.@DISSTATE : value);
							parentDocument.request.@DISSTATE = isSelected;
							break;
						case 'GENMOD' :
							sample.@GENMOD = (value == null ? sample.@GENMOD : value);
							parentDocument.request.@GENMOD = isSelected;
							break;
						case 'GROWTHCOND' :
							sample.@GROWTHCOND = (value == null ? sample.@GROWTHCOND : value);
							parentDocument.request.@GROWTHCOND = isSelected;
							break;
						case 'GENOTYPE' :
							sample.@GENOTYPE = (value == null ? sample.@GENOTYPE : value);
							parentDocument.request.@GENOTYPE = isSelected;
							break;
						case 'INDIV' :
							sample.@INDIV = (value == null ? sample.@INDIV : value);
							parentDocument.request.@INDIV = isSelected;
							break;
						case 'ORGPART' :
							sample.@ORGPART = (value == null ? sample.@ORGPART : value);
							parentDocument.request.@ORGPART = isSelected;
							break;
						case 'OTHER' :
							sample.@OTHER = (value == null ? sample.@OTHER : value);
							parentDocument.request.@OTHER = isSelected;
							break;
						case 'SEX' :
							sample.@SEX = (value == null ? sample.@SEX : value);
							parentDocument.request.@SEX = isSelected;
							break;
						case 'TEMP' :
							sample.@TEMP = (value == null ? sample.@TEMP : value);
							parentDocument.request.@TEMP = isSelected;
							break;
						case 'TIME' :
							sample.@TIME = (value == null ? sample.@TIME : value);
							parentDocument.request.@TIME = isSelected;
							break;
						default :
							break;    							 
					}
				}
			}
		}
		
		private function toggleSampleAnnotationCheck(event:ListEvent):void {
   			if (event.columnIndex == 0) {
	   			return;
   			}
			
			
			// We don't want the typing in the the text field for "Other" to be treated
			// as a toggle off
			var sc:Object = parentApplication.getSampleCharacteristic(sampleAnnotationGrid.selectedItem.@idSampleCharacteristic);
			if (sc.@sampleCharacteristic.toString() == "Other") {
				if (ignoreToggle) {
					return;					
				}
			}
   			
   			if (sampleAnnotationGrid.selectedItem.@isSelected == "true") {
				
				sampleAnnotationGrid.selectedItem.@isSelected = "false";
				showSampleAnnotationColumn(sampleAnnotationGrid.selectedItem.@idSampleCharacteristic, false);
				clearOutUncheckedSampleAnnotations();									
				
			} else {
				sampleAnnotationGrid.selectedItem.@isSelected = "true";
				showSampleAnnotationColumn(sampleAnnotationGrid.selectedItem.@idSampleCharacteristic, true);
          		clearOutUncheckedSampleAnnotations();
			}
		}
				
		//
        // Edit sample annotation dictionary
        //
		private function editSampleCharacteristicDictionary():void {
			dictionaryEditor = DictionaryEditor(PopUpManager.createPopUp(parentApplication.mainArea, DictionaryEditor, true));
			dictionaryEditor.addEventListener(DictionaryEvent.DICTIONARY_WINDOW_INITIALIZED,   
			                                  onDictionarySampleCharacteristicInitialized);
  
            parentApplication.dictionaryManager.removeEventListener(DictionaryEvent.DICTIONARY_LOADED,
            													    onDictionarySampleCharacteristicRefreshed);		                                  
			parentApplication.dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_LOADED,   
			                                                     onDictionarySampleCharacteristicRefreshed);

			PopUpManager.centerPopUp(dictionaryEditor);
		}
       	private function onDictionarySampleCharacteristicInitialized(event:Event):void{
			//dictionaryEditor.selectDictionary("hci.gnomex.model.SampleCharacteristic");
        }          
       	private function onDictionarySampleCharacteristicRefreshed(event:Event):void{
			this.checkForNewAnnotations();
       		this.addNonStandardSampleColumns();
			this.checkForRemovedAnnotations();   
			
			if (parentDocument.isEditState()) {
				callLater(refreshEditWindow);
			}    		
        }	
        
        private function refreshEditWindow():void {
			parentDocument.setupEditForm(parentApplication.navExperimentView.selectedExperiment);
        }
        
        private function checkForNewAnnotations():void {
       		var de:Object;
       		var annotation:Object;
       		var exists:Boolean = false;
       		for each(de in parentApplication.sampleCharacteristicList) {
       			exists = false;
       			for each(annotation in parentDocument.sampleCharacteristicEntries) {
					if (de.@value == annotation.@idSampleCharacteristic) {
						exists = true;
						break;
					}      				
       			}
       			if (!exists) {
       				
       				var node:XML = new XML("<SampleCharacteristicEntry/>");
       				node.@idSampleCharacteristic = de.@value;
       				node.@sampleCharacteristic = de.@display; 
       				node.@otherLabel = "";
       				node.@isSelected = "false";
       			
       				parentDocument.sampleCharacteristicEntries.addItem(node);
       			}
       		}
        	
        }
		

        
        public function addNonStandardSampleColumns():void {
       		var annotation:Object;
       		var col:AdvancedDataGridColumn;
       		var exists:Boolean = false;
       		for each(annotation in parentDocument.sampleCharacteristicEntries) {
				exists = false;
       			/*for each(col in parentDocument.samplesView.samplesGrid.columns) {
					if (col.dataField == ("@" + annotation.@idSampleCharacteristic)) {
						exists = true;
						break;               
					}    				 
       			}*/
       			if (!exists) {
					var sc:Object = parentApplication.getSampleCharacteristic(annotation.@idSampleCharacteristic);
					var sampleCharacteristic:XML = null;
					if (sc is XMLList) {
						sampleCharacteristic = sc[0];
					} else {
						sampleCharacteristic = sc as XML;
					}
					
					var headerName:String = "";
					if (sc.@sampleCharacteristic == "Other" && annotation.@otherLabel != "" ) {
						headerName = annotation.@otherLabel;
						annotation.@isSelected = "true";
					} else {
						headerName = annotation.@sampleCharacteristic;
					}

					// new column for sample grid
       				var newCol:AnnotationAdvancedDataGridColumn = new AnnotationAdvancedDataGridColumn(fieldName);
       				var fieldName:String = "@ANNOT" + annotation.@idSampleCharacteristic;
       				newCol.dataField  = fieldName;
       				newCol.headerText = headerName;
       				newCol.visible    = annotation.@isSelected == "true" ? true : false;
					
					// new column for sample grid on confirmation tab
					var aCol:AnnotationDataGridColumn = new AnnotationDataGridColumn(fieldName);
					aCol.dataField  = "@ANNOT" + annotation.@idSampleCharacteristic;
					aCol.headerText = headerName;
					aCol.visible    = annotation.@isSelected == "true" ? true : false;
					


					
					newCol.editable = false;
					aCol.editable = false;
					if (sampleCharacteristic.@codeCharacteristicType == 'MOPTION') {
						newCol.itemRenderer =  MultiselectRenderer.create();
						aCol.itemRenderer =  MultiselectRenderer.create(false);
					} else if (sampleCharacteristic.@codeCharacteristicType == 'URL') {
						newCol.itemRenderer = URLRenderer.create();
						aCol.itemRenderer = URLRenderer.create(false);
					} else if (sampleCharacteristic.@codeCharacteristicType == 'CHECK') {
						newCol.itemRenderer = CheckBoxRenderer.create();
					} else if (sampleCharacteristic.@codeCharacteristicType == 'OPTION') {
						newCol.editable = true;
						newCol.editorDataField = "value"
						newCol.itemRenderer = views.renderers.DropdownLabel.create(
							parentApplication.getSampleCharactersticOptions(annotation.@idSampleCharacteristic), 
							'@option', 
							'@idSampleCharacteristicOption', 
							fieldName);                
						aCol.itemRenderer = views.renderers.DropdownLabel.create(
							parentApplication.getSampleCharactersticOptions(annotation.@idSampleCharacteristic), 
							'@option', 
							'@idSampleCharacteristicOption', 
							fieldName,
						    false);                
						newCol.itemEditor = views.renderers.ComboBox.create(
							parentApplication.getSampleCharactersticOptions(annotation.@idSampleCharacteristic),
							"@option",
							"@idSampleCharacteristicOption",
							fieldName, 
							null,
							true,
							true);
					} else  {
						// Assume text
						newCol.editable   = true;
						newCol.itemRenderer = views.renderers.Label.createCustom(fieldName, parentApplication.annotationColor, parentApplication.annotationColorBorder, 0);
						newCol.itemEditor   = views.renderers.TextInput.create(fieldName);
					}
					
       				 
       				var columns:Array = parentDocument.samplesView.samplesGrid.columns;
       				var newColumns:Array = new Array();
       				for each(var column:AdvancedDataGridColumn in columns) {
       					if (column.dataField == "@description") {
       						newColumns.push(newCol);
       					}
       					newColumns.push(column);
       				}
       				parentDocument.samplesView.samplesGrid.columns = newColumns;
					parentDocument.samplesView.samplesGrid.validateNow();

					// Add to confirm samples grid     (if this is a submit request, not an edit request)  				
       				if (!parentDocument.isEditState()) {
 	       				
	       				var confirmColumns:Array = parentDocument.confirmView.samplesGridConfirm.columns;
	       				var newConfirmColumns:Array = new Array();
       			    	for each(var confirmCol:DataGridColumn in confirmColumns) {
       						if (confirmCol.dataField == "@description") {
       							newConfirmColumns.push(aCol);
       						}
       						newConfirmColumns.push(confirmCol);
       			    	}
       			    	parentDocument.confirmView.samplesGridConfirm.columns = newConfirmColumns;

       				}
       			}
       		}
        	
        }

        private function checkForRemovedAnnotations():void {
       		var de:Object;
       		var annotation:Object;
       		var exists:Boolean = false;
			for each(annotation in parentDocument.sampleCharacteristicEntries) {
	       		for each(de in parentApplication.sampleCharacteristicList) {
       			exists = false;
       				if (de.@value == annotation.@idSampleCharacteristic) {
						exists = true;
						break;
					}      				
       			}
       			if (!exists) {
       				parentDocument.sampleCharacteristicEntries.removeItemAt(parentDocument.sampleCharacteristicEntries.getItemIndex(annotation));
       			}
       		}
        	
        }
		public function changeOtherHeaderLabelAndToggle(data:Object):void {
			if (data.@otherLabel == '' ) {
				data.@isSelected = false;	
			} else {
				data.@isSelected = true;
			}		
			changeOtherHeaderLabel(data);
			
		}
		
		public function changeOtherHeaderLabel(data:Object):void {

			parentDocument.request.@otherLabel = data.@otherLabel;
			
			if (parentDocument.samplesView.samplesGrid != null) {
				for (var x:Number = 0; x < parentDocument.samplesView.samplesGrid.columnCount; x++) {
					var dc:AdvancedDataGridColumn = parentDocument.samplesView.samplesGrid.columns[x];
					if ( dc.dataField == "@ANNOT" + data.@idSampleCharacteristic) {
						dc.headerText = data.@otherLabel;
						dc.visible = data.@isSelected == "true" ? true : false;
						break;	
					}
				}
			}
			if (parentDocument.confirmView != null && parentDocument.confirmView.samplesGridConfirm != null) {
				for (var y:Number = 0; y < parentDocument.confirmView.samplesGridConfirm.columnCount; y++) {
					var dc1:DataGridColumn = parentDocument.confirmView.samplesGridConfirm.columns[y];
					if ( dc1.dataField == "@ANNOT" + data.@idSampleCharacteristic) {
						dc1.headerText = data.@otherLabel;
						dc1.visible = data.@isSelected == "true" ? true : false;
						break;					
					}
				}
			}


		}

		
	]]>
</mx:Script>
	<mx:VBox width="100%" height="100%">
	    <mx:HBox verticalAlign="bottom"  horizontalAlign="left" paddingLeft="4" width="100%" id="vbox1">
  			  <mx:TextArea styleName="instructionBox" width="660" wordWrap="true" height="74" visible="true" id="textarea1">
				<mx:htmlText><![CDATA[Instructions<br>  1.  Optional: Characteristics that are listed on this page can be used to provide additional annotation of your samples on a<br>       subsequent screen. Please select any characteristics that you would like to annotate by clicking on the appropriate box(es).<br>  2.  Optional: Provide a short description of how the samples for this study differ from each other.<br>  3.  After completing all line items, click the 'Next' button at the bottom of the page to proceed.]]></mx:htmlText>
			  </mx:TextArea>
		</mx:HBox>
		
		<mx:HBox width="100%" height="100%" horizontalGap="24">
			<mx:VBox height="100%" verticalGap="1">
			    <mx:HBox>
				    <mx:Text width="300" height="100%">
				    	<mx:text>(1) Check sample characteristics:</mx:text>
				    </mx:Text>
			    	
			    </mx:HBox>
			    <mx:HBox width="100%" height="100%">
					<mx:VBox width="100%" height="100%" verticalGap="0">
					  <mx:DataGrid id="sampleAnnotationGrid" height="100%" 
						dataProvider="{parentDocument.sampleCharacteristicEntries}" 
						showHeaders="false" headerHeight="20" variableRowHeight="true" width="100%" itemClick="toggleSampleAnnotationCheck(event)" rowHeight="20">
					    <mx:columns>
					        <mx:DataGridColumn headerText=" " 
					        	width="20" 
					        	editable="true"                        	
					        	dataField="@isSelected" 
					        	editorDataField="selected"
					        	itemRenderer="views.renderers.CheckBoxIsSelectedSampleCharacteristic" >
					        </mx:DataGridColumn>
					        <mx:DataGridColumn  
					        	headerText="Sample characteristics"
					        	editable="false" editorDataField="selected" 
					        	dataField="@sampleCharacteristic">
					            <mx:itemRenderer>
					                <mx:Component >
					                     <mx:HBox>
					                       <mx:Label text="{data.@sampleCharacteristic}">			                           	
					                       </mx:Label>
					                       <mx:TextInput id="scOtherLabel" fontSize="9"
					                       	text="{parentDocument.data.@otherLabel}"
											focusIn="{parentDocument.ignoreToggle = true}"
											focusOut="{parentDocument.ignoreToggle = false}"
					                       	change="{parentDocument.ignoreToggle = true;data.@otherLabel = scOtherLabel.text;parentDocument.changeOtherHeaderLabelAndToggle(data)}" 
					                       	width="{data.@sampleCharacteristic == 'Other' ? 130 : 0}"  
					                       	height="{data.@sampleCharacteristic == 'Other' ? 20 : 0}"  
					                       	visible="{data.@sampleCharacteristic == 'Other' ? true : false}" 
					                       	editable="{data.@sampleCharacteristic == 'Other' ? true : false}">			                           
					                       </mx:TextInput>
					                     	
					                     </mx:HBox>
					                </mx:Component>
					            </mx:itemRenderer>
					        </mx:DataGridColumn>
					    </mx:columns>
					  </mx:DataGrid>

		  			  <mx:LinkButton label="New/Edit..." textDecoration="underline" styleName="blueLinkButton" click="editSampleCharacteristicDictionary()" id="editSampleAnnotationButton">		  	
		 		      </mx:LinkButton>						
					</mx:VBox>
			    </mx:HBox>
				
			</mx:VBox>
			<mx:VBox height="100%" verticalGap="2" width="100%">
				<mx:HBox width="100%">
					<mx:Text  htmlText="(2) Describe in general terms how the samples differ:" width="100%"/>
					
				</mx:HBox>
				<mx:HBox height="100%" width="100%" paddingLeft="10" paddingRight="30">
					<mx:TextArea id="treatmentTextInput" focusOut="propagateTreatment()" width="100%" height="100">
					</mx:TextArea>
					
				</mx:HBox>
				
			</mx:VBox>
			
			
		</mx:HBox>
	
	</mx:VBox>

</mx:Canvas>
