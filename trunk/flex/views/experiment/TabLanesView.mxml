<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:views="views.*"  label="Sequencing Lanes" enabled="false" width="100%" height="100%">
<mx:Script>	
	<![CDATA[
		import mx.events.CloseEvent;
		import mx.events.DragEvent;
		import mx.events.DragEvent;
		import mx.managers.DragManager;
        import mx.core.DragSource; 
        import mx.events.CloseEvent;
        import mx.controls.Alert;
        import hci.flex.controls.DropdownLabel; 
        import views.renderers.ComboBox;
        import views.renderers.ComboBoxWorkflowStatus;
        import mx.collections.XMLListCollection;
        
        private var laneToDelete:Object = null;
        		
		private function addLane():void {
			
			// Use the selected lane as a template; otherwise, grab
			// the last one
			var template:Object = this.lanesGrid.selectedItem;
			if (template == null) {
				var theLanes:XMLListCollection = XMLListCollection(parentDocument.lanes);				
				template = theLanes.getItemAt(theLanes.length - 1);
			}
			var emptyNode:XML = new XML("<SequenceLane " +
			    " idSequenceLane='" + "SequenceLane" + parentDocument.lanes.length + "'" +
					" idSeqRunType='" + template.@idSeqRunType + "'" +			
					" idNumberSequencingCycles='" + template.@idNumberSequencingCycles + "'" +			
					" idGenomeBuildAlignTo='" + template.@idGenomeBuildAlignTo + "'" +		
					" canChangeSampleDesignations='Y'"	+
				" idSample='0'" +
				"/>");
				
			// The instructions might have a single quote, so set the instructions
			// this way instead of in the XML constructor.	
			emptyNode.@analysisInstructions = template.@analysisInstructions;
			
			parentDocument.lanes.addItem(emptyNode);
		}

		private function copyLane():void {
			if (lanesGrid.selectedIndex != -1) {
				for each(var i:int in lanesGrid.selectedIndices) {					
					var laneToCopy:Object = parentDocument.lanes[i];
					
					var emptyNode:XML = new XML("<SequenceLane " +
    			    " idSequenceLane='" + "SequenceLane" + parentDocument.lanes.length + "'" +
					" idSample='" + laneToCopy.@idSample + "'" +
					" idSeqRunType='" + laneToCopy.@idSeqRunType + "'" +			
					" idNumberSequencingCycles='" + laneToCopy.@idNumberSequencingCycles + "'" +			
					" idGenomeBuildAlignTo='" + laneToCopy.@idGenomeBuildAlignTo + "'" +		
					" canChangeSampleDesignations='Y'"		+
					"/>");
			
					// The instructions might have a single quote, so set the instructions
					// this way instead of in the XML constructor.	
					emptyNode.@analysisInstructions = laneToCopy.@analysisInstructions;
					
					parentDocument.lanes.addItem(emptyNode);
					
				}
			}
		}
		private function deleteLane():void {
			if (lanesGrid.selectedItems.length > 0) { 
				for each(var lane:Object in lanesGrid.selectedItems) {
					promptToDeleteLane(lane);
				}
			} 
		}
		
		public function promptToDeleteLane(lane:Object):void {
			// If we user is not an admin, he can only delete
			// lanes that are truly edittable
			if (!parentApplication.hasPermission("canWriteAnyObject")) {
				if (canLaneBeChanged(lane)) {
					// Okay to delete because it is a new lane or
					// an edittable lane				    	
				} else {
					// Not okay for non-admin to delete.
					Alert.show("Insufficient permissions to delete lane " + lane.@number + 
					  ".  Please contact the " + parentApplication.getProperty(parentApplication.PROPERTY_CORE_FACILITY_NAME) + 
					  " to assit in modifying this experiment.");
					return; 
				}
			}
			
			laneToDelete = lane;
			if (lane.hasOwnProperty("@idFlowCellChannel") && lane.@idFlowCellChannel != null && lane.@idFlowCellChannel != "" ) {
				Alert.show("Warning: Lane " + lane.@number + " is already loaded on flow cell " + lane.@flowCellNumber + "-" + lane.@flowCellChannelNumber +  
				           " Remove lane anyway?",
							null, 
							(Alert.YES | Alert.NO), this, 
							onPromptToDeleteLane);
			 
			} else {
				Alert.show("Remove lane " + lane.@number + "?",
							"Confirm", 
							(Alert.YES | Alert.NO), this, 
							onPromptToDeleteLane);
				
			}
			
		}
		
		private function canLaneBeChanged(lane:Object):Boolean {
			if (lane.@idSequenceLane.indexOf("SequenceLane") == 0 ||
				(lane.@canChangeSeqRunType == 'Y' &&
				 lane.@canChangeNumberSequencingCycles == 'Y' &&
				 lane.@canChangeGenomeBuildAlignTo == 'Y')) {
				return true;
			} else {
				return false;
			}
		}
		
		
		private function onPromptToDeleteLane(event:CloseEvent):void {
			if (event.detail == Alert.YES) {
				var index:int = parentDocument.lanes.getItemIndex(laneToDelete);			
				parentDocument.lanes.removeItemAt(index);
			}
			laneToDelete = null;
		}
		
		
		public function promptToClearAllLanes():void {
			Alert.show("Remove all sequence lanes currently showing in list?",
						null, 
						(Alert.YES | Alert.NO), this, 
						onPromptToClearAllLanes);
		}
				
        public function initializeLanesGrid():void {
        	if (parentDocument == null) {
        		return;
        	}
        	
        	if (parentDocument.requestToClone != null) {
        		return;
        	}
        	
        	if (parentDocument.numberOfLanes.text == null || parentDocument.numberOfLanes.text == "0" || parentDocument.numberOfLanes.text == '') {
        		return;
        	}
      	
        	
    		var numberOfLanesToAdd:Number = new Number(parentDocument.numberOfLanes.text);
    		if(parentDocument.lanes.length <= numberOfLanesToAdd) {
    			numberOfLanesToAdd = numberOfLanesToAdd - parentDocument.lanes.length;
    		} else {
    			numberOfLanesToAdd = 0;
    		}
    		for(var x:int = 0; x < numberOfLanesToAdd; x++) {
    			addLane();
    		}
    		
        }
		public function propagateSeqRunType(idSeqRunType:String):void {
			for each (var lane:Object in parentDocument.lanes) {
				lane.@idSeqRunType = idSeqRunType;
			}
			callLater(checkLanesCompleteness);
		}
		public function propagateNumberSequencingCycles(idNumberSequencingReactions:String):void {
			for each (var lane:Object in parentDocument.lanes) {
				lane.@idNumberSequencingCycles = idNumberSequencingReactions;
			}
			callLater(checkLanesCompleteness);
		}
		public function propagateGenomeBuild(idGenomeBuildAlignTo:String):void {
			// For now, don't propagate
			/*
			for each (var lane:Object in parentDocument.lanes) {
				lane.@idGenomeBuildAlignTo = idGenomeBuildAlignTo;
			}
			callLater(checkLanesCompleteness);
			*/
		}

		private function onPromptToClearAllLanes(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	parentDocument.lanes.removeAll(); 
            	checkLanesCompleteness();
            }
        }
       	private function getLaneCountLabelFunction(item:Object,col:int):String
        {
        	var laneCount:int = 0;
        	if (parentDocument == null) {
        		return "";
        	}
        	if (parentDocument.lanes!= null) {
        		for each(var lane:Object in parentDocument.lanes) {
        			if (lane.@idSample == item.@idSample) {
        				laneCount++;
        			}
        		}
        	} 
			item.@laneCount = laneCount;
			return "";
        }        
        public function checkLanesCompleteness():void {
        	var completeCount:int = 0;
        	for each(var lane:Object in parentDocument.lanes) {
        		if (lane.@idSample != null && lane.@idSample!= '0'  &&
        			lane.@idSeqRunType != null && lane.@idSeqRunType != '' &&
        			lane.@idNumberSequencingCycles != null && lane.@idNumberSequencingCycles != '') {
        			completeCount++;       				
        		}
        	}
        	if (parentDocument.lanes.length > 0 && completeCount == parentDocument.lanes.length) {
        		if (parentDocument.theTab.contains(parentDocument.confirmView)){
	        		parentDocument.confirmView.enabled = true;
        		}
        		if (parentDocument.theTab.contains(parentDocument.visibilityView)){
	        		parentDocument.visibilityView.enabled = true;
        		}
        		 
        	} else if (parentDocument.request.@idRequest != '0') {
        		if (parentDocument.theTab.contains(parentDocument.confirmView)) {
 		       		parentDocument.confirmView.enabled = true;        			
        		}
        		if (parentDocument.theTab.contains(parentDocument.visibilityView)) {
 		       		parentDocument.visibilityView.enabled = true;        			
        		}
        	} else {
        		if (parentDocument.theTab.contains(parentDocument.confirmView)) {
	        		parentDocument.confirmView.enabled = false;        			
        		}
        		if (parentDocument.theTab.contains(parentDocument.visibilityView)) {
 		       		parentDocument.visibilityView.enabled = false;        			
        		}

        	}
        	parentDocument.enableNextButtons();
        
        }

	  	private function onDragDropLane(event:DragEvent) : void
		{
	       // retrieve the data associated with the "items" format. This will be the data that
	       // the dragInitiator has copied into the DragSource.
	       var items:Array = event.dragSource.dataForFormat("items") as Array;
	
	       // determine where in the grid the drop occurs and select that node by the index; followed by 
	       // retrieving the node itself. 
	       var r:int = lanesGrid.calculateDropIndex(event);
	       lanesGrid.selectedIndex = r;
	       var node:XML = lanesGrid.selectedItem as XML;
	       var p:*;
	
	
	       if (node.name()  == "SequenceLane") {
	       		p = node;
	       } else {
	       		//ignore drop operations not on existing hyb row
	       }
	       
	        
	       // For normal users, disallow operation if the lane is not edittable
	       if (canLaneBeChanged(lanesGrid.selectedItem) ||
	           parentApplication.hasPermission("canWriteAnyObject")) {
	           	
	       } else {
	       	  	Alert.show("Lane samples cannot be changed.");
		       	event.preventDefault();
		       	event.target.hideDropFeedback(event);
		       	DragManager.showFeedback(DragManager.NONE);
				return;	       	  	
	       }
	
	       // taking all of the items in the DragSouce, update the appropriate
	       // sample id on the hyb node.
	       if (p != null) {
		       for(var i:Number=0; i < items.length; i++) {
		       	if (items[i].name() == "Sample") {
			    	lanesGrid.selectedItem.@idSample = items[i].@idSample;	       			
		       	} 
		       }
	       	
	       }	
	       
	       this.sampleLaneDragGrid.invalidateDisplayList();
	       this.sampleLaneDragGrid.invalidateList();
	       
	       // Don't allow flex to do any default moves to the data.  
	       // We handle it in the code above.
	       event.preventDefault();
	       
	       checkLanesCompleteness();
		}
		
		public function onEdit():void {
		}
		 
	]]>
</mx:Script>
	<mx:VBox id="lanesSetupContainer" width="100%" height="100%" verticalGap="0">
	
		<mx:HDividedBox width="100%" height="100%" paddingTop="0" id="mainContainer">
			<mx:VBox  id="lanesContainer" width="100%" height="100%" >
				<mx:DataGrid width="100%" height="100%" id="lanesGrid"  editable="true" 
					dataProvider="{parentDocument.lanes}" allowMultipleSelection="true" 
					dropEnabled="true" dragDrop="onDragDropLane(event)" 
					itemFocusOut="checkLanesCompleteness()" 
					rollOverColor="#C0C0C0" selectionColor="#FFFFB9"
					sortableColumns="false"  
					horizontalScrollPolicy="auto">
					<mx:columns>
					    <mx:DataGridColumn editable="false" headerText="ID"   resizable="false" width="60" dataField="@number"/>
					    <mx:DataGridColumn  headerText="Sample"  width="120" 
					    	labelFunction="parentDocument.getLaneSampleName" 
					    	 sortable="false"
                            editorDataField="text" editable="true" rendererIsEditor="false" itemEditor="views.renderers.TextInputLaneSample" 
                            itemRenderer="views.renderers.LabelLaneSample" />                 
			             <mx:DataGridColumn  width="120" headerText="Seq Run Type"  editable="true" dataField="@idSeqRunType"
			             	editorDataField="value"   
			             	rendererIsEditor="false" 
			             	itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry, '@display', '@value', '@idSeqRunType', true)}"                 
	 	                    itemEditor="{ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry, '@display', '@value', '@idSeqRunType', '@canChangeSeqRunType', true)}"/>
			             <mx:DataGridColumn width="65"  headerText="# Cycles"   editable="true" dataField="@idNumberSequencingCycles" 						             						             
			             	  editorDataField="value"  
			             	  rendererIsEditor="false"  
           	                  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry, '@display', '@value','@idNumberSequencingCycles', true)}"                 
       	                      itemEditor="{ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry, '@display', '@value', '@idNumberSequencingCycles', '@canChangeNumberSequencingCycles', true)}"/>
			             <mx:DataGridColumn width="150"  headerText="Genome Build (align to)"  editable="true" dataField="@idGenomeBuildAlignTo" 						             						             
			             	  editorDataField="value"  rendererIsEditor="false" 				             						             
           	                  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.GenomeBuild').DictionaryEntry, '@display', '@value', '@idGenomeBuildAlignTo', false)}"                 
       	                      itemEditor="{ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.GenomeBuild').DictionaryEntry, '@display', '@value', '@idGenomeBuildAlignTo', '@canChangeGenomeBuildAlignTo', true)}"/>
						<mx:DataGridColumn  editable="true" width="150" headerText="Analysis instructions"   dataField="@analysisInstructions"/>
						 <mx:DataGridColumn  editable="false" headerText="Status in Workflow" width="120" dataField="@workflowStatus"/>
				         <mx:DataGridColumn  width="70" id="flowCellNumberCol" headerText="Flow Cell #"  editable="false" dataField="@flowCellNumber"/> 						             						             
				         <mx:DataGridColumn   width="55" id="flowCellChannelNumber" headerText="Channel"  editable="false" dataField="@flowCellChannelNumber"/>
				         <mx:DataGridColumn width="80"  editable="{currentState == 'LanesAdminState'}" headerText="# Cycles (actual)" dataField="@numberSequencingCyclesActual"> 						             						             
						   <mx:headerRenderer > 
						    <mx:Component>
						    	<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
							        <mx:Label text="# Seq Cycles"/>
							        <mx:Label text="(actual)"/>
				    			</mx:VBox>
						    </mx:Component>
						   </mx:headerRenderer>
					     </mx:DataGridColumn>
				         <mx:DataGridColumn width="80"  editable="{currentState == 'LanesAdminState'}" headerText="Clusters per Tile" dataField="@clustersPerTile"> 						             						             
						   <mx:headerRenderer > 
						    <mx:Component>
						    	<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
							        <mx:Label text="Clusters per"/>
							        <mx:Label text="Tile"/>
				    			</mx:VBox>
						    </mx:Component>
						   </mx:headerRenderer>
					     </mx:DataGridColumn>
				         <mx:DataGridColumn width="80"  editable="{currentState == 'LanesAdminState'}" headerText="File name" dataField="@fileName"/> 						             						             
					     <mx:DataGridColumn headerText="Last Cycle Status" width="80" dataField="@lastCycleStatus"
	                          editorDataField="value" sortable="false" editable="{currentState == 'LanesAdminState'}" rendererIsEditor="false"   
	                          itemRenderer="mx.controls.Label" 
   	                          itemEditor="{ComboBoxWorkflowStatus.create('@lastCycleStatus')}"> 
						   <mx:headerRenderer > 
						    <mx:Component>
						    	<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
							        <mx:Label text="Last Cycle"/>
							        <mx:Label text="Status"/>
				    			</mx:VBox>
						    </mx:Component>
						   </mx:headerRenderer>
					     </mx:DataGridColumn>
					     <mx:DataGridColumn headerText="Pipeline Status" width="80" dataField="@pipelineStatus"
	                          editorDataField="value" sortable="false" editable="{currentState == 'LanesAdminState'}" rendererIsEditor="false"   
	                          itemRenderer="mx.controls.Label" 
   	                          itemEditor="{ComboBoxWorkflowStatus.create('@pipelineStatus')}"> 
						   <mx:headerRenderer > 
						    <mx:Component>
						    	<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
							        <mx:Label text="Pipeline"/>
							        <mx:Label text="Status"/>
				    			</mx:VBox>
						    </mx:Component>
						   </mx:headerRenderer>
					     </mx:DataGridColumn>
					</mx:columns>
				</mx:DataGrid>
				
			</mx:VBox>					        			
		</mx:HDividedBox>
	</mx:VBox>
	
	<mx:states>
		<mx:State name="LanesEditState">
		    <mx:AddChild relativeTo="{lanesContainer}" position="before">
		        <mx:VBox  height="100%" verticalGap="4">
		            <mx:Label text="Samples"/>
		        	<mx:DataGrid
		        		 height="100%" width="100%" 
		        		 dataProvider="{parentDocument.samples}" labelField="@name" 
		        		 dragEnabled="true" id="sampleLaneDragGrid" selectionColor="#FFFFB9" rollOverColor="#C0C0C0" showHeaders="false">
						<mx:columns>
							<mx:DataGridColumn headerText = "Samples" width="80" dataField="@name"/>
				            <mx:DataGridColumn width="20"  labelFunction="getLaneCountLabelFunction" headerText="">
				                <mx:itemRenderer>
				                    <mx:Component >
				                        <mx:HBox  horizontalGap="0" >
				                          <mx:Image source="{data.@laneCount > 0 ? parentApplication.iconCheck : ''}">
				                    	 </mx:Image> 
				                        </mx:HBox>
				                    </mx:Component>
				                </mx:itemRenderer>
				            </mx:DataGridColumn> 	
						</mx:columns> 										        				        		
		         	</mx:DataGrid>
		        </mx:VBox>            	
		    </mx:AddChild>
		    	
			<mx:AddChild relativeTo="{lanesGrid}"  position="before">
					<mx:HBox width="100%" verticalAlign="middle" paddingLeft="4" paddingTop="4" id="buttonContainer">
						<mx:HBox>
							<mx:LinkButton textDecoration="underline" label="Add lane" click="addLane();checkLanesCompleteness()" icon="@Embed(source='../../assets/add.png')" id="addLaneButton" toolTip="Add lane" />
							<mx:LinkButton textDecoration="underline" label="Copy lane" click="copyLane();checkLanesCompleteness()" icon="@Embed('../../assets/table_multiple.png')" id="copyLaneButton" toolTip="Copy lane" />
							<mx:LinkButton textDecoration="underline" label="Delete lane" click="deleteLane();checkLanesCompleteness()" icon="@Embed(source='../../assets/delete.png')" id="deleteLaneButton" toolTip="Delete lane(s)" />
						</mx:HBox>
						
					</mx:HBox>
			</mx:AddChild>

			<mx:AddChild relativeTo="{buttonContainer}" position="before">
			    <mx:Label id="lanesTitle" text="Sequencing Lanes (to assign sample to lane, drag sample onto lane)"/>				
			</mx:AddChild>
		</mx:State>
		<mx:State name="LanesAdminState" basedOn="LanesEditState">			
		</mx:State>
	</mx:states>

</mx:Canvas>
