<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				layout="vertical" width="824" 
				xmlns:util="views.util.*"
				height="408" creationPolicy="all"
				showCloseButton="true"
				close="{mx.managers.PopUpManager.removePopUp(this)}" 
				title="Select Files to Download"  xmlns:controls="hci.flex.controls.*">
	
	
	<mx:HTTPService  
		id="getRequestDownloadList" 
		url="GetRequestDownloadList.gx"
		destination="getRequestDownloadList"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetRequestDownloadList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get request download list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.controls.listClasses.ListBase;
			import mx.core.DragSource;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.object_proxy;
			
			import views.util.FileUtil;
			
			
			[Bindable]
			public var downloadView:ExperimentDownloadView = new ExperimentDownloadView;
			
			public var browseParameters:Object;
			
			private var downloadDraggedItems:Array = null;
			
			public function init():void {
				this.filesToDownload.removeEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingDownloadsChange);
				this.filesToDownload.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingDownloadsChange);
				
				getRequestDownloadList.send(browseParameters);
			}
			
			private function onGetRequestDownloadList(event:ResultEvent): void {
				if (getRequestDownloadList.lastResult.name() != "RequestDownloadList") {
					mx.controls.Alert.show(getRequestDownloadList.lastResult..ACTMESSAGE.@TEXT);
					return;
				} else {
					callLater( function():void {
						if ( downloadList.length > 0 ){
							filesTree.expandItem(downloadList.getItemAt(0),true);
						}
					});
				}  	 
				numFiles.text = getRequestDownloadList.lastResult..FileDescriptor.(@type!='dir').length() != 1 ? 
					getRequestDownloadList.lastResult..FileDescriptor.(@type!='dir').length() + ' file(s)' : '1 file' ;
			}
			
			private function underlyingDownloadsChange(event:CollectionEvent):void {
				if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
					// ignore refresh and resets 
					return;
				}
				
				var selectedDownloadSize:Number = 0;
				if ( filesToDownload.source..FileDescriptor.(@type != 'dir').length() == 0 ) {
					downloadSize.text = "";
				}
				
				for each(var file:Object in filesToDownload.source..FileDescriptor.(@type != 'dir') ) {
					var size:Number = FileUtil.getEstimatedCompressedSize(file);
					selectedDownloadSize += size;
				}
				downloadSize.text = "Ready to download " + FileUtil.getFileSizeText(selectedDownloadSize);
			}
												
			private function removeAllFiles():void {
				filesToDownload.removeAll();
				numFilesToDownload.text = filesToDownload.source..FileDescriptor.(@type!='dir').length() + ' file(s)';
				downloadSize.text = "";
			}
			
			// Remove selected files from the download list
			private function removeSelectedFiles():void {
				for each ( var item:XML in downloadTree.selectedItems ) {
					var parent:XML = downloadTree.getParentItem(item) as XML;
					if ( parent == null ) {
						if ( filesToDownload.getItemIndex( item ) != -1 ) {
							filesToDownload.removeItemAt( filesToDownload.getItemIndex( item ) );
						}
					} else {
						var p:int = downloadTree.getItemIndex(parent);
						var i:int = downloadTree.getItemIndex(item);
						
						downloadTree.dataDescriptor.removeChildAt(parent, item, i - p - 1);
						
						// If we are removing a file inside a folder, remove the folder also if it is empty
						recurseRemoveParentFolder(parent, filesToDownload, downloadTree);
					}
				}
				numFilesToDownload.text = filesToDownload.source..FileDescriptor.(@type!='dir').length() + ' file(s)';
			}
			
			// This will remove empty parent folders of the given folder
			private function recurseRemoveParentFolder(folder:XML, filesList:XMLListCollection, fileTree:Tree):void {
				// Return if we are at the root of the tree
				if ( folder == null ){
					return;
				}
				// Return if the folder is not empty
				if ( folder.children().length() > 0 ) { 
					return;
				}
				// Remove the folder if the folder is empty, and recurse to the parent of the folder
				if ( folder.children().length() == 0 ) {
					var parent:XML = fileTree.getParentItem(folder) as XML;
					if ( parent == null ) {
						filesList.removeItemAt( filesList.getItemIndex( folder ) );
					} else {
						var p:int = fileTree.getItemIndex(parent);
						var i:int = fileTree.getItemIndex(folder);
						
						fileTree.dataDescriptor.removeChildAt(parent, folder, i - p - 1);
						
						recurseRemoveParentFolder(parent, filesList, fileTree);
					}
				}
			}
			
			
			private function getDownloadName(item:Object):String {
				var info:String = item.name() == "RequestDownload" && item.hasOwnProperty("@info") && item.@info != "" ? " - " + item.@info : "";
				if (item.name() == "RequestDownload") {
					if (item.hasOwnProperty("@itemNumber") && item.@itemNumber != '') {
						var results:String = item.hasOwnProperty("@results") && item.@results != '' ? " - " + item.@results : '';
						return item.@itemNumber + results + info;
					} else {
						return item.@results + info;
					}
				} else {
					return item.@displayName + info;
				} 
			}
						
			
			private function onDragDropFile(event:DragEvent) : void
			{
				// Get the dragged items
				var draggedItems:Array = null;		    
				if (event.dragInitiator.name == "filesTree") {
					// For some reason, if we are dragging within the tree, the dragged
					// items has to be detected on the dragEnter event.  By the time
					// with get to the dragDrop event, the event.draggedItems contains
					// the drop target, not the dragged items.
					draggedItems = this.downloadDraggedItems;	    
				} else {
					return;
				}
				
				for(var i:int = 0; i < draggedItems.length; i++) {
					var dragItem:XML = XML(draggedItems[i]);
					
					if (dragItem.name() == "FileDescriptor" || dragItem.name() == "RequestDownload") {
						
						var req:XML = getRequestDownloadList.lastResult..Request.(@requestNumber == dragItem.@requestNumber)[0];
						if ( req == null ){
							return;
						}
						
						var reqNode:XML = createReqNode(req);
						var fileNode:XML;
						
						if (dragItem.name() == "FileDescriptor" ){
							var inFolder:Boolean = false;
							
														
							for each ( var folder:XML in req.RequestDownload ) {
								
								if ( folder.descendants("FileDescriptor").(@fileName == dragItem.@fileName && @directoryName == dragItem.@directoryName).length() > 0 ) {
									fileNode = createReqDLNode(folder);
									recurseAddChildrenFolders(dragItem,fileNode,folder);
									inFolder = true;
									break;
								} 
								
							}
							
							if ( !inFolder ) {
								fileNode = createFileDesNode(dragItem);
								fileNode.@itemNumber = dragItem.@displayName;
							}
							
						} else if (dragItem.name() == "RequestDownload") {
							fileNode = createReqDLNode(dragItem); 
							recurseAddChildren(dragItem, fileNode);
						}
						
						addNodeToList(fileNode, reqNode, filesToDownload);	
						numFilesToDownload.text = filesToDownload.source..FileDescriptor.(@type!='dir').length() + ' file(s)';
						
						filesToDownload.refresh();
						sortDownloadList(fileNode);
						
						filesTree.selectedItem = null;
						
					} 
				}	
			}
			
			// Sort all of the download folders by name since the xmllistcollection (filesToDownload) only sorts top elements (Request)
			// Also, expand the download folder containing the file/folder just added
			private function sortDownloadList(file:XML):void{
				var sort:Sort = new Sort()
				sort.fields = [new SortField("@displayName")];
				for each (var node:XML in filesToDownload.source)
				{
					var xcoll:XMLListCollection = new XMLListCollection(node.children());
					xcoll.sort = sort;
					xcoll.refresh();
					node.setChildren(xcoll.copy());
					if ( node.@requestNumber == file.@requestNumber ) {
						downloadTree.expandItem(node, true);
						for each ( var folder:XML in node.RequestDownload.(@itemNumber == file.@itemNumber) ) {
							downloadTree.expandItem(folder, true);
						}
					}
				}
			}
			
			private function createReqNode(item:XML):XML {
				var node:XML = <Request/>;
				node.@idRequest = item.@idRequest;
				node.@requestNumber = item.@requestNumber;
				node.@codeRequestCategory = item.@codeRequestCategory;
				node.@displayName = item.@displayName;
				node.@icon = item.@icon;
				node.@type = item.@type;
				node.@info = item.@info;
				return node;
			}
			private function createReqDLNode(item:XML):XML {
				var node:XML = <RequestDownload/>;
				node.@idRequest = item.@idRequest;
				node.@requestNumber = item.@requestNumber;
				node.@itemNumber = item.@itemNumber;
				node.@displayName = item.@displayName;
				node.@fileName = item.@fileName;
				node.@fileSize = item.@fileSize;
				node.@type = 'dir';
				node.@directoryName = item.@directoryName;
				return node;
			}
			private function createFileDesNode(item:XML):XML {
				var node:XML = <FileDescriptor/>;node.@idRequest = item.@idRequest;
				node.@requestNumber = item.@requestNumber;
				node.@displayName = item.@displayName;
				node.@fileName = item.@fileName;
				node.@fileSize = item.@fileSize;
				node.@type = item.@type;
				node.@directoryName = item.@directoryName;
				node.@zipEntryName = item.@zipEntryName;
				return node;
			}
			
			private function addNodeToList(node:XML, req:XML, filesList:XMLListCollection):void{
				// Check to see if the request node is already present.  If not, add it.
				if ( filesList.source.(@requestNumber == req.@requestNumber).length() > 0 ) {
					req = filesList.source.(@requestNumber == node.@requestNumber)[0]
				} else {
					filesList.source += req;
				}
				if ( node.name() == 'FileDescriptor' ){ 
					if ( filesList.source.FileDescriptor.(@fileName == node.@fileName).length() == 0 ){
						req.appendChild(node);
					}
					return;
				} else if ( node.name() == 'RequestDownload' ) {
					if ( filesList.source..RequestDownload.(@itemNumber == node.@itemNumber).length() > 0 ) {
						recurseCheckFolder( node, filesList.source..RequestDownload.(@itemNumber == node.@itemNumber)[0] );
					} else {
						req.appendChild(node);
					}
				}
			}
			
			
			// Checks to see if the folder structure for the file/s dragged is already present on the files list
			private function recurseCheckFolder(addNode:XML, existingNode:XML):void{
				if ( addNode.children().length() == 0 ) {
					// If we are at the file level, check to see if the file has already been added, if not, add it.
					if ( existingNode.@fileName != addNode.@fileName && existingNode.@directoryName != addNode.@directoryName ) {
						existingNode.parent().appendChild(addNode);
					}
					return;
				} 
				// Check each file in the folder you are trying to add
				for each ( var childNode:XML in addNode.children() ) {
					// Check to see if the existing folder has that child node already
					if ( existingNode.children().(@fileName == childNode.@fileName && @directoryName == childNode.@directoryName ).length() > 0 ) {
						recurseCheckFolder( childNode, existingNode.children().(@fileName == childNode.@fileName && @directoryName == childNode.@directoryName )[0] );
					} else {
						existingNode.appendChild(childNode);
					}
				}
			}
			
			private function recurseAddChildren(item:XML, node:XML):void{
				if ( item.children().length() == 0 ) {
					return;
				}
				for each ( var child:XML in item.children() ) {
					var childNode:XML = createFileDesNode(child);
					node.appendChild( childNode );
					recurseAddChildren(child, childNode);
				}
			}
			
			private function recurseAddChildrenFolders( childItem:XML, parentNode:XML, folder:XML ):void {
				
				for each ( var child:XML in folder.children() ) {
					if ( child.name() == "FileDescriptor" && child.@fileName == childItem.@fileName && child.@directoryName == childItem.@directoryName ) {
						
						var childNode:XML = createFileDesNode(child);
						parentNode.appendChild( childNode );
						recurseAddChildren(child, childNode);
						return;
					} else if ( child.descendants("FileDescriptor").(@fileName == childItem.@fileName && @directoryName == childItem.@directoryName ).length() > 0 ) {
						
						var childFolder:XML = createFileDesNode(child);
						parentNode.appendChild( childFolder );
						recurseAddChildrenFolders( childItem, childFolder, child );
						return;
					}
				}
				
			}
			
			private function onDragDropOnFileTree(event:DragEvent) : void
			{
				// Get the dragged items		    
				if (event.dragInitiator.name == "downloadTree") {
					// Keep track of what was dragged.
					var draggedFormat:String = event.dragSource.formats[0];
					var draggedItems:Array = event.dragSource.dataForFormat(draggedFormat) as Array;
					// Cancel default behaviour
					event.preventDefault();
					
					for(var i:int = 0; i < draggedItems.length; i++) {
						var item:XML = XML(draggedItems[i]);
						var parent:XML = downloadTree.getParentItem(item) as XML;
						
						if ( parent == null ) {
							if ( filesToDownload.getItemIndex( item ) != -1 ) {
								filesToDownload.removeItemAt( filesToDownload.getItemIndex( item ) );
							}
						} else {
							var p:int = downloadTree.getItemIndex(parent);
							var q:int = downloadTree.getItemIndex(item);
							
							downloadTree.dataDescriptor.removeChildAt(parent, item, q - p - 1);
							
							// If we are removing a file inside a folder, remove the folder also if it is empty
							recurseRemoveParentFolder(parent, filesToDownload, downloadTree);
						}
					}
					numFilesToDownload.text = filesToDownload.source..FileDescriptor.(@type!='dir').length() + ' file(s)';
					
					filesTree.selectedItem = null;
				} 
			}
			
			private function doDragEnterFileTree(event:DragEvent):void
			{
				event.preventDefault();
				if (event.dragInitiator.name == "downloadTree") {
					// Tell the DragManager that the Tree will accent the DragDrop
					DragManager.acceptDragDrop(Tree(event.target));
				}
			}
			
			private function doDragEnter(event:DragEvent):void
			{
				event.preventDefault();
				if (event.dragInitiator.name == "filesTree") {
					// Keep track of what was dragged.
					var draggedFormat:String = event.dragSource.formats[0];
					downloadDraggedItems = event.dragSource.dataForFormat(draggedFormat) as Array;
					// Cancel default behaviour
					
					for(var i:int = 0; i < downloadDraggedItems.length; i++) {
						var dragItem:XML = XML(downloadDraggedItems[i]);
						if ( dragItem.name() == "Request" ) {
							if ( dragItem.children().length() == 0 ) {
								return;
							}
							for each ( var downloadNode:XML in dragItem.children() ) {
								downloadDraggedItems.push(downloadNode);
							}
						}
					}
					// Tell the DragManager that the Tree will accent the DragDrop
					DragManager.acceptDragDrop(Tree(event.target));
				}
			}
			
			private function doDragOver(event:DragEvent):void
			{		
				event.preventDefault();
			}
			
			private function doDragExit(event:DragEvent):void
			{
				// hide the "drop line" that is shown in Tree control
				// when dropping in a Tree
				downloadTree.hideDropFeedback(event);
				filesTree.hideDropFeedback(event);
			}
						
			private function doDragComplete(event:DragEvent):void
			{
				event.preventDefault();
				// hide the "drop line" that is shown in Tree control
				// when dropping in a Tree
				downloadTree.hideDropFeedback(event);
				filesTree.hideDropFeedback(event);
			}	
			
		]]>
	</mx:Script>	
	
	<mx:XMLListCollection id="downloadList" source="{getRequestDownloadList.lastResult..Request}"/>
	<mx:XMLListCollection id="filesToDownload" >
		<mx:sort>
			<mx:Sort>
				<mx:fields>
					<mx:SortField id="sortField2" 
								  name="@displayName"
								  caseInsensitive="true" />
				</mx:fields>
			</mx:Sort>
		</mx:sort>
	</mx:XMLListCollection>
	
	
	<mx:Canvas width="100%" height="100%">
		
		<mx:VBox width="100%" height="100%" label="Organize files"  paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4" verticalGap="2">
			<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingLeft="0">
				<mx:TextArea width="505" height="20" paddingBottom="0" paddingRight="0"
							 styleName="instructionBox" 
							 editable="false" wordWrap="true"  
							 text="Drag files or folders that you want to download. Hold CTRL or SHIFT key to select multiple files." 
							 toolTip="Drag the files you wish to download to the right panel.  Drag files you do not want to download back to the left."/>
				
				
			</mx:HBox>
			
			<mx:HDividedBox width="100%" height="100%">
				<mx:VBox width="50%" height="100%" verticalGap="0" styleName="form" >
					<mx:HBox width="100%"  backgroundColor="#C9BEC0" backgroundAlpha="0.22" >
						<mx:Label text="Available Files"/>
					</mx:HBox>
					<mx:Tree id="filesTree"
							 width="100%" height="100%" 
							 iconFunction="parentApplication.getTreeIcon" 
							 dataProvider="{downloadList}"
							 dragEnabled="true"
							 dropEnabled="true"
							 dragDrop="onDragDropOnFileTree(event)"
							 dragOver="doDragOver(event)"
							 dragEnter="doDragEnterFileTree(event)"
							 dragExit="doDragExit(event)"
							 dragComplete="doDragComplete(event)"
							 borderStyle="solid" 
							 labelFunction="{getDownloadName}"   
							 allowMultipleSelection="true"
							 showRoot="true"
							 itemClick="{this.downloadTree.selectedItem = null;}">
					</mx:Tree>
					<mx:HBox width="100%" horizontalAlign="right">
						<mx:Label id="numFiles" text="0 file(s)"/>
					</mx:HBox>
				</mx:VBox>
				<mx:VBox width="50%" height="100%" verticalGap="0" styleName="form">
					<mx:HBox width="100%"  backgroundColor="#C9BEC0" backgroundAlpha="0.22" >
						<mx:Label text="Files to Download"/>
					</mx:HBox>
					<mx:Tree id="downloadTree"  
							 labelFunction="{getDownloadName}"
							 iconFunction="parentApplication.getTreeIcon" 
							 dataProvider="{filesToDownload}"
							 dragEnabled="true"
							 dropEnabled="true"
							 dragDrop="onDragDropFile(event)"
							 dragOver="doDragOver(event)"
							 dragEnter="doDragEnter(event)"
							 dragExit="doDragExit(event)"
							 dragComplete="doDragComplete(event)"
							 allowMultipleSelection="true"
							 width="100%" height="100%"
							 itemClick="{this.filesTree.selectedItem = null;}">
					</mx:Tree>
					<mx:HBox width="100%" >
						<mx:Label id="downloadSize" fontWeight="normal" fontStyle="normal" />
						<mx:Spacer width="100%"/>
						<mx:Label id="numFilesToDownload" text="0 file(s)"/>
					</mx:HBox>
				</mx:VBox>
			</mx:HDividedBox>
		</mx:VBox>
	</mx:Canvas>
	<mx:ControlBar width="100%">
		
		<mx:HBox height="100%" width="100%" verticalAlign="middle" horizontalAlign="right">
			<mx:Button id="downloadExpandedFilesButton" 
					   enabled="{filesToDownload.length>0}"
					   click="downloadView.downloadExpandedFiles(filesToDownload.source..FileDescriptor.(@type != 'dir'))" 
					   icon="@Embed('../../assets/download.png')" 
					   disabledIcon="@Embed('../../assets/download_disable.png')"
					   toolTip="Download selected files"
					   label="Download"/>
			<mx:Button visible="{parentApplication.isFDTSupported ? true : false}" 
					   includeInLayout="{parentApplication.isFDTSupported ? true : false}" 
					   enabled="{filesToDownload.length>0}"
					   click="downloadView.downloadFilesUsingFDT(filesToDownload.source..FileDescriptor.(@type != 'dir'))" 
					   label="FDT Download"  
					   toolTip="Download large files using FDT"
					   disabledIcon="@Embed('../../assets/download_disable.png')"
					   icon="@Embed(source='../../assets/download_large.png')"/>
			<mx:Button visible="{parentApplication.isFDTSupported ? false : true}" 
					   includeInLayout="{parentApplication.isFDTSupported ? false : true}" 
					   enabled="{filesToDownload.length>0}"
					   click="downloadView.showAlternateDownloadPage(filesToDownload.source..FileDescriptor.(@type != 'dir'))" 
					   toolTip="Alternate download page for large files"
					   label="HTTP Download" 
					   disabledIcon="@Embed('../../assets/download_disable.png')"
					   icon="@Embed(source='../../assets/download_large.png')"/>	   
			<mx:Button label="Cancel" enabled="true" click="{PopUpManager.removePopUp(this)}" visible="true" toolTip="Close window"/>	      	
		</mx:HBox>  
	</mx:ControlBar>
	
</mx:TitleWindow>
