<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"   xmlns:mx="http://www.adobe.com/2006/mxml"     
	xmlns:SubmitRequestView="SubmitRequestView.*" 
    xmlns:views="views.*" 
    xmlns:util="views.util.*"  
    xmlns:experiment="views.experiment.*"
    showEffect="{parentApplication.fadeIn}" hideEffect="{parentApplication.fadeOut}" 
	width="100%" height="100%"  
	creationPolicy="all" show="init()" hide="leave()" xmlns:renderers="views.renderers.*" xmlns:mx1="library://ns.adobe.com/flex/mx" xmlns:experiment1="experiment.*">
 
     
   <mx:HTTPService  
    id="getNewRequest" 
    url="GetRequest.gx"
    destination="getRequest" 
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetNewRequest(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get request', event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idRequest>0</idRequest>    	
    </mx:request>
  </mx:HTTPService>

   <mx:HTTPService  
    id="getRequestToClone" 
    url="GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequestToClone(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get request to copy', event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idRequest>{requestToClone.@idRequest}</idRequest>    	
    </mx:request>
  </mx:HTTPService>


   <mx:HTTPService  
    id="getRequestToAmend" 
    url="GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequestToAmend(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get request to amend', event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idRequest>{browseTree.selectedItem.@idRequest}</idRequest>    	
    </mx:request>
  </mx:HTTPService>

   <mx:HTTPService  
    id="getRequest" 
    url="GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequest(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get existing request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="saveNewRequest" 
    url="SaveRequest.gx"
    destination="saveNewRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveNewRequest(event)"
    fault="parentApplication.onFailHttpRequest('Failed to submit request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>

  <mx:HTTPService  
    id="saveExistingRequest" 
    url="SaveRequest.gx"
    destination="saveExistingRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveExistingRequest(event)"
    fault="parentApplication.onFailHttpRequest('Failed to save request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="getLab" 
    url="GetLab.gx"
    destination="getLab"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetLab(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get group', event)"
    method="POST"
    useProxy="false">
	<mx:request xmlns="">
		<idLab>{requestEditLabCombo.selectedItem.@idLab}</idLab>
	</mx:request>
   </mx:HTTPService>
   
  <mx:HTTPService  
    id="getCandidateProjectRequestList" 
    url="GetProjectRequestList.gx"
    destination="getCandidateProjectRequestList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetCandidateProjectRequestList(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to get experiments to amend', event)"
    method="POST" 
    useProxy="false">
    <mx:request>
    </mx:request>
   </mx:HTTPService>
   
   <mx:HTTPService  
    id="getLabForAddingServices" 
    url="GetLab.gx"
    destination="getLabForAddingServices"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetLabForAddingServices(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get group', event)"
    method="POST"
    useProxy="false">
    <mx:request>
    	<idLab>{this.labCombo.selectedItem.@idLab}</idLab>
    </mx:request>
   </mx:HTTPService>
   
    <mx:HTTPService 
    id="getSlideProductList" 
    url="GetSlideProductList.gx"
    showBusyCursor="true"
    resultFormat="e4x"
    result="onGetSlideProductList(event)"
	fault="parentApplication.onFailHttpRequest('Failed to slide product list', event)"
    destination="getSlideProductList"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
    
          
    <mx:HTTPService 
    id="getSlideDesignList" 
    url="GetSlideDesignList.gx"
    showBusyCursor="true"
    resultFormat="e4x"
    result="onGetSlideDesignList(event)"
	fault="parentApplication.onFailHttpRequest('Failed to slide design list', event)"
    destination="getSlideDesignList"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >

   <mx:HTTPService  
    id="createBillingItems" 
    url="CreateBillingItems.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onCreateBillingItems(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get estimated billing', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>

   <mx:HTTPService  
    id="getMultiplexLaneList" 
    url="GetMultiplexLaneList.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetMultiplexLaneList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get multiplex sequence lane list', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
	
	
  
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Container;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.PropertyChangeEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.validators.NumberValidator;
			import mx.validators.ValidationResult;
			
			import views.order.NavOrderView;
			import views.topics.NavTopicsView;
			import views.util.GNomExStringUtil;
			import views.util.PromptXMLListCollection;
        
		[Embed(source='../../assets/page.png')]
		[Bindable]
		public var viewIcon:Class;
		
		[Embed(source='../../assets/arrow_left.png')]
		[Bindable]
		public var leftArrowIcon:Class;

		[Bindable]
		private var requestIcon:String = '';
        
		[Bindable]
		private var errorMessage:String = "";
		[Bindable]
		private var warningMessage:String = "";
		        
        
    	[Bindable]
		public var selectedIdSlideProduct:Object;
			
		[Bindable]
		public var coreFacility:Object = null;

        [Bindable]
        private var submittedIdRequest:String;
        [Bindable]
        private var submittedRequestNumber:String;


		[Bindable]
		public var requestType:String = "";

		private var externalIdRequest:String;
		private var externalRequestNumber:String;
			
		[Bindable]
		public var requestCategoryName:String;
		
		[Bindable]
		public var applicationName:String;
			
		public var codeApplication:String;
				
		[Bindable]
		public var seqLibTreatmentsDisplay:String = "";
				
		[Bindable]
		public var request:Object;
			
		public var saveDescription:String = "";
			
		[Bindable]
		public var requestCategory:Object;
		
		[Bindable]
		public var lab:Object;
		
		private var existingLanes:XMLList = null;
		
		[Bindable]
		public var seqLibProtocolList:XMLListCollection;
		[Bindable]
		public var sampleSourceList:XMLListCollection;
		[Bindable]
		public var filteredSampleTypeList:XMLListCollection;
		[Bindable]
		public var filteredSampleTypeListRna:XMLListCollection;
		[Bindable]
		public var filteredSampleTypeListDna:XMLListCollection;
		[Bindable]
		public var isolationTypeList:XMLListCollection;
		[Bindable]
		public var filteredSampleDropOffLocationList:XMLListCollection;
		[Bindable]
		public var filteredSeqRunTypeList:XMLListCollection;
		[Bindable]
		public var filteredGenomeBuildList:XMLListCollection;
		[Bindable]
		public var filteredMicroarrayAppList:XMLListCollection;
		[Bindable]
		public var filteredAppList:XMLListCollection;
		[Bindable]
		public var filteredSlideProductList:XMLListCollection;
		[Bindable]
		public var filteredProjectList:XMLListCollection;
		[Bindable]
		public var slideDesignList:XMLListCollection;
		[Bindable]
		private var appUsersForLab:XMLListCollection;
		private var appUserSort:Sort;

        

		private var dictionarySorter:Sort;
		private var sampleTypeSorter:Sort;
		private var seqRunTypeSorter:Sort;
		private var filteredAppListSorter:Sort;

		[Bindable]
		private var selectedFileList:XMLListCollection;
		
		[Bindable]
		private var experimentCategoryName:String;
		[Bindable]
		private var billingAccountName:String;

		[Bindable]
		public var requestToClone:Object;
		
		[Bindable]
		public var userWarningsSamples:String = "";
		[Bindable]
		public var userWarningsSampleSetup:String = "";
		[Bindable]
		public var userWarningsHybSetup:String = "";

		[Bindable]
		public var showCCNumberColumn:Boolean = true;
		
		[Bindable]
		private var requestApplication:Object = null;	
		
		[Bindable]
		private var tabIndexToRestore:int = -1;
		
		public var concentrationValidator:NumberValidator = new NumberValidator();
		
		private var isInitialized:Boolean = false;
			
		private var lastSelectedApplication:Object = null;

		public var numCapSeqPlates:int = 0;
			
		public var numIScanPlates:int = 0;
		
		public var defaultCodeRequestCategory:String = null;
		
		public var defaultRequestCategory:Object = null;
	
		public var ccNumberList:Array = null;
		
		[Bindable]
		private var labList:XMLListCollection = null;

		// Variables to hold parameters for showExperiment after experiment is submitted.
		private var theRequestNumber:String;
		private var showPromptToUpload:Boolean;
			
		private function init():void {
	 		// If this is the first time this instance
	 		// has been shown, perform 1-time-only
	 		// initialization
			if (!isInitialized) {

				// Init url for sample sheet upload
				parentApplication.setupSampleSheetUpload();
				
				// Set the base state
				if (this.id == "amendRequestView") {
					this.currentState = 'AmendState';
					this.theTab.removeChild(downloadView);
					this.nextButton.enabled = false;
				} else if (this.id == "experimentEditView") {
					this.currentState = "EditState";
				} else if (!parentApplication.submitInternalExperiment()) {
					this.currentState = "";
					this.theTab.removeChild(downloadView);
				}else {
					this.currentState = "";
					this.theTab.removeChild(downloadView);
				}

				this.initializeData();
        	    this.checkSecurity();
            	this.setupDataListeners();
            	

    			isInitialized = true;
			}
			
			// Force the setting of request category name to reset
			// the state if we are toggling between register external
			// experiment and submit internal experiment.
			if (!isEditState() && !isAmendState()) { 
				if (!parentApplication.isInternalExperimentSubmission) {	
					
				} 
			}

			// Always perform checkSecurity on setupView
			if (this.theTab.contains(setupView)) {
				setupView.init();
			}
			
			// Always perform checkSecurity on annotationView
			if (this.theTab.contains(annotationView)) {
				annotationView.checkSecurity();
			}
			

        	if (parentApplication.theViews.selectedChild == this) {
    	    	this.setupSubmitForm();
        	} else if (this.id == "experimentEditView" && request != null) {
        		this.setupTheEditForm();
				//  Grab the request application so that we know if we need to include avg Insert size or capLib fields
				//  in the layout.
				requestApplication = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', request.@codeApplication);
        	}	

			this.theTab.selectedIndex = 0;
		}

		private function enableTabs(enable:Boolean):void {
			for(var tabIdx:int = 0; tabIdx < theTab.numChildren; tabIdx++) {
				var x:DisplayObject = theTab.getChildAt(tabIdx);
				if (x is Canvas) {
					Canvas(x).enabled = enable;
				}
			}
		}
			
		public function instantiateTabs(codeRequestCategory:String, isEditState:Boolean, isAmendState:Boolean):void {
			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory',codeRequestCategory);
			var requestCategoryType:Object = parentApplication.dictionaryManager.getEntry("hci.gnomex.model.RequestCategoryType", requestCategory.@type);

			for(var tabIdx:int = 0; tabIdx < theTab.numChildren; tabIdx++) {
				if (theTab.getChildAt(tabIdx) == this.samplesView) {
					var newSamplesView:TabSamplesBase = TabSamplesBase.getSamplesTab(samplesView, requestCategoryType, isEditState, isAmendState);
					if (newSamplesView != this.samplesView) {
						this.samplesView = newSamplesView;
						theTab.removeChildAt(tabIdx);
						theTab.addChildAt(samplesView, tabIdx);
					}
				}
				if (theTab.getChildAt(tabIdx) == this.confirmView) {
					var newConfirmView:TabConfirmBase = TabConfirmBase.getConfirmTab(confirmView, requestCategoryType);
					if (newConfirmView != this.confirmView) {
						this.confirmView = newConfirmView;
						theTab.removeChildAt(tabIdx);
						theTab.addChildAt(confirmView, tabIdx);
					}
				}
			}
			
			theTab.selectedIndex = 0;
		}
			
		private function leave():void {
			if (parentApplication.theViews.selectedChild == this) {
				
			} else if (this.id == "experimentEditView" && request != null) {
				this.theTab.selectedChild = this.samplesView;
			}	
		}

		public function checkDirty():void {
		}
				
		public function initializeData():void {
        	var dictionarySorter:Sort = new Sort();
    	    dictionarySorter.compareFunction = this.sortDictionaryEntries;
			codeApplication = '';
			if(request != null) {
				codeApplication = request.@codeApplication;
			}

	        seqLibProtocolList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SeqLibProtocol'));
	        seqLibProtocolList.sort = dictionarySorter;
	        seqLibProtocolList.refresh();

	        sampleSourceList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SampleSource'));
	        sampleSourceList.sort = dictionarySorter;
	        sampleSourceList.refresh();
			
        	filteredSampleTypeList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SampleType'));
        	filteredSampleTypeListRna = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SampleType'));
			filteredSampleTypeListDna = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SampleType'));
        	sampleTypeSorter = new Sort();
        	sampleTypeSorter.compareFunction = this.sortSampleTypes;	
			filteredSampleTypeList.sort = sampleTypeSorter;
        	filteredSampleTypeListRna.sort = sampleTypeSorter;     	
			filteredSampleTypeListDna.sort = sampleTypeSorter;
			filteredSampleTypeList.refresh();
        	filteredSampleTypeListRna.refresh();
			filteredSampleTypeListDna.refresh();
									
			filteredSampleDropOffLocationList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SampleDropOffLocation'));
			filteredSampleDropOffLocationList.sort = dictionarySorter;     	
			filteredSampleDropOffLocationList.refresh();
			
        	
	        filteredSeqRunTypeList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SeqRunType'));
        	seqRunTypeSorter = new Sort();
        	seqRunTypeSorter.compareFunction = this.sortSeqRunType;	   
        	filteredSeqRunTypeList.sort = seqRunTypeSorter;     	
        	filteredSeqRunTypeList.refresh();
        	
        	filteredGenomeBuildList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.GenomeBuildLite'));
        	      
        	filteredMicroarrayAppList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.Application'));
        	// We use this technique xml.copy() to prevent duplication of applications 
        	// that somehow happens when we add services, then submit request or vice versa
        	filteredAppList           = new XMLListCollection();
        	for each(var i:Object in parentApplication.dictionaryManager.getEntries('hci.gnomex.model.Application')) {
        		filteredAppList.addItem(i.copy());
        	}
        	filteredAppListSorter = new Sort();
        	filteredAppListSorter.compareFunction = this.sortApplication;
        	filteredAppList.sort = filteredAppListSorter;
        
	        filteredProjectList = new XMLListCollection(parentApplication.getProjectList.lastResult.Project);
	        filteredProjectList.filterFunction = filterProject;

			initFilters();

			if (theTab.contains(this.annotationView)) {
				this.propertyEntries.refresh();
			}
			this.filteredLabList.refresh();
			
	    	concentrationValidator.domain = "real";
			concentrationValidator.minValue = "0";
			concentrationValidator.maxValue = "99999";
			concentrationValidator.precision = 3;
	    	concentrationValidator.allowNegative = false;
	    	concentrationValidator.required = false;
			concentrationValidator.exceedsMaxError = "exceeds max.";
			concentrationValidator.invalidCharError = "contains invalid characters. Please enter a numeric value.";
			concentrationValidator.negativeError = "cannot be negative.";
			concentrationValidator.precisionError = "has too many digits beyond the decimal point.";
			
		}
			
		public function refreshFilteredProjects():void{
			parentApplication.getProjectList.send();
			filteredProjectList = new XMLListCollection(parentApplication.getProjectList.lastResult.Project);
			filteredProjectList.filterFunction = filterProject;	
			filteredProjectList.refresh();
		}
		
		private function initFilters():void {
	        this.filteredProjectList.filterFunction = this.filterProject;
	        this.filteredProjectList.refresh();
						

			seqLibProtocolList.filterFunction = filterSeqLibProtocol;
			seqLibProtocolList.refresh();
			
			filteredSeqRunTypeList.filterFunction = filterSeqRunType;
			filteredSeqRunTypeList.refresh();

			filteredGenomeBuildList.filterFunction = filterGenomeBuild;
			filteredGenomeBuildList.refresh();
			
			filteredMicroarrayAppList.filterFunction = filterMicroarrayApplication;
			filteredMicroarrayAppList.refresh();
		
			filteredAppList.filterFunction = filterApplication;
			filteredAppList.refresh();

			filteredSampleTypeList.filterFunction = filterAllSampleType;
			filteredSampleTypeList.refresh();
			filteredSampleTypeListRna.filterFunction = filterSampleTypeRna;
			filteredSampleTypeListRna.refresh();
			filteredSampleTypeListDna.filterFunction = filterSampleTypeDna;
			filteredSampleTypeListDna.refresh();
			
			filteredSampleDropOffLocationList.filterFunction = filterSampleDropOffLocation;
			filteredSampleDropOffLocationList.refresh();
			
			filteredSeqRunTypeList.filterFunction = filterSeqRunType;
			filteredSeqRunTypeList.refresh();

		}
		
		public function isSolexaState():Boolean {
			if (currentState == 'SolexaBaseState' ||
				currentState == 'SolexaBaseExternalState' ||
				currentState == 'SolexaEditState' ||
				currentState == 'SeqExternalEditState' ||
			    currentState == 'SolexaBaseAmendState' ||
			    currentState == 'SolexaLaneAmendState') {
				return true;    	
			} else {
				return false;
			}
		}
		
		public function isQCState():Boolean {
			if (currentState == 'QCState' ||
				currentState == 'QCExternalState' ||
				currentState == 'QCEditState') {
				return true;    	
			} else {
				return false;
			}
		}
			
		public function isCapSeqState():Boolean {
			if (currentState == 'CapSeqState' || currentState == 'CapSeqAmendState' || currentState == 'CapSeqEditState') {
				return true;
			} else {
				return false;
			}
		}
			
		public function isFragAnalState():Boolean {
			if (currentState == 'FragAnalState' || currentState == 'FragAnalEditState') {
				return true;
			} else {
				return false;
			}
		}
			
		public function isMitSeqState():Boolean {
			if (currentState == 'MitSeqState' || currentState == 'MitSeqEditState') {
				return true;
			} else {
				return false;
			}
		}
			
		public function isCherryPickState():Boolean {
			if (currentState == 'CherryPickState' || currentState == 'CherryPickEditState') {
				return true;
			} else {
				return false;
			}
		}
			
		public function isIScanState():Boolean {
			if (currentState == 'IScanState' || currentState == 'IScanEditState') {
				return true;
			} else {
				return false;
			}
		}
			
		public function isSequenomState():Boolean {
			if (currentState == 'SequenomState' || currentState == 'SequenomEditState') {
				return true;
			} else {
				return false;
			}
		}
		public function isIsolationState():Boolean {
			if (currentState == 'IsolationState' || currentState == 'IsolationEditState') {
				return true;
			} else {
				return false;
			}
		}
			
		public function isClinicalSequenomState():Boolean {
			if (currentState == 'ClinicalSequenomState' || currentState == 'ClinicalSequenomEditState') {
				return true;
			} else {
				return false;
			}
		}
		
		public function isSequencingState():Boolean {
			return isCapSeqState() || isFragAnalState() || isMitSeqState() || isCherryPickState() || isIScanState();
		}
				
		public function isMicroarrayState():Boolean {
			if (currentState == 'MicroarrayState' ||
				currentState == 'MicroarrayExternalState' || 
				currentState == 'MicroarrayEditState' || 
				currentState == 'MicroarrayAmendState') { 
				return true;    	
			} else {
				return false;
			}
		}
		
		public function isEditState():Boolean {
			if (currentState == 'EditState' ||
				currentState == 'SolexaEditState' ||
				currentState == 'SeqExternalEditState' ||
			    currentState == 'QCEditState' ||
			    currentState == 'MicroarrayEditState' ||
				currentState == 'CapSeqEditState' ||
				currentState == 'CherryPickEditState' ||
				currentState == 'FragAnalEditState' ||
				currentState == 'MitSeqEditState' ||
				currentState == 'IScanEditState' ||
				currentState == 'SequenomEditState' ||
				currentState == 'IsolationEditState' ||
				currentState == 'ClinicalSequenomEditState') {
				return true;    	
			} else {
				return false;
			}
		}
		public function isSolexaEditState():Boolean {
			if (currentState == 'SolexaEditState' ||
			    currentState == 'SeqExternalEditState') {
				return true;    	
			} else {
				return false;
			}
		}
		public function getOrganism():XML {
			if (theTab.contains(sampleSetupView) && (this.isMicroarrayState() || this.isSolexaState()) && currentState != 'SolexaLaneAmendState') {
				return sampleSetupView.sampleOrganismCombo.selectedItem as XML;
			} else if (request != null) {
				var idOrganism:Object = null;
				if (request.hasOwnProperty("@idOrganismSampleDefault") && request.@idOrganismSampleDefault != '') {
					idOrganism = request.@idOrganismSampleDefault;
				} else {  
					for each(var sample:Object in request.samples.Sample) {
						if (sample.hasOwnProperty("@idOrganism") && sample.@idOrganism != '') {
							idOrganism = sample.@idOrganism;
							break;
						}
					}
				}
				var organismList:XMLList = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.OrganismLite', idOrganism);
				if (organismList.length() > 0) {
					return organismList[0];
				} else {
					return null;
				}
			} else {
				return null;
			}
		}
		
		private function getRequestCategoryName():void {
			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', this.request.@codeRequestCategory);
			if (requestCategory is XMLList) {
				requestCategoryName = requestCategory[0].@display.toString();				
			} else {
				requestCategoryName = requestCategory.@display.toString();
			}
		}
		private function getExperimentCategoryName():void {
			var experimentCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', this.request.@codeApplication);
			if (experimentCategory is XMLList) {
				experimentCategoryName = experimentCategory[0].@display.toString();				
			} else {
				experimentCategoryName = experimentCategory.@display.toString();
			}
			if ( this.request.@codeApplication == 'OTHER' && this.request.@applicationNotes != '' ) {
				experimentCategoryName += ' - ' + this.request.@applicationNotes;
			}
		}
		private function getBillingAccountName():void {
//			var billingAccount:Object = null;
//			for each(var lab:Object in parentApplication.labList) {
//				for each(var ba:Object in lab.billingAccounts.BillingAccount) {
//					if (ba.@idBillingAccount == this.request.@idBillingAccount) {
//						billingAccount = ba;
//						break;
//					}
//						
//				}
//			}
//			if (billingAccount != null) {
//				billingAccountName = billingAccount.@accountName;
//			}
			if(this.request.@billingAccountName != null) {
				billingAccountName = this.request.@billingAccountName;
			}
		}
		
		
		public function checkSecurity():void {
			if (theTab.contains(setupView)) {
				setupView.checkSecurity();
			}
		}
		
		public function isRequestPending():Boolean {
			if (this.setupView == null || request == null) {
				return false;
			} else if (request.@idRequest == '0'  && submittedIdRequest == null) {
				if (nextButton.enabled || this.submitButton.enabled || agreeCheckbox.visible) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		}
		
		private function promptToCancelRequest():void {
			if (isRequestPending()) {
				Alert.show( "The request has not been saved.  Are you sure you want to quit?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToCancelRequest,						
						parentApplication.iconWarning);
			} else {
				cancelRequest();
			}
			
		}
		
		private function onPromptToCancelRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	cancelRequest();
            }
        }
        
        private function promptToCancelPriorRequest():void {
			if (isRequestPending()) {
				Alert.show( "The request you have entered has not been saved.  Do you want to start over?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToCancelPriorRequest,						
						parentApplication.iconWarning);
			}
			
		}
		
		private function onPromptToCancelPriorRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	initializeSubmitForm();
            }
        }

        
        public function cancelRequest():void {

			request = null;
			initializeSubmitForm();
        	parentApplication.theViews.selectedIndex = 0;
        	
        }
			
		public function startNewRequest():void {
			request = null;
			this.setupSubmitForm();
		}
			
		private function setupSubmitForm():void {
			if (request == null) {
				getNewRequest.send();
				buttonStack.selectedIndex = 0;
				requestIcon = '';
				requestCategoryName = '';
			}
		}
				
		private function initializeSubmitForm():void {	

			if (isAmendState() ){
				if (amendSetupView == null) {
					return;
				}
				if (!this.contains(amendSetupView)) {
					return;
				}
				
			} else {
				if (setupView == null) {
					return;
				}
				if (!this.contains(setupView)) {
					return;
				}
			}
			
			if (this.isAmendState()) {
				theTab.selectedChild = amendSetupView;
			} else {
				setupView.enabled = true;
				theTab.selectedChild = setupView;
				
			}
			
			requestToClone = null;
			submittedIdRequest = null;
			submittedRequestNumber = null;

			this.filteredLabList.refresh();

			setupView.selectDefaultLab();
			setupView.projectCombo.selectedIndex = -1;
			if ( setupView.appUserCombo != null ){
				setupView.appUserCombo.selectedIndex = -1;
			}
			setupView.requestTypeGroup.selectedValue = '';

			samplesView.enabled = false;			
			
			if (theTab.contains(hybsView)) {
				hybsView.enabled = false;
			}

			if (theTab.contains(sampleSetupView)) {
				sampleSetupView.numberOfSamples.text = '';
				if (this.samples != null && this.samples.length > 0) {
					this.samples.removeAll();
				}
				sampleSetupView.sampleTypeRadioGroup.selectedValue = null;
				sampleSetupView.sampleOrganismCombo.selectedIndex = -1;
				sampleSetupView.enabled = false;
				sampleSetupView.otherSamplePrepMethod.text = "";
				
				if ( sampleSetupView.iScanChipRadioGroup != null ){
					sampleSetupView.iScanChipRadioGroup.selectedValue = null;
					sampleSetupView.iScanChipRadioGroup.selection = null;
				}
				if ( sampleSetupView.numberIScanSamples != null ){
					sampleSetupView.numberIScanSamples.selectedIndex = -1;
				}
				if ( sampleSetupView.iScanNumSourcePlates != null ) {
					sampleSetupView.iScanNumSourcePlates.text = '';
					sampleSetupView.onIScanNumSourcePlatesChanged();
				}
				
				if (theTab.contains(annotationView)) {
					annotationView.enabled = false;								
				}
				if (isSolexaState()) {
					seqSetupView.enabled = false;
					bioinformaticsView.enabled = false;
				}
			}
					
			if (theTab.contains(hybSetupView)) {
				hybSetupView.label = "Hyb setup";
				hybSetupView.numberOfHybsContainer.visible = true;
				hybSetupView.slideSourceContainer.visible = true;

				hybSetupView.organismCombo.selectedIndex = -1;
				hybSetupView.slideProductCombo.selectedIndex = -1;
				hybSetupView.numberOfHybs.text = '';
			 	hybSetupView.unselectSlideSources();

				hybSetupView.organismCombo.enabled = true;
				hybSetupView.slideProductCombo.enabled = true;
				hybSetupView.isCatalogRadio.enabled = true;
				hybSetupView.isCustomRadio.enabled = true;
				
				hybSetupView.enabled = false;
				
			}	
			

			
			if (theTab.contains(confirmView)) {
				confirmView.enabled = false;
				if (confirmButtonStack != null) {
					confirmButtonStack.selectedIndex = 0;
					cancelButton.label = "Cancel";
				}
			}
			
			if (theTab.contains(notesView)) {				
				notesView.currentState = "NewExperimentState";
				// Make experiment name, description req'd if external experiment
				if (!isEditState() && !isAmendState()) { 
					if (!parentApplication.isInternalExperimentSubmission) {	
						notesView.currentState = "ExternalExperimentState";
					} 
				}
			}

			// disable tabs we missed above.
			enableTabs(false);
			setupView.enabled = true;
		}

		private function nextTab():void {
			theTab.selectedIndex++;
			while (!theTab.getTabAt(theTab.selectedIndex).visible) {
				theTab.selectedIndex++;
			}
		}
		
		private function previousTab():void {
			theTab.selectedIndex--;
			while (!theTab.getTabAt(theTab.selectedIndex).visible && theTab.selectedIndex > 0) {
				theTab.selectedIndex--;
			}
		}
		
		public function enableNextButtons():void {
			if (theTab.selectedIndex < theTab.getChildren().length - 1) {
				confirmButtonStack.selectedIndex = 0;
				var nextChild:UIComponent = UIComponent(theTab.getChildAt(theTab.selectedIndex + 1));
				if (nextChild.enabled) {
					nextButton.enabled = true;
				} else {
					nextButton.enabled = false;
				}
					
			} else {
				nextButton.enabled = false;
				confirmButtonStack.selectedIndex = 1;
			}
			if (theTab.selectedIndex > 0) {
				var prevChild:UIComponent = UIComponent(theTab.getChildAt(theTab.selectedIndex - 1));
				if (prevChild != null && prevChild.enabled) {
					backButton.enabled = true;
				} else {
					backButton.enabled = false;
				}
			} else {
				backButton.enabled = false;
			}
			if (theTab.selectedChild == this.samplesView) {
				if (!nextButton.enabled && userWarningsSamples == '') {
					userWarningsSamples = 'Tap outside of grid cell to continue to next tab';
				}
				this.userWarningStack.selectedChild = this.userWarningsBoxSamples;
			} else if (!this.isEditState() && theTab.selectedChild == this.sampleSetupView) {
				this.userWarningStack.selectedChild = this.userWarningsBoxSampleSetup;
			} else if (this.isMicroarrayState() && theTab.selectedChild == this.hybSetupView) {
				this.userWarningStack.selectedChild = this.userWarningsBoxHybSetup;
			} else {
				this.userWarningStack.selectedIndex = 0;
			}
			if (!this.isAmendState()) {
				refreshDownloadList();
			}
			if (theTab.selectedChild == this.notesView && this.notesView.currentState == "ExternalExperimentState") {
				if(!notesView.hasNameAndDef()) {
					nextButton.enabled = false;
				} else {
					nextButton.enabled = true;
				}
				
			}

			
		}

		public function applicationSelected(experimentApplication:String):void {
			codeApplication = experimentApplication;
			request.@codeApplication = experimentApplication;
			if (theTab.contains(annotationView) && request != null) {
				annotationView.onPropertyRefreshed(null);
			}			
		}		
		
		public function setRequestCategoryName():void {
			requestCategory = getRequestCategory();
		
			if (requestCategory == null || request == null) {
				return;
			}

			this.propertyEntries = new XMLListCollection(request.PropertyEntries.PropertyEntry);
			this.propertyEntries.sort = propertySorter;
			this.propertyEntries.filterFunction = filterPropertyEntry;
			this.propertyEntries.refresh();
			
			instantiateTabs(requestCategory.@codeRequestCategory, false, this.isAmendState());
			setTabsVisible();
			
			requestIcon = requestCategory.@icon;
			requestCategoryName = requestCategory.@display.toString();
			requestType = requestCategory.@type;
			
			applicationName = '';
			codeApplication = '';
			request.@applicationNotes = '';
			request.@codeApplication = '';
			request.@codeDNAPrepType = '';
			request.@codeRNAPrepType = '';
			request.@coreToExtractDNA = 'N';
			request.@includeBisulfideConversion = 'N';
			request.@includeQubitConcentration = 'N';
			
			if (theTab.contains(confirmView)) {
				this.confirmView.setBarcodeColVisibility(false);        					
			}
	
			if (theTab.contains(sampleSetupView)) {
				if ( sampleSetupView.radioGroupQCApp != null ){
					sampleSetupView.radioGroupQCApp.selectedValue = null;
				}
				if (sampleSetupView.bioanalyzerChipTypeGrid != null) {
					sampleSetupView.bioanalyzerChipTypeGrid.selectedItem = null;
					samplesView.initializeSamplesGrid();
					// propagate selected chip type to samples
					sampleSetupView.propagateChipType();   
				} 
				if ( sampleSetupView.iScanChipRadioGroup != null ){
					sampleSetupView.iScanChipRadioGroup.selectedValue = null;
				}
				if ( sampleSetupView.numberIScanSamples != null ){
					sampleSetupView.numberIScanSamples.selectedIndex = -1;
				}
				if ( sampleSetupView.iScanChipBox != null ){
					sampleSetupView.iScanChipBox.styleName = "requiredBox";
				}
			}
				
			if (theTab.contains(setupView)) {
				if (this.setupView.requestTypeGroup.selectedValue != null && this.setupView.requestTypeGroup.selectedValue != '' ) {
					this.setupView.requestTypeBox.styleName = "normalBox";
				} else {
					this.setupView.requestTypeBox.styleName = "requiredBox";
				} 				
			}			

			if (requestCategory.@isIlluminaType == 'Y') {
				this.currentState = parentApplication.submitInternalExperiment() ? 'SolexaBaseState' : 'SolexaBaseExternalState';
				if (parentApplication.submitInternalExperiment()) {
					this.sampleSetupView.currentState = 'SolexaSetupState';
				}
				this.samplesView.currentState = 'SolexaSamplesState';

				filteredAppList.filterFunction = filterApplication;
				filteredAppList.refresh();		
				
				this.samplesView.currentState = 'SolexaSamplesState';	
				if (parentApplication.submitInternalExperiment()) {
					this.sampleSetupView.samplesToBePreppedCheckbox.selected = true;
				}
				for each (var sample:Object in samples) {
					sample.@seqPrepByCore = 'Y';
					sample.@numberSequencingLanes = '1';
					sample.@label = '';
				}
				this.samplesView.showHideColumns();		
				this.samplesView.checkSamplesCompleteness();
			
			} else if (requestCategory.@type == parentApplication.TYPE_QC) {
					this.currentState = parentApplication.submitInternalExperiment() ? 'QCState' : 'QCExternalState';
					if (parentApplication.submitInternalExperiment()) {
						this.sampleSetupView.currentState = 'QCSetupState';
					}

					this.samplesView.currentState = 'QCSamplesState';				
					this.samplesView.showHideColumns();						
					this.samplesView.checkSamplesCompleteness();	
					
					filteredAppList.filterFunction = filterApplication;
					filteredAppList.refresh();
					if (parentApplication.submitInternalExperiment()) {
						this.sampleSetupView.qcAppRepeater.invalidateDisplayList();
						this.sampleSetupView.qcAppRepeater..validateNow();
					}
					
					

			} else if (requestCategory.@type == parentApplication.TYPE_CAP_SEQ) {
				this.currentState = "CapSeqState";
				this.sampleSetupView.currentState = 'CapSeqState';
				
				this.samplesView.currentState = 'CapSeqState';				
				this.samplesView.showHideColumns();						
				this.samplesView.checkSamplesCompleteness();	
				
				filteredAppList.filterFunction = filterApplication;
				filteredAppList.refresh();
				
			} else if (requestCategory.@type == parentApplication.TYPE_FRAG_ANAL) {
				this.currentState = "FragAnalState";
				this.sampleSetupView.currentState = 'FragAnalState';
				
				this.samplesView.currentState = 'FragAnalState';				
				this.samplesView.showHideColumns();						
				this.samplesView.checkSamplesCompleteness();	
				
				filteredAppList.filterFunction = filterApplication;
				filteredAppList.refresh();
								
			} else if (requestCategory.@type == parentApplication.TYPE_MIT_SEQ) {
				this.currentState = "MitSeqState";
				this.sampleSetupView.currentState = 'MitSeqState';
				this.sampleSetupView.setPrimerDefaults();
				
				this.samplesView.currentState = 'MitSeqState';				
				this.samplesView.showHideColumns();						
				this.samplesView.checkSamplesCompleteness();	
				
				filteredAppList.filterFunction = filterApplication;
				filteredAppList.refresh();
				
			} else if (requestCategory.@type == parentApplication.TYPE_CHERRY_PICK) {
				this.currentState = "CherryPickState";
				this.sampleSetupView.currentState = 'CherryPickState';
				this.sampleSetupView.cherryNumDestinationWellsRadioGroup.selection = null;
				this.sampleSetupView.cherryNumSourcePlates.text = '';
				this.sampleSetupView.cherryPlate1Name.text = "Plate 1";
				this.sampleSetupView.cherryPlate2Name.text = "Plate 2";
				this.sampleSetupView.cherryPlate3Name.text = "Plate 3";
				this.sampleSetupView.cherryPlate4Name.text = "Plate 4";
				this.sampleSetupView.cherryPlate5Name.text = "Plate 5";
				this.sampleSetupView.cherryPlate6Name.text = "Plate 6";
				this.sampleSetupView.cherryPlate7Name.text = "Plate 7";
				this.sampleSetupView.cherryPlate8Name.text = "Plate 8";
				this.sampleSetupView.cherryPlate9Name.text = "Plate 9";
				this.sampleSetupView.cherryPlate10Name.text = "Plate 10";
				this.sampleSetupView.cherryPlate11Name.text = "Plate 11";
				this.sampleSetupView.cherryPlate12Name.text = "Plate 12";
				this.sampleSetupView.onCherryNumSourcePlatesChanged();
				this.samplesView.currentState = 'CherryPickState';				
				this.samplesView.showHideColumns();						
				this.samplesView.checkSamplesCompleteness();	
				
				filteredAppList.filterFunction = filterApplication;
				filteredAppList.refresh();
				
			} else if (requestCategory.@type == parentApplication.TYPE_ISCAN) {
				this.currentState = "IScanState";
				this.sampleSetupView.currentState = 'IScanState';
				this.samplesView.currentState = 'IScanState';				
				this.samplesView.showHideColumns();						
				this.samplesView.checkSamplesCompleteness();	
				
				this.theTab.getTabAt( theTab.getChildIndex( annotationView ) ).visible = false;
				this.theTab.getTabAt( theTab.getChildIndex( annotationView ) ).includeInLayout = false;
				
				filteredAppList.filterFunction = filterApplication;
				filteredAppList.refresh();
				
				
			} else if (requestCategory.@type == parentApplication.TYPE_SEQUENOM) {
				this.currentState = "SequenomState";
				this.sampleSetupView.currentState = 'SequenomState';		
				this.samplesView.showHideColumns();						
				this.samplesView.checkSamplesCompleteness();	

				this.theTab.getTabAt( theTab.getChildIndex( annotationView ) ).visible = false;
				this.theTab.getTabAt( theTab.getChildIndex( annotationView ) ).includeInLayout = false;
				
				this.sampleSetupView.sequenomPanelContainer.visible = false;
				this.sampleSetupView.sequenomPanelContainer.includeInLayout = false;
				
				filteredAppList.filterFunction = filterApplication;
				filteredAppList.refresh();
								
			} else if (requestCategory.@type == parentApplication.TYPE_ISOLATION) {
				
				this.currentState = "IsolationState";
				this.sampleSetupView.currentState = 'IsolationState';		
				this.samplesView.showHideColumns();						
				this.samplesView.checkSamplesCompleteness();	
				
				this.theTab.getTabAt( theTab.getChildIndex( annotationView ) ).visible = false;
				this.theTab.getTabAt( theTab.getChildIndex( annotationView ) ).includeInLayout = false;
				
				filteredAppList.filterFunction = filterApplication;
				filteredAppList.refresh();
				
				if ( requestCategory.@codeRequestCategory != null && requestCategory.@codeRequestCategory == 'DNAISOL') {
					isolationTypeList = new XMLListCollection(parentApplication.dictionaryManager.getEntriesExcludeBlank('hci.gnomex.model.DNAPrepType'));
				} else if ( requestCategory.@codeRequestCategory != null && requestCategory.@codeRequestCategory == 'RNAISOL') {
					isolationTypeList = new XMLListCollection(parentApplication.dictionaryManager.getEntriesExcludeBlank('hci.gnomex.model.RNAPrepType'));
				}
				isolationTypeList.sort = dictionarySorter;
				isolationTypeList.refresh();
				
			} else if (requestCategory.@type == parentApplication.TYPE_CLINICAL_SEQUENOM) {
				this.currentState = "ClinicalSequenomState";
				this.sampleSetupView.currentState = 'ClinicalSequenomState';
				this.samplesView.currentState = 'ClinicalSequenomState';				
				this.samplesView.showHideColumns();						
				this.samplesView.checkSamplesCompleteness();	
				
				this.theTab.getTabAt( theTab.getChildIndex( annotationView ) ).visible = false;
				this.theTab.getTabAt( theTab.getChildIndex( annotationView ) ).includeInLayout = false;
				
				this.theTab.getTabAt( theTab.getChildIndex( samplesView ) ).visible = false;
				this.theTab.getTabAt( theTab.getChildIndex( samplesView ) ).includeInLayout = false;

				filteredAppList.filterFunction = filterApplication;
				filteredAppList.refresh();
				
				var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application',filteredAppList[0].@codeApplication);
				applicationName = application.@display.toString();
				codeApplication = application.@codeApplication;
				
			} else if (requestCategory.@type == parentApplication.TYPE_MICROARRAY) {
								
				this.currentState = parentApplication.submitInternalExperiment() ? 'MicroarrayState' : 'MicroarrayExternalState';
				if (parentApplication.submitInternalExperiment()) {
					this.sampleSetupView.currentState = '';
					this.sampleSetupView.organismValidator.validate();
				}
				
 				
				this.samplesView.currentState = 'MicroarraySamplesState';
				this.samplesView.showHideColumns();		
				if (parentApplication.submitInternalExperiment()) {
					this.hybSetupView.currentState = "SetupState";
					
					this.hybSetupView.slideProductCombo.selectedIndex = 0;
					this.hybSetupView.checkForSlideProductWarning();
					this.hybSetupView.numberOfHybsValidator.validate();
				}
				this.hybsView.currentState = '';



				// Hide/Show the channel 2 sample column
				if (requestCategory.@numberOfChannels == "2") {
					this.samplesView.currentState = 'MicroarraySamplesState';
					this.hybsView.currentState = "";
					hybsView.channel2SampleColumn.visible = true;
					confirmView.setChannel2ColVisibility(true);
				} else {
					this.samplesView.currentState = 'MicroarrayOneColorSamplesState';
					this.hybsView.currentState = "HybsOneColorState";
					hybsView.channel2SampleColumn.visible = false;
					confirmView.setChannel2ColVisibility(false);
					for each (var s:Object in samples) {
						s.@label = 'cy3';
					}
				}
				
				filteredAppList.filterFunction = filterApplication;
				filteredAppList.refresh();
									
				filteredMicroarrayAppList.filterFunction = filterMicroarrayApplication;
				filteredMicroarrayAppList.refresh();
				if (parentApplication.submitInternalExperiment()) {
					
					this.hybSetupView.microarrayAppRepeater.invalidateDisplayList();
					this.hybSetupView.microarrayAppRepeater.validateNow();
				
					this.hybSetupView.microarrayAppRadioGroup.selectedValue = null;
				}
				

 
				this.samplesView.checkSamplesCompleteness();	
				
				if (this.getSlideProductList.lastResult == null || filteredSlideProductList == null) {
					getSlideProductList.send();
				} else {
					filteredSlideProductList.refresh()
				}
				if (this.getSlideDesignList.lastResult == null) {
					getSlideDesignList.send();
				}
					
			}
			if (parentApplication.submitInternalExperiment()) {
				this.sampleSetupView.numberOfSamplesValidator.validate();
				this.sampleSetupView.sampleTypeValidator.validate();
			}

			
			filteredSampleTypeList.refresh();
			filteredSampleTypeListRna.refresh();
			filteredSampleTypeListDna.refresh();
			filteredSampleDropOffLocationList.refresh();
			seqLibProtocolList.refresh();
			
			if (parentApplication.submitInternalExperiment()) {
				sampleSetupView.sampleOrganismCombo.selectedIndex = 0;
				callLater(pickDefaultOrganism);
			}
			 
			
			if (theTab.contains(annotationView) && request != null) {
				annotationView.onPropertyRefreshed(null);
			}
			
			if (theTab.contains(notesView)) {
				notesView.setExternalNoteVisibility();
			}
			if (theTab.contains(samplesView)) {
				samplesView.setExternalNoteVisibility();
			}
			
			loadPriceLists(getIdLab());
			this.setupView.checkSecurity();
		}

		public function labSelected(lab:Object):void {
			loadPriceLists(lab.@idLab.toString());
		}

		private function loadPriceLists(idLab:String):void {
			requestCategory = this.getRequestCategory();
			if (requestCategory != null && requestCategory.@codeRequestCategory != null && idLab != null) {
				if (theTab.contains(seqSetup1View)) {
					this.seqSetup1View.loadPriceList(idLab, requestCategory.@codeRequestCategory.toString());
				}
				if (theTab.contains(seqSetupView)) {
					this.seqSetupView.loadPriceList(idLab, requestCategory.@codeRequestCategory.toString());
				}
			}
		}
			
		private function setTabsVisible():void {
			for (var tabIdx:int = 0; tabIdx < theTab.getChildren().length; tabIdx++) {
				theTab.getTabAt(tabIdx).visible = true;
				theTab.getTabAt(tabIdx).includeInLayout = true;
			}
		}

		private function pickDefaultOrganism():void {
			// Select the default organism on sample setup if the request category specifies one
			var requestCategory:Object = getRequestCategory();
			if (requestCategory.@idOrganism != '') {
				var organism:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.OrganismLite',requestCategory.@idOrganism);
				if (organism is XMLList) {
					sampleSetupView.sampleOrganismCombo.selectedItem = organism[0];
					
				} else {
					sampleSetupView.sampleOrganismCombo.selectedItem = organism;
				}
			} else {
				sampleSetupView.sampleOrganismCombo.selectedIndex = -1;
			}


		}
					
		public function getWellNameByColumn(item:Object,col:int):String
		{
			var wellName:String = "";
			if (samples!= null) {
				var x:int = samples.getItemIndex(item);
				if (x >= 0) {
					x = x % 96;
					item.@wellName = parentApplication.wellNamesByColumn[x];
					wellName = item.@wellName;
				}
			}
			return wellName;
		}

			public function getHybsGridRowNumber(item:Object,col:int):String
        {
        	if (hybs!= null) {
	           var x:int = hybs.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
		public function getSampleChannel1Name(item:Object,col:int):String
        {
        	var sampleName:String = "";
        	if (hybsView.hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel1) {
        				sampleName = sample.@name;
        				break;
        			} 
        		}
        	} 
        	return sampleName; 
        }
		public function getSampleChannel2Name(item:Object,col:int):String
        {
        	var sampleName:String = "";
        	if (hybsView.hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel2) {
        				sampleName = sample.@name;
        				break;
        			}
        		}
        	} 
        	return sampleName;
        }
		public function getSampleChannel1Number(item:Object,col:int):String
        {
        	var sampleNumber:String = "";
        	if (hybsView.hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel1) {
        				sampleNumber = sample.@number;
        				break;
        			}
        		}
        	} 
        	return sampleNumber;
        }
		public function getSampleChannel2Number(item:Object,col:int):String
        {
        	var sampleNumber:String = "";
        	if (hybsView.hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel2) {
        				sampleNumber = sample.@number;
        				break;
        			}
        		}
        	} 
        	return sampleNumber;
        }        
        
		public function getLanesGridRowNumber(item:Object,col:int):String
        {
        	if (lanes!= null) {
	           var x:int = lanes.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
		public function getLaneSampleName(item:Object,col:int):String
        {
        	if (item == null || !item.hasOwnProperty("@idSample")) {
        		return '';
        	}
        	var sampleName:String = "";
    		for each(var sample:Object in samples) {
    			if (sample.@idSample == item.@idSample) {
    				sampleName = sample.@name;
    				break;
    			}
    		}
        	return sampleName;
        }


		public function filterProject(item:Object):Boolean {
			var keep:Boolean = false;
			
			if (this.isAmendState()) {
				return false;
			}
			
			if (this.theTab == null || !this.theTab.contains(setupView)) {
				return false;
			}
			
			if (item.@idProject == '') {
				keep = true;
			} else if (setupView.labCombo.selectedItem != null) {
				if (item.@idLab == setupView.labCombo.selectedItem.@idLab) {
					keep = true;
				}
			}
			return keep;
		}
			
		private function filterPropertyEntry(sce:Object):Boolean {
			var keep:Boolean = false;
			
			var property:XML = parentApplication.getSampleProperty(sce.@idProperty);
			if(sce.@idProperty == "-1" || property == null) {
				return true;	// Special case for "Description" field which is not a "real" property 
			}
			if (this.isApplicableProperty(property)) {
				if (sce.@isSelected == 'true' || property.@isActive != 'N') {
					keep = true;
				}
			}
			
			return keep;
		}
			
			
		private function isApplicableProperty(property:XML):Boolean {
			var filterByOrganism:Boolean = false;
			if (property.descendants("Organism").length() > 0) {
				filterByOrganism = true;	
			}
			
			var filterByPlatformApplication:Boolean = false;
			if (property.descendants("PropertyPlatformApplication").length() > 0 || 
				this.isIScanState() || 
				this.isSequenomState() || this.isClinicalSequenomState() ||
				this.isIsolationState()) {
				filterByPlatformApplication = true;	
			}
			
			var keep:Boolean = false;
			
			if (!filterByOrganism) {
				keep = true;
			} else {
				if (this.getOrganism() != null) {
					for each(var organism:XML in property.descendants("Organism")) {
						if (this.getOrganism().@idOrganism == organism.@idOrganism) {
							keep = true;
							break;
						}
					}
				}
			}
			
			if (keep) {
				if (!filterByPlatformApplication) {
					keep = true;
				} else {
					keep = false;
					var reqCategory:Object = this.getRequestCategory();
					if (reqCategory != null) {
						for each(var pa:XML in property.descendants("PropertyPlatformApplication")) {
							if (reqCategory.@codeRequestCategory.toString() == pa.@codeRequestCategory) {
								if(pa.@codeApplication == "" || this.codeApplication == pa.@codeApplication) {
									keep = true;
									break;
								}
							}
						}						
					}
				}
			}
			
			
			return keep;
		}
		
		private function isIlluminaAmendRequestType():Boolean {
			var codeRequestCategory:String = getAmendRequestCategory();
			if (codeRequestCategory != '') {
				var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', codeRequestCategory);
				if (requestCategory.@isIlluminaType == 'Y') {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
			
		}

				
		private function getAmendRequestType():String {
			var codeRequestCategory:String = getAmendRequestCategory();
			if (codeRequestCategory != '') {
				var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', codeRequestCategory);
				return requestCategory.@type.toString();				
			} else {
				return '';
			}
			
		}

		private function getAmendRequestCategory():String {
			if (this.radioGroupAmendType.selectedValue != null && this.radioGroupAmendType.selectedValue != '') {
				if (this.radioGroupAmendType.selectedValue.toString().indexOf("QC-TO-") == 0) {
					return this.radioGroupAmendType.selectedValue.toString().substr(6);
				} else if (this.radioGroupAmendType.selectedValue.toString().indexOf("ADD-LANES-") == 0) {
					return this.radioGroupAmendType.selectedValue.toString().substr(10);
				} else {
					return "";
				}
			} else {
				return "";
			}
		}
		private function isRequestToAmendQC():Boolean {
			if (this.radioGroupAmendType.selectedValue != null && this.radioGroupAmendType.selectedValue != '') {
				return this.radioGroupAmendType.selectedValue.toString().indexOf("QC-TO-") == 0;
			} else {
				return false;
			}
		}
		private function isRequestToAmendIllumina():Boolean {
			if (this.radioGroupAmendType.selectedValue != null && this.radioGroupAmendType.selectedValue != '') {
				return this.radioGroupAmendType.selectedValue.toString().indexOf("ADD-LANES-") == 0;
			} else {
				return false;
			}
		}
		
		private function highlightAmendRequestCategory():void {
			var i:int = 0;
			for (i = 0; i < radioAmendRequestCategory1.length; i++) {
	        	radioAmendRequestCategory1[i].setStyle("fontWeight", radioAmendRequestCategory1[i].selected    == true ?  "bold" : "normal");	
   			}
			for (i = 0; i < radioAmendRequestCategory2.length; i++) {
	        	radioAmendRequestCategory2[i].setStyle("fontWeight", radioAmendRequestCategory2[i].selected    == true ?  "bold" : "normal");	
   			}
				
		}

		
		public function getRequestCategory():Object {			
			requestCategory = null;
			if (this.isAmendState()) {
				requestCategory = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', getAmendRequestCategory());				
			} else if (!isEditState()) {
				requestCategory = setupView.getRequestCategory();
			} else {
				requestCategory = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', request.@codeRequestCategory);
			}
			return requestCategory;			
		}
			
        private function filterSampleType(item:Object, codeNucleotideType:String):Boolean {
        	if (item.@value == "") {
        		return false;
        	}

			if (!isEditState() && item.@isActive == 'N') {
				return false;	
			}
        	
			if ( codeNucleotideType != null && item.@codeNucleotideType != codeNucleotideType) {
				return false;
			}
        	
        	var doesMatchRequestCategory:Boolean = false;
        	var requestCategory:Object = this.getRequestCategory();
        	var theRequestCategories:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SampleTypeRequestCategory').DictionaryEntry.(@value != '' && @idSampleType == item.@value.toString());
    	   	for each (var xref1:Object in theRequestCategories) {
    	   		if (xref1.@codeRequestCategory.toString() == requestCategory.@codeRequestCategory.toString()) {
	   				doesMatchRequestCategory = true;
    	   		    break;
    	   		}
    	   	}

        	return doesMatchRequestCategory;
        }  
			
		private function filterAllSampleType(item:Object):Boolean {
			return filterSampleType(item, null);
		}
			
		private function filterSampleTypeRna(item:Object):Boolean {
			return filterSampleType(item, 'RNA');
		}
			
		private function filterSampleTypeDna(item:Object):Boolean {
			return filterSampleType(item, 'DNA');
		}
			
		private function filterSampleDropOffLocation(item:Object):Boolean {
			if (item.@value == "") {
				return true;
			}
			
			
			if (item.@isActive == 'N') {
				return false;
			}
			
			return true;
		}  

        private function filterSeqLibProtocol(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}

			if (!isEditState() && item.@isActive == 'N') {
				return false;	
			}


			var doesMatchApplication:Boolean = true;
			if (this.isSolexaState()) {
				var codeApplication:Object = this.seqSetupView.radioGroupSeqApp.selectedValue;
				if (codeApplication != null) {
					doesMatchApplication = false;
		        	var theSeqLibProtocols:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SeqLibProtocolApplication').DictionaryEntry.(@value != '' && @idSeqLibProtocol == item.@value.toString());
		    	   	for each (var xref2:Object in theSeqLibProtocols) {
		    	   		if (xref2.@codeApplication.toString() == codeApplication.toString()) {
			   				doesMatchApplication = true;
		    	   		    break;
		    	   		}
		    	   	}
	    	   	}
			}

        	return doesMatchApplication; 
        }  

		private function filterApplication(item:Object):Boolean {
			var codeRequestCategory:String = this.getRequestCategory().@codeRequestCategory;
			if (item.@value == "") {
    	    	return false;
			} 
			if (isEditState() && item.@value == request.@codeApplication) {
				return true;
			}
			if (!isEditState() && item.@isActive == 'N') {
				return false;	
			}
        	var doesMatchRequestCategory:Boolean = false;
        	var theApplications:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategoryApplication').DictionaryEntry.(@value != '' && @codeApplication == item.@value.toString());
    	   	for each (var xref:Object in theApplications) {
				if (xref.@codeRequestCategory.toString() == codeRequestCategory) {
	   				doesMatchRequestCategory = true;
    	   		    break;
    	   		}
    	   	}
        	        	
			var doesMatchSeqPrepByCore:Boolean = false;
			if (doesMatchRequestCategory) {
				if (this.samples.length == 0 || this.getRequestCategory().@isIlluminaType != 'Y') {
					doesMatchSeqPrepByCore = true;
				} else {
					for each (var sample:Object in samples) {
						if ((sample.@seqPrepByCore == "Y" && item.@onlyForLabPrepped == "N") || sample.@seqPrepByCore == "N") {
							doesMatchSeqPrepByCore = true;
							break;
						}
					}
				}
			}
        	return doesMatchRequestCategory && doesMatchSeqPrepByCore;
        }  

		private function filterMicroarrayApplication(item:Object):Boolean {
			var codeRequestCategory:String = this.getRequestCategory().@codeRequestCategory;

			if (codeRequestCategory == null || codeRequestCategory == "" || codeRequestCategory == "SOLEXA" || codeRequestCategory == 'HISEQ' || codeRequestCategory == 'MISEQ') {
				codeRequestCategory = "AGIL";
			}
			if (item.@value == "") {
    	    	return false;
			} 
        	
			if (!isEditState() && item.@isActive == 'N') {
				return false;	
			}
        	var doesMatchRequestCategory:Boolean = false;
        	var theApplications:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategoryApplication').DictionaryEntry.(@value != '' && @codeApplication == item.@value.toString());
    	   	for each (var xref:Object in theApplications) {
    	   		if (xref.@codeRequestCategory.toString() == codeRequestCategory) {
	   				doesMatchRequestCategory = true;
    	   		    break;
    	   		}
    	   	}
        	
        	
        	return doesMatchRequestCategory;
        }  
        
        private function filterGenomeBuild(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}
        	if (isEditState()) {
        		return true;
        	}
        	
        	if (item.@isActive == 'N') {
        		return false;
        	}
        	var doesMatch:Boolean = false;
        	if (currentState == "SolexaLaneAmendState") {
        		if (request != null && request.hasOwnProperty("@idOrganismSampleDefault")) {
		        	if (item.@idOrganism.toString() == request.@idOrganismSampleDefault.toString()) {
		        	    doesMatch = true;
	    	    	}
        		}
        	} else {
	        	if (sampleSetupView.sampleOrganismCombo.selectedItem != null && 
	        	    sampleSetupView.sampleOrganismCombo.selectedItem.@value != null  &&
	        	    sampleSetupView.sampleOrganismCombo.selectedItem.@value != "") {
	        	    if (item.@idOrganism.toString() == sampleSetupView.sampleOrganismCombo.selectedItem.@value.toString()) {
	        	    	doesMatch = true;
	        	    }
	        	}
        		
        	}
    	   	return doesMatch;
    	}

        private function filterSeqRunType(item:Object):Boolean {
    	   	var codeRequestCategory:String = this.getRequestCategory().@codeRequestCategory;
			if (item.@value == "") {
    	    	return false;
			} 
        	
			if (!isEditState() && item.@isActive == 'N') {
				return false;	
			}
        	return true;
    	}
       
        private function filterNumberSequencingCyclesAllowed(item:Object):Boolean {
			if (isEditState()) {
        		return true;
        	}

			if (item.@value == "") {
    	    	return false;
			} 
        	        	
			var codeRequestCategory:String = this.getRequestCategory().@codeRequestCategory;
        	var doesMatch:Boolean = false;
        	if (item.@codeRequestCategory.toString() == codeRequestCategory) {
	    		doesMatch = true;
    	   	}
        	
        	return doesMatch;
        }  

        public function filterSlideProduct(item:Object):Boolean {
        	if (item.@idSlideProduct == null || item.@idSlideProduct == "") {
        		return true;
        	}
        	
        	if (!isEditState() && item.@isActive == 'N') {
        		return false;	
        	}
        	
        	if (this.theTab == null) {
        		return false;
        	}
			
			// Internal experiments should always have a hybsetup tab
			if (parentApplication.submitInternalExperiment()) {
				if (!this.theTab.contains(hybSetupView)) {
					return false;
				} 
			}
        	
			var doesMatchRequestCategoryVendor:Boolean = true;
        	if (!isEditState()) {
				var requestCategory:Object = getRequestCategory();
        		doesMatchRequestCategoryVendor = false;
        		if (item.@idVendor == requestCategory.@idVendor) {
        			doesMatchRequestCategoryVendor = true;
        		}
        	} else {
        		doesMatchRequestCategoryVendor = false;
				var rCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', request.@codeRequestCategory);
        		if (item.@idVendor == rCategory.@idVendor) {
        			doesMatchRequestCategoryVendor = true;        			
        		}
        	}       	
        	
        	var doesMatchOrganism:Boolean = true;
			// Only match organism for internal experiments
			if (parentApplication.submitInternalExperiment()) {
				if (hybSetupView.organismCombo.selectedItem != null && 
					hybSetupView.organismCombo.selectedItem.@value != null  &&
					hybSetupView.organismCombo.selectedItem.@value != "") {
					if (item.@idOrganism == hybSetupView.organismCombo.selectedItem.@idOrganism) {
						doesMatchOrganism = true;
					} else {
						doesMatchOrganism = false;
					}
				}
			}
			
			var doesMatchExperimentCategory:Boolean = true;
			var applicationsForSlideProduct:XMLList  =  null;
			var x:Number = 0;
			if (parentApplication.submitInternalExperiment()) {
				if (hybSetupView.currentState == "SetupState" &&
					hybSetupView.microarrayAppRadioGroup.selectedValue != null &&
					hybSetupView.microarrayAppRadioGroup.selectedValue != null != "") {
					doesMatchExperimentCategory = false;
					applicationsForSlideProduct  = item.applications.Application;
					for(x = 0; x < applicationsForSlideProduct.length(); x++) {
						if (applicationsForSlideProduct[x].@codeApplication == hybSetupView.microarrayAppRadioGroup.selectedValue) {
							doesMatchExperimentCategory = true;
							break;
						}
					}
				}				
			} else {
				if (setupView.currentState.indexOf("AdminExternal") == 0 &&
					setupView.radioGroupAppAdmin.selectedValue != null &&
					setupView.radioGroupAppAdmin.selectedValue != null != "") {
					doesMatchExperimentCategory = false;
					applicationsForSlideProduct  = item.applications.Application;
					for(x = 0; x < applicationsForSlideProduct.length(); x++) {
						if (applicationsForSlideProduct[x].@codeApplication == setupView.radioGroupAppAdmin.selectedValue) {
							doesMatchExperimentCategory = true;
							break;
						}
					}
				} else if (setupView.currentState.indexOf("External") == 0 &&
					setupView.radioGroupApp.selectedValue != null &&
					setupView.radioGroupApp.selectedValue != null != "") {
					doesMatchExperimentCategory = false;
					applicationsForSlideProduct   = item.applications.Application;
					for(x = 0; x < applicationsForSlideProduct.length(); x++) {
						if (applicationsForSlideProduct[x].@codeApplication == setupView.radioGroupApp.selectedValue) {
							doesMatchExperimentCategory = true;
							break;
						}
					}
				}	
				
			}
			
        	
        	var doesMatchGroup:Boolean = true;
			// Only filter by custom slides if this is an internal experiment
			if (parentApplication.submitInternalExperiment()) {
				var idLab:Object = getIdLab();
				if (idLab != null && idLab != "" && hybSetupView.isCustomRadio.selected) {
					if (item.@isCustom == "Y" && item.@idLab == idLab) {
						doesMatchGroup = true;
					} else {
						doesMatchGroup = false;
					}
				} else if (idLab != null && idLab != "" && hybSetupView.isCatalogRadio.selected) {
					if (item.@isCustom != "Y") {
						doesMatchGroup = true;
					} else {
						doesMatchGroup = false;
					}
				}
			}
        	
        	return doesMatchRequestCategoryVendor && doesMatchOrganism && doesMatchExperimentCategory && doesMatchGroup;
        }  
		
		public function getIdLab():String {
			var idLab:String = null;
			if (this.isAmendState() || this.isEditState()) {
				if  (request != null && request.hasOwnProperty("@idLab")) {
					idLab = request.@idLab;    			
				}
			} else {
				if (setupView.labCombo.selectedItem != null) {
					idLab = setupView.labCombo.selectedItem.@idLab;
				}
			}
			return idLab;
		}	
			
		public function cloneRequest(requestToClone:Object):void {
			this.requestToClone = requestToClone;
			getRequestToClone.send();
		}
		
		private function onGetRequestToClone(event:ResultEvent):void {
			existingLanes = null;
			
			var clonedRequest:Object = getRequestToClone.lastResult..Request.(@idRequest == requestToClone.@idRequest);
			if (!isMicroarrayState()) {
				clonedRequest.replace("hybridizations", <hybridizations></hybridizations>); 	
			} 
			if (!isSolexaState()) {
				clonedRequest.replace("sequenceLanes", <sequenceLanes></sequenceLanes>); 	
			} 
			
			request = clonedRequest;
			
			request.@idRequest = "0";
			request.@number = "";
			request.@idLab = setupView.labCombo.selectedItem.@idLab;
			request.@idSubmitter= setupView.idAppUser;
			request.@idAppUser = setupView.idAppUser;
			request.@idProject = setupView.projectCombo.selectedItem.@idProject;
			request.@codeRequestCategory = setupView.requestTypeGroup.selectedValue;

			var requestCategory:Object = getRequestCategory();
			
			// Clear out workflow fields from sample and hyb
			for each(var sample:Object in samples) {
				sample.@qualDate = '';
				sample.@qualCompleted = 'N';
				sample.@qualFailed = 'N';
				sample.@qualBypassed="N"; 
				sample.@qual260nmTo230nmRatio=""; 
				sample.@qual260nmTo280nmRatio=""; 
				sample.@qual28sTo18sRibosomalRatio=""; 
				sample.@qualAverageFragmentLength=""; 
				sample.@qualRINNumber=""; 
				sample.@qualCalcConcentration="";
				sample.@qualStatus = "";
				sample.@treatment = "";
				sample.@canChangeSampleName='Y';
				sample.@canChangeSampleType='Y';
				sample.@canChangeSampleDropOffLocation='Y';
				sample.@canChangeSampleConcentration='Y';
				sample.@canChangeSampleSource='Y';
   				sample.@canChangeNumberSequencingLanes='Y';
   				sample.@canChangeNumberSequencingLanes='Y'; 
   				sample.@canChangeNumberSequencingCycles='Y';
   				sample.@numberSequencingLanes = '';
   				sample.@concentration = '';
   				sample.@seqPrepDate = '';
   				sample.@seqPrepLibConcentration = '';
   				sample.@seqPrepGelFragmentSizeFrom = '';
   				sample.@seqPrepGelFragmentSizeTo = '';
   				sample.@seqPrepStockLibVol = '';
   				sample.@seqPrepStockEBVol = '';
   				sample.@seqPrepStockEBVol = '';
   				sample.@qualFragmentSizeFrom =""; 
   				sample.@qualFragmentSizeTo="";
   				sample.@seqPrepQualCodeBioanalyzerChipType=""; 
   				sample.@seqPrepStockDate="";
   				
		
   				
   				if (isQCState()) {
   					sample.@idOrganism = '';
   				}
   				
   				if (!isQCState()) {
   					sample.@codeBioanalyzerChipType = '';
   					sample.@codeConcentrationUnit = '';
   				}
   				
   				if (sampleSetupView.currentState == 'SolexaSetupPreppedState') {
   					sample.@isAlreadyPrepped = 'Y';
   				} else  {
   					sample.@isAlreadyPrepped = 'N';
   					sample.@idSeqLibProtocol = '';
   				}
			}
			

			for each(var hyb:Object in hybs) {
				 // If this is a 1 channel kind if request, clear out channel2 of the cloned request
				 if (requestCategory.@numberOfChannels != "2") {
					hyb.@idSampleChannel2 = "0";
				 }
				 hyb.@idArrayCoordinate="" 
				 hyb.@idScanProtocol="";
				 hyb.@extractionDate="";
				 hyb.@extractionFailed=""; 
				 hyb.@extractionBypassed="";
				 hyb.@hybFailed="";
				 hyb.@hybBypassed="";
				 hyb.@idSlide = "";
				 hyb.@idFeatureExtractionProtocol="";
				 hyb.@hybDate; 
				 hyb.@idLabeledSampleChannel1="";
				 hyb.@idLabeledSampleChannel2=""
				 hyb.@slideNumber="";
				 hyb.@slide="";
				 hyb.@hasResults=""; 
				 hyb.@slideBarcode="";
				 hyb.@hybCompleted="N"; 
				 hyb.@extractionCompleted="N";
				 hyb.@arrayCoordinate="";
				 hyb.@idLabelingProtocolChannel1=""; 
				 hyb.@idLabelingProtocolChannel2="";
				 hyb.@idScanProtocolChannel1=""; 
				 hyb.@idScanProtocolChannel2="";
				 hyb.@idHybProtocolChannel1=""; 
				 hyb.@idHybProtocolChannel2="";
				 hyb.@idFeatureExtractionProtocolChannel1=""; 
				 hyb.@idFeatureExtractionProtocolChannel2="";
				 hyb.@labelingYieldChannel1="";
				 hyb.@codeLabelingReactionSizeChannel1="STD"; 
				 hyb.@labelingYieldChannel2=""; 
				 hyb.@numberOfReactionsChannel2="" 
				 hyb.@codeLabelingReactionSizeChannel2="STD"; 
				 hyb.@labelingFailedChannel1="N"; 
				 hyb.@labelingFailedChannel2="N"; 
				 hyb.@labelingCompleteChannel1="N"; 
				 hyb.@labelingCompleteChannel2="N"; 
				 hyb.@labelingStatusChannel1=""; 
				 hyb.@labelingStatusChannel2=""; 
				 hyb.@arrayCoordinateName=""; 
				 hyb.@hybStatus=""; 
				 hyb.@extractionStatus="";
			     hyb.@canChangeSampleDesignations='Y';
			     hyb.@canChangeSlideSource='Y';
			     hyb.@canChangeSlideDesign='Y';
			}

			
			
			// Make sure we render the annotation tab because
			// otherwise we won't activate the renderer code that
			// hides/shows the sample annotation columns in the samples
			// grid
			if (theTab.contains(annotationView)) {
				theTab.selectedChild = this.annotationView;
			}
						
			callLater(initializeControls);
			callLater(assignSlideNumbers);
			
			
			callLater(sampleSetupView.checkSampleSetupCompleteness);
			callLater(samplesView.checkSamplesCompleteness);
			callLater(hybSetupView.checkHybSetupCompleteness);
			callLater(hybsView.checkHybsCompleteness);
			
			
		}
			
		private function assignSlideNumbers():void {
			if (parentApplication.submitInternalExperiment()) {
				hybsView.assignSlideNumbers(hybSetupView.slideProductCombo);								
			} else {
				hybsView.assignSlideNumbers(setupView.slideProductCombo);								
			}
		}
		
		public function setupEditForm(theRequest:Object):void {
			request = theRequest;
			setupTheEditForm();
		}

		private function setupTheEditForm():void {
			currentState = '';
			samplesView.currentState = '';
			
			setTabsVisible();
			
			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory',request.@codeRequestCategory);
			requestCategoryName = requestCategory.@display.toString();
			requestIcon = requestCategory.@icon;
			requestType = requestCategory.@type;
			
			this.instantiateTabs(requestCategory.@codeRequestCategory, true, false);

			buttonStack.selectedIndex = 1;
			
			var prevSelectedTab:Container = theTab.selectedChild;			
			
			annotationView.enabled = true;
			samplesView.enabled = request.@canUpdateSamples == "Y";
			notesView.enabled = true;
			notesView.currentState = "EditState";

			parentApplication.isInternalExperimentSubmission = request.@isExternal == "N";

			// Make sure we render the annotation tab because
			// otherwise we won't activate the renderer code that
			// hides/shows the sample annotation columns in the samples
			// grid
			if (theTab.contains(annotationView)) {
				theTab.selectedChild = this.annotationView;
			} 

			var canChangeSlide:Boolean = false;			
			if (parentApplication.hasPermission("canWriteAnyObject")) {
				canChangeSlide = true;		
			} else {
				for each(var hyb:Object in hybs) {
					if (hyb.@canChangeSlideDesign == "Y") {
						canChangeSlide = true;
						break;
					}
				}
			}
			
			if (requestCategory.@isIlluminaType == 'Y') {
				currentState = request.@isExternal == 'Y' ? 'SeqExternalEditState' : 'SolexaEditState';

				this.annotationView.checkSecurity();			
				if (parentApplication.hasPermission("canWriteAnyObject")) { 
					samplesView.currentState = 'SolexaSamplesAdminState';						
				} else {
					samplesView.currentState = 'SolexaSamplesEditState';					
				}
				samplesView.showHideColumns();
				
				// Comment out since seq lib treatments are not in use for now
				//this.seqSetupView.currentState = "EditState";  
				
				if(request.@isExternal != 'Y') {
					if (parentApplication.hasPermission("canWriteAnyObject")) {
						lanesView.currentState = 'LanesAdminState';
					} else if (request.@isExternal == 'Y') {
						lanesView.currentState = 'LanesAdminState';						
					} else {
						lanesView.currentState = '';
					} 					
				}

				this.propertyEntries.refresh();


			} else if (requestCategory.@type == parentApplication.TYPE_QC) {
				currentState = 'QCEditState';
				if (parentApplication.hasPermission("canWriteAnyObject")) {
					samplesView.currentState = 'QCSamplesAdminState';						
				} else {
					samplesView.currentState = 'QCSamplesEditState';					
				}
				samplesView.showHideColumns(); 

			} else if (requestCategory.@type == parentApplication.TYPE_CAP_SEQ) {
				this.currentState = "CapSeqEditState";
				this.sampleSetupView.currentState = 'CapSeqState';
				
				this.samplesView.currentState = 'CapSeqState';				
				this.samplesView.showHideColumns();				
				if (this.samplesView.hasPlates()) {
					this.samplesView.fillPlates();
				}
				
			} else if (requestCategory.@type == parentApplication.TYPE_MIT_SEQ) {
				this.currentState = "MitSeqEditState";
				this.sampleSetupView.currentState = 'MitSeqState';
				
				this.samplesView.currentState = 'MitSeqState';				
				this.samplesView.showHideColumns();				
				
			} else if (requestCategory.@type == parentApplication.TYPE_FRAG_ANAL) {
				this.currentState = "FragAnalEditState";
				this.sampleSetupView.currentState = 'FragAnalState';
				
				this.samplesView.currentState = 'FragAnalState';				
				this.samplesView.showHideColumns();				
				
			} else if (requestCategory.@type == parentApplication.TYPE_CHERRY_PICK) {
				this.currentState = "CherryPickEditState";
				this.sampleSetupView.currentState = 'CherryPickState';
				
				this.samplesView.currentState = 'CherryPickState';				
				var numDestinationWells:int = Number(this.request.@numDestinationWells.toString());
				cherryPlateList = this.request.cherryPlateList.Plate;
				samplesView.prepareCherryPickingSamplesForEdit(numDestinationWells);
				this.samplesView.showHideColumns();	
			} else if (requestCategory.@type == parentApplication.TYPE_ISCAN) {
				this.experimentCategoryName = '';
				this.currentState = "IScanEditState";
			}  else if (requestCategory.@type == parentApplication.TYPE_ISOLATION) {
				this.currentState = "IsolationEditState";
				this.sampleSetupView.currentState = 'IsolationState';
				
			} else if (requestCategory.@type == parentApplication.TYPE_SEQUENOM) {
				this.currentState = "SequenomEditState";
				this.sampleSetupView.currentState = 'SequenomState';
								
			} else if (requestCategory.@type == parentApplication.TYPE_CLINICAL_SEQUENOM) {
				this.currentState = "ClinicalSequenomEditState";
				this.sampleSetupView.currentState = 'ClinicalSequenomState';
				
				this.samplesView.currentState = 'ClinicalSequenomState';
				
			}  else if(requestCategory.@type == parentApplication.TYPE_MICROARRAY) {

				
				currentState = 'MicroarrayEditState';
				if(this.filteredMicroarrayAppList != null) {
					this.filteredMicroarrayAppList.refresh();
				}
				
				this.hybSetupView.currentState = 'EditState';
				this.annotationView.checkSecurity();			
				if (parentApplication.hasPermission("canWriteAnyObject")) {
					samplesView.currentState = 'MicroarraySamplesAdminState';	
					hybsView.currentState = 'HybsAdminState';	
				} else {
					samplesView.currentState = 'MicroarraySamplesEditState';					
					hybsView.currentState = 'HybsEditState';				
				}
				samplesView.showHideColumns();


				hybSetupView.organismCombo.enabled = canChangeSlide;
				hybSetupView.slideProductCombo.enabled = canChangeSlide;
				hybSetupView.isCatalogRadio.enabled = canChangeSlide;
				hybSetupView.isCustomRadio.enabled = canChangeSlide;
				

				hybSetupView.label = "Slide";
				hybSetupView.numberOfHybsContainer.visible = false;
				hybSetupView.slideSourceContainer.visible = false;
				this.propertyEntries.refresh();

			}
			
			if (this.request.analysisExperimentItems.hasOwnProperty("AnalysisExperimentItem") && this.analysisButton!=null) {
				this.analysisButton.enabled = true;
			} else {
				this.analysisButton.enabled = false;
			}
			
			if (theTab.contains(visibilityView)) {
				if (request.@canUpdateVisibility == 'Y') {
					this.visibilityView.currentState = "EditState";	
					this.visibilityView.enabled = true;
				} else {
					this.visibilityView.enabled = false;
				}
			}

			this.getRequestCategoryName();
			this.getBillingAccountName(); 
			this.getExperimentCategoryName();

			if (parentDocument is NavOrderView) {
				this.navBackButton.visible = true;
				this.navBackButton.includeInLayout = true;
				
				
			} else {
				this.linkbutton2.label = "View";
				this.linkbutton2.setStyle('icon',this.viewIcon);
				
				this.navBackButton.visible = false;
				this.navBackButton.includeInLayout = false;
				

			}
			
			notesView.setExternalNoteVisibility();
			samplesView.setExternalNoteVisibility();
			
			// Need to refresh download list here; otherwise last selected experiment's
			// files shown rather than current selection.
			this.refreshDownloadList();				

			this.filteredLabList.refresh();

			this.filteredSampleTypeList.refresh();
			
		    postSetupEditForm();

		}
		
		private function postSetupEditForm():void {
			// Only show billing tab if it is is not an external experiment
			if (this.request.@isExternal == 'Y') {
				if (theTab.contains(this.billingTab)) {
					theTab.removeChild(billingTab);
				}
			} else {
				if (!theTab.contains(this.billingTab)) {
					theTab.addChild(billingTab);
				}
			}
			
			initializeControls();
			
			if (this.isMicroarrayState() && this.request.@isExternal != 'Y') {
				assignSlideNumbers();	
			}
			samplesView.checkSamplesCompleteness();
			if (this.isMicroarrayState() && this.request.@isExternal != 'Y') {
				hybSetupView.checkHybSetupCompleteness();
				hybsView.checkHybsCompleteness();
			}

			this.restoreTabIndex();
			
			this.dirty.resetDirty();
		}
		
		public function removeDataListeners():void {
			hybs.removeEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingHybDataChange);
			samples.removeEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
			lanes.removeEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingLaneDataChange);			
			
		}
		
		public function setupDataListeners():void {
			hybs.addEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingHybDataChange);
			samples.addEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
			lanes.addEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingLaneDataChange);			
			
		}
		
		private function addDescriptionFieldToAnnotations(sc:XMLList):void {
			var scXML:XML = sc[0];
			var descNode:XML = <PropertyEntry idProperty="-1" name="Description" otherLabel="" isSelected="false" isActive="Y"/>;		
			scXML.appendChild(descNode);
			this.propertyEntries.refresh();
		}
		
		private function onGetNewRequest(event:ResultEvent):void {
			existingLanes = null;
			if(!parentApplication.isInternalExperimentSubmission) {
				addDescriptionFieldToAnnotations(getNewRequest.lastResult..Request.(@idRequest = '0').PropertyEntries);			
			}			
			request = getNewRequest.lastResult..Request.(@idRequest = '0');
			request.@idSubmitter = setupView.idAppUser;
			request.@idAppUser = setupView.idAppUser;
			
			if (theTab.contains(this.annotationView)) {
				this.propertyEntries.refresh();
				this.annotationView.checkSecurity();
			} 
			
			initializeSubmitForm();		

			if (theRequestNumber != null) {
				parentApplication.showExperiment(theRequestNumber, showPromptToUpload);
				theRequestNumber = null;
				showPromptToUpload = false;
			}
		}
			
		private function refreshLab():void {
			if (requestEditLabCombo.selectedItem != null && requestEditLabCombo.selectedItem.@idLab != '') {

				var params:Object = new Object();
				params.idLab = requestEditLabCombo.selectedItem.@idLab;
				getLab.send(params);
			}
		}
		
		// We have to make sure that the slide product list and slide design list
		// is initialized for the edit form before we can initialize its controls.
		// This is now necessary because the getting of the slide product and slide
		// design list was taken out of the gnomex app launch and deferred to the
		// show() of ExperimentEditForm.
		private function initializeControls():void {
			if (isMicroarrayState() && this.isEditState()) {
				if (this.getSlideProductList.lastResult != null && filteredSlideProductList != null) {
					// If we already have the slide product and slide design list, initialize controls
					initializeControlsImpl();
				} else {
					
					if (this.getSlideProductList.lastResult == null || filteredSlideProductList == null) {
						// We don't have the slide design list so run the query.
						// The result handler will detect if it is time to call
						// initializeControlsImpl.
						getSlideProductList.send();
					} else {
						// We do have the slide product list so  refresh it. 
						this.checkToInitializeEditControls();
					}
					
					if (this.getSlideDesignList.lastResult == null) {
						// We don't have the slide design list so run the query.
						// The result handler will detect if it is time to call
						// initializeControlsImpl.
						getSlideDesignList.send();
					}
				} 
			} else {
				initializeControlsImpl();
			}
		}

		private function initializeControlsImpl():void {
			
			if (isEditState()) {
				labList = new XMLListCollection();
				var selectedItem:Object = null;
				for each(var l:Object in parentApplication.promptedSubmitRequestLabList) {
					labList.addItem(l);
					if (l.@idLab == request.@idLab) {
						selectedItem = l;
						refreshLab();
					}
				}
				if (selectedItem != null) {
					requestEditLabCombo.enabled = true;
					requestEditLabCombo.selectedItem = selectedItem;
				} else {
					requestEditLabCombo.enabled = false;
					for each(var l1:Object in parentApplication.labList) {
						if (l1.@idLab == request.@idLab) {
							labList.addItem(l1);
							break;
						}
					}
					requestEditLabCombo.selectedIndex = 1;
				}
				refreshLab();
				if (isCapSeqState()) {
					for each(var d:Object in this.filteredSampleDropOffLocationList) {
						if (d.@value == request.@idSampleDropOffLocation) {
							this.sampleDropOffLocationCombo.selectedItem = d;
							break;
						}
					}
				}
			}

			if (theTab.contains(sampleSetupView)) {
				sampleSetupView.numberOfSamples.text = new String(request.samples.Sample.length());
				sampleSetupView.sampleTypeRadioGroup.selectedValue = request.@idSampleTypeDefault;
				
				if (currentState == 'QCState') {
					for each(var chipType:Object in sampleSetupView.bioanalyzerChipTypeGrid.dataProvider) {
						if (chipType.@codeBioanalyzerChipType == request.@codeBioanalyzerChipType) {
							chipType.@isSelected = 'true';
							break;
						}
					}
				}
				
				
				if (this.isIScanState() ) {
					
					this.sampleSetupView.currentState = 'IScanState';
					this.samplesView.currentState = 'IScanState';
					this.sampleSetupView.updateIScanPlateList(this.request.iScanPlateList.Plate);
					this.theTab.getTabAt( theTab.getChildIndex( annotationView ) ).visible = false;
					this.theTab.getTabAt( theTab.getChildIndex( annotationView ) ).includeInLayout = false;
					
					
					for each(var chip:Object in sampleSetupView.iScanChipRepeater.dataProvider) {
						if (chip.@idIScanChip == request.@idIScanChip) {
							sampleSetupView.iScanChipRadioGroup.selectedValue = chip;
							break;
						}
					}
					if ( sampleSetupView.iScanChipRadioGroup.selectedValue != null ) {
						if (sampleSetupView.iScanChipRadioGroup.selectedValue.@idIScanChip != null && sampleSetupView.iScanChipRadioGroup.selectedValue.@idIScanChip != '') {
							if ( sampleSetupView.iScanChipBox != null ) {
								sampleSetupView.iScanChipBox.styleName = "normalBox";
							}
						}
					}
					if ( sampleSetupView.numberIScanSamples != null ){
						for each (var item:XML in sampleSetupView.numberIScanSamples.dataProvider ) {
							if ( item.@numberOfChips == request.@numberIScanChips ) {
								sampleSetupView.numberIScanSamples.selectedItem = item;
							}
						}
					}
					sampleSetupView.numberOfSamples.text = new String(request.samples.Sample.(@name!='').length());
					this.propertyEntries.refresh();
					this.annotationView.checkSecurity();
					this.samplesView.showHideColumns();		
					this.samplesView.initializeSamplesGrid(); 
				}
				
			}

			if ( this.theTab.contains(samplesView) && this.isSequencingState() ) {
				samplesView.setShowCCNumber(false);
			}
			if (this.isSequenomState() || this.isClinicalSequenomState() ) {
				
				if ( this.request.@containerType == "PLATE"){
					this.sampleSetupView.updateIScanPlateList(this.request.iScanPlateList.Plate);
				}
				this.theTab.getTabAt( theTab.getChildIndex( annotationView ) ).visible = false;
				this.theTab.getTabAt( theTab.getChildIndex( annotationView ) ).includeInLayout = false;
				
				
				for each(var app:Object in sampleSetupView.seqAppRepeater.dataProvider) {
					if (app.@value == request.@codeApplication) {
						sampleSetupView.radioGroupSeqApp.selectedValue = app;
						break;
					}
				}
				this.sampleSetupView.coreToExtractDNACheckBox.selected = request.@coreToExtractDNA == 'Y' ? true : false;
				this.sampleSetupView.bisulfideConversionCheckBox.selected = request.@includeBisulfideConversion == 'Y' ? true : false;
				if (this.isSequenomState() ){
					this.sampleSetupView.sequenomApplicationDesc.text = request.@applicationNotes;
				} 

				sampleSetupView.numberOfSamples.text = new String(request.samples.Sample.(@name!='').length());
				this.propertyEntries.refresh();
				this.annotationView.checkSecurity();
				this.samplesView.showHideColumns();		
				this.samplesView.initializeSamplesGrid(); 
			}
			
			if (this.isIsolationState() ) {
				
				this.theTab.getTabAt( theTab.getChildIndex( annotationView ) ).visible = false;
				this.theTab.getTabAt( theTab.getChildIndex( annotationView ) ).includeInLayout = false;
				
			}
			
			if (isMicroarrayState() || this.isSolexaState()) {
				if (theTab.contains(sampleSetupView)) {
					if (request.@idOrganismSampleDefault != '') {
						sampleSetupView.sampleOrganismCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.OrganismLite', request.@idOrganismSampleDefault);											
					}
				}
			}
			
			if (isMicroarrayState()) {
				selectedIdSlideProduct = request.@idSlideProduct;
				hybSetupView.numberOfHybs.text = new String(request.hybridizations.Hybridization.length());
				var theSlideProduct:Object = this.getSlideProductList.lastResult.SlideProduct.(@idSlideProduct == request.@idSlideProduct);
				// Organism combo not set up yet so can't initialize the Combo.  Done in init on TabHybSetupview
				hybSetupView.organismCombo.selectedIndex = -1;
				
				var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', request.@codeApplication);
				if(hybSetupView.microarrayAppRadioGroup.numRadioButtons > 0) {
					hybSetupView.microarrayAppRadioGroup.selectedValue = application[0].@value;					
				} else {
					lastSelectedApplication = application[0].@value;
				}
				
				hybSetupView.initializeSlideProductCombo();
				hybSetupView.slideProductValidator.validate();
				
				// TODO:  Is this okay to remove????  Don't know which slide product combo
				// we are using since it could be from external (setup view) or internal
				// (hyb setup view) experiment submissions.
				// Leave out for now assuming that slide product combo change event
				// takes care of necessary initialization.
				//initializeSlideDesigns();

				hybSetupView.selectDefaultSlideSource();
				
			}			
			if (isEditState() && theTab.contains(visibilityView)) {
				visibilityView.init(); // Set institution combo, etc.
				if (request.@canUpdateVisibility != 'Y') {
					this.visibilityView.enabled = false;
				} else {
					this.visibilityView.enabled = true;
				}
			}
			
			
			if (this.isAmendState() && theTab.contains(amendSetupView)) {
				theTab.selectedChild = this.amendSetupView;
			} else if (theTab.contains(setupView)) {
				theTab.selectedChild = this.setupView;			
			} else {
				theTab.selectedChild = this.samplesView;
				samplesView.initializeBarcoding();	

			}
			
		}
		
		
		public function initializeSlideDesigns(slideProductCombo:mx.controls.ComboBox):void {
			var slideDesign:Object = hybsView.getDefaultSlideDesign(slideProductCombo);								
			if (slideDesign != null) {
				for each (var hyb:Object in hybs) {
					hyb.@idSlideDesign = slideDesign.@idSlideDesign;
				}
			}
		}
		

		
		
		
		public function sortProperties(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var sc1:String = obj1.@name;
				var sc2:String = obj2.@name;
				
				if (sc1 == 'Other') {
					return 1;
				} else if (sc2 == 'Other') {
					return  -1;
				} else {
					if (sc1.toLowerCase() < sc2.toLowerCase()) {
						return -1;
					} else if (sc1.toLowerCase() > sc2.toLowerCase()) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}	

		private function validateRequest():void {
			errorMessage = '';
			warningMessage = '';
			
			if (request.@onReactionPlate == 'Y') {
				warningMessage = "Samples from this order are already on a reaction plate.\n\n";
			}
			
			// Validate institution
			if (this.theTab.contains(visibilityView) && visibilityView != null && visibilityView.enabled) {
				if (visibilityView.visibilityRadioGroup.selectedValue != null && visibilityView.visibilityRadioGroup.selectedValue != '') {
					
					if (visibilityView.visibilityRadioGroup.selectedValue == 'INST') {
						if (visibilityView.institutionCombo.selectedItem == null || !visibilityView.institutionCombo.selectedItem.hasOwnProperty("@idInstitution") 
							|| visibilityView.institutionCombo.selectedItem.@idInstitution == '') {
							errorMessage += "You must select an Institution for institution visibility.  Please select an institution or change to a different visiblity level.\n\n";
						}					
					}
				} 
			}
			
			if (isCapSeqState()) {
				if (samples.length < 32 && this.request.@containerType == 'PLATE') {
					errorMessage += "You may not have less than 32 samples in a Plate container.\n\n";
				}
				if (this.request.@containerType == 'PLATE') {
					var addedPlateNumberSamplesError:Boolean = false;
					var addedControlSampleWarning:Boolean = false;
					for(var idx:int = 0; idx < 4; idx++) {
						var lastSample:int = ((idx + 1) * 96) - 1;
						var firstSample:int = idx * 96;

						var controlSample:Object = null;
						if (samples.length > lastSample) {
							controlSample = samples.getItemAt(lastSample);
						}
						if (!addedControlSampleWarning && controlSample != null && controlSample.hasOwnProperty("@name") && controlSample.@name != null && controlSample.@name != "") {
							warningMessage += "If you replace the control and the run fails, the results cannot be verified and we will not repeat the run.\n\n";
							addedControlSampleWarning = true;
						}

						var numSamplesOnPlate:int = 0;
						if (samples.length > firstSample) {
							for (var idx2:int = firstSample; idx2 <= lastSample && idx2 < samples.length; idx2++) {
								var sampleToCount:Object = samples.getItemAt(idx2);
								if (sampleToCount.hasOwnProperty("@name") && sampleToCount.@name != null && sampleToCount.@name != "") {
									numSamplesOnPlate = numSamplesOnPlate + 1;
								}
							}
						}
						if (idx > 0 && numSamplesOnPlate > 0 && this.numCapSeqPlates == 1) {
							errorMessage += "You specified only 1 plate but have entered samples for > 1 plate.  Please try again.\n\n";
							break;
						}
						if (idx > 0 && numSamplesOnPlate == 0 && this.numCapSeqPlates == 1) {
							break;
						}
						if (numSamplesOnPlate < 32 && !addedPlateNumberSamplesError && (this.numCapSeqPlates == 1 || idx == 3)) {
							errorMessage += "You may not have less than 32 samples on a Plate.\n\n";
							addedPlateNumberSamplesError = true;
						}
						if (numSamplesOnPlate < 80 && !addedPlateNumberSamplesError && this.numCapSeqPlates == 4) {
							if (idx < 3) {
								errorMessage += "When submitting 4 plates you may not have < 80 samples on any plate other than the last plate\n\n";
								addedPlateNumberSamplesError = true;
							}
						}
					}
				}
			}				
			// Make sure lab and billing account filled in
			if (isEditState()) {
				if (requestEditLabCombo.selectedItem == null || requestEditLabCombo.selectedItem.@idLab == '') {
					errorMessage += "Lab must be specified.\n\n";
				} 
				// Make sure the billing account is filled in on requests that already had an assigned billing account.
				if (request.hasOwnProperty('@idBillingAccount') && request.@idBillingAccount != '' && (requestEditBillingAccountCombo.selectedItem == null || requestEditBillingAccountCombo.selectedItem.@idBillingAccount == '')) {
					errorMessage += "Billing account must be specified.\n\n";
				}
				if (requestEditProjectCombo.selectedItem == null || requestEditProjectCombo.selectedItem.@idProject == '') {
					errorMessage += "Project must be specified.\n\n";
				}
				if (ownerCombo.selectedItem == null || ownerCombo.selectedItem.@idAppUser == '') {
					errorMessage += "Owner must be specified.\n\n";
				} 
				if (this.isSolexaEditState()) {
					if (this.requestApplicationComboBox.selectedItem == null || this.requestApplicationComboBox.selectedItem.@value == '') {
						errorMessage += "Application must be specified.\n\n";
					}
				}

			}
			
			if(currentState == 'SolexaEditState'){		
				for each (var samp1:Object in samples){
					if(samp1.@multiplexGroupNumber == null || samp1.@multiplexGroupNumber == '' || !samp1.hasOwnProperty("@multiplexGroupNumber")){
						errorMessage += "Please fill in missing multiplex group numbers.\n\n";
						break;
					}
				}
			}
			
			// Check for duplicate sampleNames / wells
			var sampleNames:Dictionary = new Dictionary();
			var sourceWells:Dictionary = new Dictionary();
			var destinationWells:Dictionary = new Dictionary();
			var capSeqFoundDeleted:Boolean = false;
			var sparsePlate:Boolean = false;
			var prevSample:Object = null;
			for each(var s:Object in samples) {
				var sampleCount:int = 0;
				var sourceWellCount:int = 0;
				for each(var s1:Object in samples) {
					// duplicate names ok for dna seq requests
					if (s.@name == s1.@name && !this.isSequencingState()) {
						sampleCount++;
					}
					if (this.isCherryPickState()) {
						if (s.@sourceWell == s1.@sourceWell && s.@sourcePlate == s1.@sourcePlate) {
							sourceWellCount++;
						}
					}
				}
				sampleNames[s.@name.toString()] = sampleCount;
				sourceWells[s.@sourceWell.toString()] = sourceWellCount;
				// check for sparse plates -- not allowed.
				if (isCapSeqState() && this.request.@containerType == "PLATE") {
					if (prevSample == null || prevSample.@plateName != s.@plateName) {
						capSeqFoundDeleted = false;
					}
					if (s.@name != '' && capSeqFoundDeleted) {
						sparsePlate = true;
					}
					if (s.@name == '') {
						capSeqFoundDeleted = true;
					}
				}
				prevSample = s;
			}
			var dupSampleNames:String = '';
			for (var key:Object in sampleNames) {
				if (sampleNames[key] > 1) {
					if (dupSampleNames != '') {
						dupSampleNames += ',';
					}
					dupSampleNames += key;
				}
			}
			if (dupSampleNames != '') {
				errorMessage += 'Some of the samples (' + dupSampleNames + ') are named the same.  ';
				if (!isEditState()) {
					errorMessage += 'Please provide unique sample names.';
				}
				errorMessage += '\n\n';					
			}
			var dupSourceWells:String = '';
			for (var keysw:Object in sourceWells) {
				if (sourceWells[keysw] > 1) {
					if (dupSourceWells != '') {
						dupSourceWells += ',';
					}
					dupSourceWells += keysw;
				}
			}
			if (dupSourceWells != '') {
				warningMessage += 'Some of the source wells (' + dupSourceWells + ') are the same.  ';
				if (!isEditState()) {
					warningMessage += 'Please provide unique source wells.';
				}
				warningMessage += '\n\n';					
			}

			if (sparsePlate) {
				errorMessage += "Empty wells can only exist at the end of the plate.\n\n";
			}
			
			// If this is a new request or the request is being changed on
			// the edit screen, warn if all samples are not used on at least 
			// one hyb or seq lane
			if (!isAmendState()) {
				var allSamplesUsed:Boolean = true;
				var unusedSampleList:String = '';
				var unusedSampleCount:int = 0;
				var target:String = "";
				if (!isQCState() && !isSequencingState() && !isSequenomState() && !isClinicalSequenomState() && !isIsolationState()) {
					for each(var sample:Object in samples) {
						var useCount:int = 0;
						if (isSolexaState()) {
							useCount = getLaneCount(sample);
							target = "sequence lane";
						} else if (isMicroarrayState()) {
							useCount = getChannelCount(sample);
							target = "hybridization";
						}
						
						if (useCount == 0) {
							allSamplesUsed = false;
							if (unusedSampleList != '') {
								unusedSampleList += ', ';							
							}
							unusedSampleList += sample.@name;
							unusedSampleCount++;
							
						}
					}
					if (unusedSampleCount > 0) {
						if (unusedSampleCount == 1) {
							warningMessage += 'The sample ' + unusedSampleList + 
							' is not used on any ' + target + 's.  ';
							warningMessage += '\n\n';					
						} else {
							warningMessage += 'The samples  (' + unusedSampleList + 
							')  are not used on any ' + target + 's.  ';
							warningMessage += '\n\n';					
						}
					}
				}	
				
			}
			
			// Warn if some of the arrays (on a multi-array slide) are not used.	
			if (isMicroarrayState() && parentApplication.submitInternalExperiment()) {
				if (hybSetupView.slideProductCombo.selectedItem == null) {
					warningMessage += "No slide selected.\n";
				} else if (hybSetupView.slideProductCombo.selectedItem.@arraysPerSlide != '' && hybSetupView.slideProductCombo.selectedItem.@arraysPerSlide != 1) {
					if (hybs.length % hybSetupView.slideProductCombo.selectedItem.@arraysPerSlide != 0) {
						warningMessage = "There are unused arrays on the multi-array slide  '" + hybSetupView.slideProductCombo.selectedItem.@name +
						 "'.\n ";
					}
				}
				
			}
			
			// Warn if A and B index tags are identical
			var barcodeField:String = "";
			var barcodeFieldB:String = "";
			if (showSampleCustomBarcodes()) {
				barcodeField = "@barcodeSequence";
				barcodeFieldB = "@barcodeSequenceB";
			} else if (showSampleBarcodes()) {
				barcodeField = "@idOligoBarcode";
				barcodeFieldB = "@idOligoBarcodeB";
			}
			
			if(barcodeField != "" && barcodeFieldB != ""){
				for each(var samp:Object in this.samples) {
					if(samp[barcodeField] != "" && samp[barcodeFieldB] != ""){
						if(samp[barcodeField] == samp[barcodeFieldB]){
							warningMessage += "Some samples are using the same index tag for both index tag A and index tag B.";
							break;
						}
					}
				}
			}
		}
		
		private function getChannelCount(sample:Object):int {
			var count:int = 0;
        	if (hybs!= null) {
        		for each(var hyb:Object in hybs) {
        			if (hyb.@idSampleChannel1 == sample.@idSample ||
        			    hyb.@idSampleChannel2 == sample.@idSample) {
        				count++;
        			}
        		}
        	} 								
        	return count;
		}
		public function getLaneCount(sample:Object):int {
			var count:int = 0;
        	if (lanes!= null) {
        		for each(var sequenceLane:Object in lanes) {
        			if (sequenceLane.@idSample == sample.@idSample) {
        				count++;
        			}
        		}
        	} 								
        	return count;
		}
		public function getLanes(sample:Object, numberOfLanes:int):ArrayCollection {
			var theLanes:ArrayCollection = new ArrayCollection();
        	if (theLanes!= null) {
        		for each(var sequenceLane:Object in lanes) {
        			if (sequenceLane.@idSample == sample.@idSample) {
        				theLanes.addItem(sequenceLane);
        				if (numberOfLanes != -1 && theLanes.length == numberOfLanes) {
        					break;
        				}
        			}
        		}
        	} 								
        	return theLanes;
		}
		
		private function validateAndSubmitRequest():void {
			this.submitButton.enabled = false;
			
			// Only submit request if it is valid
			validateRequest();
			if (errorMessage != '') {
				this.submitButton.enabled = true;
				Alert.show(errorMessage, "Error", Alert.OK, null, null, parentApplication.iconError);
				return;
			}
			if (warningMessage != '') {
				promptToSubmitRequest();
				return;
			}
			submitRequest();
		}
		
		private function validateAndSaveRequest():void {
			this.submitButton.enabled = false;
			validateRequest();
			
			if (errorMessage != '') {
				this.submitButton.enabled = true;
				Alert.show(errorMessage);
				return; 
			} else if (warningMessage != '') {
				promptToSaveRequest();
				return;

			} else {
				saveRequest();				
			}
		}

		
		
		
		private function submitRequest():void { 
		 	
			initializeRequestXML();

			var params:Object = new Object();
			params.requestXMLString = request.toXMLString();
			params.description = saveDescription;	// Description sent separately to avoid XML encoding problems
			
			if (!isAmendState()) {
				params.idProject = setupView.projectCombo.selectedItem.@idProject;				
			}
			
			// Chosen Assays
			if (isFragAnalState()) {
				params.assaysXMLString = this.selectedAssaysCollection;
			}
			
			// Chosen Assays
			if (isMitSeqState()) {
				var primers:XMLListCollection = new XMLListCollection();
				addPrimer(primers, "1", sampleSetupView.primer1Combo.selectedItem);
				addPrimer(primers, "2", sampleSetupView.primer2Combo.selectedItem);
				addPrimer(primers, "3", sampleSetupView.primer3Combo.selectedItem);
				addPrimer(primers, "4", sampleSetupView.primer4Combo.selectedItem);
				addPrimer(primers, "5", sampleSetupView.primer5Combo.selectedItem);
				addPrimer(primers, "6", sampleSetupView.primer6Combo.selectedItem);
				
				params.primersXMLString = primers.toXMLString();
			}

			var exceeds500:Boolean = false;
			
			if(agreeCheckbox.visible) {
				
				try {
					var invoicePrice:String = createBillingItems.lastResult.Request.@invoicePrice;
					invoicePrice = invoicePrice.replace("$", "");
					invoicePrice = invoicePrice.replace(",", "");
					var myFloat:Number = parseFloat(invoicePrice);
					if(myFloat > 500.0) {
						exceeds500 = true;
					}
					
				}
				catch (err:Error) {
					// Just ignore the check if there is a conversion error
					exceeds500 = false;
				}				

			}
			
			if(exceeds500) {
				params.invoicePrice = createBillingItems.lastResult.Request.@invoicePrice;
			}		
			
			saveNewRequest.send(params);			
			
		}
			
		private function addPrimer(primers:XMLListCollection, number:String, item:Object):void {
			if (item != null) {
				var primerXML:XML = new XML("<Primer number='" + number + "' name='" + item.@display + "' id='" + item.@value + "'/>");
				primers.addItem(primerXML);
			}
		}

		public function getAssayDataField(x:int):String {
			var fld:String = "@hasAssay";
			var assay:Object = assayCollection.getItemAt(x);
			fld += assay.@display;
			return fld;
		}
			
		public function getMultiplexLanes():void {
			if(this.isSolexaState() && parentApplication.isInternalExperimentSubmission) { 
				this.bioinformaticsView.propagateGenomeBuild();
				initializeRequestXML();
				var params:Object = new Object();
				params.requestXMLString = request.toXMLString();
				getMultiplexLaneList.send(params);
			}
		}
		private function onGetMultiplexLaneList(event:ResultEvent):void {
			var readyToSubmit:Boolean = true;
			if (getMultiplexLaneList.lastResult.name() != "MultiplexLaneList") { 
				Alert.show(getMultiplexLaneList.lastResult..ACTMESSAGE.@TEXT, "Unable to get multiplex lane info");
				readyToSubmit = false;
			}
			
			if (request.@isExternal == 'Y') {
				this.submitButton.enabled = readyToSubmit;
			} else {
				agreeCheckbox.visible = readyToSubmit;				
			}
		}

		
		public function getEstimatedBilling():void {
			initializeRequestXML();
			agreeCheckbox.visible = false;
			agreeCheckbox.label = "";
			agreeCheckbox.selected = false;
			submitButton.enabled = false;
			
			if (request.@isExternal == 'Y') {
				// This is an external experiment submission.  Don't
				// attempt to get estimated charges.
				submitButton.enabled = true;
				if (theTab.contains(this.confirmView)) {
					this.confirmView.currentState = "ExternalExperimentState";
				}
			} else {
				
				var accountName:String = isAmendState() ? request.@accountNumberDisplay : setupView.billingAccountCombo.selectedItem.@accountNumberDisplay;
				
				agreeCheckbox.label = "I authorize all charges to be billed to account: " + accountName;

				// This is a new experiment request. Get the estimated
				// charnges for this request.
				var params:Object = new Object();
				params.requestXMLString = request.toXMLString();
				createBillingItems.send(params);
			}
			
		}
		
		private function onCreateBillingItems(event:ResultEvent):void {
			var readyToSubmit:Boolean = true;
			if (createBillingItems.lastResult.name() == "NewBilling") { 
				if (theTab.contains(this.confirmView)) {
					var billingItems:XMLList = createBillingItems.lastResult..BillingItem;
					
					if (isSequencingState() && !isIScanState()) { 
						this.confirmView.currentState = "DNASeqCoreState";
					} else {
						this.confirmView.currentState = "";
					}
					
					this.confirmView.setBillingGridRowCount(billingItems.length());
				} else {
					readyToSubmit = false;
				}
			} else {
				Alert.show(createBillingItems.lastResult..ACTMESSAGE.@TEXT, "Unable to get estimated billing items");
				readyToSubmit = false;
			}
			//this.submitButton.enabled = readyToSubmit;
			agreeCheckbox.visible = readyToSubmit;
		}
		
		public function isExternalExperimentSubmission():Boolean {
			if (!this.isEditState() && !this.isAmendState()) {
				if (this.setupView.currentState == "ExternalExperimentState" ||
					this.setupView.currentState == "ExternalMicroarrayState" ||
					this.setupView.currentState == "AdminExternalExperimentState" ||
					this.setupView.currentState == "AdminExternalMicroarrayState") {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}			
		}
		
		private function getIdAppUserSubmitter():Object {
			var idAppUserSubmitter:Object = null;
			if ((this.currentState == "MicroarrayAmendState" || currentState == "SolexaBaseAmendState") && (!parentApplication.isAdminState)) {
				// If a non-admin user is converting a QC request
				// to a microarray or sequencing request, make the user the 
				//  submitter of
				// the request, as he/she may be amending a request
				// originally submitted by someone else.
				idAppUserSubmitter = parentApplication.getIdAppUser();				
			} else if (!this.isAmendState()) {
				idAppUserSubmitter = this.setupView.idAppUser;
			} else {
				idAppUserSubmitter = request.@idSubmitter;
			}
			return idAppUserSubmitter;
		}
		
		public function getSubmitterName():String {
			if ((this.currentState == "MicroarrayAmendState" || currentState == "SolexaBaseAmendState") && (!parentApplication.isAdminState)) {
				// If a non-admin user is converting a QC request
				// to a microarray or sequencing request, make the user the 
				//  submitter of
				// the request, as he/she may be amending a request
				// originally submitted by someone else.
				return parentApplication.getAppUserName();
			} else if (!isAmendState()) {
				return setupView.getAppUserName();
			} else {
				return request.@submitterName.toString();
			} 
		}
			
		private function getIdAppUserOwner():Object {
			var idAppUserOwner:Object = null;
			if ((this.currentState == "MicroarrayAmendState" || currentState == "SolexaBaseAmendState") && (!parentApplication.isAdminState)) {
				// If a non-admin user is converting a QC request
				// to a microarray or sequencing request, make the user the 
				//  submitter of
				// the request, as he/she may be amending a request
				// originally submitted by someone else.
				idAppUserOwner = parentApplication.getIdAppUser();				
			} else if (!this.isAmendState()) {
				idAppUserOwner = this.setupView.idAppUser;
			} else {
				idAppUserOwner = request.@idAppUser;
			}
			return idAppUserOwner;
		}

		
		private function initializeRequestXML():void {			
			// Determine if this is an external experiment submission
			request.@isExternal = isExternalExperimentSubmission() ? "Y" : "N";
			
			request.@codeRequestCategory = getRequestCategory().@codeRequestCategory.toString();
			request.@idCoreFacility = getRequestCategory().@idCoreFacility;
			
			if (!this.isEditState()) {
				request.@idSubmitter = this.getIdAppUserSubmitter();
				request.@idAppUser = this.getIdAppUserOwner();
			}
			

			
			if (!this.isAmendState()) {

				// If we are submitting a new request, grab the lab, billing, project
				// from the setup tab
				request.@idLab = setupView.labCombo.selectedItem.@idLab;
				if (request.@isExternal == 'N') {
					request.@idBillingAccount = setupView.billingAccountCombo.selectedItem.@idBillingAccount;
				}
				request.@idProject = setupView.projectCombo.selectedItem.@idProject;
				if (currentState == 'QCState' && this.sampleSetupView.currentState == 'QCSetupBioanalyzerState') {
					request.@codeBioanalyzerChipType = sampleSetupView.getSelectedCodeBioanalyzerChipType();
				}
			}
			
			if (theTab.contains(sampleSetupView)) {
				if (sampleSetupView.contains(sampleSetupView.sampleTypeHBox) && sampleSetupView.sampleTypeRadioGroup.selectedValue != null) {
					request.@idSampleTypeDefault = sampleSetupView.sampleTypeRadioGroup.selectedValue;
				}
				
				if (this.isCapSeqState()) {
					request.@idSampleDropOffLocation = parentApplication.submitInternalExperiment() ? sampleSetupView.sampleDropOffLocationCombo.selectedItem.@value : '';
				}
				if (this.isFragAnalState() || this.isMitSeqState() || this.isCherryPickState() ) {
					for each(var doff:Object in this.filterSampleDropOffLocation) {
						if (doff.@display == 'Core Lab') {
							request.@idSampleDropOffLocation = doff.@value;
						}
					}	
				}
				if (this.isSequenomState()) {
					request.@applicationNotes = sampleSetupView.sequenomApplicationDesc.text;
					request.@codeApplication = sampleSetupView.radioGroupSeqApp.selectedValue;
					request.@coreToExtractDNA = sampleSetupView.coreToExtractDNACheckBox.selected ? 'Y' : 'N';
					request.@includeBisulfideConversion = this.sampleSetupView.bisulfideConversionCheckBox.selected ? 'Y' : 'N';
				}
				if (this.isClinicalSequenomState()) {
					request.@applicationNotes = '';
					request.@codeApplication = filteredAppList[0].@value;
					request.@coreToExtractDNA = sampleSetupView.coreToExtractDNACheckBox.selected ? 'Y' : 'N';
				}
				if (currentState != 'QCState' && !isSequencingState() && !isSequenomState() && !isClinicalSequenomState() && currentState != 'SolexaLaneAmendState' && !isIsolationState()) {
					request.@idOrganismSampleDefault = sampleSetupView.sampleOrganismCombo.selectedItem.@value;
				}						
			}
			

			if (currentState == 'MicroarrayState' || currentState == 'MicroarrayExternalState' || currentState == 'MicroarrayAmendState') {
				if (parentApplication.submitInternalExperiment()) {
					request.@idSlideProduct = hybSetupView.slideProductCombo.selectedItem.@idSlideProduct;
					request.@codeApplication = hybSetupView.microarrayAppRadioGroup.selectedValue;							
				} else {
					request.@idSlideProduct = setupView.getSlideProductCombo().selectedItem.@idSlideProduct;
					request.@codeApplication = setupView.getApp();				
				}
			} else if (this.isSolexaState()) {
				if (parentApplication.submitInternalExperiment()) {
					if (this.currentState == "SolexaLaneAmendState") {
						// if we are adding lanes, just keep the same codeApplication on the request						
					} else {
						request.@codeApplication = seqSetupView.radioGroupSeqApp.selectedValue;				
					}
				} else {
					request.@codeApplication = setupView.getApp();								
				}
			} else if (this.isQCState()) {
				if (parentApplication.submitInternalExperiment()) {
					request.@codeApplication = sampleSetupView.radioGroupQCApp.selectedValue;					
				} else {
					request.@codeApplication = setupView.getApp();						
				}
			}
			if (this.isIScanState()) {
				request.@codeApplication = "";	
				request.@codeBioanalyzerChipType = "";
			}
			
			
			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', request.@codeRequestCategory);
			
			request.replace("samples", <samples></samples>); 
			for each(var sample:Object in samples) {
				if ( (this.isSequencingState() || this.isSequenomState()) && (!sample.hasOwnProperty("@name") || sample.@name == null || sample.@name == '')) {
					continue;
				}
				request.samples.appendChild(sample);
			}
			request.replace("hybridizations", <hybridizations></hybridizations>); 
			if (currentState == 'MicroarrayState' || currentState == 'MicroarrayExternalState' || currentState == 'MicroarrayAmendState') {
				for each(var hyb:Object in hybs) {
					if (requestCategory.@numberOfChannels != "2") {
						hyb.@idSampleChannel2 = "0";
					}
					request.hybridizations.appendChild(hyb);
				 }
			} else {
				request.@idSlideProduct = '';
			}



			// Add back the existing lanes if we are adding lanes
			// to an existing experiment request
			request.replace("sequenceLanes", <sequenceLanes></sequenceLanes>); 
			if (this.currentState == "SolexaLaneAmendState") {
				// If for some reason, we don't have any existing lanes/
				// there is a problem with the state of the data.  Just
				// bail because we don't want the back-end command
				// to delete the existing lanes.
				if (existingLanes == null || existingLanes.length == 0) {
					Alert.show("Inconsistent state.  No existing lanes present on experiment.  Aborting submit.");
					return;
				}
				for each(var l:Object in existingLanes) { 
					request.sequenceLanes.appendChild(l);
				}
			}
			if (isSolexaState()) {
				for each(var lane:Object in lanes) {
					request.sequenceLanes.appendChild(lane);
				}
			}			
			request.replace("SeqLibTreatmentEntries", <SeqLibTreatmentEntries></SeqLibTreatmentEntries>); 
			if (isSolexaState()) {
				for each(var seqLibTreatment:Object in this.seqSetupView.seqLibTreatments) {
					if (seqLibTreatment.@isSelected == "true") {
						request.SeqLibTreatmentEntries.appendChild(seqLibTreatment);
					}
				}
			}			
			
			// Visibility
			if (theTab.contains(this.visibilityView)) {
				request.@codeVisibility = visibilityView.visibilityRadioGroup.selectedValue;
				if (this.request.@codeVisibility != null && this.request.@codeVisibility == 'INST') {
					request.@idInstitution = visibilityView.institutionCombo.selectedItem.@idInstitution;
				}
				request.@privacyExpirationDate = visibilityView.privacyExpirationPicker.text;
				
			} else {
				// If we don't have a visiblity tab, the request XML is already
				// initialized with the defaults from GetRequest
			}
			
			// Collaborators
			if (request.toString().indexOf("<collaborators") >= 0) {
				request.replace("collaborators", <collaborators></collaborators>);
			} else{
				request.appendChild("<collaborators></collaborators>");
			}
			for each(var collaborator:Object in visibilityView.getCollaborators()) {
				request.collaborators.appendChild(collaborator);
		 	}
			
			// We need special field that tells us the way the
			// request is being amended
			if (this.isAmendState()) {
				request.@amendState = currentState.toString();
				saveDescription = GNomExStringUtil.cleanRichTextHTML(request.@description);
			}
			
		}

		
		private function saveRequest():void {
			
			updateRequestProperties()

			var params:Object = new Object();
			params.requestXMLString = request.toXMLString();
			params.idProject = request.@idProject;
			params.description = saveDescription;	// Description sent separately to avoid XML encoding problems
			if (this.isMitSeqState()) {
				params.primersXMLString = parentApplication.navExperimentView.experimentDetailView.detail.primers.toXMLString();
			}
			if (this.isFragAnalState()) {
				params.assaysXMLString = this.selectedAssaysCollection;
			}
			
			saveExistingRequest.send(params);			
			
		}
			
		private function updateRequestProperties():void {
			
			var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', request.@codeApplication);
			if(hybSetupView.microarrayAppRadioGroup.numRadioButtons > 0) {
				hybSetupView.microarrayAppRadioGroup.selectedValue = application[0].@value;					
			} else {
				lastSelectedApplication = application[0].@value;
			}
			
			if (this.isMicroarrayState()) {
				request.@idSlideProduct = hybSetupView.slideProductCombo.selectedItem.@idSlideProduct;
				if(hybSetupView.microarrayAppRadioGroup.numRadioButtons > 0) {
					request.@codeApplication = hybSetupView.microarrayAppRadioGroup.selectedValue;				
				} else {
					request.@codeApplication = lastSelectedApplication;
				}				
				
			} 			
			
			if (this.isCapSeqState()) {
				request.@idSampleDropOffLocation = this.sampleDropOffLocationCombo.selectedItem.@value; 
			}
			if (this.isIScanState()) {
				request.@idIScanChip = sampleSetupView.iScanChipRadioGroup.selectedValue.@idIScanChip;
				request.@numberIScanChips = sampleSetupView.numIScanChips;
				request.@codeApplication = "";
				request.@codeBioanalyzerChipType = "";
			}
			request.replace("samples", <samples></samples>); 
			for each(var sample:Object in samples) {
				if ( this.samplesView.hasPlates() && (!sample.hasOwnProperty("@name") || sample.@name == null || sample.@name == '')) {
					continue;
				}
				request.samples.appendChild(sample);
			}
			request.replace("hybridizations", <hybridizations></hybridizations>); 
			if (isMicroarrayState()) {
				for each(var hyb:Object in hybs) {
					request.hybridizations.appendChild(hyb);
				}
			}
			request.replace("sequenceLanes", <sequenceLanes></sequenceLanes>); 
			if (isSolexaState()) {
				for each(var lane:Object in lanes) {
					request.sequenceLanes.appendChild(lane);
				}
			}
			
			request.replace("SeqLibTreatmentEntries", <SeqLibTreatmentEntries></SeqLibTreatmentEntries>); 
			if (isSolexaState()) {
				for each(var seqLibTreatment:Object in this.seqSetupView.seqLibTreatments) {
					if (seqLibTreatment.@isSelected == "true") {
						request.SeqLibTreatmentEntries.appendChild(seqLibTreatment);
					}
				}
			}		
			
			// Visibility
			request.@codeVisibility = visibilityView.visibilityRadioGroup.selectedValue;
			if (this.request.@codeVisibility != null && this.request.@codeVisibility == 'INST') {
				// Only set the institution if the visibility view in initialized, meaning
				// that the user has selected the visibility tab.  Otherwise, just leave
				// the institution to is previously set value.
				if (visibilityView.institutionCombo != null && visibilityView.institutionCombo.selectedItem != null) {
					request.@idInstitution = visibilityView.institutionCombo.selectedItem.@idInstitution;					
				}
				else if(parentApplication.getProperty(parentApplication.PROPERTY_ID_DEFAULT_INSTITUTION) != null){
					request.@idInstitution = parentApplication.getProperty(parentApplication.PROPERTY_ID_DEFAULT_INSTITUTION);
				}
				else{
					request.@idInstitution = "";
				}
			}
			
			// Collaborators
			request.replace("collaborators", <collaborators></collaborators>);
			for each(var collaborator:Object in visibilityView.getCollaborators()) {
				request.collaborators.appendChild(collaborator);
			}
			
			request.@privacyExpirationDate = visibilityView.privacyExpirationPicker.text;
			
			
			request.@idLab = requestEditLabCombo.selectedItem.@idLab;
			request.@idAppUser = ownerCombo.selectedItem.@idAppUser;
			if (requestEditBillingAccountCombo.selectedItem != null && requestEditBillingAccountCombo.selectedItem.@idBillingAccount != '') {
				request.@idBillingAccount = requestEditBillingAccountCombo.selectedItem.@idBillingAccount;				
			}
			request.@idProject = requestEditProjectCombo.selectedItem.@idProject;
			request.@name = notesView.experimentName.text;
			
			//Add new annotations to Sample that have not had data added to them in samples grid.
			for each(var prop:XML in this.propertyEntries){
				if(prop.@isSelected == "true" && !(request.samples.Sample[0].hasOwnProperty("@ANNOT" + prop.@idProperty))){
					request.samples.Sample[0]["@ANNOT" + prop.@idProperty] = "";
				}
			}

		}
	
		public function getAnnotationView():TabAnnotationView {
			if (theTab.contains(annotationView)) {
				return annotationView;
			} else {
				return null;
			}
		}
			
		public function promptToSubmitRequest():void {
			Alert.show( warningMessage + "\n\nDo you want to submit the request anyway?", 
						"Warning", 
						(Alert.YES | Alert.NO), this, 
						onPromptSubmitRequest,
						parentApplication.iconWarning);
			
		}
		
		private function onPromptSubmitRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	warningMessage = '';
            	submitRequest();
            } else {
				this.submitButton.enabled = true;
			}
        }
		
		public function promptToSaveRequest():void {
			Alert.show( warningMessage + "\n\nDo you want to save the request anyway?", 
						"Warning", 
						(Alert.YES | Alert.NO), this, 
						onPromptSaveRequest,
						parentApplication.iconWarning);
			
		}
		
		private function onPromptSaveRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	warningMessage = '';
            	saveRequest();
            } else {
				this.submitButton.enabled = true;
			}
        }
		
		private function onSaveNewRequest(event:ResultEvent):void {
			if (saveNewRequest.lastResult.name() == "SUCCESS") {
				submittedIdRequest = saveNewRequest.lastResult.@idRequest;
				submittedRequestNumber = saveNewRequest.lastResult.@requestNumber;

				confirmButtonStack.selectedIndex = 2;

				this.cancelButton.label = "Close";

 				nextButton.enabled = false;
				backButton.enabled = false;
				
				if (theTab.contains(setupView)) {
					setupView.enabled = false;				
				}
				
				if (theTab.contains(seqSetup1View)) {
					seqSetup1View.enabled = false;				
				}
				if (theTab.contains(sampleSetupView)) {
					sampleSetupView.enabled = false;				
				}
				if (theTab.contains(annotationView)) {
					annotationView.enabled = false;
				}
				samplesView.enabled = false;
				
				if (this.isSolexaState()) {
					if (theTab.contains(seqSetupView)) {
						this.seqSetupView.enabled = false;					
					}
					if (theTab.contains(bioinformaticsView)) {
						bioinformaticsView.enabled = false;
					}
				}

				if (this.isSolexaEditState()) {
					lanesView.enabled = false;
				} else {
					if (theTab.contains(hybSetupView)) {
						hybSetupView.enabled = false;
					}
					if (theTab.contains(hybsView)) {
						hybsView.enabled = false;
					}					
				} 

				var message:String = '';
				var title:String = ""; 
				if (this.isAmendState()) {
					message = 'Experiment request #  ' + submittedRequestNumber + ' has been submitted, adding services to the existing experiment request.\nPlease print off the request form and deliver it to the ' + parentApplication.getProperty(parentApplication.PROPERTY_CORE_FACILITY_NAME) + '.';	
					title = "Services added to Request";			
				} else {
					if (this.isExternalExperimentSubmission()) {
						message += 'Experiment #  ' + submittedRequestNumber + ' has been registered in the GNomEx repository.';
						title = "Experiment Registered";			
						
					} else {
						message = 'Request #  ' + submittedRequestNumber + '\n' + 
							       parentApplication.getRequestCategoryProperty(getRequestCategory().@idCoreFacility, getRequestCategory().@codeRequestCategory, parentApplication.PROPERTY_SUBMIT_REQUEST_INSTRUCTIONS);
						if (this.isSequencingState()) {
							title = "Experiment request saved";		
						} else {
							title = "Request Submitted";
						}
					}
				}
				Alert.show(message, title, 0, this, onNotifySubmitRequest);
			} else {
				Alert.show(saveNewRequest.lastResult..ACTMESSAGE.@TEXT);
			}
		}

		
		private function onNotifySubmitRequest(event:CloseEvent):void {
			if (event.detail==Alert.OK) {
				showPromptToUpload = false;
				if (this.isExternalExperimentSubmission()) {
					externalRequestNumber = submittedRequestNumber;
					externalIdRequest = submittedIdRequest;
					showPromptToUpload = true;
				} else {
					if (!this.isSequencingState()) {
						showPrintableRequestForm();
					}
				}
				// Just close the window when the request has been submitted
				// and show the submitted experiment in the Experiments view.
				theRequestNumber = this.submittedRequestNumber;
				getNewRequest.send();  
				

			} else {
				
			}

		}
		
		private function onSaveExistingRequest(event:ResultEvent):void {
			if (saveExistingRequest.lastResult.name() == "SUCCESS") {
				dirty.resetDirty();
				
				// For cap seq, warn if editing a submitted request so that billing is adjusted accordingly.
				if (this.isCapSeqState() ){ 
					// If samples have been removed:
					if( saveExistingRequest.lastResult.@deleteSampleCount > 0 ) {
						if (parentApplication.hasPermission("canWriteAnyObject")) {
							Alert.show("Request " + saveExistingRequest.lastResult.@requestNumber + " has been saved.\n\nSome samples have been deleted, please adjust billing accordingly.", 
								"Warning");				
						}
					} else {
						// If samples have been added, we get the message from saveExistingRequest.
						if (saveExistingRequest.lastResult.@billingAccountMessage != '') {
							Alert.show(saveExistingRequest.lastResult.@billingAccountMessage, "Warning");
						}
					}
				} else {
					// Inform if billing accounts reassigned on billing items
					if (saveExistingRequest.lastResult.@billingAccountMessage != '') {
						Alert.show(saveExistingRequest.lastResult.@billingAccountMessage, "Warning");
					}
					
					// Warn if billing should be adjusted to take into account
					// delete hybs or lanes
					if (saveExistingRequest.lastResult.@deleteSampleCount > 0 ||
						saveExistingRequest.lastResult.@deleteHybCount > 0 || 
						saveExistingRequest.lastResult.@deleteLaneCount > 0) {
						if (parentApplication.hasPermission("canWriteAnyObject")) {
							
							var deleteTarget:String = "";
							if (saveExistingRequest.lastResult.@deleteSampleCount > 0) {
								deleteTarget += "Samples";
							} 
							if (saveExistingRequest.lastResult.@deleteHybCount > 0) {
								if (deleteTarget.length > 0) {
									deleteTarget += " and ";								
								}
								deleteTarget += "Hybs";
							} 
							if (saveExistingRequest.lastResult.@deleteLaneCount > 0) {
								if (deleteTarget.length > 0) {
									deleteTarget += " and ";								
								}
								deleteTarget += "Sequence Lanes";
							} 					
							
							Alert.show("Request " + saveExistingRequest.lastResult.@requestNumber + " has been saved.  Some " + deleteTarget + " have been deleted, so please adjust billing accordingly.", 
								"Warning");				
						}
					}
				}
				
			 	var parms:Object = new Object();
			 	parms.idRequest = request.@idRequest;
			 	getRequest.send(parms);
			 			
			} else {
				Alert.show(saveExistingRequest.lastResult..ACTMESSAGE.@TEXT);
			}
		}
		
		private function onGetRequest(event:ResultEvent):void {
			if(!parentApplication.isInternalExperimentSubmission) {
				addDescriptionFieldToAnnotations(getRequest.lastResult.Request.(@idRequest = request.@idRequest).PropertyEntries);			
			}	
			request = getRequest.lastResult.Request.(@idRequest = request.@idRequest);
			
			// this refreshes the request from the db.
			if (parentDocument is NavOrderView) {
				this.tabIndexToRestore = this.theTab.selectedIndex;
				parentDocument.browseView.getList();
				parentDocument.switchToOrderDetailView();
			} else if (parentDocument is NavTopicsView) {
				parentApplication.navTopicsView.experimentDetailView.detail.refreshSavedExperiment(request.@idRequest);	
				parentApplication.navTopicsView.experimentViews.selectedChild = parentApplication.navTopicsView.experimentDetailView;
			}
			else {
				parentApplication.navExperimentView.showEditView = true;	
				parentApplication.navExperimentView.refreshExperiments();
			    parentApplication.navExperimentView.experimentDetailView.detail.refreshSavedExperiment(request.@idRequest);
			}
		}

		private function restoreTabIndex():void {
			if (this.tabIndexToRestore >= 0) {
				this.theTab.selectedIndex = tabIndexToRestore;
				tabIndexToRestore = -1;
			}
		}
			
		private function showPrintableRequestForm():void {
			var url:URLRequest = new URLRequest('ShowRequestForm.gx?idRequest=' + submittedIdRequest + '&amendState=' + this.currentState);
			navigateToURL(url, '_blank');	
		}

		
		private function underlyingHybDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets 
				return;
			}
			dirty.setDirty();
		}
		private function underlyingSampleDataChange(event:CollectionEvent):void {
			var ignore:int = 0;
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets 
				return;
			}
			
			for each(var e:Object in event.items) {
				if (e is PropertyChangeEvent) {
					var pe:PropertyChangeEvent = PropertyChangeEvent(e);
					if (pe.property == "@channel1Count" || pe.property == "@channel2Count" || pe.property == "@laneCount" ) {
						ignore++;
					}
					if (pe.property == "@idOrganism") {
						samples.removeEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
						samples.addEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
					}else if (pe.property == "@idNumberSequencingCycles") {
						samples.removeEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
						samplesView.propagateNumberSequencingCycles(pe.source);
						samples.addEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
					}         	
 				}
			}
			// Ignore change events on @channel1Count, @channel2Count
			if (ignore == event.items.length) {
				
			} else {
				dirty.setDirty();
				
			}
		}
		private function underlyingLaneDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets 
				return;
			}
			dirty.setDirty();
		}
		
       	private function sortDictionaryEntries(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var display1:String = obj1.@display;
				var display2:String = obj2.@display;
				
				if (display1.indexOf('Other') > -1) {
					return 1;
				} else if (display2.indexOf('Other') > -1) {
					return  -1;
				} else {
					if (display1 < display2) {
						return -1;
					} else if (display1 > display2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}
        
        private function sortSampleTypes(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var order1:int = obj1.@sortOrder;
				var order2:int = obj2.@sortOrder;
				
				if (obj1.@value == '') {
					return -1;
				} else if (obj2.@value == '') {
					return 1;
				} else {
					if (order1 < order2) {
						return -1;
					} else if (order1 > order2) {
						return 1;
					} else {
						return 0;
					}
				}
			}			
		}			
        private function sortLanes(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var sampleId1:String =  obj1.@idSample.toString();
				var sampleId2:String =  obj2.@idSample.toString();
				
				if (sampleId1 == '') {
					return -1;
				} else if (sampleId2 == '') {
					return 1;
				} else {
					var isNew1:Boolean = false;
					var isNew2:Boolean = false;
					var int1:int = 0;
					var int2:int = 0;
					if (sampleId1.length > 6 && sampleId1.substr(0, 6) == "Sample") {
						isNew1 = true;
						int1 = parseInt(sampleId1.substr(6));
					} else {
						int1 = parseInt(sampleId1);
					}
					if (sampleId2.length > 6 && sampleId2.substr(0, 6) == "Sample") {
						isNew2 = true;
						int2 = parseInt(sampleId2.substr(6));
					} else {
						int2 = parseInt(sampleId2);
					}
					
					if (isNew1 && !isNew2) {
						return 1;
					} else if (!isNew1 && isNew2) {
						return -1;
					} else if (int1 < int2) {
						return -1;
					} else if (int1 > int2) {
						return 1;
					} else {
						var n1:String = obj1.@number.toString();
						var n2:String = obj2.@number.toString();
						var n1P:Array = n1.split('_');
						var n2P:Array = n2.split('_');
						var fcNum1:int = -1;
						var fcNum2:int = -1;
						if (n1P.length > 1) {
							fcNum1 = parseInt(n1P[1]);
							if (isNaN(fcNum1)) {
								fcNum1 = -1;
							}
						}
						if (n2P.length > 1) {
							fcNum2 = parseInt(n2P[1]);
							if (isNaN(fcNum2)) {
								fcNum2 = -1;
							}
						}
						if (fcNum1 < fcNum2) {
							return -1;
						} else if (fcNum1 > fcNum2) {
							return 1;
						} else {
							return 0;
						}
					}
				}
			}			
		}			

        private function sortNumberSequencingCyclesAllowed(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				
				if (obj1.@value == '') {
					return -1;
				} else if (obj2.@value == '') {
					return 1;
				} else {
					var numberCycles1:Number = obj1.@numberSequencingCyclesDisplay;
					var numberCycles2:Number = obj2.@numberSequencingCyclesDisplay;
					var sortOrder1:Number = obj1.@seqRunTypeSortOrder == '' ? -1 : obj1.@seqRunTypeSortOrder;
					var sortOrder2:Number = obj2.@seqRunTypeSortOrder == '' ? -1 : obj2.@seqRunTypeSortOrder;
					
					if (numberCycles1 < numberCycles2) {
						return -1;
					} else if (numberCycles1 > numberCycles2) {
						return 1;
					} else {
						if (sortOrder1 < sortOrder2) {
							return -1;
						} else if (sortOrder1 > sortOrder2) {
							return 1;
						} else {
							return 0;
						} 
					} 
				}
			}			
		}			
		
		// Sort seq run type by sortOrder field
        private function sortSeqRunType(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var order1:int = obj1.@sortOrder;
				var order2:int = obj2.@sortOrder;
				
				if (obj1.@value == '') {
					return -1;
				} else if (obj2.@value == '') {
					return 1;
				} else {
					if (order1 < order2) {
						return -1;
					} else if (order1 > order2) {
						return 1;
					} else {
						return 0;
					}
				}
			}			
		}			
		
		// Sort application by sortOrder field
        private function sortApplication(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var order1:int = obj1.@sortOrder;
				var order2:int = obj2.@sortOrder;
				var disp1:String = obj1.@display;
				var disp2:String = obj2.@display;
				
				if (obj1.@value == '') {
					return -1;
				} else if (obj2.@value == '') {
					return 1;
				} else {
					if (order1 < order2) {
						return -1;
					} else if (order1 > order2) {
						return 1;
					} else {
						if (disp1 < disp2) {
							return -1;
						} else if (disp1 > disp2) {
							return 1;
						} else {
							return 0;
						}
					}
				}
			}			
		}			
			
		private function backToNavOrder():void {
			if (parentDocument is NavOrderView) {
				parentDocument.experimentViews.selectedChild = parentDocument.browseView;
			} 
		}

		private function showViewWindow():void {
			parentDocument.experimentViews.selectedChild = parentDocument.experimentDetailView;
			parentDocument.experimentDetailView.detail.setupForm(this.request);
			parentDocument.experimentDetailView.titleLabel.text = (this.request.@isExternal == 'Y' ? 'External Experiment ' :  'Experiment ')+ this.request.@number;

		}
		

		private function onGetLab(event:ResultEvent):void {
			if (getLab.lastResult.name() == "OpenLabList") {
				var lab:Object = getLab.lastResult..Lab.(@idLab == requestEditLabCombo.selectedItem.@idLab);
				
				billingAccounts = new XMLListCollection(lab.billingAccounts.BillingAccount);
				if (requestEditBillingAccountCombo.dropdown != null) {
					//requestEditBillingAccountCombo.dropdown.dataProvider = billingAccounts;  // already has dynamic binding
				}
		        for each(var ba:Object in filteredBillingAccounts) {
		        	if (ba.@idBillingAccount == request.@idBillingAccount) {
		        		requestEditBillingAccountCombo.selectedItem = ba;
		        		break;
		        	}
		        }
		        
		        requestEditProjectCombo.selectedItem = null;
				projects = new XMLListCollection(getLab.lastResult..Lab.projects.Project);
		        for each(var p:Object in projects) {
		        	if (p.@idProject == request.@idProject) {
		        		requestEditProjectCombo.selectedItem = p;
		        		break;
		        	}
		        }
				if (requestEditProjectCombo.selectedItem == null && request.hasOwnProperty("@idProject") && request.@idProject != null && request.@idProject != '') {
					var proj:XML = new XML("<Project name='" + request.@projectName + "' display='" + request.@projectName + "' idProject = '" + request.@idProject + "' />");
					projects.addItem(proj);
					requestEditProjectCombo.selectedIndex = 1;
					requestEditProjectCombo.enabled = false;
				} else {
					requestEditProjectCombo.enabled = true;
				}
				
				if (this.isSolexaEditState()) {
					this.requestApplicationComboBox.selectedItem = null;
					for each(var p1:Object in filteredAppList) {
						if (p1.@value == request.@codeApplication) {
							requestApplicationComboBox.selectedItem = p1;
							break;
						}
					}
				}
				
				if (request.hasOwnProperty("@isExternal") && request.@isExternal == "Y") {
					for each(var organism:Object in parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.OrganismLite').DictionaryEntry) {
						if (organism.@value == request.@idOrganism) {
							this.sampleOrganismCombo.selectedItem = organism;
							break;
						}
					}
				}
				
				var emptyNode:XML = <AppUser idAppUser='' displayName=''/>;
				appUsersForLab = new XMLListCollection(lab.members.AppUser);
				for each (var mgr:Object in lab.managers.AppUser) {
					var mgrInLabList:Boolean = false;
					for each(var a:Object in appUsersForLab) {
						if (a.@idAppUser == mgr.@idAppUser) {
							mgrInLabList = true;
							break;
						}
					}
					if (!mgrInLabList) {
						appUsersForLab.addItem(mgr);				
					}
				}
				appUsersForLab.addItemAt(emptyNode, 0);
				
				appUserSort = new Sort();
				appUserSort.compareFunction = this.sortAppUsers;
				appUsersForLab.sort = appUserSort;
				appUsersForLab.refresh();
				ownerCombo.selectedItem = emptyNode;
				for each(var a1:Object in appUsersForLab) {
					if (a1.@idAppUser == request.@idAppUser) {
						ownerCombo.selectedItem = a1;
						break;
					}
				}
				ownerCombo.enabled = true;
			}			

		}
			
        private function onGetSlideDesignList(event:ResultEvent):void {
        	var emptyNode:XML = <SlideDesign idSlideDesign='' name=''/>;
        	slideDesignList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getSlideDesignList.lastResult.SlideDesign));

	        checkToInitializeEditControls();
	        checkToPerformPostAmendSetup();
        }
        
        private function onGetSlideProductList(event:ResultEvent):void {
        	var emptyNode:XML = <SlideProduct idSlideProduct='' name='' label=''/>;
        	
        	filteredSlideProductList = new XMLListCollection(getSlideProductList.lastResult.SlideProduct);
        	filteredSlideProductList.addItemAt(emptyNode, 0);

	        filteredSlideProductList.filterFunction = filterSlideProduct;
	        filteredSlideProductList.refresh();
	        
	        checkToInitializeEditControls();
	        checkToPerformPostAmendSetup();
        }		
        
        private function checkToInitializeEditControls():void {
        	if (isMicroarrayState() && this.isEditState()) {
				if (getSlideProductList.lastResult != null && this.getSlideDesignList.lastResult != null) {
					initializeControlsImpl();
				}
        	}
        }

        private function checkToPerformPostAmendSetup():void {
        	if (currentState == "MicroarrayAmendState") {
				if (getSlideProductList.lastResult != null && this.getSlideDesignList.lastResult != null) {
					this.postSetupAmendFormImpl();
				}
        	}
        }
		
		
		private function setAmendState():void {
			if (this.radioGroupAmendType.selectedValue != null && this.radioGroupAmendType.selectedValue != "") {
				if (this.radioGroupAmendType.selectedValue.toString().indexOf("ADD-LANES-") == 0) {
					this.currentState = "SolexaLaneAmendState";
					setAmendTitle();
				} else if (this.radioGroupAmendType.selectedValue.toString().indexOf("QC-TO-") == 0 && this.isIlluminaAmendRequestType()) {
					this.filteredAppList.refresh();
					this.currentState = "SolexaBaseAmendState";
					setAmendTitle();
				} else if (this.radioGroupAmendType.selectedValue.toString().indexOf("QC-TO-") == 0 && this.getAmendRequestType() == parentApplication.TYPE_MICROARRAY) {
					this.currentState = "MicroarrayAmendState"; 
					setAmendTitle();
				} else if (this.radioGroupAmendType.selectedValue.toString().indexOf("QC-TO-") == 0 && this.getAmendRequestType() == parentApplication.TYPE_CAP_SEQ) {
					this.currentState = "CapSeqAmendState";
					setAmendTitle();
				}
			}
		}
		
		
		
		private function getCandidateAmendExperiments():void {
			browseTree.selectedItem = null;
			checkAmendSetupCompleteness();
			
			if (this.radioGroupAmendType.selectedValue != null && 
			    this.radioGroupAmendType.selectedValue != "" &&
			    this.labCombo.selectedIndex >= 0) {
			    	
				var params:Object = new Object();
				params.idLab = labCombo.selectedItem.@idLab;
				params.showSamples = "N";
				params.showCategory = "N";
				params.showExternalExperiments = "N";
				params.searchPublicProjects = 'N';
				params.publicExperimentsInOtherGroups = 'N';
				params.isBioanalyzer = isRequestToAmendQC() ? 'Y' : 'N';
				params.isSolexa = isRequestToAmendIllumina() ? 'Y' : 'N';
				
				// Limit by the kind of illumina request if we are adding lanes
				if (this.isRequestToAmendIllumina()) {
					params.codeRequestCategory = this.getAmendRequestCategory();
				}
				
				if (lastWeekCheckbox.selected) { 
					params.lastWeek = 'Y'; 
				} else if (lastMonthCheckbox.selected) {
					params.lastMonth = 'Y';
				} else if (lastThreeMonthsCheckbox.selected) {
					params.lastThreeMonths = 'Y';
				} else if (lastYearCheckbox.selected) {
					params.lastYear = 'Y';
				}

				// For normal users, scope to only show user's own experiments.
				// Lab managers can amend anyone's experiment.  (Admins are
				// considered manager on all labs, so they can also
				// amend any experiment.				
				if (appUserCombo.selectedItem != null && appUserCombo.selectedItem.@idAppUser != '') {
					params.idAppUser = appUserCombo.selectedItem.@idAppUser;				
				}					
				
				this.getCandidateProjectRequestList.send(params);
				
			} else {
				browseTree.visible = false;
				this.checkAmendSetupCompleteness();
			}
		}
		
		private function onGetCandidateProjectRequestList(event:ResultEvent): void {
        	if (this.getCandidateProjectRequestList.lastResult.name() != "ProjectRequestList") {
        		Alert.show(getCandidateProjectRequestList.lastResult..ACTMESSAGE.@TEXT);
        		this.browseTree.visible = false;
        		return;
        	}
        	  
        	if (getCandidateProjectRequestList.lastResult.Lab.length() == 0) {
        		this.browseTree.visible = false;
        		var filter:String = "";
        		if (this.appUserCombo.selectedItem != null && this.appUserCombo.selectedItem.@idAppUser != "") {
        			filter = "submitted by '" + appUserCombo.selectedItem.@displayName + "' for the " + labCombo.selectedItem.@name + " ";;
        		} else if (this.lastMonthCheckbox.selected || this.lastThreeMonthsCheckbox || this.lastWeekCheckbox || this.lastYearCheckbox.selected) {
        			filter = "submitted for the " + labCombo.selectedItem.@name + " ";
        		}
        		if (this.lastWeekCheckbox.selected) {
        			filter += "in the last week were ";
        		} else if (this.lastMonthCheckbox.selected) {
        			filter += "in the last month were ";
        		} else if (this.lastThreeMonthsCheckbox.selected) {
        			filter += "in the last 3 months were ";
        		} else if (this.lastYearCheckbox.selected) {
        			filter += "in the last year were ";
        		}
        		if (this.isRequestToAmendQC()) {
        			Alert.show("No Sample Quality experiments " + filter + "found.");
        		} else if (this.isRequestToAmendIllumina()){
        			Alert.show("No Illumina Sequencing experiments " + filter + "found.");
        		} else {
        			Alert.show("No Sample Quality experiments " + filter + "found.");
        		}
        	} else {
        		this.browseTree.visible = true;
	        	callLater(expandTree);
        	}
	    }	
	    	
		private function expandTree():void {
			
        	browseTree.expandItem(getCandidateProjectRequestList.lastResult, true);
  			for each(var project:Object in getCandidateProjectRequestList.lastResult..Project) {
  				browseTree.expandItem(project, true);
  			}
  			for each(var lab:Object in getCandidateProjectRequestList.lastResult..Lab) {
  				browseTree.expandItem(lab, true);
  			}
  			browseTree.selectedIndex = 0;
  			browseTree.validateNow();
  			browseTreeContainer.validateNow();
  			this.setAmendTitle();
		}        		    

		public function getTreeLabel(item:Object):String {
				if (item.name() == "Request") {
					return item.@displayName;
				} else {
					return item.@label;
				}
		}
		
		private function toggleDateCheckboxes(checkBoxNumber:int):void {
			if (checkBoxNumber == 1) {
				this.lastMonthCheckbox.selected = false;
				this.lastThreeMonthsCheckbox.selected = false;
				this.lastYearCheckbox.selected  = false;
			} else if (checkBoxNumber == 2) {
				this.lastWeekCheckbox.selected = false;
				this.lastThreeMonthsCheckbox.selected = false;
				this.lastYearCheckbox.selected  = false;
			} else if (checkBoxNumber == 3) {
				this.lastWeekCheckbox.selected  = false;
				this.lastMonthCheckbox.selected = false; 
				this.lastYearCheckbox.selected  = false;
			}  else if (checkBoxNumber == 4) {
				this.lastWeekCheckbox.selected  = false;
				this.lastMonthCheckbox.selected = false; 
				this.lastThreeMonthsCheckbox.selected = false;
			}   
		} 	
		
		public function isAmendState():Boolean {
			if (currentState == "AmendState" ||
			    currentState == "MicroarrayAmendState" ||
			    currentState == "SolexaBaseAmendState" ||
			    currentState == "SolexaLaneAmendState" ||
				currentState == "CapSeqAmendState") {
				return true;    	
			} else {
				return false;
			}
		}	
		
		public function isSolexaAmendState():Boolean {
			if (currentState == "SolexaBaseAmendState" ||
			    currentState == "SolexaLaneAmendState") {
				return true;
			} else {
				return false;
			}
		}
		public function isMicroarayAmendState():Boolean {
			if (currentState == "MicroarrayAmendState") {
				return true;
			} else {
				return false;
			}
		}
		
		private function checkAmendSetupCompleteness():void {
			var isComplete:Boolean = false;
			if (this.browseTree.selectedItem != null && this.browseTree.selectedItem.name() == "Request") {
				if(this.browseTree.selectedItem.@hasQcWorkItems == 'Y' && currentState == "SolexaBaseAmendState"){
					Alert.show('There are still samples waiting for Sample Quality to complete. ' +
								'Please contact the core facility to complete the QC workflow step on these samples. ' +
								'Then you can proceed with turning this QC experiment order into an Illumina experiment order.');
					return;
				}
				if (this.getAmendRequestCategory() != null && this.getAmendRequestCategory() != "") {
					isComplete = true;
				}
			}
			
			if (isComplete) {
				this.getRequestToAmend.send();
			}
			

			if (currentState == "SolexaBaseAmendState") {
	    		sampleSetupView.enabled = isComplete;
        	} else if (currentState == "SolexaLaneAmendState") {
        		this.seqSetup1View.enabled = isComplete;
        	} else if (currentState == "MicroarrayAmendState" ) {
				sampleSetupView.enabled = isComplete;
    			if (theTab.contains(this.annotationView)) {
        			annotationView.enabled = isComplete;
       			}        			
    		} else {
				// capillary sequencing -- never happens
				seqSetup1View.enabled = isComplete;
			}
    		
    		enableNextButtons();
    		
    		
    		callLater(postAmendSetupCompleteness, [isComplete]);
    		
    		
        }
        
        private function postAmendSetupCompleteness(isComplete:Boolean):void {
    		if (!isComplete) {
    			if (currentState == "SolexaBaseAmendState") {
    				this.seqSetupView.enabled = false;
    			} else if (currentState == "SolexaLaneAmendState") {
    				this.sampleSetupView.enabled = false;
					bioinformaticsView.enabled = false;
    			} else if (currentState == "MicroarrayAmendState") {
    				this.sampleSetupView.enabled = false;
    			}
	    		this.samplesView.enabled = false;
	        	if (this.theTab.contains(this.hybSetupView)) {
		        	this.hybSetupView.enabled = false;
	        	} 
	        	if (this.theTab.contains(this.hybsView)) {
		        	this.hybsView.enabled = false;
	        	} 
	        	this.confirmView.enabled = false;
    		} else {
    			if (currentState == "SolexaBaseAmendState") {
					this.sampleSetupView.currentState = "SolexaAmendState";
    				this.sampleSetupView.checkSampleSetupCompleteness();
    			} else if (currentState == "SolexaLaneAmendState") {
    				this.sampleSetupView.checkSampleSetupCompleteness();
    			} else if (currentState == "MicroarrayAmendState") {
    				this.sampleSetupView.checkSampleSetupCompleteness();
    			}
    			
    			
    			this.samplesView.checkSamplesCompleteness();
    			this.hybSetupView.checkHybSetupCompleteness();
    			this.hybsView.checkHybsCompleteness();
    		}
        	
        }
	
		private function onGetRequestToAmend(event:ResultEvent):void {
			
			var request:Object = getRequestToAmend.lastResult..Request.(@idRequest == browseTree.selectedItem.@idRequest)[0];
			existingLanes = request.sequenceLanes.SequenceLane;

			setupAmendForm(request);
			
			if (theTab.contains(this.annotationView)) {
				this.propertyEntries.refresh();
			} 
		}
		
		private function setAmendTitle():void {
			this.titleLabel.text = "";
			if (this.currentState == "SolexaBaseAmendState" ) {
				this.titleLabel.text = "Adding Illumina sequencing services to Sample Quality Experiment ";		
			} else if (this.currentState == "MicroarrayAmendState") {
				this.titleLabel.text = "Adding Microarray services to Sample Quality Experiment ";	
			} else if (this.currentState == "SolexaLaneAmendState") {
				this.titleLabel.text = "Adding Illumina sequence lanes to Experiment ";			
			} else if (this.currentState == "CapSeqAmendState") {
				this.titleLabel.text = "Adding Capillary Sequencing services to Experiment ";
			}
			if (this.browseTree.selectedItem != null && this.browseTree.selectedItem.name() == "Request") {
				this.titleLabel.text += this.browseTree.selectedItem.@requestNumber;
			}			
			var codeRequestCategory:String = getAmendRequestCategory();
			if (codeRequestCategory != '') {
				var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', codeRequestCategory);
				this.requestIcon = requestCategory.@icon;
			}

		}

		public function setupAmendForm(theRequest:Object):void {
			request = theRequest;
			
			setAmendTitle();

			var requestCategory:Object = getRequestCategory();
			requestCategoryName = requestCategory.@display.toString();
			
			this.instantiateTabs(requestCategory.@codeRequestCategory, false, true);
			
			samplesView.currentState = '';
			var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application',request.@codeApplication);
			applicationName = application.@display.toString();
			codeApplication = application.@codeApplication;
			
			var prevSelectedTab:Container = theTab.selectedChild;			
				
			if (!this.isCapSeqState() && !this.isFragAnalState() && !this.isMitSeqState() && !this.isCherryPickState()) {
				this.annotationView.checkSecurity();		
			}
			if (this.isSolexaAmendState()) {
				this.samplesView.currentState = "SolexaSamplesState";
			} else if (this.isMicroarayAmendState()) {				
				this.sampleSetupView.currentState = "MicroarrayAmendState";
				this.hybSetupView.currentState = "SetupState";
			} else if (this.isCapSeqState()) {
				this.sampleSetupView.currentState = "CapSeqState";
				this.samplesView.currentState = "CapSeqState";
			}
			
			
			callLater(postSetupAmendForm);

		}
		
		private function postSetupAmendForm():void {
			if (currentState == "MicroarrayAmendState") {
				if (this.getSlideProductList.lastResult != null && filteredSlideProductList != null) {
					// If we already have the slide product and slide design list, initialize controls
					postSetupAmendFormImpl();
				} else {
					
					if (this.getSlideProductList.lastResult == null || filteredSlideProductList == null) {
						// We don't have the slide design list so run the query.
						// The result handler will detect if it is time to call
						// initializeControlsImpl.
						getSlideProductList.send();
					} else {
						// We do have the slide product list so  refresh it. 
						this.checkToPerformPostAmendSetup();  
					}
					
					if (this.getSlideDesignList.lastResult == null) {
						// We don't have the slide design list so run the query.
						// The result handler will detect if it is time to call
						// initializeControlsImpl.
						getSlideDesignList.send();
					}
				} 
			} else {
				postSetupAmendFormImpl();
			}
		}
		
		private function postSetupAmendFormImpl():void {
			// Set the codeRequestCategory
			request.@codeRequestCategory = this.getAmendRequestCategory();
			
			this.samplesView.showHideColumns();
			
			if (isSolexaAmendState()) {
				this.filteredGenomeBuildList.refresh();
			
				
				// Get rid of the existing lanes.  User will specify
				// additional lanes
				lanes.removeAll();
				
				// Propagate the entries on sample setup that
				// may have been selected from prev amend request
				if (theTab.contains(seqSetup1View)) {
					this.seqSetup1View.propagateSeqRunType();
					this.seqSetup1View.propagateNumberSequencingCycles();
				}
				this.bioinformaticsView.propagateGenomeBuild();

				
			}
			
			if (currentState == "MicroarrayAmendState" || currentState == "SolexaBaseAmendState" || this.isCapSeqState()) {
				// We are converting a QC request to a microarray or illumina
				// sequencing request.
				filteredSampleTypeList.refresh();
				filteredSampleTypeListRna.refresh();
				filteredSampleTypeListDna.refresh();
			
				// Set the default sample type on the request based on the first sample listed
				var idSampleTypeDefault:String = request.samples.Sample[0].@idSampleType.toString();
				request.@idSampleTypeDefault = idSampleTypeDefault;
			} 
			
			// Default the samples and sample setup for QC->SEQ 
			if (currentState == "SolexaBaseAmendState" || this.isCapSeqState()) {
   			   // Initialize @seqPrepByCore to 'Y'
				for each(var s:Object in request.samples.Sample) {
					s.@seqPrepByCore = "Y";
				}

				// Default the sample type on sample setup
				sampleSetupView.sampleTypeRadioGroup.selectedValue = request.@idSampleTypeDefault;
				
				// Reset the organism on the sample if it was previously selected
				sampleSetupView.sampleOrganismCombo.selectedIndex = 0;
				sampleSetupView.propagateSampleOrganism();
			}
			
			
			if (currentState == "MicroarrayAmendState") {
				// Get rid of the hybs from previous amend
				hybs.removeAll();

				// Filter the slide product list
				this.filteredSlideProductList.refresh();
				
				
				
				// Filter the microarray app list
				this.filteredMicroarrayAppList.refresh();
				
				// Default the sample type and nucleic acid extraction
				// dropdowns on sample setup
				sampleSetupView.sampleTypeRadioGroup.selectedValue = request.@idSampleTypeDefault;

				// Reset the organism on the sample if it was previously selected
				sampleSetupView.sampleOrganismCombo.selectedIndex = 0;
				sampleSetupView.propagateSampleOrganism();

				// Hide/Show the channel 2 sample column
				var requestCategory:Object = this.getRequestCategory();
				if (requestCategory.@numberOfChannels == "2") {
					this.samplesView.currentState = 'MicroarraySamplesState';
					this.hybsView.currentState = "";
					hybsView.channel2SampleColumn.visible = true;
					confirmView.setChannel2ColVisibility(true);
				} else {
					this.samplesView.currentState = 'MicroarrayOneColorSamplesState';
					this.hybsView.currentState = "HybsOneColorState";
					hybsView.channel2SampleColumn.visible = false;
					confirmView.setChannel2ColVisibility(false);
					for each (var s1:Object in samples) {
						s1.@label = 'cy3';
					}
				}
				
				
				// Reset the hyb setup view
				hybSetupView.organismCombo.selectedIndex = -1;
				hybSetupView.slideProductCombo.selectedIndex = -1;
				hybSetupView.numberOfHybs.text = '';
				hybSetupView.unselectSlideSources();


				hybSetupView.organismCombo.enabled = true;
				hybSetupView.slideProductCombo.enabled = true;
				hybSetupView.isCatalogRadio.enabled = true;
				hybSetupView.isCustomRadio.enabled = true;


			}
			
			
			this.dirty.resetDirty();
		}
		
				
		
		private function onGetLabForAddingServices(event:ResultEvent):void {			
			lab = getLabForAddingServices.lastResult..Lab.(@idLab == labCombo.selectedItem.@idLab);
			
	        
	        if (parentApplication.hasPermission('canWriteAnyObject')) {
		        this.appUserCombo.selectedIndex = 0;
	        } else {
	        	for each(var u:Object in appUsers) {
	        		if (u.@idAppUser == parentApplication.getIdAppUser()) {
			        	this.appUserCombo.selectedItem = u;
	    				break;    			
	        		}
	        	}
	        }
	        this.getCandidateAmendExperiments();
			
			
			this.qcAmendRequestCategories.refresh();
			this.addLanesAmendRequestCategories.refresh();
		}
			
        private function sortAppUsers(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var display1:String = obj1.@displayName;
				var display2:String = obj2.@displayName;
				
				if (display1 < display2) {
					return -1;
				} else if (display1 > display2) {
					return 1;
				} else {
					return 0;
				}
				
			}
		}
    	
    	public static function showExperimentUploadWindow(parent:DisplayObject, request:Object, experimentEditView:ExperimentEditView, experimentDownloadView:ExperimentDownloadView):void {
			var uploadWindow:ExperimentUploadWindow = ExperimentUploadWindow(PopUpManager.createPopUp(parent, ExperimentUploadWindow, true));
			experimentEditView.downloadView = experimentDownloadView;
			uploadWindow.parentView = experimentEditView;
			PopUpManager.centerPopUp(uploadWindow);
			uploadWindow.init(request);
    		
    	}
			
		public static function showExperimentOrganizeWindow(parent:DisplayObject, request:Object, experimentEditView:ExperimentEditView, experimentDownloadView:ExperimentDownloadView):void {
			var uploadWindow:ExperimentUploadWindow = ExperimentUploadWindow(PopUpManager.createPopUp(parent, ExperimentUploadWindow, true));
			experimentEditView.downloadView = experimentDownloadView;
			uploadWindow.parentView = experimentEditView;
			PopUpManager.centerPopUp(uploadWindow);
			uploadWindow.init(request);
			uploadWindow.theTab.selectedIndex = 1;
		}
			
		public static function showLinkSamplesWindow(parent:DisplayObject, request:Object, experimentEditView:ExperimentEditView, experimentDownloadView:ExperimentDownloadView):void {
			var uploadWindow:ExperimentUploadWindow = ExperimentUploadWindow(PopUpManager.createPopUp(parent, ExperimentUploadWindow, true));
			experimentEditView.downloadView = experimentDownloadView;
			uploadWindow.parentView = experimentEditView;
			PopUpManager.centerPopUp(uploadWindow);
			uploadWindow.init(request);
			uploadWindow.theTab.selectedIndex = 2;
		}
		

		public static function showExperimentUploadFDTWindow(parent:DisplayObject, request:Object):void {
			var uploadWindow:ExperimentUploadWindow = ExperimentUploadWindow(PopUpManager.createPopUp(parent, ExperimentUploadWindow, true));
			PopUpManager.centerPopUp(uploadWindow);
			uploadWindow.init(request);
			uploadWindow.uploadFilesStack.selectedIndex = 1;
		}

    	public function showSampleBarcodes():Boolean {
    		var show:Boolean = false;
    		if (this.isSolexaState()) {
    			if (currentState == "SolexaLaneAmendState" ) {
					for each(var s:Object in samples) {
						if (s.@idOligoBarcode != '') {
							show = true;
							break;		
						}
					}
				} else if (!parentApplication.submitInternalExperiment()) {
					show = false;
				} else if (this.isEditState()) {
    				show = true;
    			} else if (sampleSetupView.currentState == "SolexaSetupPreppedState") {
					show = true;
				} 	
    		}
    		return show;
    	}
			
		public function showSampleBarcodesB():Boolean {
			var show:Boolean = false;
			if (this.isSolexaState()) {
				if (currentState == "SolexaLaneAmendState" ) {
					for each(var s:Object in samples) {
						if (s.@idOligoBarcodeB != '') {
							show = true;
							break;		
						}
					}
				} else if (!parentApplication.submitInternalExperiment()) {
					show = false;
				} else if (this.isEditState()) {
					show = true;
				} else if (sampleSetupView.currentState == "SolexaSetupPreppedState") {
					show = true;
				} 	
			}
			return show;
		}
    	
    	public function showSampleCustomBarcodes():Boolean {
    		var show:Boolean = false;
    		if (this.isSolexaState()) {
				if (currentState == "SolexaLaneAmendState") {
					for each(var s:Object in samples) {
						if (s.@barcodeSequence != '' && s.@idOligoBarcode == '') {
							show = true;
							break;		
						}
					}
				} else if (!parentApplication.submitInternalExperiment()) {
					show = false;
				} else if (this.isEditState()) {
					show = true;
				} else if (sampleSetupView.currentState == "SolexaSetupPreppedState") {
					show = true;
				}	
    		}
    		return show;
    	}
    	
    	
    	public function showSampleMultiplexGroup():Boolean {
    		var show:Boolean = false;
    		if (this.isSolexaState()) {
	    		if (currentState == "SolexaLaneAmendState") {
					for each(var s:Object in samples) {
						if (s.@multiplexGroupNumber != '') {
							show = true;
							break;		
						}
					}
				} else if (isEditState()) {
					show = false;
				}  else if (!parentApplication.submitInternalExperiment()) {
					show = false;
				} else {
					show = true;
				}	
    		}
    		return show;
    	}
			
		public function showPlateGroup():Boolean {
			var show:Boolean = false;
			if (this.isCapSeqState() || this.isIScanState() || this.isSequenomState() || this.isClinicalSequenomState()) {
				if (this.isEditState()) {
					show = false;
				} else if (this.request.@containerType == "PLATE") {
					show = true;
				} else {
					show = false;
				}
			}
			
			return show;
		}

		protected function agreeCheckbox_clickHandler(event:MouseEvent):void {
			this.submitButton.enabled = agreeCheckbox.selected;
		}
			
			public function filterList():void {	}
			
			private function getBrowseParameters():Object {
				var params:Object = new Object();
				if (parentDocument.selectedIdProject != null) {
					params.idProject = parentDocument.selectedIdProject;
				}
				if (parentDocument.selectedIdRequest != null) {
					params.idRequest = parentDocument.selectedIdRequest;
				}
				params.idLab = parentDocument.selectedIdLab;
				
				if(parentDocument is NavTopicsView) {
					return params;
				}
				
				
				if (parentDocument.currentState == 'AdminState' && parentDocument.allExperimentsCheckbox.selected) {
					params.allExperiments = 'Y';
				} else {
					if (parentDocument.currentState == 'AdminState') {
						if (parentDocument.selectedIdLab == null && parentDocument.browseLabCombo.selectedItem != null) {
							params.idLab = parentDocument.browseLabCombo.selectedItem.@idLab;
						}
						if (parentDocument.browseUserCombo.selectedItem != null) {
							params.idAppUser = parentDocument.browseUserCombo.selectedItem.@idAppUser;
						}
					} else if (parentDocument.currentState != "GuestState")  {
						if (parentDocument.myExperimentsCheckbox.selected) {
							params.idAppUser = parentApplication.getIdAppUser();
						}				
						if (parentDocument.userAllExperimentsCheckbox.selected) {
							params.allExperiments = 'Y';
						}
					}
					if (parentDocument.publicExperimentsOtherGroupsCheckbox.selected) {
						params.publicExperimentsInOtherGroups = 'Y';
					}
					if ( parentDocument.pickDateRangeButton.fromDate != null && parentDocument.pickDateRangeButton.toDate != null ) {
						params.createDateFrom = dateFormatter.format( parentDocument.pickDateRangeButton.fromDate );
						params.createDateTo = dateFormatter.format( parentDocument.pickDateRangeButton.toDate );
					}
					if ( !this.isEditState() ) {
						if ( parentDocument.requestCategoryRadioGroup != null && parentDocument.requestCategoryRadioGroup.selectedValue != null && parentDocument.requestCategoryRadioGroup.selectedValue != ''){
							params.codeRequestCategory = parentDocument.requestCategoryRadioGroup.selectedValue;
						}
					}					
					
				}
				
				return params;					
			}
			
			public function getBrowseParametersOrderView():Object {
				var params:Object = new Object();
				params.idRequest = request.@idRequest;
				params.idLab = request.@idLab;
				params.lastYear = 'Y';
				params.isMicroarray  = "N";
				params.isNextGenSeq  = "N";
				params.isBioanalyzer = "N";
					
				
				return params;					
			}
			
			
			public function reloadDownloadList():void {
				// Getting the download list is slow since we now show an expanded file
				// view by default.  Only show downloads at request or project level.
				if (parentDocument is NavOrderView) {
					downloadView.getRequestDownloadList.send(getBrowseParametersOrderView());
					downloadView.browseParameters = getBrowseParametersOrderView();
					downloadView.browseMessage = "";
				} else {
					if (parentDocument.selectedIdProject != null || 
						parentDocument.selectedIdRequest != null) {
						downloadView.getRequestDownloadList.send(getBrowseParameters());
						downloadView.browseParameters = getBrowseParameters();
						downloadView.browseMessage = "";
					} else {
						downloadView.browseMessage = "Click on a project or request to narrow download selection.";
						downloadView.rowCountMessage = "";
						downloadView.downloadTree.visible = false;
					}
				}
			}
			
			public function refreshDownloadList():void {
				if (theTab.selectedChild == downloadView) {
					// Getting the download list is slow since we now show an expanded file
					// view by default.  Only show downloads at request or project level.
					reloadDownloadList();
					theTab.selectedChild = downloadView;
				}
			}
			
			public function refreshDownloadListForExperiment():void {
				var params:Object = new Object();
				params.requestNumber = parentDocument.selectedExperiment.@number;
				downloadView.getRequestDownloadList.send(params);
				downloadView.browseParameters = params;
			}
						
			private function propagateDesign():void {
				this.request.@captureLibDesignId = designText.text;	
			}
			
			public function isAssaySelected(assay:Object):Boolean {
				for each (var sel:Object in this.selectedAssaysCollection) {
					if (sel.@name == assay.@name) {
						return true;
					}
				}
				return false;
			}
			
			private function pickOrganism():void {
				if (this.sampleOrganismCombo != null && this.sampleOrganismCombo.selectedItem != null) {
					request.@idOrganism =  this.sampleOrganismCombo.selectedItem.@value;
					request.@otherOrganism = this.otherOrganism != null && this.otherOrganism.text != null && sampleOrganismCombo.selectedItem.@display == 'Other' ? this.otherOrganism.text : "";
				} else {
					request.@idOrganism = "";
					request.@otherOrganism = "";
					this.otherOrganism.text = "";
				}
			} 
			
			private function pickApplication():void {
				if (this.requestApplicationComboBox != null && this.requestApplicationComboBox.selectedItem != null) {
					request.@codeApplication =  this.requestApplicationComboBox.selectedItem.@value;
				} else {
					// should never happen
					request.@codeApplication = "";
				}
			} 
			
			private function filterLabList(item:Object):Boolean {
				var keep:Boolean = false;
				if (defaultCodeRequestCategory == null) {
					if (coreFacility != null) {
						for each(var core:XML in item..CoreFacility) {
							if (core.@idCoreFacility == coreFacility.@idCoreFacility) {
								keep = true;
								break;
							}
						}
					} else {
						keep=true;
					}
				} else {
					for each(var cf:Object in item..CoreFacility) {
						if (cf.@idCoreFacility == defaultRequestCategory.@idCoreFacility) {
							keep = true;
							break;
						}
					}
				}
				return keep;
			}
			
			private function filterBillingAccounts(item:Object):Boolean {
				var keep:Boolean = false;
				var temp:String = flash.utils.getQualifiedClassName(parentDocument);
				if(temp  == 'views.order::NavOrderView') {
					if(item.@idCoreFacility == parentDocument.selectedRequest.@idCoreFacility)
						return true;
					else
						return false;
				} else {
					if(item.@idCoreFacility == parentDocument.selectedExperiment.@idCoreFacility)
						return true;
					else
						return false;
				}
			}
			
			public function setDefaultRequestCategory(codeDefaultRequestCategory:String, ccNumberList:Array):void {
				this.defaultCodeRequestCategory = codeDefaultRequestCategory;
				this.ccNumberList = ccNumberList;
				if (defaultCodeRequestCategory != null) {
					this.defaultRequestCategory = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry.(@value==defaultCodeRequestCategory);
				} else {
					this.defaultRequestCategory = null;
				}
			}
			
			private function filterQCAmendRequestCategory(item:Object):Boolean {
				//parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry.(@isActive == 'Y' &amp;&amp; @value != '' &amp;&amp; @isInternal == 'Y' &amp;&amp; ( @type == parentApplication.TYPE_MICROARRAY ||  @isIlluminaType == 'Y')) 
				var keep:Boolean = filterRequestCategoryByCore(item);
				if (item.@type != parentApplication.TYPE_MICROARRAY && item.@isIlluminaType != 'Y') {
					keep = false;
				}
				return keep;
			}
			
			private function filterAddLanesAmendRequestCategory(item:Object):Boolean {
				//parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry.(@isActive == 'Y' &amp;&amp; @value != '' &amp;&amp; @isInternal == 'Y' &amp;&amp; @isIlluminaType == 'Y')				var keep:Boolean = false;
				var keep:Boolean = filterRequestCategoryByCore(item);
				if (item.@isIlluminaType != 'Y') {
					keep = false;
				}
				return keep;
			}
			
			private function filterRequestCategoryByCore(item:Object):Boolean {
				var keep:Boolean = false;
				if (item.@isActive == 'Y' && item.@value != '' && item.@isInternal == 'Y') {
					if (item.@isClinicalResearch == null || item.@isClinicalResearch != 'Y') {
						if (item.@idCoreFacility == null) {
							// If a request category is not associated with a core facility,
							// include it in the list.
							keep = true;
						} else if (lab != null) {
							// filter by the lab's core facility
							for each(var cf:Object in lab..CoreFacility) {
								if (cf.@idCoreFacility == item.@idCoreFacility) {
									keep = true;
									break;
								}
							}
						}
					}
				}
				return keep;
				
			}
		]]>
	</mx:Script>
	
	<mx:DateFormatter id="dateFormatter" formatString="MM/DD/YYYY"/>
		
	<mx:XMLListCollection id="assayCollection" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Assay').DictionaryEntry.(@display != '')}"/>
	<mx:XMLListCollection id="selectedAssaysCollection"/>
	
  	<mx:XMLListCollection id="propertyEntries" source="{request.PropertyEntries.PropertyEntry}" 
	  	 sort="{propertySorter}"  filterFunction="{filterPropertyEntry}"/>
	<mx:Sort id="propertySorter" compareFunction="sortProperties" unique="true"/>


	<mx:XMLListCollection id="samples" source="{request.samples.Sample}"/>

	<mx:XMLListCollection id="hybs" source="{request.hybridizations.Hybridization}" />

 	<mx:XMLListCollection id="billingItems" source="{request.billingItems.BillingLab}"/>

	<mx:Sort id="laneSorter" compareFunction="sortLanes"/>
	<mx:XMLListCollection id="lanes" source="{request.sequenceLanes.SequenceLane}" sort="{laneSorter}"/>
	
	<mx:XMLListCollection id="multiplexLanes" source="{getMultiplexLaneList.lastResult..MultiplexLane}"/>
 
  	<mx:XMLListCollection id="billingAccounts" />
	<mx:XMLListCollection id="filteredBillingAccounts" source="{billingAccounts.source}" filterFunction="filterBillingAccounts" />

  	<mx:XMLListCollection id="projects" />

	<mx:XMLListCollection id="appUsers"   source="{getLabForAddingServices.lastResult..Lab.submitters.AppUser}"/>
	
	<mx:XMLListCollection id="filteredLabList" filterFunction="filterLabList" source="{parentApplication.submitRequestLabList.source}"/>

	<mx:XMLListCollection id="qcAmendRequestCategories" filterFunction="filterQCAmendRequestCategory" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry}" />
	<mx:XMLListCollection id="addLanesAmendRequestCategories" filterFunction="filterAddLanesAmendRequestCategory" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry}" />


	
	<mx:XMLListCollection id="iScanPlateListCollection"/>
	<mx:XMLList id="iScanPlateList"/>
	<mx:XMLListCollection id="cherryPlateListCollection"/>
	<mx:XMLList id="cherryPlateList"/>
	<mx:XMLList id="wellList">
		<well name=""/>
		<well name="A1"/>
		<well name="A2"/>
		<well name="A3"/>
		<well name="A4"/>
		<well name="A5"/>
		<well name="A6"/>
		<well name="A7"/>
		<well name="A8"/>
		<well name="A9"/>
		<well name="A10"/>
		<well name="A11"/>
		<well name="A12"/>
		<well name="B1"/>
		<well name="B2"/>
		<well name="B3"/>
		<well name="B4"/>
		<well name="B5"/>
		<well name="B6"/>
		<well name="B7"/>
		<well name="B8"/>
		<well name="B9"/>
		<well name="B10"/>
		<well name="B11"/>
		<well name="B12"/>
		<well name="C1"/>
		<well name="C2"/>
		<well name="C3"/>
		<well name="C4"/>
		<well name="C5"/>
		<well name="C6"/>
		<well name="C7"/>
		<well name="C8"/>
		<well name="C9"/>
		<well name="C10"/>
		<well name="C11"/>
		<well name="C12"/>
		<well name="D1"/>
		<well name="D2"/>
		<well name="D3"/>
		<well name="D4"/>
		<well name="D5"/>
		<well name="D6"/>
		<well name="D7"/>
		<well name="D8"/>
		<well name="D9"/>
		<well name="D10"/>
		<well name="D11"/>
		<well name="D12"/>
		<well name="E1"/>
		<well name="E2"/>
		<well name="E3"/>
		<well name="E4"/>
		<well name="E5"/>
		<well name="E6"/>
		<well name="E7"/>
		<well name="E8"/>
		<well name="E9"/>
		<well name="E10"/>
		<well name="E11"/>
		<well name="E12"/>
		<well name="F1"/>
		<well name="F2"/>
		<well name="F3"/>
		<well name="F4"/>
		<well name="F5"/>
		<well name="F6"/>
		<well name="F7"/>
		<well name="F8"/>
		<well name="F9"/>
		<well name="F10"/>
		<well name="F11"/>
		<well name="F12"/>
		<well name="G1"/>
		<well name="G2"/>
		<well name="G3"/>
		<well name="G4"/>
		<well name="G5"/>
		<well name="G6"/>
		<well name="G7"/>
		<well name="G8"/>
		<well name="G9"/>
		<well name="G10"/>
		<well name="G11"/>
		<well name="G12"/>
		<well name="H1"/>
		<well name="H2"/>
		<well name="H3"/>
		<well name="H4"/>
		<well name="H5"/>
		<well name="H6"/>
		<well name="H7"/>
		<well name="H8"/>
		<well name="H9"/>
		<well name="H10"/>
		<well name="H11"/>
		<well name="H12"/>
	</mx:XMLList>
    <mx:VBox width="735" verticalGap="8" id="navBox" verticalAlign="top" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:HBox id="hbox7" verticalAlign="middle" width="100%" horizontalGap="1">
			<mx:Image source="{requestIcon}" id="image1"/>
			<mx:Label id="titleLabel" styleName="titleLabel" 
					  text="{(parentApplication.isInternalExperimentSubmission ? 'New ' + ( requestCategoryName != '' ? requestCategoryName : 'Experiment') + ' Order' : 'Upload experiment data from a third party facility') + (coreFacility != null ? ' For ' + coreFacility.@facilityName : '')}" 
					  fontWeight="normal" paddingRight="50"/>
		</mx:HBox>		
	</mx:VBox>

 	<mx:VBox  width="100%" height="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" verticalGap="0" id="vbox1">
 	    	
		<mx:TabNavigator id="theTab"  styleName="form" width="100%" 
			creationPolicy="all" 
			height="100%" paddingLeft="8" 
			paddingRight="4" paddingBottom="4"  paddingTop="6" change="enableNextButtons()">
			
		    <experiment:TabSetupView id="setupView">		    	
		    </experiment:TabSetupView>
			
			<experiment:TabNotesView id="notesView" enabled="false">
			</experiment:TabNotesView>
			
			<experiment:TabSampleSetupView id="sampleSetupView">		    	
			</experiment:TabSampleSetupView>
						
		    <experiment:TabSeqSetupView id="seqSetupView" enabled="false">		    	
		    </experiment:TabSeqSetupView>			
			
			<experiment:TabSeqSetup1View id="seqSetup1View" enabled="false">
			</experiment:TabSeqSetup1View>			
		   
		    <experiment:TabAnnotationView id="annotationView">		    	
		    </experiment:TabAnnotationView> 
		    
		    <experiment:TabSamplesBase id="samplesView">		    	
		    </experiment:TabSamplesBase>
			
			<experiment:TabHybSetupView id="hybSetupView">				
			</experiment:TabHybSetupView>
			
			<experiment:TabHybsView id="hybsView">				
			</experiment:TabHybsView>
			
			<experiment:TabVisibilityView id="visibilityView">
			</experiment:TabVisibilityView>
			
			<experiment:TabBioinformaticsView id="bioinformaticsView">
			</experiment:TabBioinformaticsView>
			
			<experiment:TabConfirmBase id="confirmView">				
			</experiment:TabConfirmBase>
			
			<experiment:ExperimentDownloadView id="downloadView" label="Files" borderStyle="none" uploadButtonsVisible="true" removeFileButtonsVisible="true" visible="false" includeInLayout="false" request="{this.request}" >
			</experiment:ExperimentDownloadView>
				
		</mx:TabNavigator>
	</mx:VBox>  
	
 	   <mx:ControlBar width="100%" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" horizontalGap="1">
 		<mx:ViewStack id="buttonStack" width="100%">
	 	    <mx:HBox width="100%"  verticalAlign="middle">
				<mx:Button label="Back" enabled="false" visible="true" id="backButton" click="previousTab()" disabledIcon="@Embed(source='../../assets/arrow_left_disabled.png')" icon="@Embed(source='../../assets/arrow_left.png')" fontWeight="normal"/>
				<mx:Button id="nextButton"  label="Next" enabled="false" click="nextTab()" icon="@Embed(source='../../assets/arrow_right.png')" labelPlacement="left" fontWeight="normal">
					<mx:disabledIcon>@Embed(source='../../assets/arrow_right_disabled.png')</mx:disabledIcon>
				</mx:Button>
				<mx:ViewStack id="confirmButtonStack" width="100%">
							<mx:HBox  height="26" horizontalScrollPolicy="off" width="100%"   verticalAlign="middle">
							  <mx:ViewStack id="userWarningStack" width="100%">
							      <mx:HBox width="100%">
							      </mx:HBox>
								  <mx:HBox  id="userWarningsBoxSamples" width="100%" horizontalScrollPolicy="off" visible="{userWarningsSamples == '' ? false : true}" backgroundAlpha="{userWarningsSamples == '' ? 0 : 1}" backgroundColor="#FFFEC3"  borderColor="#000000" borderStyle="{userWarningsSamples == '' ? 'none' : 'solid'}" >
										<mx:Label  text="{userWarningsSamples}" width="100%" />
								  </mx:HBox>							  	
								  <mx:HBox id="userWarningsBoxSampleSetup"  width="100%" horizontalScrollPolicy="off" visible="{userWarningsSampleSetup == '' ? false : true}" backgroundAlpha="{userWarningsSampleSetup == '' ? 0 : 1}" backgroundColor="#FFFEC3" borderColor="#000000" borderStyle="{userWarningsSampleSetup == '' ? 'none' : 'solid'}">
										<mx:Label  text="{userWarningsSampleSetup}" width="100%" />
								  </mx:HBox>
								  <mx:HBox id="userWarningsBoxHybSetup"  horizontalScrollPolicy="off" visible="{userWarningsHybSetup == '' ? false : true}"  backgroundAlpha="{userWarningsHybSetup == '' ? 0 : 1}" backgroundColor="#FFFEC3"  borderColor="#000000" borderStyle="{userWarningsHybSetup == '' ? 'none' : 'solid'}">
										<mx:Label  text="{userWarningsHybSetup}" width="100%" />
								  </mx:HBox>
							  </mx:ViewStack>
							</mx:HBox>
								
							<mx:HBox height="100%" width="100%"  verticalAlign="middle" horizontalAlign="left" horizontalScrollPolicy="off" horizontalGap="10">
								<mx:Button label="Submit" id="submitButton" enabled="true" icon="@Embed('../../assets/tick.png')" click="validateAndSubmitRequest()"  visible="true" disabledIcon="@Embed(source='../../assets/tick_disable.png')"/>
								<mx:HBox id="agreeBox">
									<mx:CheckBox label="I authorize" id="agreeCheckbox" 
												 color="#307B0B" width="100%" click="agreeCheckbox_clickHandler(event)" fontWeight="bold" textAlign="left" fontSize="11" letterSpacing=".5" textIndent="0" labelPlacement="right" paddingLeft="0" paddingRight="0" leading="0" fontStyle="italic" errorColor="#307B0B" disabledColor="#307B0B" horizontalGap="1" textSelectedColor="#307B0B"/>
								</mx:HBox>
							</mx:HBox>
							<mx:HBox width="100%" horizontalAlign="left" verticalAlign="top" >
							</mx:HBox>
					    	
				</mx:ViewStack>
				<mx:HBox horizontalAlign="right">
					<mx:Button label="Cancel" id="cancelButton" click="promptToCancelRequest()"/>
				</mx:HBox>
	 	    </mx:HBox>
	 	    <mx:HBox width="100%"   horizontalAlign="left" paddingRight="1" id="hbox8">
				<mx:Spacer width="100%"/>
	 	        <util:DirtyNote id="dirty"  />
 				<mx:Button id="saveButton" label="Save" 
	            	icon="@Embed('../../assets/action_save.gif')" 
	            	click="validateAndSaveRequest()">
	            </mx:Button>

	 	    </mx:HBox>
			
 		</mx:ViewStack>
		   
 	   </mx:ControlBar>
 	   
	
    <mx:states>
    	<mx:State name="EditState">
			<mx:AddChild relativeTo="{navBox}" position="firstChild">
				<mx:HBox id="topBox" verticalAlign="middle">
					<mx:LinkButton label="Back" paddingRight="50" click="backToNavOrder()" icon="@Embed(source='../../assets/arrow_left.png')" textDecoration="underline" id="navBackButton" paddingLeft="0" textAlign="left" fontStyle="normal">    	        
					</mx:LinkButton>				

				</mx:HBox>
			</mx:AddChild>

    		<mx:AddChild relativeTo="{theTab}" position="lastChild">
    			<mx:Canvas label="Billing" width="100%" height="100%" id="billingTab">
    			 <mx:VBox width="100%" height="100%" verticalGap="4"  paddingBottom="4" paddingTop="4" paddingRight="4" paddingLeft="4" id="billingContainer" >
					<mx:HBox verticalGap="0" width="100%" horizontalGap="2" verticalAlign="middle">
					    <mx:Label text="Account"  
					       	 visible="{this.request.@isExternal != 'Y'}"
					    	styleName="formLabel"/>
					    <mx:ComboBox id="requestEditBillingAccountCombo"
					       	  labelField="@accountName" 
					       	  dataProvider="{filteredBillingAccounts}"							  
					       	  change="{this.dirty.setDirty();}"
					       	  visible="{this.request.@isExternal != 'Y'}"
							  width="400"
					       	  enabled="{(parentApplication.hasPermission('canWriteAnyObject') || parentDocument.selectedExperiment.@canUpdate == 'Y') ? true : false}"/>
					</mx:HBox>
					<mx:AdvancedDataGrid height="100%" width="100%" id="billingADConfirmGrid"  
					displayItemsExpanded="true"  
        			editable="false"  
        			sortExpertMode="true" horizontalScrollPolicy="auto"
        			sortableColumns="false"
					backgroundAlpha="0" borderStyle="solid" showHeaders="true" 
					fontSize="10" iconFunction="parentApplication.getTreeIcon">
						<mx:dataProvider>   
      						<mx:HierarchicalData source="{billingItems}"/> 
    					</mx:dataProvider> 
        				<mx:columns> 
	        				<mx:AdvancedDataGridColumn headerText="Group" dataField="@labName" editable="false" width="70" wordWrap="false"/>
	        				<mx:AdvancedDataGridColumn headerText="Acct" dataField="@accountName" editable="false" width="100" wordWrap="false" />
	        				<mx:AdvancedDataGridColumn headerText="Period" dataField="@idBillingPeriod" editable="false" width="70"  wordWrap="false"
							  itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingPeriod').DictionaryEntry,'@display', '@value', '@idBillingPeriod')}"/>
	        				<mx:AdvancedDataGridColumn  headerText="Price Category" wordWrap="true" dataField="@category" editable="false" width="200">
				              <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@category}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
	        				</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Description" wordWrap="true" dataField="@description" editable="false" width="200">
				              <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@description}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
	        				</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Notes"  dataField="@notes" editable="false" width="100" wordWrap="true">
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@notes}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Qty" dataField="@qty" editable="false" textAlign="right" width="50" >
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text  textAlign="right" text="{data.@qty}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Unit price" dataField="@unitPrice"  textAlign="right" editable="false" width="65" > 
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text  textAlign="right" text="{data.@unitPrice}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="%" dataField="@percentageDisplay" editable="false" textAlign="right" width="50" wordWrap="false"
	        				  rendererIsEditor="false"
							  itemRenderer="views.renderers.LabelPercentage" />                             
	        				<mx:AdvancedDataGridColumn headerText="Total price" dataField="@invoicePriceDisplay" textAlign="right" width="105" editable="false" >
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@invoicePrice}"  textAlign="right" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Status" dataField="@codeBillingStatus" editable="false" width="70" wordWrap="false"
							  itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingStatus').DictionaryEntry,'@display', '@value', '@codeBillingStatus')}"/>                 
	        			</mx:columns>
	        		</mx:AdvancedDataGrid>
				</mx:VBox>
    			</mx:Canvas>
    		</mx:AddChild>
    		<mx:SetStyle target="{dirty}" name="fontSize" value="9"/>
    		<mx:SetProperty target="{dirty}" name="label" value="Changes have not been saved"/>
    		<mx:SetStyle target="{hbox8}" name="horizontalGap" value="0"/>
			<mx:AddChild relativeTo="{hbox7}" position="lastChild">
				<mx:HBox  horizontalAlign="left" id="hbox6" horizontalGap="0" paddingBottom="4" paddingTop="4" verticalAlign="middle" paddingLeft="4">
					<mx:LinkButton label="View" fontSize="10" click="showViewWindow()" icon="@Embed(source='../../assets/page.png')" textDecoration="underline" id="linkbutton2" paddingLeft="0">    	        
					</mx:LinkButton>
					<mx:LinkButton label="Download Files" fontSize="10" click="{this.theTab.selectedChild = this.downloadView}" icon="@Embed(source='../../assets/download.png')" id="downloadsLink" textDecoration="underline" textAlign="left"/>
					<mx:LinkButton label="Printable form" fontSize="10" click="parentApplication.navExperimentView.experimentDetailView.detail.showPrintableRequestForm()" icon="@Embed(source='../../assets/page.png')" id="requestFormButton" textDecoration="underline" textAlign="left"/>
					<mx:LinkButton label="Analysis" fontSize="10" icon="@Embed(source='../../assets/map.png')" textDecoration="underline" 
								   enabled="false" disabledIcon="@Embed(source='../../assets/map_disable.png')" height="21" id="analysisButton" click="parentApplication.navExperimentView.experimentDetailView.detail.showRelatedAnalysis()" textAlign="left">
					</mx:LinkButton>
					<mx:Spacer width="10"/>
					<mx:Text visible="{this.request.@lastModifyDate != ''}" paddingLeft="8" text="{'Last modified  ' + this.request.@lastModifyDate}"  fontSize="9"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:SetProperty target="{navBox}" name="width" value="100%"/>
			<mx:AddChild relativeTo="{theTab}" position="firstChild">
				<mx:VBox label="Info" width="100%" height="100%" verticalGap="6">
					 <mx:HBox verticalGap="0" horizontalGap="0">
					       <mx:Text text="Experiment" width="100"  fontWeight="normal" styleName="formLabel"/>
					       <mx:TextInput editable="false" backgroundColor="#FFFFFF"  text="{requestCategoryName}" width="500"  fontWeight="normal"/>
					   </mx:HBox>
					
					<mx:HBox verticalGap="0" horizontalGap="0" width="100%" id="experimentCategoryHBox">
					    <mx:Spacer width="100"/>
					    <mx:TextInput editable="false" backgroundColor="#FFFFFF"  text="{experimentCategoryName}" fontWeight="normal" width="500"/>
					 </mx:HBox>
										
					<mx:HBox verticalGap="0" horizontalGap="0" width="700" verticalAlign="middle" visible="{parentDocument.selectedExperiment.@isExternal == 'Y'}" includeInLayout="{parentDocument.selectedExperiment.@isExternal == 'Y'}">
						<mx:Text text="Organism" width="100" id="labelOrg" styleName="formLabel"/>
						<mx:ComboBox labelField="@display"  id="sampleOrganismCombo" change="pickOrganism()">							
							<mx:dataProvider>{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.OrganismLite').DictionaryEntry.(@isActive != 'N' || @value == '')}</mx:dataProvider>
							<mx:width>{sampleOrganismCombo.selectedItem != null &amp;&amp; sampleOrganismCombo.selectedItem.@display == 'Other' ? 75 : 250}</mx:width>
						</mx:ComboBox>
						<mx:Label text="Please specify" paddingLeft="6" styleName="formLabel">
							<mx:visible>{parentDocument.selectedExperiment.@isExternal == 'Y' &amp;&amp; sampleOrganismCombo.selectedItem != null &amp;&amp; sampleOrganismCombo.selectedItem.@display == 'Other'}</mx:visible>
						</mx:Label>
						<mx:TextInput width="250" id="otherOrganism" maxChars="200" text="{request.@otherOrganism}" change="pickOrganism()">
							<mx:visible>{parentDocument.selectedExperiment.@isExternal == 'Y' &amp;&amp; sampleOrganismCombo.selectedItem != null &amp;&amp; sampleOrganismCombo.selectedItem.@display == 'Other'}</mx:visible>
						</mx:TextInput>				
					</mx:HBox>

					<mx:HBox verticalGap="0" horizontalGap="0">
						<mx:Label text="Lab Group"  width="100" fontWeight="normal" styleName="formLabel"/>
						<renderers:FilterComboBox id="requestEditLabCombo"
												  labelField="@name" 
												  close="this.dirty.setDirty();refreshLab()" 
												  enabled="{(parentApplication.hasPermission('canWriteAnyObject') || parentDocument.selectedExperiment.@canUpdate == 'Y') ? true : false}"
												  width="500" 
												  dataProvider="{labList}" >
						</renderers:FilterComboBox>
					</mx:HBox>					
					<mx:HBox id="projectBox" verticalGap="0" horizontalGap="0">
						<mx:Label text="Project"  width="100" fontWeight="normal" styleName="formLabel"/>
						<mx:ComboBox id="requestEditProjectCombo"
									 labelField="@name" 
									 change="this.dirty.setDirty()"
									 dataProvider="{projects}" 
									 enabled="true"
									 width="500"/>
					</mx:HBox>
					
					<mx:HBox verticalGap="0" horizontalGap="0" width="330" >
						<mx:Text text="Submitted by"  fontWeight="normal" width="100" styleName="formLabel"/>
						<mx:TextInput editable="false" backgroundColor="#FFFFFF"  text="{this.request.@submitterName}" />
					</mx:HBox>

					<mx:HBox horizontalGap="0">
						<mx:Text  text="Submit Date" width="100"  fontWeight="normal" styleName="formLabel"/>    				       
						<mx:TextInput editable="false" backgroundColor="#FFFFFF"  text="{this.request.@createDate}" paddingLeft="1"/>
					</mx:HBox>
					
					<mx:HBox verticalGap="0" horizontalGap="0">
						<mx:Label text="Owner"  width="100" fontWeight="normal" styleName="formLabel"/>
						<util:ComboBoxDatProvChangeFix id="ownerCombo"
									 labelField="@displayName" 
									 change="this.dirty.setDirty();" 
									 dataProvider="{appUsersForLab}" 
									 enabled="{(parentApplication.hasPermission('canWriteAnyObject') || parentDocument.selectedExperiment.@canUpdate == 'Y') ? true : false}"
									 width="500"/>
					</mx:HBox>
						
					<mx:HBox id="completedBox" horizontalGap="0" visible= "{parentDocument.selectedExperiment.@isExternal == 'N'}" includeInLayout="{parentDocument.selectedExperiment.@isExternal == 'N'}">
						<mx:Text  text="Completed" width="100"  fontWeight="normal" styleName="formLabel"/>    				       
						<mx:TextInput editable="false" backgroundColor="#FFFFFF"   text="{this.request.@completedDate}"/>
					</mx:HBox>
				   
					
					<mx:HBox id="designBox" verticalGap="0" horizontalGap="0" 
							 visible="{request.@captureLibDesignId != '' || (requestApplication.@hasCaptureLibDesign == 'Y' &amp;&amp; parentDocument.selectedExperiment.@isExternal == 'N')}"
							 includeInLayout="{request.@captureLibDesignId != '' || (requestApplication.@hasCaptureLibDesign == 'Y' &amp;&amp; parentDocument.selectedExperiment.@isExternal == 'N')}">
						<mx:Text width="100" fontWeight="normal" id="designLabel" text="Cap Lib Design" styleName="formLabel"/>
						<mx:TextInput focusOut="propagateDesign()" change="{this.dirty.setDirty()}" id="designText" width="100" text="{this.request.@captureLibDesignId}"/>
					</mx:HBox>
					
				</mx:VBox>
			</mx:AddChild>
			<mx:SetStyle target="{navBox}" name="verticalGap" value="0"/>
		</mx:State>
        <mx:State name="MicroarrayState">
    		<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
			<mx:RemoveChild target="{notesView}"/>
        </mx:State>
		<mx:State name="MicroarrayExternalState" >
			<mx:RemoveChild target="{sampleSetupView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
			<mx:RemoveChild target="{hybSetupView}"/>
		</mx:State>
        <mx:State name="MicroarrayAmendState" basedOn="AmendState">
    		<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
            <mx:SetStyle target="{hbox3}" name="paddingLeft" value="60"/>
        </mx:State>
        <mx:State name="QCState">
            <mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
            <mx:RemoveChild target="{annotationView}"/>
    		<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
			<mx:RemoveChild target="{notesView}"/>
        </mx:State>
		<mx:State name="QCExternalState" >
			<mx:RemoveChild target="{sampleSetupView}"/>
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{annotationView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
		</mx:State>
        <mx:State name="QCAmendState" basedOn="AmendState">
            <mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
            <mx:RemoveChild target="{annotationView}"/>
    		<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
        </mx:State>
		<mx:State name="SequencingEditState" basedOn="EditState">
			<mx:AddChild relativeTo="{this.completedBox}" position="after">
				<mx:HBox verticalGap="0" width="100%" horizontalGap="0" id="requestStatusBox">
					<mx:Text  width="100" text="Status" styleName="formLabel" />
					<mx:TextInput editable="false" backgroundColor="#FFFFFF" text="{request.@requestStatus}" width="500" />
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="SequencingChromaEditState" basedOn="SequencingEditState">
			<mx:RemoveChild target="{downloadView}"/>
			<mx:RemoveChild target="{downloadsLink}"/>
		</mx:State>
		<mx:State name="CapSeqState">
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{annotationView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
			<mx:RemoveChild target="{visibilityView}"/>
			<mx:RemoveChild target="{notesView}"/>
		</mx:State>
		<mx:State name="CapSeqEditState" basedOn="SequencingChromaEditState">
			<mx:RemoveChild target="{setupView}"/>
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{annotationView}"/>
			<mx:RemoveChild target="{confirmView}"/>
			<mx:RemoveChild target="{sampleSetupView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
			<mx:AddChild relativeTo="{this.requestStatusBox}" position="before">
				<mx:HBox verticalGap="0" width="100%" horizontalGap="0">
					<mx:Text  width="100" text="Container"  styleName="formLabel" />
					<mx:TextInput editable="false" backgroundColor="#FFFFFF" text="{request.@containerType}" width="500" />
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{this.requestStatusBox}" position="before">
				<mx:HBox verticalGap="0" width="100%" horizontalGap="0">
					<mx:Text  width="100" text="Drop Off Loc." styleName="formLabel" />
					<mx:ComboBox labelField="@display" width="300" id="sampleDropOffLocationCombo" dataProvider="{this.filteredSampleDropOffLocationList}"/>							
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="FragAnalState">
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{annotationView}"/>
			<mx:RemoveChild target="{visibilityView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
			<mx:RemoveChild target="{notesView}"/>
		</mx:State>
		<mx:State name="FragAnalEditState" basedOn="SequencingEditState">
			<mx:RemoveChild target="{setupView}"/>
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{annotationView}"/>
			<mx:RemoveChild target="{confirmView}"/>
			<mx:RemoveChild target="{sampleSetupView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
		</mx:State>
		<mx:State name="MitSeqState">
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{annotationView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
			<mx:RemoveChild target="{visibilityView}"/>
			<mx:RemoveChild target="{notesView}"/>
		</mx:State>
		<mx:State name="MitSeqEditState" basedOn="SequencingChromaEditState">
			<mx:RemoveChild target="{setupView}"/>
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{annotationView}"/>
			<mx:RemoveChild target="{confirmView}"/>
			<mx:RemoveChild target="{sampleSetupView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
		</mx:State>
		<mx:State name="CherryPickState">
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{annotationView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
			<mx:RemoveChild target="{visibilityView}"/>
			<mx:RemoveChild target="{notesView}"/>
		</mx:State>
		<mx:State name="CherryPickEditState" basedOn="SequencingEditState">
			<mx:RemoveChild target="{setupView}"/>
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{annotationView}"/>
			<mx:RemoveChild target="{confirmView}"/>
			<mx:RemoveChild target="{sampleSetupView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
		</mx:State>
		<mx:State name="IScanState">
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
			<mx:RemoveChild target="{visibilityView}"/>
			<mx:RemoveChild target="{notesView}"/>
		</mx:State>
		<mx:State name="IScanEditState" basedOn="SequencingEditState">
			<mx:RemoveChild target="{setupView}"/>
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{confirmView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
		</mx:State>
		<mx:State name="SequenomState">
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
			<mx:RemoveChild target="{visibilityView}"/>
			<mx:RemoveChild target="{notesView}"/>
		</mx:State>
		<mx:State name="SequenomEditState" basedOn="SequencingEditState">
			<mx:RemoveChild target="{setupView}"/>
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{confirmView}"/>
			<mx:RemoveChild target="{sampleSetupView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{visibilityView}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
			<mx:AddChild relativeTo="{this.requestStatusBox}" position="before">
				<mx:HBox verticalGap="0" width="100%" horizontalGap="0">
					<mx:Text  width="100" text="Container" styleName="formLabel" />
					<mx:TextInput editable="false" backgroundColor="#FFFFFF" text="{request.@containerType}" width="500" />
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="IsolationState" basedOn="SequenomState">
			
		</mx:State>
		<mx:State name="IsolationEditState" basedOn="SequenomEditState">
			
		</mx:State>
		<mx:State name="ClinicalSequenomState"  basedOn="SequenomState">
			<mx:RemoveChild target="{notesView}"/>
		</mx:State>
		<mx:State name="ClinicalSequenomEditState" basedOn="SequenomEditState">
			<mx:RemoveChild target="{notesView}"/>
		</mx:State>
        <mx:State name="SolexaBaseState">
            <mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{notesView}"/>
         </mx:State>
		<mx:State name="SolexaBaseExternalState">
			<mx:RemoveChild target="{sampleSetupView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
		</mx:State>
        <mx:State name="SolexaBaseAmendState" basedOn="AmendState">
        	<mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
        </mx:State>
        <mx:State name="QCEditState" basedOn="EditState">
            <mx:RemoveChild target="{setupView}"/>
            <mx:RemoveChild target="{annotationView}"/>
            <mx:RemoveChild target="{sampleSetupView}"/>
            <mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
            <mx:RemoveChild target="{confirmView}"/>
    		<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
         </mx:State>
        <mx:State name="MicroarrayEditState" basedOn="EditState">
            <mx:RemoveChild target="{setupView}"/>
            <mx:RemoveChild target="{sampleSetupView}"/>
            <mx:RemoveChild target="{confirmView}"/>
            <mx:RemoveChild target="{hybSetupView.numberOfHybsContainer}"/>
            <mx:RemoveChild target="{hybSetupView.slideSourceContainer}"/>
    		<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{bioinformaticsView}"/>
         </mx:State>
        <mx:State name="SolexaEditState" basedOn="EditState">
    		<mx:RemoveChild target="{seqSetupView}"/>
            <mx:RemoveChild target="{setupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
            <mx:RemoveChild target="{sampleSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
            <mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{confirmView}"/>
            <mx:AddChild relativeTo="{samplesView}" position="after">
            	<experiment:TabLanesView id="lanesView">            		
            	</experiment:TabLanesView>
            </mx:AddChild>
			<mx:AddChild relativeTo="{experimentCategoryHBox}" position="before">
				<mx:HBox verticalGap="0" horizontalGap="0" width="700" verticalAlign="middle">
					<mx:Text text="Application" width="100" id="labelApplication" styleName="formLabel"/>
					<mx:ComboBox labelField="@display"  id="requestApplicationComboBox" change="pickApplication()" width="570" enabled="{parentApplication.isAdminState ? true : false}">							
						<mx:dataProvider>{filteredAppList}</mx:dataProvider>
					</mx:ComboBox>
				</mx:HBox>
			</mx:AddChild>
			<mx:RemoveChild target="{experimentCategoryHBox}" />
         </mx:State>
		<mx:State name="SeqExternalEditState" basedOn="SolexaEditState">
			<mx:RemoveChild target="{lanesView}"/>	
			<mx:RemoveChild target="{bioinformaticsView}"/>
		</mx:State>
        <mx:State name="BaseSubmitState">
            <mx:SetStyle target="{agreeCheckbox}" name="fontStyle" value="italic"/>
            <mx:SetStyle target="{agreeCheckbox}" name="disabledColor" value="#307B0B"/>
            <mx:SetStyle target="{agreeCheckbox}" name="horizontalGap" value="1"/>
            <mx:SetStyle target="{agreeCheckbox}" name="textRollOverColor" value="#3A940E"/>
            <mx:SetStyle target="{agreeCheckbox}" name="textSelectedColor" value="#3A940E"/>
        </mx:State>
        <mx:State name="AmendState"> 
            <mx:AddChild relativeTo="{sampleSetupView}" position="before">
                <mx:VBox id="amendSetupView" label="Choose the services you want to add" paddingLeft="0" verticalGap="8" paddingRight="0" paddingTop="0" paddingBottom="0">
                	<mx:RadioButtonGroup id="radioGroupAmendType"/>
                	<mx:HBox width="100%" horizontalGap="8" verticalAlign="middle">
                		<mx:Label text="(1) Verify your lab group." width="194"/>
						<renderers:FilterComboBox dataProvider="{parentApplication.submitRequestLabList.source}" 
												  labelField="@name" 
												  prompt="Select a lab..."		
												  width="340"
												  close="{if (labCombo.selectedItem != null &amp;&amp; labCombo.selectedItem.@idLab != '')  getLabForAddingServices.send();}"
												  id="labCombo">
						</renderers:FilterComboBox>
                	</mx:HBox>
                	<mx:HBox id="appUserContainer" width="100%" horizontalGap="8">
                	       <mx:Text width="194">
                	              <mx:text>(2) Select the person who submitted the request (optional).</mx:text>
                	       </mx:Text>
                			<mx:ComboBox dataProvider="{appUsers}" 
                				selectedIndex="-1" labelField="@displayName" 
                			  		id="appUserCombo" width="340" change="getCandidateAmendExperiments()">
                			</mx:ComboBox>
                	</mx:HBox>
                	<mx:HBox width="100%" horizontalGap="8">
                		<mx:Text text="(3) Select the category that best describes the services that you will be adding to this request." width="194"/>
                		<mx:VBox width="100%" height="100%" verticalGap="8" fontSize="11">							
                		  <mx:VBox width="100%" height="100%" verticalGap="0">							
							<mx:Repeater id="requestCategoryRepeater1" dataProvider="{qcAmendRequestCategories}">
								<mx:HBox verticalGap="2" paddingRight="2" paddingBottom="2" width="100%" verticalAlign="middle">
								    <mx:HBox horizontalAlign="center">
								     <mx:Image 						    	
		            	                source="{requestCategoryRepeater1.currentItem.@icon}"/>						
								    </mx:HBox> 
							    	<mx:RadioButton id="radioAmendRequestCategory1" groupName="radioGroupAmendType" 
							    		label="{requestCategoryRepeater1.currentItem.@display}" width="206"
							    		value="{'QC-TO-' + requestCategoryRepeater1.currentItem.@value}" 
							    		click="highlightAmendRequestCategory();setAmendState();getCandidateAmendExperiments();this.checkAmendSetupCompleteness()" paddingTop="0" paddingBottom="1"/>							
  									<mx:Text text="{requestCategoryRepeater1.currentItem.@notes}" width="100%"/>		
								</mx:HBox>
							</mx:Repeater>
	                 	  </mx:VBox>
                		  <mx:HRule width="100%"/>
                		  <mx:VBox width="100%" height="100%" verticalGap="0">							
							<mx:Repeater id="requestCategoryRepeater2" dataProvider="{addLanesAmendRequestCategories}">
								<mx:HBox verticalGap="2" paddingRight="2" paddingBottom="2" width="100%" verticalAlign="middle">
								    <mx:HBox horizontalAlign="center">
								     <mx:Image 						    	
		            	                source="{requestCategoryRepeater2.currentItem.@icon}"/>						
								    </mx:HBox> 
							    	<mx:RadioButton id="radioAmendRequestCategory2" groupName="radioGroupAmendType" 
							    		label="{requestCategoryRepeater2.currentItem.@display}"  width="206"
							    		value="{'ADD-LANES-' + requestCategoryRepeater2.currentItem.@value}" 
							    		click="highlightAmendRequestCategory();setAmendState();getCandidateAmendExperiments();this.checkAmendSetupCompleteness()"   paddingBottom="1" paddingTop="0"/>							
  									<mx:Text text="Adding Sequence Lanes only" width="100%" fontStyle="italic" fontWeight="normal"/>		
							  	 				
								</mx:HBox>
							</mx:Repeater>
	                 	  </mx:VBox>
                		</mx:VBox>
                	</mx:HBox>
                	<mx:VBox width="100%" height="100%" verticalGap="0" id="vbox2">
                		<mx:HBox width="100%" verticalAlign="middle" horizontalGap="8">
                			<mx:Text text="(4) Select the existing request." id="label1" width="194"/>
                			<mx:HBox horizontalGap="4" height="100%" verticalAlign="middle" verticalGap="0"  horizontalAlign="right"  paddingLeft="0" paddingRight="0"  id="hbox3">
		    					<mx:Label text="Submitted"/>
		    					<mx:CheckBox id="lastWeekCheckbox" label="In last week" paddingRight="0" paddingLeft="0" horizontalGap="0"  >
		    						<mx:click>toggleDateCheckboxes(1);getCandidateAmendExperiments();</mx:click>
		    					</mx:CheckBox>
		    					<mx:CheckBox  id="lastMonthCheckbox" label="month"  paddingRight="0" paddingLeft="2" horizontalGap="0"  >
		    						<mx:click>toggleDateCheckboxes(2);getCandidateAmendExperiments();</mx:click>
		    					</mx:CheckBox>
		    					<mx:CheckBox  id="lastThreeMonthsCheckbox" label="3 months"  paddingRight="0" paddingLeft="2" horizontalGap="0"  selected="true">
		    						<mx:click>toggleDateCheckboxes(3);getCandidateAmendExperiments();</mx:click>
		    					</mx:CheckBox>
		    					<mx:CheckBox  id="lastYearCheckbox" label="year"  paddingLeft="2" paddingRight="0" horizontalGap="0"   >
		    						<mx:click>toggleDateCheckboxes(4);getCandidateAmendExperiments();</mx:click>
		    					</mx:CheckBox>
		    				</mx:HBox> 

                		</mx:HBox>
                		<mx:VBox width="100%" height="100%" id="browseTreeContainer" verticalGap="0">
                			<mx:Tree width="100%" height="150" id="browseTree"
                				 itemClick="{this.checkAmendSetupCompleteness()}" 
                				dataProvider="{getCandidateProjectRequestList.lastResult}"
                			showRoot="false" 
                			borderStyle="solid"
                			labelField="@label"
                			labelFunction="getTreeLabel" 
                			iconFunction="parentApplication.getTreeIcon" 
                			backgroundAlpha="1" dropShadowEnabled="true">
                			</mx:Tree>
                		</mx:VBox>
                	</mx:VBox>
                	
                </mx:VBox>
            </mx:AddChild>
			<mx:SetProperty target="{sampleSetupView}" name="enabled" value="false"/>
            <mx:RemoveChild target="{setupView}"/>
			<mx:RemoveChild target="{notesView}"/>
			<mx:SetProperty target="{titleLabel}" name="text" value="Add Services to an Order"/>
			<mx:SetProperty target="{image1}" name="source" value="assets/flask_edit.png"/>
			
        </mx:State>
        <mx:State name="SolexaLaneAmendState" basedOn="SolexaBaseAmendState">
            <mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{sampleSetupView}"/>
        </mx:State>

    </mx:states>
    

  
    
</mx:VBox> 
