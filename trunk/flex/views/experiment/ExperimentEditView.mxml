<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"     
	xmlns:SubmitRequestView="SubmitRequestView.*" 
    xmlns:views="views.*" 
    xmlns:util="views.util.*"  
    xmlns:experiment="views.experiment.*"
    showEffect="{parentApplication.fadeIn}" hideEffect="{parentApplication.fadeOut}" 
	label="Submit Request" width="100%" height="100%"  
	creationPolicy="all" show="init()"
	headerHeight="22" paddingBottom="2" paddingLeft="1" paddingRight="1" layout="vertical">

    
   <mx:HTTPService  
    id="getNewRequest" 
    url="GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetNewRequest(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get request', event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idRequest>0</idRequest>    	
    </mx:request>
  </mx:HTTPService>

   <mx:HTTPService  
    id="getRequestToClone" 
    url="GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequestToClone(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get request to copy', event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idRequest>{requestToClone.@idRequest}</idRequest>    	
    </mx:request>
  </mx:HTTPService>


   <mx:HTTPService  
    id="getRequest" 
    url="GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequest(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get existing request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="saveNewRequest" 
    url="SaveRequest.gx"
    destination="saveNewRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveNewRequest(event)"
    fault="parentApplication.onFailHttpRequest('Failed to submit request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>

  <mx:HTTPService  
    id="saveExistingRequest" 
    url="SaveRequest.gx"
    destination="saveExistingRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveExistingRequest(event)"
    fault="parentApplication.onFailHttpRequest('Failed to save request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="getLab" 
    url="GetLab.gx"
    destination="getLab"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetLab(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get group', event)"
    method="POST"
    useProxy="false">
   </mx:HTTPService>

  
	<mx:Script>
		<![CDATA[
		import mx.events.PropertyChangeEvent;
		import mx.events.CollectionEventKind;
		import mx.collections.ArrayCollection;
		import mx.events.CollectionEvent;
		import mx.controls.Alert;
		import mx.core.UIComponent;
		import mx.core.Container;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.events.FaultEvent;
		import mx.events.CloseEvent;
		import mx.managers.PopUpManager;
		import mx.events.CollectionEvent;
		import hci.flex.controls.DropdownLabel;
		import mx.validators.NumberValidator;
		import mx.validators.ValidationResult;
		import mx.events.ValidationResultEvent;
        
        
		[Bindable]
		private var errorMessage:String = "";
		[Bindable]
		private var warningMessage:String = "";
		        
        
    	[Bindable]
		public var selectedIdSlideProduct:Object;

        [Bindable]
        private var submittedIdRequest:String;
        [Bindable]
        private var submittedRequestNumber:String;

		[Bindable]
		public var requestCategoryName:String;
		
		[Bindable]
		public var applicationName:String;
		
		[Bindable]
		public var request:Object;
		
		[Bindable]
		public var samplePrepMethodList:XMLListCollection;
		[Bindable]
		public var sampleSourceList:XMLListCollection;
		[Bindable]
		public var filteredSampleTypeList:XMLListCollection;
		[Bindable]
		public var filteredSeqRunTypeList:XMLListCollection;
		[Bindable]
		public var filteredGenomeBuildList:XMLListCollection;
		[Bindable]
		public var filteredApplicationListForSubmitRequests:XMLListCollection;
		
		private var dictionarySorter:Sort;
		private var sampleTypeSorter:Sort;

		
		[Bindable]
		private var experimentCategoryName:String;
		[Bindable]
		private var billingAccountName:String;

		[Bindable]
		public var requestToClone:Object;
		
		[Bindable]
		public var userWarningsSamples:String = "";
		[Bindable]
		public var userWarningsSampleSetup:String = "";
		[Bindable]
		public var userWarningsHybSetup:String = "";
		
		public var concentrationValidator:NumberValidator = new NumberValidator();

		private function init():void {
			this.initializeData();
            this.checkSecurity();
            this.setupDataListeners();
            
            if (parentApplication.theViews.selectedChild == this) {
            	this.setupSubmitForm();
            }
		}

		public function checkDirty():void {
		}
				
		public function initializeData():void {

			samplePrepMethodList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SamplePrepMethod'));
        	var dictionarySorter:Sort = new Sort();
    	    dictionarySorter.compareFunction = this.sortDictionaryEntries;
	        samplePrepMethodList.sort = dictionarySorter;
	        samplePrepMethodList.refresh();
			

	        sampleSourceList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SampleSource'));
	        sampleSourceList.sort = dictionarySorter;
	        sampleSourceList.refresh();
			
        	
        	filteredSampleTypeList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SampleType'));
        	sampleTypeSorter = new Sort();
        	sampleTypeSorter.compareFunction = this.sortSampleTypes;	   
        	filteredSampleTypeList.sort = sampleTypeSorter;     	
        	filteredSampleTypeList.refresh();
			
        	
	        filteredSeqRunTypeList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SeqRunType'));
        	
        	
        	filteredGenomeBuildList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.GenomeBuild'));
        	        	
        	
        	
        	filteredApplicationListForSubmitRequests = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.Application'));
        	

			initFilters();

			if (theTab.contains(this.annotationView)) {
				this.annotationView.addNonStandardSampleColumns(); 
			}
			
	    	concentrationValidator.domain = "real";
			concentrationValidator.minValue = "0";
			concentrationValidator.maxValue = "99999";
			concentrationValidator.precision = 3;
	    	concentrationValidator.allowNegative = false;
	    	concentrationValidator.required = false;
			concentrationValidator.exceedsMaxError = "exceeds max.";
			concentrationValidator.invalidCharError = "contains invalid characters. Please enter a numeric value.";
			concentrationValidator.negativeError = "cannot be negative.";
			concentrationValidator.precisionError = "has too many digits beyond the decimal point.";
		}
		
		private function initFilters():void {
	        parentApplication.filteredProjectListForSubmitRequests.filterFunction = this.filterProject;
	        parentApplication.filteredProjectListForSubmitRequests.refresh();
			
			parentApplication.filteredSlideProductListForSubmitRequests.filterFunction = filterSlideProduct;
			parentApplication.filteredSlideProductListForSubmitRequests.refresh();
			

			samplePrepMethodList.filterFunction = filterSamplePrepMethod;
			samplePrepMethodList.refresh();
			
			filteredSeqRunTypeList.filterFunction = filterSeqRunType;
			filteredSeqRunTypeList.refresh();

			filteredGenomeBuildList.filterFunction = filterGenomeBuild;
			filteredGenomeBuildList.refresh();
			
			filteredApplicationListForSubmitRequests.filterFunction = filterApplication;
			filteredApplicationListForSubmitRequests.refresh();
			
			filteredSampleTypeList.filterFunction = filterSampleType;
			filteredSampleTypeList.refresh();
		}
		
		public function isSolexaState():Boolean {
			if (currentState == 'SolexaBaseState' ||
				currentState == 'SolexaEditState' ||
			    currentState == 'SolexaSetupState' ||
			    currentState == 'SolexaSetupPreppedState') {
				return true;    	
			} else {
				return false;
			}
		}
		
		public function isQCState():Boolean {
			if (currentState == 'QCState' ||
				currentState == 'QCEditState') {
				return true;    	
			} else {
				return false;
			}
		}
		
				
		public function isMicroarrayState():Boolean {
			if (currentState == 'MicroarrayState' ||
				currentState == 'MicroarrayEditState') {
				return true;    	
			} else {
				return false;
			}
		}
		
		public function isEditState():Boolean {
			if (currentState == 'SolexaEditState' ||
			    currentState == 'QCEditState' ||
			    currentState == 'MicroarrayEditState') {
				return true;    	
			} else {
				return false;
			}
		}
		public function isSolexaEditState():Boolean {
			if (currentState == 'SolexaEditState') {
				return true;    	
			} else {
				return false;
			}
		}
		
		private function getRequestCategoryName():void {
			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', this.request.@codeRequestCategory);
			requestCategoryName = requestCategory.@display.toString();
		}
		private function getExperimentCategoryName():void {
			var experimentCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', this.request.@codeApplication);
			experimentCategoryName = experimentCategory.@display.toString();
		}
		private function getBillingAccountName():void {
			var billingAccount:Object = null;
			for each(var lab:Object in parentApplication.promptedSubmitRequestLabList) {
				for each(var ba:Object in lab.billingAccounts.BillingAccount) {
					if (ba.@idBillingAccount == this.request.@idBillingAccount) {
						billingAccount = ba;
						break;
					}
						
				}
			}
			if (billingAccount != null) {
				billingAccountName = billingAccount.@accountName;
			}
		}
		
		
		public function checkSecurity():void {
			setupView.checkSecurity();			
		}
		
		public function isRequestPending():Boolean {
			if (this.setupView == null || request == null) {
				return false;
			} else if (request.@idRequest == '0'  && submittedIdRequest == null) {
				if (nextButton.enabled || this.submitButton.enabled) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		}
		
		private function promptToCancelRequest():void {
			if (isRequestPending()) {
				Alert.show( "The request has not been saved.  Are you sure you want to quit?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToCancelRequest,						
						parentApplication.iconWarning);
			} else {
				cancelRequest();
			}
			
		}
		
		private function onPromptToCancelRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	cancelRequest();
            }
        }
        
        private function promptToCancelPriorRequest():void {
			if (isRequestPending()) {
				Alert.show( "The request you have entered has not been saved.  Do you want to start over?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToCancelPriorRequest,						
						parentApplication.iconWarning);
			}
			
		}
		
		private function onPromptToCancelPriorRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	initializeSubmitForm();
            }
        }

        
        
        public function cancelRequest():void {
        	getNewRequest.send();
			initializeSubmitForm();
        	parentApplication.theViews.selectedIndex = 0;
        	parentApplication.theViews.visible = false;
        }
        

		public function setupSubmitForm():void {
			getNewRequest.send();
			buttonStack.selectedIndex = 0;
			initializeSubmitForm();			
		}
		
		
		public function initializeSubmitForm():void {	

			if (setupView == null) {
				return;
			}
			
			if (!this.contains(setupView)) {
				return;
			}
			setupView.enabled = true;
			theTab.selectedChild = setupView;
			
			requestToClone = null;
			submittedIdRequest = null;
			submittedRequestNumber = null;

			setupView.selectDefaultLab();
			setupView.projectCombo.selectedIndex = -1;
			setupView.requestTypeGroup.selectedValue = '';
			setupView.requestRadioAffy.selected = false;
			setupView.requestRadioAgilent.selected = false;
			setupView.requestRadioQC.selected = false;
			setupView.requestRadioSolexa.selected = false;
			setupView.requestRadioAffy.setStyle(   "fontWeight", "normal");	
			setupView.requestRadioAgilent.setStyle("fontWeight", "normal");	
			setupView.requestRadioQC.setStyle(     "fontWeight", "normal");	
			setupView.requestRadioSolexa.setStyle( "fontWeight", "normal");	


			samplesView.enabled = false;			
			
			if (theTab.contains(hybsView)) {
				hybsView.enabled = false;
			}

			if (theTab.contains(sampleSetupView)) {
				sampleSetupView.numberOfSamples.text = '';
				sampleSetupView.sampleTypeCombo.selectedIndex = -1;
				sampleSetupView.samplePrepMethodCombo.selectedIndex = -1;
				sampleSetupView.sampleOrganismCombo.selectedIndex = -1;
				sampleSetupView.enabled = false;
				if (theTab.contains(annotationView)) {
					annotationView.enabled = false;								
				}
				if (isSolexaState()) {
				    seqSetup1View.numberSequencingCyclesCombo.selectedIndex = 0;
					seqSetup1View.genomeBuildCombo.selectedIndex = 0;
					seqSetup1View.analysisInstructions.text = '';
				}
			}
					
			if (theTab.contains(hybSetupView)) {
				hybSetupView.label = "Hyb setup";
				hybSetupView.numberOfHybsContainer.visible = true;
				hybSetupView.slideSourceContainer.visible = true;

				hybSetupView.organismCombo.selectedIndex = -1;
				hybSetupView.applicationCombo.selectedIndex = -1;
				hybSetupView.slideProductCombo.selectedIndex = -1;
				hybSetupView.numberOfHybs.text = '';
				hybSetupView.isCatalogRadio.selected = true;
				hybSetupView.coreSlideSourceCheckbox.selected = false;
			 	hybSetupView.clientSlideSourceCheckbox.selected = false;
				hybSetupView.stripSlideSourceCheckbox.selected = false;

				hybSetupView.organismCombo.enabled = true;
				hybSetupView.applicationCombo.enabled = true;
				hybSetupView.slideProductCombo.enabled = true;
				hybSetupView.isCatalogRadio.enabled = true;
				hybSetupView.isCustomRadio.enabled = true;
				
				hybSetupView.enabled = false;
				
			}	
			
			
			if (theTab.contains(confirmView)) {
				confirmView.enabled = false;
				if (confirmButtonStack != null) {
					confirmButtonStack.selectedIndex = 0;
				}
			}
			
		}
		
		
		private function nextTab():void {
			theTab.selectedIndex++;
		}
		
		private function previousTab():void {
			if (theTab.selectedIndex > 0) {
				theTab.selectedIndex--;				
			}
		}
		
		public function enableNextButtons():void {
			if (theTab.selectedIndex < theTab.getChildren().length - 1) {
				confirmButtonStack.selectedIndex = 0;
				var nextChild:UIComponent = UIComponent(theTab.getChildAt(theTab.selectedIndex + 1));
				if (nextChild.enabled) {
					nextButton.enabled = true;
				} else {
					nextButton.enabled = false;
				}
					
			} else {
				nextButton.enabled = false;
				confirmButtonStack.selectedIndex = 1;
			}
			if (theTab.selectedIndex > 0) {
				var prevChild:UIComponent = UIComponent(theTab.getChildAt(theTab.selectedIndex - 1));
				if (prevChild != null && prevChild.enabled) {
					backButton.enabled = true;
				} else {
					backButton.enabled = false;
				}
			} else {
				backButton.enabled = false;
			}
			if (theTab.selectedChild == this.samplesView) {
				this.userWarningStack.selectedChild = this.userWarningsBoxSamples;
			} else if (!this.isEditState() && theTab.selectedChild == this.sampleSetupView) {
				this.userWarningStack.selectedChild = this.userWarningsBoxSampleSetup;
			} else if (this.isMicroarrayState() && theTab.selectedChild == this.hybSetupView) {
				this.userWarningStack.selectedChild = this.userWarningsBoxHybSetup;
			} else {
				this.userWarningStack.selectedIndex = 0;
			}
		}

		
		
		public function setRequestCategoryName():void {
			var requestCategory:Object = getRequestCategory();
			requestCategoryName = requestCategory.@display.toString();
			this.setupView.requestRadioAgilentSingleColor.setStyle("fontWeight",this.setupView.requestRadioAgilentSingleColor.selected    == true ?  "bold" : "normal");	
			this.setupView.requestRadioAffy.setStyle(   "fontWeight",this.setupView.requestRadioAffy.selected    == true ?  "bold" : "normal");	
			this.setupView.requestRadioAgilent.setStyle("fontWeight",this.setupView.requestRadioAgilent.selected == true ?  "bold" : "normal");	
			this.setupView.requestRadioQC.setStyle(     "fontWeight",this.setupView.requestRadioQC.selected      == true ?  "bold" : "normal");	
			this.setupView.requestRadioSolexa.setStyle( "fontWeight",this.setupView.requestRadioSolexa.selected  == true ?  "bold" : "normal");	
			
			this.confirmView.barcodeColumn.visible = false;        	
				
			if (this.setupView.requestRadioAffy.selected ||
			    this.setupView.requestRadioAgilent.selected ||
			    this.setupView.requestRadioQC.selected ||
			    this.setupView.requestRadioSolexa.selected) {
				this.setupView.requestTypeBox.styleName = "normalBox";
			} else {
				this.setupView.requestTypeBox.styleName = "requiredBox";
			}

			if (setupView.requestTypeGroup.selectedValue == 'SOLEXA') {
				this.currentState = 'SolexaBaseState';
				this.sampleSetupView.currentState = 'SolexaSetupState';
				this.seqSetup1View.seqRunTypeValidator.validate();
				this.seqSetup1View.numberSeqCyclesValidator.validate();
				
				this.samplesView.currentState = 'SolexaSamplesState';	
				this.sampleSetupView.samplesToBePreppedCheckbox.selected = true;
				for each (var sample:Object in samples) {
					sample.@seqPrepByCore = 'Y';
					sample.@numberSequencingLanes = '1';
					sample.@label = '';
				}
				this.samplesView.showHideColumns();		
				this.samplesView.checkSamplesCompleteness();
			
			} else {						
				if (setupView.requestTypeGroup.selectedValue == "QC") {
					this.currentState = 'QCState';
					this.sampleSetupView.currentState = 'QCSetupState';
					this.samplesView.currentState = 'QCSamplesState';				
					this.samplesView.showHideColumns();						
					this.samplesView.checkSamplesCompleteness();	

				} else {
					this.currentState = 'MicroarrayState';
					this.sampleSetupView.currentState = '';
					this.sampleSetupView.organismValidator.validate();
 					
					this.samplesView.currentState = 'MicroarraySamplesState';
					this.samplesView.showHideColumns();						
					this.hybSetupView.currentState = "";
					this.hybsView.currentState = '';
					
					this.hybSetupView.applicationCombo.selectedIndex = 0;
					filteredApplicationListForSubmitRequests.refresh();
					
					this.hybSetupView.slideProductCombo.selectedIndex = 0;
					parentApplication.filteredSlideProductListForSubmitRequests.refresh();
					this.hybSetupView.checkForSlideProductWarning();
					this.hybSetupView.numberOfHybsValidator.validate();
	
					// Hide/Show the channel 2 sample column
					if (requestCategory.@numberOfChannels == "2") {
						this.samplesView.currentState = 'MicroarraySamplesState';
						this.hybsView.currentState = "";
						hybsView.channel2SampleColumn.visible = true;
						samplesView.labelColumn.visible = true;
						confirmView.channel2SampleConfirmColumn.visible = true;
					} else {
						this.samplesView.currentState = 'MicroarrayOneColorSamplesState';
						this.hybsView.currentState = "HybsOneColorState";
						hybsView.channel2SampleColumn.visible = false;
						samplesView.labelColumn.visible = false;
						confirmView.channel2SampleConfirmColumn.visible = false;
						for each (var s:Object in samples) {
							s.@label = 'cy3';
						}
					}
	
					this.samplesView.checkSamplesCompleteness();	
					
				}
			}
			
			this.sampleSetupView.numberOfSamplesValidator.validate();
			this.sampleSetupView.sampleTypeValidator.validate();
			this.sampleSetupView.samplePrepMethodValidator.validate();
			
			filteredSampleTypeList.refresh();
			samplePrepMethodList.refresh();
			
			
		}
		
		public function getSamplesGridRowNumber(item:Object,col:int):String
        {
        	if (samples!= null) {
	           var x:int = samples.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
		public function getHybsGridRowNumber(item:Object,col:int):String
        {
        	if (hybs!= null) {
	           var x:int = hybs.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
		public function getSampleChannel1Name(item:Object,col:int):String
        {
        	var sampleName:String = "";
        	if (hybsView.hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel1) {
        				sampleName = sample.@name;
        				break;
        			} 
        		}
        	} 
        	return sampleName; 
        }
		public function getSampleChannel2Name(item:Object,col:int):String
        {
        	var sampleName:String = "";
        	if (hybsView.hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel2) {
        				sampleName = sample.@name;
        				break;
        			}
        		}
        	} 
        	return sampleName;
        }
		public function getSampleChannel1Number(item:Object,col:int):String
        {
        	var sampleNumber:String = "";
        	if (hybsView.hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel1) {
        				sampleNumber = sample.@number;
        				break;
        			}
        		}
        	} 
        	return sampleNumber;
        }
		public function getSampleChannel2Number(item:Object,col:int):String
        {
        	var sampleNumber:String = "";
        	if (hybsView.hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel2) {
        				sampleNumber = sample.@number;
        				break;
        			}
        		}
        	} 
        	return sampleNumber;
        }        
        
		public function getLanesGridRowNumber(item:Object,col:int):String
        {
        	if (lanes!= null) {
	           var x:int = lanes.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
		public function getLaneSampleName(item:Object,col:int):String
        {
        	var sampleName:String = "";
    		for each(var sample:Object in samples) {
    			if (sample.@idSample == item.@idSample) {
    				sampleName = sample.@name;
    				break;
    			}
    		}
        	return sampleName;
        }


		public function filterProject(item:Object):Boolean {
			var keep:Boolean = false;
			if (item.@idProject == '') {
				keep = true;
			} else if (setupView.labCombo.selectedItem != null) {
				if (item.@idLab == setupView.labCombo.selectedItem.@idLab) {
					keep = true;
				}
			}
			return keep;
		}
		
		public function addSamplePrepMethodFilter():void {
			samplePrepMethodList.filterFunction = filterSamplePrepMethod;
			samplePrepMethodList.refresh();
		}
		
		public function getRequestCategory():Object {
			var requestCategory:Object = null;
			if (!isEditState()) {
				requestCategory = setupView.getRequestCategory();
        	} else {
				requestCategory = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', request.@codeRequestCategory);
        	}
        	return requestCategory;			
		}
		
		private function filterSamplePrepMethod(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}
        	if (isEditState()) {
        		return true;
        	}
        	
        	if (item.@isActive == 'N') {
        		return false;
        	}
        	
        	// Exclude "other sample prep method" from solexa requests
        	// where the core facility will be performing the sample prep
        	if (isSolexaState()) {
        		if (sampleSetupView.currentState == "SolexaSetupState") {
        			if (item.@display.toString().indexOf("Other") > -1) {
        				return false;
        			}
        		}
        	}
        	
        
        	var doesMatchRequestCategory:Boolean = false;
        	var theSamplePrepMethods:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethodRequestCategory').DictionaryEntry.(@value != '' && @idSamplePrepMethod == item.@value.toString());
    	   	for each (var xref1:Object in theSamplePrepMethods) {
    	   		if (xref1.@codeRequestCategory.toString() == setupView.requestTypeGroup.selectedValue) {
	   				doesMatchRequestCategory = true;
    	   		    break;
    	   		}
    	   	}
        	
        	var doesMatchSampleType:Boolean = true;
        	if (sampleSetupView.sampleTypeCombo.selectedItem != null && 
        	    sampleSetupView.sampleTypeCombo.selectedItem.@value != null  &&
        	    sampleSetupView.sampleTypeCombo.selectedItem.@value != "") {
        	   	doesMatchSampleType = false;
        	   	var applicableSamplePrepMethods:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethodSampleType').DictionaryEntry.(@value != '' && @idSamplePrepMethod == item.@value.toString());
        	   	for each (var xref:Object in applicableSamplePrepMethods) {
        	   		if (xref.@idSampleType.toString() == sampleSetupView.sampleTypeCombo.selectedItem.@value.toString()) {
    	   				doesMatchSampleType = true;
	    	   		    break;
        	   		}
        	   	}
        	} 
        	
        	// If this is a solexa request, additionally filter on sequence run type
        	// (if specified).
        	var doesMatchSeqRunType:Boolean = true;
        	if (isSolexaState()) {
        		if (seqSetup1View.seqRunTypeCombo.selectedItem != null &&
        		    seqSetup1View.seqRunTypeCombo.selectedItem.@value != "") {
        			doesMatchSeqRunType = false;
	        	   	var matchingSamplePrepMethods:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethodSeqRunType').DictionaryEntry.(@value != '' && @idSamplePrepMethod == item.@value.toString());
    	    	   	for each (var matchingEntry:Object in matchingSamplePrepMethods) {
        		   		if (matchingEntry.@idSeqRunType.toString() == seqSetup1View.seqRunTypeCombo.selectedItem.@value.toString()) {
    	   					doesMatchSeqRunType = true;
	    	   			    break;
        	   			}
        	   		}
        		}
        		
        		
        	}
        	return doesMatchRequestCategory && doesMatchSampleType && doesMatchSeqRunType;
        }  
        
        private function filterSampleType(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}

        	
        	if (item.@isActive == 'N') {
        		return false;
        	}

        	var doesMatchRequestCategory:Boolean = false;
        	var requestCategory:Object = this.getRequestCategory();
        	var theSamplePrepMethods:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SampleTypeRequestCategory').DictionaryEntry.(@value != '' && @idSampleType == item.@value.toString());
    	   	for each (var xref1:Object in theSamplePrepMethods) {
    	   		if (xref1.@codeRequestCategory.toString() == requestCategory.@codeRequestCategory.toString()) {
	   				doesMatchRequestCategory = true;
    	   		    break;
    	   		}
    	   	}

			// If this is a solexa request, filter the sample type
			// by the selected application
			var doesMatchApplication:Boolean = true;
			if (this.isSolexaState()) {
				var codeApplication:Object = this.sampleSetupView.radioGroupSeqApp.selectedValue;
				if (codeApplication != null) {
					doesMatchApplication = false;
		        	var theSampleTypes:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SampleTypeApplication').DictionaryEntry.(@value != '' && @idSampleType == item.@value.toString());
		    	   	for each (var xref2:Object in theSampleTypes) {
		    	   		if (xref2.@codeApplication.toString() == codeApplication.toString()) {
			   				doesMatchApplication = true;
		    	   		    break;
		    	   		}
		    	   	}
	    	   	}
			}

        	return doesMatchRequestCategory && doesMatchApplication;
        }  

		private function filterApplication(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}
        	
        	if (item.@isActive == 'N') {
        		return false;
        	}
        	var doesMatchRequestCategory:Boolean = false;
        	var theApplications:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategoryApplication').DictionaryEntry.(@value != '' && @codeApplication == item.@value.toString());
    	   	for each (var xref:Object in theApplications) {
    	   		if (xref.@codeRequestCategory.toString() == getRequestCategory().@codeRequestCategory.toString()) {
	   				doesMatchRequestCategory = true;
    	   		    break;
    	   		}
    	   	}
        	
        	
        	return doesMatchRequestCategory;
        }  
        
        private function filterGenomeBuild(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}
        	if (isEditState()) {
        		return true;
        	}
        	
        	if (item.@isActive == 'N') {
        		return false;
        	}
        	var doesMatch:Boolean = false;
        	if (sampleSetupView.sampleOrganismCombo.selectedItem != null && 
        	    sampleSetupView.sampleOrganismCombo.selectedItem.@value != null  &&
        	    sampleSetupView.sampleOrganismCombo.selectedItem.@value != "") {
        	    if (item.@idOrganism.toString() == sampleSetupView.sampleOrganismCombo.selectedItem.@value.toString()) {
        	    	doesMatch = true;
        	    }
        	}
    	   	return doesMatch;
    	}

        private function filterSeqRunType(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}
        	if (isEditState()) {
        		return true;
        	}
        	
        	if (item.@isActive == 'N') {
        		return false;
        	}
        	
        	if (item.@value == "") {
        		return false;
        	}
        	var doesMatch:Boolean = true;
        	/*
        	if (sampleSetupView.samplePrepMethodCombo.selectedItem != null && 
        	    sampleSetupView.samplePrepMethodCombo.selectedItem.@value != null  &&
        	    sampleSetupView.samplePrepMethodCombo.selectedItem.@value != "" && 
        	    sampleSetupView.samplePrepMethodCombo.selectedItem.@display.toString().indexOf("Other") < 0) {
        	    doesMatch = false;
	        	var theSeqRunTypes:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethodSeqRunType').DictionaryEntry.(@value != '' && @idSeqRunType == item.@value.toString());
	    	   	for each (var xref1:Object in theSeqRunTypes) {
	    	   		if (xref1.@idSamplePrepMethod.toString() == sampleSetupView.samplePrepMethodCombo.selectedItem.@value.toString()) {
		   				doesMatch = true;
	    	   		    break;
	    	   		}
	    	   	}
    	   	}
    	   	*/
    	   	return doesMatch;
    	}
       
        public function filterSlideProduct(item:Object):Boolean {
        	if (item.@idSlideProduct == null || item.@idSlideProduct == "") {
        		return true;
        	}
        	
        	if (!isEditState() && item.@isActive == 'N') {
        		return false;	
        	}
        	
			var doesMatchRequestCategoryVendor:Boolean = true;
        	if (!isEditState()) {
				var requestCategory:Object = setupView.getRequestCategory();
        		doesMatchRequestCategoryVendor = false;
        		if (item.@idVendor == requestCategory.@idVendor) {
        			doesMatchRequestCategoryVendor = true;
        		}
        	} else {
        		doesMatchRequestCategoryVendor = false;
				var rCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', request.@codeRequestCategory);
        		if (item.@idVendor == rCategory.@idVendor) {
        			doesMatchRequestCategoryVendor = true;        			
        		}
        	}       	
        	
        	var doesMatchOrganism:Boolean = true;
        	if (hybSetupView.organismCombo.selectedItem != null && 
        	    hybSetupView.organismCombo.selectedItem.@value != null  &&
        	    hybSetupView.organismCombo.selectedItem.@value != "") {
        		if (item.@idOrganism == hybSetupView.organismCombo.selectedItem.@idOrganism) {
        			doesMatchOrganism = true;
        		} else {
        			doesMatchOrganism = false;
        		}
        	}
        	var doesMatchExperimentCategory:Boolean = true;
        	if (hybSetupView.applicationCombo.selectedItem != null && 
        	    hybSetupView.applicationCombo.selectedItem.@value != null &&
        	    hybSetupView.applicationCombo.selectedItem.@value != "") {
        		doesMatchExperimentCategory = false;
        		var applicationsForSlideProduct:XMLList  = item.applications.Application;
        		for(var x:Number = 0; x < applicationsForSlideProduct.length(); x++) {
        			if (applicationsForSlideProduct[x].@codeApplication == hybSetupView.applicationCombo.selectedItem.@value) {
        				doesMatchExperimentCategory = true;
        				break;
        			}
        		}
        	}
        	var doesMatchGroup:Boolean = true;
        	if (setupView.labCombo.selectedItem != null && setupView.labCombo.selectedItem.@idLab != "" && hybSetupView.isCustomRadio.selected) {
        		if (item.@isCustom == "Y" && item.@idLab == setupView.labCombo.selectedItem.@idLab) {
        			doesMatchGroup = true;
        		} else {
        			doesMatchGroup = false;
        		}
        	} else if (setupView.labCombo.selectedItem != null && setupView.labCombo.selectedItem.@idLab != "" && hybSetupView.isCatalogRadio.selected) {
        		if (item.@isCustom != "Y") {
        			doesMatchGroup = true;
        		} else {
        			doesMatchGroup = false;
        		}
        	}
        	
        	return doesMatchRequestCategoryVendor && doesMatchOrganism && doesMatchExperimentCategory && doesMatchGroup;
        }  
		
		
		
		
		public function cloneRequest(requestToClone:Object):void {
			this.requestToClone = requestToClone;
			getRequestToClone.send();
		}
		
		private function onGetRequestToClone(event:ResultEvent):void {
			
			var clonedRequest:Object = getRequestToClone.lastResult..Request.(@idRequest == requestToClone.@idRequest);
			if (!isMicroarrayState()) {
				clonedRequest.replace("hybridizations", <hybridizations></hybridizations>); 	
			} 
			if (!isSolexaState()) {
				clonedRequest.replace("sequenceLanes", <sequenceLanes></sequenceLanes>); 	
			} 
			
			request = clonedRequest;
			request.@idRequest = "0";
			request.@number = "";
			request.@idLab = setupView.labCombo.selectedItem.@idLab;
			request.@idAppUser = setupView.idAppUser;
			request.@idProject = setupView.projectCombo.selectedItem.@idProject;
			request.@codeRequestCategory = setupView.requestTypeGroup.selectedValue;

			var requestCategory:Object = getRequestCategory();
			
			// Clear out workflow fields from sample and hyb
			for each(var sample:Object in samples) {
				sample.@qualDate = '';
				sample.@qualCompleted = 'N';
				sample.@qualFailed = 'N';
				sample.@qualBypassed="N"; 
				sample.@qual260nmTo230nmRatio=""; 
				sample.@qual260nmTo280nmRatio=""; 
				sample.@qual28sTo18sRibosomalRatio=""; 
				sample.@qualAverageFragmentLength=""; 
				sample.@qualRINNumber=""; 
				sample.@qualCalcConcentration="";
				sample.@qualStatus = "";
				sample.@treatment = "";
				sample.@canChangeSampleName='Y';
				sample.@canChangeSampleType='Y';
				sample.@canChangeSampleConcentration='Y';
				sample.@canChangeSampleSource='Y';
				sample.@canChangeSamplePrepMethod='Y';
   				sample.@canChangeNumberSequencingLanes='Y';
   				sample.@canChangeNumberSequencingLanes='Y'; 
   				sample.@canChangeNumberSequencingCycles='Y';
   				sample.@numberSequencingLanes = '';
   				sample.@concentration = '';
   				sample.@seqPrepDate = '';
   				sample.@seqPrepLibConcentration = '';
   				sample.@seqPrepGelFragmentSizeFrom = '';
   				sample.@seqPrepGelFragmentSizeTo = '';
   				sample.@seqPrepStockLibVol = '';
   				sample.@seqPrepStockEBVol = '';
   				sample.@seqPrepStockEBVol = '';
   				sample.@qualFragmentSizeFrom =""; 
   				sample.@qualFragmentSizeTo="";
   				sample.@seqPrepQualCodeBioanalyzerChipType=""; 
   				sample.@seqPrepStockDate="";
   				
		
   				
   				if (isQCState()) {
   					sample.@idOrganism = '';
   				}
   				
   				if (!isQCState()) {
   					sample.@codeBioanalyzerChipType = '';
   					sample.@codeConcentrationUnit = '';
   				}
   				
   				if (sampleSetupView.currentState == 'SolexaSetupPreppedState') {
   					sample.@isAlreadyPrepped = 'Y';
   				} else  {
   					sample.@isAlreadyPrepped = 'N';
   					sample.@idSamplePrepMethod = '';
   				}
			}
			
			// If QC request, clear out sample annotations
			if (isQCState()) {
				this.clearOutSampleAnnotations();
			}
			
			for each(var hyb:Object in hybs) {
				 // If this is a 1 channel kind if request, clear out channel2 of the cloned request
				 if (requestCategory.@numberOfChannels != "2") {
					hyb.@idSampleChannel2 = "0";
				 }
				 hyb.@idArrayCoordinate="" 
				 hyb.@idScanProtocol="";
				 hyb.@extractionDate="";
				 hyb.@extractionFailed=""; 
				 hyb.@extractionBypassed="";
				 hyb.@hybFailed="";
				 hyb.@hybBypassed="";
				 hyb.@idSlide = "";
				 hyb.@idFeatureExtractionProtocol="";
				 hyb.@hybDate; 
				 hyb.@idLabeledSampleChannel1="";
				 hyb.@idLabeledSampleChannel2=""
				 hyb.@slideNumber="";
				 hyb.@slide="";
				 hyb.@hasResults=""; 
				 hyb.@slideBarcode="";
				 hyb.@hybCompleted="N"; 
				 hyb.@extractionCompleted="N";
				 hyb.@arrayCoordinate="";
				 hyb.@idLabelingProtocolChannel1=""; 
				 hyb.@idLabelingProtocolChannel2="";
				 hyb.@idScanProtocolChannel1=""; 
				 hyb.@idScanProtocolChannel2="";
				 hyb.@idHybProtocolChannel1=""; 
				 hyb.@idHybProtocolChannel2="";
				 hyb.@idFeatureExtractionProtocolChannel1=""; 
				 hyb.@idFeatureExtractionProtocolChannel2="";
				 hyb.@labelingYieldChannel1="";
				 hyb.@codeLabelingReactionSizeChannel1="STD"; 
				 hyb.@labelingYieldChannel2=""; 
				 hyb.@numberOfReactionsChannel2="" 
				 hyb.@codeLabelingReactionSizeChannel2="STD"; 
				 hyb.@labelingFailedChannel1="N"; 
				 hyb.@labelingFailedChannel2="N"; 
				 hyb.@labelingCompleteChannel1="N"; 
				 hyb.@labelingCompleteChannel2="N"; 
				 hyb.@labelingStatusChannel1=""; 
				 hyb.@labelingStatusChannel2=""; 
				 hyb.@arrayCoordinateName=""; 
				 hyb.@hybStatus=""; 
				 hyb.@extractionStatus="";
			     hyb.@canChangeSampleDesignations='Y';
			     hyb.@canChangeSlideSource='Y';
			     hyb.@canChangeSlideDesign='Y';
			}

			// Initialize the seq run type on the sample
			// to the default seq run type of the sample prep method
			if (this.isSolexaState()) {
				var idSeqRunType:String = this.sampleSetupView.getDefaultIdSeqRunType();
				if (idSeqRunType != null) {
					for each(var s:Object in samples) {
						s.@idSeqRunType = idSeqRunType;
					}
				}
			}
			
			// Make sure we render the annotation tab because
			// otherwise we won't activate the renderer code that
			// hides/shows the sample annotation columns in the samples
			// grid
			if (theTab.contains(annotationView)) {
				theTab.selectedChild = this.annotationView;
			}
						
			callLater(initializeControls);
			callLater(hybSetupView.assignSlideNumbers);
			
			
			callLater(sampleSetupView.checkSampleSetupCompleteness);
			callLater(samplesView.checkSamplesCompleteness);
			callLater(hybSetupView.checkHybSetupCompleteness);
			callLater(hybsView.checkHybsCompleteness);
			
			
		}
		

		
		public function clearOutSampleAnnotations():void {
			for each(var annotation:Object in sampleCharacteristicEntries) {
				for each(var sample:XML in samples) {
					sample.@AGE = '';
					this.request.@AGE = 'N';
					sample.@CELLLINE = '';
					this.request.@CELLLINE = 'N';
					sample.@CELLTYPE = '';
					this.request.@CELLTYPE = 'N';
					sample.@CLININFO =  '';
					this.request.@CLININFO = 'N';
					sample.@COMPOUND =  '';
					this.request.@COMPOUND = 'N';
					sample.@DOSE =  '';
					this.request.@DOSE = 'N';
					sample.@DISSTATE =  '';
					this.request.@DISSTATE = 'N';
					sample.@GENMOD =  '';
					this.request.@GENMOD = 'N';
					sample.@GROWTHCOND =  '';
					this.request.@GROWTHCOND = 'N';
					sample.@GENOTYPE =  '';
					this.request.@GENOTYPE = 'N';
					sample.@INDIV =  '';
					this.request.@INDIV = 'N';
					sample.@ORGPART = '';
					this.request.@ORGPART = 'N';
					sample.@OTHER =  '';
					this.request.@OTHER = 'N';
					sample.@SEX =  '';
					this.request.@SEX = 'N';
					sample.@TEMP =  '';
					this.request.@TEMP = 'N';
					sample.@TIME =  '';
					this.request.@TIME = 'N';
				}
			}
		}

		public function setupEditForm(theRequest:Object):void {
			request = theRequest;
			currentState = '';
			samplesView.currentState = '';


			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory',request.@codeRequestCategory);
			requestCategoryName = requestCategory.@display.toString();

			buttonStack.selectedIndex = 1;
			
			var prevSelectedTab:Container = theTab.selectedChild;			
			
			annotationView.enabled = true;
			samplesView.enabled = true;			

			// Make sure we render the annotation tab because
			// otherwise we won't activate the renderer code that
			// hides/shows the sample annotation columns in the samples
			// grid
			if (theTab.contains(annotationView)) {
				theTab.selectedChild = this.annotationView;
			} 

			var canChangeSlide:Boolean = false;			
			if (parentApplication.hasPermission("canWriteAnyObject")) {
				canChangeSlide = true;		
			} else {
				for each(var hyb:Object in hybs) {
					if (hyb.@canChangeSlideDesign == "Y") {
						canChangeSlide = true;
						break;
					}
				}
			}

			if (parentApplication.hasPermission("canWriteAnyObject")) {
				samplesView.currentState
				samplesView.addSampleButton.visible = true;
				samplesView.copySampleButton.visible = true;
				samplesView.deleteSampleButton.visible = true;
				samplesView.clearSamplesButton.visible = true;
			} else {
				samplesView.addSampleButton.visible = false;
				samplesView.copySampleButton.visible = false;
				samplesView.deleteSampleButton.visible = false;
				samplesView.clearSamplesButton.visible = false;
			}
			

			if (request.@codeRequestCategory == 'SOLEXA') {
				currentState = 'SolexaEditState';
				this.annotationView.currentState = 'EditState';			
				if (parentApplication.hasPermission("canWriteAnyObject")) {
					samplesView.currentState = 'SolexaSamplesAdminState';						
				} else {
					samplesView.currentState = 'SolexaSamplesEditState';					
				}
				samplesView.showHideColumns();
					
 				if (parentApplication.hasPermission("canWriteAnyObject")) {
					lanesView.currentState = 'LanesAdminState';
				} else {
					lanesView.currentState = '';
				} 

			} else if (request.@codeRequestCategory == 'QC') {
				currentState = 'QCEditState';
				if (parentApplication.hasPermission("canWriteAnyObject")) {
					samplesView.currentState = 'QCSamplesAdminState';						
				} else {
					samplesView.currentState = 'QCSamplesEditState';					
				}
				samplesView.showHideColumns(); 

			} else {
				currentState = 'MicroarrayEditState';
				this.hybSetupView.currentState = 'EditState';
				this.annotationView.currentState = 'EditState';			
				if (parentApplication.hasPermission("canWriteAnyObject")) {
					samplesView.currentState = 'MicroarraySamplesAdminState';	
					hybsView.currentState = 'HybsAdminState';	
				} else {
					samplesView.currentState = 'MicroarraySamplesEditState';					
					hybsView.currentState = 'HybsEditState';				
				}
				samplesView.showHideColumns();


				hybSetupView.organismCombo.enabled = canChangeSlide;
				hybSetupView.applicationCombo.enabled = canChangeSlide;
				hybSetupView.slideProductCombo.enabled = canChangeSlide;
				hybSetupView.isCatalogRadio.enabled = canChangeSlide;
				hybSetupView.isCustomRadio.enabled = canChangeSlide;
				

				hybSetupView.label = "Slide";
				hybSetupView.numberOfHybsContainer.visible = false;
				hybSetupView.slideSourceContainer.visible = false;
				
			}
			
			if (this.request.analysisExperimentItems.hasOwnProperty("AnalysisExperimentItem")) {
				this.analysisButton.enabled = true;
			} else {
				this.analysisButton.enabled = false;
			}

			this.getRequestCategoryName();
			this.getBillingAccountName();
			this.getExperimentCategoryName();
			
			callLater(postSetupEditForm);

		}
		
		private function postSetupEditForm():void {
			initializeControls();
			
			if (this.isMicroarrayState()) {
				hybSetupView.assignSlideNumbers();			
			}
			samplesView.checkSamplesCompleteness();
			if (this.isMicroarrayState()) {
				hybSetupView.checkHybSetupCompleteness();
				hybsView.checkHybsCompleteness();
			}
			this.dirty.resetDirty();
		}
		
		public function removeDataListeners():void {
			hybs.removeEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingHybDataChange);
			samples.removeEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
			lanes.removeEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingLaneDataChange);			
			
		}
		
		public function setupDataListeners():void {
			hybs.addEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingHybDataChange);
			samples.addEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
			lanes.addEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingLaneDataChange);			
			
		}
		
		
		
		private function onGetNewRequest(event:ResultEvent):void {
			request = getNewRequest.lastResult..Request.(@idRequest = '0');
			request.@idAppUser = setupView.idAppUser;
			
			if (theTab.contains(this.annotationView)) {
				this.annotationView.addNonStandardSampleColumns();
			} 

		}
		
		private function refreshLab():void {
			if (requestEditLabCombo.selectedItem != null && requestEditLabCombo.selectedItem.@idLab != '') {
				var params:Object = new Object();
				params.idLab = requestEditLabCombo.selectedItem.@idLab;
				getLab.send(params);
			}
		}

		private function initializeControls():void {
			
			if (isEditState()) {
				for each(var l:Object in parentApplication.promptedSubmitRequestLabList) {
					if (l.@idLab == request.@idLab) {
						requestEditLabCombo.selectedItem = l;
						refreshLab();
						break;
					}
				}
			}
			
			if (theTab.contains(sampleSetupView)) {
				sampleSetupView.numberOfSamples.text = new String(request.samples.Sample.length());
				sampleSetupView.sampleTypeCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SampleType',request.@idSampleTypeDefault);
				sampleSetupView.samplePrepMethodCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SamplePrepMethod', request.@idSamplePrepMethodDefault);
				
				if (currentState == 'QCState') {
					for each(var chipType:Object in sampleSetupView.bioanalyzerChipTypeGrid.dataProvider) {
						if (chipType.@codeBioanalyzerChipType == request.@codeBioanalyzerChipType) {
							chipType.@isSelected = 'true';
							break;
						}
					}
				}
			}

			
			if (isMicroarrayState() || this.isSolexaState()) {
				sampleSetupView.sampleOrganismCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Organism', request.@idOrganismSampleDefault);
			}
			
			if (isMicroarrayState()) {
				selectedIdSlideProduct = request.@idSlideProduct;
				hybSetupView.numberOfHybs.text = new String(request.hybridizations.Hybridization.length());
				var theSlideProduct:Object = parentApplication.getSlideProductList.lastResult.SlideProduct.(@idSlideProduct == request.@idSlideProduct);
				hybSetupView.organismCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Organism', theSlideProduct.@idOrganism);

				var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', request.@codeApplication);
				hybSetupView.applicationCombo.selectedItem = application[0];
				hybSetupView.checkForSampleTypeCompatibility();

				hybSetupView.initializeSlideProductCombo();
				hybSetupView.slideProductValidator.validate();
				initializeSlideDesigns();

				hybSetupView.coreSlideSourceCheckbox.selected = true;
				
			}			
			
			if (theTab.contains(setupView)) {
				theTab.selectedChild = this.setupView;			
			} else {
				theTab.selectedChild = this.samplesView;
			}
			
			if (isEditState()) {
				visibilityCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Visibility', request.@codeVisibility);
			} 
			
			
			
		}
		
		
		public function initializeSlideDesigns():void {
			var slideDesign:Object = hybSetupView.getDefaultSlideDesign();
			if (slideDesign != null) {
				for each (var hyb:Object in hybs) {
					hyb.@idSlideDesign = slideDesign.@idSlideDesign;
				}
			}
		}
		

		
		
		
		public function sortSampleCharacteristics(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var sc1:String = obj1.@sampleCharacteristic;
				var sc2:String = obj2.@sampleCharacteristic;
				
				if (sc1 == 'Other') {
					return 1;
				} else if (sc2 == 'Other') {
					return  -1;
				} else {
					if (sc1 < sc2) {
						return -1;
					} else if (sc1 > sc2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}	
        
        public function isSampleTypeCompatibile():Boolean {
        	var compatible:Boolean = true;
        	var sampleTypeX:Object = null;
        	if (this.isSolexaState()) {
        		return compatible;		
        	}
        	
        	if (isEditState()) {
        		if (request.@codeApplication!= '' &&
	        	    request.@idSampleTypeDefault != '') {
    	    	    compatible = false;
					for each(sampleTypeX in parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SampleTypeApplication')) {
						if (sampleTypeX.@codeApplication == request.@codeApplication &&
					    	sampleTypeX.@idSampleType == request.@idSampleTypeDefault) {
							compatible = true;
							break;
					}
				}        		    	
        	}

        	} else {
	        	if (hybSetupView.applicationCombo.selectedItem != null &&
	        	    hybSetupView.applicationCombo.selectedItem.@value != '' &&
	        	    sampleSetupView.sampleTypeCombo.selectedItem != null &&
	        	    sampleSetupView.sampleTypeCombo.selectedItem.@value != '') {
	        	    compatible = false;
					for each(sampleTypeX in parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SampleTypeApplication')) {
						if (sampleTypeX.@codeApplication == hybSetupView.applicationCombo.selectedItem.@value &&
						    sampleTypeX.@idSampleType == sampleSetupView.sampleTypeCombo.selectedItem.@value) {
							compatible = true;
							break;
						}
					}        		    	
	        	}
        		
        	}
        	return compatible;
        }        

		private function validateRequest():void {
			errorMessage = '';
			warningMessage = '';
			
			// Make sur lab and billing acount filled in
			if (isEditState()) {
				if (requestEditLabCombo.selectedItem == null || requestEditLabCombo.selectedItem.@idLab == '') {
					errorMessage += "Lab must be specified.\n\n";
				}
				if (requestEditBillingAccountCombo.selectedItem == null || requestEditBillingAccountCombo.selectedItem.@idBillingAccount == '') {
					errorMessage += "Billing account must be specified.\n\n";
				}
				if (requestEditProjectCombo.selectedItem == null || requestEditProjectCombo.selectedItem.@idProject == '') {
					errorMessage += "Project must be specified.\n\n";
				}
			}
			
			// Check for duplicate sampleNames
			var sampleNames:Dictionary = new Dictionary();
			for each(var s:Object in samples) {
				var sampleCount:int = 0;
				for each(var s1:Object in samples) {
					if (s.@name == s1.@name) {
						sampleCount++;
					}
				}
				sampleNames[s.@name.toString()] = sampleCount;
			}
			var dupSampleNames:String = '';
			for (var key:Object in sampleNames) {
				if (sampleNames[key] > 1) {
					if (dupSampleNames != '') {
						dupSampleNames += ',';
					}
					dupSampleNames += key;
				}
			}
			if (dupSampleNames != '') {
				errorMessage += 'Some of the samples (' + dupSampleNames + ') are named the same.  ';
				if (!isEditState()) {
					errorMessage += 'Please provide unique sample names.';
				}
				errorMessage += '\n\n';					
			}

			// All samples must be used on at least one hyb
			var allSamplesUsed:Boolean = true;
			var unusedSampleList:String = '';
			var unusedSampleCount:int = 0;
			var target:String = "";
			if (!isQCState()) {
				for each(var sample:Object in samples) {
					var useCount:int = 0;
					if (isSolexaState()) {
						useCount = getLaneCount(sample);
						target = "sequence lane";
					} else if (isMicroarrayState()) {
						useCount = getChannelCount(sample);
						target = "hybridization";
					}
					
					if (useCount == 0) {
						allSamplesUsed = false;
						if (unusedSampleList != '') {
							unusedSampleList += ', ';							
						}
						unusedSampleList += sample.@name;
						unusedSampleCount++;
						
					}
				}
				if (unusedSampleCount > 0) {
					if (unusedSampleCount == 1) {
						errorMessage += 'The sample ' + unusedSampleList + 
						' is not used on any ' + target + 's.  ';
						if (!isEditState()) {
							errorMessage += 'The request cannot be submitted until the unused sample is removed from the list or assigned to a ' + target + '.  ';	
						}
						errorMessage += '\n\n';					
					} else {
						errorMessage += 'The samples  (' + unusedSampleList + 
						')  are not used on any ' + target + 's.  ';
						if (!isEditState()) {
							errorMessage += 	'The request cannot be submitted until the unused samples are removed from the list or assigned to ' + target + 's.  ';
						}
						errorMessage += '\n\n';					
					}
				}
			}	
			
			// Warn if some of the arrays (on a multi-array slide) are not used.	
			if (isMicroarrayState()) {
				if (hybSetupView.slideProductCombo.selectedItem == null) {
					warningMessage += "No slide selected.\n";
				} else if (hybSetupView.slideProductCombo.selectedItem.@arraysPerSlide != '' && hybSetupView.slideProductCombo.selectedItem.@arraysPerSlide != 1) {
					if (hybs.length % hybSetupView.slideProductCombo.selectedItem.@arraysPerSlide != 0) {
						warningMessage = "There are unused arrays on the multi-array slide  '" + hybSetupView.slideProductCombo.selectedItem.@name +
						 "'.\n ";
					}
				}
				
			}
		}
		
		private function getChannelCount(sample:Object):int {
			var count:int = 0;
        	if (hybs!= null) {
        		for each(var hyb:Object in hybs) {
        			if (hyb.@idSampleChannel1 == sample.@idSample ||
        			    hyb.@idSampleChannel2 == sample.@idSample) {
        				count++;
        			}
        		}
        	} 								
        	return count;
		}
		public function getLaneCount(sample:Object):int {
			var count:int = 0;
        	if (lanes!= null) {
        		for each(var sequenceLane:Object in lanes) {
        			if (sequenceLane.@idSample == sample.@idSample) {
        				count++;
        			}
        		}
        	} 								
        	return count;
		}
		public function getLanes(sample:Object, numberOfLanes:int):ArrayCollection {
			var theLanes:ArrayCollection = new ArrayCollection();
        	if (theLanes!= null) {
        		for each(var sequenceLane:Object in lanes) {
        			if (sequenceLane.@idSample == sample.@idSample) {
        				theLanes.addItem(sequenceLane);
        				if (numberOfLanes != -1 && theLanes.length == numberOfLanes) {
        					break;
        				}
        			}
        		}
        	} 								
        	return theLanes;
		}
		
		private function validateAndSubmitRequest():void {
			
			// Only submit request if it is valid
			validateRequest();
			if (errorMessage != '') {
				Alert.show(errorMessage, "Error", Alert.OK, null, null, parentApplication.iconError);
				return;
			}
			if (warningMessage != '') {
				promptToSubmitRequest();
				return;
			}
			submitRequest();
		}
		
		private function validateAndSaveRequest():void {
			validateRequest();
			
			if (errorMessage != '') {
				Alert.show(errorMessage);
				return; 
			} else if (warningMessage != '') {
				promptToSaveRequest();
				return;

			} else {
				saveRequest();				
			}
		}

		
		
		
		private function submitRequest():void {
		 	
			request.@codeRequestCategory = setupView.requestTypeGroup.selectedValue;
			request.@idLab = setupView.labCombo.selectedItem.@idLab;
			request.@idAppUser = setupView.idAppUser;
			request.@idBillingAccount = setupView.billingAccountCombo.selectedItem.@idBillingAccount;
			request.@idProject = setupView.projectCombo.selectedItem.@idProject;
			if (currentState == 'QCState') {
				request.@codeBioanalyzerChipType = sampleSetupView.getSelectedCodeBioanalyzerChipType();
			}
			
			request.@idSampleTypeDefault = sampleSetupView.sampleTypeCombo.selectedItem.@value;
			
			if (currentState != 'QCState') {
				request.@idOrganismSampleDefault = sampleSetupView.sampleOrganismCombo.selectedItem.@value;
			}
			if (!isSolexaState()) {
				request.@idSamplePrepMethodDefault = sampleSetupView.samplePrepMethodCombo.selectedItem.@value;				
			}
			

			if (currentState == 'MicroarrayState') {
				request.@idSlideProduct = hybSetupView.slideProductCombo.selectedItem.@idSlideProduct;
				request.@codeApplication = hybSetupView.applicationCombo.selectedItem.@codeApplication;				
			}
			if (this.isSolexaState()) {
				request.@codeApplication = sampleSetupView.radioGroupSeqApp.selectedValue;				
			}
			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', request.@codeRequestCategory);
			
			request.replace("samples", <samples></samples>); 
			for each(var sample:Object in samples) {
				request.samples.appendChild(sample);
			}
			request.replace("hybridizations", <hybridizations></hybridizations>); 
			if (currentState == 'MicroarrayState') {
				for each(var hyb:Object in hybs) {
					if (requestCategory.@numberOfChannels != "2") {
						hyb.@idSampleChannel2 = "0";
					}
					request.hybridizations.appendChild(hyb);
				 }
			} else {
				request.@idSlideProduct = '';
			}
			request.replace("sequenceLanes", <sequenceLanes></sequenceLanes>); 
			if (isSolexaState()) {
				for each(var lane:Object in lanes) {
					request.sequenceLanes.appendChild(lane);
				}
			
			}			

			var params:Object = new Object();
			params.requestXMLString = request.toXMLString();
			params.idProject = setupView.projectCombo.selectedItem.@idProject;
			saveNewRequest.send(params);			
			
		}

		
		private function saveRequest():void {
			
			if (this.isMicroarrayState()) {
				request.@idSlideProduct = hybSetupView.slideProductCombo.selectedItem.@idSlideProduct;
				request.@codeApplication = hybSetupView.applicationCombo.selectedItem.@codeApplication;
			} 			
			
			request.replace("samples", <samples></samples>); 
			for each(var sample:Object in samples) {
				request.samples.appendChild(sample);
			}
			request.replace("hybridizations", <hybridizations></hybridizations>); 
			if (isMicroarrayState()) {
				for each(var hyb:Object in hybs) {
					request.hybridizations.appendChild(hyb);
				 }
			}
			request.replace("sequenceLanes", <sequenceLanes></sequenceLanes>); 
			if (isSolexaState()) {
				for each(var lane:Object in lanes) {
					request.sequenceLanes.appendChild(lane);
				}
			}
			

			request.@codeVisibility = visibilityCombo.selectedItem.@value;
			request.@idLab = requestEditLabCombo.selectedItem.@idLab;
			request.@idBillingAccount = requestEditBillingAccountCombo.selectedItem.@idBillingAccount;
			request.@idProject = requestEditProjectCombo.selectedItem.@idProject;

			var params:Object = new Object();
			params.requestXMLString = request.toXMLString();
			params.idProject = request.@idProject;
			saveExistingRequest.send(params);			
			
		}
		
		public function promptToSubmitRequest():void {
			Alert.show( warningMessage + "\n\nDo you want to submit the request anyway?", 
						"Warning", 
						(Alert.YES | Alert.NO), this, 
						onPromptSubmitRequest,
						parentApplication.iconWarning);
			
		}
		
		private function onPromptSubmitRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	warningMessage = '';
            	submitRequest();
            }
        }
		
		public function promptToSaveRequest():void {
			Alert.show( warningMessage + "\n\nDo you want to save the request anyway?", 
						"Warning", 
						(Alert.YES | Alert.NO), this, 
						onPromptSaveRequest,
						parentApplication.iconWarning);
			
		}
		
		private function onPromptSaveRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	warningMessage = '';
            	saveRequest();
            }
        }
		
		private function onSaveNewRequest(event:ResultEvent):void {
			if (saveNewRequest.lastResult.name() == "SUCCESS") {
				submittedIdRequest = saveNewRequest.lastResult.@idRequest;
				submittedRequestNumber = saveNewRequest.lastResult.@requestNumber;

				confirmButtonStack.selectedIndex = 2;
 				nextButton.enabled = false;
				backButton.enabled = false;
				
				setupView.enabled = false;
				sampleSetupView.enabled = false;
				if (theTab.contains(annotationView)) {
					annotationView.enabled = false;
				}
				samplesView.enabled = false;
				
				if (this.isSolexaState()) {
					this.seqSetup1View.enabled = false;
				}

				if (this.isSolexaEditState()) {
					lanesView.enabled = false;
				} else {
					if (theTab.contains(hybSetupView)) {
						hybSetupView.enabled = false;
					}
					if (theTab.contains(hybsView)) {
						hybsView.enabled = false;
					}					
				} 

				var message:String = 'Request #  ' + submittedRequestNumber + ' has been submitted.\nPlease print off the request form and deliver it along with your samples to the ' + parentApplication.getProperty(parentApplication.PROPERTY_CORE_FACILITY_NAME) + '.';
				Alert.show(message, "Request Submitted", 0, this, onNotifySubmitRequest);
				
			} else {
				Alert.show(saveNewRequest.lastResult..ACTMESSAGE.@TEXT);
			}
		}

		
		private function onNotifySubmitRequest(event:CloseEvent):void {
			if (event.detail==Alert.OK) {
				showPrintableRequestForm();
			} else {
				
			}

		}
		
		private function onSaveExistingRequest(event:ResultEvent):void {
			if (saveExistingRequest.lastResult.name() == "SUCCESS") {
				dirty.resetDirty();

			 	var parms:Object = new Object();
			 	parms.idRequest = request.@idRequest;
			 	getRequest.send(parms);
			 			
			 	parentApplication.navExperimentView.showEditView = true;	
				parentApplication.navExperimentView.detailView.refreshSavedExperiment(request.@idRequest); 
			} else {
				Alert.show(saveExistingRequest.lastResult..ACTMESSAGE.@TEXT);
			}
		}
		
		private function onGetRequest(event:ResultEvent):void {
			request = getRequest.lastResult..Request.(@idRequest = request.@idRequest);
		}

		private function showPrintableRequestForm():void {
			var url:URLRequest = new URLRequest('ShowRequestForm.gx?idRequest=' + submittedIdRequest);
			navigateToURL(url, '_blank');	
		}
		
		private function underlyingHybDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets 
				return;
			}
			dirty.setDirty();
		}
		private function underlyingSampleDataChange(event:CollectionEvent):void {
			var ignore:int = 0;
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets 
				return;
			}
			
			for each(var e:Object in event.items) {
				if (e is PropertyChangeEvent) {
					var pe:PropertyChangeEvent = PropertyChangeEvent(e);
					if (pe.property == "@channel1Count" || pe.property == "@channel2Count" || pe.property == "@laneCount" ) {
						ignore++;
					}
					if (pe.property == "@idSamplePrepMethod") {
						samples.removeEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
						samplesView.propagateSamplePrepMethod(String(pe.newValue));
						samples.addEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
					}else if (pe.property == "@idOrganism") {
						samples.removeEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
						samplesView.propagateOrganism(String(pe.newValue));
						samples.addEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
					}else if (pe.property == "@idNumberSequencingCycles") {
						samples.removeEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
						samplesView.propagateNumberSequencingCycles(pe.source);
						samples.addEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
					}         	
 				}
			}
			// Ignore change events on @channel1Count, @channel2Count
			if (ignore == event.items.length) {
				
			} else {
				dirty.setDirty();
				
			}
		}
		private function underlyingLaneDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets 
				return;
			}
			dirty.setDirty();
		}
		
       	private function sortDictionaryEntries(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var display1:String = obj1.@display;
				var display2:String = obj2.@display;
				
				if (display1.indexOf('Other') > -1) {
					return 1;
				} else if (display2.indexOf('Other') > -1) {
					return  -1;
				} else {
					if (display1 < display2) {
						return -1;
					} else if (display1 > display2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}
        
        private function sortSampleTypes(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var order1:int = obj1.@sortOrder;
				var order2:int = obj2.@sortOrder;
				
				if (obj1.@value == '') {
					return -1;
				} else if (obj2.@value == '') {
					return 1;
				} else {
					if (order1 < order2) {
						return -1;
					} else if (order1 > order2) {
						return 1;
					} else {
						return 0;
					}
				}
			}			
		}			
		
		private function showViewWindow():void {
		     parentDocument.theViews.selectedChild = parentDocument.detailView;
           	 parentDocument.detailView.setupForm(this.request);
		}
		

		private function onGetLab(event:ResultEvent):void {
			if (getLab.lastResult.name() == "OpenLabList") {
				var lab:Object = getLab.lastResult..Lab.(@idLab == requestEditLabCombo.selectedItem.@idLab);
				
				billingAccounts = new XMLListCollection(lab.billingAccounts.BillingAccount);
		        requestEditBillingAccountCombo.selectedItem = null;
		        for each(var ba:Object in billingAccounts) {
		        	if (ba.@idBillingAccount == request.@idBillingAccount) {
		        		requestEditBillingAccountCombo.selectedItem = ba;
		        		break;
		        	}
		        }
		        
		        projects = new XMLListCollection(lab.projects.Project);
		        requestEditProjectCombo.selectedItem = null;
		        for each(var p:Object in projects) {
		        	if (p.@idProject == request.@idProject) {
		        		requestEditProjectCombo.selectedItem = p;
		        		break;
		        	}
		        } 
				
			}			

		}



		]]>
	</mx:Script>
	
  	<mx:XMLListCollection id="sampleCharacteristicEntries" source="{request.SampleCharacteristicEntries.SampleCharacteristicEntry}" 
	  	 sort="{sampleCharacteristicSorter}"/>
	<mx:Sort id="sampleCharacteristicSorter" compareFunction="sortSampleCharacteristics" unique="true"/>


	<mx:XMLListCollection id="samples" source="{request.samples.Sample}"/>

	<mx:XMLListCollection id="hybs" source="{request.hybridizations.Hybridization}" />


	<mx:XMLListCollection id="lanes" source="{request.sequenceLanes.SequenceLane}"/>


  	<mx:XMLListCollection id="billingAccounts" />
  	<mx:XMLListCollection id="projects" />

 	<mx:VBox  width="100%" height="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" verticalGap="0" id="vbox1">
 	    	
		<mx:TabNavigator id="theTab"  styleName="form" width="100%" 
			creationPolicy="all"
			height="100%" paddingLeft="8" 
			paddingRight="4" paddingBottom="4"  paddingTop="6" change="enableNextButtons()">
		    <experiment:TabSetupView id="setupView">		    	
		    </experiment:TabSetupView>
		    
		    <experiment:TabSampleSetupView id="sampleSetupView">		    	
		    </experiment:TabSampleSetupView>

		    <experiment:TabSeqSetup1View id="seqSetup1View">		    	
		    </experiment:TabSeqSetup1View>
		   
		    <experiment:TabAnnotationView id="annotationView">		    	
		    </experiment:TabAnnotationView> 
		    
		    <experiment:TabSamplesView id="samplesView">		    	
		    </experiment:TabSamplesView>
		    
			<experiment:TabHybSetupView id="hybSetupView">				
			</experiment:TabHybSetupView>
			
			<experiment:TabHybsView id="hybsView">				
			</experiment:TabHybsView>
			
			<experiment:TabConfirmView id="confirmView">				
			</experiment:TabConfirmView>
		</mx:TabNavigator>
	</mx:VBox>
	
 	   <mx:ControlBar>
 		<mx:ViewStack id="buttonStack" width="100%">
	 	    <mx:HBox width="100%" >
				<mx:Button label="Back" enabled="false" visible="true" id="backButton" click="previousTab()" disabledIcon="@Embed(source='../../assets/arrow_left_disabled.png')" icon="@Embed(source='../../assets/arrow_left.png')" fontWeight="normal"/>
				<mx:Button id="nextButton"  label="Next" enabled="false" click="nextTab()" icon="@Embed(source='../../assets/arrow_right.png')" labelPlacement="left" fontWeight="normal">
					<mx:disabledIcon>@Embed(source='../../assets/arrow_right_disabled.png')</mx:disabledIcon>
				</mx:Button>
				<mx:ViewStack id="confirmButtonStack" width="100%">
							<mx:HBox  height="22" horizontalScrollPolicy="off" width="100%"   verticalAlign="middle">
							  <mx:ViewStack id="userWarningStack" width="100%">
							      <mx:HBox width="100%">
							      </mx:HBox>
								  <mx:HBox id="userWarningsBoxSamples" width="100%" horizontalScrollPolicy="off" visible="{userWarningsSamples == '' ? false : true}">
										<mx:Label  text="{userWarningsSamples}" width="100%" color="#D00E0E" />
								  </mx:HBox>							  	
								  <mx:HBox id="userWarningsBoxSampleSetup" width="100%" horizontalScrollPolicy="off" visible="{userWarningsSampleSetup == '' ? false : true}">
										<mx:Label  text="{userWarningsSampleSetup}" width="100%" color="#D00E0E"/>
								  </mx:HBox>
								  <mx:HBox id="userWarningsBoxHybSetup" width="100%" horizontalScrollPolicy="off" visible="{userWarningsHybSetup == '' ? false : true}">
										<mx:Label  text="{userWarningsHybSetup}" width="100%" color="#D00E0E" />
								  </mx:HBox>
							  </mx:ViewStack>
							</mx:HBox>
								
							<mx:HBox width="100%"  verticalAlign="top" horizontalAlign="left">
								<mx:Button label="Submit" id="submitButton" enabled="true" icon="@Embed('../../assets/tick.png')" click="validateAndSubmitRequest()"  visible="true"/>
							</mx:HBox>
							<mx:HBox width="100%" horizontalAlign="left" verticalAlign="top" >
							</mx:HBox>
					    	
				</mx:ViewStack>
				<mx:HBox horizontalAlign="right">
					<mx:Button label="Cancel" id="cancelButton0" click="promptToCancelRequest()"/>
				</mx:HBox>
	 	    </mx:HBox>
	 	    <mx:HBox width="100%" horizontalAlign="right">
			    <mx:HBox width="100%" horizontalAlign="left">
			        <mx:LinkButton label="Downloads" click="parentApplication.navExperimentView.detailView.showDownloads()" icon="@Embed(source='../../assets/icon_download.gif')" id="downloadExperimentButton" textDecoration="underline"/>
					<mx:LinkButton label="Printable form" click="parentApplication.navExperimentView.detailView.showPrintableRequestForm()" icon="@Embed(source='../../assets/page.png')" id="requestFormButton" textDecoration="underline"/>
					<mx:LinkButton label="Analysis" icon="@Embed(source='../../assets/map.png')" textDecoration="underline" 
						enabled="false" disabledIcon="@Embed(source='../../assets/map_disable.png')" height="21" id="analysisButton" click="parentApplication.navExperimentView.detailView.showRelatedAnalysis()">
					</mx:LinkButton>
			        <mx:LinkButton label="View" click="showViewWindow()" icon="@Embed(source='../../assets/page.png')" textDecoration="underline">    	        
			    	</mx:LinkButton>
			    </mx:HBox>

	 	        <util:DirtyNote id="dirty"/>
 				<mx:Button id="saveButton" label="Save" 
	            	icon="@Embed('../../assets/action_save.gif')" click="validateAndSaveRequest()">
	            </mx:Button>

	 	    </mx:HBox>
 			
 		</mx:ViewStack>
 	   	
 	   </mx:ControlBar>
	
    <mx:states>
    	<mx:State name="EditState">
    		<mx:AddChild relativeTo="{vbox1}" position="before">
    			<mx:HBox width="100%" paddingTop="4" paddingBottom="4" horizontalGap="6" paddingLeft="6" paddingRight="6">
    				<mx:VBox verticalGap="2">
    					 <mx:HBox verticalGap="0" horizontalGap="0">
    					   <mx:Label text="Submitted by"  width="102" fontWeight="bold"/>
    					   <mx:Text text="{this.request.@ownerName}" width="180" />
    					 </mx:HBox>
    					 <mx:HBox verticalGap="0" horizontalGap="0">
    					   <mx:Label text="Submit Date"  width="102" fontWeight="bold"/>
    					   <mx:Text text="{this.request.@createDate}" width="180"/>
    					 </mx:HBox>
    					 <mx:HBox verticalGap="0" horizontalGap="0">
    					       <mx:Label text="Request Type"  width="102" fontWeight="bold"/>
    					       <mx:Text text="{requestCategoryName}" width="180" />
    					   </mx:HBox>
    					 <mx:HBox verticalGap="0" horizontalGap="0">
    					     <mx:Label text="Experiment Type"  width="102" fontWeight="bold"/>
    					    <mx:Text  text="{experimentCategoryName}" width="180" />
    					 </mx:HBox>
    					 <mx:HBox verticalGap="0" horizontalGap="0">
    					   <mx:Label width="102" text="Completed on" fontWeight="bold"/>
    					   <mx:Text  text="{this.request.@completedDate}" width="180" />
    					 </mx:HBox>
    				</mx:VBox> 
     				<mx:VBox width="100%" verticalGap="2">
    				    
    				    <mx:HBox verticalGap="0" width="100%" horizontalGap="0">
    				           <mx:Label text="Group"  width="55" fontWeight="bold"/>
    				           <mx:ComboBox id="requestEditLabCombo"
    				           	  labelField="@name" 
    				           	  change="this.dirty.setDirty();refreshLab()" 
    				           	  dataProvider="{parentApplication.promptedSubmitRequestLabList}" 
    				           	  enabled="{parentApplication.hasPermission('canWriteAnyObject') ? true : false}"
    				           	  width="100%"/>
    				       </mx:HBox>
    				    <mx:HBox verticalGap="0" width="100%" horizontalGap="0">
    				        <mx:Label text="Account"  width="55" fontWeight="bold"/>
    				        <mx:ComboBox id="requestEditBillingAccountCombo"
    				           	  labelField="@accountName" 
    				           	  dataProvider="{billingAccounts}" 
    				           	  change="this.dirty.setDirty()"
    				           	  enabled="true"
    				           	  width="100%"/>
    				    </mx:HBox>
    				    <mx:HBox verticalGap="0" width="100%" horizontalGap="0">
    				        <mx:Label text="Project"  width="55" fontWeight="bold"/>
    				        <mx:ComboBox id="requestEditProjectCombo"
    				           	  labelField="@name" 
    				           	  change="this.dirty.setDirty()"
    				           	  dataProvider="{projects}" 
    				           	  enabled="true"
    				           	  width="100%"/>
    				    </mx:HBox>
    				       <mx:HBox width="100%" horizontalGap="0">
    				       	<mx:Label width="55" text="Visibility" id="labelVisibility" fontWeight="bold"/>	
    				       	<mx:ComboBox width="100%" id="visibilityCombo" labelField="@display" enabled="{this.request.@canUpdateVisibility == 'Y' ? true : false}" change="dirty.setDirty();">
    				       		<mx:dataProvider>{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Visibility').DictionaryEntry}</mx:dataProvider>
    				       	</mx:ComboBox>
    				       </mx:HBox>
    				</mx:VBox>
    				
    			</mx:HBox>
    		</mx:AddChild>
    		<mx:RemoveChild target="{seqSetup1View}"/>
    	</mx:State>
        <mx:State name="MicroarrayState">
            <mx:RemoveChild target="{seqSetup1View}"/>
        </mx:State>
        <mx:State name="QCState">
            <mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
            <mx:RemoveChild target="{annotationView}"/>
            <mx:RemoveChild target="{confirmView.hybsConfirmContainer}"/>
            <mx:RemoveChild target="{seqSetup1View}"/>
        </mx:State>
        <mx:State name="SolexaBaseState">
            <mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
            <mx:RemoveChild target="{confirmView.hybsConfirmContainer}"/>
            <mx:AddChild relativeTo="{confirmView.samplesConfirmContainer}" position="after">
				<mx:VBox  id="lanesConfirmContainer"  verticalGap="0" width="100%" height="100%">
						<mx:Label text="{lanes.length + ' Sequencing Lanes'}"/>
						<mx:DataGrid width="100%" height="100%" id="lanesConfirmGrid"  editable="false" dataProvider="{lanes}"  rollOverColor="#C0C0C0" selectionColor="#FFFFB9" horizontalScrollPolicy="auto">
						<mx:columns>
						    <mx:DataGridColumn editable="false" headerText=""   resizable="false" width="25" labelFunction="getLanesGridRowNumber"/>
						    <mx:DataGridColumn  headerText="Sample"  width="222" labelFunction="getLaneSampleName" editable="false"/>
				            <mx:DataGridColumn  width="200" id="seqRunTypeCol" headerText="Seq Run Type"  editable="false" dataField="@idSeqRunType" 						             						             
	                  		  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry, '@display', '@value','@idSeqRunType', true)}"/>
				            <mx:DataGridColumn width="65" id="numberOfSequencingCyclesCol" headerText="# Cycles"    editable="false" dataField="@idNumberSequencingCycles" 						             						             
	                  		  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry, '@display', '@value', '@idNumberSequencingCycles', true)}"/>
				            <mx:DataGridColumn headerText="Genome Build (align to)" dataField="@idGenomeBuildAlignTo" width="150" 
	                  		  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.GenomeBuild').DictionaryEntry, '@display', '@value', '@idGenomeBuildAlignTo')}"/>
							<mx:DataGridColumn width="150" headerText="Analysis instructions"   dataField="@analysisInstructions"/>
						</mx:columns>
					</mx:DataGrid>
					
				</mx:VBox>	
            </mx:AddChild>
         </mx:State>
        <mx:State name="QCEditState" basedOn="EditState">
            <mx:RemoveChild target="{setupView}"/>
            <mx:RemoveChild target="{annotationView}"/>
            <mx:RemoveChild target="{sampleSetupView}"/>
            <mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
            <mx:RemoveChild target="{confirmView}"/>
         </mx:State>
        <mx:State name="MicroarrayEditState" basedOn="EditState">
            <mx:RemoveChild target="{setupView}"/>
            <mx:RemoveChild target="{sampleSetupView}"/>
            <mx:RemoveChild target="{confirmView}"/>
            <mx:RemoveChild target="{hybSetupView.numberOfHybsContainer}"/>
            <mx:RemoveChild target="{hybSetupView.slideSourceContainer}"/>
         </mx:State>
        <mx:State name="SolexaEditState" basedOn="EditState">
            <mx:RemoveChild target="{setupView}"/>
            <mx:RemoveChild target="{sampleSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
            <mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{confirmView}"/>
            <mx:AddChild relativeTo="{samplesView}" position="after">
            	<experiment:TabLanesView id="lanesView">            		
            	</experiment:TabLanesView>
            </mx:AddChild>
         </mx:State>
    </mx:states>
    

  
    
</mx:Panel> 
