<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"  xmlns:mx="http://www.adobe.com/2006/mxml"     
	xmlns:SubmitRequestView="SubmitRequestView.*" 
    xmlns:views="views.*" 
    xmlns:util="views.util.*"  
    xmlns:experiment="views.experiment.*"
    showEffect="{parentApplication.fadeIn}" hideEffect="{parentApplication.fadeOut}" 
	width="100%" height="100%"  
	creationPolicy="all" show="init()" hide="leave()" xmlns:renderers="views.renderers.*">

     
   <mx:HTTPService  
    id="getNewRequest" 
    url="GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetNewRequest(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get request', event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idRequest>0</idRequest>    	
    </mx:request>
  </mx:HTTPService>

   <mx:HTTPService  
    id="getRequestToClone" 
    url="GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequestToClone(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get request to copy', event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idRequest>{requestToClone.@idRequest}</idRequest>    	
    </mx:request>
  </mx:HTTPService>


   <mx:HTTPService  
    id="getRequestToAmend" 
    url="GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequestToAmend(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get request to amend', event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idRequest>{browseTree.selectedItem.@idRequest}</idRequest>    	
    </mx:request>
  </mx:HTTPService>

   <mx:HTTPService  
    id="getRequest" 
    url="GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequest(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get existing request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="saveNewRequest" 
    url="SaveRequest.gx"
    destination="saveNewRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveNewRequest(event)"
    fault="parentApplication.onFailHttpRequest('Failed to submit request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>

  <mx:HTTPService  
    id="saveExistingRequest" 
    url="SaveRequest.gx"
    destination="saveExistingRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveExistingRequest(event)"
    fault="parentApplication.onFailHttpRequest('Failed to save request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="getLab" 
    url="GetLab.gx"
    destination="getLab"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetLab(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get group', event)"
    method="POST"
    useProxy="false">
   </mx:HTTPService>
   
  <mx:HTTPService  
    id="getCandidateProjectRequestList" 
    url="GetProjectRequestList.gx"
    destination="getCandidateProjectRequestList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetCandidateProjectRequestList(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to get experiments to amend', event)"
    method="POST" 
    useProxy="false">
    <mx:request>
    </mx:request>
   </mx:HTTPService>
   
   <mx:HTTPService  
    id="getLabForAddingServices" 
    url="GetLab.gx"
    destination="getLabForAddingServices"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetLabForAddingServices(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get group', event)"
    method="POST"
    useProxy="false">
    <mx:request>
    	<idLab>{this.labCombo.selectedItem.@idLab}</idLab>
    </mx:request>
   </mx:HTTPService>
   
    <mx:HTTPService 
    id="getSlideProductList" 
    url="GetSlideProductList.gx"
    showBusyCursor="true"
    resultFormat="e4x"
    result="onGetSlideProductList(event)"
	fault="parentApplication.onFailHttpRequest('Failed to slide product list', event)"
    destination="getSlideProductList"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
    
          
    <mx:HTTPService 
    id="getSlideDesignList" 
    url="GetSlideDesignList.gx"
    showBusyCursor="true"
    resultFormat="e4x"
    result="onGetSlideDesignList(event)"
	fault="parentApplication.onFailHttpRequest('Failed to slide design list', event)"
    destination="getSlideDesignList"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >

   <mx:HTTPService  
    id="createBillingItems" 
    url="CreateBillingItems.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onCreateBillingItems(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get estimated billing', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>

   <mx:HTTPService  
    id="getMultiplexLaneList" 
    url="GetMultiplexLaneList.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetMultiplexLaneList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get multiplex sequence lane list', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Container;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.PropertyChangeEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.validators.NumberValidator;
			import mx.validators.ValidationResult;
			
			import views.experiment.ConvertIlluminaRequestWindow;
			import views.util.PromptXMLListCollection;
        

		[Bindable]
		private var requestIcon:String = '';
        
		[Bindable]
		private var errorMessage:String = "";
		[Bindable]
		private var warningMessage:String = "";
		        
        
    	[Bindable]
		public var selectedIdSlideProduct:Object;

        [Bindable]
        private var submittedIdRequest:String;
        [Bindable]
        private var submittedRequestNumber:String;

			

		private var externalIdRequest:String;
		private var externalRequestNumber:String;

		[Bindable]
		public var requestCategoryName:String;
		
		[Bindable]
		public var applicationName:String;
				
		[Bindable]
		public var seqLibTreatmentsDisplay:String = "";
				
		[Bindable]
		public var request:Object;
		
		[Bindable]
		public var lab:Object;
		
		private var existingLanes:XMLList = null;
		
		[Bindable]
		public var samplePrepMethodList:XMLListCollection;
		[Bindable]
		public var seqLibProtocolList:XMLListCollection;
		[Bindable]
		public var sampleSourceList:XMLListCollection;
		[Bindable]
		public var filteredSampleTypeList:XMLListCollection;
		[Bindable]
		public var filteredSeqRunTypeList:XMLListCollection;
		[Bindable]
		public var filteredGenomeBuildList:XMLListCollection;
		[Bindable]
		public var filteredNumberSequencingCycleAllowedList:XMLListCollection;
		[Bindable]
		public var filteredMicroarrayAppList:XMLListCollection;
		[Bindable]
		public var filteredAppList:XMLListCollection;
		[Bindable]
		public var filteredSlideProductList:XMLListCollection;
		[Bindable]
		public var filteredProjectList:XMLListCollection;
		[Bindable]
		public var slideDesignList:XMLListCollection;

        

		private var dictionarySorter:Sort;
		private var sampleTypeSorter:Sort;
		private var numberSequencingCyclesAllowedSorter:Sort;
		private var seqRunTypeSorter:Sort;
		private var filteredAppListSorter:Sort;

		
		[Bindable]
		private var experimentCategoryName:String;
		[Bindable]
		private var billingAccountName:String;

		[Bindable]
		public var requestToClone:Object;
		
		[Bindable]
		public var userWarningsSamples:String = "";
		[Bindable]
		public var userWarningsSampleSetup:String = "";
		[Bindable]
		public var userWarningsHybSetup:String = "";

		[Bindable]
		public var showCCNumberColumn:Boolean = true;
		
		public var concentrationValidator:NumberValidator = new NumberValidator();
		
		private var isInitialized:Boolean = false;
			
		private var lastSelectedApplication:Object = null;
			
		private var alertButtonWidth:Number = Alert.buttonWidth

		private function init():void {
			
	 		// If this is the first time this instance
	 		// has been shown, perform 1-time-only
	 		// initialization
			if (!isInitialized) {

				// Set the base state
				if (this.id == "amendRequestView") {
					this.currentState = 'AmendState';
					this.nextButton.enabled = false;
				} else if (this.id == "editView") {
					this.currentState = "EditState";
				} else if (!parentApplication.submitInternalExperiment()) {
					this.currentState = "";
				}else {
					this.currentState = "";
				}
				

				

				this.initializeData();
        	    this.checkSecurity();
            	this.setupDataListeners();
            	

    			isInitialized = true;
			}
			// Force the setting of request category name to reset
			// the state if we are toggling between register external
			// experiment and submit internal experiment.
			if (!isEditState() && !isAmendState()) { 
				if (!parentApplication.isInternalExperimentSubmission) {
					
				}
			}
			
			
			
			// Always perform checkSecurity on setupView
			if (this.theTab.contains(setupView)) {
				setupView.checkSecurity();
			}
			
			// Always perform checkSecurity on annotationView
			if (this.theTab.contains(annotationView)) {
				annotationView.checkSecurity();
			}
			

        	if (parentApplication.theViews.selectedChild == this) {
    	    	this.setupSubmitForm();
        	} else if (this.id == "editView" && request != null) {
        		this.setupTheEditForm();
        	}	

		}
			
		private function leave():void {
			if (parentApplication.theViews.selectedChild == this) {
				
			} else if (this.id == "editView" && request != null) {
				this.theTab.selectedChild = this.samplesView;
			}	
		}
				



		public function checkDirty():void {
		}
				
		private function initializeData():void {
			samplePrepMethodList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SamplePrepMethod'));
        	var dictionarySorter:Sort = new Sort();
    	    dictionarySorter.compareFunction = this.sortDictionaryEntries;
	        samplePrepMethodList.sort = dictionarySorter;
	        samplePrepMethodList.refresh();
			

	        seqLibProtocolList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SeqLibProtocol'));
	        seqLibProtocolList.sort = dictionarySorter;
	        seqLibProtocolList.refresh();

	        sampleSourceList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SampleSource'));
	        sampleSourceList.sort = dictionarySorter;
	        sampleSourceList.refresh();
			
        	
        	filteredSampleTypeList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SampleType'));
        	sampleTypeSorter = new Sort();
        	sampleTypeSorter.compareFunction = this.sortSampleTypes;	   
        	filteredSampleTypeList.sort = sampleTypeSorter;     	
        	filteredSampleTypeList.refresh();
			
        	
	        filteredSeqRunTypeList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SeqRunType'));
        	seqRunTypeSorter = new Sort();
        	seqRunTypeSorter.compareFunction = this.sortSeqRunType;	   
        	filteredSeqRunTypeList.sort = seqRunTypeSorter;     	
        	filteredSeqRunTypeList.refresh();
        	
        	
        	filteredGenomeBuildList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.GenomeBuild'));
        	        	
        	
        	filteredNumberSequencingCycleAllowedList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.NumberSequencingCyclesAllowed'));
        	numberSequencingCyclesAllowedSorter = new Sort();
        	numberSequencingCyclesAllowedSorter.compareFunction = this.sortNumberSequencingCyclesAllowed;	   
        	filteredNumberSequencingCycleAllowedList.sort = numberSequencingCyclesAllowedSorter;     	

        	filteredMicroarrayAppList = new XMLListCollection(parentApplication.dictionaryManager.getEntries('hci.gnomex.model.Application'));
        	// We use this technique xml.copy() to prevent duplication of applications 
        	// that somehow happens when we add services, then submit request or vice versa
        	filteredAppList           = new XMLListCollection();
        	for each(var i:Object in parentApplication.dictionaryManager.getEntries('hci.gnomex.model.Application')) {
        		filteredAppList.addItem(i.copy());
        	}
        	filteredAppListSorter = new Sort();
        	filteredAppListSorter.compareFunction = this.sortApplication;
        	filteredAppList.sort = filteredAppListSorter;
        
	        filteredProjectList = new XMLListCollection(parentApplication.getProjectList.lastResult.Project);
	        filteredProjectList.filterFunction = filterProject;

			initFilters();

			if (theTab.contains(this.annotationView)) {
				this.sampleCharacteristicEntries.refresh();
				this.annotationView.addNonStandardSampleColumns(); 
			}
			
	    	concentrationValidator.domain = "real";
			concentrationValidator.minValue = "0";
			concentrationValidator.maxValue = "99999";
			concentrationValidator.precision = 3;
	    	concentrationValidator.allowNegative = false;
	    	concentrationValidator.required = false;
			concentrationValidator.exceedsMaxError = "exceeds max.";
			concentrationValidator.invalidCharError = "contains invalid characters. Please enter a numeric value.";
			concentrationValidator.negativeError = "cannot be negative.";
			concentrationValidator.precisionError = "has too many digits beyond the decimal point.";
		}
		
		private function initFilters():void {
	        this.filteredProjectList.filterFunction = this.filterProject;
	        this.filteredProjectList.refresh();
						

			samplePrepMethodList.filterFunction = filterSamplePrepMethod;
			samplePrepMethodList.refresh();

			seqLibProtocolList.filterFunction = filterSeqLibProtocol;
			seqLibProtocolList.refresh();
			
			filteredSeqRunTypeList.filterFunction = filterSeqRunType;
			filteredSeqRunTypeList.refresh();

			filteredGenomeBuildList.filterFunction = filterGenomeBuild;
			filteredGenomeBuildList.refresh();
			
			filteredMicroarrayAppList.filterFunction = filterMicroarrayApplication;
			filteredMicroarrayAppList.refresh();
		

			filteredAppList.filterFunction = filterApplication;
			filteredAppList.refresh();

			
			filteredSampleTypeList.filterFunction = filterSampleType;
			filteredSampleTypeList.refresh();
			
			filteredNumberSequencingCycleAllowedList.filterFunction = filterNumberSequencingCyclesAllowed;
			filteredNumberSequencingCycleAllowedList.refresh();
			
			filteredSeqRunTypeList.filterFunction = filterSeqRunType;
			filteredSeqRunTypeList.refresh();

		}
		
		public function isSolexaState():Boolean {
			if (currentState == 'SolexaBaseState' ||
				currentState == 'SolexaBaseExternalState' ||
				currentState == 'SolexaEditState' ||
				currentState == 'SeqExternalEditState' ||
			    currentState == 'SolexaBaseAmendState' ||
			    currentState == 'SolexaLaneAmendState') {
				return true;    	
			} else {
				return false;
			}
		}
		
		public function isQCState():Boolean {
			if (currentState == 'QCState' ||
				currentState == 'QCExternalState' ||
				currentState == 'QCEditState') {
				return true;    	
			} else {
				return false;
			}
		}
		
				
		public function isMicroarrayState():Boolean {
			if (currentState == 'MicroarrayState' ||
				currentState == 'MicroarrayExternalState' || 
				currentState == 'MicroarrayEditState' || 
				currentState == 'MicroarrayAmendState') { 
				return true;    	
			} else {
				return false;
			}
		}
		
		public function isEditState():Boolean {
			if (currentState == 'EditState' ||
				currentState == 'SolexaEditState' ||
				currentState == 'SeqExternalEditState' ||
			    currentState == 'QCEditState' ||
			    currentState == 'MicroarrayEditState') {
				return true;    	
			} else {
				return false;
			}
		}
		public function isSolexaEditState():Boolean {
			if (currentState == 'SolexaEditState' ||
			    currentState == 'SeqExternalEditState') {
				return true;    	
			} else {
				return false;
			}
		}
		public function getOrganism():XML {
			if (theTab.contains(sampleSetupView) && (this.isMicroarrayState() || this.isSolexaState())) {
				return sampleSetupView.sampleOrganismCombo.selectedItem as XML;
			} else if (request != null) {
				var idOrganism:Object = null;
				if (request.hasOwnProperty("@idOrganismSampleDefault") && request.@idOrganismSampleDefault != '') {
					idOrganism = request.@idOrganismSampleDefault;
				} else {  
					for each(var sample:Object in request.samples.Sample) {
						if (sample.hasOwnProperty("@idOrganism") && sample.@idOrganism != '') {
							idOrganism = sample.@idOrganism;
							break;
						}
					}
				}
				var organismList:XMLList = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Organism', idOrganism);
				if (organismList.length() > 0) {
					return organismList[0];
				} else {
					return null;
				}
			} else {
				return null;
			}
		}
		
		private function getRequestCategoryName():void {
			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', this.request.@codeRequestCategory);
			if (requestCategory is XMLList) {
				requestCategoryName = requestCategory[0].@display.toString();				
			} else {
				requestCategoryName = requestCategory.@display.toString();
			}
		}
		private function getExperimentCategoryName():void {
			var experimentCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', this.request.@codeApplication);
			if (experimentCategory is XMLList) {
				experimentCategoryName = experimentCategory[0].@display.toString();				
			} else {
				experimentCategoryName = experimentCategory.@display.toString();
			}
		}
		private function getBillingAccountName():void {
			var billingAccount:Object = null;
			for each(var lab:Object in parentApplication.promptedSubmitRequestLabList) {
				for each(var ba:Object in lab.billingAccounts.BillingAccount) {
					if (ba.@idBillingAccount == this.request.@idBillingAccount) {
						billingAccount = ba;
						break;
					}
						
				}
			}
			if (billingAccount != null) {
				billingAccountName = billingAccount.@accountName;
			}
		}
		
		
		public function checkSecurity():void {
			setupView.checkSecurity();	
			
			// Select the first lab unless this user is an admin
			if (this.isAmendState()) {
				if (parentApplication.currentState != "AdminState") {
	            	if (labCombo.dataProvider.length > 1) {
						labCombo.selectedIndex = 1;
						this.getLabForAddingServices.send();
					}
				}		
				
			}
		}
		
		public function isRequestPending():Boolean {
			if (this.setupView == null || request == null) {
				return false;
			} else if (request.@idRequest == '0'  && submittedIdRequest == null) {
				if (nextButton.enabled || this.submitButton.enabled || agreeCheckbox.visible) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		}
		
		private function promptToCancelRequest():void {
			if (isRequestPending()) {
				Alert.show( "The request has not been saved.  Are you sure you want to quit?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToCancelRequest,						
						parentApplication.iconWarning);
			} else {
				cancelRequest();
			}
			
		}
		
		private function onPromptToCancelRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	cancelRequest();
            }
        }
        
        private function promptToCancelPriorRequest():void {
			if (isRequestPending()) {
				Alert.show( "The request you have entered has not been saved.  Do you want to start over?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToCancelPriorRequest,						
						parentApplication.iconWarning);
			}
			
		}
		
		private function onPromptToCancelPriorRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	initializeSubmitForm();
            }
        }

        
        
        public function cancelRequest():void {
        	getNewRequest.send();
			initializeSubmitForm();
        	parentApplication.theViews.selectedIndex = 0;
        	
        }
        

		private function setupSubmitForm():void {
			if (request == null) {
				getNewRequest.send();
				buttonStack.selectedIndex = 0;
			}
		}
		
		
		public function initializeSubmitForm():void {	

			if (isAmendState() ){
				if (amendSetupView == null) {
					return;
				}
				if (!this.contains(amendSetupView)) {
					return;
				}
				
			} else {
				if (setupView == null) {
					return;
				}
				if (!this.contains(setupView)) {
					return;
				}
			}
			
			if (this.isAmendState()) {
				theTab.selectedChild = amendSetupView;
			} else {
				setupView.enabled = true;
				theTab.selectedChild = setupView;
				
			}
			
			requestToClone = null;
			submittedIdRequest = null;
			submittedRequestNumber = null;

			setupView.selectDefaultLab();
			setupView.projectCombo.selectedIndex = -1;
			setupView.requestTypeGroup.selectedValue = '';


			samplesView.enabled = false;			
			
			if (theTab.contains(hybsView)) {
				hybsView.enabled = false;
			}

			if (theTab.contains(sampleSetupView)) {
				sampleSetupView.numberOfSamples.text = '';
				sampleSetupView.sampleTypeCombo.selectedIndex = -1;
				sampleSetupView.samplePrepMethodCombo.selectedIndex = -1;
				sampleSetupView.sampleOrganismCombo.selectedIndex = -1;
				sampleSetupView.enabled = false;
				if (theTab.contains(annotationView)) {
					annotationView.enabled = false;								
				}
				if (isSolexaState()) {
					seqSetupView.enabled = false;
					seqSetup1View.enabled = false;
				    seqSetup1View.numberSequencingCyclesRadioGroup.selectedValue = null;
					seqSetup1View.genomeBuildCombo.selectedIndex = 0;
					seqSetup1View.analysisInstructions.text = '';
				}
			}
					
			if (theTab.contains(hybSetupView)) {
				hybSetupView.label = "Hyb setup";
				hybSetupView.numberOfHybsContainer.visible = true;
				hybSetupView.slideSourceContainer.visible = true;

				hybSetupView.organismCombo.selectedIndex = -1;
				hybSetupView.slideProductCombo.selectedIndex = -1;
				hybSetupView.numberOfHybs.text = '';
				hybSetupView.isCatalogRadio.selected = true;
				hybSetupView.coreSlideSourceCheckbox.selected = false;
			 	hybSetupView.clientSlideSourceCheckbox.selected = false;
				hybSetupView.stripSlideSourceCheckbox.selected = false;

				hybSetupView.organismCombo.enabled = true;
				hybSetupView.slideProductCombo.enabled = true;
				hybSetupView.isCatalogRadio.enabled = true;
				hybSetupView.isCustomRadio.enabled = true;
				
				hybSetupView.enabled = false;
				
			}	
			

			
			if (theTab.contains(confirmView)) {
				confirmView.enabled = false;
				if (confirmButtonStack != null) {
					confirmButtonStack.selectedIndex = 0;
					cancelButton.label = "Cancel";
				}
			}
			
		}
		


		
		private function nextTab():void {
			theTab.selectedIndex++;
		}
		
		private function previousTab():void {
			if (theTab.selectedIndex > 0) {
				theTab.selectedIndex--;				
			}
		}
		
		public function enableNextButtons():void {
			if (theTab.selectedIndex < theTab.getChildren().length - 1) {
				confirmButtonStack.selectedIndex = 0;
				var nextChild:UIComponent = UIComponent(theTab.getChildAt(theTab.selectedIndex + 1));
				if (nextChild.enabled) {
					nextButton.enabled = true;
				} else {
					nextButton.enabled = false;
				}
					
			} else {
				nextButton.enabled = false;
				confirmButtonStack.selectedIndex = 1;
			}
			if (theTab.selectedIndex > 0) {
				var prevChild:UIComponent = UIComponent(theTab.getChildAt(theTab.selectedIndex - 1));
				if (prevChild != null && prevChild.enabled) {
					backButton.enabled = true;
				} else {
					backButton.enabled = false;
				}
			} else {
				backButton.enabled = false;
			}
			if (theTab.selectedChild == this.samplesView) {
				this.userWarningStack.selectedChild = this.userWarningsBoxSamples;
			} else if (!this.isEditState() && theTab.selectedChild == this.sampleSetupView) {
				this.userWarningStack.selectedChild = this.userWarningsBoxSampleSetup;
			} else if (this.isMicroarrayState() && theTab.selectedChild == this.hybSetupView) {
				this.userWarningStack.selectedChild = this.userWarningsBoxHybSetup;
			} else {
				this.userWarningStack.selectedIndex = 0;
			}
		}

		
		
		public function setRequestCategoryName():void {
			var requestCategory:Object = getRequestCategory();
		
			if (requestCategory == null) {
				return;
			}
			
			requestIcon = requestCategory.@icon;
			requestCategoryName = requestCategory.@display.toString();
			
			if (theTab.contains(confirmView)) {
				this.confirmView.barcodeColumn.visible = false;        					
			}
	
				
			if (theTab.contains(setupView)) {
				if (this.setupView.requestTypeGroup.selectedValue != null && this.setupView.requestTypeGroup.selectedValue != '' ) {
					this.setupView.requestTypeBox.styleName = "normalBox";
				} else {
					this.setupView.requestTypeBox.styleName = "requiredBox";
				} 				
			}			

			if (requestCategory.@type == parentApplication.TYPE_ILLUMINA) {
				this.currentState = parentApplication.submitInternalExperiment() ? 'SolexaBaseState' : 'SolexaBaseExternalState';
				if (parentApplication.submitInternalExperiment()) {
					this.sampleSetupView.currentState = 'SolexaSetupState';
				}
				this.samplesView.currentState = 'SolexaSamplesState';
				
				if (parentApplication.submitInternalExperiment()) {
					showHideBarcodingQuestion();
				}

				filteredAppList.filterFunction = filterApplication;
				filteredAppList.refresh();		

				filteredNumberSequencingCycleAllowedList.filterFunction = filterNumberSequencingCyclesAllowed;
				filteredNumberSequencingCycleAllowedList.refresh(); 
				
				// Only show the barcode labeling option if we have
				// at least one set of barcodes 
				if (parentApplication.submitInternalExperiment()) {
					var barcodes:XMLList = this.parentApplication.dictionaryManager.getEntriesExcludeBlank('hci.gnomex.model.OligoBarcode');
					if (barcodes.length() > 0) {
						this.sampleSetupView.barcodeContainer.visible = true;
					} else {
						this.sampleSetupView.radioNoBarcoding.selected = true;
						this.sampleSetupView.barcodeContainer.visible = false;
						this.sampleSetupView.pickRadioBarcoding();
					}
				}
				
				this.samplesView.currentState = 'SolexaSamplesState';	
				if (parentApplication.submitInternalExperiment()) {
					this.sampleSetupView.samplesToBePreppedCheckbox.selected = true;
				}
				for each (var sample:Object in samples) {
					sample.@seqPrepByCore = 'Y';
					sample.@numberSequencingLanes = '1';
					sample.@label = '';
				}
				this.samplesView.showHideColumns();		
				this.samplesView.checkSamplesCompleteness();
			
			} else {						
				if (requestCategory.@type == parentApplication.TYPE_QC) {
					this.currentState = parentApplication.submitInternalExperiment() ? 'QCState' : 'QCExternalState';
					if (parentApplication.submitInternalExperiment()) {
						this.sampleSetupView.currentState = 'QCSetupState';
					}

					this.samplesView.currentState = 'QCSamplesState';				
					this.samplesView.showHideColumns();						
					this.samplesView.checkSamplesCompleteness();	
					
					filteredAppList.filterFunction = filterApplication;
					filteredAppList.refresh();
					if (parentApplication.submitInternalExperiment()) {
						this.sampleSetupView.qcAppRepeater.invalidateDisplayList();
						this.sampleSetupView.qcAppRepeater..validateNow();
					}
					
					

				} else if (requestCategory.@type == parentApplication.TYPE_MICROARRAY) {
								
					this.currentState = parentApplication.submitInternalExperiment() ? 'MicroarrayState' : 'MicroarrayExternalState';
					if (parentApplication.submitInternalExperiment()) {
						this.sampleSetupView.currentState = '';
						this.sampleSetupView.organismValidator.validate();
					}
					
 					
					this.samplesView.currentState = 'MicroarraySamplesState';
					this.samplesView.showHideColumns();		
					if (parentApplication.submitInternalExperiment()) {
						this.hybSetupView.currentState = "SetupState";
						
						this.hybSetupView.slideProductCombo.selectedIndex = 0;
						this.hybSetupView.checkForSlideProductWarning();
						this.hybSetupView.numberOfHybsValidator.validate();
					}
					this.hybsView.currentState = '';


	
					// Hide/Show the channel 2 sample column
					if (requestCategory.@numberOfChannels == "2") {
						this.samplesView.currentState = 'MicroarraySamplesState';
						this.hybsView.currentState = "";
						hybsView.channel2SampleColumn.visible = true;
						samplesView.labelColumn.visible = true;
						confirmView.channel2SampleConfirmColumn.visible = true;
					} else {
						this.samplesView.currentState = 'MicroarrayOneColorSamplesState';
						this.hybsView.currentState = "HybsOneColorState";
						hybsView.channel2SampleColumn.visible = false;
						samplesView.labelColumn.visible = false;
						confirmView.channel2SampleConfirmColumn.visible = false;
						for each (var s:Object in samples) {
							s.@label = 'cy3';
						}
					}
					
					filteredAppList.filterFunction = filterApplication;
					filteredAppList.refresh();
										
					filteredMicroarrayAppList.filterFunction = filterMicroarrayApplication;
					filteredMicroarrayAppList.refresh();
					if (parentApplication.submitInternalExperiment()) {
						
						this.hybSetupView.microarrayAppRepeater.invalidateDisplayList();
						this.hybSetupView.microarrayAppRepeater.validateNow();
					
						this.hybSetupView.microarrayAppRadioGroup.selectedValue = null;
					}
					

	 
					this.samplesView.checkSamplesCompleteness();	
					
					if (this.getSlideProductList.lastResult == null || filteredSlideProductList == null) {
						getSlideProductList.send();
					} else {
						filteredSlideProductList.refresh()
					}
					if (this.getSlideDesignList.lastResult == null) {
						getSlideDesignList.send();
					}
					
				}
			}
			if (parentApplication.submitInternalExperiment()) {
				this.sampleSetupView.samplePrepMethodCombo.selectedIndex = -1;
				this.sampleSetupView.numberOfSamplesValidator.validate();
				this.sampleSetupView.sampleTypeValidator.validate();
				this.sampleSetupView.samplePrepMethodValidator.validate();
			}

			
			
			filteredSampleTypeList.refresh();
			samplePrepMethodList.refresh();
			seqLibProtocolList.refresh();
			
			if (parentApplication.submitInternalExperiment()) {
				sampleSetupView.sampleOrganismCombo.selectedIndex = 0;
				callLater(pickDefaultOrganism);
				
				sampleSetupView.samplePrepMethodCombo.selectedIndex = 0;
				callLater(pickDefaultSamplePrepMethod);
			}
			 
			
			if (theTab.contains(annotationView) && request != null) {
				annotationView.onSampleCharacteristicRefreshed(null);
			}
			this.setupView.checkSecurity();
		}
			
		public function showHideBarcodingQuestion():void {
			sampleSetupView.radioYesBarcoding.selected = true;
			sampleSetupView.pickRadioBarcoding();

			var requestCategory:Object = getRequestCategory();
			// If barcoding is not optional or this is an external
            // experiment submission, don't show the question,
			// that asks about sample barcode tags
			if (requestCategory.@isSampleBarcodingOptional == "N" || !parentApplication.submitInternalExperiment()) {
				sampleSetupView.barcodeQuestionVisible = false;
			} else {
				sampleSetupView.barcodeQuestionVisible = true;
			}			
		}
			

		private function pickDefaultOrganism():void {
			// Select the default organism on sample setup if the request category specifies one
			var requestCategory:Object = getRequestCategory();
			if (requestCategory.@idOrganism != '') {
				var organism:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Organism',requestCategory.@idOrganism);
				if (organism is XMLList) {
					sampleSetupView.sampleOrganismCombo.selectedItem = organism[0];
					
				} else {
					sampleSetupView.sampleOrganismCombo.selectedItem = organism;
				}
			} else {
				sampleSetupView.sampleOrganismCombo.selectedIndex = -1;
			}


		}
			
		private function pickDefaultSamplePrepMethod():void {
			
			// If the request category specified a default sample prep method,
			// use it.
			var requestCategory:Object = getRequestCategory();
			if (requestCategory.@idSamplePrepMethod != '') {
				var spm:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SamplePrepMethod',requestCategory.@idSamplePrepMethod);
				if (spm is XMLList) {
					sampleSetupView.samplePrepMethodCombo.selectedItem = spm[0];
					return;
				} else {
					sampleSetupView.samplePrepMethodCombo.selectedItem = spm;
					return;
				}
			} else {
				sampleSetupView.samplePrepMethodCombo.selectedIndex = -1;
			}		
		}
		
		public function getSamplesGridRowNumber(item:Object,col:int):String
        {
        	if (samples!= null) {
	           var x:int = samples.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
		public function getHybsGridRowNumber(item:Object,col:int):String
        {
        	if (hybs!= null) {
	           var x:int = hybs.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
		public function getSampleChannel1Name(item:Object,col:int):String
        {
        	var sampleName:String = "";
        	if (hybsView.hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel1) {
        				sampleName = sample.@name;
        				break;
        			} 
        		}
        	} 
        	return sampleName; 
        }
		public function getSampleChannel2Name(item:Object,col:int):String
        {
        	var sampleName:String = "";
        	if (hybsView.hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel2) {
        				sampleName = sample.@name;
        				break;
        			}
        		}
        	} 
        	return sampleName;
        }
		public function getSampleChannel1Number(item:Object,col:int):String
        {
        	var sampleNumber:String = "";
        	if (hybsView.hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel1) {
        				sampleNumber = sample.@number;
        				break;
        			}
        		}
        	} 
        	return sampleNumber;
        }
		public function getSampleChannel2Number(item:Object,col:int):String
        {
        	var sampleNumber:String = "";
        	if (hybsView.hybsGrid!= null) {
        		for each(var sample:Object in samples) {
        			if (sample.@idSample == item.@idSampleChannel2) {
        				sampleNumber = sample.@number;
        				break;
        			}
        		}
        	} 
        	return sampleNumber;
        }        
        
		public function getLanesGridRowNumber(item:Object,col:int):String
        {
        	if (lanes!= null) {
	           var x:int = lanes.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
		public function getLaneSampleName(item:Object,col:int):String
        {
        	if (item == null || !item.hasOwnProperty("@idSample")) {
        		return '';
        	}
        	var sampleName:String = "";
    		for each(var sample:Object in samples) {
    			if (sample.@idSample == item.@idSample) {
    				sampleName = sample.@name;
    				break;
    			}
    		}
        	return sampleName;
        }


		public function filterProject(item:Object):Boolean {
			var keep:Boolean = false;
			
			if (this.isAmendState()) {
				return false;
			}
			
			if (this.theTab == null || !this.theTab.contains(setupView)) {
				return false;
			}
			
			if (item.@idProject == '') {
				keep = true;
			} else if (setupView.labCombo.selectedItem != null) {
				if (item.@idLab == setupView.labCombo.selectedItem.@idLab) {
					keep = true;
				}
			}
			return keep;
		}
			
		public function filterSampleCharacteristicEntry(sce:Object):Boolean {
			var keep:Boolean = false;
			
			var sampleCharacteristic:XML = parentApplication.getSampleCharacteristic(sce.@idSampleCharacteristic);
			if (this.isApplicableSampleCharacteristic(sampleCharacteristic)) {
				if (sce.@isSelected == 'true' || sampleCharacteristic.@isActive != 'N') {
					keep = true;
				}
			}
			
			return keep;
		}
			
			
		public function isApplicableSampleCharacteristic(sampleCharacteristic:XML):Boolean {
			var filterByOrganism:Boolean = false;
			if (sampleCharacteristic.descendants("Organism").length() > 0) {
				filterByOrganism = true;	
			}
			
			var filterByPlatform:Boolean = false;
			if (sampleCharacteristic.descendants("RequestCategory").length() > 0) {
				filterByPlatform = true;	
			}
			
			var keep:Boolean = false;
			
			if (!filterByOrganism) {
				keep = true;
			} else {
				if (this.getOrganism() != null) {
					for each(var organism:XML in sampleCharacteristic.descendants("Organism")) {
						if (this.getOrganism().@idOrganism == organism.@idOrganism) {
							keep = true;
							break;
						}
					}
				}
			}
			
			if (keep) {
				if (!filterByPlatform) {
					keep = true;
				} else {
					keep = false;
					if (this.getRequestCategory() != null) {
						for each(var rc:XML in sampleCharacteristic.descendants("RequestCategory")) {
							if (this.getRequestCategory().@codeRequestCategory.toString() == rc.@codeRequestCategory) {
								keep = true;
								break;
							}
						}
					}
				}
			}
			
			return keep;
		}
		

		
		public function addSamplePrepMethodFilter():void {
			samplePrepMethodList.filterFunction = filterSamplePrepMethod;
			samplePrepMethodList.refresh();
		}
		
		private function getAmendRequestType():String {
			var codeRequestCategory:String = getAmendRequestCategory();
			if (codeRequestCategory != '') {
				var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', codeRequestCategory);
				return requestCategory.@type.toString();				
			} else {
				return '';
			}
			
		}
		private function getAmendRequestCategory():String {
			if (this.radioGroupAmendType.selectedValue != null && this.radioGroupAmendType.selectedValue != '') {
				if (this.radioGroupAmendType.selectedValue.toString().indexOf("QC-TO-") == 0) {
					return this.radioGroupAmendType.selectedValue.toString().substr(6);
				} else if (this.radioGroupAmendType.selectedValue.toString().indexOf("ADD-LANES-") == 0) {
					return this.radioGroupAmendType.selectedValue.toString().substr(10);
				} else {
					return "";
				}
			} else {
				return "";
			}
		}
		private function isRequestToAmendQC():Boolean {
			if (this.radioGroupAmendType.selectedValue != null && this.radioGroupAmendType.selectedValue != '') {
				return this.radioGroupAmendType.selectedValue.toString().indexOf("QC-TO-") == 0;
			} else {
				return false;
			}
		}
		private function isRequestToAmendIllumina():Boolean {
			if (this.radioGroupAmendType.selectedValue != null && this.radioGroupAmendType.selectedValue != '') {
				return this.radioGroupAmendType.selectedValue.toString().indexOf("ADD-LANES-") == 0;
			} else {
				return false;
			}
		}
		
		private function highlightAmendRequestCategory():void {
			var i:int = 0;
			for (i = 0; i < radioAmendRequestCategory1.length; i++) {
	        	radioAmendRequestCategory1[i].setStyle("fontWeight", radioAmendRequestCategory1[i].selected    == true ?  "bold" : "normal");	
   			}
			for (i = 0; i < radioAmendRequestCategory2.length; i++) {
	        	radioAmendRequestCategory2[i].setStyle("fontWeight", radioAmendRequestCategory2[i].selected    == true ?  "bold" : "normal");	
   			}
				
		}

		
		public function getRequestCategory():Object {			
			var requestCategory:Object = null;
			if (this.isAmendState()) {
				requestCategory = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', getAmendRequestCategory());				
			} else if (!isEditState()) {
				requestCategory = setupView.getRequestCategory();
        	} else {
				requestCategory = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', request.@codeRequestCategory);
        	}
        	return requestCategory;			
		}
		
		private function filterSamplePrepMethod(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}
        	if (isEditState()) {
        		return true;
        	}
        	
        	if (item.@isActive == 'N') {
        		return false;
        	}
        	
        	var codeRequestCategory:String = this.getRequestCategory().@codeRequestCategory.toString();

        	var doesMatchRequestCategory:Boolean = false;
        	var theSamplePrepMethods:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethodRequestCategory').DictionaryEntry.(@value != '' && @idSamplePrepMethod == item.@value.toString());
    	   	for each (var xref1:Object in theSamplePrepMethods) {
    	   		if (xref1.@codeRequestCategory.toString() == codeRequestCategory) {
	   				doesMatchRequestCategory = true;
    	   		    break;
    	   		}
    	   	}
        	
        	var doesMatchSampleType:Boolean = true;
        	if (sampleSetupView.sampleTypeCombo.selectedItem != null && 
        	    sampleSetupView.sampleTypeCombo.selectedItem.@value != null  &&
        	    sampleSetupView.sampleTypeCombo.selectedItem.@value != "") {
        	   	doesMatchSampleType = false;
        	   	var applicableSamplePrepMethods:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethodSampleType').DictionaryEntry.(@value != '' && @idSamplePrepMethod == item.@value.toString());
        	   	for each (var xref:Object in applicableSamplePrepMethods) {
        	   		if (xref.@idSampleType.toString() == sampleSetupView.sampleTypeCombo.selectedItem.@value.toString()) {
    	   				doesMatchSampleType = true;
	    	   		    break;
        	   		}
        	   	}
        	} 
        	
        	return doesMatchRequestCategory && doesMatchSampleType;
        }  
        
        private function filterSampleType(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}

        	
        	if (item.@isActive == 'N') {
        		return false;
        	}
        	
        	
        	var doesMatchRequestCategory:Boolean = false;
        	var requestCategory:Object = this.getRequestCategory();
        	var theSamplePrepMethods:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SampleTypeRequestCategory').DictionaryEntry.(@value != '' && @idSampleType == item.@value.toString());
    	   	for each (var xref1:Object in theSamplePrepMethods) {
    	   		if (xref1.@codeRequestCategory.toString() == requestCategory.@codeRequestCategory.toString()) {
	   				doesMatchRequestCategory = true;
    	   		    break;
    	   		}
    	   	}

			// If this is a solexa request, filter the sample type
			// by the selected application
			var doesMatchApplication:Boolean = true;
			if (this.isSolexaState()) {
				var codeApplication:Object = this.seqSetupView.radioGroupSeqApp.selectedValue;
				if (codeApplication != null) {
					doesMatchApplication = false;
		        	var theSampleTypes:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SampleTypeApplication').DictionaryEntry.(@value != '' && @idSampleType == item.@value.toString());
		    	   	for each (var xref2:Object in theSampleTypes) {
		    	   		if (xref2.@codeApplication.toString() == codeApplication.toString()) {
			   				doesMatchApplication = true;
		    	   		    break;
		    	   		}
		    	   	}
	    	   	}
			}

        	return doesMatchRequestCategory && doesMatchApplication;
        }  

        private function filterSeqLibProtocol(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}

        	
        	if (item.@isActive == 'N') {
        		return false;
        	}


			var doesMatchApplication:Boolean = true;
			if (this.isSolexaState()) {
				var codeApplication:Object = this.seqSetupView.radioGroupSeqApp.selectedValue;
				if (codeApplication != null) {
					doesMatchApplication = false;
		        	var theSeqLibProtocols:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SeqLibProtocolApplication').DictionaryEntry.(@value != '' && @idSeqLibProtocol == item.@value.toString());
		    	   	for each (var xref2:Object in theSeqLibProtocols) {
		    	   		if (xref2.@codeApplication.toString() == codeApplication.toString()) {
			   				doesMatchApplication = true;
		    	   		    break;
		    	   		}
		    	   	}
	    	   	}
			}

        	return doesMatchApplication; 
        }  

		private function filterApplication(item:Object):Boolean {
			var codeRequestCategory:String = this.getRequestCategory().@codeRequestCategory;
			if (item.@value == "") {
    	    	return false;
			} 
        	
        	if (item.@isActive == 'N') {
        		return false;
        	}
        	var doesMatchRequestCategory:Boolean = false;
        	var theApplications:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategoryApplication').DictionaryEntry.(@value != '' && @codeApplication == item.@value.toString());
    	   	for each (var xref:Object in theApplications) {
    	   		if (xref.@codeRequestCategory.toString() == codeRequestCategory) {
	   				doesMatchRequestCategory = true;
    	   		    break;
    	   		}
    	   	}
        	
        	
        	return doesMatchRequestCategory;
        }  

		private function filterMicroarrayApplication(item:Object):Boolean {
			var codeRequestCategory:String = this.getRequestCategory().@codeRequestCategory;

			if (codeRequestCategory == null || codeRequestCategory == "" || codeRequestCategory == "SOLEXA" || codeRequestCategory == 'HISEQ') {
				codeRequestCategory = "AGIL";
			}
			if (item.@value == "") {
    	    	return false;
			} 
        	
        	if (item.@isActive == 'N') {
        		return false;
        	}
        	var doesMatchRequestCategory:Boolean = false;
        	var theApplications:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategoryApplication').DictionaryEntry.(@value != '' && @codeApplication == item.@value.toString());
    	   	for each (var xref:Object in theApplications) {
    	   		if (xref.@codeRequestCategory.toString() == codeRequestCategory) {
	   				doesMatchRequestCategory = true;
    	   		    break;
    	   		}
    	   	}
        	
        	
        	return doesMatchRequestCategory;
        }  
        
        private function filterGenomeBuild(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}
        	if (isEditState()) {
        		return true;
        	}
        	
        	if (item.@isActive == 'N') {
        		return false;
        	}
        	var doesMatch:Boolean = false;
        	if (currentState == "SolexaLaneAmendState") {
        		if (request != null && request.hasOwnProperty("@idOrganismSampleDefault")) {
		        	if (item.@idOrganism.toString() == request.@idOrganismSampleDefault.toString()) {
		        	    doesMatch = true;
	    	    	}
        		}
        	} else {
	        	if (sampleSetupView.sampleOrganismCombo.selectedItem != null && 
	        	    sampleSetupView.sampleOrganismCombo.selectedItem.@value != null  &&
	        	    sampleSetupView.sampleOrganismCombo.selectedItem.@value != "") {
	        	    if (item.@idOrganism.toString() == sampleSetupView.sampleOrganismCombo.selectedItem.@value.toString()) {
	        	    	doesMatch = true;
	        	    }
	        	}
        		
        	}
    	   	return doesMatch;
    	}

        private function filterSeqRunType(item:Object):Boolean {
    	   	var codeRequestCategory:String = this.getRequestCategory().@codeRequestCategory;
			if (item.@value == "") {
    	    	return false;
			} 
        	
        	if (item.@isActive == 'N') {
        		return false;
        	}
        	return true;
    	}
       
        private function filterNumberSequencingCyclesAllowed(item:Object):Boolean {
			if (isEditState()) {
        		return true;
        	}

			if (item.@value == "") {
    	    	return false;
			} 
        	        	
			var codeRequestCategory:String = this.getRequestCategory().@codeRequestCategory;
        	var doesMatch:Boolean = false;
        	if (item.@codeRequestCategory.toString() == codeRequestCategory) {
	    		doesMatch = true;
    	   	}
        	
        	return doesMatch;
        }  

        public function filterSlideProduct(item:Object):Boolean {
        	if (item.@idSlideProduct == null || item.@idSlideProduct == "") {
        		return true;
        	}
        	
        	if (!isEditState() && item.@isActive == 'N') {
        		return false;	
        	}
        	
        	if (this.theTab == null) {
        		return false;
        	}
			
			// Internal experiments should always have a hybsetup tab
			if (parentApplication.submitInternalExperiment()) {
				if (!this.theTab.contains(hybSetupView)) {
					return false;
				} 
			}
        	
			var doesMatchRequestCategoryVendor:Boolean = true;
        	if (!isEditState()) {
				var requestCategory:Object = getRequestCategory();
        		doesMatchRequestCategoryVendor = false;
        		if (item.@idVendor == requestCategory.@idVendor) {
        			doesMatchRequestCategoryVendor = true;
        		}
        	} else {
        		doesMatchRequestCategoryVendor = false;
				var rCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', request.@codeRequestCategory);
        		if (item.@idVendor == rCategory.@idVendor) {
        			doesMatchRequestCategoryVendor = true;        			
        		}
        	}       	
        	
        	var doesMatchOrganism:Boolean = true;
			// Only match organism for internal experiments
			if (parentApplication.submitInternalExperiment()) {
				if (hybSetupView.organismCombo.selectedItem != null && 
					hybSetupView.organismCombo.selectedItem.@value != null  &&
					hybSetupView.organismCombo.selectedItem.@value != "") {
					if (item.@idOrganism == hybSetupView.organismCombo.selectedItem.@idOrganism) {
						doesMatchOrganism = true;
					} else {
						doesMatchOrganism = false;
					}
				}
			}
			
			var doesMatchExperimentCategory:Boolean = true;
			var applicationsForSlideProduct:XMLList  =  null;
			var x:Number = 0;
			if (parentApplication.submitInternalExperiment()) {
				if (hybSetupView.currentState == "SetupState" &&
					hybSetupView.microarrayAppRadioGroup.selectedValue != null &&
					hybSetupView.microarrayAppRadioGroup.selectedValue != null != "") {
					doesMatchExperimentCategory = false;
					applicationsForSlideProduct  = item.applications.Application;
					for(x = 0; x < applicationsForSlideProduct.length(); x++) {
						if (applicationsForSlideProduct[x].@codeApplication == hybSetupView.microarrayAppRadioGroup.selectedValue) {
							doesMatchExperimentCategory = true;
							break;
						}
					}
				}				
			} else {
				if (setupView.currentState.indexOf("AdminExternal") == 0 &&
					setupView.radioGroupAppAdmin.selectedValue != null &&
					setupView.radioGroupAppAdmin.selectedValue != null != "") {
					doesMatchExperimentCategory = false;
					applicationsForSlideProduct  = item.applications.Application;
					for(x = 0; x < applicationsForSlideProduct.length(); x++) {
						if (applicationsForSlideProduct[x].@codeApplication == setupView.radioGroupAppAdmin.selectedValue) {
							doesMatchExperimentCategory = true;
							break;
						}
					}
				} else if (setupView.currentState.indexOf("External") == 0 &&
					setupView.radioGroupApp.selectedValue != null &&
					setupView.radioGroupApp.selectedValue != null != "") {
					doesMatchExperimentCategory = false;
					applicationsForSlideProduct   = item.applications.Application;
					for(x = 0; x < applicationsForSlideProduct.length(); x++) {
						if (applicationsForSlideProduct[x].@codeApplication == setupView.radioGroupApp.selectedValue) {
							doesMatchExperimentCategory = true;
							break;
						}
					}
				}	
				
			}
			
        	
        	var doesMatchGroup:Boolean = true;
			// Only filter by custom slides if this is an internal experiment
			if (parentApplication.submitInternalExperiment()) {
				var idLab:Object = null;
				if (this.isAmendState() || this.isEditState()) {
					if  (request != null && request.hasOwnProperty("@idLab")) {
						idLab = request.@idLab;    			
					}
				} else {
					if (setupView.labCombo.selectedItem != null) {
						idLab = setupView.labCombo.selectedItem.@idLab;
					}
				}
				if (idLab != null && idLab != "" && hybSetupView.isCustomRadio.selected) {
					if (item.@isCustom == "Y" && item.@idLab == idLab) {
						doesMatchGroup = true;
					} else {
						doesMatchGroup = false;
					}
				} else if (idLab != null && idLab != "" && hybSetupView.isCatalogRadio.selected) {
					if (item.@isCustom != "Y") {
						doesMatchGroup = true;
					} else {
						doesMatchGroup = false;
					}
				}
			}
        	
        	return doesMatchRequestCategoryVendor && doesMatchOrganism && doesMatchExperimentCategory && doesMatchGroup;
        }  
		
		public function cloneRequest(requestToClone:Object):void {
			this.requestToClone = requestToClone;
			getRequestToClone.send();
		}
		
		private function onGetRequestToClone(event:ResultEvent):void {
			existingLanes = null;
			
			var clonedRequest:Object = getRequestToClone.lastResult..Request.(@idRequest == requestToClone.@idRequest);
			if (!isMicroarrayState()) {
				clonedRequest.replace("hybridizations", <hybridizations></hybridizations>); 	
			} 
			if (!isSolexaState()) {
				clonedRequest.replace("sequenceLanes", <sequenceLanes></sequenceLanes>); 	
			} 
			
			request = clonedRequest;
			request.@idRequest = "0";
			request.@number = "";
			request.@idLab = setupView.labCombo.selectedItem.@idLab;
			request.@idAppUser = setupView.idAppUser;
			request.@idProject = setupView.projectCombo.selectedItem.@idProject;
			request.@codeRequestCategory = setupView.requestTypeGroup.selectedValue;

			var requestCategory:Object = getRequestCategory();
			
			// Clear out workflow fields from sample and hyb
			for each(var sample:Object in samples) {
				sample.@qualDate = '';
				sample.@qualCompleted = 'N';
				sample.@qualFailed = 'N';
				sample.@qualBypassed="N"; 
				sample.@qual260nmTo230nmRatio=""; 
				sample.@qual260nmTo280nmRatio=""; 
				sample.@qual28sTo18sRibosomalRatio=""; 
				sample.@qualAverageFragmentLength=""; 
				sample.@qualRINNumber=""; 
				sample.@qualCalcConcentration="";
				sample.@qualStatus = "";
				sample.@treatment = "";
				sample.@canChangeSampleName='Y';
				sample.@canChangeSampleType='Y';
				sample.@canChangeSampleConcentration='Y';
				sample.@canChangeSampleSource='Y';
				sample.@canChangeSamplePrepMethod='Y';
   				sample.@canChangeNumberSequencingLanes='Y';
   				sample.@canChangeNumberSequencingLanes='Y'; 
   				sample.@canChangeNumberSequencingCycles='Y';
   				sample.@numberSequencingLanes = '';
   				sample.@concentration = '';
   				sample.@seqPrepDate = '';
   				sample.@seqPrepLibConcentration = '';
   				sample.@seqPrepGelFragmentSizeFrom = '';
   				sample.@seqPrepGelFragmentSizeTo = '';
   				sample.@seqPrepStockLibVol = '';
   				sample.@seqPrepStockEBVol = '';
   				sample.@seqPrepStockEBVol = '';
   				sample.@qualFragmentSizeFrom =""; 
   				sample.@qualFragmentSizeTo="";
   				sample.@seqPrepQualCodeBioanalyzerChipType=""; 
   				sample.@seqPrepStockDate="";
   				
		
   				
   				if (isQCState()) {
   					sample.@idOrganism = '';
   				}
   				
   				if (!isQCState()) {
   					sample.@codeBioanalyzerChipType = '';
   					sample.@codeConcentrationUnit = '';
   				}
   				
   				if (sampleSetupView.currentState == 'SolexaSetupPreppedState') {
   					sample.@isAlreadyPrepped = 'Y';
   				} else  {
   					sample.@isAlreadyPrepped = 'N';
   					sample.@idSeqLibProtocol = '';
   				}
			}
			

			for each(var hyb:Object in hybs) {
				 // If this is a 1 channel kind if request, clear out channel2 of the cloned request
				 if (requestCategory.@numberOfChannels != "2") {
					hyb.@idSampleChannel2 = "0";
				 }
				 hyb.@idArrayCoordinate="" 
				 hyb.@idScanProtocol="";
				 hyb.@extractionDate="";
				 hyb.@extractionFailed=""; 
				 hyb.@extractionBypassed="";
				 hyb.@hybFailed="";
				 hyb.@hybBypassed="";
				 hyb.@idSlide = "";
				 hyb.@idFeatureExtractionProtocol="";
				 hyb.@hybDate; 
				 hyb.@idLabeledSampleChannel1="";
				 hyb.@idLabeledSampleChannel2=""
				 hyb.@slideNumber="";
				 hyb.@slide="";
				 hyb.@hasResults=""; 
				 hyb.@slideBarcode="";
				 hyb.@hybCompleted="N"; 
				 hyb.@extractionCompleted="N";
				 hyb.@arrayCoordinate="";
				 hyb.@idLabelingProtocolChannel1=""; 
				 hyb.@idLabelingProtocolChannel2="";
				 hyb.@idScanProtocolChannel1=""; 
				 hyb.@idScanProtocolChannel2="";
				 hyb.@idHybProtocolChannel1=""; 
				 hyb.@idHybProtocolChannel2="";
				 hyb.@idFeatureExtractionProtocolChannel1=""; 
				 hyb.@idFeatureExtractionProtocolChannel2="";
				 hyb.@labelingYieldChannel1="";
				 hyb.@codeLabelingReactionSizeChannel1="STD"; 
				 hyb.@labelingYieldChannel2=""; 
				 hyb.@numberOfReactionsChannel2="" 
				 hyb.@codeLabelingReactionSizeChannel2="STD"; 
				 hyb.@labelingFailedChannel1="N"; 
				 hyb.@labelingFailedChannel2="N"; 
				 hyb.@labelingCompleteChannel1="N"; 
				 hyb.@labelingCompleteChannel2="N"; 
				 hyb.@labelingStatusChannel1=""; 
				 hyb.@labelingStatusChannel2=""; 
				 hyb.@arrayCoordinateName=""; 
				 hyb.@hybStatus=""; 
				 hyb.@extractionStatus="";
			     hyb.@canChangeSampleDesignations='Y';
			     hyb.@canChangeSlideSource='Y';
			     hyb.@canChangeSlideDesign='Y';
			}

			
			
			// Make sure we render the annotation tab because
			// otherwise we won't activate the renderer code that
			// hides/shows the sample annotation columns in the samples
			// grid
			if (theTab.contains(annotationView)) {
				theTab.selectedChild = this.annotationView;
			}
						
			callLater(initializeControls);
			callLater(assignSlideNumbers);
			
			
			callLater(sampleSetupView.checkSampleSetupCompleteness);
			callLater(samplesView.checkSamplesCompleteness);
			callLater(hybSetupView.checkHybSetupCompleteness);
			callLater(hybsView.checkHybsCompleteness);
			
			
		}
			
		private function assignSlideNumbers():void {
			if (parentApplication.submitInternalExperiment()) {
				hybsView.assignSlideNumbers(hybSetupView.slideProductCombo);								
			} else {
				hybsView.assignSlideNumbers(setupView.slideProductCombo);								
			}
		}
		
		public function setupEditForm(theRequest:Object):void {
			request = theRequest;
			setupTheEditForm();
		}

		public function setupTheEditForm():void {
			currentState = '';
			samplesView.currentState = '';



			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory',request.@codeRequestCategory);
			requestCategoryName = requestCategory.@display.toString();
			requestIcon = requestCategory.@icon;

			buttonStack.selectedIndex = 1;
			
			var prevSelectedTab:Container = theTab.selectedChild;			
			
			annotationView.enabled = true;
			samplesView.enabled = true;		

			// Make sure we render the annotation tab because
			// otherwise we won't activate the renderer code that
			// hides/shows the sample annotation columns in the samples
			// grid
			if (theTab.contains(annotationView)) {
				theTab.selectedChild = this.annotationView;
			} 

			var canChangeSlide:Boolean = false;			
			if (parentApplication.hasPermission("canWriteAnyObject")) {
				canChangeSlide = true;		
			} else {
				for each(var hyb:Object in hybs) {
					if (hyb.@canChangeSlideDesign == "Y") {
						canChangeSlide = true;
						break;
					}
				}
			}

			if (parentApplication.hasPermission("canWriteAnyObject")) {
				samplesView.addSampleButton.visible = true;
				samplesView.copySampleButton.visible = true;
				samplesView.deleteSampleButton.visible = true;
				samplesView.clearSamplesButton.visible = true;
			} else {
				samplesView.addSampleButton.visible = false;
				samplesView.copySampleButton.visible = false;
				samplesView.deleteSampleButton.visible = false;
				samplesView.clearSamplesButton.visible = false;
			}
			

			if (requestCategory.@type == 'ILLUMINA') {
				currentState = request.@isExternal == 'Y' ? 'SeqExternalEditState' : 'SolexaEditState';
				this.annotationView.checkSecurity();			
				if (parentApplication.hasPermission("canWriteAnyObject")) { 
					samplesView.currentState = 'SolexaSamplesAdminState';						
				} else {
					samplesView.currentState = 'SolexaSamplesEditState';					
				}
				samplesView.showHideColumns();
				
				// Comment out since seq lib treatments are not in use for now
				//this.seqSetupView.currentState = "EditState";  
					
				if (request.@isExternal != 'Y') {
					if (parentApplication.hasPermission("canWriteAnyObject")) {
						lanesView.currentState = 'LanesAdminState';
					} else {
						lanesView.currentState = '';
					} 
				}
				
				this.sampleCharacteristicEntries.refresh();


			} else if (request.@codeRequestCategory == 'QC') {
				currentState = 'QCEditState';
				if (parentApplication.hasPermission("canWriteAnyObject")) {
					samplesView.currentState = 'QCSamplesAdminState';						
				} else {
					samplesView.currentState = 'QCSamplesEditState';					
				}
				samplesView.showHideColumns(); 

			} else {
				
				currentState = 'MicroarrayEditState';
				this.filteredMicroarrayAppList.refresh();
				this.hybSetupView.currentState = 'EditState';
				this.annotationView.checkSecurity();			
				if (parentApplication.hasPermission("canWriteAnyObject")) {
					samplesView.currentState = 'MicroarraySamplesAdminState';	
					hybsView.currentState = 'HybsAdminState';	
				} else {
					samplesView.currentState = 'MicroarraySamplesEditState';					
					hybsView.currentState = 'HybsEditState';				
				}
				samplesView.showHideColumns();


				hybSetupView.organismCombo.enabled = canChangeSlide;
				hybSetupView.slideProductCombo.enabled = canChangeSlide;
				hybSetupView.isCatalogRadio.enabled = canChangeSlide;
				hybSetupView.isCustomRadio.enabled = canChangeSlide;
				

				hybSetupView.label = "Slide";
				hybSetupView.numberOfHybsContainer.visible = false;
				hybSetupView.slideSourceContainer.visible = false;
				this.sampleCharacteristicEntries.refresh();

			}
			
			if (this.request.analysisExperimentItems.hasOwnProperty("AnalysisExperimentItem")) {
				this.analysisButton.enabled = true;
			} else {
				this.analysisButton.enabled = false;
			}
			
			if (theTab.contains(visibilityView)) {
				this.visibilityView.currentState = "EditState";							
			}

			this.getRequestCategoryName();
			this.getBillingAccountName(); 
			this.getExperimentCategoryName();
			
		    postSetupEditForm();

		}
		
		private function postSetupEditForm():void {
			// Only show billing tab if it is is not an external experiment
			if (this.request.@isExternal == 'Y') {
				if (theTab.contains(this.billingTab)) {
					theTab.removeChild(billingTab);
				}
			} else {
				if (!theTab.contains(this.billingTab)) {
					theTab.addChild(billingTab);
				}
			}
			initializeControls();
			

			if (this.isMicroarrayState() && this.request.@isExternal != 'Y') {
				assignSlideNumbers();	
			}
			samplesView.checkSamplesCompleteness();
			if (this.isMicroarrayState() && this.request.@isExternal != 'Y') {
				hybSetupView.checkHybSetupCompleteness();
				hybsView.checkHybsCompleteness();
			}
			
			
			this.dirty.resetDirty();
		}
		
		public function removeDataListeners():void {
			hybs.removeEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingHybDataChange);
			samples.removeEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
			lanes.removeEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingLaneDataChange);			
			
		}
		
		public function setupDataListeners():void {
			hybs.addEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingHybDataChange);
			samples.addEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
			lanes.addEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingLaneDataChange);			
			
		}
		
		
		
		private function onGetNewRequest(event:ResultEvent):void {
			existingLanes = null;
			request = getNewRequest.lastResult..Request.(@idRequest = '0');
			request.@idAppUser = setupView.idAppUser;
			
			if (theTab.contains(this.annotationView)) {
				this.sampleCharacteristicEntries.refresh();
				this.annotationView.addNonStandardSampleColumns();
				this.annotationView.checkSecurity();
			} 
			
			initializeSubmitForm();		

		}
		
		private function refreshLab():void {
			if (requestEditLabCombo.selectedItem != null && requestEditLabCombo.selectedItem.@idLab != '') {

				var params:Object = new Object();
				params.idLab = requestEditLabCombo.selectedItem.@idLab;
				getLab.send(params);
			}
		}
		
		// We have to make sure that the slide product list and slide design list
		// is initialized for the edit form before we can initialize its controls.
		// This is now necessary because the getting of the slide product and slide
		// design list was taken out of the gnomex app launch and deferred to the
		// show() of ExperimentEditForm.
		private function initializeControls():void {
			if (isMicroarrayState() && this.isEditState()) {
				if (this.getSlideProductList.lastResult != null && filteredSlideProductList != null) {
					// If we already have the slide product and slide design list, initialize controls
					initializeControlsImpl();
				} else {
					
					if (this.getSlideProductList.lastResult == null || filteredSlideProductList == null) {
						// We don't have the slide design list so run the query.
						// The result handler will detect if it is time to call
						// initializeControlsImpl.
						getSlideProductList.send();
					} else {
						// We do have the slide product list so  refresh it. 
						this.checkToInitializeEditControls();
					}
					
					if (this.getSlideDesignList.lastResult == null) {
						// We don't have the slide design list so run the query.
						// The result handler will detect if it is time to call
						// initializeControlsImpl.
						getSlideDesignList.send();
					}
				} 
			} else {
				initializeControlsImpl();
			}
		}

		private function initializeControlsImpl():void {
			
			if (isEditState()) {
				for each(var l:Object in parentApplication.promptedSubmitRequestLabList) {
					if (l.@idLab == request.@idLab) {
						requestEditLabCombo.selectedItem = l;
						refreshLab();
						break;
					}
				}
			}
			
			if (theTab.contains(sampleSetupView)) {
				sampleSetupView.numberOfSamples.text = new String(request.samples.Sample.length());
				sampleSetupView.sampleTypeCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SampleType',request.@idSampleTypeDefault);
				sampleSetupView.samplePrepMethodCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SamplePrepMethod', request.@idSamplePrepMethodDefault);
				
				if (currentState == 'QCState') {
					for each(var chipType:Object in sampleSetupView.bioanalyzerChipTypeGrid.dataProvider) {
						if (chipType.@codeBioanalyzerChipType == request.@codeBioanalyzerChipType) {
							chipType.@isSelected = 'true';
							break;
						}
					}
				}
			}

			
			if (isMicroarrayState() || this.isSolexaState()) {
				if (theTab.contains(sampleSetupView)) {
					if (request.@idOrganismSampleDefault != '') {
						sampleSetupView.sampleOrganismCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Organism', request.@idOrganismSampleDefault);											
					}
				}
			}
			
			if (isMicroarrayState()) {
				selectedIdSlideProduct = request.@idSlideProduct;
				hybSetupView.numberOfHybs.text = new String(request.hybridizations.Hybridization.length());
				var theSlideProduct:Object = this.getSlideProductList.lastResult.SlideProduct.(@idSlideProduct == request.@idSlideProduct);
				hybSetupView.organismCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Organism', theSlideProduct.@idOrganism);

				if (theSlideProduct.@isCustom == 'Y') {
					hybSetupView.isCustomRadio.selected = true;				
				} else {
					hybSetupView.isCatalogRadio.selected = true;
				}

				
				var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', request.@codeApplication);
				if(hybSetupView.microarrayAppRadioGroup.numRadioButtons > 0) {
					hybSetupView.microarrayAppRadioGroup.selectedValue = application[0].@value;					
				} else {
					lastSelectedApplication = application[0].@value;
				}
				
				hybSetupView.initializeSlideProductCombo();
				hybSetupView.slideProductValidator.validate();
				// TODO:  Is this okay to remove????  Don't know which slide product combo
				// we are using since it could be from external (setup view) or internal
				// (hyb setup view) experiment submissions.
				// Leave out for now assuming that slide product combo change event
				// takes care of necessary initialization.
				//initializeSlideDesigns();

				hybSetupView.coreSlideSourceCheckbox.selected = true;
				
			}			
			if (isEditState()) {
				visibilityView.visibilityRadioGroup.selectedValue = request.@codeVisibility;
			} 
			
			
			if (this.isAmendState() && theTab.contains(amendSetupView)) {
				theTab.selectedChild = this.amendSetupView;
			} else if (theTab.contains(setupView)) {
				theTab.selectedChild = this.setupView;			
			} else {
				theTab.selectedChild = this.samplesView;
				samplesView.initializeBarcoding();	

			}
			
		}
		
		
		public function initializeSlideDesigns(slideProductCombo:mx.controls.ComboBox):void {
			var slideDesign:Object = hybsView.getDefaultSlideDesign(slideProductCombo);								
			if (slideDesign != null) {
				for each (var hyb:Object in hybs) {
					hyb.@idSlideDesign = slideDesign.@idSlideDesign;
				}
			}
		}
		

		
		
		
		public function sortSampleCharacteristics(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var sc1:String = obj1.@sampleCharacteristic;
				var sc2:String = obj2.@sampleCharacteristic;
				
				if (sc1 == 'Other') {
					return 1;
				} else if (sc2 == 'Other') {
					return  -1;
				} else {
					if (sc1 < sc2) {
						return -1;
					} else if (sc1 > sc2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}	
        
        public function isSampleTypeCompatibile():Boolean {
        	var compatible:Boolean = true;
        	var sampleTypeX:Object = null;
        	if (this.isSolexaState()) {
        		return compatible;		
        	}
        	
        	if (isEditState()) {
        		if (request.@codeApplication!= '' && 
        		    request.@idSampleTypeDefault != '') {
    	    		compatible = false;
					for each(sampleTypeX in parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SampleTypeApplication')) {
						if (sampleTypeX.@codeApplication == request.@codeApplication &&
					    	sampleTypeX.@idSampleType == request.@idSampleTypeDefault) {
							compatible = true;
							break;
						}
					}    
        		}
        	} else {
	        	if (hybSetupView.microarrayAppRadioGroup.selectedValue != null &&
	        	    hybSetupView.microarrayAppRadioGroup.selectedValue!= '' &&
	        	    sampleSetupView.sampleTypeCombo.selectedItem != null &&
	        	    sampleSetupView.sampleTypeCombo.selectedItem.@value != '') {
	        	    compatible = false;
					for each(sampleTypeX in parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SampleTypeApplication')) {
						if (sampleTypeX.@codeApplication == hybSetupView.microarrayAppRadioGroup.selectedValue &&
						    sampleTypeX.@idSampleType == sampleSetupView.sampleTypeCombo.selectedItem.@value) {
							compatible = true;
							break;
						}
					}        		    	
	        	}
        		
        	}
        	return compatible;
        }        

		private function validateRequest():void {
			errorMessage = '';
			warningMessage = '';
			
			// Make sur lab and billing acount filled in
			if (isEditState()) {
				if (requestEditLabCombo.selectedItem == null || requestEditLabCombo.selectedItem.@idLab == '') {
					errorMessage += "Lab must be specified.\n\n";
				} 
				// Make sure the billing account is filled in on requests that already had an assigned billing account.
				if (request.hasOwnProperty('@idBillingAccount') && request.@idBillingAccount != '' && (requestEditBillingAccountCombo.selectedItem == null || requestEditBillingAccountCombo.selectedItem.@idBillingAccount == '')) {
					errorMessage += "Billing account must be specified.\n\n";
				}
				if (requestEditProjectCombo.selectedItem == null || requestEditProjectCombo.selectedItem.@idProject == '') {
					errorMessage += "Project must be specified.\n\n";
				}
			}
			
			// Check for duplicate sampleNames
			var sampleNames:Dictionary = new Dictionary();
			for each(var s:Object in samples) {
				var sampleCount:int = 0;
				for each(var s1:Object in samples) {
					if (s.@name == s1.@name) {
						sampleCount++;
					}
				}
				sampleNames[s.@name.toString()] = sampleCount;
			}
			var dupSampleNames:String = '';
			for (var key:Object in sampleNames) {
				if (sampleNames[key] > 1) {
					if (dupSampleNames != '') {
						dupSampleNames += ',';
					}
					dupSampleNames += key;
				}
			}
			if (dupSampleNames != '') {
				errorMessage += 'Some of the samples (' + dupSampleNames + ') are named the same.  ';
				if (!isEditState()) {
					errorMessage += 'Please provide unique sample names.';
				}
				errorMessage += '\n\n';					
			}

			// If this is a new request or the request is being changed on
			// the edit screen, warn if all samples are not used on at least 
			// one hyb or seq lane
			if (!isAmendState()) {
				var allSamplesUsed:Boolean = true;
				var unusedSampleList:String = '';
				var unusedSampleCount:int = 0;
				var target:String = "";
				if (!isQCState()) {
					for each(var sample:Object in samples) {
						var useCount:int = 0;
						if (isSolexaState()) {
							useCount = getLaneCount(sample);
							target = "sequence lane";
						} else if (isMicroarrayState()) {
							useCount = getChannelCount(sample);
							target = "hybridization";
						}
						
						if (useCount == 0) {
							allSamplesUsed = false;
							if (unusedSampleList != '') {
								unusedSampleList += ', ';							
							}
							unusedSampleList += sample.@name;
							unusedSampleCount++;
							
						}
					}
					if (unusedSampleCount > 0) {
						if (unusedSampleCount == 1) {
							warningMessage += 'The sample ' + unusedSampleList + 
							' is not used on any ' + target + 's.  ';
							warningMessage += '\n\n';					
						} else {
							warningMessage += 'The samples  (' + unusedSampleList + 
							')  are not used on any ' + target + 's.  ';
							warningMessage += '\n\n';					
						}
					}
				}	
				
			}
			
			// Warn if some of the arrays (on a multi-array slide) are not used.	
			if (isMicroarrayState() && parentApplication.submitInternalExperiment()) {
				if (hybSetupView.slideProductCombo.selectedItem == null) {
					warningMessage += "No slide selected.\n";
				} else if (hybSetupView.slideProductCombo.selectedItem.@arraysPerSlide != '' && hybSetupView.slideProductCombo.selectedItem.@arraysPerSlide != 1) {
					if (hybs.length % hybSetupView.slideProductCombo.selectedItem.@arraysPerSlide != 0) {
						warningMessage = "There are unused arrays on the multi-array slide  '" + hybSetupView.slideProductCombo.selectedItem.@name +
						 "'.\n ";
					}
				}
				
			}
		}
		
		private function getChannelCount(sample:Object):int {
			var count:int = 0;
        	if (hybs!= null) {
        		for each(var hyb:Object in hybs) {
        			if (hyb.@idSampleChannel1 == sample.@idSample ||
        			    hyb.@idSampleChannel2 == sample.@idSample) {
        				count++;
        			}
        		}
        	} 								
        	return count;
		}
		public function getLaneCount(sample:Object):int {
			var count:int = 0;
        	if (lanes!= null) {
        		for each(var sequenceLane:Object in lanes) {
        			if (sequenceLane.@idSample == sample.@idSample) {
        				count++;
        			}
        		}
        	} 								
        	return count;
		}
		public function getLanes(sample:Object, numberOfLanes:int):ArrayCollection {
			var theLanes:ArrayCollection = new ArrayCollection();
        	if (theLanes!= null) {
        		for each(var sequenceLane:Object in lanes) {
        			if (sequenceLane.@idSample == sample.@idSample) {
        				theLanes.addItem(sequenceLane);
        				if (numberOfLanes != -1 && theLanes.length == numberOfLanes) {
        					break;
        				}
        			}
        		}
        	} 								
        	return theLanes;
		}
		
		private function validateAndSubmitRequest():void {
			
			// Only submit request if it is valid
			validateRequest();
			if (errorMessage != '') {
				Alert.show(errorMessage, "Error", Alert.OK, null, null, parentApplication.iconError);
				return;
			}
			if (warningMessage != '') {
				promptToSubmitRequest();
				return;
			}
			submitRequest();
		}
		
		private function validateAndSaveRequest():void {
			validateRequest();
			
			if (errorMessage != '') {
				Alert.show(errorMessage);
				return; 
			} else if (warningMessage != '') {
				promptToSaveRequest();
				return;

			} else {
				saveRequest();				
			}
		}

		
		
		
		private function submitRequest():void { 
		 	
			initializeRequestXML();

			var params:Object = new Object();
			params.requestXMLString = request.toXMLString();
			
			if (!isAmendState()) {
				params.idProject = setupView.projectCombo.selectedItem.@idProject;				
			}
			
			var exceeds500:Boolean = false;
			
			if(agreeCheckbox.visible) {
				
				try {
					var totalPrice:String = createBillingItems.lastResult.Request.@totalPrice;
					totalPrice = totalPrice.replace("$", "");
					totalPrice = totalPrice.replace(",", "");
					var myFloat:Number = parseFloat(totalPrice);
					if(myFloat > 500.0) {
						exceeds500 = true;
					}
					
				}
				catch (err:Error) {
					// Just ignore the check if there is a conversion error
					exceeds500 = false;
				}				

			}
			
			if(exceeds500) {
				params.totalPrice = createBillingItems.lastResult.Request.@totalPrice;
			}		
			saveNewRequest.send(params);			
			
		}
		
		public function getMultiplexLanes():void {
			initializeRequestXML();
			var params:Object = new Object();
			params.requestXMLString = request.toXMLString();
			getMultiplexLaneList.send(params);
			
		}
		private function onGetMultiplexLaneList(event:ResultEvent):void {
			var readyToSubmit:Boolean = true;
			if (getMultiplexLaneList.lastResult.name() != "MultiplexLaneList") { 
				Alert.show(getMultiplexLaneList.lastResult..ACTMESSAGE.@TEXT, "Unable to get multiplex lane info");
				readyToSubmit = false;
			}
			
			if (request.@isExternal == 'Y') {
				this.submitButton.enabled = readyToSubmit;
			} else {
				agreeCheckbox.visible = readyToSubmit;				
			}
		}		
		
		public function getEstimatedBilling():void {
			initializeRequestXML();
			agreeCheckbox.visible = false;
			agreeCheckbox.label = "";
			agreeCheckbox.selected = false;
			submitButton.enabled = false;
			
			if (request.@isExternal == 'Y') {
				// This is an external experiment submission.  Don't
				// attempt to get estimated charges.
				submitButton.enabled = true;
				if (theTab.contains(this.confirmView)) {
					this.confirmView.currentState = "ExternalExperimentState";
				}
			} else {
				var accountName:String = isAmendState() ? request.@accountNumberDisplay : setupView.billingAccountCombo.selectedItem.@accountNumberDisplay;
				
				agreeCheckbox.label = "I authorize all charges to be billed to account: " + accountName;

				// This is a new experiment request. Get the estimated
				// charnges for this request.
				var params:Object = new Object();
				params.requestXMLString = request.toXMLString();
				createBillingItems.send(params);
			}
			
		}
		
		private function onCreateBillingItems(event:ResultEvent):void {
			var readyToSubmit:Boolean = true;
			if (createBillingItems.lastResult.name() == "NewBilling") { 
				if (theTab.contains(this.confirmView)) {
					var billingItems:XMLList = createBillingItems.lastResult..BillingItem;
					if (billingItems.length() == 0) {
						this.confirmView.currentState = "";						
					} else {
						if (createBillingItems.lastResult.Request.@exceedsBillingAccountBalance == 'Y' ) {
							//this.confirmView.currentState = "BillingExceedState";
							// 5/19/2011 change: BillingExceedState disabled for now
							this.confirmView.currentState = "";
							readyToSubmit = true;
						} else {
							this.confirmView.currentState = ""
						}
					}
					this.confirmView.billingConfirmGrid.rowCount = billingItems.length() > 1 ? billingItems.length() - 1 : billingItems.length();
					this.confirmView.billingConfirmGrid.validateNow();
				} else {
					readyToSubmit = false;
				}
			} else {
				Alert.show(createBillingItems.lastResult..ACTMESSAGE.@TEXT, "Unable to get estimated billing items");
				readyToSubmit = false;
			}
			//this.submitButton.enabled = readyToSubmit;
			agreeCheckbox.visible = readyToSubmit;
		}
		
		public function isExternalExperimentSubmission():Boolean {
			if (!this.isEditState() && !this.isAmendState()) {
				if (this.setupView.currentState == "ExternalExperimentState" ||
					this.setupView.currentState == "ExternalMicroarrayState" ||
					this.setupView.currentState == "AdminExternalExperimentState" ||
					this.setupView.currentState == "AdminExternalMicroarrayState") {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}			
		}
		
		private function getIdAppUserSubmitter():Object {
			var idAppUserSubmitter:Object = null;
			if ((this.currentState == "MicroarrayAmendState" || currentState == "SolexaBaseAmendState") && (parentApplication.currentState != "AdminState")) {
				// If a non-admin user is converting a QC request
				// to a microarray or sequencing request, make the user the 
				//  submitter of
				// the request, as he/she may be amending a request
				// originally submitted by someone else.
				idAppUserSubmitter = parentApplication.getIdAppUser();				
			} else if (!this.isAmendState()) {
				idAppUserSubmitter = this.setupView.idAppUser;
			} else {
				idAppUserSubmitter = request.@idAppUser;
			}
			return idAppUserSubmitter;
		}
		
		public function getSubmitterName():String {
			if ((this.currentState == "MicroarrayAmendState" || currentState == "SolexaBaseAmendState") && (parentApplication.currentState != "AdminState")) {
				// If a non-admin user is converting a QC request
				// to a microarray or sequencing request, make the user the 
				//  submitter of
				// the request, as he/she may be amending a request
				// originally submitted by someone else.
				return parentApplication.getAppUserName();
			} else if (!isAmendState()) {
				return setupView.getAppUserName();
			} else {
				return request.@ownerName.toString();
			} 
		}
		
		private function initializeRequestXML():void {			
			// Determine if this is an external experiment submission
			request.@isExternal = isExternalExperimentSubmission() ? "Y" : "N";
			
			request.@codeRequestCategory = getRequestCategory().@codeRequestCategory.toString();
			
			request.@idAppUser = this.getIdAppUserSubmitter();
			
			if (!this.isAmendState()) {
				// If we are submitting a new request, grab the lab, billing, project
				// from the setup tab
				request.@idLab = setupView.labCombo.selectedItem.@idLab;
				if (request.@isExternal == 'N') {
					request.@idBillingAccount = setupView.billingAccountCombo.selectedItem.@idBillingAccount;
				}
				request.@idProject = setupView.projectCombo.selectedItem.@idProject;
				if (currentState == 'QCState' && this.sampleSetupView.currentState == 'QCSetupBioanalyzerState') {
					request.@codeBioanalyzerChipType = sampleSetupView.getSelectedCodeBioanalyzerChipType();
				}
				
				request.@name = setupView.experimentName.text;
			}
			
			if (theTab.contains(sampleSetupView)) {
				request.@idSamplePrepMethodDefault = sampleSetupView.samplePrepMethodCombo.selectedItem.@value;
				request.@idSampleTypeDefault = sampleSetupView.sampleTypeCombo.selectedItem.@value;
				
				if (currentState != 'QCState') {
					request.@idOrganismSampleDefault = sampleSetupView.sampleOrganismCombo.selectedItem.@value;
				}						
			}
			

			if (currentState == 'MicroarrayState' || currentState == 'MicroarrayExternalState' || currentState == 'MicroarrayAmendState') {
				if (parentApplication.submitInternalExperiment()) {
					request.@idSlideProduct = hybSetupView.slideProductCombo.selectedItem.@idSlideProduct;
					request.@codeApplication = hybSetupView.microarrayAppRadioGroup.selectedValue;							
				} else {
					request.@idSlideProduct = setupView.getSlideProductCombo().selectedItem.@idSlideProduct;
					request.@codeApplication = setupView.getApp();				
				}
			} else if (this.isSolexaState()) {
				if (parentApplication.submitInternalExperiment()) {
					request.@codeApplication = seqSetupView.radioGroupSeqApp.selectedValue;				
				} else {
					request.@codeApplication = setupView.getApp();								
				}
			} else if (this.isQCState()) {
				if (parentApplication.submitInternalExperiment()) {
					request.@codeApplication = sampleSetupView.radioGroupQCApp.selectedValue;					
				} else {
					request.@codeApplication = setupView.getApp();						
				}
			}
			
			
			
			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', request.@codeRequestCategory);
			
			request.replace("samples", <samples></samples>); 
			for each(var sample:Object in samples) {
				request.samples.appendChild(sample);
			}
			request.replace("hybridizations", <hybridizations></hybridizations>); 
			if (currentState == 'MicroarrayState' || currentState == 'MicroarrayExternalState' || currentState == 'MicroarrayAmendState') {
				for each(var hyb:Object in hybs) {
					if (requestCategory.@numberOfChannels != "2") {
						hyb.@idSampleChannel2 = "0";
					}
					request.hybridizations.appendChild(hyb);
				 }
			} else {
				request.@idSlideProduct = '';
			}



			// Add back the existing lanes if we are adding lanes
			// to an existing experiment request
			request.replace("sequenceLanes", <sequenceLanes></sequenceLanes>); 
			if (this.currentState == "SolexaLaneAmendState") {
				// If for some reason, we don't have any existing lanes/
				// there is a problem with the state of the data.  Just
				// bail because we don't want the back-end command
				// to delete the existing lanes.
				if (existingLanes == null || existingLanes.length == 0) {
					Alert.show("Inconsistent state.  No existing lanes present on experiment.  Aborting submit.");
					return;
				}
				for each(var l:Object in existingLanes) { 
					request.sequenceLanes.appendChild(l);
				}
			}
			if (isSolexaState()) {
				for each(var lane:Object in lanes) {
					request.sequenceLanes.appendChild(lane);
				}
			}			
			request.replace("SeqLibTreatmentEntries", <SeqLibTreatmentEntries></SeqLibTreatmentEntries>); 
			if (isSolexaState()) {
				for each(var seqLibTreatment:Object in this.seqSetupView.seqLibTreatments) {
					if (seqLibTreatment.@isSelected == "true") {
						request.SeqLibTreatmentEntries.appendChild(seqLibTreatment);
					}
				}
			}			
			
			// Visibility
			if (theTab.contains(this.visibilityView)) {
				request.@codeVisibility = visibilityView.visibilityRadioGroup.selectedValue;
				if (this.request.@codeVisibility != null && this.request.@codeVisibility == 'INST') {
					request.@idInstitution = visibilityView.institutionCombo.selectedItem.@idInstitution;
				}				
			} else {
				request.@codeVisibility = 'MEM';
			}
			
			// Collaborators
			if (request.toString().indexOf("<collaborators>") >= 0) {
				request.replace("collaborators", <collaborators></collaborators>);
			} else{
				request.appendChild("<collaborators></collaborators>");
			}
			for each(var collaborator:Object in visibilityView.collaborators) {
				request.collaborators.appendChild(collaborator);
		 	}
			
			// We need special field that tells us the way the
			// request is being amended
			if (this.isAmendState()) {
				request.@amendState = currentState.toString();
			}
			
		}

		
		private function saveRequest():void {
			
			if (this.isMicroarrayState()) {
				request.@idSlideProduct = hybSetupView.slideProductCombo.selectedItem.@idSlideProduct;
				if(hybSetupView.microarrayAppRadioGroup.numRadioButtons > 0) {
					request.@codeApplication = hybSetupView.microarrayAppRadioGroup.selectedValue;				
				} else {
					request.@codeApplication = lastSelectedApplication;
				}				
								
			} 			
			
			request.replace("samples", <samples></samples>); 
			for each(var sample:Object in samples) {
				request.samples.appendChild(sample);
			}
			request.replace("hybridizations", <hybridizations></hybridizations>); 
			if (isMicroarrayState()) {
				for each(var hyb:Object in hybs) {
					request.hybridizations.appendChild(hyb);
				 }
			}
			request.replace("sequenceLanes", <sequenceLanes></sequenceLanes>); 
			if (isSolexaState()) {
				for each(var lane:Object in lanes) {
					request.sequenceLanes.appendChild(lane);
				}
			}
			
			request.replace("SeqLibTreatmentEntries", <SeqLibTreatmentEntries></SeqLibTreatmentEntries>); 
			if (isSolexaState()) {
				for each(var seqLibTreatment:Object in this.seqSetupView.seqLibTreatments) {
					if (seqLibTreatment.@isSelected == "true") {
						request.SeqLibTreatmentEntries.appendChild(seqLibTreatment);
					}
				}
			}		
			
			// Visibility
			request.@codeVisibility = visibilityView.visibilityRadioGroup.selectedValue;
			if (this.request.@codeVisibility != null && this.request.@codeVisibility == 'INST') {
				request.@idInstitution = visibilityView.institutionCombo.selectedItem.@idInstitution;
			}

			// Collaborators
			request.replace("collaborators", <collaborators></collaborators>);
			for each(var collaborator:Object in visibilityView.collaborators) {
				request.collaborators.appendChild(collaborator);
		 	}
			
			
			
			request.@idLab = requestEditLabCombo.selectedItem.@idLab;
			if (requestEditBillingAccountCombo.selectedItem != null && requestEditBillingAccountCombo.selectedItem.@idBillingAccount != '') {
				request.@idBillingAccount = requestEditBillingAccountCombo.selectedItem.@idBillingAccount;				
			}
			request.@idProject = requestEditProjectCombo.selectedItem.@idProject;
			request.@name = experimentName.text;

			var params:Object = new Object();
			params.requestXMLString = request.toXMLString();
			params.idProject = request.@idProject;
			saveExistingRequest.send(params);			
			
		}
		
		public function promptToSubmitRequest():void {
			Alert.show( warningMessage + "\n\nDo you want to submit the request anyway?", 
						"Warning", 
						(Alert.YES | Alert.NO), this, 
						onPromptSubmitRequest,
						parentApplication.iconWarning);
			
		}
		
		private function onPromptSubmitRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	warningMessage = '';
            	submitRequest();
            }
        }
		
		public function promptToSaveRequest():void {
			Alert.show( warningMessage + "\n\nDo you want to save the request anyway?", 
						"Warning", 
						(Alert.YES | Alert.NO), this, 
						onPromptSaveRequest,
						parentApplication.iconWarning);
			
		}
		
		private function onPromptSaveRequest(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	warningMessage = '';
            	saveRequest();
            }
        }
		
		private function onSaveNewRequest(event:ResultEvent):void {
			if (saveNewRequest.lastResult.name() == "SUCCESS") {
				submittedIdRequest = saveNewRequest.lastResult.@idRequest;
				submittedRequestNumber = saveNewRequest.lastResult.@requestNumber;

				confirmButtonStack.selectedIndex = 2;

				this.cancelButton.label = "Close";

 				nextButton.enabled = false;
				backButton.enabled = false;
				
				if (theTab.contains(setupView)) {
					setupView.enabled = false;				
				}
				if (theTab.contains(sampleSetupView)) {
					sampleSetupView.enabled = false;				
				}
				if (theTab.contains(annotationView)) {
					annotationView.enabled = false;
				}
				samplesView.enabled = false;
				
				if (this.isSolexaState()) {
					if (theTab.contains(seqSetupView)) {
						this.seqSetupView.enabled = false;					
					}
					if (theTab.contains(seqSetup1View)) {
						this.seqSetup1View.enabled = false;
					}
				}

				if (this.isSolexaEditState()) {
					lanesView.enabled = false;
				} else {
					if (theTab.contains(hybSetupView)) {
						hybSetupView.enabled = false;
					}
					if (theTab.contains(hybsView)) {
						hybsView.enabled = false;
					}					
				} 

				var message:String = "";
				var title:String = ""; 
				if (this.isAmendState()) {
					message = 'Experiment request #  ' + submittedRequestNumber + ' has been submitted, adding services to the existing experiment request.\nPlease print off the request form and deliver it to the ' + parentApplication.getProperty(parentApplication.PROPERTY_CORE_FACILITY_NAME) + '.';	
					title = "Services added to Request";			
				} else {
					if (this.isExternalExperimentSubmission()) {
						message = 'Experiment #  ' + submittedRequestNumber + ' has been registered in the GNomEx repository.';
						title = "Experiment Registered";			
						
					} else {
						message = 'Experiment request #  ' + submittedRequestNumber + ' has been submitted.\nPlease print off the request form and deliver it along with your samples to the ' + parentApplication.getProperty(parentApplication.PROPERTY_CORE_FACILITY_NAME) + '.';
						title = "Request Submitted";			
						
					}
				}
				Alert.show(message, title, 0, this, onNotifySubmitRequest);
			} else {
				Alert.show(saveNewRequest.lastResult..ACTMESSAGE.@TEXT);
			}
		}

		
		private function onNotifySubmitRequest(event:CloseEvent):void {
			if (event.detail==Alert.OK) {
				if (this.isExternalExperimentSubmission()) {
					externalRequestNumber = submittedRequestNumber;
					externalIdRequest = submittedIdRequest;
					promptToUpload();
				} else {
					showPrintableRequestForm();
				}
				// Just close the window when the request has been submitted
				// and show the submitted experiment in the Experiments view.
				var theRequestNumber:String = this.submittedRequestNumber;
				getNewRequest.send();  
				initializeSubmitForm();
				parentApplication.showExperiment(theRequestNumber);
				

			} else {
				
			}

		}
			
		private function promptToUpload():void {
			if (parentApplication.isFDTSupported) {
				Alert.buttonWidth = 120; 
				Alert.yesLabel = "Normal upload";
				Alert.noLabel = "FDT upload";
				Alert.show( "Which upload mechanism do you want to use?\n(FDT is recommended for uploads exceeding 1 GB.)",
					"Ready to upload files",
					(Alert.YES | Alert.NO | Alert.CANCEL), this, 
					onPromptToUpload);
			} else {
				ExperimentEditView.showExperimentUploadWindow(DisplayObject(parentApplication.theBody), externalIdRequest, externalRequestNumber);				
			}
			
		}
			
		private function onPromptToUpload(event:CloseEvent):void {
			Alert.yesLabel = "Yes";
			Alert.noLabel = "No";
			Alert.buttonWidth = alertButtonWidth;
			if (event.detail==Alert.YES) {
				ExperimentEditView.showExperimentUploadWindow(DisplayObject(parentApplication.theBody), externalIdRequest, externalRequestNumber);				
			} else if (event.detail == Alert.NO) {
				ExperimentEditView.showExperimentUploadFDTWindow(DisplayObject(parentApplication.theBody), externalIdRequest, externalRequestNumber);				
			}
		}
		
		private function onSaveExistingRequest(event:ResultEvent):void {
			if (saveExistingRequest.lastResult.name() == "SUCCESS") {
				dirty.resetDirty();
				
				// Inform if billing accounts reassigned on billing items
				if (saveExistingRequest.lastResult.@billingAccountMessage != '') {
					Alert.show(saveExistingRequest.lastResult.@billingAccountMessage);
				}
				
				// Warn if billing should be adjusted to take into account
				// delete hybs or lanes
				if (saveExistingRequest.lastResult.@deleteSampleCount > 0 ||
				    saveExistingRequest.lastResult.@deleteHybCount > 0 || 
				    saveExistingRequest.lastResult.@deleteLaneCount > 0) {
					if (parentApplication.hasPermission("canWriteAnyObject")) {
						
						var deleteTarget:String = "";
						if (saveExistingRequest.lastResult.@deleteSampleCount > 0) {
							deleteTarget += "Samples";
						} 
						if (saveExistingRequest.lastResult.@deleteHybCount > 0) {
							if (deleteTarget.length > 0) {
								deleteTarget += " and ";								
							}
							deleteTarget += "Hybs";
						} 
						if (saveExistingRequest.lastResult.@deleteLaneCount > 0) {
							if (deleteTarget.length > 0) {
								deleteTarget += " and ";								
							}
							deleteTarget += "Sequence Lanes";
						} 					
					
						Alert.show("Request " + saveExistingRequest.lastResult.@requestNumber + " has been saved.  Some " + deleteTarget + " have been deleted, so please adjust billing accordingly.", 
						"Warning");				
					}
				}

			 	var parms:Object = new Object();
			 	parms.idRequest = request.@idRequest;
			 	getRequest.send(parms);
			 			
			} else {
				Alert.show(saveExistingRequest.lastResult..ACTMESSAGE.@TEXT);
			}
		}
		
		private function onGetRequest(event:ResultEvent):void {
			request = getRequest.lastResult..Request.(@idRequest = request.@idRequest);
			
			parentApplication.navExperimentView.showEditView = true;	
			parentApplication.navExperimentView.refreshExperiments();
		    parentApplication.navExperimentView.detailView.detail.refreshSavedExperiment(request.@idRequest); 
		}

		private function showPrintableRequestForm():void {
			var url:URLRequest = new URLRequest('ShowRequestForm.gx?idRequest=' + submittedIdRequest + '&amendState=' + this.currentState);
			navigateToURL(url, '_blank');	
		}

		
		private function underlyingHybDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets 
				return;
			}
			dirty.setDirty();
		}
		private function underlyingSampleDataChange(event:CollectionEvent):void {
			var ignore:int = 0;
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets 
				return;
			}
			
			for each(var e:Object in event.items) {
				if (e is PropertyChangeEvent) {
					var pe:PropertyChangeEvent = PropertyChangeEvent(e);
					if (pe.property == "@channel1Count" || pe.property == "@channel2Count" || pe.property == "@laneCount" ) {
						ignore++;
					}
					if (pe.property == "@idOrganism") {
						samples.removeEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
						samplesView.propagateOrganism(String(pe.newValue));
						samples.addEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
					}else if (pe.property == "@idNumberSequencingCycles") {
						samples.removeEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
						samplesView.propagateNumberSequencingCycles(pe.source);
						samples.addEventListener( CollectionEvent.COLLECTION_CHANGE, underlyingSampleDataChange);			
					}         	
 				}
			}
			// Ignore change events on @channel1Count, @channel2Count
			if (ignore == event.items.length) {
				
			} else {
				dirty.setDirty();
				
			}
		}
		private function underlyingLaneDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets 
				return;
			}
			dirty.setDirty();
		}
		
       	private function sortDictionaryEntries(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var display1:String = obj1.@display;
				var display2:String = obj2.@display;
				
				if (display1.indexOf('Other') > -1) {
					return 1;
				} else if (display2.indexOf('Other') > -1) {
					return  -1;
				} else {
					if (display1 < display2) {
						return -1;
					} else if (display1 > display2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}
        
        private function sortSampleTypes(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var order1:int = obj1.@sortOrder;
				var order2:int = obj2.@sortOrder;
				
				if (obj1.@value == '') {
					return -1;
				} else if (obj2.@value == '') {
					return 1;
				} else {
					if (order1 < order2) {
						return -1;
					} else if (order1 > order2) {
						return 1;
					} else {
						return 0;
					}
				}
			}			
		}			
        private function sortLanes(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var sampleId1:Object =  obj1.@idSample;
				var sampleId2:Object =  obj2.@idSample
				
				if (sampleId1 == '') {
					return -1;
				} else if (sampleId2 == '') {
					return 1;
				} else {
					if (sampleId1 < sampleId2) {
						return -1;
					} else if (sampleId1 > sampleId2) {
						return 1;
					} else {
						return 0;
					}
				}
			}			
		}			

        private function sortNumberSequencingCyclesAllowed(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				
				if (obj1.@value == '') {
					return -1;
				} else if (obj2.@value == '') {
					return 1;
				} else {
					var numberCycles1:Number = obj1.@numberSequencingCyclesDisplay;
					var numberCycles2:Number = obj2.@numberSequencingCyclesDisplay;
					var sortOrder1:Number = obj1.@seqRunTypeSortOrder == '' ? -1 : obj1.@seqRunTypeSortOrder;
					var sortOrder2:Number = obj2.@seqRunTypeSortOrder == '' ? -1 : obj2.@seqRunTypeSortOrder;
					
					if (numberCycles1 < numberCycles2) {
						return -1;
					} else if (numberCycles1 > numberCycles2) {
						return 1;
					} else {
						if (sortOrder1 < sortOrder2) {
							return -1;
						} else if (sortOrder1 > sortOrder2) {
							return 1;
						} else {
							return 0;
						} 
					} 
				}
			}			
		}			
		
		// Sort seq run type by sortOrder field
        private function sortSeqRunType(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var order1:int = obj1.@sortOrder;
				var order2:int = obj2.@sortOrder;
				
				if (obj1.@value == '') {
					return -1;
				} else if (obj2.@value == '') {
					return 1;
				} else {
					if (order1 < order2) {
						return -1;
					} else if (order1 > order2) {
						return 1;
					} else {
						return 0;
					}
				}
			}			
		}			
		
		// Sort application by sortOrder field
        private function sortApplication(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var order1:int = obj1.@sortOrder;
				var order2:int = obj2.@sortOrder;
				
				if (obj1.@value == '') {
					return -1;
				} else if (obj2.@value == '') {
					return 1;
				} else {
					if (order1 < order2) {
						return -1;
					} else if (order1 > order2) {
						return 1;
					} else {
						return 0;
					}
				}
			}			
		}			

		private function showViewWindow():void {
		     parentDocument.theViews.selectedChild = parentDocument.detailView;
           	 parentDocument.detailView.detail.setupForm(this.request);
		}
		

		private function onGetLab(event:ResultEvent):void {
			if (getLab.lastResult.name() == "OpenLabList") {
				var lab:Object = getLab.lastResult..Lab.(@idLab == requestEditLabCombo.selectedItem.@idLab);
				
				billingAccounts = new XMLListCollection(lab.billingAccounts.BillingAccount);
		        requestEditBillingAccountCombo.selectedItem = null;
		        for each(var ba:Object in billingAccounts) {
		        	if (ba.@idBillingAccount == request.@idBillingAccount) {
		        		requestEditBillingAccountCombo.selectedItem = ba;
		        		break;
		        	}
		        }
		        
		        projects = new XMLListCollection(lab.projects.Project);
		        requestEditProjectCombo.selectedItem = null;
		        for each(var p:Object in projects) {
		        	if (p.@idProject == request.@idProject) {
		        		requestEditProjectCombo.selectedItem = p;
		        		break;
		        	}
		        } 
				
			}			

		}

        private function onGetSlideDesignList(event:ResultEvent):void {
        	var emptyNode:XML = <SlideDesign idSlideDesign='' name=''/>;
        	slideDesignList = new PromptXMLListCollection(emptyNode, new XMLListCollection(getSlideDesignList.lastResult.SlideDesign));

	        checkToInitializeEditControls();
	        checkToPerformPostAmendSetup();
        }
        
        private function onGetSlideProductList(event:ResultEvent):void {
        	var emptyNode:XML = <SlideProduct idSlideProduct='' name='' label=''/>;
        	
        	filteredSlideProductList = new XMLListCollection(getSlideProductList.lastResult.SlideProduct);
        	filteredSlideProductList.addItemAt(emptyNode, 0);

	        filteredSlideProductList.filterFunction = filterSlideProduct;
	        filteredSlideProductList.refresh();
	        
	        checkToInitializeEditControls();
	        checkToPerformPostAmendSetup();
        }		
        
        private function checkToInitializeEditControls():void {
        	if (isMicroarrayState() && this.isEditState()) {
				if (getSlideProductList.lastResult != null && this.getSlideDesignList.lastResult != null) {
					initializeControlsImpl();
				}
        	}
        }

        private function checkToPerformPostAmendSetup():void {
        	if (currentState == "MicroarrayAmendState") {
				if (getSlideProductList.lastResult != null && this.getSlideDesignList.lastResult != null) {
					this.postSetupAmendFormImpl();
				}
        	}
        }
		
		
		private function setAmendState():void {
			if (this.radioGroupAmendType.selectedValue != null && this.radioGroupAmendType.selectedValue != "") {
				if (this.radioGroupAmendType.selectedValue.toString().indexOf("ADD-LANES-") == 0) {
					this.currentState = "SolexaLaneAmendState";
					setAmendTitle();
				} else if (this.radioGroupAmendType.selectedValue.toString().indexOf("QC-TO-") == 0 && this.getAmendRequestType() == parentApplication.TYPE_ILLUMINA) {
					this.filteredAppList.refresh();

					this.currentState = "SolexaBaseAmendState";
					setAmendTitle();
				} else if (this.radioGroupAmendType.selectedValue.toString().indexOf("QC-TO-") == 0 && this.getAmendRequestType() == parentApplication.TYPE_MICROARRAY) {
					this.currentState = "MicroarrayAmendState"; 
					setAmendTitle();
				}
			}
		}
		
		
		
		private function getCandidateAmendExperiments():void {
			browseTree.selectedItem = null;
			checkAmendSetupCompleteness();
			
			if (this.radioGroupAmendType.selectedValue != null && 
			    this.radioGroupAmendType.selectedValue != "" &&
			    this.labCombo.selectedIndex > 0) {
			    	
				var params:Object = new Object();
				params.idLab = labCombo.selectedItem.@idLab;
				params.showSamples = "N";
				params.showCategory = "N";
				params.showExternalExperiments = "N";
				params.searchPublicProjects = 'N';
				params.publicExperimentsInOtherGroups = 'N';
				params.isBioanalyzer = isRequestToAmendQC() ? 'Y' : 'N';
				params.isSolexa = isRequestToAmendIllumina() ? 'Y' : 'N';
				
				// Limit by the kind of illumina request if we are adding lanes
				if (this.isRequestToAmendIllumina()) {
					params.codeRequestCategory = this.getAmendRequestCategory();
				}
				
				if (lastWeekCheckbox.selected) { 
					params.lastWeek = 'Y'; 
				} else if (lastMonthCheckbox.selected) {
					params.lastMonth = 'Y';
				} else if (lastThreeMonthsCheckbox.selected) {
					params.lastThreeMonths = 'Y';
				} else if (lastYearCheckbox.selected) {
					params.lastYear = 'Y';
				}

				// For normal users, scope to only show user's own experiments.
				// Lab managers can amend anyone's experiment.  (Admins are
				// considered manager on all labs, so they can also
				// amend any experiment.				
				if (appUserCombo.selectedItem != null && appUserCombo.selectedItem.@idAppUser != '') {
					params.idAppUser = appUserCombo.selectedItem.@idAppUser;				
				}					
				
				this.getCandidateProjectRequestList.send(params);
				
			} else {
				browseTree.visible = false;
				this.checkAmendSetupCompleteness();
			}
		}
		
		private function onGetCandidateProjectRequestList(event:ResultEvent): void {
        	if (this.getCandidateProjectRequestList.lastResult.name() != "ProjectRequestList") {
        		Alert.show(getCandidateProjectRequestList.lastResult..ACTMESSAGE.@TEXT);
        		this.browseTree.visible = false;
        		return;
        	}
        	  
        	if (getCandidateProjectRequestList.lastResult.Lab.length() == 0) {
        		this.browseTree.visible = false;
        		var filter:String = "";
        		if (this.appUserCombo.selectedItem != null && this.appUserCombo.selectedItem.@idAppUser != "") {
        			filter = "submitted by '" + appUserCombo.selectedItem.@displayName + "' for the " + labCombo.selectedItem.@name + " ";;
        		} else if (this.lastMonthCheckbox.selected || this.lastThreeMonthsCheckbox || this.lastWeekCheckbox || this.lastYearCheckbox.selected) {
        			filter = "submitted for the " + labCombo.selectedItem.@name + " ";
        		}
        		if (this.lastWeekCheckbox.selected) {
        			filter += "in the last week were ";
        		} else if (this.lastMonthCheckbox.selected) {
        			filter += "in the last month were ";
        		} else if (this.lastThreeMonthsCheckbox.selected) {
        			filter += "in the last 3 months were ";
        		} else if (this.lastYearCheckbox.selected) {
        			filter += "in the last year were ";
        		}
        		if (this.isRequestToAmendQC()) {
        			Alert.show("No Sample Quality experiments " + filter + "found.");
        		} else if (this.isRequestToAmendIllumina()){
        			Alert.show("No Illumina Sequencing experiments " + filter + "found.");
        		} else {
        			Alert.show("No Sample Quality experiments " + filter + "found.");
        		}
        	} else {
        		this.browseTree.visible = true;
	        	callLater(expandTree);
        	}
	    }	
	    	
		private function expandTree():void {
			
        	browseTree.expandItem(getCandidateProjectRequestList.lastResult, true);
  			for each(var project:Object in getCandidateProjectRequestList.lastResult..Project) {
  				browseTree.expandItem(project, true);
  			}
  			for each(var lab:Object in getCandidateProjectRequestList.lastResult..Lab) {
  				browseTree.expandItem(lab, true);
  			}
  			browseTree.selectedIndex = 0;
  			browseTree.validateNow();
  			browseTreeContainer.validateNow();
  			this.setAmendTitle();
		}        		    

		public function getTreeLabel(item:Object):String {
				if (item.name() == "Request") {
					return item.@displayName;
				} else {
					return item.@label;
				}
		}
		
		private function toggleDateCheckboxes(checkBoxNumber:int):void {
			if (checkBoxNumber == 1) {
				this.lastMonthCheckbox.selected = false;
				this.lastThreeMonthsCheckbox.selected = false;
				this.lastYearCheckbox.selected  = false;
			} else if (checkBoxNumber == 2) {
				this.lastWeekCheckbox.selected = false;
				this.lastThreeMonthsCheckbox.selected = false;
				this.lastYearCheckbox.selected  = false;
			} else if (checkBoxNumber == 3) {
				this.lastWeekCheckbox.selected  = false;
				this.lastMonthCheckbox.selected = false; 
				this.lastYearCheckbox.selected  = false;
			}  else if (checkBoxNumber == 4) {
				this.lastWeekCheckbox.selected  = false;
				this.lastMonthCheckbox.selected = false; 
				this.lastThreeMonthsCheckbox.selected = false;
			}   
		} 	
		
		public function isAmendState():Boolean {
			if (currentState == "AmendState" ||
			    currentState == "MicroarrayAmendState" ||
			    currentState == "SolexaBaseAmendState" ||
			    currentState == "SolexaLaneAmendState") {
				return true;    	
			} else {
				return false;
			}
		}	
		
		public function isSolexaAmendState():Boolean {
			if (currentState == "SolexaBaseAmendState" ||
			    currentState == "SolexaLaneAmendState") {
				return true;
			} else {
				return false;
			}
		}
		public function isMicroarayAmendState():Boolean {
			if (currentState == "MicroarrayAmendState") {
				return true;
			} else {
				return false;
			}
		}
		
		private function checkAmendSetupCompleteness():void {
			var isComplete:Boolean = false;
			if (this.browseTree.selectedItem != null && this.browseTree.selectedItem.name() == "Request") {
				
				if (this.getAmendRequestCategory() != null && this.getAmendRequestCategory() != "") {
					isComplete = true;
				}
			}
			
			if (isComplete) {
				this.getRequestToAmend.send();
			}
			

			if (currentState == "SolexaBaseAmendState") {
	    		seqSetupView.enabled = isComplete;
        	} else if (currentState == "SolexaLaneAmendState") {
        		this.seqSetup1View.enabled = isComplete;
        	} else if (currentState == "MicroarrayAmendState" ) {
	    		sampleSetupView.enabled = isComplete;
    			if (theTab.contains(this.annotationView)) {
        			annotationView.enabled = isComplete;
       			}        			
    		}
    		
    		enableNextButtons();
    		
    		
    		callLater(postAmendSetupCompleteness, [isComplete]);
    		
    		
        }
        
        private function postAmendSetupCompleteness(isComplete:Boolean):void {
    		if (!isComplete) {
    			if (currentState == "SolexaBaseAmendState") {
    				this.seqSetupView.enabled = false;
    			} else if (currentState == "SolexaLaneAmendState") {
    				this.seqSetup1View.enabled = false;
    			} else if (currentState == "MicroarrayAmendState") {
    				this.sampleSetupView.enabled = false;
    			}
	    		this.samplesView.enabled = false;
	        	if (this.theTab.contains(this.hybSetupView)) {
		        	this.hybSetupView.enabled = false;
	        	} 
	        	if (this.theTab.contains(this.hybsView)) {
		        	this.hybsView.enabled = false;
	        	} 
	        	this.confirmView.enabled = false;
    		} else {
    			if (currentState == "SolexaBaseAmendState") {
    				this.seqSetupView.checkSeqAppSetupCompleteness();
    			} else if (currentState == "SolexaLaneAmendState") {
    				this.seqSetup1View.checkSeqSetup1Completeness();
    			} else if (currentState == "MicroarrayAmendState") {
    				this.sampleSetupView.checkSampleSetupCompleteness();
    			}
    			
    			
    			this.samplesView.checkSamplesCompleteness();
    			this.hybSetupView.checkHybSetupCompleteness();
    			this.hybsView.checkHybsCompleteness();
    		}
        	
        }
	
		private function onGetRequestToAmend(event:ResultEvent):void {
			
			var request:Object = getRequestToAmend.lastResult..Request.(@idRequest == browseTree.selectedItem.@idRequest);
			existingLanes = request.sequenceLanes.SequenceLane;

			setupAmendForm(request);
			
			if (theTab.contains(this.annotationView)) {
				this.sampleCharacteristicEntries.refresh();
				this.annotationView.addNonStandardSampleColumns();
			} 
		}
		
		private function setAmendTitle():void {
			this.titleLabel.text = "";
			if (this.currentState == "SolexaBaseAmendState" ) {
				this.titleLabel.text = "Adding Illumina sequencing services to Sample Quality Experiment ";		
			} else if (this.currentState == "MicroarrayAmendState") {
				this.titleLabel.text = "Adding Microarray services to Sample Quality Experiment ";	
			} else if (this.currentState == "SolexaLaneAmendState") {
				this.titleLabel.text = "Adding Illumina sample sequencing runs to Experiment ";			
			}
			if (this.browseTree.selectedItem != null && this.browseTree.selectedItem.name() == "Request") {
				this.titleLabel.text += this.browseTree.selectedItem.@requestNumber;
			}			
			var codeRequestCategory:String = getAmendRequestCategory();
			if (codeRequestCategory != '') {
				var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', codeRequestCategory);
				this.requestIcon = requestCategory.@icon;
			}

			

		}

		public function setupAmendForm(theRequest:Object):void {
			request = theRequest;
			samplesView.currentState = '';
			
			setAmendTitle();

			var requestCategory:Object = getRequestCategory();
			requestCategoryName = requestCategory.@display.toString();
			
			var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application',request.@codeApplication);
			applicationName = application.@display.toString();
			
			var prevSelectedTab:Container = theTab.selectedChild;			
				
			this.annotationView.checkSecurity();		

			if (this.isSolexaAmendState()) {
				if (this.currentState != "SolexaLaneAmendState") {
					this.sampleSetupView.currentState = "SolexaAmendState";
				} 
				this.samplesView.currentState = "SolexaSamplesState";
			} else if (this.isMicroarayAmendState()) {				
				this.sampleSetupView.currentState = "MicroarrayAmendState";
				this.hybSetupView.currentState = "SetupState";
			}
			
			
			callLater(postSetupAmendForm);

		}
		
		private function postSetupAmendForm():void {
			if (currentState == "MicroarrayAmendState") {
				if (this.getSlideProductList.lastResult != null && filteredSlideProductList != null) {
					// If we already have the slide product and slide design list, initialize controls
					postSetupAmendFormImpl();
				} else {
					
					if (this.getSlideProductList.lastResult == null || filteredSlideProductList == null) {
						// We don't have the slide design list so run the query.
						// The result handler will detect if it is time to call
						// initializeControlsImpl.
						getSlideProductList.send();
					} else {
						// We do have the slide product list so  refresh it. 
						this.checkToPerformPostAmendSetup();  
					}
					
					if (this.getSlideDesignList.lastResult == null) {
						// We don't have the slide design list so run the query.
						// The result handler will detect if it is time to call
						// initializeControlsImpl.
						getSlideDesignList.send();
					}
				} 
			} else {
				postSetupAmendFormImpl();
			}
		}
		
		private function postSetupAmendFormImpl():void {
			// Set the codeRequestCategory
			request.@codeRequestCategory = this.getAmendRequestCategory();
			
			this.samplesView.showHideColumns();
			
			if (isSolexaAmendState()) {
				this.filteredGenomeBuildList.refresh();
				this.filteredNumberSequencingCycleAllowedList.refresh();
			
				
				// Get rid of the existing lanes.  User will specify
				// additional lanes
				lanes.removeAll();
				
				// Propagate the entries on seq setup1 that
				// may have been selected from prev amend request
				this.seqSetup1View.propagateSeqRunType();
				this.seqSetup1View.propagateNumberSequencingCycles();
				this.seqSetup1View.propagateGenomeBuild();
				this.seqSetup1View.propagateAnalysisInstructions();

				
			}
			
			if (currentState == "MicroarrayAmendState" || currentState == "SolexaBaseAmendState") {
				// We are converting a QC request to a microarray or illumina
				// sequencing request.
				this.filteredSampleTypeList.refresh();
				this.samplePrepMethodList.refresh();
			
				// Set the default sample type on the request based on the first sample listed
				var idSampleTypeDefault:String = request.samples.Sample[0].@idSampleType.toString();
				request.@idSampleTypeDefault = idSampleTypeDefault;
			} 
			
			// Default the samples and sample setup for QC->SEQ 
			if (currentState == "SolexaBaseAmendState") {
   			   // Initialize @seqPrepByCore to 'Y'
				for each(var s:Object in request.samples.Sample) {
					s.@seqPrepByCore = "Y";
				}

				// Default the sample type and nucleic acid extraction
				// dropdowns on sample setup
				sampleSetupView.sampleTypeCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SampleType',request.@idSampleTypeDefault);
				sampleSetupView.samplePrepMethodCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SamplePrepMethod', request.@idSamplePrepMethodDefault);
				
				// Reset the organism on the sample if it was previously selected
				sampleSetupView.sampleOrganismCombo.selectedIndex = 0;
				sampleSetupView.propagateSampleOrganism();
			}
			
			
			if (currentState == "MicroarrayAmendState") {
				// Get rid of the hybs from previous amend
				hybs.removeAll();

				// Filter the slide product list
				this.filteredSlideProductList.refresh();
				
				
				
				// Filter the microarray app list
				this.filteredMicroarrayAppList.refresh();
				
				// Default the sample type and nucleic acid extraction
				// dropdowns on sample setup
				sampleSetupView.sampleTypeCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SampleType',request.@idSampleTypeDefault);
				sampleSetupView.samplePrepMethodCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SamplePrepMethod', request.@idSamplePrepMethodDefault);

				// Reset the organism on the sample if it was previously selected
				sampleSetupView.sampleOrganismCombo.selectedIndex = 0;
				sampleSetupView.propagateSampleOrganism();

				// Hide/Show the channel 2 sample column
				var requestCategory:Object = this.getRequestCategory();
				if (requestCategory.@numberOfChannels == "2") {
					this.samplesView.currentState = 'MicroarraySamplesState';
					this.hybsView.currentState = "";
					hybsView.channel2SampleColumn.visible = true;
					samplesView.labelColumn.visible = true;
					confirmView.channel2SampleConfirmColumn.visible = true;
				} else {
					this.samplesView.currentState = 'MicroarrayOneColorSamplesState';
					this.hybsView.currentState = "HybsOneColorState";
					hybsView.channel2SampleColumn.visible = false;
					samplesView.labelColumn.visible = false;
					confirmView.channel2SampleConfirmColumn.visible = false;
					for each (var s1:Object in samples) {
						s1.@label = 'cy3';
					}
				}
				
				
				// Reset the hyb setup view
				hybSetupView.organismCombo.selectedIndex = -1;
				hybSetupView.slideProductCombo.selectedIndex = -1;
				hybSetupView.numberOfHybs.text = '';
				hybSetupView.isCatalogRadio.selected = true;
				hybSetupView.coreSlideSourceCheckbox.selected = false;
			 	hybSetupView.clientSlideSourceCheckbox.selected = false;
				hybSetupView.stripSlideSourceCheckbox.selected = false;

				hybSetupView.organismCombo.enabled = true;
				hybSetupView.slideProductCombo.enabled = true;
				hybSetupView.isCatalogRadio.enabled = true;
				hybSetupView.isCustomRadio.enabled = true;


			}
			
			
			this.dirty.resetDirty();
		}
		
				
		
		private function onGetLabForAddingServices(event:ResultEvent):void {			
			var lab:Object = getLabForAddingServices.lastResult..Lab.(@idLab == labCombo.selectedItem.@idLab);
			
	        
	        if (parentApplication.hasPermission('canWriteAnyObject')) {
		        this.appUserCombo.selectedIndex = 0;
	        } else {
	        	for each(var u:Object in appUsers) {
	        		if (u.@idAppUser == parentApplication.getIdAppUser()) {
			        	this.appUserCombo.selectedItem = u;
	    				break;    			
	        		}
	        	}
	        }
	        this.getCandidateAmendExperiments();
		}
        private function sortAppUsers(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var display1:String = obj1.@displayName;
				var display2:String = obj2.@displayName;
				
				if (display1 < display2) {
					return -1;
				} else if (display1 > display2) {
					return 1;
				} else {
					return 0;
				}
				
			}
		}	
		
		public function showConvertIlluminaRequest():void {
   			var convertWindow:ConvertIlluminaRequestWindow = ConvertIlluminaRequestWindow(PopUpManager.createPopUp(DisplayObject(this), ConvertIlluminaRequestWindow, false));
   			PopUpManager.centerPopUp(convertWindow);
   			convertWindow.init(this.request);
    	}
    	
    	public static function showExperimentUploadWindow(parent:DisplayObject, idRequest:Object, requestNumber:String):void {
			var uploadWindow:ExperimentUploadWindow = ExperimentUploadWindow(PopUpManager.createPopUp(parent, ExperimentUploadWindow, true));
			PopUpManager.centerPopUp(uploadWindow);
			uploadWindow.init(idRequest, requestNumber);
    		
    	}
			
			
		public static function showExperimenOrganizeWindow(parent:DisplayObject, idRequest:Object, requestNumber:String):void {
			var uploadWindow:ExperimentUploadWindow = ExperimentUploadWindow(PopUpManager.createPopUp(parent, ExperimentUploadWindow, true));
			PopUpManager.centerPopUp(uploadWindow);
			uploadWindow.init(idRequest, requestNumber);
			uploadWindow.theTab.selectedIndex = 1;
			
		}
			
		public static function showExperimentOrganizeWindow(parent:DisplayObject, idRequest:Object, requestNumber:String):void {
			var uploadWindow:ExperimentUploadWindow = ExperimentUploadWindow(PopUpManager.createPopUp(parent, ExperimentUploadWindow, true));
			PopUpManager.centerPopUp(uploadWindow);
			uploadWindow.init(idRequest, requestNumber);
			uploadWindow.theTab.selectedIndex = 1;
		}

		public static function showExperimentUploadFDTWindow(parent:DisplayObject, idRequest:Object, requestNumber:String):void {
			var uploadWindow:ExperimentUploadWindow = ExperimentUploadWindow(PopUpManager.createPopUp(parent, ExperimentUploadWindow, true));
			PopUpManager.centerPopUp(uploadWindow);
			uploadWindow.init(idRequest, requestNumber);
			uploadWindow.uploadFilesStack.selectedIndex = 1;
		}

    	public function showSampleBarcodes():Boolean {
    		var show:Boolean = false;
    		if (this.isSolexaState()) {
    			if (currentState == "SolexaLaneAmendState" ) {
					for each(var s:Object in samples) {
						if (s.@idOligoBarcode != '') {
							show = true;
							break;		
						}
					}
				} else if (!parentApplication.submitInternalExperiment()) {
					show = false;
				} else if (this.isEditState()) {
    				show = true;
    			} else if (sampleSetupView.currentState == "SolexaSetupPreppedState" && sampleSetupView.barcodeRadioGroup.selectedValue == 'Y') {
					show = true;
				} 	
    		}
    		return show;
    	}
    	
    	public function showSampleCustomBarcodes():Boolean {
    		var show:Boolean = false;
    		if (this.isSolexaState()) {
				if (currentState == "SolexaLaneAmendState") {
					for each(var s:Object in samples) {
						if (s.@barcodeSequence != '' && s.@idOligoBarcode == '') {
							show = true;
							break;		
						}
					}
				} else if (!parentApplication.submitInternalExperiment()) {
					show = false;
				} else if (this.isEditState()) {
					show = true;
				} else if (sampleSetupView.currentState == "SolexaSetupPreppedState" && sampleSetupView.barcodeRadioGroup.selectedValue == 'C') {
					show = true;
				}	
    		}
    		return show;
    	}
    	
    	
    	public function showSampleMultiplexGroup():Boolean {
    		var show:Boolean = false;
    		if (this.isSolexaState()) {
	    		if (currentState == "SolexaLaneAmendState") {
					for each(var s:Object in samples) {
						if (s.@multiplexGroupNumber != '') {
							show = true;
							break;		
						}
					}
				} else if (isEditState()) {
					show = false;
				}  else if (!parentApplication.submitInternalExperiment()) {
					show = false;
				} else if (sampleSetupView.barcodeRadioGroup != null && sampleSetupView.barcodeRadioGroup.selectedValue != null && sampleSetupView.barcodeRadioGroup.selectedValue != 'N' && 
								this.seqSetup1View.numberSamplesPerChannel != null && this.seqSetup1View.numberSamplesPerChannel.value > 1) {
					show = true;
				} else {
					show = false;
				}	
    		}
    		return show;
    	}
    	
     		

		public function propagateAnalysisInstructions():void {
			for each (var sample:Object in this.samples) {
				sample.@analysisInstructions = this.analysisInstructions.text;
			}
			for each (var lane:Object in this.lanes) {
				lane.@analysisInstructions = this.analysisInstructions.text;
			}
		}
			
		public function propagatePrepInstructions():void {
			for each (var sample:Object in this.samples) {
				sample.@prepInstructions = this.prepInstructions.text;
			}
				
		}
			
		protected function agreeCheckbox_clickHandler(event:MouseEvent):void {
			this.submitButton.enabled = agreeCheckbox.selected;
		}
			
			
		]]>
	</mx:Script>
	
  	<mx:XMLListCollection id="sampleCharacteristicEntries" source="{request.SampleCharacteristicEntries.SampleCharacteristicEntry}" 
	  	 sort="{sampleCharacteristicSorter}"  filterFunction="{filterSampleCharacteristicEntry}"/>
	<mx:Sort id="sampleCharacteristicSorter" compareFunction="sortSampleCharacteristics" unique="true"/>


	<mx:XMLListCollection id="samples" source="{request.samples.Sample}"/>

	<mx:XMLListCollection id="hybs" source="{request.hybridizations.Hybridization}" />

 	<mx:XMLListCollection id="billingItems" source="{request.billingItems.BillingLab}"/>

	<mx:Sort id="laneSorter" compareFunction="sortLanes"/>
	<mx:XMLListCollection id="lanes" source="{request.sequenceLanes.SequenceLane}" sort="{laneSorter}"/>
	
	<mx:XMLListCollection id="multiplexLanes" source="{getMultiplexLaneList.lastResult..MultiplexLane}"/>
 
  	<mx:XMLListCollection id="billingAccounts" />
  	<mx:XMLListCollection id="projects" />

	<mx:XMLListCollection id="appUsers"   source="{getLabForAddingServices.lastResult..Lab.submitters.AppUser}"/>

    <mx:VBox width="100%" verticalGap="8" id="navBox" verticalAlign="top" >
		<mx:HBox id="hbox7" verticalAlign="middle" horizontalGap="1">
			<mx:Image source="{requestIcon}"/>
			<mx:Label id="titleLabel" styleName="titleLabel" text="{parentApplication.isInternalExperimentSubmission ? 'Submit Experiment Request' : 'Register External Experiment'}"/>
		</mx:HBox>		
	</mx:VBox>

 	<mx:VBox  width="100%" height="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" verticalGap="0" id="vbox1">
 	    	
		<mx:TabNavigator id="theTab"  styleName="form" width="100%" 
			creationPolicy="all"
			height="100%" paddingLeft="8" 
			paddingRight="4" paddingBottom="4"  paddingTop="6" change="enableNextButtons()">
			
		    <experiment:TabSetupView id="setupView">		    	
		    </experiment:TabSetupView>

		    <experiment:TabSeqSetupView id="seqSetupView" enabled="false">		    	
		    </experiment:TabSeqSetupView>
		    
		    <experiment:TabSampleSetupView id="sampleSetupView">		    	
		    </experiment:TabSampleSetupView>

		    <experiment:TabSeqSetup1View id="seqSetup1View">		    	
		    </experiment:TabSeqSetup1View>
		   
		    <experiment:TabAnnotationView id="annotationView">		    	
		    </experiment:TabAnnotationView> 
		    
		    <experiment:TabSamplesView id="samplesView">		    	
		    </experiment:TabSamplesView>
		    
			<experiment:TabHybSetupView id="hybSetupView">				
			</experiment:TabHybSetupView>
			
			<experiment:TabHybsView id="hybsView">				
			</experiment:TabHybsView>
			
			<experiment:TabVisibilityView id="visibilityView">
			</experiment:TabVisibilityView>
			
			<experiment:TabConfirmView id="confirmView">				
			</experiment:TabConfirmView>
		</mx:TabNavigator>
	</mx:VBox>
	
 	   <mx:ControlBar width="100%" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" horizontalGap="1">
 		<mx:ViewStack id="buttonStack" width="100%">
	 	    <mx:HBox width="100%"  verticalAlign="middle">
				<mx:Button label="Back" enabled="false" visible="true" id="backButton" click="previousTab()" disabledIcon="@Embed(source='../../assets/arrow_left_disabled.png')" icon="@Embed(source='../../assets/arrow_left.png')" fontWeight="normal"/>
				<mx:Button id="nextButton"  label="Next" enabled="false" click="nextTab()" icon="@Embed(source='../../assets/arrow_right.png')" labelPlacement="left" fontWeight="normal">
					<mx:disabledIcon>@Embed(source='../../assets/arrow_right_disabled.png')</mx:disabledIcon>
				</mx:Button>
				<mx:ViewStack id="confirmButtonStack" width="100%">
							<mx:HBox  height="26" horizontalScrollPolicy="off" width="100%"   verticalAlign="middle">
							  <mx:ViewStack id="userWarningStack" width="100%">
							      <mx:HBox width="100%">
							      </mx:HBox>
								  <mx:HBox  id="userWarningsBoxSamples" width="100%" horizontalScrollPolicy="off" visible="{userWarningsSamples == '' ? false : true}" backgroundAlpha="{userWarningsSamples == '' ? 0 : 1}" backgroundColor="#FFFFFF"  borderColor="#000000" borderStyle="{userWarningsSamples == '' ? 'none' : 'solid'}" >
										<mx:Label  text="{userWarningsSamples}" width="100%" styleName="warningLabel"/>
								  </mx:HBox>							  	
								  <mx:HBox id="userWarningsBoxSampleSetup"  width="100%" horizontalScrollPolicy="off" visible="{userWarningsSampleSetup == '' ? false : true}" backgroundAlpha="{userWarningsSampleSetup == '' ? 0 : 1}" backgroundColor="#FFFFFF" borderColor="#000000" borderStyle="{userWarningsSampleSetup == '' ? 'none' : 'solid'}">
										<mx:Label  text="{userWarningsSampleSetup}" width="100%" styleName="warningLabel" />
								  </mx:HBox>
								  <mx:HBox id="userWarningsBoxHybSetup"  horizontalScrollPolicy="off" visible="{userWarningsHybSetup == '' ? false : true}"  backgroundAlpha="{userWarningsHybSetup == '' ? 0 : 1}" backgroundColor="#FFFFFF"  borderColor="#000000" borderStyle="{userWarningsHybSetup == '' ? 'none' : 'solid'}">
										<mx:Label  text="{userWarningsHybSetup}" width="100%" styleName="warningLabel"/>
								  </mx:HBox>
							  </mx:ViewStack>
							</mx:HBox>
								
							<mx:HBox height="100%" width="100%"  verticalAlign="top" horizontalAlign="left" horizontalScrollPolicy="off" horizontalGap="5">
								<mx:Button label="Submit" id="submitButton" enabled="true" icon="@Embed('../../assets/tick.png')" click="validateAndSubmitRequest()"  visible="true"/>
								<mx:CheckBox label=" " id="agreeCheckbox" fontWeight="bold" color="#1D42BB" fontSize="11" width="100%" textAlign="left" click="agreeCheckbox_clickHandler(event)"/>
							</mx:HBox>
							<mx:HBox width="100%" horizontalAlign="left" verticalAlign="top" >
							</mx:HBox>
					    	
				</mx:ViewStack>
				<mx:HBox horizontalAlign="right">
					<mx:Button label="Cancel" id="cancelButton" click="promptToCancelRequest()"/>
				</mx:HBox>
	 	    </mx:HBox>
	 	    <mx:HBox width="100%"   horizontalAlign="left" paddingRight="1" id="hbox8">
				<mx:Spacer width="100%"/>
	 	        <util:DirtyNote id="dirty"  />
 				<mx:Button id="saveButton" label="Save" 
	            	icon="@Embed('../../assets/action_save.gif')" 
	            	click="validateAndSaveRequest()">
	            </mx:Button>

	 	    </mx:HBox>
 			
 		</mx:ViewStack>
 	   	
 	   </mx:ControlBar>
 	   
	
    <mx:states>
    	<mx:State name="EditState">
    		<mx:AddChild relativeTo="{vbox1}" position="before">
    			<mx:HBox width="100%" paddingTop="0" paddingBottom="0" horizontalGap="6" paddingLeft="0" paddingRight="0">
    				<mx:VBox verticalGap="0">
    					 <mx:HBox verticalGap="0" horizontalGap="0">
    					       <mx:Text text="Experiment" width="90"  fontWeight="bold"/>
    					       <mx:Text text="{requestCategoryName}" width="250"  fontWeight="normal"/>
    					   </mx:HBox>
    					 <mx:HBox verticalGap="0" horizontalGap="0">
    					    <mx:Spacer width="90"/>
    					    <mx:Text  text="{experimentCategoryName}" fontWeight="normal" width="250"/>
    					 </mx:HBox>
		    			<mx:HBox verticalGap="0" horizontalGap="0" width="340" >
		    			  <mx:Text text="Submitted by"  fontWeight="bold" width="90"/>
		    			  <mx:Text text="{this.request.@ownerName}" />
		    			  <mx:Text text="{this.request.@createDate}" paddingLeft="1"/>
		    			</mx:HBox>
    				</mx:VBox>  
     				<mx:VBox verticalGap="2" maxWidth="700" width="100%" id="vbox3">
    				    
    				    <mx:HBox verticalGap="0" width="100%" horizontalGap="0">
    				           <mx:Label text="Group"  width="80" fontWeight="bold"/>
    				           <mx:ComboBox id="requestEditLabCombo"
    				           	  labelField="@name" 
    				           	  change="this.dirty.setDirty();refreshLab()" 
    				           	  dataProvider="{parentApplication.promptedSubmitRequestLabList}" 
    				           	  enabled="{parentApplication.hasPermission('canWriteAnyObject') ? true : false}"
    				           	  width="320"/>
    				       </mx:HBox>
    				    <mx:HBox verticalGap="0" width="100%" horizontalGap="0" id="hbox5">
    				        <mx:Label text="Project"  width="80" fontWeight="bold"/>
    				        <mx:ComboBox id="requestEditProjectCombo"
    				           	  labelField="@name" 
    				           	  change="this.dirty.setDirty()"
    				           	  dataProvider="{projects}" 
    				           	  enabled="true"
    				           	  width="320"/>
    				    </mx:HBox>
    				    <mx:HBox>
	    				    <mx:Text height="{this.request.@completedDate != '' ? 20 : 0}" visible="{this.request.@completedDate != ''}" text="{'Completed'}" width="80"  fontWeight="bold"/>    				       
	    				    <mx:Text height="{this.request.@completedDate != '' ? 20 : 0}" visible="{this.request.@completedDate != ''}" text="{this.request.@completedDate}"/>
    				    </mx:HBox>

    				</mx:VBox>
    				
    			</mx:HBox>
    		</mx:AddChild>
    		<mx:RemoveChild target="{seqSetup1View}"/>
    		<mx:AddChild relativeTo="{theTab}" position="lastChild">
    			<mx:Canvas label="Billing" width="100%" height="100%" id="billingTab">
    			 <mx:VBox width="100%" height="100%" verticalGap="4"  paddingBottom="4" paddingTop="4" paddingRight="4" paddingLeft="4" id="billingContainer" >
					<mx:HBox verticalGap="0" width="100%" horizontalGap="2" verticalAlign="middle">
					    <mx:Label text="Account"  
					    	fontStyle="normal"
					       	 visible="{this.request.@isExternal != 'Y'}"
					    	fontWeight="bold"/>
					    <mx:ComboBox id="requestEditBillingAccountCombo"
					       	  labelField="@accountName" 
					       	  dataProvider="{billingAccounts}" 
					       	  change="{this.dirty.setDirty();}"
					       	  visible="{this.request.@isExternal != 'Y'}"
					       	  enabled="{parentApplication.hasPermission('canWriteAnyObject')}"
/>
					</mx:HBox>
					<mx:AdvancedDataGrid height="100%" width="100%" id="billingADConfirmGrid"  
					displayItemsExpanded="true"  
        			editable="false"  
        			sortExpertMode="true" 
        			sortableColumns="false"
					backgroundAlpha="0" borderStyle="solid" showHeaders="true" 
					fontSize="9" iconFunction="parentApplication.getTreeIcon">
						<mx:dataProvider>   
      						<mx:HierarchicalData source="{billingItems}"/> 
    					</mx:dataProvider> 
        				<mx:columns> 
	        				<mx:AdvancedDataGridColumn headerText="Group" dataField="@labName" editable="false" width="70" wordWrap="false"/>
	        				<mx:AdvancedDataGridColumn headerText="Acct" dataField="@accountName" editable="false" width="100" wordWrap="false" />
	        				<mx:AdvancedDataGridColumn headerText="Period" dataField="@idBillingPeriod" editable="false" width="70"  wordWrap="false"
							  itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingPeriod').DictionaryEntry,'@display', '@value', '@idBillingPeriod')}"/>
	        				<mx:AdvancedDataGridColumn  headerText="Price Category" wordWrap="true" dataField="@category" editable="false" width="200">
				              <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@category}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
	        				</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Description" wordWrap="true" dataField="@description" editable="false" width="200">
				              <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@description}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
	        				</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Notes"  dataField="@notes" editable="false" width="100" wordWrap="true">
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@notes}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Qty" dataField="@qty" editable="false" textAlign="right" width="50" >
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text  textAlign="right" text="{data.@qty}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Unit price" dataField="@unitPrice"  textAlign="right" editable="false" width="65" > 
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text  textAlign="right" text="{data.@unitPrice}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="%" dataField="@percentageDisplay" editable="false" textAlign="right" width="50" wordWrap="false"
	        				  rendererIsEditor="false"
							  itemRenderer="views.renderers.LabelPercentage" />                             
	        				<mx:AdvancedDataGridColumn headerText="Total price" dataField="@totalPriceDisplay" textAlign="right" width="105" editable="false" >
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@totalPrice}"  textAlign="right" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Status" dataField="@codeBillingStatus" editable="false" width="70" wordWrap="false"
							  itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingStatus').DictionaryEntry,'@display', '@value', '@codeBillingStatus')}"/>                 
	        			</mx:columns>
	        		</mx:AdvancedDataGrid>
				</mx:VBox>
    			</mx:Canvas>
    		</mx:AddChild>
    		<mx:SetStyle target="{dirty}" name="fontSize" value="9"/>
    		<mx:SetProperty target="{dirty}" name="label" value="Changes have not been saved"/>
    		<mx:SetProperty target="{hbox7}" name="width" value="100%"/>
    		<mx:SetStyle target="{hbox8}" name="horizontalGap" value="0"/>
    		<mx:SetStyle target="{dirty}" name="fontFamily" value="Verdana"/>
    		<mx:AddChild relativeTo="{navBox}" position="lastChild">
    			<mx:HBox  horizontalAlign="left" id="hbox6" horizontalGap="1" width="100%" paddingBottom="4">
					<mx:LinkButton label="View" fontSize="9" click="showViewWindow()" icon="@Embed(source='../../assets/page.png')" textDecoration="underline" id="linkbutton2" paddingLeft="0">    	        
					</mx:LinkButton>
    				<mx:LinkButton label="Downloads" fontSize="9" click="parentApplication.navExperimentView.detailView.detail.showDownloads()" icon="@Embed(source='../../assets/download.png')" id="downloadExperimentButton" textDecoration="underline" textAlign="left"/>
    				<mx:LinkButton label="Printable form" fontSize="9" click="parentApplication.navExperimentView.detailView.detail.showPrintableRequestForm()" icon="@Embed(source='../../assets/page.png')" id="requestFormButton" textDecoration="underline" textAlign="left"/>
    				<mx:LinkButton label="Analysis" fontSize="9" icon="@Embed(source='../../assets/map.png')" textDecoration="underline" 
    							   enabled="false" disabledIcon="@Embed(source='../../assets/map_disable.png')" height="21" id="analysisButton" click="parentApplication.navExperimentView.detailView.detail.showRelatedAnalysis()" textAlign="left">
    				</mx:LinkButton>
    				<mx:LinkButton fontSize="9" label="{request.@codeRequestCategory == 'SOLEXA' ? 'To HiSeq' : 'To GAIIx'}"  visible="{parentApplication.currentState == 'AdminState' &amp;&amp; (request.@codeRequestCategory == 'SOLEXA' || request.@codeRequestCategory == 'HISEQ')}"  icon="{request.@codeRequestCategory == 'SOLEXA' ? parentApplication.iconHiSeq : parentApplication.iconSolexa}" textDecoration="underline" click="{this.showConvertIlluminaRequest()}"  id="linkbutton3" textAlign="left">    	        
    				</mx:LinkButton>
    				<mx:LinkButton fontSize="9" label="Upload files" visible="{request.@isExternal == 'Y'}" click="showExperimentUploadWindow(parentApplication.theBody, request.@idRequest, request.@number)" id="linkbutton1" textDecoration="underline" icon="@Embed(source='../../assets/upload.png')" textAlign="left"/>
    				<mx:LinkButton fontSize="9" label="FDT Upload files" visible="{request.@isExternal == 'Y' &amp;&amp; parentApplication.isFDTSupported}" click="showExperimentUploadFDTWindow(parentApplication.theBody, request.@idRequest, request.@number)" id="uploadFDTLink" textDecoration="underline" icon="@Embed(source='../../assets/upload_large.png')" textAlign="left"/>
    				<mx:LinkButton fontSize="9" label="Organize files" visible="{request.@isExternal == 'Y' &amp;&amp; parentApplication.isFDTSupported}" click="showExperimentOrganizeWindow(parentApplication.theBody, request.@idRequest, request.@number)" id="uploadOrganizeLink" textDecoration="underline" icon="@Embed(source='../../assets/chart_organisation.png')" textAlign="left"/>
    			</mx:HBox>
    		</mx:AddChild>
			<mx:AddChild relativeTo="{hbox7}" position="lastChild">				
				<mx:Spacer width="8"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox7}" position="lastChild">				
				<mx:TextInput id="experimentName" width="100%" text="{request.@name}" change="{this.dirty.setDirty()}"  />
			</mx:AddChild>
    		<mx:AddChild relativeTo="{hbox7}" position="lastChild" >
    			<mx:Text visible="{this.request.@lastModifyDate != ''}" paddingLeft="8" text="{'Last modified  ' + this.request.@lastModifyDate}" />
    		</mx:AddChild>
    	</mx:State>
        <mx:State name="MicroarrayState">
    		<mx:RemoveChild target="{seqSetupView}"/>
            <mx:RemoveChild target="{seqSetup1View}"/>
        </mx:State>
		<mx:State name="MicroarrayExternalState" >
			<mx:RemoveChild target="{sampleSetupView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{hybSetupView}"/>
		</mx:State>
        <mx:State name="MicroarrayAmendState" basedOn="AmendState">
    		<mx:RemoveChild target="{seqSetupView}"/>
            <mx:RemoveChild target="{seqSetup1View}"/>
            <mx:SetStyle target="{hbox3}" name="paddingLeft" value="60"/>
        </mx:State>
        <mx:State name="QCState">
            <mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
            <mx:RemoveChild target="{annotationView}"/>
            <mx:RemoveChild target="{confirmView.hybsConfirmContainer}"/>
    		<mx:RemoveChild target="{seqSetupView}"/>
            <mx:RemoveChild target="{seqSetup1View}"/>
        </mx:State>
		<mx:State name="QCExternalState" >
			<mx:RemoveChild target="{sampleSetupView}"/>
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{annotationView}"/>
			<mx:RemoveChild target="{confirmView.hybsConfirmContainer}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
		</mx:State>
        <mx:State name="QCAmendState" basedOn="AmendState">
            <mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
            <mx:RemoveChild target="{annotationView}"/>
            <mx:RemoveChild target="{confirmView.hybsConfirmContainer}"/>
    		<mx:RemoveChild target="{seqSetupView}"/>
            <mx:RemoveChild target="{seqSetup1View}"/>
        </mx:State>
        <mx:State name="SolexaBaseState">
            <mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
         </mx:State>
		<mx:State name="SolexaBaseExternalState">
			<mx:RemoveChild target="{sampleSetupView}"/>
			<mx:RemoveChild target="{seqSetupView}"/>
			<mx:RemoveChild target="{seqSetup1View}"/>
			<mx:RemoveChild target="{hybSetupView}"/>
			<mx:RemoveChild target="{hybsView}"/>
			<mx:RemoveChild target="{visibilityView}"/>			
		</mx:State>
        <mx:State name="SolexaBaseAmendState" basedOn="AmendState">
        	<mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
        </mx:State>
        <mx:State name="QCEditState" basedOn="EditState">
            <mx:RemoveChild target="{setupView}"/>
            <mx:RemoveChild target="{annotationView}"/>
            <mx:RemoveChild target="{sampleSetupView}"/>
            <mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
            <mx:RemoveChild target="{confirmView}"/>
    		<mx:RemoveChild target="{seqSetupView}"/>
    		<mx:RemoveChild target="{seqSetup1View}"/>
         </mx:State>
        <mx:State name="MicroarrayEditState" basedOn="EditState">
            <mx:RemoveChild target="{setupView}"/>
            <mx:RemoveChild target="{sampleSetupView}"/>
            <mx:RemoveChild target="{confirmView}"/>
            <mx:RemoveChild target="{hybSetupView.numberOfHybsContainer}"/>
            <mx:RemoveChild target="{hybSetupView.slideSourceContainer}"/>
    		<mx:RemoveChild target="{seqSetupView}"/>
    		<mx:RemoveChild target="{seqSetup1View}"/>
         </mx:State>
        <mx:State name="SolexaEditState" basedOn="EditState">
    		<mx:RemoveChild target="{seqSetupView}"/>
            <mx:RemoveChild target="{setupView}"/>
            <mx:RemoveChild target="{sampleSetupView}"/>
            <mx:RemoveChild target="{hybsView}"/>
            <mx:RemoveChild target="{hybSetupView}"/>
            <mx:RemoveChild target="{confirmView}"/>
            <mx:AddChild relativeTo="{samplesView}" position="after">
            	<experiment:TabLanesView id="lanesView">            		
            	</experiment:TabLanesView>
            </mx:AddChild>
			<mx:AddChild relativeTo="{lanesView}" position="after">
				<mx:VBox id="instructionsView" label="Instructions">
					
					<mx:HBox id="coreInstructionsBox" width="100%" horizontalGap="0" height="100%" paddingRight="5" paddingBottom="5">
						<mx:Text text="{'Sample prep instructions (libraray prep, etc.) for the ' + parentApplication.getProperty(parentApplication.PROPERTY_CORE_FACILITY_NAME) + '.'}" width="314"  id="label12"/>
						<mx:TextArea id="prepInstructions" width="100%" text="{request.@corePrepInstructions}" focusOut="this.propagatePrepInstructions()" maxChars="2000" height="100%"/>
					</mx:HBox>
					<mx:HBox id="analysisInstructionsBox" width="100%" horizontalGap="0" height="100%" paddingRight="5" paddingBottom="5">
						<mx:Text text="Analysis instructions for bionformatics." width="314"  id="text1"/>
						<mx:TextArea id="analysisInstructions" width="100%" text="{request.@analysisInstructions}" focusOut="this.propagateAnalysisInstructions()" maxChars="2000" height="100%"/>
					</mx:HBox>
				</mx:VBox>
			</mx:AddChild>
         </mx:State>
		<mx:State name="SeqExternalEditState" basedOn="SolexaEditState">
				<mx:RemoveChild target="{instructionsView}"/>		
		</mx:State>
        <mx:State name="BaseSubmitState">
        </mx:State>
        <mx:State name="AmendState">
            <mx:AddChild relativeTo="{seqSetupView}" position="before">
                <mx:VBox id="amendSetupView" label="Add services" paddingLeft="0" verticalGap="8" paddingRight="0" paddingTop="0" paddingBottom="0">
                	<mx:RadioButtonGroup id="radioGroupAmendType"/>
                	<mx:HBox width="100%" horizontalGap="8" verticalAlign="middle">
                		<mx:Label text="(1) Verify your lab group." width="194"/>
                		<mx:ComboBox  id="labCombo" dataProvider="{parentApplication.promptedSubmitRequestLabList}" 
                			selectedIndex="-1" labelField="@name" 
                			width="340"
							close="{if (labCombo.selectedItem != null &amp;&amp; labCombo.selectedItem.@idLab != '')  getLabForAddingServices.send();}"
                			change="{if (labCombo.selectedItem != null &amp;&amp; labCombo.selectedItem.@idLab != '')  getLabForAddingServices.send();}">
                		</mx:ComboBox>
                	</mx:HBox>
                	<mx:HBox id="appUserContainer" width="100%" horizontalGap="8">
                	       <mx:Text width="194">
                	              <mx:text>(2) Select the person who submitted the request (optional).</mx:text>
                	       </mx:Text>
                			<mx:ComboBox dataProvider="{appUsers}" 
                				selectedIndex="-1" labelField="@displayName" 
                			  		id="appUserCombo" width="340" change="getCandidateAmendExperiments()">
                			</mx:ComboBox>
                	</mx:HBox>
                	<mx:HBox width="100%" horizontalGap="8">
                		<mx:Text text="(3) Select the category that best describes the services that you will be adding to this request." width="194"/>
                		<mx:VBox width="100%" height="100%" verticalGap="8">							
                		  <mx:VBox width="100%" height="100%" verticalGap="0">							
							<mx:Repeater id="requestCategoryRepeater1" dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry.(@isActive == 'Y' &amp;&amp; @value != '' &amp;&amp; @type != parentApplication.TYPE_QC)}">
								<mx:HBox verticalGap="2" paddingRight="2" paddingBottom="2" width="100%" verticalAlign="middle">
								    <mx:HBox horizontalAlign="center">
								     <mx:Image 						    	
		            	                source="{requestCategoryRepeater1.currentItem.@icon}"/>						
								    </mx:HBox> 
							    	<mx:RadioButton id="radioAmendRequestCategory1" groupName="radioGroupAmendType" 
							    		label="{requestCategoryRepeater1.currentItem.@display}" width="206"
							    		value="{'QC-TO-' + requestCategoryRepeater1.currentItem.@value}" 
							    		click="highlightAmendRequestCategory();setAmendState();getCandidateAmendExperiments();this.checkAmendSetupCompleteness()"/>							
  									<mx:Text text="{requestCategoryRepeater1.currentItem.@notes}" width="100%"/>		
								</mx:HBox>
							</mx:Repeater>
	                 	  </mx:VBox>
                		  <mx:HRule width="100%"/>
                		  <mx:VBox width="100%" height="100%" verticalGap="0">							
							<mx:Repeater id="requestCategoryRepeater2" dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry.(@isActive == 'Y' &amp;&amp; @value != '' &amp;&amp; @type == parentApplication.TYPE_ILLUMINA)}">
								<mx:HBox verticalGap="2" paddingRight="2" paddingBottom="2" width="100%" verticalAlign="middle">
								    <mx:HBox horizontalAlign="center">
								     <mx:Image 						    	
		            	                source="{requestCategoryRepeater2.currentItem.@icon}"/>						
								    </mx:HBox> 
							    	<mx:RadioButton id="radioAmendRequestCategory2" groupName="radioGroupAmendType" 
							    		label="{requestCategoryRepeater2.currentItem.@display}"  width="206"
							    		value="{'ADD-LANES-' + requestCategoryRepeater2.currentItem.@value}" 
							    		click="highlightAmendRequestCategory();setAmendState();getCandidateAmendExperiments();this.checkAmendSetupCompleteness()"  />							
  									<mx:Text text="Adding sample Sequencing Runs only" width="100%" fontStyle="italic" fontWeight="normal"/>		
							  	 				
								</mx:HBox>
							</mx:Repeater>
	                 	  </mx:VBox>
                		</mx:VBox>
                	</mx:HBox>
                	<mx:VBox width="100%" height="100%" verticalGap="0" id="vbox2">
                		<mx:HBox width="100%" verticalAlign="middle" horizontalGap="8">
                			<mx:Text text="(4) Select the existing request." id="label1" width="194"/>
                			<mx:HBox horizontalGap="4" height="100%" verticalAlign="middle" verticalGap="0"  horizontalAlign="right"  paddingLeft="0" paddingRight="0"  id="hbox3">
		    					<mx:Label text="Submitted"/>
		    					<mx:CheckBox id="lastWeekCheckbox" label="In last week" paddingRight="0" paddingLeft="0" horizontalGap="0"  >
		    						<mx:click>toggleDateCheckboxes(1);getCandidateAmendExperiments();</mx:click>
		    					</mx:CheckBox>
		    					<mx:CheckBox  id="lastMonthCheckbox" label="month"  paddingRight="0" paddingLeft="2" horizontalGap="0"  >
		    						<mx:click>toggleDateCheckboxes(2);getCandidateAmendExperiments();</mx:click>
		    					</mx:CheckBox>
		    					<mx:CheckBox  id="lastThreeMonthsCheckbox" label="3 months"  paddingRight="0" paddingLeft="2" horizontalGap="0"  selected="true">
		    						<mx:click>toggleDateCheckboxes(3);getCandidateAmendExperiments();</mx:click>
		    					</mx:CheckBox>
		    					<mx:CheckBox  id="lastYearCheckbox" label="year"  paddingLeft="2" paddingRight="0" horizontalGap="0"   >
		    						<mx:click>toggleDateCheckboxes(4);getCandidateAmendExperiments();</mx:click>
		    					</mx:CheckBox>
		    				</mx:HBox> 

                		</mx:HBox>
                		<mx:VBox width="100%" height="100%" id="browseTreeContainer" verticalGap="0">
                			<mx:Tree width="100%" height="100%" id="browseTree"
                				 itemClick="{this.checkAmendSetupCompleteness()}" 
                				dataProvider="{getCandidateProjectRequestList.lastResult}"
                			showRoot="false" 
                			borderStyle="solid"
                			labelField="@label"
                			labelFunction="getTreeLabel" 
                			iconFunction="parentApplication.getTreeIcon" 
                			backgroundAlpha="1" dropShadowEnabled="true">
                			</mx:Tree>
                		</mx:VBox>
                	</mx:VBox>
                	
                </mx:VBox>
            </mx:AddChild>
            <mx:SetProperty target="{sampleSetupView}" name="enabled" value="false"/>
            <mx:RemoveChild target="{setupView}"/>
            <mx:SetProperty target="{titleLabel}" name="text" value="Add services to existing experiment "/>
        </mx:State>
        <mx:State name="SolexaLaneAmendState" basedOn="SolexaBaseAmendState">
            <mx:RemoveChild target="{sampleSetupView}"/>
            <mx:RemoveChild target="{seqSetupView}"/>
        </mx:State>
    </mx:states>
    

  
    
</mx:VBox> 
