<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:views="views.*" >



   <mx:HTTPService  
    id="saveVisibility" 
    url="SaveVisibility.gx"
    destination="saveVisibility"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveVisibility(event)"
	fault="parentApplication.onFailHttpRequest('Failed to save visibility', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>


 <mx:Script>
 <![CDATA[ 
 	import mx.collections.XMLListCollection;   
 	import mx.rpc.events.ResultEvent;
 	import views.renderers.ComboBoxVisibility;
 	import mx.events.CloseEvent;
 	import mx.controls.Alert;
 	import hci.flex.controls.ComboBox;
 	import hci.flex.controls.DropdownLabel;
 	
 	private var broadestCodeVisibility:String = "MEM";
 	
 	public function checkSecurity():void {
 		parentDocument.saveVisibilityButton.enabled = false;  
 		for each (var experiment:Object in parentDocument.browseList) {
 			if (experiment.@canUpdateVisibility == "Y") {
 				parentDocument.saveVisibilityButton.enabled = true;
 				break; 
 			}
 		}
 	}
			

 	private function getRequestKind(item:Object, col:int):String {
		var de:XMLList = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', item.@codeRequestCategory);
    	if (de.length() == 1) {
	    	return de[0].@display;
    	} else {
    		return "";
    	}
	}
	 
	public function  save():void {
	    var dirtyRequests:XMLList = parentDocument.parentDocument.browseTree.selectedItem..Request.(@isDirty == 'Y');        	
    	var dirtyRequestList:XMLListCollection = new XMLListCollection(dirtyRequests);
    	
    	var params:Object = new Object();
    	params.idProject = parentDocument.parentDocument.browseTree.selectedItem.@idProject;
    	params.visibilityXMLString = dirtyRequestList.toXMLString();
    	saveVisibility.send(params);
	}

		
	
	private function onSaveVisibility(event:ResultEvent):void {
		if (saveVisibility.lastResult.name() == "SUCCESS" ||
		    saveVisibility.lastResult.name() == "ProjectRequestVisibilityList") {
		    parentDocument.parentDocument.refreshExperiments();
    		parentDocument.dirtyVisibility.resetDirty();
    	} else {
    		mx.controls.Alert.show(saveVisibility.lastResult..ACTMESSAGE.@TEXT);
    	}
	}
	
	
	
	                
    public function onEdit():void {
    	visibilityGrid.selectedItem.@isDirty = "Y";
    	parentDocument.dirtyVisibility.setDirty();
    }
    

    
     public function sortVisibility(item1:Object, item2:Object):int {
    	if (item1.@codeVisibility > item2.@codeVisibility) {
    		return 1;
    	} else if (item2.@codeVisibility > item1.@codeVisibility) {
    		return -1;
    	} else {
    		return 0;
    	}
    }   
    
    
    
 ]]>
 </mx:Script>
	
	<mx:VBox  width="100%" height="100%"   paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4">
	       <mx:HBox width="100%" horizontalAlign="left">
					<mx:Label text="{'Visibility for ' + parentDocument.parentDocument.browseTree.selectedItem.@label}"/>
	       </mx:HBox>
	       <mx:DataGrid  id="visibilityGrid" 
	       	dataProvider="{parentDocument.browseList}" 
	       	 width="100%" height="100%" 
			 editable="true" 
	       	 itemEditEnd="onEdit()">
	         <mx:columns> 
             <mx:DataGridColumn width="15" minWidth="15" headerText="#"  editable="false" sortCompareFunction="parentDocument.sortRequestNumber">
	                <mx:itemRenderer>
	                    <mx:Component >
	                        <mx:HBox  horizontalGap="0" paddingLeft="4" >
			                    <mx:Image id="experimentImage"  
			                     	source="{(data.@codeRequestCategory == 'QC' ? parentApplication.iconQC : (data.@codeRequestCategory == 'SOLEXA' ? parentApplication.iconSolexa : data.@codeRequestCategory == 'AFFY' ? parentApplication.iconMicroarrayAffy : data.@codeRequestCategory == 'AGIL' ? parentApplication.iconMicroarray : parentApplication.iconFlask))}" >
								</mx:Image>
	                           <mx:Label id="requestNumber" text="{data.@requestNumber}">
	                           </mx:Label>
	                        </mx:HBox>
	                    </mx:Component> 
	                </mx:itemRenderer>
	            </mx:DataGridColumn> 
		       	<mx:DataGridColumn headerText="Date" width="15" dataField="@requestCreateDateDisplay"  editable="false"/>
		        <mx:DataGridColumn headerText="Requester" width="15" labelFunction="parentDocument.getFullName"  sortCompareFunction="parentDocument.sortFullName" editable="false"/>
		       	<mx:DataGridColumn headerText="Experiment Kind" width="20" labelFunction="parentDocument.getExperimentKind"  sortCompareFunction="parentDocument.sortExperimentKind" editable="false"/>
		       	<mx:DataGridColumn headerText="Microarray" width="40" dataField="@slideProductName"  editable="false"/>
		       	<mx:DataGridColumn headerText="Experiment Visibility"  width="40" dataField="@codeVisibility" 
					editorDataField="value" sortCompareFunction="sortVisibility" editable="true" 
					rendererIsEditor="false" 
					itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Visibility').DictionaryEntry, '@display', '@value', '@codeVisibility')}"					
					itemEditor="{ComboBoxVisibility.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Visibility').DictionaryEntry, '@display', '@value', '@codeVisibility')}"
				/>
	         </mx:columns>
	       </mx:DataGrid>
	
	     
	</mx:VBox>
	
	



</mx:Canvas>


