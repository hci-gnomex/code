<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="Description" 
		   width="100%" height="100%"
		   xmlns:views="*.views" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="views.util.*">

	<mx:states>
		<mx:State name="EditState" enterState="stateChangeHandler(event)">
			<mx:SetProperty target="{text1}" name="htmlText" value="Experiment name"/>
			<mx:SetProperty target="{label1}" name="text" value="Experiment description"/>
			<mx:SetProperty target="{label2}" name="text" value="Notes for Core Facility"/>
		</mx:State>
		<mx:State name="ExternalExperimentState" enterState="stateChangeHandler(event)">
			<mx:SetProperty target="{text1}" name="htmlText" value="(1) Name your experiment. (required)"/>
			<mx:SetProperty target="{label1}" name="text" value="(2) Provide an experiment description. (required)"/>
		</mx:State>
		<mx:State name="NewExperimentState" enterState="stateChangeHandler(event)">
		</mx:State>
	</mx:states>

<mx:Script>
	<![CDATA[
		import ext.com.Consts;
		
		import mx.controls.Alert;
		import mx.events.FlexEvent;
		import mx.utils.StringUtil;
		
		import views.util.GNomExStringUtil;
		
		[Bindable]
		private var showRequiredStylingNameDescription:Boolean = false;
		
	public function hasNameAndDef():Boolean {
		return(experimentName.text.length > 0 && overallDescript.htmlText.length > 0);
	}
		
	private function checkForCompleteness():void {
		if(this.currentState != "ExternalExperimentState") {
			return;	
		}
		if (parentDocument.theTab.contains(parentDocument.annotationView)) {
			parentDocument.annotationView.enabled = hasNameAndDef();
		}
		parentDocument.samplesView.enabled = hasNameAndDef();
		if (hasNameAndDef()) {
			parentDocument.samplesView.initializeSamplesGrid();
		}
		parentDocument.enableNextButtons();
	}
		
	private function propagateDescript(e:FocusEvent):void {
		parentDocument.request.@description = "";  // Description will be saved differently to avoid problems sending with XML encoding.
		parentDocument.saveDescription = GNomExStringUtil.cleanRichTextHTML(overallDescript.htmlText);
	}
	
	private function propagatePrepInstructions():void {
		parentDocument.request.@corePrepInstructions = noteToSeq.text;
	}
	private function propagateName():void {
		parentDocument.request.@name = experimentName.text;
	}
	private function propagateAdminInstructions():void {
		parentDocument.request.@adminNotes = noteToAdmin.text;
	}
			
		
	public function setExternalNoteVisibility():void {
		// Hide bio and core notes if external and nothing in them.
		if (!parentApplication.isInternalExperimentSubmission) {
			if (parentDocument.request.@corePrepInstructions == null || parentDocument.request.@corePrepInstructions == "") {
				setCoreFacilityNoteVisibility(false);
			} else {
				setCoreFacilityNoteVisibility(true);
			}
		} else {
			setCoreFacilityNoteVisibility(true);
		}
	}

	private function removeRichTextButtons():void {
		this.overallDescript.toolbar.removeChild(overallDescript.colorPicker);
		this.overallDescript.toolbar.removeChild(overallDescript.fontFamilyCombo);
		this.overallDescript.toolbar.removeChild(overallDescript.fontSizeCombo);
	}
	
	public function setCoreFacilityNoteVisibility(visible:Boolean):void {
		coreFacilityNoteHBox.visible = visible;
		coreFacilityNoteHBox.includeInLayout = visible;
		coreFacilityNoteSpacer.visible = visible;
		coreFacilityNoteSpacer.includeInLayout = visible;
		label2.visible = visible;
		label2.includeInLayout = visible;
		noteToSeq.visible = visible;
		noteToSeq.includeInLayout = visible;
	}

		private function stateChangeHandler(event:FlexEvent):void
		{
			if (this.currentState == "ExternalExperimentState") {
				showRequiredStylingNameDescription = true;
			} else {
				showRequiredStylingNameDescription = false;
			}
		}

	]]>
</mx:Script>
	<mx:VBox width="100%" height="100%" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4" verticalGap="0">
		<mx:HBox id="nameBox" styleName="{showRequiredStylingNameDescription &amp;&amp; StringUtil.trim(experimentName.text) == '' ? 'requiredBox' : 'normalBox'}">
			<mx:Text id="text1" keyUp="checkForCompleteness()">
				<mx:htmlText>(1) Name your experiment. (optional)</mx:htmlText>
			</mx:Text>
			<mx:TextInput id="experimentName" focusOut="propagateName()" keyUp="checkForCompleteness()" text="{parentDocument.request.@name}" width="301" maxChars="200"/>
			<mx:Spacer width="10"/>
		</mx:HBox>	
		<mx:Spacer height="10" />
		<mx:VBox id="descriptionBox" width="100%" height="350" styleName="{showRequiredStylingNameDescription &amp;&amp; StringUtil.trim(overallDescript.htmlText) == '' ? 'requiredBox' : 'normalBox'}">
			<mx:Label text="(2) Provide an experiment description. (optional)" id="label1"/>
			<mx:RichTextEditor  borderStyle="none"  headerHeight="0"  
								id="overallDescript" width="100%" 
								htmlText="{parentDocument.request.@description}" 
								showControlBar="true"
								change="parentDocument.dirty.setDirty();"
								creationComplete="removeRichTextButtons(); this.addEventListener(FocusEvent.FOCUS_OUT,propagateDescript); "
								paddingLeft="0" paddingRight="0" paddingTop="0" 
								roundedBottomCorners="false" paddingBottom="0" 
								borderThicknessRight="0" borderThicknessLeft="0" 
								borderThicknessBottom="0" borderThickness="0" 
								borderThicknessTop="0" height="100%" minHeight="50" keyUp="checkForCompleteness()"/>	
		</mx:VBox>	
		<mx:VBox id="coreFacilityNoteHBox" width="100%">
	        <mx:Spacer height="10" id="coreFacilityNoteSpacer" />
			<mx:Label text="(3) Enter a note for the Core Facility. (optional)"  id="label2"/>
			<util:TextAreaWorkaround id="noteToSeq" text="{parentDocument.request.@corePrepInstructions}" focusOut="propagatePrepInstructions()" 
					width ="100%" height="50%" maxChars="{ext.com.Consts.MAX_CHARS}"/>
		</mx:VBox>
		
		<mx:VBox id="adminNoteBox" width="100%" includeInLayout="{parentApplication.isAdminState &amp;&amp; parentApplication.getCoreFacilityProperty(parentDocument.request.@idCoreFacility, parentApplication.PROPERTY_SHOW_ADMIN_NOTES_ON_REQUEST) == 'Y'}" 
				 visible="{parentApplication.isAdminState &amp;&amp; parentApplication.getCoreFacilityProperty(parentDocument.request.@idCoreFacility, parentApplication.PROPERTY_SHOW_ADMIN_NOTES_ON_REQUEST) == 'Y'}">
			<mx:Spacer height="10" id="adminSpace" />
			<mx:Label text="Administration notes"  id="label3"/>
			<util:TextAreaWorkaround id="noteToAdmin" text="{parentDocument.request.@adminNotes}" focusOut="propagateAdminInstructions()" 
									 width ="100%" height="50%" maxChars="{ext.com.Consts.MAX_CHARS}"/>
		</mx:VBox>
	</mx:VBox>

	
</mx:Canvas>