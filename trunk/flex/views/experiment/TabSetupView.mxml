<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="Experiment setup" 
	width="100%" height="100%"
	xmlns:views="*.views" xmlns:mx="http://www.adobe.com/2006/mxml">
   <mx:states>
      <mx:State name="AdminState">
         <mx:AddChild relativeTo="{accountBox}" position="before">
            <mx:HBox id="appUserContainer" width="100%" horizontalGap="0">
                   <mx:Text width="200" id="text7">
                          <mx:htmlText>(2) Verify your name.</mx:htmlText>
					</mx:Text>
            		<mx:ComboBox dataProvider="{appUsers}" 
            			selectedIndex="-1" labelField="@displayName" 
                		id="appUserCombo" width="400" close="{idAppUser = appUserCombo.selectedItem.@idAppUser;checkSetupCompleteness()}">
            			<mx:change>{idAppUser = appUserCombo.selectedItem.@idAppUser;checkSetupCompleteness()}</mx:change>
            		</mx:ComboBox>
            </mx:HBox>
         </mx:AddChild>
         <mx:SetProperty target="{text1}" name="htmlText" value="(3) Pick the account to be &lt;br&gt; billed."/>
         <mx:SetProperty target="{label11}" name="text" value="(4) Select a service."/>
         <mx:SetProperty target="{text2}" name="htmlText">
            <mx:value>(5) Select a project folder for organizing experiments.</mx:value>
         </mx:SetProperty>
         <mx:SetProperty target="{text6}" name="htmlText" value="(6) Name your experiment."/>
      </mx:State>
      <mx:State name="ExternalExperimentState">
         <mx:SetProperty target="{textarea1}" name="htmlText">
            <mx:value><![CDATA[Instructions<br>  1.  Select the appropriate dropdown or radio<br>       button options for each line.<br>  2.  After completing all line items, click the 'Next'<br>       button at the bottom of the page to proceed.]]></mx:value>
         </mx:SetProperty>
         <mx:SetProperty target="{textarea1}" name="height" value="80"/>
         <mx:RemoveChild target="{hbox5}"/>
         <mx:RemoveChild target="{accountBox}"/>
         <mx:SetProperty target="{label11}" name="text" value="Experiment platform"/>
         <mx:SetProperty target="{label12}" name="width" value="200"/>
         <mx:SetProperty target="{label11}" name="width" value="200"/>
         <mx:SetProperty target="{text2}" name="width" value="200"/>
         <mx:SetStyle target="{vbox1}" name="verticalGap" value="8"/>
         <mx:SetProperty target="{text6}" name="htmlText" value="Experiment name"/>
         <mx:SetProperty target="{text2}" name="htmlText" value="Project folder for organizing experiments"/>
         <mx:RemoveChild target="{label1}"/>
         <mx:AddChild relativeTo="{vbox1}" position="lastChild" target="{label1}"/>
         <mx:SetProperty target="{label12}" name="text" value="Lab group"/>
         <mx:SetStyle target="{label1}" name="paddingTop"/>
         <mx:SetProperty target="{text6}" name="width" value="200"/>
         <mx:AddChild relativeTo="{vbox1}" position="lastChild">
            <mx:HBox width="100%" horizontalGap="0" id="hbox1" verticalAlign="top">
                <mx:Text text="Experiment type" width="200" id="labelApplication"/>
                <mx:RadioButtonGroup id = "radioGroupApp">       	
                </mx:RadioButtonGroup>
                <mx:Tile  verticalGap="0"  width="100%">
					<mx:Repeater id="appRepeater" dataProvider="{parentDocument.filteredAppList}">
							<mx:RadioButton id="radioApp" groupName="radioGroupApp" 
											label="{appRepeater.currentItem.@display}" 
											value="{appRepeater.currentItem.@value}" 
											click="{pickApp()}" 
											width="250" />							
					</mx:Repeater>
                </mx:Tile>
            </mx:HBox>
         </mx:AddChild>
         <mx:RemoveChild target="{vbox4}"/>
         <mx:SetProperty target="{projectCombo}" name="width" value="345"/>
         <mx:SetStyle target="{editProjectButton}" name="paddingRight" value="0"/>
         <mx:SetProperty target="{requestCategoryRepeater}" name="dataProvider" value="{requestCategoriesExternal}"/>
      </mx:State>
      <mx:State name="AdminExternalExperimentState" basedOn="AdminState">
         <mx:RemoveChild target="{hbox5}"/>
         <mx:RemoveChild target="{accountBox}"/>
          <mx:SetStyle target="{vbox1}" name="verticalGap" value="8"/>
          <mx:SetProperty target="{label11}" name="text" value="Experiment Platform"/>
          <mx:SetProperty target="{text2}" name="htmlText" value="Project folder for organizing experiments"/>
          <mx:SetProperty target="{text6}" name="htmlText" value="Experiment name"/>
          <mx:RemoveChild target="{label1}"/>
          <mx:AddChild relativeTo="{vbox1}" position="lastChild" target="{label1}"/>
          <mx:SetProperty target="{label12}" name="text" value="Lab group"/>
          <mx:SetProperty target="{text7}" name="htmlText" value="Submitter"/>
         <mx:SetStyle target="{label1}" name="verticalAlign" value="middle"/>
          <mx:SetStyle target="{appUserContainer}" name="verticalAlign" value="middle"/>
          <mx:AddChild relativeTo="{vbox1}" position="lastChild">
              <mx:HBox width="100%" horizontalGap="0" id="hbox0" verticalAlign="top">
                  <mx:Text text="Experiment type" width="160" id="labelApplication0"/>
                  <mx:RadioButtonGroup id = "radioGroupAppAdmin">       	
                  </mx:RadioButtonGroup>
                  <mx:Tile height="100%" direction="vertical" verticalGap="0" width="100%"  >
	                  <mx:Repeater id="appRepeaterAdmin" dataProvider="{parentDocument.filteredAppList}">
	                  		<mx:RadioButton id="radioAppAdmin" groupName="radioGroupAppAdmin"  
	                  						label="{appRepeaterAdmin.currentItem.@display}" 
	                  						value="{appRepeaterAdmin.currentItem.@value}" 
	                  						click="{pickApp()}" 
											width="250"/>							
	                  </mx:Repeater> 
                  </mx:Tile> 
              </mx:HBox> 
          </mx:AddChild>
          <mx:RemoveChild target="{vbox4}"/>
          <mx:AddChild relativeTo="{hbox2}" position="lastChild">
              <mx:LinkButton  id="newProjectButton0" label="New..." click="showNewProjectWindow()" textDecoration="underline" styleName="formLinkButton" paddingLeft="0">
              </mx:LinkButton>
          </mx:AddChild>
          <mx:SetProperty target="{requestCategoryRepeater}" name="dataProvider" value="{requestCategoriesExternal}"/>
          <mx:RemoveChild target="{newProjectButton1}"/>
          <mx:SetProperty target="{label12}" name="width" value="160"/>
          <mx:SetProperty target="{text7}" name="width" value="160"/>
          <mx:SetProperty target="{text2}" name="width" value="160"/>
          <mx:SetProperty target="{text6}" name="width" value="160"/>
          <mx:SetProperty target="{label11}" name="width" value="160"/>
      </mx:State>
	  <mx:State name="AdminExternalMicroarrayState" basedOn="AdminExternalExperimentState">
	  	<mx:AddChild relativeTo="{vbox1}" position="lastChild">
	  		<mx:HBox width="100%" horizontalGap="0">
	  			<mx:Text width="160">
	  				<mx:htmlText>Microaray slide</mx:htmlText>
	  			</mx:Text>
	  			<mx:ComboBox labelField="@display" width="420" id="slideProductComboAdmin" change="{pickSlideProduct(slideProductComboAdmin)}"  close="{pickSlideProduct(slideProductComboAdmin)}"   >							
	  				<mx:dataProvider>{parentDocument.filteredSlideProductList}</mx:dataProvider>
	  			</mx:ComboBox>
	  		</mx:HBox>
	  	</mx:AddChild>
	  	<mx:SetProperty target="{requestCategoryRepeater}" name="dataProvider" value="{requestCategoriesExternal}"/>
		  
	  </mx:State>
	  <mx:State name="ExternalMicroarrayState" basedOn="ExternalExperimentState">
	  	<mx:AddChild relativeTo="{vbox1}" position="lastChild">
	  		<mx:HBox width="100%" horizontalGap="0">
	  			<mx:Text width="160">
	  				<mx:htmlText>Microaray slide</mx:htmlText>
	  			</mx:Text>
	  			<mx:ComboBox labelField="@display" width="420" id="slideProductCombo"    change="{pickSlideProduct(slideProductCombo)}" close="{pickSlideProduct(slideProductCombo)}"    >							
	  				<mx:dataProvider>{parentDocument.filteredSlideProductList}</mx:dataProvider>
	  			</mx:ComboBox>
	  		</mx:HBox>
	  	</mx:AddChild>
	  	<mx:SetProperty target="{label12}" name="width" value="160"/>
	  	<mx:SetProperty target="{text2}" name="width" value="160"/>
	  	<mx:SetProperty target="{text6}" name="width" value="160"/>
	  	<mx:SetProperty target="{label11}" name="width" value="160"/>
	  	<mx:SetProperty target="{labelApplication}" name="width" value="160"/>
	  	<mx:SetProperty target="{projectCombo}" name="width" value="400"/>
		   
	  </mx:State>
   </mx:states>
   

   	
   <mx:HTTPService  
    id="getLab" 
    url="GetLab.gx"
    destination="getLab"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetLab(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get group', event)"
    method="POST"
    useProxy="false">
    <mx:request>
    	<idLab>{this.labCombo.selectedItem.@idLab}</idLab>
    </mx:request>
   </mx:HTTPService>
  
   <mx:HTTPService  
    id="getNewProject" 
    url="GetProject.gx"
    destination="getProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetNewProject(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get new project', event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idProject>0</idProject>    	
    </mx:request>
  </mx:HTTPService>

  <mx:HTTPService  
    id="getProject" 
    url="GetProject.gx"
    destination="getProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProject(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get project', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
    <mx:HTTPService  
    id="getProjectForEdit" 
    url="GetProject.gx"
    destination="getProjectForEdit"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProjectForEdit(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get project to edit', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="getProjectRequestList" 
    url="GetProjectRequestList.gx"
    destination="getProjectRequestList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProjectRequestList(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get project request list', event)"
    method="POST"
    useProxy="false">
    <mx:request>
            <idLab>{labCombo.selectedItem.@idLab}</idLab> 
            <showSamples>N</showSamples>
            <showCategory>N</showCategory>
            <showMyLabsAlways>N</showMyLabsAlways>
            <listKind>ProjectRequestCloneList</listKind>
    </mx:request>
   </mx:HTTPService>
   
<mx:Script>

	<![CDATA[
		import mx.collections.Sort;
		import mx.collections.XMLListCollection;
		import mx.controls.Alert;
		import mx.controls.ComboBase;
		import mx.controls.RadioButton;
		import mx.graphics.RadialGradient;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		
		import views.experiment.ProjectDetailWindow;
		import views.experiment.RequestCloneWindow;
		import views.util.PromptXMLListCollection;
		import views.util.WorkAuthorizationWindow;

        [Bindable]
        private var lab:Object = null;
        		
        public var idAppUser:Object = '';

		public var projectDetailWindow:ProjectDetailWindow;
		public var selectedIdProject:Object;
		
		private var requestCloneWindow:RequestCloneWindow; 
		
		public function checkSecurity():void {
			if (parentApplication.hasPermission("canWriteAnyObject")) {
				if (parentApplication.submitInternalExperiment()) {
					this.currentState = "AdminState";
				} else {
					if (parentDocument.isMicroarrayState()) {
						this.currentState = "AdminExternalMicroarrayState";
						getSlideProductCombo().selectedIndex = 0;
					} else {
						this.currentState = "AdminExternalExperimentState";
					}
				}
				idAppUser = this.appUserCombo.selectedItem != null && this.appUserCombo.selectedItem.@idAppUser != '' ? this.appUserCombo.selectedItem.@idAppUser : '';
			} else {
				if (parentApplication.submitInternalExperiment()) {
					this.currentState = "";				
				} else {
					if (parentDocument.isMicroarrayState()) {
						this.currentState = "ExternalMicroarrayState";
						getSlideProductCombo().selectedIndex = 0;
					} else {
						this.currentState = "ExternalExperimentState";
					}
				}
				idAppUser = parentApplication.getIdAppUser();
			}	
			if (parentDocument != null) {
				parentDocument.getSubmitterName();				
			}		
			this.workAuthInstructions.htmlText = parentApplication.getProperty(parentApplication.PROPERTY_WORKAUTH_INSTRUCTIONS);		
			if (parentDocument != null) {
				this.checkSetupCompleteness();
			}
		}
		 
		public function selectDefaultLab():void {
			if (parentApplication.hasPermission("canWriteAnyObject")) {
				labCombo.selectedIndex = -1;
			} else {
				if (labCombo.dataProvider.length == 2) {
					labCombo.selectedIndex = 1;
					getLab.send();							
				} else {
					labCombo.selectedIndex = 0;
					billingAccountCombo.selectedIndex = -1;
					this.billingAccountValidator.validate();
				}

			}	
		}
		
		public function getRequestCategory():Object {
			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', requestTypeGroup.selectedValue);
			return requestCategory;			 
		}
		
				

		private function showNewProjectWindow():void {
			if (idAppUser == '' || idAppUser == null) {
				Alert.show('Please select the user submitting the request'); 
			} else {
				getNewProject.send();
			}		
		}
		private function filterBillingAccount(item:Object):Boolean {

        	if (item.@isActive == 'N') {
        		return false;
        	}
        	
        	if (item.@isApproved == 'N') {
        		return false;
        	}
        	return true;
		}
		private function showEditProjectWindow():void {
			selectedIdProject = this.projectCombo.selectedItem.@idProject;
			var params:Object = new Object();
			params.idProject = this.projectCombo.selectedItem.@idProject;
			getProjectForEdit.send(params);			
		}
	
		private function onGetNewProject(event:ResultEvent):void {
			if (getNewProject.lastResult.name() == "OpenProjectList") {
				 parentApplication.navExperimentView.selectedProject = getNewProject.lastResult.Project.(@idProject == 0);
				 parentApplication.navExperimentView.selectedProject.@idAppUser = idAppUser;
				 parentApplication.navExperimentView.selectedProject.@idLab = this.labCombo.selectedItem.@idLab;

				 this.projectDetailWindow = ProjectDetailWindow(PopUpManager.createPopUp(this.parentApplication.theBody, ProjectDetailWindow, true));
				 this.projectDetailWindow.projectDetailView.fromSubmitRequestWindow = true;
				 this.projectDetailWindow.projectDetailView.experimentDesignEntries.refresh();
				 this.projectDetailWindow.projectDetailView.experimentFactorEntries.refresh();
				 this.projectDetailWindow.projectDetailView.setupDataListeners();
				 
				 this.projectDetailWindow.labCombo.selectedItem = this.labCombo.selectedItem;
				 this.projectDetailWindow.labCombo.enabled = false;
				 
				 PopUpManager.centerPopUp(this.projectDetailWindow);		
				
			} else {
				mx.controls.Alert.show(getNewProject.lastResult..ACTMESSAGE.@TEXT, "Get new project failed");
			}
		}
		
		private function onGetProjectForEdit(event:ResultEvent):void {
			if (getProjectForEdit.lastResult.name() == "OpenProjectList") {
				 parentApplication.navExperimentView.selectedProject = getProjectForEdit.lastResult.Project.(@idProject == projectCombo.selectedItem.@idProject);

				 this.projectDetailWindow = ProjectDetailWindow(PopUpManager.createPopUp(parentApplication.theBody, ProjectDetailWindow, true));
				 this.projectDetailWindow.title = "Edit Project";
				 this.projectDetailWindow.projectDetailView.fromSubmitRequestWindow = true;
				 this.projectDetailWindow.projectDetailView.experimentDesignEntries.refresh();
				 this.projectDetailWindow.projectDetailView.experimentFactorEntries.refresh();
				 this.projectDetailWindow.projectDetailView.setupDataListeners();
				 
				 this.projectDetailWindow.labCombo.selectedItem = this.labCombo.selectedItem;
				 this.projectDetailWindow.labCombo.enabled = false;
				 
				 PopUpManager.centerPopUp(this.projectDetailWindow);		
				
			} else {
				mx.controls.Alert.show(getNewProject.lastResult..ACTMESSAGE.@TEXT, "Get project for edit failed");
			}
			
		}

		
		private function onGetProject(event:ResultEvent):void {
			var newProject:Object = getProject.lastResult..Project.(@idProject == selectedIdProject);
			
			// If this is an existing project we just editted, remove the old one from the dropdown.
			//  We will add the refreshed one below.
			var existingProject:Object = null;
			var x:int = 0;
			for each(var project:Object in parentDocument.filteredProjectList) {
				if (project.@idProject == newProject.@idProject) {
					parentDocument.filteredProjectList.removeItemAt(x);
					parentDocument.filteredProjectList.refresh();
					break;
				}
				x++;
			}
			
			parentDocument.filteredProjectList.addItem(newProject);
			parentDocument.filteredProjectList.refresh();
			this.projectCombo.selectedItem = newProject;
			checkSetupCompleteness();
		}
				
		public function onProjectAdded(idProject:Object):void {
			selectedIdProject = idProject;
			var params:Object = new Object();
			params.idProject = idProject;
			getProject.send(params);
		}
		

		
		
		private function getMembersOfLab():void {			
			if (this.labCombo.selectedItem != null && this.labCombo.selectedItem.@idLab != null) {
				if (currentState == "AdminState" || currentState == "AdminExternalExperimentState") {
					idAppUser = null;
				}
				getLab.send();				
			}
		}
		private function onGetLab(event:ResultEvent):void {			
			lab = getLab.lastResult..Lab.(@idLab == labCombo.selectedItem.@idLab);

			billingAccounts = new XMLListCollection(lab.billingAccounts.BillingAccount);
	        billingAccounts.filterFunction = this.filterBillingAccount;
	        billingAccounts.refresh();
	        if (billingAccounts.length == 1) {
	        	this.billingAccountCombo.selectedIndex = 0;	        	
	        } 
	        
	        if (parentDocument != null && !parentDocument.isAmendState()) {
		        parentDocument.filteredProjectList.refresh();	        	
	        }
			this.checkSetupCompleteness();


		}

        private function sortAppUsers(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var display1:String = obj1.@displayName;
				var display2:String = obj2.@displayName;
				
				if (display1 < display2) {
					return -1;
				} else if (display1 > display2) {
					return 1;
				} else {
					return 0;
				}
				
			}
		}			

		private function sortRequestCategory(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var sortOrder1:Number = obj1.@sortOrder == "" ? 999 : obj1.@sortOrder;
				var sortOrder2:Number = obj2.@sortOrder == "" ? 999 : obj2.@sortOrder;
				
				var display1:Number = obj1.@display;
				var display2:Number = obj2.@display;
				
				if (sortOrder1 < sortOrder2) {
					return -1;
				} else if (sortOrder1 > sortOrder2) {
					return 1;
				} else {
					if (display1 < display2) {
						return -1;
					} else if (display1 > display2) {
						return 1;
					} else {
						return 0;
					}
				}
				
			}
		}			
	
		
		public function getSlideProductCombo():mx.controls.ComboBox {
			var theSlideProductCombo:mx.controls.ComboBox = null;
			if (currentState.indexOf("AdminExternal") == 0) {
				if (currentState.indexOf("Microarray") > 0) {
					theSlideProductCombo = slideProductComboAdmin;
				}
			} else if (currentState.indexOf("External") == 0) {
				if (currentState.indexOf("Microarray") > 0) {
					theSlideProductCombo = slideProductCombo;
				}
			}	
			return theSlideProductCombo;
		}
		
		public function getApp():Object {
			if (currentState.indexOf("AdminExternal") == 0) {
				return this.radioGroupAppAdmin.selectedValue;
			} else if (currentState.indexOf("External") == 0) {
				return this.radioGroupApp.selectedValue;
			} else {
				return "";
			}
		}
		
		public function checkSetupCompleteness():void {
        	var isComplete:Boolean = false;
        	if (parentDocument.request != null && parentDocument.request.@idRequest != '0') {
        		isComplete = true;
        	} else if (idAppUser != null &&  idAppUser != '' &&
        	    this.requestTypeGroup.selectedValue != null &&
        	    this.labCombo.selectedItem != null && this.labCombo.selectedItem.@idLab != '' &&
        	    this.projectCombo.selectedItem != null && this.projectCombo.selectedItem.@idProject != '') {
				
				// For internal experiments, make sure billing account selected
				if (parentApplication.submitInternalExperiment()) {
					if (this.billingAccountCombo.selectedItem != null) {
						isComplete = true;
					} 	    
				} else {
					// For external experiments, check the app radio button group and optionally the microarray slide
					if (this.getApp() != '' && getApp() != null) {
						if (currentState.indexOf("Microarray") > 0) {
							if (getSlideProductCombo().selectedItem != null && getSlideProductCombo().selectedItem.@idSlideProduct != '') {
								isComplete = true;
							}
						} else {
							isComplete = true;
						}
					}
				}
        	} 
        	
        	if (parentDocument.isSolexaState()) {
				if (parentDocument.theTab.contains(parentDocument.annotationView)) {
					parentDocument.annotationView.enabled = isComplete;
				}  
				if (parentApplication.submitInternalExperiment()) {
					parentDocument.seqSetupView.enabled = isComplete;
				} else {
					parentDocument.samplesView.enabled = isComplete;
					if (isComplete) {
						parentDocument.samplesView.initializeSamplesGrid();
					}
				}
    			parentDocument.enableNextButtons();
        		
        	} else {
				if (parentDocument.theTab.contains(parentDocument.annotationView)) {
					parentDocument.annotationView.enabled = isComplete;
				}        			
				if (parentApplication.submitInternalExperiment()) {
					parentDocument.sampleSetupView.enabled = isComplete;
				} else {
					parentDocument.samplesView.enabled = isComplete;
					if (isComplete) {
						parentDocument.samplesView.initializeSamplesGrid();
					}
				}
    			parentDocument.enableNextButtons();
    		}

    		
    		callLater(postSetupCompleteness, [isComplete]);
    		
    		
        }
        
        private function postSetupCompleteness(isComplete:Boolean):void {
			if (parentDocument == null) {
				return;
			}
    		if (!isComplete) {
    			if (parentDocument.isSolexaState() && parentApplication.submitInternalExperiment()) {
    				parentDocument.seqSetupView.enabled = false;
    			}
	    		parentDocument.samplesView.enabled = false;
	        	if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
		        	parentDocument.hybSetupView.enabled = false;
	        	} 
	        	if (parentDocument.theTab.contains(parentDocument.hybsView)) {
		        	parentDocument.hybsView.enabled = false;
	        	} 
				if (parentDocument.theTab.contains(parentDocument.confirmView)) {
					parentDocument.confirmView.enabled = false;
				}
    		} else {
    			if (parentDocument.isSolexaState() && parentApplication.submitInternalExperiment()) {
    				if (parentDocument.theTab.contains(parentDocument.seqSetupView)) {
						parentDocument.seqSetupView.checkSeqAppSetupCompleteness();
					}
    			}
				if (parentApplication.submitInternalExperiment()) {
					if (parentDocument.theTab.contains(parentDocument.sampleSetupView)) {
						parentDocument.sampleSetupView.checkSampleSetupCompleteness();
					}
				}
    			parentDocument.samplesView.checkSamplesCompleteness();
				if (parentApplication.submitInternalExperiment()) {
					if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
						parentDocument.hybSetupView.checkHybSetupCompleteness();
					}
				}
				if (parentDocument.theTab.contains(parentDocument.hybsView)) {
					parentDocument.hybsView.checkHybsCompleteness();
				}
    		}
        	
        }

		private function onGetProjectRequestList(event:ResultEvent):void {
			
			this.requestCloneWindow = RequestCloneWindow(PopUpManager.createPopUp(this, RequestCloneWindow, true));
			PopUpManager.centerPopUp(requestCloneWindow);
			requestCloneWindow.expandAllNodes();
		}
		
		private function showWorkAuthForm():void {
			// If this gnomex installation supports universtion user authentication,
			// show window that allows user to enter work auth form directly; otherwise,
			// show URL that is a printable work auth form.
			if (parentApplication.getProperty(parentApplication.PROPERTY_UNIVERSITY_USER_AUTHENTICATION) == "Y") {
				var workAuthWindow:WorkAuthorizationWindow = WorkAuthorizationWindow(PopUpManager.createPopUp(this, WorkAuthorizationWindow, true));
				PopUpManager.centerPopUp(workAuthWindow);
				workAuthWindow.emailAddress.text = parentApplication.getUserEmail();
				if (workAuthWindow.labCombo.dataProvider.length == 2) {
					workAuthWindow.labCombo.selectedIndex = 1;
				}
			}else {
				navigateToURL(new URLRequest(parentApplication.getProperty(parentApplication.PROPERTY_WORKAUTH1_URL)), '_blank');			
			}
		}
		
		public function getAppUserName():String {
			var submitterName:String = "";
			for each(var u:Object in appUsers) {
				if (u.@idAppUser == idAppUser) {
					submitterName = u.@displayName;
					break;	
				}
			}
			return submitterName;			
		}
		
		private function highlightRequestCategory():void {
			for (var i:int = 0; i < radioRequestCategory.length; i++) {
            	radioRequestCategory[i].setStyle("fontWeight", radioRequestCategory[i].selected    == true ?  "bold" : "normal");	
   			}
		}
		
		private function pickSlideProduct(slideProductCombo:ComboBox):void {
			parentDocument.hybsView.initializeHybsGrid();
			parentDocument.initializeSlideDesigns(slideProductCombo);
			parentDocument.hybsView.propagateSlideDesign(slideProductCombo);
			parentDocument.hybsView.assignSlideNumbers(slideProductCombo);
			checkSetupCompleteness();			
		}
		
		private function pickApp():void {
			var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', getApp());
			if (application != null && application is XMLList) {
				this.parentDocument.applicationName = application[0].@display;
			} else {
				this.parentDocument.applicationName = application.@display;
			}

			checkSetupCompleteness();
			
			if (currentState.indexOf("Microarray") > 0) {
				getSlideProductCombo().selectedIndex = 0;
				parentDocument.filteredSlideProductList.refresh();
			}
		}
        

	]]>
</mx:Script>
	<mx:XMLListCollection id="billingAccounts"  filterFunction="filterBillingAccount"/>
	
	<mx:XMLListCollection id="appUsers"   source="{getLab.lastResult..Lab.activeSubmitters.AppUser}"/>
	
	<mx:XMLListCollection id="requestCategories"   sort="{requestCategorySorter}"
		source="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry.(@isActive == 'Y' &amp;&amp; @value != '' &amp;&amp; @isInternal == 'Y')}"/>
	<mx:XMLListCollection id="requestCategoriesExternal"   sort="{requestCategorySorter}"
		source="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry.(@isActive == 'Y' &amp;&amp; @value != '' &amp;&amp; @isExternal == 'Y')}"/>
    <mx:Sort id="requestCategorySorter" compareFunction="sortRequestCategory"/>	
	
	<mx:NumberValidator id="labValidator"
        source="{this.labCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" /> 
     <mx:NumberValidator id="appUserValidator"
        source="{this.appUserCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" /> 
     <mx:NumberValidator id="billingAccountValidator"
        source="{this.billingAccountCombo}"
        lowerThanMinError="This field is required."         
        property="selectedIndex"
        minValue="0"  />         
     <mx:NumberValidator id="projectValidator"
        source="{this.projectCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="0" />           
          

     	
		<mx:VBox width="100%" height="100%" verticalGap="6" paddingTop="2" id="vbox1" enabled="true">
		 <mx:HBox width="100%" id="hbox8">
			 <mx:VBox verticalGap="4" id="vbox5">
				 <mx:HBox horizontalGap="0" verticalAlign="top">
					 <mx:Label text="(1) Verify your lab group." width="200" id="label12"/>
					 <mx:ComboBox dataProvider="{parentApplication.promptedSubmitRequestLabList}" 
								  labelField="@name" 
								  width="400"
								  change="parentDocument.filteredProjectList.refresh();projectCombo.selectedIndex = -1;checkSetupCompleteness();getMembersOfLab()" 
								  close="parentDocument.filteredProjectList.refresh();projectCombo.selectedIndex = -1;checkSetupCompleteness();getMembersOfLab()" 
								  id="labCombo">
					 </mx:ComboBox>
				 </mx:HBox>
				 <mx:VBox id="accountBox" width="100%" verticalGap="0"> 
					 <mx:HBox width="100%" horizontalGap="0"  verticalAlign="top" id="hbox5">
						 <mx:Text  width="200"  id="text1">
							 <mx:htmlText>(2) Select an account to be billed.</mx:htmlText>
						 </mx:Text>
						 <mx:VBox height="100%" verticalGap="0" paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="4" id="vbox3" width="100%">
							 <mx:HBox verticalAlign="middle" id="hbox3" horizontalGap="1">
								 <mx:ComboBox labelField="@accountNameAndNumber" width="400" id="billingAccountCombo" prompt=" " change="checkSetupCompleteness()" selectedIndex="-1" close="checkSetupCompleteness()">
									 <mx:dataProvider>{billingAccounts}</mx:dataProvider>
								 </mx:ComboBox>
								 <!--mx:Text id="txtBalanceRemaining" text="{'Balance remaining ' + billingAccountCombo.selectedItem.@totalDollarAmountRemainingDisplay}" visible="{billingAccountCombo.selectedItem != null &amp;&amp; billingAccountCombo.selectedItem.hasOwnProperty('@totalDollarAmountRemainingDisplay') != '' &amp;&amp; billingAccountCombo.selectedItem.@totalDollarAmountRemainingDisplay != '' ? true : false}" styleName="warningLabel"/-->
							 </mx:HBox>
							 <mx:Text id="workAuthInstructions" fontStyle="italic" fontSize="9"  textAlign="left" width="100%">
							 </mx:Text>
							 
							 <mx:HBox horizontalGap="2" width="100%" paddingTop="0" paddingBottom="0" id="hbox4">
								 <mx:LinkButton  label="{parentApplication.getProperty(parentApplication.PROPERTY_WORKAUTH1_NAME)}"  styleName="formLinkButton" id="workAuthLink1" fontSize="9" fontFamily="Verdana" paddingTop="0" textAlign="left" paddingLeft="0"> 
									 <mx:click>showWorkAuthForm()</mx:click>
								 </mx:LinkButton>
								 <mx:LinkButton label="{parentApplication.getProperty(parentApplication.PROPERTY_WORKAUTH2_NAME)}" styleName="formLinkButton" id="workAuthLink2" fontSize="9" paddingLeft="2" paddingTop="0">
									 <mx:click>navigateToURL(new URLRequest(parentApplication.getProperty(parentApplication.PROPERTY_WORKAUTH2_URL)), '_blank');</mx:click>
								 </mx:LinkButton>
							 </mx:HBox>
						 </mx:VBox>
						 
						 
					 </mx:HBox>
					 
				 </mx:VBox>
				 
			 </mx:VBox>
			 <mx:VBox  horizontalAlign="center" id="vbox4">
				 <mx:TextArea styleName="instructionBox" width="272" wordWrap="true" height="120" id="textarea1">
					 <mx:htmlText><![CDATA[Instructions<br> 1.  Select the appropriate dropdown or radio<br>      button options for each line.<br> 2. After completing all line items, click the 'Next'<br>      button at the bottom of the page to proceed.<br> 3.  The account selected from this work request will<br>      be electronically billed following completion<br>      of the work.]]></mx:htmlText>
				 </mx:TextArea>
			 </mx:VBox>  
		 </mx:HBox>	
			<mx:HBox width="100%" horizontalGap="0" id="label1" verticalAlign="top" paddingTop="12">
				<mx:Text text="(3) Select a service category." width="200" id="label11"/> 
				<mx:VBox id="requestTypeBox" horizontalGap="8" verticalGap="0" styleName="requiredBox" paddingLeft="2" paddingTop="1" paddingRight="4" paddingBottom="0" width="650">
					<mx:RadioButtonGroup id="requestTypeGroup" />
					<mx:Repeater id="requestCategoryRepeater" dataProvider="{requestCategories}">
						<mx:HBox  paddingRight="2" paddingBottom="0" paddingTop="0" width="100%" verticalAlign="middle">
						    <mx:HBox horizontalAlign="center" paddingBottom="0" paddingTop="0">
						     <mx:Image 						    	
            	                source="{requestCategoryRepeater.currentItem.@icon}"/>						
						    </mx:HBox> 
					    	<mx:RadioButton id="radioRequestCategory" groupName="requestTypeGroup" 
					    		label="{requestCategoryRepeater.currentItem.@display}" 
					    		value="{requestCategoryRepeater.currentItem.@value}" 
					    		click="highlightRequestCategory();parentDocument.setRequestCategoryName();checkSetupCompleteness();" change="checkSetupCompleteness()"  width="206"/>							
					  	  <mx:Text text="{requestCategoryRepeater.currentItem.@notes}" width="100%" id="text5" fontSize="9"/>							
						</mx:HBox>
					</mx:Repeater>
						
				</mx:VBox>
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" verticalAlign="top">
				<mx:Text width="200" id="text2">
					<mx:htmlText>(4) Select a project folder for organizing experiments.</mx:htmlText>
				</mx:Text>
				<mx:HBox verticalGap="2" horizontalGap="4">
					<mx:HBox  height="100%" width="100%" horizontalAlign="right" verticalAlign="middle" horizontalGap="2" id="hbox2">
						<mx:ComboBox dataProvider="{parentDocument.filteredProjectList}" labelField="@name" width="400" id="projectCombo" change="{checkSetupCompleteness()}" close="{checkSetupCompleteness()}">
						</mx:ComboBox>
						<mx:LinkButton  id="editProjectButton" label="Edit..." click="showEditProjectWindow()" textDecoration="underline" styleName="formLinkButton">
							<mx:enabled>{projectCombo.selectedItem != null &amp;&amp; projectCombo.selectedItem.@idProject != &quot;&quot;}</mx:enabled>
						</mx:LinkButton>
						<mx:LinkButton  id="newProjectButton1" label="New..." click="showNewProjectWindow()" textDecoration="underline" styleName="formLinkButton" paddingLeft="0">
						</mx:LinkButton>
					</mx:HBox>					
				</mx:HBox>
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" verticalAlign="top" id="hbox6">
				<mx:Text width="200" id="text6">
					<mx:htmlText>(5) Name your experiment.</mx:htmlText>
				</mx:Text>
				<mx:TextInput id="experimentName" width="400" maxChars="200"/>
			</mx:HBox>
			
		</mx:VBox>

</mx:Canvas>
