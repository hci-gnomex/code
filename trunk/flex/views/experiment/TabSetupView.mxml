<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="Experiment setup" 
	width="100%" height="100%"
	xmlns:views="*.views" xmlns:mx="http://www.adobe.com/2006/mxml">
   <mx:states>
      <mx:State name="AdminState">
         <mx:AddChild relativeTo="{accountBox}" position="before">
            <mx:HBox id="appUserContainer" width="100%" horizontalGap="0">
                   <mx:Text width="180">
                          <mx:htmlText>(2) Verify your name.</mx:htmlText>
					</mx:Text>
            		<mx:ComboBox dataProvider="{appUsers}" 
            			selectedIndex="-1" labelField="@displayName" 
                		id="appUserCombo" width="340">
            			<mx:change>{idAppUser = appUserCombo.selectedItem.@idAppUser;checkSetupCompleteness()}</mx:change>
            		</mx:ComboBox>
            </mx:HBox>
         </mx:AddChild>
         <mx:SetProperty target="{text1}" name="htmlText" value="(3) Pick the account to be &lt;br&gt; billed."/>
         <mx:SetProperty target="{label11}" name="text" value="(4) Select a service."/>
         <mx:SetProperty target="{text2}" name="htmlText">
            <mx:value>(5) Select a project folder for organizing experiment information and data files.</mx:value>
         </mx:SetProperty>
         <mx:SetProperty target="{requestTypeBox}" name="width" value="100%"/>
         <mx:SetProperty target="{text3}" name="width" value="230"/>
         <mx:SetStyle target="{label1}" name="paddingTop"/>
         <mx:SetStyle target="{vbox1}" name="verticalGap" value="12"/>
      </mx:State>
      <mx:State name="ExternalExperimentState">
         <mx:SetProperty target="{textarea1}" name="htmlText">
            <mx:value><![CDATA[Instructions<br>  1.  Select the appropriate dropdown or radio<br>       button options for each line.<br>  2.  After completing all line items, click the 'Next'<br>       button at the bottom of the page to proceed.]]></mx:value>
         </mx:SetProperty>
         <mx:SetProperty target="{textarea1}" name="height" value="74"/>
         <mx:RemoveChild target="{hbox5}"/>
         <mx:RemoveChild target="{accountBox}"/>
         <mx:SetProperty target="{label11}" name="text" value="(2) Select a experiment category."/>
         <mx:SetProperty target="{label12}" name="width" value="200"/>
         <mx:SetProperty target="{label11}" name="width" value="200"/>
         <mx:SetProperty target="{text2}" name="width" value="200"/>
         <mx:SetStyle target="{vbox1}" name="verticalGap" value="20"/>
      </mx:State>
      <mx:State name="AdminExternalExperimentState" basedOn="AdminState">
         <mx:RemoveChild target="{hbox5}"/>
         <mx:RemoveChild target="{accountBox}"/>
         <mx:SetProperty target="{textarea1}" name="htmlText">
            <mx:value><![CDATA[Instructions<br>  1.  Select the appropriate dropdown or radio<br>       button options for each line.<br>  2.  After completing all line items, click the 'Next'<br>       button at the bottom of the page to proceed.]]></mx:value>
         </mx:SetProperty>
          <mx:SetProperty target="{textarea1}" name="height" value="74"/>        
      </mx:State>
   </mx:states>
   

   	
   <mx:HTTPService  
    id="getLab" 
    url="GetLab.gx"
    destination="getLab"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetLab(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get group', event)"
    method="POST"
    useProxy="false">
    <mx:request>
    	<idLab>{this.labCombo.selectedItem.@idLab}</idLab>
    </mx:request>
   </mx:HTTPService>
  
   <mx:HTTPService  
    id="getNewProject" 
    url="GetProject.gx"
    destination="getProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetNewProject(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get new project', event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idProject>0</idProject>    	
    </mx:request>
  </mx:HTTPService>

  <mx:HTTPService  
    id="getProject" 
    url="GetProject.gx"
    destination="getProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProject(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get project', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
    <mx:HTTPService  
    id="getProjectForEdit" 
    url="GetProject.gx"
    destination="getProjectForEdit"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProjectForEdit(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get project to edit', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="getProjectRequestList" 
    url="GetProjectRequestList.gx"
    destination="getProjectRequestList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProjectRequestList(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get project request list', event)"
    method="POST"
    useProxy="false">
    <mx:request>
            <idLab>{labCombo.selectedItem.@idLab}</idLab> 
            <showSamples>N</showSamples>
            <showCategory>N</showCategory>
            <showMyLabsAlways>N</showMyLabsAlways>
            <listKind>ProjectRequestCloneList</listKind>
    </mx:request>
   </mx:HTTPService>
   
<mx:Script>

	<![CDATA[
		import mx.controls.Alert;
		import mx.rpc.events.ResultEvent;
		import mx.managers.PopUpManager;
		import mx.collections.Sort;
		import mx.collections.XMLListCollection;
		import views.experiment.RequestCloneWindow;
		import views.experiment.ProjectDetailWindow;
		import views.util.WorkAuthorizationWindow;

        [Bindable]
        private var lab:Object = null;
        
        [Bindable]
        private var appUsers:XMLListCollection;
        private var appUserSort:Sort;
		
        public var idAppUser:Object = '';

		public var projectDetailWindow:ProjectDetailWindow;
		public var selectedIdProject:Object;
		
		private var requestCloneWindow:RequestCloneWindow;
		
		public function checkSecurity():void {
			if (parentApplication.hasPermission("canWriteAnyObject")) {
				if (parentApplication.submitInternalExperiment()) {
					this.currentState = "AdminState";
				} else {
					this.currentState = "AdminExternalExperimentState";
				}
				idAppUser = '';
			} else {
				if (parentApplication.submitInternalExperiment()) {
					this.currentState = "";				
				} else {
					this.currentState = "ExternalExperimentState";
				}
				idAppUser = parentApplication.getIdAppUser();
			}			
			this.workAuthInstructions.htmlText = parentApplication.getProperty(parentApplication.PROPERTY_WORKAUTH_INSTRUCTIONS);		
		}
		
		public function selectDefaultLab():void {
			if (parentApplication.hasPermission("canWriteAnyObject")) {
				labCombo.selectedIndex = 0;
			} else {
				if (labCombo.dataProvider.length == 2) {
					labCombo.selectedIndex = 1;
					getLab.send();							
				} else {
					labCombo.selectedIndex = 0;
					billingAccountCombo.selectedIndex = -1;
					this.billingAccountValidator.validate();
				}

			}			
		}
		
		public function getRequestCategory():Object {
			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', requestTypeGroup.selectedValue);
			return requestCategory;			 
		}
		
				

		private function showNewProjectWindow():void {
			if (idAppUser == '' || idAppUser == null) {
				Alert.show('Please select the user submitting the request'); 
			} else {
				getNewProject.send();
			}		
		}
		private function filterBillingAccount(item:Object):Boolean {

        	if (item.@isActive == 'N') {
        		return false;
        	}
        	
        	if (item.@isApproved == 'N') {
        		return false;
        	}
        	return true;
		}
		private function showEditProjectWindow():void {
			selectedIdProject = this.projectCombo.selectedItem.@idProject;
			var params:Object = new Object();
			params.idProject = this.projectCombo.selectedItem.@idProject;
			getProjectForEdit.send(params);			
		}
	
		private function onGetNewProject(event:ResultEvent):void {
			if (getNewProject.lastResult.name() == "OpenProjectList") {
				 parentApplication.navExperimentView.selectedProject = getNewProject.lastResult.Project.(@idProject == 0);
				 parentApplication.navExperimentView.selectedProject.@idAppUser = idAppUser;
				 parentApplication.navExperimentView.selectedProject.@idLab = this.labCombo.selectedItem.@idLab;

				 this.projectDetailWindow = ProjectDetailWindow(PopUpManager.createPopUp(this.parentApplication.theBody, ProjectDetailWindow, true));
				 this.projectDetailWindow.projectDetailView.fromSubmitRequestWindow = true;
				 this.projectDetailWindow.projectDetailView.experimentDesignEntries.refresh();
				 this.projectDetailWindow.projectDetailView.experimentFactorEntries.refresh();
				 this.projectDetailWindow.projectDetailView.setupDataListeners();
				 
				 this.projectDetailWindow.labCombo.selectedItem = this.labCombo.selectedItem;
				 this.projectDetailWindow.labCombo.enabled = false;
				 
				 PopUpManager.centerPopUp(this.projectDetailWindow);		
				
			} else {
				mx.controls.Alert.show(getNewProject.lastResult..ACTMESSAGE.@TEXT, "Get new project failed");
			}
		}
		
		private function onGetProjectForEdit(event:ResultEvent):void {
			if (getProjectForEdit.lastResult.name() == "OpenProjectList") {
				 parentApplication.navExperimentView.selectedProject = getProjectForEdit.lastResult.Project.(@idProject == projectCombo.selectedItem.@idProject);

				 this.projectDetailWindow = ProjectDetailWindow(PopUpManager.createPopUp(parentApplication.theBody, ProjectDetailWindow, true));
				 this.projectDetailWindow.title = "Edit Project";
				 this.projectDetailWindow.projectDetailView.fromSubmitRequestWindow = true;
				 this.projectDetailWindow.projectDetailView.experimentDesignEntries.refresh();
				 this.projectDetailWindow.projectDetailView.experimentFactorEntries.refresh();
				 this.projectDetailWindow.projectDetailView.setupDataListeners();
				 
				 this.projectDetailWindow.labCombo.selectedItem = this.labCombo.selectedItem;
				 this.projectDetailWindow.labCombo.enabled = false;
				 
				 PopUpManager.centerPopUp(this.projectDetailWindow);		
				
			} else {
				mx.controls.Alert.show(getNewProject.lastResult..ACTMESSAGE.@TEXT, "Get project for edit failed");
			}
			
		}

		
		private function onGetProject(event:ResultEvent):void {
			var newProject:Object = getProject.lastResult..Project.(@idProject == selectedIdProject);
			
			// If this is an existing project we just editted, remove the old one from the dropdown.
			//  We will add the refreshed one below.
			var existingProject:Object = null;
			var x:int = 0;
			for each(var project:Object in parentDocument.filteredProjectList) {
				if (project.@idProject == newProject.@idProject) {
					parentDocument.filteredProjectList.removeItemAt(x);
					parentDocument.filteredProjectList.refresh();
					break;
				}
				x++;
			}
			
			parentDocument.filteredProjectList.addItem(newProject);
			parentDocument.filteredProjectList.refresh();
			this.projectCombo.selectedItem = newProject;
			checkSetupCompleteness();
		}
				
		public function onProjectAdded(idProject:Object):void {
			selectedIdProject = idProject;
			var params:Object = new Object();
			params.idProject = idProject;
			getProject.send(params);
		}
		

		
		
		private function getMembersOfLab():void {			
			if (this.labCombo.selectedItem.@idLab != null) {
				if (lab == null || labCombo.selectedItem.@idLab != lab.@idLab) {
					if (parentApplication.hasPermission("canWriteAnyObject") && 
					    this.labCombo.selectedItem.@idLab != '') {
					    idAppUser = null;
					}
					getLab.send();				
				}
			}
		}
		private function onGetLab(event:ResultEvent):void {			
			lab = getLab.lastResult..Lab.(@idLab == labCombo.selectedItem.@idLab);
			var emptyNode:XML = <AppUser idAppUser='' displayName=''/>;
			appUsers = new XMLListCollection(lab.members.AppUser);
			for each (var mgr:Object in lab.managers.AppUser) {
				if (!appUsers.contains(mgr)) {
					appUsers.addItem(mgr);				
				}
			}
			appUsers.addItemAt(emptyNode, 0);
			
			appUserSort = new Sort();
	        appUserSort.compareFunction = this.sortAppUsers;
	        appUsers.sort = appUserSort;
	        appUsers.refresh();
	        
	        if (this.currentState == "AdminState") {
		        this.appUserCombo.selectedIndex = 0;
	        }

			billingAccounts = new XMLListCollection(lab.billingAccounts.BillingAccount);
	        billingAccounts.filterFunction = this.filterBillingAccount;
	        billingAccounts.refresh();
	        if (billingAccounts.length == 1) {
	        	this.billingAccountCombo.selectedIndex = 0;	        	
	        } 
	        
	        if (parentDocument != null && !parentDocument.isAmendState()) {
		        parentDocument.filteredProjectList.refresh();	        	
	        }


		}

        private function sortAppUsers(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var display1:String = obj1.@displayName;
				var display2:String = obj2.@displayName;
				
				if (display1 < display2) {
					return -1;
				} else if (display1 > display2) {
					return 1;
				} else {
					return 0;
				}
				
			}
		}			

	
		private function checkSetupCompleteness():void {
        	var isComplete:Boolean = false;
        	if (parentDocument.request != null && parentDocument.request.@idRequest != '0') {
        		isComplete = true;
        	} else if (idAppUser != null &&  idAppUser != '' &&
        	    this.requestTypeGroup.selectedValue != null &&
        	    this.labCombo.selectedItem != null && this.labCombo.selectedItem.@idLab != '' &&
        	    this.projectCombo.selectedItem != null && this.projectCombo.selectedItem.@idProject != '') {
        	    	
        	    // Billing account is not required on external experiment submissions
        	    if (this.currentState == "" || this.currentState == "AdminState") {
        	    	if (this.billingAccountCombo.selectedItem != null) {
		        	    isComplete = true;
        	    		
        	    	} 	    
        	    } else {
        	    	isComplete = true;
        	    }
        	    	
        	} 
        	
        	if (parentDocument.isSolexaState()) {
	    		parentDocument.seqSetupView.enabled = isComplete;
    			parentDocument.enableNextButtons();
        		
        	} else {
	    		parentDocument.sampleSetupView.enabled = isComplete;
    			parentDocument.enableNextButtons();
    			if (parentDocument.theTab.contains(parentDocument.annotationView)) {
        			parentDocument.annotationView.enabled = isComplete;
       			}        			
    		}

    		
    		callLater(postSetupCompleteness, [isComplete]);
    		
    		
        }
        
        private function postSetupCompleteness(isComplete:Boolean):void {
    		if (!isComplete) {
    			if (parentDocument.isSolexaState()) {
    				parentDocument.seqSetupView.enabled = false;
    			}
	    		parentDocument.samplesView.enabled = false;
	        	if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
		        	parentDocument.hybSetupView.enabled = false;
	        	} 
	        	if (parentDocument.theTab.contains(parentDocument.hybsView)) {
		        	parentDocument.hybsView.enabled = false;
	        	} 
	        	parentDocument.confirmView.enabled = false;
    		} else {
    			if (parentDocument.isSolexaState()) {
    				parentDocument.seqSetupView.checkSeqAppSetupCompleteness();
    			}
    			parentDocument.sampleSetupView.checkSampleSetupCompleteness();
    			parentDocument.samplesView.checkSamplesCompleteness();
    			parentDocument.hybSetupView.checkHybSetupCompleteness();
    			parentDocument.hybsView.checkHybsCompleteness();
    		}
        	
        }

		private function onGetProjectRequestList(event:ResultEvent):void {
			
			this.requestCloneWindow = RequestCloneWindow(PopUpManager.createPopUp(this, RequestCloneWindow, true));
			PopUpManager.centerPopUp(requestCloneWindow);
			requestCloneWindow.expandAllNodes();
		}
		
		private function showWorkAuthForm():void {
			// If this gnomex installation supports universtion user authentication,
			// show window that allows user to enter work auth form directly; otherwise,
			// show URL that is a printable work auth form.
			if (parentApplication.getProperty(parentApplication.PROPERTY_UNIVERSITY_USER_AUTHENTICATION) == "Y") {
				var workAuthWindow:WorkAuthorizationWindow = WorkAuthorizationWindow(PopUpManager.createPopUp(this, WorkAuthorizationWindow, true));
				PopUpManager.centerPopUp(workAuthWindow);
				workAuthWindow.emailAddress.text = parentApplication.getUserEmail();
				if (workAuthWindow.labCombo.dataProvider.length == 2) {
					workAuthWindow.labCombo.selectedIndex = 1;
				}
			}else {
				navigateToURL(new URLRequest(parentApplication.getProperty(parentApplication.PROPERTY_WORKAUTH1_URL)), '_blank');			
			}
		}
        

	]]>
</mx:Script>
	<mx:XMLListCollection id="billingAccounts"  filterFunction="filterBillingAccount"/>
	
	<mx:NumberValidator id="labValidator"
        source="{this.labCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" /> 
     <mx:NumberValidator id="appUserValidator"
        source="{this.appUserCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" /> 
     <mx:NumberValidator id="billingAccountValidator"
        source="{this.billingAccountCombo}"
        lowerThanMinError="This field is required."         
        property="selectedIndex"
        minValue="0"  />         
     <mx:NumberValidator id="projectValidator"
        source="{this.projectCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="0" />           
          

		<mx:VBox  horizontalAlign="center" paddingLeft="4" right="0" top="0">
  		  <mx:TextArea styleName="instructionBox" width="282" wordWrap="true" height="120" id="textarea1">
			<mx:htmlText><![CDATA[Instructions<br>  1.  Select the appropriate dropdown or radio<br>       button options for each line.<br>  2.  After completing all line items, click the 'Next'<br>       button at the bottom of the page to proceed.<br>  3.  The account selected from this work request will<br>       be electronically billed following completion<br>       of the work.]]></mx:htmlText>
		  </mx:TextArea>
		</mx:VBox>
     	
		<mx:VBox width="100%" height="100%" verticalGap="15" paddingTop="2" id="vbox1" enabled="true">
			<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle">
				<mx:Label text="(1) Verify your lab group." width="180" id="label12"/>
				<mx:ComboBox dataProvider="{parentApplication.promptedSubmitRequestLabList}" 
					selectedIndex="-1" labelField="@name" 
					width="345"
					 change="parentDocument.filteredProjectList.refresh();projectCombo.selectedIndex = -1;checkSetupCompleteness();getMembersOfLab()" id="labCombo">
				</mx:ComboBox>
			</mx:HBox>
			<mx:VBox id="accountBox" width="100%" verticalGap="0"> 
				<mx:HBox width="100%" horizontalGap="0"  verticalAlign="top" id="hbox5">
					<mx:Text  width="180"  id="text1">
						<mx:htmlText>(2) Select an account to be billed for this work request.</mx:htmlText>
					</mx:Text>
					<mx:VBox height="100%" verticalGap="0" paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="4" width="100%" id="vbox3">
						<mx:HBox verticalAlign="middle" id="hbox3">
							<mx:ComboBox labelField="@accountNameAndNumber" width="400" id="billingAccountCombo" prompt=" " change="checkSetupCompleteness()" selectedIndex="-1">
								<mx:dataProvider>{billingAccounts}</mx:dataProvider>
							</mx:ComboBox>
							<mx:Text text="{'Balance remaining ' + billingAccountCombo.selectedItem.@totalDollarAmountRemainingDisplay}" visible="{billingAccountCombo.selectedItem != null &amp;&amp; billingAccountCombo.selectedItem.hasOwnProperty('@totalDollarAmountRemainingDisplay') != '' &amp;&amp; billingAccountCombo.selectedItem.@totalDollarAmountRemainingDisplay != '' ? true : false}" styleName="warningLabel" id="text4"/>
						</mx:HBox>
						<mx:Text width="520" id="workAuthInstructions" fontStyle="italic" fontSize="9"  textAlign="left">
						</mx:Text>
						
						<mx:HBox horizontalGap="2" width="100%" paddingTop="0" paddingBottom="0" id="hbox4">
							<mx:LinkButton  label="{parentApplication.getProperty(parentApplication.PROPERTY_WORKAUTH1_NAME)}"  styleName="formLinkButton" id="workAuthLink1" fontSize="9" fontFamily="Verdana" paddingTop="0" textAlign="left" paddingLeft="0"> 
								<mx:click>showWorkAuthForm()</mx:click>
							</mx:LinkButton>
							<mx:LinkButton label="{parentApplication.getProperty(parentApplication.PROPERTY_WORKAUTH2_NAME)}" styleName="formLinkButton" id="workAuthLink2" fontSize="9" paddingLeft="2" paddingTop="0">
								<mx:click>navigateToURL(new URLRequest(parentApplication.getProperty(parentApplication.PROPERTY_WORKAUTH2_URL)), '_blank');</mx:click>
							</mx:LinkButton>
						</mx:HBox>
					</mx:VBox>


				</mx:HBox>
				<mx:HBox width="100%">
				    <mx:Spacer width="160"/>
					
				</mx:HBox>
				
			</mx:VBox>
			<mx:HBox width="100%" horizontalGap="0" id="label1" verticalAlign="top" paddingTop="12">
				<mx:Label text="(3) Select a service category." width="180" id="label11"/>
				<mx:VBox id="requestTypeBox" horizontalGap="8" verticalGap="1" styleName="requiredBox" paddingLeft="2" paddingTop="1" paddingRight="4" paddingBottom="0" width="100%">
					<mx:HBox verticalGap="2" paddingRight="2" paddingBottom="2" width="100%" verticalAlign="middle">
					    <mx:Text text="Service" width="200" fontWeight="normal" textDecoration="underline" fontStyle="normal" id="text3"/>
					    <mx:Text text="Application Options" width="200" fontStyle="normal" fontWeight="normal" textDecoration="underline"/>
					</mx:HBox>
					<mx:HBox verticalGap="2" paddingRight="2" paddingBottom="2" width="100%" verticalAlign="middle">
					    <mx:HBox horizontalAlign="center">
					     <mx:Image 						    	
                            source="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'AGIL').@isActive == 'Y' ? parentApplication.iconMicroarray : parentApplication.iconMicroarrayDisabled}"/>							
					    </mx:HBox>
					    <mx:RadioButtonGroup id="requestTypeGroup" />
					    <mx:RadioButton groupName="requestTypeGroup" label="Agilent 2-color Microarray " value="AGIL" click="parentDocument.setRequestCategoryName();checkSetupCompleteness();" change="checkSetupCompleteness()" id="requestRadioAgilent" width="206"							
							enabled="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'AGIL').@isActive == 'Y' ? true : false}"/>							
					    <mx:Text text="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'AGIL').@notes}" width="100%"
							enabled="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'AGIL').@isActive == 'Y' ? true : false}"/>							
					</mx:HBox>
					<mx:HBox verticalGap="2" paddingRight="2" paddingBottom="2" width="100%" verticalAlign="middle">
					    <mx:HBox horizontalAlign="center">
					     <mx:Image 					    	
                            source="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'AGIL1').@isActive == 'Y' ? parentApplication.iconMicroarraySingleColor : parentApplication.iconMicroarraySingleColorDisabled}"/>							
					    </mx:HBox>
					    <mx:RadioButton groupName="requestTypeGroup" label="Agilent 1-color Microarray" value="AGIL1" click="parentDocument.setRequestCategoryName();checkSetupCompleteness();" change="checkSetupCompleteness()" id="requestRadioAgilentSingleColor" width="206"						
							enabled="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'AGIL1').@isActive == 'Y' ? true : false}"/>							
					    <mx:Text text="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'AGIL1').@notes}" width="100%"
							enabled="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'AGIL1').@isActive == 'Y' ? true : false}"/>							
					</mx:HBox>
					<mx:HBox verticalGap="2" paddingRight="2" paddingBottom="2" width="100%" verticalAlign="middle">
					    <mx:HBox horizontalAlign="center">
					     <mx:Image 				    	
                            source="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'AFFY').@isActive == 'Y' ? parentApplication.iconMicroarrayAffy : parentApplication.iconMicroarrayAffyDisabled}"/>							
					    </mx:HBox>
					    <mx:RadioButton groupName="requestTypeGroup" label="Affymetrix Microarray" value="AFFY" click="parentDocument.setRequestCategoryName();checkSetupCompleteness();" change="checkSetupCompleteness()" id="requestRadioAffy" width="206"							
							enabled="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'AFFY').@isActive == 'Y' ? true : false}"/>							
					    <mx:Text text="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'AFFY').@notes}" width="100%"
							enabled="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'AFFY').@isActive == 'Y' ? true : false}"/>
					</mx:HBox>
					<mx:HBox verticalGap="2" paddingRight="2" paddingBottom="2" width="100%" verticalAlign="middle">									
					    <mx:HBox horizontalAlign="center">
					    	<mx:Image 
                            source="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'QC').@isActive == 'Y' ? parentApplication.iconQC : parentApplication.iconQCDisabled}"/>							
					    </mx:HBox>
					    <mx:RadioButton groupName="requestTypeGroup" label="Sample Quality" value="QC" click="parentDocument.setRequestCategoryName();checkSetupCompleteness();" change="checkSetupCompleteness()" id="requestRadioQC" paddingBottom="0" width="206"					
							enabled="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'QC').@isActive == 'Y' ? true : false}"/>							
					    <mx:Text text="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'QC').@notes}" width="100%"
							enabled="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'QC').@isActive == 'Y' ? true : false}"/>							
					</mx:HBox>
					<mx:HBox verticalGap="2" paddingRight="2" paddingBottom="2" width="100%" verticalAlign="middle">
					    <mx:HBox horizontalAlign="center">
					     <mx:Image
                            source="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'SOLEXA').@isActive == 'Y' ? parentApplication.iconSolexa : parentApplication.iconSolexaDisabled}"/>							
					    </mx:HBox>
						<mx:RadioButton groupName="requestTypeGroup" label="Illumina GAIIx Sequencing" value="SOLEXA" click="parentDocument.setRequestCategoryName();checkSetupCompleteness();" change="checkSetupCompleteness()" id="requestRadioSolexa" width="206"																							
							enabled="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'SOLEXA').@isActive == 'Y' ? true : false}"/>							
						<mx:Text text="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'SOLEXA').@notes}" width="100%"
							enabled="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'SOLEXA').@isActive == 'Y' ? true : false}"/>							
					</mx:HBox>
					<mx:HBox verticalGap="2" paddingRight="2" paddingBottom="2" width="100%" verticalAlign="middle">
					    <mx:HBox horizontalAlign="center">
					     <mx:Image 
                            source="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'HISEQ').@isActive == 'Y' ? parentApplication.iconHiSeq : parentApplication.iconHiSeqDisabled}"/>							
					    </mx:HBox>
						<mx:RadioButton groupName="requestTypeGroup" label="Illumina HiSeq 2000 Sequencing" value="HISEQ" click="parentDocument.setRequestCategoryName();checkSetupCompleteness();" change="checkSetupCompleteness()" id="requestRadioHiSeq" width="206"
                            enabled="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'HISEQ').@isActive == 'Y' ? true : false}"							
							/>																							
						<mx:Text text="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'HISEQ').@notes}" width="100%"
							enabled="{parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', 'HISEQ').@isActive == 'Y' ? true : false}"							
							/>
					</mx:HBox>
				</mx:VBox>
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" verticalAlign="top">
				<mx:Text width="180" id="text2">
					<mx:htmlText>(4) Select a project folder for organizing experiment information and data files.</mx:htmlText>
				</mx:Text>
				<mx:HBox verticalGap="2" horizontalGap="4">
				    <mx:VBox verticalGap="2" id="vbox2">
					<mx:RadioButtonGroup id="projectRadioGroup"/>
					<mx:RadioButton label="New project" groupName="projectRadioGroup" click="{showNewProjectWindow()}"/>
					<mx:RadioButton label="Existing project" groupName="projectRadioGroup" selected="true"/>
				    	
				    </mx:VBox>
					<mx:HBox  height="100%" width="100%" horizontalAlign="right" verticalAlign="middle" horizontalGap="2" id="hbox2">
						<mx:ComboBox dataProvider="{parentDocument.filteredProjectList}" labelField="@name" width="385" id="projectCombo" change="{checkSetupCompleteness()}">
						</mx:ComboBox>
						<mx:LinkButton  id="editProjectButton" label="Edit..." click="showEditProjectWindow()" textDecoration="underline" styleName="formLinkButton">
							<mx:enabled>{projectCombo.selectedItem != null &amp;&amp; projectCombo.selectedItem.@idProject != &quot;&quot;}</mx:enabled>
						</mx:LinkButton>
					</mx:HBox>					
				</mx:HBox>
			</mx:HBox>
			
		</mx:VBox>

</mx:Canvas>
