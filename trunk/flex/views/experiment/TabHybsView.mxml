<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"  xmlns:views="views.*"  xmlns:util="views.util.*" label="Hyb View" width="100%" height="100%" enabled="false">
<mx:Script> 
	<![CDATA[ 
		import hci.flex.controls.DropdownLabel;
		
		import mx.collections.XMLListCollection;
		import mx.controls.Alert;
		import mx.core.DragSource;
		import mx.events.CloseEvent;
		import mx.events.DragEvent;
		import mx.managers.DragManager;
		
		import views.renderers.ComboBox;
		import views.renderers.ComboBoxWorkflowStatus;

		[Bindable]
		public var slideDesigns:XMLListCollection = new XMLListCollection();
		
		private var arrayCoordinates:XMLListCollection = null;
		
		public function propagateSlideDesign(slideProductCombo:mx.controls.ComboBox):void {
			for each (var hyb:Object in parentDocument.hybs) {
				hyb.@idSideDesign =  slideProductCombo.selectedItem.@idSlideDesign;
			}
			callLater(this.checkHybsCompleteness);
		}
		
		public function assignSlideNumbers(slideProductCombo:mx.controls.ComboBox):void {
			if (slideProductCombo.selectedItem == null || slideProductCombo.selectedItem.@idSlideProduct == '') {
				return;
			}
			if (slideProductCombo.selectedItem.@arraysPerSlide == '' ||
				slideProductCombo.selectedItem.@arraysPerSlide == '1') {
				this.slideNumberColumn.visible = false;		
				this.arrayCoordinateColumn.visible = false;
			} else {
				this.slideNumberColumn.visible = true;
				this.arrayCoordinateColumn.visible = true;
			}
			var slideNumber:int = 0;
			var count:int = 0;
			var firstTime:Boolean = true; 
			var useAltColor:Boolean = true;
			getArrayCoordinates(slideProductCombo);
			for each(var hyb:Object in parentDocument.hybs) {
				if (slideProductCombo.selectedItem.@arraysPerSlide == '' ||
					slideProductCombo.selectedItem.@arraysPerSlide == '1') {
					slideNumber++;    
					hyb.@showSlideIcon = 'Y';	
					hyb.@altColor = false;
					hyb.@arrayCoordinate = '';
				} else {
					if (firstTime || count == slideProductCombo.selectedItem.@arraysPerSlide) {
						count = 0;
						slideNumber ++;
						hyb.@showSlideIcon = 'Y';
						useAltColor = !useAltColor;
						hyb.@altColor = useAltColor;
					} else {
						hyb.@showSlideIcon = 'N';							
						hyb.@altColor = useAltColor;
					}
					if (arrayCoordinates.length >= count + 1) {
						hyb.@arrayCoordinate = arrayCoordinates.getItemAt(count).@name;
					}
				}
				hyb.@slideNumber = slideNumber;
				count++;
				firstTime = false;
			}
		}		

		private function getArrayCoordinates(slideProductCombo:mx.controls.ComboBox):XMLListCollection {
			if (arrayCoordinates == null) {
				var slideDesign:Object = this.getDefaultSlideDesign(slideProductCombo);
				arrayCoordinates = new XMLListCollection();
				if (slideDesign != null) {
					for each(var sd:Object in parentDocument.slideDesignList) {
						if (sd.@idSlideDesign == slideDesign.@idSlideDesign) {
							for each(var coords:Object in sd.children()) {
								if (coords.name() == "arrayCoordinates") {
									for each(var coord:Object in coords.children()) {
										if (coord.name() == "ArrayCoordinate") {
											if (coord.@name != '') {
												arrayCoordinates.addItem(coord);
											}
										}
									}
								}
							}
							break;
						}
					}
				}
			}
			return arrayCoordinates;			
		}
		
		
		public function getDefaultSlideDesign(slideProductCombo:mx.controls.ComboBox):Object {
			var slideDesign:Object = null;
			if (parentDocument == null) {
				return slideDesign;
			}
			
			if (slideProductCombo.selectedItem != null) {
				parentDocument.selectedIdSlideProduct = slideProductCombo.selectedItem.@idSlideProduct;
				slideDesigns = new XMLListCollection(parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SlideDesign').DictionaryEntry.(@value == '' || @idSlideProduct == parentDocument.selectedIdSlideProduct));
				
				// If there is only one slide design (besides the blank entry) for the slide product,
				// set all of the hybs to it.
				if (slideDesigns.length == 2) {
					slideDesign = slideDesigns[1];
				}
			}
			
			return slideDesign;
			
		}
		
       	private function getChannelCountLabelFunction(item:Object,col:int):String
        {
        	var channel1Count:int = 0;
        	var channel2Count:int = 0;
        	if (parentDocument == null) {
        		return "";
        	}
        	if (parentDocument.hybs!= null) {
        		for each(var hyb:Object in parentDocument.hybs) {
        			if (hyb.@idSampleChannel1 == item.@idSample) {
        				channel1Count++;
        			}
        			if (hyb.@idSampleChannel2 == item.@idSample) {
        				channel2Count++;
        			}
        		}
        	} 
			item.@channel1Count = channel1Count;
			item.@channel2Count = channel2Count;
			return "";
        }
        
 
		private function addHyb():void {
			var slideProductCombo:mx.controls.ComboBox = null;
			if (parentApplication.submitInternalExperiment()) {
				slideProductCombo = parentDocument.hybSetupView.slideProductCombo;	
			} else {
				slideProductCombo = parentDocument.setupView.getSlideProductCombo();	
			}
			
			var defaultSlideDesign:Object = this.getDefaultSlideDesign(slideProductCombo);
			var idSlideDesign:String = '';
			if (defaultSlideDesign != null) {
				idSlideDesign = defaultSlideDesign.@idSlideDesign;
			}
			
			
			var emptyNode:XML = new XML("<Hybridization " +
			    " idHybridization='" + "Hyb" + parentDocument.hybs.length + "'" +
			    " canChangeSampleDesignations='Y'" +
			    " canChangeSlideSource='Y'" +
			    " canChangeSlideDesign='Y'" +
			    " notes='' " + 
				" idSlideDesign='" + idSlideDesign + "'" +
				" codeSlideSource='" + (parentApplication.submitInternalExperiment() ? parentDocument.hybSetupView.getCheckedCodeSlideSource() : '') + "'" +
				" idSampleChannel1='0'" +
				" idSampleChannel2='0'" +
				"/>");
			
			parentDocument.hybs.addItem(emptyNode);
			
			assignSlideNumbers(slideProductCombo);	
			
		}
        
		private function deleteHyb():void {
			if (hybsGrid.selectedItems.length > 0) {
				for each(var hyb:Object in hybsGrid.selectedItems) {	
					if (!parentApplication.hasPermission("canWriteAnyObject")) {
						if (hyb.@idHybridization.indexOf("Hyb") < 0) {
							Alert.show("Existing hyb " + hyb.@number + " cannot be deleted from the experiment.");
							continue;
						}		
					}				
					parentDocument.hybs.removeItemAt(parentDocument.hybs.getItemIndex(hyb));
				}
			}
			if (parentApplication.submitInternalExperiment()) {
				assignSlideNumbers(parentDocument.hybSetupView.slideProductCombo);	
			} else {
				assignSlideNumbers(parentDocument.setupView.getSlideProductCombo());	
			}
		}
		
		private function copyHyb():void {
			if (hybsGrid.selectedIndex != -1) {
				for each(var i:int in hybsGrid.selectedIndices) {					
					var hybToCopy:Object = parentDocument.hybs[i];
					
					var emptyNode:XML = new XML("<Hybridization " +
    			    " idHybridization='" + "Hyb" + parentDocument.hybs.length + "'" +
					" notes='" + hybToCopy.@notes + "'" + 
					" idSampleChannel1='" + hybToCopy.@idSampleChannel1 + "'" +
					" idSampleChannel2='" + hybToCopy.@idSampleChannel2 + "'" +	
					" codeSlideSource='" + hybToCopy.@codeSlideSource + "'" +			
					" idSlideDesign='" + hybToCopy.@idSlideDesign + "'" +			
					"/>");
			
					parentDocument.hybs.addItem(emptyNode);
					
				}
			}
			if (parentApplication.submitInternalExperiment()) {
				assignSlideNumbers(parentDocument.hybSetupView.slideProductCombo);	
			} else {
				assignSlideNumbers(parentDocument.setupView.getSlideProductCombo());	
			}
		}
		public function propagateSlideSourceToHybsSameSlide(theHyb:Object):void {
			for each (var hyb:Object in parentDocument.hybs) {
				if (theHyb.@slideNumber == hyb.@slideNumber) {
					hyb.@codeSlideSource = theHyb.@codeSlideSource;
				}
			}
			
		}
		
		
		public function promptToClearAllHybs():void {
			Alert.show("Remove all hybs currently showing in list?",
						null, 
						(Alert.YES | Alert.NO), this, 
						onPromptToClearAllHybs);
			
		}
		
		private function onPromptToClearAllHybs(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	parentDocument.hybs.removeAll();
            	checkHybsCompleteness();
            }
        }
        public function initializeHybsGrid():void {
        	if (parentDocument.requestToClone != null && parentDocument.hybs.length > 0) {
        		return;
        	}
			
			var numberOfHybsToAdd:Number = 0;
			
			var cy3Count:Number = 0;
			var cy5Count:Number = 0;
			var noLabelCount:Number = 0;
        	if (!parentApplication.submitInternalExperiment()) {
				for each(var s:Object in parentDocument.samples) {
					if (s.@label == "cy3") {
						cy3Count++;
					} else if (s.@label == "cy5") {
						cy5Count++;
					} else {
						noLabelCount++;
					}
				}
				var maxCount:Number = 0;
				if (cy3Count > cy5Count) {
					maxCount = cy3Count;
				} else {
					maxCount = cy5Count;
				}
				if (noLabelCount > maxCount) {
					maxCount = noLabelCount;
				}
				numberOfHybsToAdd = maxCount;
			}
			
			if (parentApplication.submitInternalExperiment()) {
				if (parentDocument.hybSetupView.numberOfHybs.text == null || 
					parentDocument.hybSetupView.numberOfHybs.text == "0" || 
					parentDocument.hybSetupView.numberOfHybs.text == '' ||
					!parentDocument.hybSetupView.validNumberOfHybs) {
					return;
				}
				if (parentDocument.hybSetupView.slideProductCombo.selectedItem == null || parentDocument.hybSetupView.slideProductCombo.selectedItem.@value == '') {
					return;
				}
				if (parentDocument.hybSetupView.getCheckedCodeSlideSource() == '') {
					return;
				}
				numberOfHybsToAdd = new Number(parentDocument.hybSetupView.numberOfHybs.text); 
			}
			
        	
    		if(parentDocument.hybs.length <= numberOfHybsToAdd) {
    			numberOfHybsToAdd = numberOfHybsToAdd - parentDocument.hybs.length;
    		} else {
    			numberOfHybsToAdd = 0;
    		}
    		for(var x:int = 0; x < numberOfHybsToAdd; x++) {
    			addHyb();
    		}
    		 
    		this.propagateHybChannel1Samples();
			
			arrayCoordinates = null;
        }
        
       
 		
		private function propagateHybChannel1Samples():void {
			var requestCategory:Object = parentDocument.getRequestCategory();
			if (requestCategory.@numberOfChannels == "1") {
				var count:int = 0;
				for each(var sample:Object in parentDocument.samples) {
					if (parentDocument.hybs.length == count) {
						break;
					}
					var hyb:Object = parentDocument.hybs.getItemAt(count);
					hyb.@idSampleChannel1 = sample.@idSample;
					hyb.@idSampleChannel2 = "";
					sample.@label = "cy3";
					count++;
				}
			}
			
		}
		       
        public function checkHybsCompleteness():void {
        	if (parentDocument == null) {
        		return;
        	}
        	if (parentDocument.isEditState()) {
        		return;
        	} else if (!parentDocument.isAmendState() && parentDocument.setupView.requestTypeGroup.selectedValue == "QC") {
        		return;
        	}
        	
        	var completeCount:int = 0;
        	for each(var hyb:Object in parentDocument.hybs) {
        		if (hyb.@idSampleChannel1 != null && hyb.@idSampleChannel1 != '0'  &&
        			hyb.@idSlideDesign != null && hyb.@idSlideDesign != '') {
					
					if (parentApplication.submitInternalExperiment()) {
						if (hyb.@codeSlideSource != null && hyb.@codeSlideSource != '') {
							completeCount++;       				
						}
					} else {
						completeCount++;
					}
					
        			 
        		}
        	}
        	if (parentDocument.hybs.length > 0 && completeCount == parentDocument.hybs.length) {
        		if (parentDocument.theTab.contains(parentDocument.visibilityView)){
	        		parentDocument.visibilityView.enabled = true;
        		} else if (parentDocument.theTab.contains(parentDocument.confirmView)){
					parentDocument.confirmView.enabled = true;
				}
        		
        	} else if (parentDocument.isEditState()) {
        		if (parentDocument.theTab.contains(parentDocument.visibilityView)) {
 		       		parentDocument.visibilityView.enabled = true;        			
        		}
        	} else {
        		if (parentDocument.theTab.contains(parentDocument.visibilityView)) {
	        		parentDocument.visibilityView.enabled = false;        			
        		} else if (parentDocument.theTab.contains(parentDocument.confirmView)){
					parentDocument.confirmView.enabled = false;
				}
        	}
        	parentDocument.enableNextButtons();
        
        }
        
        private function onDragDrop(event:DragEvent) : void
		{
		   var isChannel1Drop:Boolean = false;
		   var isChannel2Drop:Boolean = false;
			
	       var ds:DragSource = event.dragSource;
	       var colXStart:int = 0;
	       var colXEnd:int = 0;
	       for each(var col:DataGridColumn in hybsGrid.columns) {
	       		if (!col.visible) {
	       			continue;
	       		}
	       		colXEnd += col.width;
	       		
	       		
	       		
	       		if (event.localX >= colXStart && event.localX <= colXEnd) {
	       			if (col.headerText == "Cy3 Sample (green)") {
	       				isChannel1Drop = true;
	       				break;
	       			} else if (col.headerText == "Cy5 Sample (red)") {
	       				isChannel2Drop = true;
	       				break;
	       			}
	       		}
	       		colXStart = colXEnd;
	       }
	      

		   
	       
	       // retrieve the data associated with the "items" format. This will be the data that
	       // the dragInitiator has copied into the DragSource.
	       var items:Array = ds.dataForFormat("items") as Array;
	
	       // determine where in the grid the drop occurs and select that node by the index; followed by 
	       // retrieving the node itself. 
	       var r:int = hybsGrid.calculateDropIndex(event);
	       hybsGrid.selectedIndex = r;
	       var node:XML = hybsGrid.selectedItem as XML;
	       var p:*;
	
	
	       if (node.name()  == "Hybridization") {
	       		p = node;
	       } else {
	       		//ignore drop operations not on existing hyb row
	       }
	       
	        
	       // Disallow operation if samples cannot be changed on hyb
	       if (hybsGrid.selectedItem.@canChangeSampleDesignations == "Y" ||
	           parentApplication.hasPermission("canWriteAnyObject")) {
	           	
	       } else {
	       	  	Alert.show("Cy3 and Cy5 samples cannot be changed.");
		       	event.preventDefault();
		       	event.target.hideDropFeedback(event);
		       	DragManager.showFeedback(DragManager.NONE);
				return;	       	  	
	       }
	
	       // taking all of the items in the DragSouce, update the appropriate
	       // sample id on the hyb node.
	       if (p != null) {
		       for(var i:Number=0; i < items.length; i++) {
		       	if (items[i].name() == "Sample") {
	       		
	       			// Based on the label, figure out if channel1 or channel2
       				if (items[i].@label == "cy3") {
       					isChannel1Drop = true;
       					isChannel2Drop = false;
       				} else if (items[i].@label == "cy5") {
       					isChannel2Drop = true;
       					isChannel1Drop = false;
       				}
       				
		       		// The user didn't drag over cy3 or cy5 sample column, so disregard 
		   			// operation.	       
	       			if (!isChannel1Drop && !isChannel2Drop) {
	       				Alert.show("Please drag sample onto either Cy3 or Cy5 cell of hybs grid");
		       			event.preventDefault();
		       			event.target.hideDropFeedback(event);
		       			DragManager.showFeedback(DragManager.NONE);
		       			checkHybsCompleteness();
		       			return;
	      			}
		       		if (isChannel1Drop) {
			       		hybsGrid.selectedItem.@idSampleChannel1 = items[i].@idSample;	       			
		       		} else if (isChannel2Drop) {
			       		hybsGrid.selectedItem.@idSampleChannel2 = items[i].@idSample;	       			
		       		}
		       	} 
		       }
	       	
	       }	
	       
	       this.cy3SampleDragGrid.invalidateDisplayList();
	       this.cy3SampleDragGrid.invalidateList();
	       this.cy5SampleDragGrid.invalidateDisplayList();
	       this.cy5SampleDragGrid.invalidateList();
	       
	       // Don't allow flex to do any default moves to the data.  
	       // We handle it in the code above.
	       event.preventDefault();
	       event.target.hideDropFeedback(event);
		   DragManager.showFeedback(DragManager.NONE);
	       
	       checkHybsCompleteness();
		}
		private function showCy3LabelCols(isVisible:Boolean):void {
			labelCol1.visible = isVisible;
			labelCol2.visible = isVisible;
			labelCol3.visible = isVisible;
			labelCol4.visible = isVisible;
			labelCol5.visible = isVisible;
		}
			
		private function showCy5LabelCols(isVisible:Boolean):void {
			labelCol6.visible = isVisible;
			labelCol7.visible = isVisible;
			labelCol8.visible = isVisible;
			labelCol9.visible = isVisible;
			labelCol10.visible = isVisible;
		}

		private function showHybWorkflowCols(isVisible:Boolean):void {
			hybCol1.visible = isVisible;
			hybCol2.visible = isVisible;
			hybCol3.visible = isVisible;
			hybCol4.visible = isVisible;
		}
				
		private function showExtWorkflowCols(isVisible:Boolean):void {
			extCol1.visible = isVisible;
			extCol2.visible = isVisible;
			extCol3.visible = isVisible;
		}				
		public function onEdit():void {		
		}

		public function sortLabeledSamples():void {
        	cy3Samples = new XMLListCollection();
        	cy5Samples = new XMLListCollection();
        	var sample:Object = null;
        	for each(sample in parentDocument.samples) {
        		if (!sample.hasOwnProperty("@label") || sample.@label == null || sample.@label == '') {
        			cy3Samples.addItem(sample);
        		}
        	}
        	for each(sample in parentDocument.samples) {
        		if (sample.@label != null && sample.@label == 'cy3') {
        			cy3Samples.addItem(sample);
        		}
        	}
        	for each(sample in parentDocument.samples) {
        		if (sample.@label != null && sample.@label == 'cy5') {
        			cy5Samples.addItem(sample);
        		}
        	}
        	
        	// Now for any hybs, correct the channel
        	for each(sample in parentDocument.samples) {
        		if (!sample.hasOwnProperty("@label")) {
        			continue;
        		}
        		for each(var hyb:Object in parentDocument.hybs) {
        			if (hyb.@idSampleChannel1 == sample.@idSample) {
        				// Wrong channel, correct
        				if (sample.@label == 'cy5') {
        					hyb.@idSampleChannel1 = 0;
        				}
        			}
        			if (hyb.@idSampleChannel2 == sample.@idSample) {
        				// Wrong channel, correct
        				if (sample.@label != 'cy5') {
        					hyb.@idSampleChannel2 = 0;
        				}
        			}
        		}
        	}
        	
        		
        }    
		
	]]>
</mx:Script>
    <mx:XMLListCollection id="cy3Samples"/>
    <mx:XMLListCollection id="cy5Samples"/>
    <mx:VBox width="100%" height="100%" verticalGap="0">

  		<mx:VBox  horizontalAlign="center" paddingLeft="4" id="vbox2" width="100%">
  			  <mx:TextArea styleName="instructionBox" width="730" wordWrap="true" height="60" id="textarea1" verticalScrollPolicy="off" horizontalScrollPolicy="off" editable="false">
  			  	  <mx:htmlText><![CDATA[Instructions<br>  1.  Pairwise combinations of samples to be hybridized to microarrays are defined on this page. These combinations are designated by dragging<br>       a Cy3 sample to an appropriate cell in the green column and the corresponding Cy5 sample to an adjacent cell in the red column.<br>  2.  After defining the microarray hybrid pairs on this screen, click the 'Next' button at the bottom of the page to proceed.]]></mx:htmlText>
			  </mx:TextArea>
		</mx:VBox>
			   	
	    <mx:HDividedBox height="100%" width="100%" paddingTop="2">
	        <mx:VBox height="100%" verticalGap="2"   width="135" borderStyle="none" id="vbox1">
	            <mx:Label text="Cy3 Samples (green)" paddingTop="2" id="label3"/>
	        	<mx:DataGrid
	        		 height="100%" width="100%"  showHeaders="false"
	        		 dataProvider="{cy3Samples}" labelField="@name" 
	        		 dragEnabled="true" id="cy3SampleDragGrid"  >
					<mx:columns>
						<mx:DataGridColumn headerText = "Samples"  width="105" dataField="@name">
			                <mx:itemRenderer>
			                    <mx:Component >
			                          <mx:Label text="{data.@name}" fontWeight="{!data.hasOwnProperty('@label') || data.@label == '' ? 'normal' : 'bold'}" color="{!data.hasOwnProperty('@label') || data.@label == ''? 0x000000 : (data.@label == 'cy3' ? 0x008000: 0xff0000)}"/>
			                    </mx:Component>
			                </mx:itemRenderer>
			            </mx:DataGridColumn> 
						<mx:DataGridColumn id="channelCountCol" width="20"  labelFunction="getChannelCountLabelFunction" headerText="">
			                <mx:itemRenderer>
			                    <mx:Component >
			                        <mx:HBox  horizontalGap="0" >
			                          <mx:Image source="{data.@channel1Count > 0 || data.@channel2Count > 0 ? parentApplication.iconBlackCheck : ''}">
			                    	 </mx:Image> 
			                        </mx:HBox>
			                    </mx:Component>
			                </mx:itemRenderer>
			            </mx:DataGridColumn> 
					</mx:columns>
								        				        		
	         	</mx:DataGrid>
	            <mx:Label text="Cy5 Samples (red)" paddingTop="4" id="label4"/>
	        	<mx:DataGrid
	        		 height="100%" width="100%"  showHeaders="false"
	        		 dataProvider="{cy5Samples}" labelField="@name" 
	        		 dragEnabled="true" id="cy5SampleDragGrid"  >
					<mx:columns>
						<mx:DataGridColumn headerText = "Samples"  width="80" dataField="@name">
			                <mx:itemRenderer>
			                    <mx:Component >
			                          <mx:Label text="{data.@name}" fontWeight="{!data.hasOwnProperty('@label') || data.@label == '' ? 'normal' : 'bold'}" color="{!data.hasOwnProperty('@label') || data.@label == ''? 0x000000 : (data.@label == 'cy3' ? 0x008000: 0xff0000)}"/>
			                    </mx:Component>
			                </mx:itemRenderer>
			            </mx:DataGridColumn> 
						<mx:DataGridColumn id="channelCountCol1" width="20"  labelFunction="getChannelCountLabelFunction" headerText="">
			                <mx:itemRenderer>
			                    <mx:Component >
			                        <mx:HBox  horizontalGap="0" >
			                          <mx:Image source="{data.@channel1Count > 0 || data.@channel2Count > 0 ? parentApplication.iconBlackCheck : ''}">
			                    	 </mx:Image> 
			                        </mx:HBox>
			                    </mx:Component>
			                </mx:itemRenderer>
			            </mx:DataGridColumn> 
					</mx:columns>
								        				        		
	         	</mx:DataGrid>
	        </mx:VBox>
			<mx:VBox  id="hybsContainer" 
				width="100%" height="100%" 
				borderStyle="none" verticalGap="2">
						<mx:HBox id="buttonContainer" horizontalGap="0" verticalAlign="middle">
							<mx:Label text="Hybridizations"/>
							<mx:LinkButton textDecoration="underline" label="Add hyb" click="addHyb();checkHybsCompleteness()" icon="@Embed(source='../../assets/add.png')" id="addHybButton" toolTip="Add hyb" paddingLeft="15"/>
							<mx:LinkButton textDecoration="underline" label="Copy hyb" click="copyHyb();checkHybsCompleteness()" icon="@Embed('../../assets/table_multiple.png')" id="copyHybButton"  toolTip="Copy hyb"/>
							<mx:LinkButton textDecoration="underline" label="Delete hyb" click="deleteHyb();checkHybsCompleteness()" icon="@Embed(source='../../assets/delete.png')" id="deleteHybButton" toolTip="Delete hyb(s)"/>
							<mx:LinkButton textDecoration="underline" label="Clear all" click="promptToClearAllHybs()" icon="@Embed('../../assets/folder_delete.png')" id="clearHybsButton"  toolTip="Clear all hybs"/>
						</mx:HBox>
							
				<util:DataGridAlternatingGroup height="100%" id="hybsGrid"   
					editable="true" dataProvider="{parentDocument.hybs}" 
					allowMultipleSelection="true" 
					dropEnabled="true" 
					dragDrop="onDragDrop(event)" 
					itemFocusOut="checkHybsCompleteness()"  
					width="100%" sortableColumns="false"
					horizontalScrollPolicy="auto">
					<util:columns>
					    <mx:DataGridColumn id="hybRowNumberCol" editable="false" visible="{currentState == 'HybsState'}" headerText=""   resizable="false" width="25" labelFunction="parentDocument.getHybsGridRowNumber"/>
  					    <mx:DataGridColumn id="hybNumberCol"  headerText="ID" visible="{currentState == 'HybsAdminState' || currentState == 'HybsEditState'}" width="60"   dataField="@number"  editable="false"/>
			            <mx:DataGridColumn width="50" id="slideNumberColumn" headerText="Slide">
			                <mx:itemRenderer>
			                    <mx:Component >
			                        <mx:HBox  horizontalGap="0" >
			                          <mx:Image id="experimentImage"  source="{data.@showSlideIcon == 'Y' ? parentApplication.iconExperiment : ''}">
			                    	 </mx:Image> 
			                          <mx:Label  text="{data.@showSlideIcon == 'Y' ? data.@slideNumber : ''}">
			                    	 </mx:Label>  
			                        </mx:HBox>
			                    </mx:Component>
			                </mx:itemRenderer>
			            </mx:DataGridColumn> 
			            <mx:DataGridColumn id="arrayCoordinateColumn" headerText="Coord" dataField="@arrayCoordinate" width="45"/>
					    <mx:DataGridColumn headerText="Cy3 Sample (green)"  width="100"  
					    	labelFunction="parentDocument.getSampleChannel1Name" 
                            editorDataField="text" sortable="false" editable="true" rendererIsEditor="false" 
                            itemEditor="views.renderers.TextInputSampleChannel1"
                            itemRenderer="views.renderers.LabelSampleChannel1" >
                            <mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    	<mx:Label text="Cy3 Sample"/>
							    	<mx:Label text="(green)"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
					    </mx:DataGridColumn>
  					    <mx:DataGridColumn headerText="ID" visible="{currentState == 'HybsAdminState' || currentState == 'HybsEditState'}" width="60"  
  					    	labelFunction="parentDocument.getSampleChannel1Number" editable="false"/>
					    <mx:DataGridColumn id="channel2SampleColumn" headerText="Cy5 Sample (red)"  width="100"  
					    	labelFunction="parentDocument.getSampleChannel2Name" 
                            editorDataField="text" sortable="false" editable="true" rendererIsEditor="false" 
                            itemEditor="views.renderers.TextInputSampleChannel2" 
                            itemRenderer="views.renderers.LabelSampleChannel2" > 
                            <mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    	<mx:Label text="Cy5 Sample"/>
							    	<mx:Label text="(red)"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>								    	
					    </mx:DataGridColumn> 
  					    <mx:DataGridColumn headerText="ID" visible="{currentState == 'HybsAdminState' || currentState == 'HybsEditState'}" width="60"  labelFunction="parentDocument.getSampleChannel2Number" editable="false"/>
                            
                        <mx:DataGridColumn id="slideDesignColumn" visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showHybFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"  headerText="Slide"  width="280" dataField="@idSlideDesign" 						             						             
			                editorDataField="value" sortable="false"  editable="true" rendererIsEditor="false" 
 	                        itemEditor="{views.renderers.ComboBoxSlideDesign.create('@idSlideDesign', '@idSlideDesign', '@name' ,'@canChangeSlideDesign')}"			                
    	                    itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SlideDesign').DictionaryEntry, '@display', '@value', '@idSlideDesign', true)}"/>                 			                
			             <mx:DataGridColumn visible="{!parentApplication.isInternalExperimentSubmission || showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showHybFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"  headerText="Slide Source"  width="70" dataField="@codeSlideSource" 
			                editorDataField="value" sortable="false" editable="true"  rendererIsEditor="false" 
 	                        itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SlideSource').DictionaryEntry, '@display', '@value', '@codeSlideSource', true)}"
 	                        itemEditor="{ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SlideSource').DictionaryEntry, '@display', '@value', '@codeSlideSource', '@canChangeSlideSource', true)}"/>			                
			                
					<mx:DataGridColumn id="labelCol1"  visible="false"  headerText="Channel1 Labeling protocol"  width="80" dataField="@idLabelingProtocolChannel1"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"
  	                  	       itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingProtocol').DictionaryEntry, '@display', '@value', '@idLabelingProtocolChannel1')}"
	    	                   itemEditor="{ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingProtocol').DictionaryEntry, '@display', '@value', '@idLabelingProtocolChannel1', '', false, true)}">
						<mx:headerRenderer >
					 	<mx:Component>
							<mx:VBox verticalGap="0"  horizontalScrollPolicy="off"   horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy3 Label"/>
							    <mx:Label text="Protocol"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol2"  visible="false" headerText="Channel1 Labeling yield" width="80" editable="{parentApplication.hasPermission('canWriteAnyObject')}" dataField="@labelingYieldChannel1">
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy3 Label"/>
							    <mx:Label text="Conc."/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol3"  visible="false" headerText="Channel1 Labeling Reaction size" width="80" dataField="@codeLabelingReactionSizeChannel1"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
  	                  	       itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingReactionSize').DictionaryEntry, '@display', '@value', '@codeLabelingReactionSizeChannel1')}"
	    	                   itemEditor="{ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingReactionSize').DictionaryEntry, '@display', '@value',  '@codeLabelingReactionSizeChannel1', '', false, true)}">
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy3 Label"/>
							    <mx:Label text="Reaction size"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol4"  visible="false" headerText="Channel1 Labeling # Reactions" editable="{parentApplication.hasPermission('canWriteAnyObject')}" width="80" dataField="@numberOfReactionsChannel1">
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy3 Label"/>
							    <mx:Label text="# reactions"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn  id="labelCol5"   visible="false" headerText="Channel1 Labeling Status" width="80" dataField="@labelingStatusChannel1"
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"  itemRenderer="mx.controls.Label" 
	    	           itemEditor="{ComboBoxWorkflowStatus.create('@labelingStatusChannel1')}">
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy3 Label"/>
							    <mx:Label text="Status"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol6"   visible="false" headerText="Channel2 Labeling protocol"  width="80" dataField="@idLabelingProtocolChannel2"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
  	                  	       itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingProtocol').DictionaryEntry, '@display', '@value', '@idLabelingProtocolChannel2')}"
	    	                   itemEditor="{ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingProtocol').DictionaryEntry, '@display', '@value', '@idLabelingProtocolChannel2', '', false, true)}">
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy5 Label"/>
							    <mx:Label text="Protocol"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol7"   visible="false" headerText="Channel2 Labeling yield" editable="{parentApplication.hasPermission('canWriteAnyObject')}" width="80" dataField="@labelingYieldChannel2">
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy5 Label"/>
							    <mx:Label text="Conc."/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol8"  visible="false" headerText="Channel2 Labeling Reaction size" width="80" dataField="@codeLabelingReactionSizeChannel2"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"  itemRenderer="mx.controls.Label" 
	    	                   itemEditor="{ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingReactionSize').DictionaryEntry, '@display', '@value', '@codeLabelingReactionSizeChannel2', '', false, true)}">
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy5 Label"/>
							    <mx:Label text="Reaction size"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol9"  visible="false"  headerText="Channel2 Labeling # Reactions" editable="{parentApplication.hasPermission('canWriteAnyObject')}" width="80" dataField="@numberOfReactionsChannel2">
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy5 Label"/>
							    <mx:Label text="# reactions"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn id="labelCol10"   visible="false" headerText="Channel2 Labeling Status" width="80" dataField="@labelingStatusChannel2"
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemRenderer="mx.controls.Label" 
	    	           itemEditor="{ComboBoxWorkflowStatus.create('@labelingStatusChannel2')}">
						<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Cy5 Label"/>
							    <mx:Label text="Status"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>



					<mx:DataGridColumn id="hybCol1" visible="false" headerText="Hyb Slide barcode" editable="{parentApplication.hasPermission('canWriteAnyObject')}" width="70" dataField="@slideBarcode"/>
					<mx:DataGridColumn id="hybCol2" visible="false" headerText="Coordinate" editable="{parentApplication.hasPermission('canWriteAnyObject')}" width="70" dataField="@arrayCoordinateName"/>
					<mx:DataGridColumn id="hybCol3" visible="false" headerText="Hyb Protocol" width="70"  dataField="@idHybProtocol"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
  	                  	       itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.HybProtocol').DictionaryEntry, '@display', '@value', '@idHybProtocol')}"
   	    	                   itemEditor="{ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.HybProtocol').DictionaryEntry, '@display', '@value', '@idHybProtocol', '', false, true)}"/>        	                   					
					<mx:DataGridColumn id="hybCol4" visible="false" headerText="Hyb Status" width="90" dataField="@hybStatus"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" itemRenderer="mx.controls.Label" 
   	    	                   itemEditor="{ComboBoxWorkflowStatus.create('@hybStatus')}"/>
					


					<mx:DataGridColumn id="extCol1" visible="false" headerText="Scan Protocol" width="70"  dataField="@idScanProtocol"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"  
  	                  	       itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ScanProtocol').DictionaryEntry, '@display', '@value', '@idScanProtocol')}"
   	    	                   itemEditor="{ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ScanProtocol').DictionaryEntry, '@display', '@value', '@idScanProtocol', '', false, true)}"/>        	                   					
					<mx:DataGridColumn id="extCol2" visible="false" headerText="F/E Protocol" width="70"  dataField="@idFeatureExtractionProtocol"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"  
  	                  	       itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.FeatureExtractionProtocol').DictionaryEntry, '@display', '@value', '@idFeatureExtractionProtocol')}"
   	    	                   itemEditor="{ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.FeatureExtractionProtocol').DictionaryEntry, '@display', '@value', '@idFeatureExtractionProtocol', '', false, true)}"/>        	                   					
					<mx:DataGridColumn id="extCol3" visible="false" headerText="Ext Status" width="90" dataField="@extractionStatus"
        	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"  
  	                  	       itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.HybProtocol').DictionaryEntry, '@display', '@value', '@idHybProtocol')}"
   	    	                   itemEditor="{ComboBoxWorkflowStatus.create('@extractionStatus')}"/>
					


                            
                            
                            
                            
                            
					</util:columns>
				</util:DataGridAlternatingGroup>
				
			</mx:VBox>
	    	
	    </mx:HDividedBox>

    </mx:VBox>
    
    <mx:states>
    	<mx:State name="HybsState">
    		<mx:AddChild relativeTo="{hybsContainer}" position="lastChild">
    			<mx:HBox  width="100%"  horizontalGap="0"  horizontalAlign="right" label="Show Cy5 Labeling data" paddingBottom="2" verticalAlign="middle" paddingLeft="10" paddingTop="2" id="workflowCheckBoxContainer">
    			 <mx:CheckBox id="showCy3LabelingFieldsCheckBox" label="Show Cy3 Labeling columns" click="showCy3LabelCols(showCy3LabelingFieldsCheckBox.selected)" paddingLeft="0" paddingBottom="0" paddingRight="0"/>
    			 <mx:CheckBox id="showCy5LabelingFieldsCheckBox" label="Cy5 Labeling" click="showCy5LabelCols(showCy5LabelingFieldsCheckBox.selected)" paddingLeft="0" paddingRight="0"/>
    				<mx:CheckBox id="showHybFieldsCheckBox" label="Hyb" click="showHybWorkflowCols(showHybFieldsCheckBox.selected)" paddingLeft="0" paddingRight="0"/>
    			    <mx:CheckBox id="showExtFieldsCheckBox" label="Scan/FE" click="showExtWorkflowCols(showExtFieldsCheckBox.selected)" paddingLeft="0" paddingRight="0"/>
    			   </mx:HBox>
    		</mx:AddChild>
    		<mx:SetStyle target="{label3}" name="paddingTop" value="4"/>
    	</mx:State>
    	<mx:State name="HybsEditState" basedOn="HybsState">
    		<mx:RemoveChild target="{buttonContainer}"/>
    		<mx:RemoveChild target="{vbox1}"/>
    		<mx:SetStyle target="{hybsContainer}" name="borderStyle" value="none"/>
    		<mx:RemoveChild target="{textarea1}"/>
    		<mx:RemoveChild target="{vbox2}"/>
    	</mx:State>
    	<mx:State name="HybsAdminState" basedOn="HybsState">
    		<mx:RemoveChild target="{addHybButton}"/>
    		<mx:RemoveChild target="{clearHybsButton}"/>
    		<mx:SetStyle target="{buttonContainer}" name="horizontalGap"/>
    		<mx:SetStyle target="{workflowCheckBoxContainer}" name="paddingLeft" value="10"/>
    		<mx:SetStyle target="{label3}" name="paddingTop" value="4"/>
    		<mx:SetProperty target="{label3}" name="text" value="Samples"/>
    		<mx:RemoveChild target="{cy5SampleDragGrid}"/>
    		<mx:RemoveChild target="{label4}"/>
    		<mx:RemoveChild target="{textarea1}"/>
    		<mx:RemoveChild target="{vbox2}"/>
    	</mx:State>
    	<mx:State name="HybsOneColorState">
    		<mx:RemoveChild target="{label4}"/>
    		<mx:RemoveChild target="{cy5SampleDragGrid}"/>
    		<mx:SetProperty target="{textarea1}" name="htmlText">
    			<mx:value><![CDATA[Instructions<br>  1.  The order in which samples are hybridized to microarrays is defined in the “Cy3 Sample” column.  This order can be modified if desired <br>       by drag-and-drop of samples to the preferred position.<br>  2.  After accepting the information on this page, click the “Next” button at the bottom of the page to proceed.]]></mx:value>
    		</mx:SetProperty>
    	</mx:State>
    	
    </mx:states>

</mx:Canvas>
