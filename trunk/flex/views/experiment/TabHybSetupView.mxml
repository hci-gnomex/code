<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"  show="init()"
	label="Hyb setup" width="100%" height="100%" enabled="false">
	<mx:states>
		<mx:State name="SetupState">
		</mx:State>
		<mx:State name="EditState" basedOn="SetupState">
		</mx:State>
	</mx:states>
<mx:Script> 
	<![CDATA[
		import mx.collections.XMLListCollection;
		
		public var validNumberOfHybs:Boolean = true;
		private var slideSourcesSorted:Boolean = false;
		
		private function init():void {
			if (!slideSourcesSorted) {
				slideSources.refresh();
				slideSourcesSorted = true;
			}
		} 
		
		public function unselectSlideSources():void {
			for (var x:int = 0; x < slideSourceCheckbox.length; x++) {
				slideSourceCheckbox[x].selected = false;
			}
		}
		
		public function selectDefaultSlideSource():void {
			for (var x:int = 0; x < slideSourceCheckbox.length; x++) {
				if (slideSources.getItemAt(x).@codeSlideSource == 'CORE') {
					slideSourceCheckbox[x].selected = true;
					break;
				}
			}
			
		}
		
		public function getCheckedCodeSlideSource():String {
			var codeSlideSource:String = "";
			for (var x:int = 0; x < slideSourceCheckbox.length; x++) {
				if (slideSourceCheckbox[x].selected == true) {
					codeSlideSource = slideSources.getItemAt(x).@codeSlideSource;
					break;
				}
				
			}
			return codeSlideSource;
		}
		
		private function toggleCheckedCodeSlideSource(codeSlideSource:String):void {
			for (var x:int = 0; x < slideSourceCheckbox.length; x++) {
				if (slideSources.getItemAt(x).@codeSlideSource == codeSlideSource) {
					continue;
				}
				slideSourceCheckbox[x].selected = false;
			}
		}
		
		private function validateSlideUse():void {
			if (getCheckedCodeSlideSource() == '') {
				this.slideUseBox.styleName = "requiredBox";
			} else {
				this.slideUseBox.styleName = "normalBox";
			}
		}
		
		private function propagateCheckCodeSlideSource():void {
			for each (var hyb:Object in parentDocument.hybs) {
				hyb.@codeSlideSource = this.getCheckedCodeSlideSource();
			}
			callLater(parentDocument.hybsView.checkHybsCompleteness);
		}
				
		public function checkHybSetupCompleteness():void {
			if (parentDocument == null) {
				return;
			}
			if (!parentDocument.isMicroarrayState()) {
				return;
			}
			
		 	var isComplete:Boolean = false;
			parentDocument.userWarningsHybSetup = "";
			this.checkForSampleTypeCompatibility();
			
        	if (this.numberOfHybs.text != null && this.numberOfHybs.text != '' &&
        	    this.slideProductCombo.selectedItem != null && this.slideProductCombo.selectedItem.@idSlideProduct != '' &&
        	    this.getCheckedCodeSlideSource() != '' && parentDocument.isSampleTypeCompatibile() ) {
        	    	
        		isComplete = true;
        	    	
        	} else if (parentDocument.isEditState()) {
        		isComplete = true;
        	} else {
        		isComplete = false;
        	}
        	
        	parentDocument.hybsView.enabled = isComplete && validNumberOfHybs;
        	
        	parentDocument.enableNextButtons();
        }
       
        private function postHybSetupCompleteness(isComplete:Boolean):void { 

        	if (!isComplete) {
	        	if (parentDocument.theTab.contains(this)) {
		        	this.enabled = false;
	        	} 

	        	if (parentDocument.theTab.contains(parentDocument.hybsView)) {
		        	parentDocument.hybsView.enabled = false;
	        	} 

	        	parentDocument.confirmView.enabled = false;
    		} else {
    			parentDocument.hybsView.checkHybsCompleteness();
    		}        	
        }        
        
        public function checkForSampleTypeCompatibility():void {
        	if (!this.parentDocument.isSampleTypeCompatibile()) {
        		if (parentDocument.isEditState()) {
					var sampleType:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SampleType', parentDocument.request.@idSampleTypeDefault);
					var sampleTypeName:String = sampleType.@display.toString();
        			// This warning message is bothersome when old requests were
        			// submitted with incompatible sample type for the microarray
        			// application.  Don't show a warning message.
        			
        		} else {
	        		this.parentDocument.userWarningsHybSetup += 'Sample type ' + parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@display + 
	        		' cannot be used for ' + parentDocument.applicationName + 
	        		' experiments.  Please change the sample type or microarray application.';
	        		this.slideProductCombo.selectedIndex = 0;
        			
        		} 

        	} 
        }

        public function checkForSlideProductWarning():void {
        	if (currentState == "EditState") {
        		return;
        	}
        	
        	if (this.slideProductCombo.dataProvider == null) {
        		return;
        	}
        	slideProductCombo.dataProvider.refresh();
        	
        	// For submit requests, just show a blank slide product if the
        	// user hasn't narrowed it down to a particular microarray app
    		if (this.microarrayAppRadioGroup.selectedValue == null || this.microarrayAppRadioGroup.selectedValue == '') {
        		this.slideProductCombo.selectedIndex = 0;
        		slideProductStack.selectedIndex = 2;
        		return;
        	}
        	
        	
        	if (this.slideProductCombo.dataProvider.length == 1) {
        		slideProductStack.selectedIndex = 1;
        	} else {
        		slideProductStack.selectedIndex = 0;
        	}
        }  
         
        public function initializeSlideProductCombo():void {
        	if (parentDocument == null) {
        		return;
        	}
        	parentDocument.filteredSlideProductList.refresh();

			slideProductCombo.selectedIndex = -1;
			for each(var slideProduct:Object in slideProductCombo.dataProvider) {
				if (slideProduct.@idSlideProduct == parentDocument.request.@idSlideProduct) {
					slideProductCombo.selectedItem = slideProduct;
					break;
				}
			}
			checkForSlideProductWarning();
		}
		private function clearHybSlideDesigns():void {
			if (slideProductCombo.selectedItem == null ||
			    slideProductCombo.selectedItem.@idSlideProduct == '' ||
			    parentDocument.request.@idSlideProduct == '' ||
				parentDocument.request.@idSlideProduct != slideProductCombo.selectedItem.@idSlideProduct) {
			
				for each (var hyb:Object in parentDocument.hybs) {
					hyb.@idSlideDesign = '';
				}
				parentDocument.hybsView.checkHybsCompleteness();
			}
			
		}
		private function initializeApplicationName():void {
			if (this.microarrayAppRadioGroup.selectedValue != null && this.microarrayAppRadioGroup.selectedValue != '') {
				var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', this.microarrayAppRadioGroup.selectedValue);
				if (application != null && application is XMLList) {
					this.parentDocument.applicationName = application[0].@display;
				} else if (application != null && application is XML) {
					this.parentDocument.applicationName = application.@display;
				}
			}			
		}
		
		
		        
        private function handleInvalidNumberOfHybs(eventObject:Event):void {
        	this.validNumberOfHybs = false;
        	this.checkHybSetupCompleteness();
        }
        private function handleValidNumberOfHybs(eventObject:Event):void {
        	this.validNumberOfHybs = true;
        	this.checkHybSetupCompleteness();
        }
        
        private function pickMicroarrayApp():void {
        	if (this.microarrayAppRadioGroup.selectedValue != null && this.microarrayAppRadioGroup.selectedValue != '') {
        		this.microarrayAppBox.styleName = "normalBox";
        	} else {
        		this.microarrayAppBox.styleName = "requiredBox";
        	}
        	initializeApplicationName();
			parentDocument.filteredSlideProductList.refresh();
			slideProductCombo.selectedIndex = -1;
			clearHybSlideDesigns();
			checkHybSetupCompleteness();
			checkForSlideProductWarning();
        }
		
		private function pickSlideProduct(slideProductCombo:mx.controls.ComboBox):void {
			parentDocument.hybsView.initializeHybsGrid();
			clearHybSlideDesigns();
			parentDocument.initializeSlideDesigns(slideProductCombo);
			parentDocument.hybsView.propagateSlideDesign(slideProductCombo);
			parentDocument.hybsView.assignSlideNumbers(slideProductCombo);
			checkHybSetupCompleteness();
			initializeApplicationName();
		}
		
		private function pickSlideSource(codeSlideSource:String):void {
			this.toggleCheckedCodeSlideSource(codeSlideSource);
			parentDocument.hybsView.initializeHybsGrid();
			clearHybSlideDesigns();
			parentDocument.initializeSlideDesigns(slideProductCombo);
			propagateCheckCodeSlideSource();
			checkHybSetupCompleteness();			
		}
		
		private function sortSlideSource(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var sortOrder1:int = obj1.hasOwnProperty("@sortOrder") ? obj1.@sortOrder : -1;
				var sortOrder2:int = obj2.hasOwnProperty("@sortOrder") ? obj2.@sortOrder : -1;

				var display1:String = obj1.@display;
				var display2:String = obj2.@display;
				
				if (sortOrder1 == -1 && sortOrder2 == -1) {
					if (display1 < display2) {
						return -1;
					} else if (display1 > display2) {
						return 1;
					} else {
						return 0;
					}
				} else if (sortOrder1 == -1) {
					return -1;
				} else if (sortOrder2 == -1) {
					return 1;
				} else {
					
				}
			
				if (sortOrder1 < sortOrder2) {
					return -1;
				} else if (sortOrder1 > sortOrder2) {
					return 1;
				} else {
					return 0;
				}
			}
		}
		

      
	]]>
</mx:Script>
	
	<mx:XMLListCollection id="slideSources" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SlideSource').DictionaryEntry.(@value != '' &amp;&amp; @isActive != 'N')}" sort="{slideSourceSort}"/>
	<mx:Sort id="slideSourceSort" compareFunction="sortSlideSource"/>
    <mx:NumberValidator id="numberOfHybsValidator" source="{numberOfHybs}" property="text" 
        required="true" allowNegative="false" domain="int" maxValue="100" />
    <mx:NumberValidator id="slideOrganismValidator"
        source="{this.organismCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" />       
    <mx:NumberValidator id="slideProductValidator"
        source="{this.slideProductCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" />         
    

	<mx:VBox width="100%" height="100%" verticalGap="10" paddingTop="2">
		<mx:HBox width="100%" horizontalGap="0">
			<mx:Label text="(1) Select an organism." width="250" />
			<mx:ComboBox labelField="@display" width="250" id="organismCombo" close="parentDocument.filteredSlideProductList.refresh();slideProductCombo.selectedIndex = -1;clearHybSlideDesigns();checkHybSetupCompleteness();checkForSlideProductWarning()">							
				<mx:change>parentDocument.filteredSlideProductList.refresh();slideProductCombo.selectedIndex = -1;clearHybSlideDesigns();checkHybSetupCompleteness();checkForSlideProductWarning()</mx:change>
				<mx:dataProvider>{parentApplication.organismList}</mx:dataProvider>
			</mx:ComboBox>
		</mx:HBox>
		<mx:HBox width="100%" horizontalGap="0">
			<mx:Label text="(2) Select the microarray application." width="250" />
			<mx:VBox  verticalGap="0" id="microarrayAppBox" styleName="{currentState == 'EditState' ? 'normalBox' : 'requiredBox'}">
	            <mx:RadioButtonGroup id="microarrayAppRadioGroup"/>
				<mx:Repeater id="microarrayAppRepeater" dataProvider="{parentDocument.filteredMicroarrayAppList}"> 
	    			<mx:RadioButton  label="{microarrayAppRepeater.currentItem.@display}" 
	    				paddingLeft="0" paddingRight="1" paddingTop="0" paddingBottom="1"
	    				value="{microarrayAppRepeater.currentItem.@value}"
	    	 	    	groupName="microarrayAppRadioGroup"
	    				click="{pickMicroarrayApp()}" id="radiobutton1"/>
  				</mx:Repeater>			
  			</mx:VBox>
		</mx:HBox>
		<mx:HBox width="100%" horizontalGap="0">
			<mx:Label text="(3) Select one of the following." width="250" />
			<mx:RadioButtonGroup id="customVsCatalogRadioGroup"/>
			<mx:RadioButton label="Catalog microarray" groupName="customVsCatalogRadioGroup" id="isCatalogRadio" selected="true" click="parentDocument.filteredSlideProductList.refresh();slideProductCombo.selectedIndex = -1;clearHybSlideDesigns();checkHybSetupCompleteness();checkForSlideProductWarning();callLater(this.checkForSampleTypeCompatibility)">
				<mx:change>parentDocument.filteredSlideProductList.refresh();slideProductCombo.selectedIndex = -1;checkHybSetupCompleteness()</mx:change>
			</mx:RadioButton>
			<mx:RadioButton label="Custom microarray" groupName="customVsCatalogRadioGroup" id="isCustomRadio" click="parentDocument.filteredSlideProductList.refresh();slideProductCombo.selectedIndex = -1;clearHybSlideDesigns();checkHybSetupCompleteness();checkForSlideProductWarning();callLater(this.checkForSampleTypeCompatibility)" paddingLeft="12">
				<mx:change>parentDocument.filteredSlideProductList.refresh();slideProductCombo.selectedIndex = -1;checkHybSetupCompleteness()</mx:change>
			</mx:RadioButton>
		</mx:HBox>
		<mx:HBox width="100%" horizontalGap="0">
			<mx:Text width="250">
				<mx:htmlText><![CDATA[(4) Select the microarray slide or slide set <br>to be used  for these hybridizations.]]></mx:htmlText>
			</mx:Text>
			<mx:ViewStack id="slideProductStack" width="100%" height="100%">
			    <mx:HBox>
					<mx:ComboBox labelField="@display" width="420" id="slideProductCombo"  change="{pickSlideProduct(slideProductCombo)}" close="{pickSlideProduct(slideProductCombo)}">				
						<mx:dataProvider>{parentDocument.filteredSlideProductList}</mx:dataProvider>
					</mx:ComboBox>
			    </mx:HBox>
			    <mx:HBox width="100%"  borderStyle="none" verticalAlign="middle">
					<mx:Text  styleName="warningLabelMinor" width="100%" text="{'No ' + (isCatalogRadio.selected ? 'catalog ': 'custom ') + parentDocument.requestCategoryName + ' ' + organismCombo.selectedItem.@display + ' ' + parentDocument.applicationName + ' slides are listed.  Please contact Brian Dalley about slide stock.'}">								
					</mx:Text>						    	
			    </mx:HBox>
				<mx:HBox width="100%"  borderStyle="none" verticalAlign="middle">
					<mx:Text  styleName="warningLabelMinor" width="100%" text="">								
					</mx:Text>						    	
			    </mx:HBox>
				
			</mx:ViewStack>
		</mx:HBox>
		<mx:HBox width="100%" horizontalGap="0" id="numberOfHybsContainer">
			<mx:Text width="250" >
				<mx:htmlText><![CDATA[(5) How many microarrays will be used for this experiment request?]]></mx:htmlText>
			</mx:Text>
			<mx:TextInput width="40" id="numberOfHybs"  
				valid="handleValidNumberOfHybs(event)" invalid="handleInvalidNumberOfHybs(event)">
				<mx:focusOut>clearHybSlideDesigns();parentDocument.initializeSlideDesigns(slideProductCombo);checkHybSetupCompleteness();parentDocument.hybsView.initializeHybsGrid();</mx:focusOut>
				
			</mx:TextInput>
		</mx:HBox>
		<mx:HBox width="100%" horizontalGap="0" id="slideSourceContainer">
			<mx:Label text="(6) Where will the microarrays come from?" width="250" />
			<mx:VBox verticalGap="0" paddingLeft="2" paddingRight="2"  id="slideUseBox" styleName="requiredBox">
				<mx:Repeater id="slideSourceRepeater" dataProvider="{slideSources}">
					<mx:CheckBox label="{slideSourceRepeater.currentItem.@slideSource}"  id="slideSourceCheckbox"   change="{validateSlideUse()}" click="{pickSlideSource(event.currentTarget.getRepeaterItem().@codeSlideSource)}" paddingTop="0" paddingBottom="1"/>
				</mx:Repeater>
			</mx:VBox>
		</mx:HBox>
		
	</mx:VBox>
</mx:Canvas>
