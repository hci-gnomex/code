<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	label="Hyb setup" width="100%" height="100%" enabled="false">
	<mx:states>
		<mx:State name="SetupState">
		</mx:State>
		<mx:State name="EditState" basedOn="SetupState">
			<mx:SetProperty target="{textarea1}" name="htmlText">
				<mx:value><![CDATA[Instructions<br>  If the dropdowns are enabled, you can<br>  change the selection in orderto specify a<br>  different microarray for this experiment<br>  request.The change will be reflected<br>  in the next tab.]]></mx:value>
			</mx:SetProperty>
			<mx:SetProperty target="{textarea1}"  name="width" value="250"/>
			<mx:SetProperty target="{textarea1}"  name="height" value="100"/>
		</mx:State>
	</mx:states>
<mx:Script> 
	<![CDATA[
		import mx.collections.XMLListCollection;
		
		public var validNumberOfHybs:Boolean = true;
		
		private var arrayCoordinates:XMLListCollection = null;

		public function getCheckedCodeSlideSource():String {
			if (this.coreSlideSourceCheckbox.selected == true) {
				return "CORE";
			} else if (this.clientSlideSourceCheckbox.selected == true ) {
				return "CLIENT";
			} else if (this.stripSlideSourceCheckbox.selected== true) {
				return "REUSE";
			} else {
				return '';
			}
		}
		private function toggleCheckedCodeSlideSource(checkBoxNumber:int):void {
			if (checkBoxNumber == 1) {
				this.clientSlideSourceCheckbox.selected = false;
				this.stripSlideSourceCheckbox.selected  = false;
			} else if (checkBoxNumber == 2) {
				this.coreSlideSourceCheckbox.selected = false;
				this.stripSlideSourceCheckbox.selected  = false;
			} else if (checkBoxNumber == 3) {
				this.coreSlideSourceCheckbox.selected  = false;
				this.clientSlideSourceCheckbox.selected = false;
			} 
		}
		
		private function validateSlideUse():void {
			if (getCheckedCodeSlideSource() == '') {
				this.slideUseBox.styleName = "requiredBox";
			} else {
				this.slideUseBox.styleName = "normalBox";
			}
		}
		
		private function propagateCheckCodeSlideSource():void {
			for each (var hyb:Object in parentDocument.hybs) {
				hyb.@codeSlideSource = this.getCheckedCodeSlideSource();
			}
			callLater(parentDocument.hybsView.checkHybsCompleteness);
		}
		
		private function propagateSlideDesign():void {
			for each (var hyb:Object in parentDocument.hybs) {
				hyb.@idSideDesign = this.slideProductCombo.selectedItem.@idSlideDesign;
			}
			callLater(parentDocument.hybsView.checkHybsCompleteness);
		}
		
		public function checkHybSetupCompleteness():void {
			if (parentDocument == null) {
				return;
			}
			if (!parentDocument.isMicroarrayState()) {
				return;
			}
			
		 	var isComplete:Boolean = false;
			parentDocument.userWarningsHybSetup = "";
			this.checkForSampleTypeCompatibility();
			
        	if (this.numberOfHybs.text != null && this.numberOfHybs.text != '' &&
        	    this.slideProductCombo.selectedItem != null && this.slideProductCombo.selectedItem.@idSlideProduct != '' &&
        	    this.getCheckedCodeSlideSource() != '' && parentDocument.isSampleTypeCompatibile() ) {
        	    	
        		isComplete = true;
        	    	
        	} else if (parentDocument.request.@idRequest != '0') {
        		isComplete = true;
        	} else {
        		isComplete = false;
        	}
        	
        	parentDocument.hybsView.enabled = isComplete && validNumberOfHybs;
        	
        	parentDocument.enableNextButtons();
        }
       
        private function postHybSetupCompleteness(isComplete:Boolean):void { 

        	if (!isComplete) {
	        	if (parentDocument.theTab.contains(this)) {
		        	this.enabled = false;
	        	} 

	        	if (parentDocument.theTab.contains(parentDocument.hybsView)) {
		        	parentDocument.hybsView.enabled = false;
	        	} 

	        	parentDocument.confirmView.enabled = false;
    		} else {
    			parentDocument.hybsView.checkHybsCompleteness();
    		}        	
        }        
        
        public function checkForSampleTypeCompatibility():void {
        	if (!this.parentDocument.isSampleTypeCompatibile()) {
        		if (parentDocument.isEditState()) {
					var sampleType:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SampleType', parentDocument.request.@idSampleTypeDefault);
					var sampleTypeName:String = sampleType.@display.toString();
        			mx.controls.Alert.show( 'Sample type ' + sampleTypeName + 
	        		  ' cannot be used for ' + parentDocument.applicationName + 
	        		  ' experiments.  Please change the microarray application.',
	        		  'Warning');
        			
        		} else {
	        		this.parentDocument.userWarningsHybSetup += 'Sample type ' + parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@display + 
	        		' cannot be used for ' + parentDocument.applicationName + 
	        		' experiments.  Please change the sample type or microarray application.';
        			
        		} 

        		this.slideProductCombo.selectedIndex = 0;
        	} 
        }

        public function checkForSlideProductWarning():void {
        	if (this.slideProductCombo.dataProvider.length == 1) {
        		slideProductStack.selectedIndex = 1;
        	} else {
        		slideProductStack.selectedIndex = 0;
        	}
        }  
        
        public function initializeSlideProductCombo():void {
        	if (parentDocument == null) {
        		return;
        	}
			parentApplication.filteredSlideProductListForSubmitRequests.refresh();

			slideProductCombo.selectedIndex = -1;
			for each(var slideProduct:Object in slideProductCombo.dataProvider) {
				if (slideProduct.@idSlideProduct == parentDocument.request.@idSlideProduct) {
					slideProductCombo.selectedItem = slideProduct;
					break;
				}
			}
			checkForSlideProductWarning();
		}
		private function clearHybSlideDesigns():void {
			if (slideProductCombo.selectedItem == null ||
			    slideProductCombo.selectedItem.@idSlideProduct == '' ||
			    parentDocument.request.@idSlideProduct == '' ||
				parentDocument.request.@idSlideProduct != slideProductCombo.selectedItem.@idSlideProduct) {
			
				for each (var hyb:Object in parentDocument.hybs) {
					hyb.@idSlideDesign = '';
				}
				parentDocument.hybsView.checkHybsCompleteness();
			}
			
		}
		private function initializeApplicationName():void {
			if (this.microarrayAppRadioGroup.selectedValue != null && this.microarrayAppRadioGroup.selectedValue != '') {
				var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', this.microarrayAppRadioGroup.selectedValue);
				this.parentDocument.applicationName = application.@display;
			}			
		}
		public function assignSlideNumbers():void {
			if (slideProductCombo.selectedItem == null || slideProductCombo.selectedItem.@idSlideProduct == '') {
				return;
			}
			if (slideProductCombo.selectedItem.@arraysPerSlide == '' ||
				slideProductCombo.selectedItem.@arraysPerSlide == '1') {
				parentDocument.hybsView.slideNumberColumn.visible = false;		
				parentDocument.hybsView.arrayCoordinateColumn.visible = false;
			} else {
				parentDocument.hybsView.slideNumberColumn.visible = true;
				parentDocument.hybsView.arrayCoordinateColumn.visible = true;
			}
			var slideNumber:int = 0;
			var count:int = 0;
			var firstTime:Boolean = true; 
			var useAltColor:Boolean = true;
			getArrayCoordinates();
			for each(var hyb:Object in parentDocument.hybs) {
				if (slideProductCombo.selectedItem.@arraysPerSlide == '' ||
				    slideProductCombo.selectedItem.@arraysPerSlide == '1') {
					slideNumber++;    
					hyb.@showSlideIcon = 'Y';	
					hyb.@altColor = false;
					hyb.@arrayCoordinate = '';
				} else {
					if (firstTime || count == slideProductCombo.selectedItem.@arraysPerSlide) {
						count = 0;
						slideNumber ++;
						hyb.@showSlideIcon = 'Y';
						useAltColor = !useAltColor;
						hyb.@altColor = useAltColor;
					} else {
						hyb.@showSlideIcon = 'N';							
						hyb.@altColor = useAltColor;
					}
					if (arrayCoordinates.length >= count + 1) {
						hyb.@arrayCoordinate = arrayCoordinates.getItemAt(count).@name;
					}
				}
				hyb.@slideNumber = slideNumber;
				count++;
				firstTime = false;
			}
		}		
		
		private function getArrayCoordinates():XMLListCollection {
			if (arrayCoordinates == null) {
				var slideDesign:Object = this.getDefaultSlideDesign();
				arrayCoordinates = new XMLListCollection();
				if (slideDesign != null) {
					for each(var sd:Object in parentApplication.slideDesignList) {
					  if (sd.@idSlideDesign == slideDesign.@idSlideDesign) {
					  	for each(var coords:Object in sd.children()) {
					  		if (coords.name() == "arrayCoordinates") {
						  		for each(var coord:Object in coords.children()) {
						  			if (coord.name() == "ArrayCoordinate") {
							  			if (coord.@name != '') {
								  			arrayCoordinates.addItem(coord);
							  			}
						  			}
						  		}
					  		}
					  	}
					  	break;
					  }
					}
				}
			}
			return arrayCoordinates;			
		}

		
		public function getDefaultSlideDesign():Object {
			var slideDesign:Object = null;
			if (parentDocument == null) {
				return slideDesign;
			}
			
			if (slideProductCombo.selectedItem != null) {
				parentDocument.selectedIdSlideProduct = slideProductCombo.selectedItem.@idSlideProduct;
				parentDocument.hybsView.slideDesigns = new XMLListCollection(parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SlideDesign').DictionaryEntry.(@value == '' || @idSlideProduct == parentDocument.selectedIdSlideProduct));
				
				// If there is only one slide design (besides the blank entry) for the slide product,
				// set all of the hybs to it.
				if (parentDocument.hybsView.slideDesigns.length == 2) {
					slideDesign = parentDocument.hybsView.slideDesigns[1];
				}
			}
			
			return slideDesign;

		}
		        
        private function handleInvalidNumberOfHybs(eventObject:Event):void {
        	this.validNumberOfHybs = false;
        	this.checkHybSetupCompleteness();
        }
        private function handleValidNumberOfHybs(eventObject:Event):void {
        	this.validNumberOfHybs = true;
        	this.checkHybSetupCompleteness();
        }
        
        private function pickMicroarrayApp():void {
        	if (this.microarrayAppRadioGroup.selectedValue != null && this.microarrayAppRadioGroup.selectedValue != '') {
        		this.microarrayAppBox.styleName = "normalBox";
        	} else {
        		this.microarrayAppBox.styleName = "requiredBox";
        	}
        	initializeApplicationName();
			parentApplication.filteredSlideProductListForSubmitRequests.refresh();
			slideProductCombo.selectedIndex = -1;
			clearHybSlideDesigns();
			checkHybSetupCompleteness();
			checkForSlideProductWarning();
        }
      
	]]>
</mx:Script>
    <mx:NumberValidator id="numberOfHybsValidator" source="{numberOfHybs}" property="text" 
        required="true" allowNegative="false" domain="int" maxValue="100" />
    <mx:NumberValidator id="slideOrganismValidator"
        source="{this.organismCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" />       
    <mx:NumberValidator id="slideProductValidator"
        source="{this.slideProductCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" />         
    
	<mx:VBox  horizontalAlign="center" paddingLeft="4" id="vbox1" right="0" top="0">
  		  <mx:TextArea styleName="instructionBox" width="400" wordWrap="true" height="80" id="textarea1">
			<mx:htmlText><![CDATA[Instructions<br>  1.  Provide requested information or select appropriate dropdown<br>       options for each line item below.<br>  2.  After completing all line items, click the 'Next' button at the<br>       bottom of the page to proceed.]]></mx:htmlText>
		  </mx:TextArea>
	</mx:VBox>
	<mx:VBox width="100%" height="100%" verticalGap="14" paddingTop="2">
		<mx:HBox width="100%" horizontalGap="0">
			<mx:Label text="(1) Select an organism." width="250" />
			<mx:ComboBox labelField="@display" width="250" id="organismCombo">							
				<mx:change>parentApplication.filteredSlideProductListForSubmitRequests.refresh();slideProductCombo.selectedIndex = -1;clearHybSlideDesigns();checkHybSetupCompleteness();checkForSlideProductWarning()</mx:change>
				<mx:dataProvider>{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry}</mx:dataProvider>
			</mx:ComboBox>
		</mx:HBox>
		<mx:HBox width="100%" horizontalGap="0">
			<mx:Label text="(2) Select the microarray application." width="250" />
			<mx:VBox  verticalGap="0" id="microarrayAppBox" styleName="requiredBox">
	            <mx:RadioButtonGroup id="microarrayAppRadioGroup"/>
				<mx:Repeater id="microarrayAppRepeater" dataProvider="{parentDocument.filteredMicroarrayAppList}"> 
	    			<mx:RadioButton  label="{microarrayAppRepeater.currentItem.@display}" 
	    				paddingLeft="0" paddingRight="1"
	    				value="{microarrayAppRepeater.currentItem.@value}"
	    	 	    	groupName="microarrayAppRadioGroup"
	    				click="{pickMicroarrayApp()}" id="radiobutton1"/>
  				</mx:Repeater>			
  			</mx:VBox>
		</mx:HBox>
		<mx:HBox width="100%" horizontalGap="0">
			<mx:Label text="(3) Select one of the following." width="250" />
			<mx:RadioButtonGroup id="customVsCatalogRadioGroup"/>
			<mx:RadioButton label="Catalog microarray" groupName="customVsCatalogRadioGroup" id="isCatalogRadio" selected="true" click="parentApplication.filteredSlideProductListForSubmitRequests.refresh();slideProductCombo.selectedIndex = -1;clearHybSlideDesigns();checkHybSetupCompleteness();checkForSlideProductWarning();callLater(this.checkForSampleTypeCompatibility)">
				<mx:change>parentApplication.filteredSlideProductListForSubmitRequests.refresh();slideProductCombo.selectedIndex = -1;checkHybSetupCompleteness()</mx:change>
			</mx:RadioButton>
			<mx:RadioButton label="Custom microarray" groupName="customVsCatalogRadioGroup" id="isCustomRadio" click="parentApplication.filteredSlideProductListForSubmitRequests.refresh();slideProductCombo.selectedIndex = -1;clearHybSlideDesigns();checkHybSetupCompleteness();checkForSlideProductWarning();callLater(this.checkForSampleTypeCompatibility)" paddingLeft="12">
				<mx:change>parentApplication.filteredSlideProductListForSubmitRequests.refresh();slideProductCombo.selectedIndex = -1;checkHybSetupCompleteness()</mx:change>
			</mx:RadioButton>
		</mx:HBox>
		<mx:HBox width="100%" horizontalGap="0">
			<mx:Text width="250">
				<mx:htmlText><![CDATA[(4) Select the microarray slide or slide set <br>to be used  for these hybridizations.]]></mx:htmlText>
			</mx:Text>
			<mx:ViewStack id="slideProductStack" width="100%" height="100%">
			    <mx:HBox>
					<mx:ComboBox labelField="@display" width="420" id="slideProductCombo"  change="{parentDocument.hybsView.initializeHybsGrid();clearHybSlideDesigns();arrayCoordinates = null;parentDocument.initializeSlideDesigns();propagateSlideDesign();assignSlideNumbers();checkHybSetupCompleteness();initializeApplicationName()}" >							
						<mx:dataProvider>{parentApplication.filteredSlideProductListForSubmitRequests}</mx:dataProvider>
					</mx:ComboBox>
			    </mx:HBox>
			    <mx:HBox width="100%"  borderStyle="none" verticalAlign="middle">
					<mx:Text  styleName="warningLabelMinor" width="100%" text="{'No ' + (isCatalogRadio.selected ? 'catalog ': 'custom ') + parentDocument.requestCategoryName + ' ' + organismCombo.selectedItem.@display + ' ' + parentDocument.applicationName + ' slides are listed.  Please contact Brian Dalley about slide stock.'}">								
					</mx:Text>						    	
			    </mx:HBox>
				
				
			</mx:ViewStack>
		</mx:HBox>
		<mx:HBox width="100%" horizontalGap="0" id="numberOfHybsContainer">
			<mx:Text width="250" >
				<mx:htmlText><![CDATA[(5) How many microarrays will be used for this experiment request?]]></mx:htmlText>
			</mx:Text>
			<mx:TextInput width="40" id="numberOfHybs"  
				valid="handleValidNumberOfHybs(event)" invalid="handleInvalidNumberOfHybs(event)">
				<mx:focusOut>clearHybSlideDesigns();parentDocument.initializeSlideDesigns();checkHybSetupCompleteness();parentDocument.hybsView.initializeHybsGrid();</mx:focusOut>
				
			</mx:TextInput>
		</mx:HBox>
		<mx:HBox width="100%" horizontalGap="0" id="slideSourceContainer">
			<mx:Label text="(6) Where will the microarrays come from?" width="250" />
			<mx:VBox verticalGap="1" paddingLeft="2" paddingRight="2"  id="slideUseBox" styleName="requiredBox">
				<mx:CheckBox label="New microarray purchased from core facility"  id="coreSlideSourceCheckbox"   change="validateSlideUse()" click="this.toggleCheckedCodeSlideSource(1);parentDocument.hybsView.initializeHybsGrid();clearHybSlideDesigns();parentDocument.initializeSlideDesigns();propagateCheckCodeSlideSource();checkHybSetupCompleteness();"/>
				<mx:CheckBox label="New microarray purchased by lab"  id="clientSlideSourceCheckbox"   change="validateSlideUse()" click="this.toggleCheckedCodeSlideSource(2);parentDocument.hybsView.initializeHybsGrid();clearHybSlideDesigns();parentDocument.initializeSlideDesigns();propagateCheckCodeSlideSource();checkHybSetupCompleteness();"/>
				<mx:CheckBox label="Strip and reuse existing microarray" id="stripSlideSourceCheckbox"  change="validateSlideUse()"  click="this.toggleCheckedCodeSlideSource(3);parentDocument.hybsView.initializeHybsGrid();clearHybSlideDesigns();parentDocument.initializeSlideDesigns();propagateCheckCodeSlideSource();checkHybSetupCompleteness();"/>
			</mx:VBox>
		</mx:HBox>
		
	</mx:VBox>
</mx:Canvas>
