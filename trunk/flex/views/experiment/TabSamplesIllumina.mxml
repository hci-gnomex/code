<?xml version="1.0" encoding="utf-8"?>
<exp:TabSamplesBase
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:util="views.util.*"
	xmlns:fx="*.views.renderers"
	xmlns:exp="views.experiment.*"
	show="{this.init();}"
	label="Samples" width="100%" height="100%"  enabled="false"  xmlns:renderers="views.renderers.*">
	
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			import hci.flex.controls.Label;
			
			import mx.collections.Grouping;
			import mx.collections.GroupingCollection;
			import mx.collections.GroupingField;
			import mx.collections.IHierarchicalCollectionView;
			import mx.collections.SortField;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.TextInput;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			import mx.validators.NumberValidator;
			import mx.validators.ValidationResult;
			
			import views.renderers.CheckBoxRenderer;
			import views.renderers.ComboBox;
			import views.renderers.ComboBoxWorkflowStatus;
			import views.renderers.GridColumnFillButton;
			import views.renderers.LabelBarcodeSequence;
			import views.renderers.MultiselectRenderer;
			import views.renderers.TextInputSeqPrepByCore;
			import views.renderers.URLRenderer;
			import views.util.AdvancedDataGridColumnWithType;
			import views.util.AnnotationAdvancedDataGridColumn;
			import views.util.CopySampleSheetColumnView;
			import views.util.UploadSampleSheetInstructionsView;
			import views.util.UploadSampleSheetView;
			
			
			public  var DEFAULT_CONTROL_NAME:String	  = "Control";
			
			public var sampleGroupingCollection:GroupingCollection = null;
			
			[Bindable]
			private var isExternal:Boolean = false;
			
			private var uploadFR:FileReference;
			private var uploadSampleSheetURL:String;
			private var docTypes:FileFilter;
			private var hasColumnNames:Boolean; 
			private var	sampleSheetXML:XML;
			
			public  var multiplexGroupNumberImported:Boolean = false;
			
			override protected function initButtons():void {
				if (parentDocument.isEditState()) {
					if (parentApplication.hasPermission("canWriteAnyObject")) {
						this.clearSamplesButton.visible = true;
					} else {
						this.clearSamplesButton.visible = false;
					}
				}
				
				this.addSampleButton.visible = true;
				this.deleteSampleButton.visible = true;
				this.copySampleButton.visible = true;
				this.addSampleButton.enabled = true;
				this.deleteSampleButton.enabled = true;
				this.copySampleButton.enabled = true;
			}
			
			override public function getSamplesGrid():AdvancedDataGrid {
				return this.samplesGrid;
			}
			
			override public function addSample():Boolean {
				var emptyNode:XML = null;
				var idOrganism:String = parentDocument.setupView.getIdOrganism();
				var isValid:Boolean = true;
				var analysisInstructions:String = parentApplication.submitInternalExperiment() ? parentDocument.notesView.noteToBio.text.replace(/\"/g, "&quot;") : '';
				analysisInstructions = analysisInstructions.replace("'", "&apos;");
				analysisInstructions = analysisInstructions.replace("<", "&lt;");
				analysisInstructions = analysisInstructions.replace(">", "&gt;");
				analysisInstructions = analysisInstructions.replace("&", "&amp;");
				var prepInstructions:String = parentApplication.submitInternalExperiment() ? parentDocument.notesView.noteToSeq.text.replace(/\"/g, "&quot;") : '';
				prepInstructions = prepInstructions.replace("'", "&apos;");
				prepInstructions = prepInstructions.replace("<", "&lt;");
				prepInstructions = prepInstructions.replace(">", "&gt;");
				prepInstructions = prepInstructions.replace("&", "&amp;");
				
				if (parentDocument.isSolexaState()) {
					if (parentDocument.sampleSetupView.currentState == 'SolexaSetupPreppedState' || 
						parentDocument.sampleSetupView.currentState == 'SolexaAmendPreppedState') {
						emptyNode = new XML("<Sample " +
							" idSample='" + "Sample" + getNextSampleId() + "'" +
							" name='' description='' " +
							" canChangeSampleName='Y'" +
							" canChangeSampleType='Y'" +
							" canChangeSampleDropOffLocation='Y'" +
							" canChangeSampleConcentration='Y'" +
							" canChangeSampleSource='Y'" +
							" canChangeNumberSequencingLanes='Y'" +  
							" canChangeNumberSequencingCycles='Y'" +
							" concentration=''" + 
							" label=''" +
							" idNumberSequencingCycles='" + (parentApplication.submitInternalExperiment() ? parentDocument.seqSetup1View.getIdNumberSequencingCyclesSelected() : '') + "'" +				
							" idSeqRunType='" + (parentApplication.submitInternalExperiment() ? parentDocument.seqSetup1View.getIdSeqRunTypeSelected() : '') + "'" +				
							" numberSequencingLanes='1'" +
							" codeConcentrationUnit='ng/ul'" + 
							" idSampleType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value : '') + "'" +
							" seqPrepByCore = 'N'" +
							" idOligoBarcode = ''" +
							" barcodeSequence = ''" +
							" otherSamplePrepMethod=\"" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherSamplePrepMethod.text.replace(/\"/g, "&quot;") : '') + "\"" +				
							" idSeqLibProtocol='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.seqLibProtocolCombo.selectedItem.@value : '') + "'" +				
							" idGenomeBuildAlignTo='" + (parentApplication.submitInternalExperiment() ? parentDocument.seqSetup1View.genomeBuildCombo.selectedItem.@value : '') + "'" +				
							" analysisInstructions=\"" + (analysisInstructions) + "\"" +				
							" prepInstructions=\"" + (prepInstructions) + "\"" +				
							" idOrganism='"  + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleOrganismCombo.selectedItem.@value : idOrganism) + "'" +				
							" otherOrganism=\"" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherOrganism.text.replace(/\"/g, "&quot;") : '') + "\"" +				
							" treatment=''"   +				
							"/>");
						
					} else {
						emptyNode = new XML("<Sample " +
							" idSample='" + "Sample" + getNextSampleId() + "'" +
							" name='' description='' " +
							" canChangeSampleName='Y'" +
							" canChangeSampleType='Y'" +
							" canChangeSampleConcentration='Y'" +
							" canChangeSampleSource='Y'" +
							" canChangeNumberSequencingCycles='Y'" + 
							" canChangeNumberSequencingLanes='Y'" + 
							" concentration=''" +
							" label=''" +
							" idOligoBarcode = ''" +
							" barcodeSequence = ''" +
							" idNumberSequencingCycles='" + (parentApplication.submitInternalExperiment() ? parentDocument.seqSetup1View.getIdNumberSequencingCyclesSelected() : '') + "'" +
							" idSeqRunType='" +	(parentApplication.submitInternalExperiment() ? parentDocument.seqSetup1View.getIdSeqRunTypeSelected() : '') + "'" +				
							" numberSequencingLanes='1'" +
							" codeConcentrationUnit='ng/ul'" + 
							" idSampleType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value : '') + "'" +
							" idGenomeBuildAlignTo='" + (parentApplication.submitInternalExperiment() ? parentDocument.seqSetup1View.genomeBuildCombo.selectedItem.@value : '') + "'" +				
							" analysisInstructions='" + (analysisInstructions) + "'" +				
							" otherSamplePrepMethod=\"" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherSamplePrepMethod.text.replace(/\"/g, "&quot;") : '') + "\"" +				
							" idSeqLibProtocol = ''" +
							" seqPrepByCore = 'Y'" +
							" idOrganism='"  + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleOrganismCombo.selectedItem.@value : idOrganism) + "'" +				
							" otherOrganism=\"" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherOrganism.text.replace(/\"/g, "&quot;") : '') + "\"" +				
							" treatment=''"  +				
							"/>");
						
					}
				} else {
					var xmlString:String = "<Sample " +
						" idSample='" + "Sample" + getNextSampleId() + "'" +
						" name='' description='' " +
						" cy3='false'" +
						" cy5='false'" +			    
						" canChangeSampleName='Y'" +
						" canChangeSampleType='Y'" +
						" canChangeSampleConcentration='Y'" +
						" canChangeSampleSource='Y'" +
						" canChangeNumberSequencingCycles='Y'" +
						" canChangeNumberSequencingLanes='Y'" + 
						" concentration=''" + 
						" idOligoBarcode = ''" +				
						" barcodeSequence = ''" +				
						" codeConcentrationUnit='ng/ul'" + 
						" idSampleType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value : '') + "'" +
						" otherSamplePrepMethod=\"" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherSamplePrepMethod.text.replace(/\"/g, "&quot;") : '') + "\"" +				
						" idOrganism='"  + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleOrganismCombo.selectedItem.@value : idOrganism) + "'" +				
						" otherOrganism='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherOrganism.text.replace(/\"/g, "&quot;") : '') + "'" 	+	
						"/>"
					emptyNode = new XML(xmlString);
				}
				
				if (emptyNode != null) {
					parentDocument.samples.addItem(emptyNode);
				}
				
				return isValid;
			}
			
			override protected function checkDeleteValidity(sample:Object):Boolean {
				var isValid:Boolean = true;
				for each(var lane:Object in parentDocument.getLanes(sample, -1)) {
					if (sample.@idSample.indexOf("Sample") >= 0 || isExternal) {
						parentDocument.lanes.removeItemAt(parentDocument.lanes.getItemIndex(lane));
					} else {
						Alert.show("Please remove sequence lanes for sample " + sample.@name + " before attempting to delete sample.");
						isValid = false;
						break;
					}
				}
				
				return isValid;
			}
			
			private function deleteTheSample():void {
				var idx:int = samplesGrid.selectedIndex;
				deleteSample();
				checkSamplesCompleteness();
				samplesGrid.selectedIndex = idx;
			}
			
			override public function initializeSamplesGrid():void {
				if (parentDocument.requestToClone != null) {
					return;
				}
				
				var numberOfSamples:Number = 0;
				var numberOfSamplesToAdd:Number = 0;
				
				if (parentApplication.submitInternalExperiment()) {
					if (!parentDocument.sampleSetupView.checkSampleSetupCompleteness()) {
						return;
					}
					numberOfSamples = new Number(parentDocument.sampleSetupView.numberOfSamples.text);
					if (parentDocument.isAmendState()) {
						numberOfSamples = new Number(parentDocument.samples.length);
					} 
				} else {
					numberOfSamples = 1;
				}
				if (parentDocument.samples.length <= numberOfSamples) {
					numberOfSamplesToAdd = numberOfSamples - parentDocument.samples.length;
					for(var x:int = 0; x < numberOfSamplesToAdd; x++) {
						addSample();
					}
				} else {
					while (parentDocument.samples.length > numberOfSamples) {
						parentDocument.samples.removeItemAt(parentDocument.samples.length - 1);
					}
				}
			}
			
			override public function setMultiplexGroupNumberImported(val:Boolean):void {
				this.multiplexGroupNumberImported = val;
				if (this.addSampleButton != null) {
					this.addSampleButton.enabled = !val;
				}
				if (this.copySampleButton != null) {
					this.copySampleButton.enabled = !val;
				}
			}
			
			override public function checkSamplesCompleteness():void {
				parentDocument.userWarningsSamples = "";
				
				
				var numberOfAdditionalLanes:int = 0;
				if (parentDocument.currentState == 'SolexaLaneAmendState' || parentDocument.sampleSetupView.currentState == "SolexaAmendState") {
					for each(var s2:Object in parentDocument.samples) {
						if (isEntered(s2, "@numberSequencingLanes")) {
							numberOfAdditionalLanes += s2.@numberSequencingLanes;
						}
					}
				}
				var completeCount:int = 0;
				var nameCompleteCount:int = 0;
				for each(var sample:Object in parentDocument.samples) {
					if (currentState != null && currentState.indexOf('SolexaSamples') >= 0) {
						
						if (parentDocument.currentState == 'SolexaLaneAmendState') {
							if (isEntered(sample, "@name") &&
								isEntered(sample, "@concentration") &&
								isEntered(sample, "@idSampleType") &&
								isEntered(sample, "@idOrganism") &&
								isEntered(sample, "@idSeqRunType") &&
								isEntered(sample, "@idNumberSequencingCycles") &&
								reqdAnnotationsEntered(sample)&& 
								numberOfAdditionalLanes > 0) {
								
								completeCount++;
							}
						} else if (parentApplication.submitInternalExperiment() && 
							!parentDocument.isEditState() &&
							parentDocument.sampleSetupView.currentState == "SolexaSetupState" || 
							parentDocument.sampleSetupView.currentState == "SolexaAmendState") {
							if (isEntered(sample, "@name") &&
								isEntered(sample, "@concentration") &&
								isEntered(sample, "@idSampleType") &&
								isEntered(sample, "@idOrganism") &&
								isEntered(sample, "@idSeqRunType") &&
								isEntered(sample, "@idNumberSequencingCycles") &&
								reqdAnnotationsEntered(sample) &&  
								(isEntered(sample, "@numberSequencingLanes") || numberOfAdditionalLanes > 0)) {
								
								
								completeCount++;
								
								
							}
							
							
						} else if (!parentApplication.submitInternalExperiment() && parentDocument.isSolexaState()) {
							if (isEntered(sample, "@name") &&
								isEntered(sample, "@idSampleType") &&
								reqdAnnotationsEntered(sample) &&  
								isEntered(sample, "@idOrganism")) {
								
								completeCount++;
							}
						} else {
							if (isEntered(sample, "@name") &&
								isEntered(sample, "@idSampleType") &&	        		
								isEntered(sample, "@idSeqLibProtocol") &&	        		
								isEntered(sample, "@concentration") &&
								isEntered(sample, "@idOrganism") &&
								isEntered(sample, "@idSeqRunType") &&
								reqdAnnotationsEntered(sample) &&  
								isEntered(sample, "@idNumberSequencingCycles")) {
								
								
								if (!parentDocument.isEditState()) {
									if (sample.@numberSequencingLanes != '') {
										if (parentDocument.showSampleCustomBarcodes()) {
											if (isEntered( sample, "@barcodeSequence")) {
												completeCount++;      			    		
											}
										} else if (parentDocument.showSampleBarcodes()) {
											if (isEntered( sample, "@idOligoBarcode")) {
												completeCount++;      			    		
											}
										} else {
											completeCount++;
										}
									}		
								} else {
									completeCount++;
								}
								
							}
							
						}
						
					}	
				}
				
				
				var isComplete:Boolean = false;
				if (parentDocument.samples.length > 0 && completeCount == parentDocument.samples.length) {
					isComplete = true;
				} else if (parentDocument.isEditState()) {
					isComplete = true;
				}
				
				// Make sure that sample concentration is valid
				for each (var s1:Object in parentDocument.samples) {
					var vr:ValidationResultEvent = parentDocument.concentrationValidator.validate(s1.@concentration);
					if (vr.type == ValidationResultEvent.INVALID) {
						parentDocument.userWarningsSamples += "Invalid sample concentration '" + s1.@concentration + "'.  "; 
						isComplete = false;
					}
				}
				
				// Make sure the sample index tags are unique
				if (isComplete) {
					if (!areIndexTagsUnique()) {
						parentDocument.userWarningsSamples += "WARNING: Duplicate index tags have been specified.  This should only occur when samples (and their reads) are meant to be pooled."; 
					}
				}
				
				// If this is a Solexa request and the sample setup is complete,
				// create the sequencing lanes based on the number of lanes 
				// entered for each sample.
				if (isComplete && currentState != null && currentState =='SolexaSamplesState') {
					var isValidNumberSeqLanes:Boolean = true;
					for each (var s:Object in parentDocument.samples) {
						if (s.@numberSequencingLanes > 100) {
							callLater(showMaxLaneError, [s.@numberSequencingLanes]);
							parentDocument.userWarningsSamples += "Number of lanes to sequence '" + s.@numberSeqLanes + "' exceed max.  ";
							isValidNumberSeqLanes = false;
							break;
						}
					}
					if (isValidNumberSeqLanes) {
						var lanesAdded:Boolean = false;
						for each (var theSample:Object in parentDocument.samples) {
							var numberLanesForSample:int = parentDocument.getLaneCount(theSample);
							if (numberLanesForSample < theSample.@numberSequencingLanes) {
								var numberLanesToAdd:int = theSample.@numberSequencingLanes - numberLanesForSample;
								for (var x:Number = 0; x < numberLanesToAdd; x++) {
									addSequencingLaneForSample(theSample);
									lanesAdded = true;
								}
							} else if (numberLanesForSample > theSample.@numberSequencingLanes) {
								var numberLanesToRemove:int = numberLanesForSample - theSample.@numberSequencingLanes;
								for each(var lane:Object in parentDocument.getLanes(theSample, numberLanesToRemove)) {
									parentDocument.lanes.removeItemAt(parentDocument.lanes.getItemIndex(lane));
								}
							}
							
						}
						
						if (lanesAdded) {
							parentDocument.lanes.refresh();
						}
					}
				}
				
				if (parentDocument.isSolexaEditState()) {
					parentDocument.lanesView.enabled = isComplete;
				} else if (!parentDocument.isEditState()) {
					if (parentDocument.theTab.contains(parentDocument.visibilityView)) {
						parentDocument.visibilityView.enabled = isComplete;
					} else if (parentDocument.theTab.contains(parentDocument.confirmView)) {
						parentDocument.confirmView.enabled = isComplete;
					}
				}        	
				parentDocument.enableNextButtons();
				
				callLater(postSamplesCompleteness, [isComplete]);
				
				
			}
			
			private function showMaxLaneError(numberSeqLanes:String):void {
				Alert.show("Number of lanes to sequence " + numberSeqLanes + " exceeds max.");
			}
			
			
			private function postSamplesCompleteness(isComplete:Boolean):void {
				
				if (!isComplete) {
					if (parentDocument.isSolexaEditState()) {
						parentDocument.lanesView.enabled = false;
					}
					if (parentDocument.theTab.contains(parentDocument.visibilityView)) {
						parentDocument.visibilityView.enabled = false;					
					}
					if (parentDocument.theTab.contains(parentDocument.confirmView)) {
						parentDocument.confirmView.enabled = false;					
					}
				} else {
					if (parentDocument.isSolexaState() && !parentDocument.isEditState() && !parentDocument.isAmendState()) {
						this.refreshLanesGrid();
					}
				}
				
			}
			
			private function addSequencingLaneForSample(sample:Object):void {
				var lanePlus:int = parentDocument.lanes.length + 100000;
				if (this.multiplexGroupNumberImported) {
					lanePlus = parseInt(sample.@multiplexGroupNumber) + 100000;
				}
				var laneStr:String = lanePlus.toString().substr(1);
				
				var analysisInstructions:String  = "";
				if (sample != null && sample.hasOwnProperty("@analysisInstructions") && sample.@analysisInstructions != null) {
					analysisInstructions = sample.@analysisInstructions.replace("\"", "&quot;");
					analysisInstructions = analysisInstructions.replace("'", "&apos;");
					analysisInstructions = analysisInstructions.replace("<", "&lt;");
					analysisInstructions = analysisInstructions.replace(">", "&gt;");
					analysisInstructions = analysisInstructions.replace("&", "&amp;");
					
				}
				var emptyNode:XML = new XML("<SequenceLane " +
					" idSequenceLane='" + "SequenceLane" + laneStr + "'" +
					" notes='' " + 
					" idSeqRunType='" + sample.@idSeqRunType + "'" +
					" idNumberSequencingCycles='" + sample.@idNumberSequencingCycles + "'" +
					" idSample='" + sample.@idSample + "'" +
					" idGenomeBuildAlignTo='" + sample.@idGenomeBuildAlignTo + "'" +
					" analysisInstructions='" + analysisInstructions + "'" +
					"/>");
				
				parentDocument.lanes.addItem(emptyNode);
			}
			
			override public function propagateOrganism(idOrganism:String):void {
				if (parentApplication.submitInternalExperiment() && currentState != null && currentState.indexOf('SolexaSamples') >= 0) {
					for each (var sample:Object in parentDocument.samples) {
						sample.@idOrganism = idOrganism;
					}
				} else if (!parentApplication.submitInternalExperiment()) {
					for each (var s:Object in parentDocument.samples) {
						s.@idOrganism = idOrganism;
					}
				}
			}

			override public function propagateNumberSequencingCycles(theSample:Object):void {
				if (parentApplication.submitInternalExperiment() && currentState != null && currentState.indexOf('SolexaSamples') >= 0) {
					for each(var lane:Object in parentDocument.getLanes(theSample, -1)) {
						lane.@idNumberSequencingCycles = theSample.@idNumberSequencingCycles;
					}
				}
			}		
			
			override public function initializeBarcoding():void {
				if (parentDocument.isSolexaState()) {
					
					
					if (barcodeList == null || this.barcodeList.length() == 0) {
						barcodes.refresh();
						barcodeList = new XMLList(barcodes.toXMLString());
					}
					
					propagateBarcode();
				}
				
				setSamplesGridDataProvider();
				
				this.barcodeColumn.visible = parentDocument.showSampleBarcodes();
				this.barcodeColumn.editable = !parentDocument.isEditState() || parentApplication.hasPermission('canWriteAnyObject');
				this.barcodeColumnB.visible = parentDocument.showSampleBarcodesB();
				this.barcodeColumnB.editable = !parentDocument.isEditState() || parentApplication.hasPermission('canWriteAnyObject');
				this.customBarcodeColumn.visible = parentDocument.showSampleCustomBarcodes();
				this.customBarcodeColumn.editable = !parentDocument.isEditState() || parentApplication.hasPermission('canWriteAnyObject');
				
				this.samplesGrid.validateNow();
				callLater(this.checkSamplesCompleteness);
				
			}
			
			override public function propagateBarcode():void {
				if (!multiplexGroupNumberImported && parentDocument != null && parentDocument.currentState != "SolexaLaneAmendState" && !parentDocument.isEditState()) {
					var x:int = 0;
					var multiplexGroupNumber:int = 1;
					for each (var sample:Object in parentDocument.samples) {
						if (parentDocument.request.@hasBarCodes == "Y") {
							if (x == parentDocument.request.@numberSamplesPerChannel) {
								x = 0;
								multiplexGroupNumber++;
							}
							if (parentDocument.showSampleMultiplexGroup()) {
								sample.@multiplexGroupNumber = multiplexGroupNumber;
							} else {
								sample.@multiplexGroupNumber = '';
							}
							x++;
						} else {
							sample.@idOligoBarcode = '';
							sample.@multiplexGroupNumber = '';
							sample.@barcodeSequence = '';
						}
					} 
					if (this.sampleGroupingCollection != null) {
						this.sampleGroupingCollection.refresh();
						this.samplesGrid.validateNow();
					}
				}
			}
			
			override public function setShowCCNumber(show:Boolean):void {
				if (showCCNumberCheckbox != null) {
					this.showCCNumberCheckbox.selected = show;
				}
			}
			
			override public function getShowCCNumber():Boolean {
				if (showCCNumberCheckbox != null) {
					return this.showCCNumberCheckbox.selected;
				} else {
					return false;
				}
			}
			
			private function setSamplesGridDataProvider():void {
				this.samplesGrid.validateNow(); // Make sure columns on samples grid are created
				if (parentDocument.showSampleMultiplexGroup()) {
					this.samplesGrid.dataProvider = null;
					sampleGroupingCollection = new GroupingCollection();
					sampleGroupingCollection.source = parentDocument.samples;
					var group:Grouping = new Grouping();
					var gf:GroupingField = new GroupingField();
					gf.name = "@multiplexGroupNumber";
					group.fields = [gf];
					gf.compareFunction = sampleCompareFunction;
					sampleGroupingCollection.grouping  = group;
					sampleGroupingCollection.refresh(); 
					this.samplesGrid.dataProvider = sampleGroupingCollection;
					
					this.samplesGrid.dragMoveEnabled = true;
					this.samplesGrid.dropEnabled = true;
					this.samplesGrid.dragEnabled = true;
					
					this.sampleRowNumberCol.visible = false;
					this.multiplexGroupNumberColumn.visible = true;
					this.barcodeColumn.visible = false;
					this.multiplexGroupNumberEditColumn.visible = false;
					
				} else {
					this.samplesGrid.sortableColumns = false;
					sampleGroupingCollection = null;
					this.samplesGrid.dataProvider = parentDocument.samples;
					
					this.samplesGrid.dragMoveEnabled = false;
					this.samplesGrid.dropEnabled = false;
					this.samplesGrid.dragEnabled = false;
					
					this.sampleRowNumberCol.visible = true;
					this.multiplexGroupNumberColumn.visible = false;
					this.multiplexGroupNumberEditColumn.visible = parentDocument.isSolexaState() && parentDocument.isEditState();
					this.multiplexGroupNumberEditColumn.editable = parentDocument.isSolexaState() && parentDocument.isEditState() && parentApplication.isAdminState;
					
				}
			}
			
			override public function showHideColumns():void {
				isExternal = (parentDocument.isEditState() && parentDocument.request.@isExternal == 'Y') || (!parentDocument.isEditState() && !parentApplication.isInternalExperimentSubmission);
				isEditState = parentDocument.isEditState();
				
				showCCNumberCheckbox.visible =  !isExternal;
				showCCNumberCheckbox.includeInLayout =  !isExternal;
				showCCNumberCheckbox.width = isExternal ? 0 : 250;
				
				buttonsContainer.visible = !parentDocument.isAmendState();
				buttonsContainer.includeInLayout = buttonsContainer.visible;
				
				// Don't allow sample editing on edit unless user is admin or experiment is external or experiment is non-submitted dna sq experiment.
				if (isEditState && !parentApplication.isAdminState && !isExternal) {
					buttonsContainer.visible = false;
					buttonsContainer.includeInLayout = false;
				}
				
				
				// Edit columns shown
				
				existingNumberSequencingLanesCol.visible = false;
				additionalNumberSequencingLanesCol.visible = false;
				this.sampleTypeCol.visible = true;
				
				seqPrepStatus.visible = isEditState && !isExternal;
				
				wellNameCol.visible = false;
				wellNameCol.editable = false;
				
				this.sourceWellCol.visible = false
				this.destinationWellCol.visible = false;
				this.sourcePlateCol.visible = false;
				
				this.qc_260_280Column.visible = false;
				this.sampleNameCol.visible = true;
				
				sampleNumberCol.visible = parentDocument.isEditState() || parentDocument.isAmendState();
				
				this.concentrationCol.visible = !isExternal;
				this.otherOrganismCol.visible = false;
				this.sampleOrganismColumn.visible = !isExternal;
				this.preppedByCoreCol.visible = !isExternal;
				this.otherSamplePrepMethodCol.visible = !isExternal;
				this.seqLibProtocolCol.visible = !isExternal;
				
				this.descriptionColumn.visible = (parentDocument.request.@hasSampleDescription == "Y");
				
				if (currentState != null && currentState.indexOf('SolexaSamples') >= 0 ) {
					numberSequencingLanesCol.visible = !parentDocument.isEditState() && !parentDocument.isAmendState() && !isExternal;
					numberSequencingLanesCol.editable = true;
					numberSequencingCyclesCol.visible = !parentDocument.isEditState() && !isExternal;
					this.qual260_230Col.visible = false;
					
					meanInsertSizeActual.visible = parentDocument.request.@idRequest != 0 && (parentDocument.isEditState() || parentDocument.isAmendState());
					
					if (parentDocument.currentState == "SolexaLaneAmendState") {
						numberSequencingLanesCol.editable = false;
						additionalNumberSequencingLanesCol.visible = true;
						existingNumberSequencingLanesCol.visible = true;
					} else if (parentDocument.currentState == "SolexaBaseAmendState") {
						numberSequencingLanesCol.editable = false;
						numberSequencingLanesCol.visible = true;
						numberSequencingLanesCol.editable = true;
					}
					
					if (parentDocument.isEditState() ||
						parentDocument.sampleSetupView.currentState == "SolexaSetupPreppedState" ||
						parentDocument.sampleSetupView.currentState == "SolexaAmendPreppedState" ) {
						seqLibProtocolCol.visible = !isExternal;
					} else {
						seqLibProtocolCol.visible = false;
					}
					
					idSeqRunTypeCol.visible = !parentDocument.isEditState() && !isExternal; 
					concentrationUnitColumn.visible = !isExternal;
					concentrationUnitColumn.editable = false;
					sampleOrganismColumn.editable = !isExternal;
					chipTypeColumn.visible = false; 
				}
				
				this.addOrganismButton.visible = this.sampleOrganismColumn.visible && !isExternal;
				this.addOrganismButton.includeInLayout = this.addOrganismButton.visible;

				if (!parentDocument.isEditState()) {
					if (parentDocument.theTab.contains(parentDocument.confirmView)) {
						parentDocument.confirmView.showHideColumns();									
					}
				}
			}

			private function refreshLanesGrid():void {
				parentDocument.confirmView.lanesConfirmGrid.invalidateList();
				parentDocument.confirmView.lanesConfirmGrid.invalidateDisplayList();
			}
			
			private function toggleShowCCNumber():void {
				if (!this.showCCNumberCheckbox.selected) {
					for each(var s:XML in parentDocument.samples) {
						s.@ccNumber = '';
					}
				}
			}
			
			private function areIndexTagsUnique():Boolean {
				var isValid:Boolean = true;
				var barcodeField:String = "";
				if (parentDocument.showSampleCustomBarcodes()) {
					barcodeField = "@barcodeSequence";
				} else if (parentDocument.showSampleBarcodes()) {
					barcodeField = "@idOligoBarcode";
				} else {
					return isValid;
				}
				
				var sampleMap:Object = new Object();
				for each(var s:Object in parentDocument.samples) {
					var samplesForIndexGroup:XMLListCollection = sampleMap[s.@multiplexGroupNumber];
					if (samplesForIndexGroup == null) {
						samplesForIndexGroup = new XMLListCollection();
					}
					samplesForIndexGroup.addItem(s);
					sampleMap[s.@multiplexGroupNumber] = samplesForIndexGroup;
				}
				
				for (var multiplexGroupNumber:Object in sampleMap) {
					var samplesInGroup:XMLListCollection = sampleMap[multiplexGroupNumber];
					var tagMap:Object = new Object();
					for each(var s1:Object in samplesInGroup) {
						var barcode:Object = s1[barcodeField];
						tagMap[barcode] = barcode;
					}
					var uniqueTagCount:int = 0;
					for (var tm:Object in tagMap) {
						uniqueTagCount++;
					}
					if (uniqueTagCount < samplesInGroup.length) {
						isValid = false;
						break;
					}
				}
				return isValid;
			}
			
			private function onDragDropSample(event:DragEvent) : void
			{
				var dropNode:Object = null;
				if (idx > 0) {
					idx--;
				}
				var idx:int = samplesGrid.calculateDropIndex(event);
				var renderer:Object = samplesGrid.indexToItemRenderer(idx); 
				if (renderer != null) {
					dropNode = renderer.data; 
				}
				
				if (dropNode == null) {
					event.preventDefault();
					return;
				}
				
				var draggedFormat:String = event.dragSource.formats[0];
				var draggedItems:Array = event.dragSource.dataForFormat(draggedFormat) as Array;	
				if (draggedItems != null) {
					for(var i:int = 0; i < draggedItems.length; i++) {
						var dragItem:XML = XML(draggedItems[i]);
						dragItem.@multiplexGroupNumber = dropNode.@multiplexGroupNumber;
					}	 
				} else {
					event.preventDefault();
				}
			}		
			
			private function sortBarcodes(obj1:Object, obj2:Object, fields:Array=null):int {
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var scheme1:String = obj1.@oligoBarcodeSchemeDisplay;
					var scheme2:String = obj2.@oligoBarcodeSchemeDisplay;
					
					if (scheme1 < scheme2) {
						return -1;
					} else if (scheme1 > scheme2) {
						return 1; 
					} else {
						var order1:int = obj1.@sortOrder;
						var order2:int = obj2.@sortOrder;
						
						if (obj1.@value == '') {
							return -1;
						} else if (obj2.@value == '') {
							return 1;
						} else {
							if (order1 < order2) {
								return -1;
							} else if (order1 > order2) {
								return 1;
							} else {
								return 0;
							}
						}
						
					}
					
				}			
			}

			public function getIndexTagName(item:Object):String
			{
				if (item.@idOligoBarcode != '') {
					return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.OligoBarcode", item.@idOligoBarcode);    		
				} else {
					return '';
				}
			}
			public function getIndexTagNameB(item:Object):String
			{
				if (item.@idOligoBarcodeB != '') {
					return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.OligoBarcode", item.@idOligoBarcodeB);    		
				} else {
					return '';
				}
			}

		]]>
	</mx:Script>	
	<mx:Sort id="barcodeSort"  compareFunction="sortBarcodes"/>
	<mx:XMLListCollection id="barcodes" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OligoBarcode').DictionaryEntry}" sort="{barcodeSort}"/>
	<mx:XMLList id="barcodeList"/>
	
	<mx:VBox width="100%" height="100%" verticalGap="2" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
		<mx:HBox width="100%" id="topBox">
			<mx:CheckBox id="showCCNumberCheckbox" 
						 selected="false"
						 click="toggleShowCCNumber()"  
						 visible="{parentApplication.isInternalExperimentSubmission &amp;&amp; parentApplication.isBSTLinkageSupported &amp;&amp; currentState != 'CapSeqState'}"
						 includeInLayout="{parentApplication.isInternalExperimentSubmission &amp;&amp; parentApplication.isBSTLinkageSupported  &amp;&amp; currentState != 'CapSeqState'}" 
						 label="Link to BST samples using CC Number" />
			<mx:LinkButton label="Add Organism ..." textDecoration="underline" styleName="blueLinkButton" click="addOrganism()" id="addOrganismButton"/>		  	
			<mx:TextArea styleName="instructionBox" width="{parentApplication.isInternalExperimentSubmission ? 590 : 0}" wordWrap="true" height="{parentApplication.isInternalExperimentSubmission ? 88 : 0}" visible="{parentApplication.isInternalExperimentSubmission}" id="textarea1" verticalScrollPolicy="off" horizontalScrollPolicy="off">
				<mx:htmlText><![CDATA[Instructions<br>  1.  Mandatory: Fill in the following highlighted fields:  sample name, label, and concentration.<br>  2.  Optional: Any annotation characteristic that you selected from the previous screen appears on this screen <br>       as a highlighted column. Please type desired information under the highlighted field with the annotation header.<br>  3.  Optional: Provide a short description of your sample in the non-highlighted description field.<br>  4.  After completing all line items, click the 'Next' button at the bottom of the page to proceed.]]></mx:htmlText>
			</mx:TextArea>
			
		</mx:HBox>
		<mx:Spacer width="8"/>
		<mx:HBox width="100%">
			<mx:LinkButton textDecoration="underline" id="downloadButton" label="Download sample sheet" click="{downloadSampleSheet()}"   color="#0000FF" icon="@Embed(source='../../assets/download.png')"/>
			<mx:HBox id="buttonsContainer" horizontalGap="2">
				<mx:LinkButton textDecoration="underline"  label="Upload Illumina sample sheet" click="uploadSampleSheet();" icon="@Embed(source='../../assets/upload.png')" id="uploadSampleSheetButton" toolTip="Upload sample sheet&#13;(tab delimited txt file)" />
				<mx:LinkButton textDecoration="underline" id="uploadHintLink" icon="@Embed(source='../../assets/information.png')" visible="{uploadSampleSheetButton.visible}" includeInLayout="{uploadSampleSheetButton.visible}"
							   label="Upload help" 
							   click="PopUpManager.centerPopUp(PopUpManager.createPopUp(this, UploadSampleSheetInstructionsView, true));"
							   toolTip=" 1.  Download the sample sheet or create your own table&#13;       in a program like Excel.&#13; 2.  Fill in the table for all the samples.&#13; 3.  Save the file as a tab-delimited txt file.&#13; 4.  Click 'Upload sample sheet' and select the file you created."/>
				<mx:LinkButton textDecoration="underline" label="Add sample" click="addSample();this.initializeBarcoding();checkSamplesCompleteness()" icon="@Embed(source='../../assets/add.png')" id="addSampleButton" toolTip="Add sample" />
				<mx:LinkButton textDecoration="underline" label="Copy sample" click="copyTheSample();" icon="@Embed('../../assets/table_multiple.png')" id="copySampleButton" toolTip="Copy sample(s)" />
				<mx:LinkButton textDecoration="underline" label="Delete sample" click="deleteTheSample()" icon="@Embed(source='../../assets/delete.png')" id="deleteSampleButton" toolTip="Delete sample(s)" />
				<mx:LinkButton textDecoration="underline" label="Clear all" click="promptToClearAllSamples();deleteSample();" icon="@Embed('../../assets/folder_delete.png')" id="clearSamplesButton" toolTip="Clear all samples" />
				<mx:LinkButton textDecoration="underline" label="Copy column" click="copyColumn();" icon="@Embed('../../assets/table_multiple.png')" id="copyColumnButton" toolTip="Copy contents of one column to another" />
			</mx:HBox>
		</mx:HBox>
		
		<mx:AdvancedDataGrid width="100%" height="100%" id="samplesGrid"  
							 editable="true"
							 allowMultipleSelection="false" 
							 itemFocusOut="checkSamplesCompleteness()" 
							 horizontalScrollPolicy="auto" 
							 variableRowHeight="true"
							 sortableColumns="false"
							 sortExpertMode="true"  
							 dragDrop="onDragDropSample(event)"
							 defaultLeafIcon="{null}" 
							 iconFunction="getSampleTreeIcon"
							 displayItemsExpanded="true"  
							 selectionColor="#DDF3FB">
			<mx:columns>
				<mx:AdvancedDataGridColumn id="multiplexGroupNumberColumn" headerText="Index Tag Group" dataField="@multiplexGroupNumberDisplay" editable="false" visible="true"
										   width="60">
					<mx:headerRenderer>
						<mx:Component>
							<mx:VBox horizontalScrollPolicy="off" verticalGap="0">
								<mx:Label text="Index Tag"/>
								<mx:Label text="Group"/>
							</mx:VBox> 
						</mx:Component> 
					</mx:headerRenderer> 
				</mx:AdvancedDataGridColumn>
				<mx:AdvancedDataGridColumn id="sampleRowNumberCol" visible="true" editable="false" headerText=""  width="25" resizable="false" labelFunction="parentDocument.getSamplesGridRowNumber"/>
				<mx:AdvancedDataGridColumn id="wellNameCol" visible="false" editable="false" headerText="Well"  width="40" resizable="false" dataField="@wellName"/>
				<mx:AdvancedDataGridColumn id="sampleNumberCol" headerText="ID" width="80" visible="true"  dataField="@number"  editable="false"/>        
				<mx:AdvancedDataGridColumn headerText="Sample Name" width="100" editorDataField="text" dataField="@name" rendererIsEditor="false"
										   id="sampleNameCol"
										   editable="true" 
										   itemRenderer="{hci.flex.controls.Label.create('@name')}"                
										   itemEditor="{views.renderers.TextInputSampleName.create(currentState)}"      />    
				
				<mx:AdvancedDataGridColumn headerText="Conc." id="concentrationCol" visible="{parentApplication.isInternalExperimentSubmission}"  width="42" dataField="@concentration" rendererIsEditor="false"
										   itemRenderer="{hci.flex.controls.Label.create('@concentration')}"                
										   itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSampleConcentration(), '')}" editorDataField="value" />          
				<mx:AdvancedDataGridColumn id="concentrationUnitColumn" visible="true" width="40" headerText="Unit" dataField="@codeConcentrationUnit" 
										   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"  
										   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ConcentrationUnit').DictionaryEntry, '@display', '@value', '@codeConcentrationUnit')}"                
										   itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ConcentrationUnit').DictionaryEntry, '@display', '@value', '@idConcentrationUnit', true).newInstance(), '')}"/>
				
				<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sourcePlateCol" visible="false" editable="true" headerText="Source Plate" width="150" resizable="false"
													 dataField="@sourcePlate" rendererIsEditor="false" editorDataField="value" sortable="false"
													 itemRenderer="{views.renderers.DropdownLabel.create(parentDocument.cherryPlateList, '@name', '@name', '@sourcePlate')}"                
													 itemEditor="{hci.flex.controls.ComboBox.getFactory(parentDocument.cherryPlateList, '@name', '@name', '@sourcePlate', true)}"/>
				<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sourceWellCol" visible="false" editable="true" headerText="Source Well" width="75" resizable="false"
													 dataField="@sourceWell" rendererIsEditor="false" editorDataField="value" sortable="false"
													 itemRenderer="{views.renderers.DropdownLabel.create(parentDocument.wellList, '@name', '@name', '@sourceWell')}"                
													 itemEditor="{hci.flex.controls.ComboBox.getFactory(parentDocument.wellList, '@name', '@name', '@sourceWell', true)}"/>
				<mx:AdvancedDataGridColumn id="destinationWellCol" visible="false" editable="false" headerText="Dest. Well" width="75" resizable="false"
										   dataField="@destinationWell" sortable="false"/>
				
				<mx:AdvancedDataGridColumn id="descriptionColumn" headerText="Sample Description" visible="false" width="140" dataField="@description" wordWrap="true"  itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" editorDataField="value"/>
				
				
				<mx:AdvancedDataGridColumn id="existingNumberSequencingLanesCol" 
										   headerText="# Lanes to Sequence" width="72" 
										   dataField="@sequenceLaneCount" 
										   editable="false">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								<mx:Label text="Existing #"/> 
								<mx:Label text="Seq Lanes"/> 
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn> 
				
				
				<mx:AdvancedDataGridColumn id="numberSequencingLanesCol" headerText="# Lanes to Sequence" width="72" dataField="@numberSequencingLanes" 
										   editable="false"
										   rendererIsEditor="false"
										   itemRenderer="{hci.flex.controls.Label.create('@numberSequencingLanes')}"         
										   itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSampleNumberSeqLanes(), '')}" editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								<mx:Label text="# Seq"/> 
								<mx:Label text="Lanes"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>  
				
				
				<mx:AdvancedDataGridColumn id="additionalNumberSequencingLanesCol" 
										   headerText="# Lanes to Sequence" width="72" 
										   dataField="@numberSequencingLanes" 
										   editable="true"
										   rendererIsEditor="false"
										   itemRenderer="{hci.flex.controls.Label.create('@numberSequencingLanes')}"         
										   itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSampleNumberSeqLanes(), '')}" editorDataField="value" >
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								<mx:Label text="Addtl #"/> 
								<mx:Label text="Seq Lanes"/> 
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn> 
				
				<mx:AdvancedDataGridColumn id="ccNumber" headerText="CC Number" dataField="@ccNumber" editable="true" 
										   visible="{showCCNumberCheckbox.visible &amp;&amp; showCCNumberCheckbox.selected &amp;&amp; !parentDocument.isSequencingState() ? true : false}"
										   width="76"
										   itemRenderer="{hci.flex.controls.Label.createCustom('@ccNumber', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
										   itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.TextInput.create('@ccNumber').newInstance(), '')}" editorDataField="value"/>
				
				<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sampleTypeCol"  headerText="Sample Type" visible="true" width="180"   dataField="@idSampleType" 
													 editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
													 itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType')}"                 
													 itemEditor="{views.renderers.GridColumnFillButton.create(ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType', '@canChangeSampleType', true).newInstance(), '')}"/>
				<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sampleOrganismColumn" visible="true" width="170" headerText="Organism"  dataField="@idOrganism" 
													 editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"   
													 itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OrganismLite').DictionaryEntry, '@display', '@value', '@idOrganism')}"                
													 itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OrganismLite').DictionaryEntry, '@display', '@value', '@idOrganism', true).newInstance(), '')}"/>
				<mx:AdvancedDataGridColumn id="otherOrganismCol" headerText="Organism (other)" 
										   width="140" dataField="@otherOrganism"
										   visible="false"
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value"/> 
				
				<mx:AdvancedDataGridColumn id="multiplexGroupNumberEditColumn" headerText="Index Tag Group" dataField="@multiplexGroupNumber" editable="true" visible="true"
										   width="54">
					<mx:headerRenderer>
						<mx:Component>
							<mx:VBox horizontalScrollPolicy="off" verticalGap="0">
								<mx:Label text="Index tag"/>
								<mx:Label text="Group"/>
							</mx:VBox> 
						</mx:Component> 
					</mx:headerRenderer> 
				</mx:AdvancedDataGridColumn>
				<mx:AdvancedDataGridColumn id="seqLibProtocolCol" headerText="Seq Lib Protocol" visible="{true}"  width="180" dataField="@idSeqLibProtocol" 
										   editorDataField="value" sortable="false" editable="{isEditState}" rendererIsEditor="false"
										   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqLibProtocol').DictionaryEntry, '@display', '@value', '@idSeqLibProtocol')}"                
										   itemEditor="{views.renderers.GridColumnFillButton.create(ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqLibProtocol').DictionaryEntry, '@display', '@value', '@idSeqLibProtocol', '@canChangeSampleSource', true).newInstance(), '')}"/>
				
				
				<util:AdvancedDataGridColumnWithType propertyType="OPTION" 
													 id="barcodeColumn" 
													 visible="true" 
													 headerText="Index Tag A" 
													 width="130" 
													 dataField="@idOligoBarcode" 
													 sortable="false" 
													 editable="true" 
													 rendererIsEditor="false" 
													 itemRenderer="{views.renderers.DropdownLabel.create(barcodeList, '@display', '@value', '@idOligoBarcode')}">
					<util:itemEditor>
						<mx:Component>
							<renderers:FilterComboBoxOligoBarcode idSeqLibProtocol="{data.@idSeqLibProtocol}"
																  parentApp="{outerDocument.parentApplication}"
																  fontSize="10"
																  prompt="{null}"
																  indexTagLetter="A"
																  filterString="{outerDocument.getIndexTagName(data)}"
																  text="{outerDocument.getIndexTagName(data)}"
																  labelFunction="{outerDocument.getIndexTagName}"
																  removeFilterOnSelection="false"
																  removeInputOnFocusOut="false"
																  focusOut="{selectedItem!=null ? data.@idOligoBarcode = selectedItem.@idOligoBarcode : data.@idOligoBarcode = data.@idOligoBarcode;}">
							</renderers:FilterComboBoxOligoBarcode>
						</mx:Component>
					</util:itemEditor> 					
				</util:AdvancedDataGridColumnWithType>
				<util:AdvancedDataGridColumnWithType propertyType="OPTION" 
													 id="barcodeColumnB" 
													 headerText="Index Tag B" 
													 visible="true" 
													 width="130" 
													 dataField="@idOligoBarcodeB" 
													 sortable="false" 
													 editable="true" 
													 rendererIsEditor="false" 
													 itemRenderer="{views.renderers.DropdownLabel.create(barcodeList, '@display', '@value', '@idOligoBarcodeB')}">
					<util:itemEditor>
						<mx:Component>
							<renderers:FilterComboBoxOligoBarcode idSeqLibProtocol="{data.@idSeqLibProtocol}"
																  parentApp="{outerDocument.parentApplication}"
																  fontSize="10"
																  prompt="{null}"
																  indexTagLetter="B"
																  filterString="{outerDocument.getIndexTagNameB(data)}"
																  text="{outerDocument.getIndexTagNameB(data)}"
																  labelFunction="{outerDocument.getIndexTagName}"
																  removeFilterOnSelection="false"
																  removeInputOnFocusOut="false"
																  focusOut="{selectedItem!=null ? data.@idOligoBarcodeB = selectedItem.@idOligoBarcode : data.@idOligoBarcodeB = data.@idOligoBarcodeB;}">
							</renderers:FilterComboBoxOligoBarcode>
						</mx:Component>
					</util:itemEditor> 					
				</util:AdvancedDataGridColumnWithType>
				<mx:AdvancedDataGridColumn id="customBarcodeColumn" headerText="Index Tag Sequence" dataField="@barcodeSequence" editable="true" visible="true"
										   width="80"
										   itemRenderer="views.renderers.LabelBarcodeSequence"               
										   itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.TextInput.create('@barcodeSequence').newInstance(), '')}" editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								<mx:Label text="Index Tag"/> 
								<mx:Label text="Sequence"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>  
				
				
				
				<mx:AdvancedDataGridColumn headerText="Sample Sequence Lane Type" id="idSeqRunTypeCol" visible="{currentState == 'SolexaSamplesState'  &amp;&amp; parentApplication.isInternalExperimentSubmission}"  editable="{!parentApplication.isInternalExperimentSubmission}" width="150" dataField="@idSeqRunType"
										   rendererIsEditor="false" editorDataField="value" 
										   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry, '@display', '@value', '@idSeqRunType')}"
										   itemEditor="{views.renderers.GridColumnFillButton.create(ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry, '@display', '@value', '@idSeqRunType', '@canChangeSeqRunType', false).newInstance(), '')}">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								<mx:Label text="Sample Sequence Lane"/>
								<mx:Label text="Type"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				<mx:AdvancedDataGridColumn headerText="# Seq Cycles" id="numberSequencingCyclesCol" visible="{currentState == 'SolexaSamplesState' &amp;&amp; parentApplication.isInternalExperimentSubmission}"  width="70" dataField="@idNumberSequencingCycles" 
										   rendererIsEditor="false" editorDataField="value" 
										   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry, '@display', '@value', '@idNumberSequencingCycles')}"                
										   itemEditor="{views.renderers.GridColumnFillButton.create(ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry, '@display', '@value', '@idNumberSequencingCycles', '@canChangeNumberSequencingCycles', true).newInstance(), '')}">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								<mx:Label text="# Seq"/>
								<mx:Label text="Cycles"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				
				<mx:AdvancedDataGridColumn id="preppedByCoreCol" headerText="Core to prep lib?"   visible="{true}" width="60"  dataField="@seqPrepByCore"
										   itemRenderer="{hci.flex.controls.Label.create('@seqPrepByCore')}"                
										   itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSeqPrepByCore(), '')}" editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								<mx:Label text="Core to"/>
								<mx:Label text="prep lib?"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>          
				
				<mx:AdvancedDataGridColumn id="otherSamplePrepMethodCol" headerText="Nucl. acid extraction meth." 
										   width="140" dataField="@otherSamplePrepMethod" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" editorDataField="value"/> 
				
				
				<mx:AdvancedDataGridColumn id="chipTypeColumn" visible="{parentDocument.request.@codeRequestCategory != 'QC' &amp;&amp; !isExternal ? false : true}" headerText="Chip Type" width="150" dataField="@codeBioanalyzerChipType" 
										   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
										   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@codeBioanalyzerChipType')}"                
										   itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@codeBioanalyzerChipType', true).newInstance(), '')}"/>
				<mx:AdvancedDataGridColumn visible="{!isExternal &amp;&amp; isEditState}" 
										   editable="{parentApplication.hasPermission('canWriteAnyObject')}" 
										   headerText="QC Conc. ng/uL" 
										   width="80" 
										   dataField="@qualCalcConcentration" 
										   id="qualCalcConcCol" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value"/>
				<mx:AdvancedDataGridColumn id="meanInsertSizeActual" visible="false" headerText="Actual Mean Insert Size" width="90" dataField="@meanInsertSizeActual" editable="true"/>
				<mx:AdvancedDataGridColumn visible="{!isExternal &amp;&amp; isEditState}" 
										   editable="{parentApplication.hasPermission('canWriteAnyObject')}" 
										   headerText="QC 260/230" 
										   width="80" 
										   dataField="@qual260nmTo230nmRatio" 
										   id="qual260_230Col" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value"/>
				<mx:AdvancedDataGridColumn id="qc_260_280Column"
										   editable="{parentApplication.hasPermission('canWriteAnyObject')}" 
										   headerText="QC 260/280" width="80" 
										   dataField="@qual260nmTo280nmRatio" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value"/>
				<mx:AdvancedDataGridColumn visible="{!isExternal &amp;&amp; isEditState}" 
										   editable="{parentApplication.hasPermission('canWriteAnyObject')}" 
										   headerText="QC RIN" 
										   width="70" 
										   dataField="@qualRINNumber" 
										   id="qualRINCol" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value"/>
				<mx:AdvancedDataGridColumn visible="{!isExternal &amp;&amp; isEditState}" 
										   editable="{parentApplication.hasPermission('canWriteAnyObject')}" 
										   headerText="QC Frag size (from)" 
										   width="87" 
										   dataField="@qualFragmentSizeFrom" 
										   id="qualFragSizeFromCol" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value"/>
				<mx:AdvancedDataGridColumn visible="{!isExternal &amp;&amp; isEditState}" 
										   editable="{parentApplication.hasPermission('canWriteAnyObject')}" 
										   headerText="QC Frag size (to)" 
										   width="87" 
										   dataField="@qualFragmentSizeTo" 
										   id="qualFragSizeToCol" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value"/>
				<mx:AdvancedDataGridColumn visible="{!isExternal &amp;&amp; isEditState}" headerText="QC Status" width="90" dataField="@qualStatus" id="qualStatusCol"
										   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"  itemRenderer="mx.controls.Label" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(ComboBoxWorkflowStatus.create('@qualStatus').newInstance(), '')}"/>
				
				<mx:AdvancedDataGridColumn  id="seqPrepStatus" visible="true" headerText="Seq Prep Status" width="90" dataField="@seqPrepStatus"
											sortable="false" editable="true" rendererIsEditor="false"  itemRenderer="mx.controls.Label" 
											itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSampleNumberSeqLanes(), '')}" editorDataField="value"  />
				
			</mx:columns>
		</mx:AdvancedDataGrid>
		
		
		
	</mx:VBox>
	
	<exp:states>
		<mx:State name="SamplesEditState" >
			<mx:RemoveChild target="{textarea1}"/>
			<mx:RemoveChild target="{clearSamplesButton}"/>
			<mx:RemoveChild target="{addSampleButton}"/>
		</mx:State>
		
		<mx:State name="SamplesAdminState">
			<mx:RemoveChild target="{textarea1}"/>
		</mx:State>
		
		
		<mx:State name="SolexaSamplesState" >
			<mx:SetProperty target="{textarea1}" name="htmlText">
				<mx:value><![CDATA[Instructions<br>  1.  Mandatory: Fill in the following highlighted fields:  sample name and concentration<br>  2.  Optional: Any annotation characteristic that you selected from the previous screen appears on this screen <br>       as a highlighted column. Please type desired information under the highlighted field with the annotation header.<br>  3.  Optional: Provide a short description of your sample in the non-highlighted description field.<br>  4.  After completing all line items, click the 'Next' button at the bottom of the page to proceed.]]></mx:value>
			</mx:SetProperty>
			<mx:SetProperty target="{textarea1}" name="editable" value="false"/>
		</mx:State>
		<mx:State name="SolexaSamplesEditState" basedOn="SamplesEditState" >
		</mx:State>
		<mx:State name="SolexaSamplesAdminState" basedOn="SamplesAdminState" >
			<mx:RemoveChild target="{addSampleButton}"/>
			<mx:RemoveChild target="{clearSamplesButton}"/>
			
		</mx:State>
		
	</exp:states>
	
</exp:TabSamplesBase>
