<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="Sample setup" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:util="views.util.*" 
	 width="100%" height="100%" >
<mx:Script>
	<![CDATA[
		import mx.events.ListEvent;
		import views.renderers.CheckBoxIsSelectedChipType;
	
		private var validNumberOfSamples:Boolean = true;
		private var validConcentration:Boolean = true;

	
		public function getSelectedCodeBioanalyzerChipType():String {
			var selectedCode:String = '';
			if (this.currentState == 'QCSetupBioanalyzerState') {
				for each(var item:Object in this.bioanalyzerChipTypeGrid.dataProvider) {
					if (item.@isSelected != null && item.@isSelected == "true") {
						selectedCode = item.@value;
						break;
					}
				} 
			}
			return selectedCode;
		}
		public function propagateChipType():void {
       		var codeChipType:String = this.getSelectedCodeBioanalyzerChipType();
			for each (var sample:Object in parentDocument.samples) {
				sample.@codeBioanalyzerChipType = codeChipType;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
		public function propagateSeqPrepByCore():void {
       		for each (var sample:Object in parentDocument.samples) {
				sample.@seqPrepByCore = (currentState == 'SolexaSetupState' ? 'Y' : 'N');
			}

		}

		
       	private function propagateSampleType():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idSampleType = this.sampleTypeCombo.selectedItem.@value;
			}
			propagateSamplePrepMethod();
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateSamplePrepMethod():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idSamplePrepMethod = this.samplePrepMethodCombo.selectedItem != null ? this.samplePrepMethodCombo.selectedItem.@value : '';
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateSeqLibProtocol():void {
			for each (var sample:Object in parentDocument.samples) {
				if (currentState == 'SolexaSetupPreppedState') {
					sample.@idSeqLibProtocol = this.seqLibProtocolCombo.selectedItem != null ? this.seqLibProtocolCombo.selectedItem.@value : '';
				} else {
					sample.@idSeqLibProtocol = '';
				}
			}
			if (currentState == 'SolexaSetupState') {
				propagateDefaultSeqRunType();
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}		
		private function propagateDefaultSeqRunType():void {
			var idSeqRunType:String = this.getDefaultIdSeqRunType();
			for each (var sample:Object in parentDocument.samples) {
				sample.@idSeqRunType = idSeqRunType;
			}			
		}
       	private function propagateSampleOrganism():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idOrganism = this.sampleOrganismCombo.selectedItem.@value;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	
		
		public function toggleOtherChipTypeSelections(codeSelected:String):void {
			
			for each(var item:Object in this.bioanalyzerChipTypeGrid.dataProvider) {
				if (item.@value != codeSelected) {
					item.@isSelected = "false";
				}
			}
		}
		
		private function propagateSeqRunType():void {
			if (parentDocument.isSolexaState()) {
				this.parentDocument.seqSetup1View.propagateSeqRunType();
			}
		}
		
		private function selectDefaultGenomeBuild():void {
			if (parentDocument.isSolexaState()) {
				this.parentDocument.seqSetup1View.selectDefaultGenomeBuild();
			}
		}
		public function selectDefaultSamplePrepMethod():void {
			if (sampleTypeCombo.selectedItem == null || sampleTypeCombo.selectedItem.@value == '') {
				return;
			}
			if (samplePrepMethodCombo.dataProvider.length == 2) {
				samplePrepMethodCombo.selectedIndex = 1;
   				this.propagateSamplePrepMethod();
   				this.propagateSeqRunType();
   				this.checkSampleSetupCompleteness();
			} else if (samplePrepMethodCombo.dataProvider.length > 2) {
				for each(var item:Object in samplePrepMethodCombo.dataProvider) {

					var applicableSamplePrepMethods:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethodSampleType').DictionaryEntry.(@value != '' && @idSamplePrepMethod == item.@value.toString());
	        	   	for each (var xref:Object in applicableSamplePrepMethods) {
	        	   		if (xref.@idSampleType.toString() == sampleTypeCombo.selectedItem.@value.toString()) {
	    	   				if (xref.@isDefaultForSampleType == 'Y') {
	    	   					samplePrepMethodCombo.selectedItem = item;
	    	   					this.propagateSamplePrepMethod();
	    	   					this.propagateSeqRunType();
	    	   					this.checkSampleSetupCompleteness();
	    	   					break;
	    	   				}
	        	   		}
	        	   	}

				}
			}
		} 

		
		public function getDefaultIdSeqRunType():String {
			var idSeqRunType:String = "";
			for each(var item:Object in this.parentDocument.seqSetup1View.seqRunTypeCombo.dataProvider) {
				if (item.@display.toUpperCase().indexOf("SINGLE") > -1) {
					idSeqRunType = item.@value;
					break;
				}
			}
			return idSeqRunType;
		}
		
		private function toggleChipTypeCheck(event:ListEvent):void {
   			if (event.columnIndex == 0) {
	   			return;
   			}
   			if (bioanalyzerChipTypeGrid.selectedItem.@isSelected == "true") {
				bioanalyzerChipTypeGrid.selectedItem.@isSelected = "false";
			} else {
				bioanalyzerChipTypeGrid.selectedItem.@isSelected = "true";
			}
			toggleOtherChipTypeSelections(bioanalyzerChipTypeGrid.selectedItem.@value);
          	// initialize the samples grid
          	parentDocument.samplesView.initializeSamplesGrid();
          	// propagate selected chip type to samples
          	propagateChipType();       	
          	// check for sampleSetup completeness
          	checkSampleSetupCompleteness(); 
          	
            checkRequiredChipType();
        }
        
        public function checkRequiredChipType():void {
			// Required field
          	if (this.getSelectedCodeBioanalyzerChipType() == '') {
          		chipTypeBox.styleName = "requiredBoxThick";
          	} else {
          		chipTypeBox.styleName = "normalBoxThick";
          	}        	
        }
        
        public function checkForSampleTypeCompatibility():void {
        	if (!this.parentDocument.isSampleTypeCompatibile()) {
        		if (parentDocument.isEditState()) {
					var sampleType:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SampleType', parentDocument.request.@idSampleTypeDefault);
					var sampleTypeName:String = sampleType.@display.toString();
        			mx.controls.Alert.show('Sample type ' + sampleTypeName + 
	        		  ' cannot be used for ' + parentDocument.applicationName + 
	        		  ' experiments.  Please change the microarray application.',
	        		  'Warning');
        			
        		} else {
	        		this.parentDocument.userWarningsSampleSetup += 'Sample type ' + this.sampleTypeCombo.selectedItem.@display + 
	        		' cannot be used for ' + parentDocument.applicationName + 
	        		' experiments.  Please change the sample type or microarray application.';
        			
        		}

        		
        	}
        }



      	public function checkSampleSetupCompleteness():Boolean {
        	var isComplete:Boolean = false;
        	parentDocument.userWarningsSampleSetup = "";
        	if (parentDocument.isEditState()) {
        		isComplete = true;
        	}else if (parentDocument.isSolexaState()) {
	        	if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
	        	    this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '' &&
	        	    this.sampleOrganismCombo.selectedItem != null && this.sampleOrganismCombo.selectedItem.@value != '' &&
	        	    this.radioGroupSeqApp.selectedValue != null && this.radioGroupSeqApp.selectedValue != '' &&
	        	    this.barcodeRadioGroup.selectedValue != null && this.barcodeRadioGroup.selectedValue != '' && 
	        	    this.samplePrepMethodCombo.selectedItem != null && this.samplePrepMethodCombo.selectedItem.@value != '') {
	        	    	
	        	    if (currentState == 'SolexaSetupPreppedState') {
 						if (this.seqLibProtocolCombo.selectedItem != null && this.seqLibProtocolCombo.selectedItem.@value != '') {
 							isComplete = true;
 						}	        	    	
	        	    } else {
		        	    isComplete = true;
	        	    }
	        	    
	        	 }
        	
        	} else if (parentDocument.isQCState()) {
	        	if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
	        	    this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '' &&
	        	    this.samplePrepMethodCombo.selectedItem != null && this.samplePrepMethodCombo.selectedItem.@value != '' ) {
	        	    	
	        	   	// Only need to check if chip type selected if this is 
	        	   	// a bioanalyzer qc request.
	        	    if (this.currentState == 'QCSetupBioanalyzerState') {
		        		for each(var chipType:Object in this.bioanalyzerChipTypeGrid.dataProvider) {
		        			if (chipType.@isSelected == "true") {
		        				isComplete = true;
		        				break;
		        			}
		        		}	        	    	
	        	    } else {
	        	    	isComplete = true;
	        	    }
	        	}
        	} else {
	        	if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
	        	    this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '' &&
	        	    this.sampleOrganismCombo.selectedItem != null && this.sampleOrganismCombo.selectedItem.@value != '' &&
	        	    this.samplePrepMethodCombo.selectedItem != null && this.samplePrepMethodCombo.selectedItem.@value != '' ) {
					isComplete = true;	        	    	
	        	}
        	}
        	
        	if (!this.validNumberOfSamples ||
        	    !this.validConcentration) {
        		isComplete = false;    	
        	}
        	
        	if (parentDocument.isSolexaState()) {
        		parentDocument.seqSetup1View.enabled = isComplete; 
        	}else {
	    		parentDocument.samplesView.enabled = isComplete; 
        	}
    			
			if (parentDocument.theTab.contains(parentDocument.annotationView)) {
				parentDocument.annotationView.enabled = isComplete;        			
	    	}
    		parentDocument.enableNextButtons();

        	callLater(postSampleSetupCompleteness, [isComplete]);
        	
    		return isComplete;
    	    	
        }
        
        private function postSampleSetupCompleteness(isComplete:Boolean):void {
	    		
	    	if (!isComplete) {
	        	if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
		        	parentDocument.hybSetupView.enabled = false;
	        	} 
	
	        	if (parentDocument.theTab.contains(parentDocument.hybsView)) {
		        	parentDocument.hybsView.enabled = false;
	        	} 
	
	        	parentDocument.confirmView.enabled = false;
    		} else {
    			if (parentDocument.isSolexaState()) {
        			parentDocument.seqSetup1View.checkSeqSetup1Completeness();				
    			} else {
	    			parentDocument.samplesView.checkSamplesCompleteness();
    			}
    		}
        	
        }
        
        private function handleInvalidNumberOfSamples(eventObject:Event):void {
        	this.validNumberOfSamples = false;
        	this.checkSampleSetupCompleteness();
        }
        private function handleValidNumberOfSamples(eventObject:Event):void {
        	this.validNumberOfSamples = true;
        	this.checkSampleSetupCompleteness();
        }
        private function handleInvalidConcentration(eventObject:Event):void {
        	this.validConcentration = false;
        	this.checkSampleSetupCompleteness();
        }
        private function handleValidConcentration(eventObject:Event):void {
        	this.validConcentration = true;
        	this.checkSampleSetupCompleteness();
        }

		private function pickSeqApp():void {
			if (this.radioGroupSeqApp.selectedValue != null) {
				this.seqAppBox.styleName = 'normalBox';
				var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', radioGroupSeqApp.selectedValue);
				this.parentDocument.applicationName = application.@display;
			} else {
				this.seqAppBox.styleName = 'requiredBox';
				this.parentDocument.applicationName = '';
			}
			
			this.sampleTypeCombo.selectedIndex = -1;
			parentDocument.filteredSampleTypeList.refresh();
			this.samplePrepMethodCombo.selectedItem = null;
			if (parentDocument.filteredSampleTypeList.length == 2) {
				this.sampleTypeCombo.selectedIndex = 1;
				parentDocument.samplePrepMethodList.refresh();
				selectDefaultSamplePrepMethod();
			}
			
			if (this.parentDocument.isSolexaState()) {
				parentDocument.seqLibProtocolList.refresh();				
			}
			
			if (this.currentState == "SolexaSetupPreppedState") {
				this.seqLibProtocolCombo.selectedIndex = -1;
				if (parentDocument.seqLibProtocolList.length == 2) {
					this.seqLibProtocolCombo.selectedIndex = 1;
					this.propagateSeqLibProtocol();
				}
				
			}

			this.checkSampleSetupCompleteness();
			
		}
		
		public function pickRadioBarcoding():void {
			if (this.barcodeRadioGroup.selectedValue != null) {
				this.barcodeRadioBox.styleName = 'normalBox';				
			} else {
				this.barcodeRadioBox.styleName = 'requiredBox';				
			}
			this.checkSampleSetupCompleteness();
			this.parentDocument.seqSetup1View.pickBarcodeScheme();
		}
		
		private function pickQCApp():void {
			if (this.radioGroupQCApp.selectedValue != null && this.radioGroupQCApp.selectedValue == "BIOAN") {
				this.currentState = "QCSetupBioanalyzerState";
				this.parentDocument.samplesView.chipTypeColumn.visible = true;
				this.parentDocument.confirmView.chipTypeConfirmColumn.visible = true;
			} else {
				this.currentState = "QCSetupState";
				this.parentDocument.samplesView.chipTypeColumn.visible = false;
				this.parentDocument.confirmView.chipTypeConfirmColumn.visible = false;
			}
			
			if (this.radioGroupQCApp.selectedValue != null) {
				this.qcAppBox.styleName = 'normalBox';
				var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', radioGroupQCApp.selectedValue);
				this.parentDocument.applicationName = application.@display;
			} else {
				this.qcAppBox.styleName = 'requiredBox';
				this.parentDocument.applicationName = '';
			}
			this.sampleTypeCombo.selectedIndex = -1;
			parentDocument.filteredSampleTypeList.refresh();
			if (parentDocument.filteredSampleTypeList.length == 2) {
				this.sampleTypeCombo.selectedIndex = 1;
			}
			this.checkSampleSetupCompleteness();
		}
		
		private function pickSampleType():void {
				samplePrepMethodCombo.selectedIndex=0;
				parentDocument.samplePrepMethodList.refresh();
				selectDefaultSamplePrepMethod();
				propagateSampleType();
				parentDocument.samplesView.initializeSamplesGrid();
				checkSampleSetupCompleteness();
				this.checkForSampleTypeCompatibility();
		}
		
		private function pickOrganism():void {
			parentDocument.samplesView.initializeSamplesGrid();
			parentDocument.hybSetupView.organismCombo.selectedItem = sampleOrganismCombo.selectedItem;
			propagateSampleOrganism();
			checkSampleSetupCompleteness();

			if (this.currentState == 'SolexaSetupState' ||
			    this.currentState == 'SolexaSetupPreppedState') { 
				parentDocument.filteredGenomeBuildList.refresh();
				selectDefaultGenomeBuild();			
			}
			
		}
		
		private function pickSamplePrepMethod():void {
			parentDocument.samplesView.initializeSamplesGrid();
			propagateSamplePrepMethod();
			checkSampleSetupCompleteness();
			
			if (this.currentState == 'SolexaSetupState' ||
			    this.currentState == 'SolexaSetupPreppedState') { 
				parentDocument.filteredSeqRunTypeList.refresh();			    					
			}
		}
		
		private function pickSeqLibProtocol():void {
			parentDocument.samplesView.initializeSamplesGrid();
			propagateSeqLibProtocol();
			checkSampleSetupCompleteness();
			parentDocument.filteredSeqRunTypeList.refresh();			
		}
		
		private function pickSeqPrepState():void {
			if (seqPrepRadioGroup.selectedValue ==  null || seqPrepRadioGroup.selectedValue == 'Y') {
				currentState = 'SolexaSetupState';
			} else {
				currentState = 'SolexaSetupPreppedState';
			}
			this.propagateSeqPrepByCore();
			seqLibProtocolCombo.selectedIndex = 0;
			propagateSeqLibProtocol();
			parentDocument.seqLibProtocolList.refresh();
			checkSampleSetupCompleteness();
			parentDocument.samplesView.showHideColumns();
		}
	]]>
</mx:Script>

    <mx:NumberValidator id="numberOfSamplesValidator" source="{numberOfSamples}" property="text" 
         required="true" allowNegative="false" domain="int" maxValue="100" />
    <mx:NumberValidator id="organismValidator"
        source="{this.sampleOrganismCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" />
    <mx:NumberValidator id="sampleTypeValidator"
        source="{this.sampleTypeCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" />
    <mx:NumberValidator id="samplePrepMethodValidator"
        source="{this.samplePrepMethodCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" />
        
  <mx:Canvas width="100%" height="100%">
        	
	<mx:VBox width="100%" height="100%" verticalGap="2">
		<mx:VBox width="100%" height="100%"  paddingTop="2"  verticalGap="12" id="sampleSetupContainer">
			<mx:HBox width="100%" horizontalGap="0" id="hbox3">
				<mx:Label text="(1) How many samples will you be submitting?" width="310"  id="label5"/>
				<mx:TextInput width="40" id="numberOfSamples" 
					valid="handleValidNumberOfSamples(event)" invalid="handleInvalidNumberOfSamples(event)"
>
					<mx:focusOut>parentDocument.samplesView.initializeSamplesGrid();checkSampleSetupCompleteness()</mx:focusOut>
				</mx:TextInput>							
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0">
				<mx:Label text="(2) Which category best describes your samples?" width="310" id="label8"/>
				<mx:ComboBox labelField="@display" width="300" id="sampleTypeCombo" 
					change="pickSampleType()" dataProvider="{parentDocument.filteredSampleTypeList}">							
				</mx:ComboBox>
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" id="sampleOrganismContainer">
				<mx:Label text="(3) Which organism is the source for these samples?" width="310" id="label7"/>
				<mx:ComboBox labelField="@display" width="300" id="sampleOrganismCombo" change="pickOrganism()">							
					<mx:dataProvider>{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry}</mx:dataProvider>
				</mx:ComboBox>
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" id="samplePrepContainer">
				<mx:Label text="(4) Select the nuceic acid extraction method." width="310" id="label2"/>
				<mx:ComboBox labelField="@display" width="300" id="samplePrepMethodCombo" change="pickSamplePrepMethod()" dataProvider="{parentDocument.samplePrepMethodList}">															
				</mx:ComboBox>
			</mx:HBox>
			
		</mx:VBox>
		
	</mx:VBox>
			<mx:VBox  horizontalAlign="center" paddingLeft="4" id="vbox2" right="0" top="0">
  			  <mx:TextArea styleName="instructionBox" width="340" wordWrap="true" height="90" id="textarea1">
				<mx:htmlText><![CDATA[Instructions<br>  1.  Provide requested information or select appropriate<br>       dropdown options for each line item below.<br>  2.  After completing all line items, click the 'Next' button<br>       at the bottom of the page to proceed.]]></mx:htmlText>
			  </mx:TextArea>
			</mx:VBox>
	
  </mx:Canvas>

   <mx:states>
        <mx:State name="QCSetupState">
        	<mx:RemoveChild target="{sampleOrganismContainer}"/>
        	<mx:AddChild  relativeTo="{sampleSetupContainer}">
				<mx:VBox id="bioanalyzerContainer" visible="true" width="100%" height="100%">
					<mx:HBox width="100%" horizontalGap="0" id="hbox4">
					</mx:HBox>
					<mx:HBox width="100%" horizontalAlign="center" paddingTop="10" id="hbox5">
						<mx:HBox borderStyle="none" backgroundColor="#ffffff" width="90%" verticalAlign="middle" 
							horizontalAlign="center" paddingLeft="10" paddingRight="10" paddingBottom="10" paddingTop="10">
							<mx:Text width="100%" id="qcInstructions" styleName="submitNote">									
								<mx:text>{parentApplication.getProperty(parentApplication.PROPERTY_QC_INSTRUCTIONS)}</mx:text>
							</mx:Text>
						</mx:HBox>
					</mx:HBox>
					
				</mx:VBox>
        		
        	</mx:AddChild>
        	<mx:SetProperty target="{label5}" name="text" value="(2) How many samples will you be submitting?"/>
        	<mx:SetProperty target="{label8}" name="text" value="(3) Which category best describes your samples?"/>
        	<mx:SetProperty target="{label2}" name="text">
        		<mx:value>(4) Select the nucleic acid extraction method.</mx:value>
        	</mx:SetProperty>
        	<mx:SetProperty target="{label5}" name="width" value="334"/>
        	<mx:SetProperty target="{label2}" name="width" value="334"/>
        	<mx:SetProperty target="{label8}" name="width" value="334"/>
        	<mx:AddChild relativeTo="{hbox3}" position="before">
        		<mx:HBox width="100%" horizontalGap="0">
        		    <mx:Text text="(1) Select a sample quality application." width="334" id="labelQCApplication"/>
                    <mx:VBox height="100%" verticalGap="1" paddingLeft="2" paddingRight="2" paddingBottom="2" paddingTop="2" styleName="requiredBox" id="qcAppBox">
                        <mx:RadioButtonGroup id="radioGroupQCApp"/>
						<mx:Repeater id="qcAppRepeater" dataProvider="{parentDocument.filteredAppList}"> 
				    		<mx:RadioButton  label="{qcAppRepeater.currentItem.@display}" 
				    			paddingLeft="1" paddingRight="1"
				    			value="{qcAppRepeater.currentItem.@value}"
				    	 	    groupName="radioGroupQCApp"
				    			click="{pickQCApp()}"/>
  						</mx:Repeater>
                    </mx:VBox>
        		    
        		</mx:HBox>
        	</mx:AddChild>
        	
        	
        </mx:State>
        <mx:State name="SolexaSetupState">
         	
            <mx:AddChild relativeTo="{sampleOrganismContainer}" position="after">
            
				<mx:HBox id="isPreppedContainer" width="100%" horizontalGap="0">
					<mx:Text text="(6) Do you want the Core Facility to perform library preparation on the samples?" width="305"  id="text1"/>
					<mx:VBox width="100%" verticalGap="0" paddingLeft="2">
                		<mx:RadioButtonGroup id="seqPrepRadioGroup"/>
					    <mx:HBox id="hbox2" width="100%">
							<mx:RadioButton id="samplesToBePreppedCheckbox"  value="Y" groupName="seqPrepRadioGroup"  label="Yes, please prep library" selected="true"
 click="{pickSeqPrepState()}">
							</mx:RadioButton>									    	
					    </mx:HBox>
					    
						<mx:HBox >
							<mx:RadioButton id="samplesAlreadyPreppedCheckbox"  value="N" groupName="seqPrepRadioGroup" label="No, library has already been prepped "
 click="{pickSeqPrepState()}">
							</mx:RadioButton>							
							<mx:ComboBox labelField="@display" width="300" id="seqLibProtocolCombo" dataProvider="{parentDocument.seqLibProtocolList}">															
								<mx:change>{pickSeqLibProtocol()}</mx:change>
							</mx:ComboBox>								
						</mx:HBox>				
					</mx:VBox>
				</mx:HBox>            	
            </mx:AddChild>
            <mx:AddChild relativeTo="{sampleOrganismContainer}" >
                <mx:HBox width="100%" horizontalGap="0" id="alignContainer">
                		    <mx:Spacer width="15"/>
                </mx:HBox>
            </mx:AddChild>
            <mx:SetStyle target="{sampleSetupContainer}" name="verticalGap" value="14"/>
            <mx:SetProperty target="{sampleOrganismCombo}" name="width" value="170"/>
            <mx:SetStyle target="{numberOfSamples}" name="backgroundColor"/>
            <mx:SetProperty target="{label5}" name="text" value="(2) How many samples will you be submitting?"/>
            <mx:SetProperty target="{label8}" name="text" value="(3) Which category best describes your samples?"/>
            <mx:SetProperty target="{label7}" name="text">
                <mx:value>(4) Which organism is the source for these samples?</mx:value>
            </mx:SetProperty>
            <mx:SetProperty target="{label5}" name="width" value="305"/>
            <mx:SetProperty target="{label8}" name="width" value="305"/>
            <mx:AddChild relativeTo="{hbox3}" position="before">
                <mx:HBox width="100%" horizontalGap="0">
                    <mx:Text text="(1) Select a sequencing application." width="305" id="labelApplication"/>
                    <mx:VBox height="100%" verticalGap="1" paddingLeft="2" paddingRight="2" paddingBottom="2" paddingTop="2" styleName="requiredBox" id="seqAppBox">
                        <mx:RadioButtonGroup id="radioGroupSeqApp"/>
						<mx:Repeater id="seqAppRepeater" dataProvider="{parentDocument.filteredMicroarrayAppList}"> 
				    		<mx:RadioButton  label="{seqAppRepeater.currentItem.@display}" 
				    			paddingLeft="1" paddingRight="1"
				    			value="{seqAppRepeater.currentItem.@value}"
				    	 	    groupName="radioGroupSeqApp"
				    			click="{pickSeqApp()}"/>
  						</mx:Repeater>
                    </mx:VBox>
                </mx:HBox>
            </mx:AddChild>
            <mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
                <mx:HBox id="barcodeContainer" width="100%" horizontalGap="0">
                	<mx:Text text="(7) Should sequencing libraries be constructed with barcode tags for multiplexing capability?" width="305"  id="label13"/>
                	<mx:VBox  height="100%" verticalGap="1" paddingLeft="2" paddingRight="2" paddingBottom="2" paddingTop="2" styleName="requiredBox" id="barcodeRadioBox">
                		<mx:RadioButtonGroup id="barcodeRadioGroup"/>
                		<mx:RadioButton groupName="barcodeRadioGroup" value="Y" id="radioYesBarcoding" label="Yes, samples require barcoding" paddingBottom="0" paddingTop="0" click="pickRadioBarcoding()">
                		</mx:RadioButton>
                		<mx:RadioButton groupName="barcodeRadioGroup" value="N" id="radioNoBarcoding" label="No, samples do not require barcoding." paddingTop="0" paddingBottom="0" click="pickRadioBarcoding()">
                		</mx:RadioButton>
                	</mx:VBox>
                	<mx:Text width="300" id="barcoingNote" styleName="submitNote" height="40">									
                		<mx:text>{parentApplication.getProperty(parentApplication.PROPERTY_ILLUMINA_BARCODING_NOTE)}</mx:text>
                	</mx:Text>
				</mx:HBox>
            </mx:AddChild>
            <mx:RemoveChild target="{samplePrepContainer}"/>
            <mx:AddChild relativeTo="{isPreppedContainer}" position="before" target="{samplePrepContainer}"/>
            <mx:SetProperty target="{label2}" name="text" value="(5) Select the nuceic acid extraction method."/>
            <mx:SetProperty target="{label2}" name="width" value="305"/>
            <mx:SetProperty target="{label7}" name="width" value="305"/>

			
        </mx:State>
        <mx:State name="SolexaSetupPreppedState" basedOn="SolexaSetupState">
            <mx:SetStyle target="{sampleSetupContainer}" name="verticalGap" value="14"/>
            <mx:SetProperty target="{samplesAlreadyPreppedCheckbox}" name="label">
                <mx:value>No, library has already been prepped using kit</mx:value>
            </mx:SetProperty>
            <mx:SetProperty target="{radioYesBarcoding}" name="enabled" value="false"/>
        </mx:State>
        <mx:State name="QCSetupBioanalyzerState" basedOn="QCSetupState">
             <mx:AddChild relativeTo="{hbox4}" position="lastChild">
                  <mx:Label text="(5) Select a Bioanalyzer Chip Type." width="340"/>
             </mx:AddChild>
             <mx:AddChild relativeTo="{hbox5}" position="before">
                  <mx:HBox id="chipTypeBox"  width="100%" styleName="requiredBoxThick" >							
                       <mx:DataGrid width="100%" height="90" visible="true" id="bioanalyzerChipTypeGrid"  backgroundAlpha="0"   itemClick="toggleChipTypeCheck(event)">
                       	<mx:dataProvider>{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.BioanalyzerChipType').DictionaryEntry.(@value != '' &amp;&amp; @costPerSample != &quot;&quot;)}</mx:dataProvider>
                       	<mx:columns>
                       	    <mx:DataGridColumn id = "isSelectedChipType" headerText=" " 
                       	        	width="20" 
                       	        	editable="true"                        	
                       	        	dataField="@isSelected" 
                       	        	editorDataField="selected"
                       	        	itemRenderer="{views.renderers.CheckBoxIsSelectedChipType.create()}" />
                       		<mx:DataGridColumn headerText="Chip Type" dataField="@bioanalyzerChipType"/>
                       		<mx:DataGridColumn headerText="Concentration Range" dataField="@concentrationRange"/>
                       		<mx:DataGridColumn headerText="Max Sample Buffer Strength" dataField="@maxSampleBufferStrength"/>
                       		<mx:DataGridColumn headerText="Cost per Sample" dataField="@costPerSample"/>
                       		<mx:DataGridColumn headerText="Sample Wells per Chip" dataField="@sampleWellsPerChip"/>
                       		
                       	</mx:columns>
                       </mx:DataGrid>
                  </mx:HBox>
             </mx:AddChild>
        </mx:State>
   	
   </mx:states>
   	 

	
</mx:Canvas>
