<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="Sample setup" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:util="views.util.*" 
	 width="100%" height="100%" >
<mx:Script>
	<![CDATA[
		import mx.events.ListEvent;
	
		private var validNumberOfSamples:Boolean = true;
		private var validFragmentSizeFrom:Boolean = true;
		private var validFragmentSizeTo:Boolean = true;
		private var validConcentration:Boolean = true;
		private var validFragmentSizeRange:Boolean = true;

	
		public function getSelectedCodeBioanalyzerChipType():String {
			var selectedCode:String = '';
			for each(var item:Object in this.bioanalyzerChipTypeGrid.dataProvider) {
				if (item.@isSelected != null && item.@isSelected == "true") {
					selectedCode = item.@value;
					break;
				}
			} 
			return selectedCode;
		}
		public function propagateChipType():void {
       		var codeChipType:String = this.getSelectedCodeBioanalyzerChipType();
			for each (var sample:Object in parentDocument.samples) {
				sample.@codeBioanalyzerChipType = codeChipType;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
		public function propagateSeqPrepByCore():void {
       		for each (var sample:Object in parentDocument.samples) {
				sample.@seqPrepByCore = (currentState == 'SolexaSetupState' ? 'Y' : 'N');
			}

		}
       	private function propagateSampleType():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idSampleType = this.sampleTypeCombo.selectedItem.@value;
			}
			propagateSamplePrepMethod();
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateSamplePrepMethod():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idSamplePrepMethod = this.samplePrepMethodCombo.selectedItem != null ? this.samplePrepMethodCombo.selectedItem.@value : '';
			}
			if (currentState == 'SolexaSetupState') {
				propagateDefaultSeqRunType();
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
		private function propagateDefaultSeqRunType():void {
			var idSeqRunType:String = this.getDefaultIdSeqRunType();
			for each (var sample:Object in parentDocument.samples) {
				sample.@idSeqRunType = idSeqRunType;
			}			
		}
       	private function propagateSampleSource():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idSampleSource = this.sampleSourceCombo.selectedItem.@value;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateFragmentSizeFrom():void {       		
			for each (var sample:Object in parentDocument.samples) {
				sample.@fragmentSizeFrom = parentDocument.isSolexaState() ? this.fragmentSizeFrom.text : '';
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateFragmentSizeTo():void {       		
			for each (var sample:Object in parentDocument.samples) {
				sample.@fragmentSizeTo = parentDocument.isSolexaState() ? this.fragmentSizeTo.text : '';
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateSampleOrganism():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idOrganism = this.sampleOrganismCombo.selectedItem.@value;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	
       	private function propagateSeqRunType():void {

			var idSeqRunType:String = ''; 
			if (parentDocument.isSolexaState()) {
	       		idSeqRunType = this.seqRunTypeCombo.selectedItem.@value;
	       		
				for each (var sample:Object in parentDocument.samples) {
					sample.@idSeqRunType = idSeqRunType;
				}
				for each (var lane:Object in parentDocument.lanes) {
					lane.@idSeqRunType = idSeqRunType;
				}
				callLater(parentDocument.samplesView.checkSamplesCompleteness);
				
			}
		}
       	private function propagateGenomeBuild():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idGenomeBuildAlignTo = this.genomeBuildCombo.selectedItem.@value;
			} 
			for each (var lane:Object in parentDocument.lanes) {
				lane.@idGenomeBuildAlignTo = this.genomeBuildCombo.selectedItem.@value;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateAnalysisInstructions():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@analysisInstructions = this.analysisInstructions.text;
			}
			for each (var lane:Object in parentDocument.lanes) {
				lane.@analysisInstructions = this.analysisInstructions.text;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
       	private function propagateNumberSequencingCycles():void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@idNumberSequencingCycles = this.numberSequencingCyclesCombo.selectedItem.@value;
			}
			for each (var lane:Object in parentDocument.lanes) {
				lane.@idNumberSequencingCycles = this.numberSequencingCyclesCombo.selectedItem.@value;
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
		
		public function toggleOtherChipTypeSelections(codeSelected:String):void {
			
			for each(var item:Object in this.bioanalyzerChipTypeGrid.dataProvider) {
				if (item.@value != codeSelected) {
					item.@isSelected = "false";
				}
			}
		}
		
		private function selectDefaultGenomeBuild():void {
			if (genomeBuildCombo.dataProvider.length > 1) {
				for each(var genomeBuild:Object in genomeBuildCombo.dataProvider) {
					if (genomeBuild.@isLatestBuild != null && genomeBuild.@isLatestBuild == 'Y') {
						genomeBuildCombo.selectedItem = genomeBuild;
						propagateGenomeBuild();
						break;
					}
				}
			}
		}
		
		private function selectDefaultSamplePrepMethod():void {
			if (sampleTypeCombo.selectedItem == null || sampleTypeCombo.selectedItem.@value == '') {
				return;
			}
			if (samplePrepMethodCombo.dataProvider.length == 2) {
				samplePrepMethodCombo.selectedIndex = 1;
   				this.propagateSamplePrepMethod();
   				this.propagateSeqRunType();
   				this.checkSampleSetupCompleteness();
			} else if (samplePrepMethodCombo.dataProvider.length > 2) {
				for each(var item:Object in samplePrepMethodCombo.dataProvider) {

					var applicableSamplePrepMethods:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SamplePrepMethodSampleType').DictionaryEntry.(@value != '' && @idSamplePrepMethod == item.@value.toString());
	        	   	for each (var xref:Object in applicableSamplePrepMethods) {
	        	   		if (xref.@idSampleType.toString() == sampleTypeCombo.selectedItem.@value.toString()) {
	    	   				if (xref.@isDefaultForSampleType == 'Y') {
	    	   					samplePrepMethodCombo.selectedItem = item;
	    	   					this.propagateSamplePrepMethod();
	    	   					this.propagateSeqRunType();
	    	   					this.checkSampleSetupCompleteness();
	    	   					break;
	    	   				}
	        	   		}
	        	   	}

				}
			}
		} 

		private function selectDefaultSeqRunType():void {
			if (currentState != "SolexaSetupPreppedState" && currentState != 'SolexaSetupState') {
				return;
			}
			for each(var item:Object in seqRunTypeCombo.dataProvider) {
				if (item.@display.toUpperCase().indexOf("SINGLE") > -1) {
					seqRunTypeCombo.selectedItem = item;
					propagateSeqRunType();
					break;
				}
			}
			this.propagateSeqRunType();
			this.checkSampleSetupCompleteness();
		}
		
		public function getDefaultIdSeqRunType():String {
			var idSeqRunType:String = "";
			for each(var item:Object in seqRunTypeCombo.dataProvider) {
				if (item.@display.toUpperCase().indexOf("SINGLE") > -1) {
					idSeqRunType = item.@value;
					break;
				}
			}
			return idSeqRunType;
		}
		
		private function toggleChipTypeCheck(event:ListEvent):void {
   			if (event.columnIndex == 0) {
	   			return;
   			}
   			if (bioanalyzerChipTypeGrid.selectedItem.@isSelected == "true") {
				bioanalyzerChipTypeGrid.selectedItem.@isSelected = "false";
			} else {
				bioanalyzerChipTypeGrid.selectedItem.@isSelected = "true";
			}
			toggleOtherChipTypeSelections(bioanalyzerChipTypeGrid.selectedItem.@value);
          	// initialize the samples grid
          	parentDocument.samplesView.initializeSamplesGrid();
          	// propagate selected chip type to samples
          	propagateChipType();       	
          	// check for sampleSetup completeness
          	checkSampleSetupCompleteness(); 
          	
            checkRequiredChipType();
        }
        
        public function checkRequiredChipType():void {
			// Required field
          	if (this.getSelectedCodeBioanalyzerChipType() == '') {
          		chipTypeBox.setStyle("borderStyle", "solid");
          	} else {
          		chipTypeBox.setStyle("borderStyle", "none");
          	}        	
        }
        


      	public function checkSampleSetupCompleteness():Boolean {
        	var isComplete:Boolean = false;
        	if (parentDocument.isEditState()) {
        		isComplete = true;
        	}else if (parentDocument.isSolexaState()) {
	        	if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
	        	    this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '' &&
	        	    this.sampleSourceCombo.selectedItem != null && this.sampleSourceCombo.selectedItem.@value != '' &&
	        	    this.sampleOrganismCombo.selectedItem != null && this.sampleOrganismCombo.selectedItem.@value != '' &&	        	    
	        	    this.numberSequencingCyclesCombo.selectedItem != null && this.numberSequencingCyclesCombo.selectedItem.@value != '' &&
	        	    this.fragmentSizeFrom.text != "" && this.fragmentSizeTo.text != "" && 
	        	    this.seqRunTypeCombo.selectedItem != null && this.seqRunTypeCombo.selectedItem.@value != '' &&
	        	    this.numberSequencingCyclesCombo.selectedItem != null && this.numberSequencingCyclesCombo.selectedItem.@value != '' ) {
	        	    	
	        	    if (currentState == 'SolexaSetupPreppedState') {
 						if (this.samplePrepMethodCombo.selectedItem != null && this.samplePrepMethodCombo.selectedItem.@value != '') {
 							isComplete = true;
 						}	        	    	
	        	    } else {
		        	    isComplete = true;
	        	    }
	        	    
	        	 }
        	
        	} else if (parentDocument.isQCState()) {
	        	if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
	        	    this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '' &&
	        	    this.samplePrepMethodCombo.selectedItem != null && this.samplePrepMethodCombo.selectedItem.@value != '' ) {
	        	    	
	        		for each(var chipType:Object in this.bioanalyzerChipTypeGrid.dataProvider) {
	        			if (chipType.@isSelected == "true") {
	        				isComplete = true;
	        				break;
	        			}
	        		}
	        	}
        	} else {
	        	if (this.numberOfSamples.text != null && this.numberOfSamples.text != '' &&
	        	    this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != '' &&
	        	    this.sampleSourceCombo.selectedItem != null && this.sampleSourceCombo.selectedItem.@value != '' &&
	        	    this.sampleOrganismCombo.selectedItem != null && this.sampleOrganismCombo.selectedItem.@value != '' &&
	        	    this.samplePrepMethodCombo.selectedItem != null && this.samplePrepMethodCombo.selectedItem.@value != '' ) {
					isComplete = true;	        	    	
	        	}
        	}
        	
        	if (!this.validNumberOfSamples ||
        	    !this.validConcentration ||
        	    !this.validFragmentSizeFrom ||
        	    !this.validFragmentSizeRange ||
        	    !this.validFragmentSizeTo) {
        		isComplete = false;    	
        	}
        	
    		parentDocument.samplesView.enabled = isComplete; 
    			
			if (parentDocument.theTab.contains(parentDocument.annotationView)) {
				parentDocument.annotationView.enabled = isComplete;        			
	    	}
    		parentDocument.enableNextButtons();

        	callLater(postSampleSetupCompleteness, [isComplete]);
        	
    		return isComplete;
    	    	
        }
        
        private function postSampleSetupCompleteness(isComplete:Boolean):void {
	    		
	    	if (!isComplete) {
	        	if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
		        	parentDocument.hybSetupView.enabled = false;
	        	} 
	
	        	if (parentDocument.theTab.contains(parentDocument.hybsView)) {
		        	parentDocument.hybsView.enabled = false;
	        	} 
	
	        	parentDocument.confirmView.enabled = false;
    		} else {
    			parentDocument.samplesView.checkSamplesCompleteness();
    		}
        	
        }
        
        private function handleInvalidNumberOfSamples(eventObject:Event):void {
        	this.validNumberOfSamples = false;
        	this.checkSampleSetupCompleteness();
        }
        private function handleValidNumberOfSamples(eventObject:Event):void {
        	this.validNumberOfSamples = true;
        	this.checkSampleSetupCompleteness();
        }
        private function handleInvalidFragmentSizeFrom(eventObject:Event):void {
        	this.validFragmentSizeFrom = false;
        	this.checkSampleSetupCompleteness();
        }
        private function handleValidFragmentSizeFrom(eventObject:Event):void {
        	this.validFragmentSizeFrom = true;
        	this.checkSampleSetupCompleteness();
        }
        private function handleInvalidFragmentSizeTo(eventObject:Event):void {
        	this.validFragmentSizeTo = false;
        	this.checkSampleSetupCompleteness();
        }
        private function handleValidFragmentSizeTo(eventObject:Event):void {
        	this.validFragmentSizeTo = true;
        	this.checkSampleSetupCompleteness();
        }
        private function handleInvalidConcentration(eventObject:Event):void {
        	this.validConcentration = false;
        	this.checkSampleSetupCompleteness();
        }
        private function handleValidConcentration(eventObject:Event):void {
        	this.validConcentration = true;
        	this.checkSampleSetupCompleteness();
        }

		
	]]>
</mx:Script>

    <mx:NumberValidator id="numberOfSamplesValidator" source="{numberOfSamples}" property="text" 
         required="true" allowNegative="false" domain="int" maxValue="100" />
    <util:FragmentSizeRangeValidator id="fragmentSizeFromValidator" source="{fragmentSizeFrom}" property="text" 
        required="true" allowNegative="false" domain="int"   sizeRangeLowField="{fragmentSizeFrom} " sizeRangeHiField="{fragmentSizeTo}" />
    <util:FragmentSizeRangeValidator id="fragmentSizeToValidator" source="{fragmentSizeTo}" property="text" 
        required="true" allowNegative="false" domain="int" sizeRangeLowField="{fragmentSizeFrom} " sizeRangeHiField="{fragmentSizeTo}"/>
    <mx:NumberValidator id="organismValidator"
        source="{this.sampleOrganismCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" />
    <mx:NumberValidator id="sampleTypeValidator"
        source="{this.sampleTypeCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" />
    <mx:NumberValidator id="sampleSourceValidator"
        source="{this.sampleSourceCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex" 
        minValue="1" />
    <mx:NumberValidator id="samplePrepMethodValidator"
        source="{this.samplePrepMethodCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" />
   	<mx:NumberValidator id="seqRunTypeValidator"
        source="{this.seqRunTypeCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" />   
    <mx:NumberValidator id="numberSeqCyclesValidator"
        source="{this.numberSequencingCyclesCombo}"
        lowerThanMinError="This field is required."
        property="selectedIndex"
        minValue="1" />    
        
	<mx:VBox width="100%" height="100%" verticalGap="2">
		<mx:VBox width="100%" height="100%"  paddingTop="12"  verticalGap="20" id="sampleSetupContainer">
			<mx:HBox width="100%" horizontalGap="0">
				<mx:Label text="(1) How many samples will you be submitting?" width="310"  id="label5"/>
				<mx:TextInput width="40" id="numberOfSamples" 
					valid="handleValidNumberOfSamples(event)" invalid="handleInvalidNumberOfSamples(event)"
>
					<mx:focusOut>parentDocument.samplesView.initializeSamplesGrid();checkSampleSetupCompleteness()</mx:focusOut>
				</mx:TextInput>							
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0">
				<mx:Label text="(2) Which category best describes your samples?" width="310" id="label8"/>
				<mx:ComboBox labelField="@display" width="300" id="sampleTypeCombo" 
					change="samplePrepMethodCombo.selectedIndex=0;parentDocument.samplePrepMethodList.refresh();selectDefaultSamplePrepMethod();propagateSampleType();parentDocument.samplesView.initializeSamplesGrid();checkSampleSetupCompleteness();parentDocument.checkForSampleTypeCompatibility();" dataProvider="{parentDocument.filteredSampleTypeList}">							
				</mx:ComboBox>
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" id="sampleOrganismContainer">
				<mx:Label text="(3) Which organism is the source for these samples?" width="310" id="label7"/>
				<mx:ComboBox labelField="@display" width="300" id="sampleOrganismCombo" change="parentDocument.samplesView.initializeSamplesGrid();parentDocument.hybSetupView.organismCombo.selectedItem = sampleOrganismCombo.selectedItem;propagateSampleOrganism();checkSampleSetupCompleteness();parentDocument.filteredGenomeBuildList.refresh()">							
					<mx:dataProvider>{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry}</mx:dataProvider>
				</mx:ComboBox>
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" id="sampleSourceContainer">
				<mx:Label text="(4) Which term best describes the sample source?" width="310" id="label6"/>
				<mx:ComboBox labelField="@display" width="300" id="sampleSourceCombo" change="parentDocument.samplesView.initializeSamplesGrid();propagateSampleSource();checkSampleSetupCompleteness()" dataProvider="{parentDocument.sampleSourceList}">							
				</mx:ComboBox>
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" id="samplePrepContainer">
				<mx:Label text="(5) Select the nucleic acid purification/extraction method:" width="310" id="label2"/>
				<mx:ComboBox labelField="@display" width="300" id="samplePrepMethodCombo" change="parentDocument.samplesView.initializeSamplesGrid();propagateSamplePrepMethod();checkSampleSetupCompleteness();" dataProvider="{parentDocument.samplePrepMethodList}">															
				</mx:ComboBox>
			</mx:HBox>
			
		</mx:VBox>
		
	</mx:VBox>

   <mx:states>
        <mx:State name="QCSetupState">
        	<mx:RemoveChild target="{sampleOrganismContainer}"/>
        	<mx:RemoveChild target="{sampleSourceContainer}"/>
        	<mx:AddChild  relativeTo="{sampleSetupContainer}">
				<mx:VBox id="bioanalyzerContainer" visible="true" width="100%" height="100%">
					<mx:HBox width="100%" horizontalGap="0">
						<mx:Label text="(4) Select a Bioanalyzer Chip Type:" width="340"/>
					</mx:HBox>
					<mx:HBox id="chipTypeBox"  width="100%" styleName="requiredBoxThick" >							
						<mx:DataGrid width="100%" height="90" visible="true" id="bioanalyzerChipTypeGrid"  backgroundAlpha="0"   itemClick="toggleChipTypeCheck(event)">
							<mx:dataProvider>{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.BioanalyzerChipType').DictionaryEntry.(@value != '' &amp;&amp; @costPerSample != &quot;&quot;)}</mx:dataProvider>
							<mx:columns>
							    <mx:DataGridColumn id = "isSelectedChipType" headerText=" " 
							        	width="20" 
							        	editable="true"                        	
							        	dataField="@isSelected" 
							        	editorDataField="selected"
							        	itemRenderer="views.renderers.CheckBoxIsSelectedChipType" />
								<mx:DataGridColumn headerText="Chip Type" dataField="@bioanalyzerChipType"/>
								<mx:DataGridColumn headerText="Concentration Range" dataField="@concentrationRange"/>
								<mx:DataGridColumn headerText="Max Sample Buffer Strength" dataField="@maxSampleBufferStrength"/>
								<mx:DataGridColumn headerText="Cost per Sample" dataField="@costPerSample"/>
								<mx:DataGridColumn headerText="Sample Wells per Chip" dataField="@sampleWellsPerChip"/>
								
							</mx:columns>
						</mx:DataGrid>
					</mx:HBox>
					<mx:HBox width="100%" horizontalAlign="center" paddingTop="10">
						<mx:HBox borderStyle="none" backgroundColor="#ffffff" width="90%" verticalAlign="middle" horizontalAlign="center" paddingLeft="10" paddingRight="10" paddingBottom="10" paddingTop="10">
							<mx:Text width="100%" text="Terms:  Bioanalyzer chips will be run when sufficient samples have been collected to load all wells of a chip.  Expedited service can be obtained if the researcher is willing to accept charges for any remaining empty wells on a chip.  Call the Microarray Core Facility (581-6346) for details." color="#0000ff">									
							</mx:Text>
						</mx:HBox>
					</mx:HBox>
					
				</mx:VBox>
        		
        	</mx:AddChild>
        	<mx:SetProperty target="{label5}" name="text" value="(1) How many samples will you be submitting?"/>
        	<mx:SetProperty target="{label8}" name="text" value="(2) Which category best describes your samples?"/>
        	<mx:SetProperty target="{label2}" name="text">
        		<mx:value>(3) Select the nucleic acid purification/extraction method:</mx:value>
        	</mx:SetProperty>
        	<mx:SetProperty target="{label5}" name="width" value="334"/>
        	<mx:SetProperty target="{label2}" name="width" value="334"/>
        	<mx:SetProperty target="{label8}" name="width" value="334"/>
        	
        	
        </mx:State>
        <mx:State name="SolexaSetupState">
         	
            <mx:AddChild relativeTo="{sampleSourceContainer}" position="after">
            
				<mx:HBox id="isPreppedContainer" width="100%" horizontalGap="0">
					<mx:Text text="(6) Do you want the Core Facility to perform library preparation on the samples?" width="310"  id="text1"/>
					<mx:VBox width="100%">
					    <mx:HBox id="hbox2" width="100%">
							<mx:RadioButton id="samplesToBePreppedCheckbox"  groupName="samplePrepGroup"  label="Yes, please prep library" selected="true"
								change="{samplesToBePreppedCheckbox.selected ? currentState = 'SolexaSetupState' : 'SolexaSetupPreppedState';samplePrepMethodCombo.selectedIndex = 0;propagateSamplePrepMethod();parentDocument.samplePrepMethodList.refresh();parentDocument.filteredSeqRunTypeList.refresh();checkSampleSetupCompleteness();parentDocument.samplesView.showHideColumns()}" click="propagateSeqPrepByCore();selectDefaultSamplePrepMethod()">
							</mx:RadioButton>									    	
					    </mx:HBox>
					    
						<mx:HBox id="vbox1">
							<mx:RadioButton id="samplesAlreadyPreppedCheckbox" groupName="samplePrepGroup" label="No, library has already been prepped "
								change="{samplesAlreadyPreppedCheckbox.selected ? currentState = 'SolexaSetupPreppedState' : 'SolexaSetupState';samplePrepMethodCombo.selectedIndex = 0;propagateSamplePrepMethod();parentDocument.samplePrepMethodList.refresh();parentDocument.filteredSeqRunTypeList.refresh();checkSampleSetupCompleteness();parentDocument.samplesView.showHideColumns()}" click="propagateSeqPrepByCore();selectDefaultSamplePrepMethod()">
							</mx:RadioButton>							
								
						</mx:HBox>				
					</mx:VBox>
				</mx:HBox>            	
            </mx:AddChild>
            <mx:AddChild relativeTo="{sampleOrganismContainer}" >
                <mx:HBox width="100%" horizontalGap="0" id="alignContainer">
                		    <mx:Spacer width="15"/>
                </mx:HBox>
            </mx:AddChild>
            <mx:AddChild relativeTo="{sampleSetupContainer}" >
				<mx:HBox id="numberOfCyclesContainer" width="100%" horizontalGap="0">
					<mx:Label text="(8) Select the desired number of sequencing cycles:" width="310"  id="label10"/>
					<mx:ComboBox id="numberSequencingCyclesCombo" labelField="@display" change="parentDocument.samplePrepMethodList.refresh();selectDefaultSamplePrepMethod();parentDocument.samplesView.initializeSamplesGrid();propagateNumberSequencingCycles();checkSampleSetupCompleteness();">
						<mx:dataProvider>{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.NumberSequencingCycles').DictionaryEntry.(@isActive == 'Y')}</mx:dataProvider>
					</mx:ComboBox>
				</mx:HBox>            	  
            </mx:AddChild>
            <mx:SetStyle target="{sampleSetupContainer}" name="verticalGap" value="10"/>
            <mx:SetProperty target="{sampleOrganismCombo}" name="width" value="170"/>
            <mx:SetEventHandler target="{sampleTypeCombo}" name="change">
                <mx:handler>parentDocument.samplesView.initializeSamplesGrid();parentDocument.samplePrepMethodList.refresh();propagateSampleType();checkSampleSetupCompleteness();parentDocument.checkForSampleTypeCompatibility();parentDocument.samplePrepMethodList.refresh();selectDefaultSamplePrepMethod();selectDefaultSeqRunType()</mx:handler>
            </mx:SetEventHandler>
            <mx:SetEventHandler target="{samplePrepMethodCombo}" name="change">
                <mx:handler>parentDocument.samplesView.initializeSamplesGrid();propagateSamplePrepMethod();checkSampleSetupCompleteness();parentDocument.filteredSeqRunTypeList.refresh();</mx:handler>
            </mx:SetEventHandler>
            <mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
                <mx:HBox id="numberOfCyclesContainer0" width="100%" horizontalGap="0">
                	<mx:Label text="(9) Do you want the sequence data to be aligned?" width="310"  id="label11"/>
                	<mx:VBox width="100%" id="alignMoreContainer" paddingRight="4">
                		<mx:HBox width="100%" horizontalGap="2">
                			<mx:CheckBox id="alignCheckBox" label="Yes, align to genome build" click="{if (!alignCheckBox.selected) {genomeBuildCombo.selectedIndex = 0;};checkSampleSetupCompleteness();}" selected="true"/>
                			<mx:ComboBox labelField="@display" id="genomeBuildCombo" change="propagateGenomeBuild();checkSampleSetupCompleteness();" width="300" dataProvider="{parentDocument.filteredGenomeBuildList}">							
                			  	</mx:ComboBox>                			
                		</mx:HBox>
                			<mx:HBox width="100%" horizontalGap="0">
                			    <mx:Spacer width="20"/>
                			</mx:HBox>
                	</mx:VBox>
                </mx:HBox>
            </mx:AddChild>
            <mx:AddChild relativeTo="{sampleSetupContainer}" position="lastChild">
                <mx:HBox id="numberOfCyclesContainer1" width="100%" horizontalGap="0">
                	<mx:Label text="(10) Provide any special analysis instructions:" width="310"  id="label12"/>
                	<mx:TextArea id="analysisInstructions" width="100%" focusOut="propagateAnalysisInstructions()" height="32"/>
                </mx:HBox>
            </mx:AddChild>
            <mx:AddChild relativeTo="{isPreppedContainer}" position="before">
                <mx:HBox width="100%" horizontalGap="0" id="samplePrepContainer0">
                	<mx:Label text="(5) Enter the approximate size range of your samples:" width="310" id="label0"/>
                	<mx:TextInput id="fragmentSizeFrom" width="50" 
                		valid="handleValidFragmentSizeFrom(event)" invalid="handleInvalidFragmentSizeFrom(event)"
                		change="propagateFragmentSizeFrom();checkSampleSetupCompleteness();"/>
                	<mx:Label text="-" textAlign="center"/>
                	<mx:TextInput id="fragmentSizeTo" width="50" 
                		valid="handleValidFragmentSizeTo(event)" invalid="handleInvalidFragmentSizeTo(event)" 
                		change="propagateFragmentSizeTo();checkSampleSetupCompleteness();"/>
                </mx:HBox>
            </mx:AddChild>
            <mx:SetStyle target="{numberOfSamples}" name="backgroundColor"/>
            <mx:SetEventHandler target="{sampleOrganismCombo}" name="change">
                <mx:handler>parentDocument.samplesView.initializeSamplesGrid();parentDocument.hybSetupView.organismCombo.selectedItem = sampleOrganismCombo.selectedItem;propagateSampleOrganism();checkSampleSetupCompleteness();parentDocument.filteredGenomeBuildList.refresh();selectDefaultGenomeBuild()</mx:handler>
            </mx:SetEventHandler>
            <mx:AddChild relativeTo="{numberOfCyclesContainer}" position="before">
                <mx:HBox id="seqRunTypeContainer" width="100%" horizontalGap="0">
                	<mx:Label text="(7) Select the sequencing run type:" width="310"  id="label9"/>
                	<mx:ComboBox id="seqRunTypeCombo" labelField="@display" 
                		change="parentDocument.samplePrepMethodList.refresh();selectDefaultSamplePrepMethod();parentDocument.samplesView.initializeSamplesGrid();propagateSeqRunType();checkSampleSetupCompleteness();" 
                		width="300" 
                		dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SeqRunType').DictionaryEntry.(@isActive != &quot;N&quot;)}">
                	</mx:ComboBox>
                </mx:HBox>
            </mx:AddChild>
            <mx:RemoveChild target="{samplePrepMethodCombo}"/>
            <mx:AddChild relativeTo="{hbox2}" position="lastChild" target="{samplePrepMethodCombo}"/>
            <mx:RemoveChild target="{label2}"/>
            <mx:RemoveChild target="{samplePrepContainer}"/>
            <mx:SetProperty target="{samplePrepMethodCombo}" name="width" value="400"/>
            <mx:SetProperty target="{samplePrepMethodCombo}" name="visible" value="false"/>
            <mx:SetProperty target="{label5}" name="text" value="(1) How many samples will you be submitting?"/>
            <mx:SetProperty target="{label8}" name="text" value="(2) Which category best describes your samples?"/>
            <mx:SetProperty target="{label7}" name="text">
                <mx:value>(3) Which organism is the source for these samples?</mx:value>
            </mx:SetProperty>
            <mx:SetProperty target="{label6}" name="text" value="(4) Which term best describes the sample source?"/>

			
        </mx:State>
        <mx:State name="SolexaSetupPreppedState" basedOn="SolexaSetupState">
            <mx:SetStyle target="{alignMoreContainer}" name="verticalGap" value="0"/>
            <mx:SetStyle target="{sampleSetupContainer}" name="verticalGap" value="10"/>
            <mx:SetProperty target="{analysisInstructions}" name="height" value="32"/>
            <mx:SetProperty target="{samplesAlreadyPreppedCheckbox}" name="label">
                <mx:value>No, library has already been prepped using kit</mx:value>
            </mx:SetProperty>
            <mx:RemoveChild target="{samplePrepMethodCombo}"/>
            <mx:AddChild relativeTo="{vbox1}" position="lastChild" target="{samplePrepMethodCombo}"/>
            <mx:SetProperty target="{samplePrepMethodCombo}" name="visible" value="true"/>
            <mx:SetProperty target="{label5}" name="text" value="(1) How many samples will you be submitting?"/>
            <mx:SetProperty target="{label8}" name="text" value="(2) Which category best describes your samples?"/>
            <mx:SetProperty target="{label7}" name="text">
                <mx:value>(3) Which organism is the source for these samples?</mx:value>
            </mx:SetProperty>
            <mx:SetProperty target="{label6}" name="text" value="(4) Which term best describes the sample source?"/>
            <mx:SetProperty target="{label0}" name="text">
                <mx:value>(5) Enter the approximate size range of your samples:</mx:value>
            </mx:SetProperty>
            <mx:SetProperty target="{text1}" name="text">
                <mx:value>(6) Do you want the Core Facility to perform library preparation on the samples?</mx:value>
            </mx:SetProperty>
            <mx:SetProperty target="{label9}" name="text" value="(7) Select the sequencing run type:"/>
            <mx:SetProperty target="{label10}" name="text">
                <mx:value>(8) Select the desired number of sequencing cycles:</mx:value>
            </mx:SetProperty>
            <mx:SetProperty target="{label11}" name="text" value="(9) Do you want the sequence data to be aligned?"/>
            <mx:SetProperty target="{label12}" name="text" value="(10) Provide any special analysis instructions:"/>
        </mx:State>
   	
   </mx:states>
   	 

	
</mx:Canvas>
