<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:views="views.*" xmlns:util="views.util.*">

 

   <mx:HTTPService  
    id="getExpandedFileList" 
    url="GetExpandedFileList.gx"
    destination="getExpandedFileList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetExpandedFileList(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get expanded file list', event)"
    method="POST"
    useProxy="false">
    <mx:request>
    	<resultKeys>{resultKeys}</resultKeys>
    </mx:request>
  </mx:HTTPService>

   <mx:HTTPService  
    id="cacheFileDownloadList" 
    url="CacheFileDownloadList.gx"
    destination="cacheFileDownloadList"
    resultFormat="e4x"
    showBusyCursor="false"
    result="onCacheFileDownloadList(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get cache file download list', event)"
    method="POST"
    useProxy="false">
    <mx:request>
    	<fileDescriptorXMLString>{selectedFileList.toXMLString()}</fileDescriptorXMLString>
    </mx:request>
  </mx:HTTPService>
  
    
    <mx:HTTPService  
    id="getRequestDownloadList" 
    url="GetRequestDownloadList.gx"
    destination="getRequestDownloadList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequestDownloadList(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get request download list', event)"
    method="POST"
    useProxy="false">
    </mx:HTTPService >	
    
    <mx:HTTPService  
    id="getDownloadEstimatedSize" 
    url="GetDownloadEstimatedSize.gx"
    destination="getDownloadEstimatedSize"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetDownloadEstimatedSize(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get download estimated size', event)"
    method="POST"
    useProxy="false">
    </mx:HTTPService>
  

 <mx:Script>
 <![CDATA[
 	import mx.events.CloseEvent;
 	import views.experiment.DownloadProgressView;
 	import mx.formatters.DateFormatter;
    import mx.rpc.events.ResultEvent;
 	import flash.display.Sprite;
    import flash.net.FileReference;
    import flash.net.URLRequest;
    import flash.net.URLRequestMethod;
    import flash.net.URLVariables;
    import mx.managers.PopUpManager;
    import mx.events.ListEvent;
    import mx.controls.Alert;
    
    public var downloadProgressWindow:DownloadProgressView;


 	[Bindable]
    private var rowCountMessage:String = new String();
 	[Bindable]
    private var fileCountMessage:String = new String();
    
    [Bindable]
    private var selectedFileList:XMLListCollection;
    
    private var estimatedDownloadSize:Number;
    
    private const DOWNLOAD_FOLDERS_URL:String  = "DownloadResultsServlet.gx"; 
    private const DOWNLOAD_FILES_URL:String    = "DownloadFileServlet.gx"; 
	private const SUGGESTED_LOCAL_FILENAME:String = "gnomex-data";  
       
    [Bindable]
    public var resultKeys:String;
    
  	private static const  KB:Number = Math.pow(2, 10);
  	private static const  MB:Number = Math.pow(2, 20);
  	private static const  GB:Number = Math.pow(2, 30);
      
    
    private var dateFormatter:DateFormatter = new DateFormatter();
        
    private function onGetRequestDownloadList(event:ResultEvent): void {
		if (getRequestDownloadList.lastResult.name() != "RequestDownloadList") {
        	Alert.show(getRequestDownloadList.lastResult..ACTMESSAGE.@TEXT);
        	return;
        }    	 
    	parentDocument.filterList();
    		
    }
    private function getSelectedFolders():void {
		resultKeys = "";
    	for(var i:Number = 0; i < downloadList.length; i++) {
    		if (downloadList[i].@isSelected != null && downloadList[i].@isSelected.toString() == "true") {
        		resultKeys += downloadList[i].@key + ":"; 
      		}
        }     	
    }
    
    public function downloadFolders():void {
    	getSelectedFolders();
    	
    	if (resultKeys == "") {
    		Alert.show("Please select the folders to download.");
    	} else {
			var parms1:Object = new Object();
    	    parms1.resultKeys = resultKeys;
        	parms1.includeTIF = parentApplication.navExperimentView.browseView.includeTIFFFilesCheckBox.selected ? "Y" : "N";
        	parms1.includeJPG = parentApplication.navExperimentView.browseView.includeJPEGFilesCheckBox.selected ? "Y" : "N";

	    	getDownloadEstimatedSize.send(parms1);    		
    	}

    	
 	}
            

 	public function downloadFiles():void {
		var selectedFiles:XMLList = getExpandedFileList.lastResult..FileDescriptor.(@isSelected == "true");        	
    	selectedFileList = new XMLListCollection(selectedFiles);
    	
    	if (selectedFileList.length == 0) {
			Alert.show("Please select the files to download.");
    	} else {
	    	estimatedDownloadSize = 0;
    		for each (var item:Object in selectedFileList) {
				estimatedDownloadSize += getEstimatedCompressedSize(item);
			}
    	
    		var call:Object = cacheFileDownloadList.send();
    		call.marker = estimatedDownloadSize;    		
    	}
 	}
 	
 	
 	
 	
 	public function exploreFolders():void {
 		getSelectedFolders();

		if (resultKeys == "") {
 			Alert.show("Please check folders to explore");
 			callLater(selectFolderView);
 		} else {
	 		getExpandedFileList.send();
 			exploreView.enabled = true;
 			
 		}  		
 	}
 	
 	private function selectFolderView():void {
 		theTab.selectedIndex = 0;
 	}
 	
 	private function getRequestNumber(item:Object, col:int):String {
 		if (item.@showRequestNumber == "Y") {
	    	return item.@requestNumber;
 		} else {
 			return "";
 		}
    }
    private function getDirectoryName(item:Object, col:int):String {
 		if (item.@showDirectoryName == "Y") {
	    	return item.@directoryName;
 		} else {
 			return "";
 		}
    }
    
    private function getFolderName(item:Object, col:int):String {
    	if (item.@itemNumber != null && item.@itemNumber != '') {
	    	return item.@itemNumber + ' - ' + item.@results;		
    	} else {
    		return item.@results;
    	}
    }
    

	public function setFileCount():void {
		fileCountMessage = expandedFileList.length + " files found.";
	}

    
    public function setResultsCount():void {
    	rowCountMessage = downloadList.length + " folders found.";
    }
    
    private function getGridRowNumber(item:Object,col:int):String
    {
       var x:int = downloadList.getItemIndex(item) + 1;
       return String(x);
    } 
    
    private function onGetExpandedFileList(event:ResultEvent):void {
    	setFileCount();
    	theTab.selectedIndex = 1;
    } 
    
    private function onGetDownloadEstimatedSize(event:ResultEvent):void {
    	if (getDownloadEstimatedSize.lastResult.@size == 0) {
    		Alert.show("No data files exist in the selected folder(s).", "");
    	} else {
    		estimatedDownloadSize = getDownloadEstimatedSize.lastResult.@size;
	    	
    		var call:Object = event.token;
			Alert.show( "Ready to download approximately " + views.experiment.ExperimentDownloadView.getFileSizeText(estimatedDownloadSize) + " of data.  Proceed?",
						"",
						(Alert.YES | Alert.NO), this, 
						onDownloadFolders,						
						parentApplication.iconWarning); 
    		
    	}
    }

	private function onDownloadFolders(event:CloseEvent):void {
		if (event.detail==Alert.YES) {
	        var parms:URLVariables = new URLVariables();
	        parms.resultKeys = resultKeys;
        	parms.includeTIF = parentApplication.navExperimentView.browseView.includeTIFFFilesCheckBox.selected ? "Y" : "N";
        	parms.includeJPG = parentApplication.navExperimentView.browseView.includeJPEGFilesCheckBox.selected ? "Y" : "N";
    		var progressWindow:DownloadProgressView = new DownloadProgressView();	        
    		progressWindow.init(this, this.DOWNLOAD_FOLDERS_URL, parms, parentDocument.downloadFoldersButton, estimatedDownloadSize, this.SUGGESTED_LOCAL_FILENAME);
		}

	}    
    
    private function onCacheFileDownloadList(event:ResultEvent):void {
    	var call:Object = event.token;
		Alert.show( "Ready to download approximately " + views.experiment.ExperimentDownloadView.getFileSizeText(call.marker) + " of data.  Proceed?",
						"",
						(Alert.YES | Alert.NO), this, 
						onDownloadFiles,						
						parentApplication.iconWarning);
    	
    }
    

	private function onDownloadFiles(event:CloseEvent):void {
		if (event.detail==Alert.YES) {
	        var progressWindow:DownloadProgressView = new DownloadProgressView();
    		progressWindow.init(this, this.DOWNLOAD_FILES_URL, null, parentDocument.downloadFilesButton, estimatedDownloadSize, this.SUGGESTED_LOCAL_FILENAME);		
		}
	}    


    private function onTabSwitch():void {
    	if (theTab.selectedChild == exploreView) {
    		exploreFolders();
    		parentDocument.buttonStack.selectedChild = parentDocument.downloadFilesButtonView;
    	} else {
    		parentDocument.buttonStack.selectedChild = parentDocument.downloadFoldersButtonView;    		
    	}
    }
    
   	private function toggleFolderCheck(event:ListEvent):void {
   		if (event.columnIndex == 0) {
   			return;
   		}
   		if (folderGrid.selectedItem.@isSelected == "true") {
			folderGrid.selectedItem.@isSelected = "false";
		} else {
			folderGrid.selectedItem.@isSelected = "true";
		}
	}

   	private function toggleFileCheck(event:ListEvent):void {
   		if (event.columnIndex == 0) {
   			return;
   		}
		if (fileGrid.selectedItem.@isSelected == "true") {
			fileGrid.selectedItem.@isSelected = "false";
		} else {
			fileGrid.selectedItem.@isSelected = "true";
		}
	}
    public function lookupUserName(item:Object, col:DataGridColumn):String 
    { 
    	return parentApplication.getAppUserList.lastResult.AppUser.(@idAppUser == item.@idAppUser).@displayName;
    }
 	public static function getEstimatedCompressedSize(item:Object):Number {
 		var compressionRatio:Number = 1; 
 		if (item.@type == 'fep') {
 			compressionRatio = 1.6; 
 		} else if (item.@type.toString().toUpperCase() == 'PDF') {
 			compressionRatio = 1;
 		} else if (item.@type.toString().toUpperCase() == 'TIF' ||
 		           item.@type.toString().toUpperCase() == 'TIFF') {
 			compressionRatio = 1.9;
 		} else if (item.@type.toString().toUpperCase() == 'JPG') {
 			compressionRatio = 1;
 		} else if (item.@type.toString().toUpperCase() == 'TXT') {
 			compressionRatio = 2.7;  
 		} else if (item.@type.toString().toUpperCase() == 'RTF') {
 			compressionRatio = 2.7;
 		} else if (item.@type.toString().toUpperCase() == 'DAT') {
 			compressionRatio = 1.6;
 		} else if (item.@type.toString().toUpperCase() == 'CEL') { 
 			compressionRatio = 2.8;
 		} else if (item.@type.toString().toUpperCase() == 'ZIP') {
 			compressionRatio = 1;
 		}
 		
 		return (item.@fileSize / compressionRatio);
 	}
    
    public static function getFileSizeText(theFileSize:Number):String {
    	var size:Number = 0;
    	var sizeTxt:String = "";
    	if (theFileSize > GB ) {
      		size = (Math.round((theFileSize / GB) / 10)) * 10;
      		if (size == 0) {
      			size = 1;
      		} 
      		sizeTxt = size + " GB";
    	}  else if (theFileSize > MB ) {
      		size = (Math.round((theFileSize / MB) / 10)) * 10;
      		if (size == 0) {
      			size = 1;
      		}
      		sizeTxt = size + " MB";
    	} else if (theFileSize > KB ) {
      		size = (Math.round((theFileSize / KB) / 10)) * 10;
      		if (size == 0) {
      			size = 1;
      		}
      		sizeTxt = size + " KB";
    	} else {
      		size = (Math.round(theFileSize / 10) * 10);
			if (size == 0) {
      			size = 1;
      		}
      		sizeTxt = size + " bytes";
    	}
    	return sizeTxt;
  	}

    
 ]]>
 </mx:Script>
 
    <mx:XMLListCollection id="downloadList" source="{getRequestDownloadList.lastResult.RequestDownload}"/>
    <mx:XMLListCollection id="expandedFileList" source="{getExpandedFileList.lastResult.RequestDirectory.Directory.FileDescriptor}"/>
	
	<mx:VBox width="100%" height="100%" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
	    <mx:LinkBar id="linkBar" styleName="formLinkBar" dataProvider="{theTab}"/>
		<mx:ViewStack id="theTab"  
			width="100%" height="100%" 
			change="onTabSwitch()" 
			>
			<mx:VBox id="folderView" 
				label="Folders" width="100%" height="100%" 
				paddingLeft="0" paddingRight="0" 
				paddingTop="0" paddingBottom="0" verticalGap="0">
		       <util:DataGridAlternatingGroup  
		       	 sortableColumns="false" id="folderGrid"
		       	dataProvider="{downloadList}"  
		       	width="100%" height="100%"
		       	  itemClick="toggleFolderCheck(event)">
		         <util:columns>
		            <mx:DataGridColumn headerText=" " 
		            	width="10" 
		            	editable="true"                        	
		            	dataField="@isSelected" 
		            	editorDataField="selected" sortable="false"
		            	itemRenderer="hci.flex.renderers.CheckBox">
		            </mx:DataGridColumn>
		            <mx:DataGridColumn minWidth="45" width="45" headerText="#">
		                <mx:itemRenderer>
		                    <mx:Component >
		                        <mx:HBox  horizontalGap="0" >
				                   <mx:Image   id="experimentImage"  
			                          	source="{(data.@showRequestNumber == 'Y' ? (data.@codeRequestCategory == 'QC' ? parentApplication.iconQC : (data.@codeRequestCategory == 'SOLEXA' ? parentApplication.iconSolexa : data.@codeRequestCategory == 'AFFY' ? parentApplication.iconMicroarrayAffy : data.@codeRequestCategory == 'AGIL' ? parentApplication.iconMicroarray : parentApplication.iconFlask)) : '')}" >
 								   </mx:Image>
		                           <mx:Label id="requestNumber" text="{data.@showRequestNumber == 'Y' ? data.@requestNumber : ''}">
		                           </mx:Label>
		                        </mx:HBox>
		                    </mx:Component>
		                </mx:itemRenderer>
		            </mx:DataGridColumn> 
			       	<mx:DataGridColumn headerText="Folder" labelFunction="getFolderName"  width="150" dataField="@itemNumber"/>
			       	<mx:DataGridColumn headerText="Status" width="40" dataField="@status"/>
			       	<mx:DataGridColumn headerText="Date" width="42" dataField="@createDate"/>
			        <mx:DataGridColumn headerText="Requester" width="40" dataField="@idAppUser" labelFunction="lookupUserName"/>
			       	<mx:DataGridColumn headerText="Sample 1" width="50" dataField="@nameSample1"/>
			       	<mx:DataGridColumn headerText="Sample 2" width="50" dataField="@nameSample2"/>
		         </util:columns>
		       </util:DataGridAlternatingGroup>
			</mx:VBox>
			
			
			<mx:VBox id="exploreView" label="Explore Files" width="100%" height="100%" 
				enabled="true"
				verticalGap="0" paddingLeft="0" paddingRight="0">
			    <mx:HBox horizontalAlign="right" width="100%">
			      <mx:Label id="fileCountLabel" width="100%" text="{fileCountMessage}" textAlign="right"/>
			    </mx:HBox>
			    <mx:DataGrid 
			    	 width="100%" height="100%" 
	   	 			sortableColumns="false"	
			    	 dataProvider="{expandedFileList}" 
			    	  itemClick="toggleFileCheck(event)" id="fileGrid">
			       <mx:columns>
		            <mx:DataGridColumn headerText=" " 
		            	width="3" 
		            	editable="true"           sortable="false"              	
		            	dataField="@isSelected" 
		            	editorDataField="selected" 
		            	itemRenderer="hci.flex.renderers.CheckBox"/>
		            <mx:DataGridColumn width="14" headerText="#">
		                <mx:itemRenderer>
		                    <mx:Component >
		                        <mx:HBox  horizontalGap="0" >
		                          <mx:Image id="experimentImage"  
			                          	source="{(data.@showRequestNumber == 'Y' ? (data.@codeRequestCategory == 'QC' ? parentApplication.iconQC : (data.@codeRequestCategory == 'SOLEXA' ? parentApplication.iconSolexa : data.@codeRequestCategory == 'AFFY' ? parentApplication.iconMicroarrayAffy : data.@codeRequestCategory == 'AGIL' ? parentApplication.iconMicroarray : parentApplication.iconFlask)) : '')}" >
		                    	 </mx:Image> 
		                           <mx:Label id="requestNumber" text="{data.@showRequestNumber == 'Y' ? data.@requestNumber : ''}">
		                           </mx:Label>
		                        </mx:HBox>
		                    </mx:Component>
		                </mx:itemRenderer>
		            </mx:DataGridColumn>  
		            <mx:DataGridColumn width="18" headerText="Folder" >
		                <mx:itemRenderer>
		                    <mx:Component >
		                        <mx:HBox  horizontalGap="0" >
		                          <mx:Image id="directoryImage" source="{data.@showDirectoryName == 'Y' ? parentApplication.iconFolder : ''}">
		                    	 </mx:Image> 
		                           <mx:Label id="directoryName" text="{data.@showDirectoryName == 'Y' ? data.@directoryName : ''}">
		                           </mx:Label>
		                        </mx:HBox>
		                    </mx:Component>
		                </mx:itemRenderer>
		            </mx:DataGridColumn> 
		              	<mx:DataGridColumn dataField="@displayName"    headerText="File"   width="70"/>
			    	<mx:DataGridColumn dataField="@type"           headerText="Type"   width="12"/>
			    	<mx:DataGridColumn dataField="@fileSizeText"   headerText="Size"   width="12"/>
			    	<mx:DataGridColumn dataField="@lastModifyDateDisplay" headerText="Date"   width="22"/>
			      </mx:columns>	
			    	
			    </mx:DataGrid>
			</mx:VBox>
			
	</mx:ViewStack>
		
	</mx:VBox>
	



</mx:Canvas>


