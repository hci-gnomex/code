<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:views="views.*" xmlns:util="views.util.*" label="Files">

 
   <mx:HTTPService  
    id="cacheFileDownloadList" 
    url="CacheFileDownloadList.gx"
    destination="cacheFileDownloadList"
    resultFormat="e4x"
    showBusyCursor="false"
    result="onCacheFileDownloadList(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get cache file download list', event)"
    method="POST"
    useProxy="false">
    <mx:request>
    	<fileDescriptorXMLString>{selectedFileList.toXMLString()}</fileDescriptorXMLString>
    </mx:request>
  </mx:HTTPService>
  
    
    <mx:HTTPService  
    id="getRequestDownloadList" 
    url="GetRequestDownloadList.gx"
    destination="getRequestDownloadList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequestDownloadList(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get request download list', event)"
    method="POST"
    useProxy="false">
    </mx:HTTPService >	
    

 <mx:Script>
 <![CDATA[
 	import flash.display.Sprite;
 	import flash.net.FileReference;
 	import flash.net.URLRequest;
 	import flash.net.URLRequestMethod;
 	import flash.net.URLVariables;
 	
 	import hci.flex.controls.CheckBox;
 	
 	import mx.controls.Alert;
 	import mx.events.CloseEvent;
 	import mx.events.CollectionEvent;
 	import mx.events.CollectionEventKind;
 	import mx.events.ListEvent;
 	import mx.events.PropertyChangeEvent;
 	import mx.formatters.DateFormatter;
 	import mx.managers.PopUpManager;
 	import mx.rpc.events.ResultEvent;
 	
 	import views.experiment.DownloadProgressView;
 	import views.renderers.CheckBoxGroupedItem;
 	import views.util.FileUtil;
        
    public var downloadProgressWindow:DownloadProgressView;
	 
	[Bindable]
	public var uploadButtonsVisible:Boolean = false;

	[Bindable]
	public var removeFileButtonsVisible:Boolean = false;

 	[Bindable]
    public var rowCountMessage:String = new String();
    
    [Bindable]
    public var downloadSizeMessage:String = new String();
    
    [Bindable]
    public var browseMessage:String = new String();
    
    
    [Bindable]
    private var selectedFileList:XMLListCollection;
    
    private var estimatedDownloadSize:Number;
    
    private const DOWNLOAD_FOLDERS_URL:String  = "DownloadResultsServlet.gx"; 
    private const DOWNLOAD_FILES_URL:String    = "DownloadFileServlet.gx"; 
	private const SUGGESTED_LOCAL_FILENAME:String = "gnomex-data";  
       
    [Bindable]
    public var resultKeys:String;
    
    private var filesExceedingMaxMessage:String = "";
  	
  	public static const   ALERT_BUTTON_WIDTH:int = Alert.buttonWidth;
      
    
    private var dateFormatter:DateFormatter = new DateFormatter();
        
    private function onGetRequestDownloadList(event:ResultEvent): void {
		if (getRequestDownloadList.lastResult.name() != "RequestDownloadList") {
        	Alert.show(getRequestDownloadList.lastResult..ACTMESSAGE.@TEXT);
        	return;
        }    	 
        this.downloadTree.visible = true;
        setFileCount();
        callLater(expandNodes);
    	parentDocument.filterList();
		this.downloadList.removeEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingDownloadsChange);
		this.downloadList.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingDownloadsChange);
		filesToDelete.removeAll();
    		
    }
    
    private function expandNodes():void {
    	for each (var item3:Object in getRequestDownloadList.lastResult..FileDescriptor.(@type == "dir")) {
    		downloadTree.expandItem(item3, false);
    	}
    }

    private function getSelectedFolders():void {
		resultKeys = "";
    	for(var i:Number = 0; i < downloadList.length; i++) {
    		if (downloadList[i].@isSelected != null && downloadList[i].@isSelected.toString() == "true") {
        		resultKeys += downloadList[i].@key + ":"; 
      		}
        }     	
    }
    
    
 	public function downloadExpandedFiles():void {
		var selectedFiles:XMLList = getRequestDownloadList.lastResult..FileDescriptor.(@isSelected == "true");        	
    	selectedFileList = new XMLListCollection(selectedFiles);
    	
    	filesExceedingMaxMessage = "";
    	if (selectedFileList.length == 0) {
			Alert.show("Please select the files to download.");
    	} else {
	    	estimatedDownloadSize = 0;
    		for each (var item:Object in selectedFileList) {
    			var size:Number = FileUtil.getEstimatedCompressedSize(item);
    			if (size > FileUtil.MAX_DOWNLOAD_SIZE) {
    				if (filesExceedingMaxMessage.length > 0) {
    					filesExceedingMaxMessage += ", ";
    				}
    				filesExceedingMaxMessage += item.@displayName;
    			}
				estimatedDownloadSize += size;
			}
    	
    		var call:Object = cacheFileDownloadList.send();
    		call.marker = estimatedDownloadSize;    		
    	}
 	}
            
 	
 	private function getDownloadName(item:Object, col:int):String {
 		var empty:String = item.name() == "Request" && item.hasOwnProperty("@isEmpty") && item.@isEmpty == "Y" ? " (no downloads)" : "";
 		if (item.name() == "RequestDownload") {
 			if (item.hasOwnProperty("@itemNumber") && item.@itemNumber != '') {
 				var results:String = item.hasOwnProperty("@results") && item.@results != '' ? " - " + item.@results : '';
 				return item.@itemNumber + results + empty;
 			} else {
		    	return item.@results + empty;
 			}
 		} else {
 			return item.@displayName + empty;
 		} 
    }

    public function setFileCount():void {
    	rowCountMessage = getRequestDownloadList.lastResult..FileDescriptor.(@type != 'dir').length() + " file(s).";    	
    }
    
    
    
    private function onCacheFileDownloadList(event:ResultEvent):void {
    	var call:Object = event.token;
    	var message:String = "";
    	var title:String = "";
    	var estimatedSize:Number = call.marker;
    	if (filesExceedingMaxMessage != "") {
    		message =  
    			"The following files exceed the " + FileUtil.MAX_DOWNLOAD_SIZE_DISPLAY + " maximum:\n" + this.filesExceedingMaxMessage + ".\n\nDo you want to be directed to the browser page for downloading large files individually?"
    		title = "Download file exceeds maximum size"; 
			Alert.show( message,
				title,
				(Alert.OK | Alert.CANCEL), this, 
				onAlternateDownloadFiles,						
				parentApplication.iconWarning);

    	} else if (estimatedSize >= FileUtil.MAX_DOWNLOAD_SIZE) {
    		message =  
    			"The total download size (" + FileUtil.getFileSizeText(call.marker) + ") exceeds the " + FileUtil.MAX_DOWNLOAD_SIZE_DISPLAY + " maximum.\n\nYou must unselect some files or click on the 'Download large files' link to download files individually."
    		title = "Total download size exceeds maximum size"; 
			Alert.show( message, title);

    	} else {
    		message = "Ready to download approximately " + FileUtil.getFileSizeText(call.marker) + " of data.  Proceed?";
			Alert.show( message,
						title,
						(Alert.YES | Alert.NO), this, 
						onDownloadFiles,						
						parentApplication.iconWarning);
    	}
	
    	
    }
    

	private function onDownloadFiles(event:CloseEvent):void {
		if (event.detail==Alert.YES) {
			var parms:URLVariables = new URLVariables();
			parms.mode =  "zip";
	        var progressWindow:DownloadProgressView = new DownloadProgressView();
    		progressWindow.init(this, this.DOWNLOAD_FILES_URL, parms, parentDocument.downloadExpandedFilesButton, estimatedDownloadSize, this.SUGGESTED_LOCAL_FILENAME);		
		}
	}    

	private function onAlternateDownloadFiles(event:CloseEvent):void {
		if (event.detail==Alert.OK) {
			parentDocument.showAlternateDownloadPage();	
		} 		
	}
	
	public function selectDownload(requestNumber:String):void {
		var pos:int = -1;
		for each(var r:Object in downloadList) {
			if (r.@requestNumber == requestNumber) {
				downloadTree.selectedItem = r;
				break;
			}
			pos++;
			for each(var rd:Object in r.RequestDownload) {
				pos++;
				for each(var fd:Object in rd.FileDescriptor) {
					pos++;
				}
			}
		}
		
		if (pos >= 0) {
			downloadTree.scrollToIndex(pos);
		}
	}

		
	private function underlyingDownloadsChange(event:CollectionEvent):void {
		if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
			// ignore refresh and resets 
			return;
		}
		
		var selectedDownloadSize:Number = 0;
		var selectedFiles:XMLList = getRequestDownloadList.lastResult..FileDescriptor.(@isSelected == "true");        	
    	for each(var file:Object in selectedFiles) {
    		if (file.@type != "dir") {
    			var size:Number = FileUtil.getEstimatedCompressedSize(file);
    			selectedDownloadSize += size;
    		}
    	}
    	downloadSizeMessage = "Ready to download " + FileUtil.getFileSizeText(selectedDownloadSize);

	}
	 
	 private function showExperimentUploadWindow():void {
		 var idRequest:String = getRequestDownloadList.lastResult..Request[0].@idRequest;
		 var requestNumber:String = getRequestDownloadList.lastResult..Request[0].@requestNumber;
		 if (idRequest != null && idRequest != "") {
			 ExperimentEditView.showExperimentUploadWindow(parentApplication.theBody, idRequest, requestNumber);		 
		 }
	 }
	 
	 private function showExperimentOrganizeWindow():void {
		 var idRequest:String = getRequestDownloadList.lastResult..Request[0].@idRequest;
		 var requestNumber:String = getRequestDownloadList.lastResult..Request[0].@requestNumber;
		 if (idRequest != null && idRequest != "") {
			 ExperimentEditView.showExperimentOrganizeWindow(parentApplication.theBody, idRequest, requestNumber);		 
		 }
	 }
	 
	 private function showExperimentFDTUploadWindow():void {
		 var idRequest:String = getRequestDownloadList.lastResult..Request[0].@idRequest;
		 var requestNumber:String = getRequestDownloadList.lastResult..Request[0].@requestNumber;
		 if (idRequest != null && idRequest != "") {
			 ExperimentEditView.showExperimentUploadFDTWindow(parentApplication.theBody, idRequest, requestNumber);		 
		 }
	 }

	 private function removeFile():void  {
		 var selectedFiles:XMLList = getRequestDownloadList.lastResult..FileDescriptor.(@isSelected == "true");        	
		 selectedFileList = new XMLListCollection(selectedFiles);
		 
		 if (selectedFileList.length == 0) {
			 Alert.show("Please select the files to delete.");
			 return;
		 }
		 Alert.show("Are you sure you want to remove the file?",
			 "Confirm",
			 (Alert.YES | Alert.NO), this, 
			 onPromptToRemoveFile,						
			 parentApplication.iconWarning);
	 }
	 
	 private function onPromptToRemoveFile(event:CloseEvent):void {
		 if (event.detail == Alert.YES) {
			 removeFileImpl();
		 }
	 }
	 
	 private function removeFileImpl():void {
		 parentDocument.dirty.setDirty();
		for each (var f:Object in getRequestDownloadList.lastResult..FileDescriptor.(@isSelected == "true")){
			filesToDelete.addItem(f);
			
			var children:XMLList = XMLList(f.parent()).children();
			for (var i:Number = 0; i < children.length(); i++){
				if (children[i] == f){
					delete children[i];
				}
			} 
		}
	 }
	 
	 private function promptToRemoveAllFiles():void {
		 Alert.show("Are you sure you want to remove all the files?",
			 "Confirm",
			 (Alert.YES | Alert.NO), this, 
			 onPromptToRemoveAllFiles,						
			 parentApplication.iconWarning);
	 }
	 
	 private function onPromptToRemoveAllFiles(event:CloseEvent):void  {
		 if (event.detail == Alert.YES) {
			 removeAllFilesImpl();
		 }
	 }
	 
	 private function removeAllFilesImpl():void  {
		parentDocument.dirty.setDirty();
//		for each(var f:Object in downloadTree) {
//			filesToDelete.addItem(f);
//		}
//		
//		var children:XMLList = downloadList.children();
//		for (var i:Number = 0; i < children.length(); i++){
//			delete children[i];
//		}
//		
		for each (var f:Object in getRequestDownloadList.lastResult..FileDescriptor){
			filesToDelete.addItem(f);
			
			var children:XMLList = XMLList(f.parent()).children();
			for (var i:Number = 0; i < children.length(); i++){
				if (children[i] == f){
					delete children[i];
				}
			} 
		}
	 }
    
	 public function getFilesToDelete():XMLListCollection{
		 return filesToDelete;
	 }
 ]]>
 </mx:Script>
 
    <mx:XMLListCollection id="downloadList" source="{getRequestDownloadList.lastResult.Request}"/>
	<mx:XMLListCollection  id="filesToDelete"  />
	
	<mx:VBox width="100%" height="100%" paddingBottom="0" paddingLeft="4" paddingRight="4" paddingTop="0" verticalGap="0">
		<mx:HBox width="100%">
			<mx:HBox width="200" height="100%" verticalAlign="middle">
				<mx:Label text="{downloadSizeMessage}" fontWeight="normal" fontStyle="normal" />
			</mx:HBox>
			<mx:Spacer width="10"/>
			<mx:HBox width="100%" horizontalAlign="center" styleName="warningLabel" height="100%" verticalAlign="middle">
				<mx:Label text="{browseMessage}"/>			
			</mx:HBox>
			<mx:Spacer width="100%" height="100%"/>
			
		</mx:HBox>
		<mx:HBox id="deleteButtonsContainer"  includeInLayout="{this.uploadButtonsVisible || this.removeFileButtonsVisible}" visible="{this.uploadButtonsVisible || this.removeFileButtonsVisible}" horizontalAlign="right">
			<mx:LinkButton fontSize="9" label="Upload files" 
						   click="showExperimentUploadWindow()" 
						   visible="{this.uploadButtonsVisible}"
						   id="linkbutton1" textDecoration="underline" icon="@Embed(source='../../assets/upload.png')" textAlign="left"/>
			<mx:LinkButton fontSize="9" label="FDT Upload files" 
						   visible="{this.uploadButtonsVisible &amp;&amp; parentApplication.isFDTSupported}"
						   includeInLayout="{this.uploadButtonsVisible &amp;&amp; parentApplication.isFDTSupported}"
						   click="showExperimentFDTUploadWindow()" 
						   id="linkbuttonUploadFDT" textDecoration="underline" icon="@Embed(source='../../assets/upload_large.png')" textAlign="left"/>
			<mx:LinkButton fontSize="9" label="Organize files"  
						   visible="{this.uploadButtonsVisible}"
						   click="showExperimentOrganizeWindow()" 
						   id="uploadOrganizeLink" 
						   textDecoration="underline" icon="@Embed(source='../../assets/chart_organisation.png')" 
						   textAlign="left"/>
			<mx:LinkButton textDecoration="underline" 
						   visible="{this.removeFileButtonsVisible}"
						   includeInLayout="{this.removeFileButtonsVisible}"
						   label="Remove (from file system)" 
						   icon="@Embed(source='../../assets/delete.png')" 
						   id="deleteFileButton" 
						   toolTip="Delete selected files" 
						   click="removeFile()"/>
			<mx:LinkButton textDecoration="underline" 
						   visible="{this.removeFileButtonsVisible}"
						   includeInLayout="{this.removeFileButtonsVisible}"
						   label="Delete all" 
						   icon="@Embed('../../assets/folder_delete.png')"  
						   id="clearFilesButton" 
						   toolTip="Delete all files" 
						   click="promptToRemoveAllFiles()"/>
		</mx:HBox>

		<mx:AdvancedDataGrid id="downloadTree" width="100%" height="100%" 
                 groupItemRenderer="views.renderers.CheckBoxGroupedItem"
				 dropEnabled="false"  
				 displayItemsExpanded="true"
				 iconFunction="parentApplication.getTreeIcon"
				 dragEnabled="false" 
				 dragMoveEnabled="false"  
				 showHeaders="true"  
				 sortExpertMode="true" 
				 sortableColumns="false"
				 borderStyle="solid" 
				 headerWordWrap="false" 
				 resizableColumns="true">						
	 	        <mx:dataProvider> 
  				  <mx:HierarchicalData source="{downloadList}"/>
		        </mx:dataProvider>						  
		        <mx:columns>
  				  <mx:AdvancedDataGridColumn dataField="@displayName"  labelFunction="getDownloadName"  headerText="Folder or File" width="250"/> 
  				  <mx:AdvancedDataGridColumn dataField="@viewURL" headerText="" width="25" itemRenderer="views.renderers.LinkButtonViewFile"/>
  				  <mx:AdvancedDataGridColumn dataField="@info" headerText="Info" width="80"/>
  				  <mx:AdvancedDataGridColumn dataField="@fileSizeText"  headerText="Size" width="40" textAlign="right" /> 
  				  <mx:AdvancedDataGridColumn dataField="@lastModifyDateDisplay"  headerText="Modified" width="50"/> 
  			    </mx:columns>
  			</mx:AdvancedDataGrid>
		<mx:Label text="{rowCountMessage}" width="100%" textAlign="right"/>

	</mx:VBox>
	



</mx:Canvas>


