<?xml version="1.0" encoding="utf-8"?>
<exp:TabSamplesBase
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:util="views.util.*"
	xmlns:fx="*.views.renderers"
	xmlns:exp="views.experiment.*"
	xmlns:grid="views.util.grid.*"
	show="{this.init();}"
	label="Samples" width="100%" height="100%"  enabled="false"  xmlns:renderers="views.renderers.*">
	
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			import hci.flex.controls.Label;
			
			import mx.collections.IHierarchicalCollectionView;
			import mx.collections.SortField;
			import mx.collections.XMLListCollection;
			import mx.controls.AdvancedDataGrid;
			import mx.controls.Alert;
			import mx.controls.TextInput;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			import mx.validators.NumberValidator;
			import mx.validators.ValidationResult;
			
			import views.renderers.CheckBoxRenderer;
			import views.renderers.ComboBox;
			import views.renderers.ComboBoxWorkflowStatus;
			import views.renderers.GridColumnFillButton;
			import views.renderers.MultiselectRenderer;
			import views.renderers.TextInputSeqPrepByCore;
			import views.renderers.URLRenderer;
			import views.util.AdvancedDataGridColumnWithType;
			import views.util.AnnotationAdvancedDataGridColumn;
			import views.util.CopySampleSheetColumnView;
			import views.util.UploadSampleSheetInstructionsView;
			import views.util.UploadSampleSheetView;
			
			
			public  var DEFAULT_CONTROL_NAME:String	  = "Control";
			
			
			[Bindable]
			private var isExternal:Boolean = false;
			
			private var uploadFR:FileReference;
			private var uploadSampleSheetURL:String;
			private var docTypes:FileFilter;
			private var hasColumnNames:Boolean; 
			private var	sampleSheetXML:XML;
			
			private var saveInstructionToolTipText:String;
			
			override protected function initButtons():void {
				
			}
			
			override public function getSamplesGrid():AdvancedDataGrid {
				return this.samplesGrid;
			}
			
			
			override protected function getNumPlates():int {
				var numPlates:int = 0;
				if (hasPlates()) {
					if ( parentDocument.isIScanState() ) {
						numPlates = parentDocument.numIScanPlates;
					} else {
						numPlates = parentDocument.numCapSeqPlates; 
					}
				}
				return numPlates;
			}
			
			override protected function getNextPlate():int {
				var nextPlate:int = 0;
				if (hasPlates()) {
					for each (var sample:Object in parentDocument.samples) {
						var thisPlate:int = 0;
						if (sample.@name != '') {
							if (sample.@plateName == "Plate 1") thisPlate = 1;
							if (sample.@plateName == "Plate 2") thisPlate = 2;
							if (sample.@plateName == "Plate 3") thisPlate = 3;
							if (sample.@plateName == "Plate 4") thisPlate = 4;
						}
						if (thisPlate > nextPlate) {
							nextPlate = thisPlate;
						}
					}
					if (nextPlate < 4) {
						nextPlate = nextPlate + 1;
					} else {
						nextPlate = 0;
					}
				}
				return nextPlate;
			}
			
			override protected function getSampleSheetSpecifiedFieldList():Dictionary {
				var fieldList:Dictionary = null;
				if (hasPlates() && parentDocument.isCapSeqState()) {
					fieldList = new Dictionary();
					fieldList[this.sampleNameCol.dataField] = this.sampleNameCol;
					fieldList[this.descriptionColumn.dataField] = this.descriptionColumn;
				} else if (parentDocument.isFragAnalState()) {
					fieldList = new Dictionary();
					fieldList[this.sampleNameCol.dataField] = this.sampleNameCol;
					fieldList[this.descriptionColumn.dataField] = this.descriptionColumn;
					for each (var col:AdvancedDataGridColumn in samplesGrid.columns) {
						if (col.dataField != null && col.dataField.substr(0,9) == "@hasAssay" && col.visible) {
							fieldList[col.dataField] = col;
						}
					}
				}
				
				return fieldList;
			}
			
			override protected function getAddAllAnnotations():Boolean {
				var addAllAnnotations:Boolean = true;
				if (parentDocument.isIScanState()) {
					addAllAnnotations = false;
				}
				return addAllAnnotations;
			}
			
			
			
			override public function addSample():Boolean {
				var emptyNode:XML = null;
				var idOrganism:String = parentDocument.setupView.getIdOrganism();
				var isValid:Boolean = true;
				
				if (currentState != null && (currentState.indexOf('QCSamples') >= 0)) {
					if(parentDocument.isEditState()){
						var otherSamplePrepMethod:String = parentDocument.request.samples.Sample[0].@otherSamplePrepMethod;
						emptyNode = new XML("<Sample " +
							" idSample='" + "Sample" + getNextSampleId() + "'" +
							" name='' description='' " +
							" canChangeSampleName='Y'" +
							" canChangeSampleType='Y'" +
							" canChangeSampleConcentration='Y'" +
							" canChangeSampleSource='Y'" +
							" canChangeNumberSequencingCycles='Y'" +
							" canChangeNumberSequencingLanes='Y'" + 
							" concentration=''" +
							" idOligoBarcode = ''" +
							" barcodeSequence = ''" +
							" idOligoBarcodeB = ''" +
							" barcodeSequenceB = ''" +
							" codeConcentrationUnit='ng/ul'" + 
							" codeBioanalyzerChipType='" + (parentApplication.submitInternalExperiment() ? parentDocument.request.samples.Sample[0].@codeBioanalyzerChipType : '') + "'" +
							" idSampleType='" + (parentApplication.submitInternalExperiment() ? parentDocument.request.samples.Sample[0].@idSampleType : '')  + "'" +
							" otherSamplePrepMethod=\"" + (parentApplication.submitInternalExperiment() ? (otherSamplePrepMethod).replace(/\"/g, "&quot;") : '')  + "\"" +				
							" treatment=''"  +				
							"/>");
					} else{
						emptyNode = new XML("<Sample " +
							" idSample='" + "Sample" + getNextSampleId() + "'" +
							" name='' description='' " +
							" canChangeSampleName='Y'" +
							" canChangeSampleType='Y'" +
							" canChangeSampleConcentration='Y'" +
							" canChangeSampleSource='Y'" +
							" canChangeNumberSequencingCycles='Y'" +
							" canChangeNumberSequencingLanes='Y'" + 
							" concentration=''" +
							" idOligoBarcode = ''" +
							" barcodeSequence = ''" +
							" idOligoBarcodeB = ''" +
							" barcodeSequenceB = ''" +
							" codeConcentrationUnit='ng/ul'" + 
							" codeBioanalyzerChipType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.getSelectedCodeBioanalyzerChipType() : '') + "'" +
							" idSampleType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleTypeRadioGroup.selectedValue : '')  + "'" +
							" otherSamplePrepMethod=\"" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherSamplePrepMethod.text.replace(/\"/g, "&quot;") : '')  + "\"" +				
							" treatment=''"  +				
							"/>");
						
					}
					
				} else if (currentState != null && (currentState.indexOf('CapSeq') >= 0)) {
					if (parentDocument.samples.length >= 384) {
						Alert.show("Maximum number of samples reached.  Add Sample ignored.");
						isValid = false;
					} else {
						emptyNode = getEmptyCapSeqNode(parentDocument.samples.length); 
					}				
					
				} else if (currentState != null && (currentState.indexOf('FragAnal') >= 0)) {
					if (parentDocument.samples.length >= 96) {
						Alert.show("Maximum number of samples reached.  Add Sample ignored.");
						isValid = false;
					}
					var fragWellName:String = this.getWellName(parentDocument.samples.length);
					
					var fragXMLString:String = "<Sample " +
						" idSample='" + "Sample" + getNextSampleId() + "'" +
						" name='' description='' " +
						" canChangeSampleName='Y'" +
						" canChangeSampleType='Y'" +
						" canChangeSampleDropOffLocation='Y'" +
						" canChangeSampleConcentration='N'" +
						" canChangeSampleSource='N'" +
						" canChangeNumberSequencingCycles='N'" +
						" canChangeNumberSequencingLanes='N'" + 
						" concentration=''" +
						" idOligoBarcode = ''" +
						" barcodeSequence = ''" +
						" idOligoBarcodeB = ''" +
						" barcodeSequenceB = ''" +
						" codeConcentrationUnit='ng/ul'" + 
						" codeBioanalyzerChipType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.getSelectedCodeBioanalyzerChipType() : '') + "'" +
						" otherSamplePrepMethod=''" + 				
						" treatment=''" +
						" plateName='Plate 1'" +
						" wellName='" + fragWellName + "'";
					for (var x:int = 0; x < parentDocument.assayCollection.length; x++) {
						var assayObject:Object = parentDocument.assayCollection.getItemAt(x);
						if (parentDocument.isAssaySelected(assayObject)) {
							fragXMLString += " " + parentDocument.getAssayDataField(x).substr(1) + "='Y'";
						}
					}
					fragXMLString += "/>";
					emptyNode = new XML(fragXMLString);
				} else if (currentState != null && (currentState.indexOf('MitSeq') >= 0)) {
					var mitWellName:String = getWellName(parentDocument.samples.length);
					emptyNode = new XML("<Sample " +
						" idSample='" + "Sample" + getNextSampleId() + "'" +
						" name='' description='' " +
						" canChangeSampleName='Y'" +
						" canChangeSampleType='Y'" +
						" canChangeSampleDropOffLocation='Y'" +
						" canChangeSampleConcentration='N'" +
						" canChangeSampleSource='N'" +
						" canChangeNumberSequencingCycles='N'" +
						" canChangeNumberSequencingLanes='N'" + 
						" concentration=''" +
						" idOligoBarcode = ''" +
						" barcodeSequence = ''" +
						" idOligoBarcodeB = ''" +
						" barcodeSequenceB = ''" +
						" codeConcentrationUnit='ng/ul'" + 
						" codeBioanalyzerChipType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.getSelectedCodeBioanalyzerChipType() : '') + "'" +
						" otherSamplePrepMethod=''" + 				
						" treatment=''" +
						" plateName='Plate 1'" +
						" wellName='" + mitWellName + "'" +
						"/>");
				} else if (currentState != null && (currentState.indexOf('CherryPick') >= 0)) {
					var cherryWellName:String = getCherryWellName(parentDocument.samples.length, Number(parentDocument.sampleSetupView.cherryNumDestinationWellsRadioGroup.selectedValue));
					emptyNode = this.getEmptyCherryPickNode(cherryWellName);
				} else if (currentState != null && (currentState.indexOf('IScan') >= 0)) {
					
					emptyNode = this.getEmptyIScanNode(parentDocument.samples.length);
					
				} else {
					var xmlString:String = "";
					if(parentDocument.isEditState()){
						var otherSamplePrepMethodAffy:String = parentDocument.request.samples.Sample[0].@otherSamplePrepMethod;
						var otherOrganismAffy:String = parentDocument.request.samples.Sample[0].@otherOrganism;
						xmlString = "<Sample " +
							" idSample='" + "Sample" + getNextSampleId() + "'" +
							" name='' description='' " +
							" cy3='false'" +
							" cy5='false'" +			    
							" canChangeSampleName='Y'" +
							" canChangeSampleType='Y'" +
							" canChangeSampleConcentration='Y'" +
							" canChangeSampleSource='Y'" +
							" canChangeNumberSequencingCycles='Y'" +
							" canChangeNumberSequencingLanes='Y'" + 
							" concentration=''" + 
							" idOligoBarcode = ''" +				
							" barcodeSequence = ''" +
							" idOligoBarcodeB = ''" +
							" barcodeSequenceB = ''" +
							" codeConcentrationUnit='ng/ul'" + 
							" idSampleType='" + (parentApplication.submitInternalExperiment() ? parentDocument.request.@idSampleTypeDefault : '') + "'" +
							" otherSamplePrepMethod=\"" + (parentApplication.submitInternalExperiment() ? (otherSamplePrepMethodAffy).replace(/\"/g, "&quot;") : '') + "\"" +				
							" idOrganism='"  + (parentApplication.submitInternalExperiment() ? parentDocument.request.@idOrganism : idOrganism) + "'" +				
							" otherOrganism='" + (parentApplication.submitInternalExperiment() ? (otherOrganismAffy).replace(/\"/g, "&quot;") : '') + "'" 	+	
							"/>"
					} else{
						xmlString = "<Sample " +
							" idSample='" + "Sample" + getNextSampleId() + "'" +
							" name='' description='' " +
							" cy3='false'" +
							" cy5='false'" +			    
							" canChangeSampleName='Y'" +
							" canChangeSampleType='Y'" +
							" canChangeSampleConcentration='Y'" +
							" canChangeSampleSource='Y'" +
							" canChangeNumberSequencingCycles='Y'" +
							" canChangeNumberSequencingLanes='Y'" + 
							" concentration=''" + 
							" idOligoBarcode = ''" +				
							" barcodeSequence = ''" +
							" idOligoBarcodeB = ''" +
							" barcodeSequenceB = ''" +
							" codeConcentrationUnit='ng/ul'" + 
							" idSampleType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleTypeRadioGroup.selectedValue : '') + "'" +
							" otherSamplePrepMethod=\"" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherSamplePrepMethod.text.replace(/\"/g, "&quot;") : '') + "\"" +				
							" idOrganism='"  + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleOrganismCombo.selectedItem.@value : idOrganism) + "'" +				
							" otherOrganism='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherOrganism.text.replace(/\"/g, "&quot;") : '') + "'" 	+	
							"/>"
						
					}
					emptyNode = new XML(xmlString);
				}
				
				if (emptyNode != null) {
					parentDocument.samples.addItem(emptyNode);
				}
				
				return isValid;
			}
			
			private function getEmptyCapSeqNode(idx:int):XML {
				var plateName:String = getPlateName(idx);
				var wellName:String = getWellName(idx);
				var sampleId:String = "Sample" + idx;
				var emptyNode:XML = new XML("<Sample " +
					" idSample='" + sampleId + "'" +
					" name='' description='' " +
					" containerType='" + (parentDocument.request.@containerType == 'PLATE' ? 'Plate' : 'Tube') + "'" +
					" canChangeSampleName='Y'" +
					" canChangeSampleType='Y'" +
					" canChangeSampleDropOffLocation='Y'" +
					" canChangeSampleConcentration='N'" +
					" canChangeSampleSource='N'" +
					" canChangeNumberSequencingCycles='N'" +
					" canChangeNumberSequencingLanes='N'" + 
					" concentration=''" +
					" idOligoBarcode = ''" +
					" barcodeSequence = ''" +
					" idOligoBarcodeB = ''" +
					" barcodeSequenceB = ''" +
					" codeConcentrationUnit='ng/ul'" + 
					" idSampleType='" + (parentApplication.submitInternalExperiment() && parentDocument.sampleSetupView.sampleTypeRadioGroup.selectedValue != null ? parentDocument.sampleSetupView.sampleTypeRadioGroup.selectedValue : '') + "'" +
					" codeBioanalyzerChipType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.getSelectedCodeBioanalyzerChipType() : '') + "'" +
					" otherSamplePrepMethod=''" + 				
					" treatment=''" +	
					" plateName='" + plateName + "'" +
					" wellName='" + wellName + "'" +
					" isControl=''" +
					"/>");
				return emptyNode;
			}
			
			private function getEmptyIScanNode(idx:int):XML {
				var plateName:String = getIScanPlateName(idx);
				var wellName:String = getWellName(idx);
				var sampleId:String = "Sample" + idx;
				var emptyNode:XML = new XML("<Sample " +
					" idSample='" + sampleId + "'" +
					" name='' description='' " +
					" containerType='Plate'" +
					" canChangeSampleName='Y'" +	
					" plateName='" + plateName + "'" +
					" wellName='" + wellName + "'" +
					"/>");
				return emptyNode;
			}
			
			
			private function getEmptyCherryPickNode(cherryWellName:String):XML {
				var emptyNode:XML = new XML("<Sample " +
					" idSample='" + "Sample" + getNextSampleId() + "'" +
					" name='' description='' " +
					" canChangeSampleName='Y'" +
					" canChangeSampleType='Y'" +
					" canChangeSampleDropOffLocation='Y'" +
					" canChangeSampleConcentration='N'" +
					" canChangeSampleSource='N'" +
					" canChangeNumberSequencingCycles='N'" +
					" canChangeNumberSequencingLanes='N'" + 
					" concentration=''" +
					" idOligoBarcode = ''" +
					" barcodeSequence = ''" +
					" codeConcentrationUnit='ng/ul'" + 
					" codeBioanalyzerChipType=''" +
					" otherSamplePrepMethod=''" + 				
					" treatment=''" +
					" sourcePlate=''" +
					" sourceWell=''" +
					" destinationWell='" + cherryWellName + "'" +
					"/>");
				return emptyNode;
			}
			
			override public function getPlateName(idx:int):String {
				if ( parentDocument.isIScanState() ) {
					return getIScanPlateName(idx);
				}
				var plateName:String = "";
				if (parentDocument.request.@containerType == 'PLATE') {
					var y:int = idx / 96;
					y = y + 1;
					plateName = "Plate " + String(y);
				}
				return plateName;
			}
			
			private function getIScanPlateName(idx:int):String {
				var plateName:String = "";
				
				var y:int = idx / 96;
				if ( this.isEditState && parentDocument.samples.getItemAt( y*96 ) != null ) {
					plateName = parentDocument.samples.getItemAt( y*96 ).@plateName;
				} else {
					y = y + 1;
					plateName = parentDocument.sampleSetupView.getIScanPlateName(y);
				}
				
				
				return plateName;
			}
			
			
			private function getCherryWellName(idx:int, numDestinationWells:int):String {
				var cherryWellName:String;
				var cherryColNumber:int;
				if (numDestinationWells == 384) {
					cherryWellName = "ABCDEFGHIJKLMNOP".substr(idx / 24, 1);
					cherryColNumber = idx % 24 + 1;
				} else {
					cherryWellName = "ABCDEFGHIJKLMNOP".substr(idx / 12, 1);
					cherryColNumber = idx % 12 + 1;
				}
				cherryWellName += cherryColNumber.toString();
				
				return cherryWellName;
			}
			
			override protected function checkDeleteValidity(sample:Object):Boolean {
				var isValid:Boolean = true;							
				if (currentState != null && (currentState.indexOf('CapSeqState') >= 0)) {
					if (parentDocument.samples.length <= 32 && parentDocument.request.@containerType == 'PLATE') {
						Alert.show("You may not have less than 32 samples in a Plate container.  Delete ignored.");
						isValid = false;
					}
				}
				
				if (isValid) {
					for each(var hyb:Object in parentDocument.hybs) {
						if (hyb.@idSampleChannel1 == sample.@idSample) {
							if (sample.@idSample.indexOf("Sample") >= 0) {
								hyb.@idSampleChannel1 = '0';								
							} else {
								Alert.show("Please remove hyb(s) for sample " + sample.@name + " before attempting to delete sample.");
								isValid = false;
								break;
							}
						}
						if (hyb.@idSampleChannel2 == sample.@idSample) {
							if (sample.@idSample.indexOf("Sample") >= 0) {
								hyb.@idSampleChannel2 = '0';
							} else {
								Alert.show("Please remove hyb(s) for sample " + sample.@name + " before attempting to delete sample.");
								isValid = false;
								break;
							}
						}
					}
				}
				
				return isValid;
			}
					
			override protected function deleteSingleSample(sample:Object):Boolean {
				var ind:int = parentDocument.samples.getItemIndex(sample);
				if ( parentDocument.isIScanState() ){
					parentDocument.samples.setItemAt(getEmptyIScanNode(ind),ind);
				} else if ( parentDocument.isCapSeqState() && this.hasPlates() ){
					parentDocument.samples.setItemAt(getEmptyCapSeqNode(ind),ind);
				} else {
					parentDocument.samples.removeItemAt(parentDocument.samples.getItemIndex(sample));
				}
				return true;
			}
			
			override protected function postDeleteProcessing(deleteHappened:Boolean):void {
				if (deleteHappened && hasPlates() && !parentDocument.isIScanState() ) {
					for (var psIdx:int = 0; psIdx < parentDocument.samples.length; psIdx++) {
						var plateSample:Object = parentDocument.samples.getItemAt(psIdx);
						plateSample.@plateName = parentDocument.isCapSeqState() ? getPlateName(psIdx) : getIScanPlateName(psIdx);
						plateSample.@wellName = getWellName(psIdx);
					}
				}
				
				// reset wells on samples when one deleted in mit seq or frag anal
				if (deleteHappened && (parentDocument.isMitSeqState() || parentDocument.isFragAnalState())) {
					for (var msIdx:int = 0; msIdx < parentDocument.samples.length; msIdx++) {
						var mitSample:Object = parentDocument.samples.getItemAt(msIdx);
						var mitWellName:String = getWellName(msIdx);
						mitSample.@wellName = mitWellName;
					}
				}
				
				if (parentDocument.isMicroarrayState()) {
					parentDocument.hybsView.hybsGrid.invalidateList();
					parentDocument.hybsView.hybsGrid.invalidateDisplayList();
				}
			}	
			
			
			private function deleteTheSample():void {
				var idx:int = samplesGrid.selectedIndex;
				deleteSample();
				checkSamplesCompleteness();
				parentDocument.hybsView.checkHybsCompleteness();
				samplesGrid.selectedIndex = idx;
			}
						
			override public function initializeSamplesGrid():void {
				if (parentDocument.requestToClone != null) {
					return;
				}
				
				var numberOfSamples:Number = 0;
				var numberOfSamplesToAdd:Number = 0;
				
				if (parentApplication.submitInternalExperiment()) {
					if (!parentDocument.sampleSetupView.checkSampleSetupCompleteness() && !parentDocument.isEditState()) {
						return;
					}
					numberOfSamples = new Number(parentDocument.sampleSetupView.numberOfSamples.text);
					if (parentDocument.isCherryPickState()) {
						numberOfSamples = new Number(parentDocument.sampleSetupView.cherryNumDestinationWellsRadioGroup.selectedValue);
					} else if ( parentDocument.isIScanState() ){ 
						numberOfSamples = parentDocument.numIScanPlates*96;
						populateSampleList();
						
						return;
					} else if (hasPlates()) {
						numberOfSamples = parentDocument.numCapSeqPlates * 96;
					} else {
						if (this.isEditState || parentDocument.isAmendState()) {
							numberOfSamples = parentDocument.samples.length > 0 ? new Number(parentDocument.samples.length) : 1;
						} 
					}
				} else {
					numberOfSamples = 1;
				}
				if (parentDocument.samples.length <= numberOfSamples) {
					numberOfSamplesToAdd = numberOfSamples - parentDocument.samples.length;
					for(var x:int = 0; x < numberOfSamplesToAdd; x++) {
						addSample();
					}
				} else {
					while (parentDocument.samples.length > numberOfSamples) {
						parentDocument.samples.removeItemAt(parentDocument.samples.length - 1);
					}
				}
			}
			
			override public function hasPlates():Boolean {
				return (parentDocument.isCapSeqState() && parentDocument.request.@containerType == 'PLATE') || parentDocument.isIScanState();
			}
			
			override public function fillPlates():void {
				if (hasPlates()) {
					var startOfPlate:int = 0;
					if ( parentDocument.isCapSeqState() ){
						for(var idx:int = 0; idx < parentDocument.numCapSeqPlates; idx++) {
							var curPlateName:String = getPlateName(startOfPlate);
							for (var sampleIdx:int = startOfPlate; sampleIdx < startOfPlate + 96; sampleIdx++) {
								if (sampleIdx >= parentDocument.samples.length) {
									addSample();
								} else {
									var curSample:Object = parentDocument.samples.getItemAt(sampleIdx);
									if (curSample.@plateName != curPlateName) {
										var newSample:Object = this.getEmptyCapSeqNode(sampleIdx);
										parentDocument.samples.addItemAt(newSample, sampleIdx);
									}
								}
							}
							startOfPlate += 96;
						}
					} else if ( parentDocument.isIScanState() ) {
						populateSampleList();
					}
				}
			}
			
			public function populateSampleList():void {
				var numberOfSamples:int = parentDocument.numIScanPlates*96;
				
				for (var sampleIdx:int = 0; sampleIdx < numberOfSamples; sampleIdx++) {
					
					var emptySample:Object = this.getEmptyIScanNode(sampleIdx);
					var existingSamples:XMLList = parentDocument.samples.source.(@plateName==emptySample.@plateName && @wellName==emptySample.@wellName);
					
					if ( existingSamples== null || existingSamples.length() == 0 ) {
						// If no sample in that plate and well, add empty one
						parentDocument.samples.addItemAt(emptySample, sampleIdx);
					} else if ( existingSamples.length > 1 ) {
						// If somehow we have more than one sample in the same well, we remove the extras
						for ( var ind:int = 1; ind < existingSamples.length; ind ++ ) {
							parentDocument.samples.removeItemAt(parentDocument.samples.getItemIndex(existingSamples[ind]));
						}
					}
				} 
				
				// Remove extra samples
				while (parentDocument.samples.length > numberOfSamples) {
					parentDocument.samples.removeItemAt(parentDocument.samples.length - 1);
				}
			}
			
			
			override public function prepareCherryPickingSamplesForEdit(numDestinationWells:int):void {
				parentDocument.request.replace("samples", <samples></samples>); 
				for(var idx:int = 0; idx < numDestinationWells; idx++) {
					var destinationWellName:String = getCherryWellName(idx, numDestinationWells);
					var found:Boolean = false;
					for each(var sample:Object in parentDocument.samples) {
						if (sample.@destinationWell == destinationWellName) {
							found = true;
							parentDocument.request.samples.appendChild(sample);
							break;
						}
					}
					if (!found) {
						var emptyNode:XML = this.getEmptyCherryPickNode(destinationWellName);
						parentDocument.request.samples.appendChild(emptyNode);
					}
				}
				parentDocument.samples.source = parentDocument.request.samples.Sample;
			}
			
			override protected function onPromptToClearAllSamples(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					if ( parentDocument.isIScanState() ){
						for each ( var s:XML in parentDocument.samples.source.(@name!='') ) {
							var sampleIdx:int = parentDocument.samples.getItemIndex(s);
							var emptySample:Object = this.getEmptyIScanNode(sampleIdx);
							parentDocument.samples.setItemAt(emptySample, sampleIdx);
						}
					} else {
						parentDocument.samples.removeAll();
						parentDocument.lanes.removeAll();
						if ( !parentDocument.isEditState() ){
							this.initializeSamplesGrid();
						} else {
							this.samplesGrid.addRow();
						}
					}
					checkSamplesCompleteness();
					this.initializeBarcoding();
				}
			}		
			
			override public function checkSamplesCompleteness():void {
				parentDocument.userWarningsSamples = "";
				
				
				var numberOfAdditionalLanes:int = 0;
				var completeCount:int = 0;
				var nameCompleteCount:int = 0;
				for each(var sample:Object in parentDocument.samples) {
					if (currentState != null && currentState.indexOf('QCSamples') >= 0){
						if (!parentApplication.submitInternalExperiment()) {
							if (isEntered(sample, "@name") &&
								reqdAnnotationsEntered(sample)) {
								completeCount++;
							}
						} else {
							if (isEntered(sample, "@name") &&
								isEntered(sample, "@idSampleType") &&		        		
								isEntered(sample, "@concentration") &&
								reqdAnnotationsEntered(sample) ) {
								
								if (!parentDocument.isEditState() &&
									parentDocument.sampleSetupView.currentState == 'QCSetupBioanalyzerState') {
									if (isEntered(sample, "@codeBioanalyzerChipType")) {
										completeCount++;       				
									} 
								} else {
									completeCount++;
								}
							}
						} 
						
					} else if (currentState == 'CapSeqState') {
						if (isEntered(sample, "@name")) {
							nameCompleteCount++;
						}
						completeCount++;
					} else if (currentState == 'FragAnalState') {
						if (isEntered(sample, "@name")) {
							for each(var col:AdvancedDataGridColumn in samplesGrid.columns) {
								if (col.dataField != null && col.dataField.substr(0,9) == "@hasAssay" && col.visible) {
									if (isEntered(sample, col.dataField) && sample[col.dataField] == 'Y') {
										completeCount++;
										break;
									}
								}
							}
						}
					} else if (currentState == 'MitSeqState') {
						if (isEntered(sample, "@name")) {
							
							completeCount++;
						}
					} else if (currentState == 'CherryPickState') {
						if (isEntered(sample, "@name") || isEntered(sample, "@sourcePlate") || isEntered(sample, "@sourceWell")) {
							var cherryNumPlates:int = Number(parentDocument.sampleSetupView.cherryNumSourcePlates.text);
							if (cherryNumPlates == 1) {
								sample.@sourcePlate = parentDocument.sampleSetupView.cherryPlate1Name.text;
							}
							if (isEntered(sample, "@name") && isEntered(sample, "@sourcePlate") && isEntered(sample, "@sourceWell") && isEntered(sample, "@destinationWell")) {
								completeCount++;
								nameCompleteCount++;
							}
						} else {
							completeCount++;
						}
					} else if (currentState == 'IScanState') {
						if (isEntered(sample, "@name")) {
							nameCompleteCount++;
						}
						completeCount++;
						
					} else {
						if (isEntered(sample, "@name") &&	        		
							(isEntered(sample, "@concentration") || !parentApplication.submitInternalExperiment()) &&  // only require concentration on internal requests
							reqdAnnotationsEntered(sample) &&
							isEntered(sample, "@idOrganism")) {
							
							if (parentDocument.getRequestCategory().@numberOfChannels == "2") {
								if (isEntered(sample, "@label")) {
									completeCount++;
								}
							} else {
								completeCount++;       						        		
							}	
						}
						
						
					}
				}
				
				
				var isComplete:Boolean = false;
				if (parentDocument.samples.length > 0 && completeCount == parentDocument.samples.length) {
					if (currentState == 'CapSeqState' || currentState == 'IScanState') {
						if (nameCompleteCount >= new Number(parentDocument.sampleSetupView.numberOfSamples.text)) {
							isComplete = true;
						} else {
							isComplete = false;
						}
					} else if (currentState == 'CherryPickState') {
						if (nameCompleteCount > 1) {
							isComplete = true;
						} else {
							isComplete = false;
						}
					} else {
						isComplete = true;
					}
				} else if (parentDocument.isEditState()) {
					isComplete = true;
				}
				
				// Make sure that sample concentration is valid
				for each (var s1:Object in parentDocument.samples) {
					var vr:ValidationResultEvent = parentDocument.concentrationValidator.validate(s1.@concentration);
					if (vr.type == ValidationResultEvent.INVALID) {
						parentDocument.userWarningsSamples += "Invalid sample concentration '" + s1.@concentration + "'.  "; 
						isComplete = false;
						break;
					}
				}
				
				// Make sure sample names are ok
				if (parentDocument.isSequencingState()) {
					var pattern:RegExp = /^[a-zA-Z0-9-_]*$/;
					for each (var sNameCheck:Object in parentDocument.samples) {
						if (!pattern.test(sNameCheck.@name)) {
							parentDocument.userWarningsSamples += "Name may only contain alphanumeric, dash and underscore. '" + sNameCheck.@name + "'.  ";
							isComplete = false;
							break;
						}
					}
				}
				
				// Sort the samples
				if (isComplete && parentDocument.isMicroarrayState()) {
					parentDocument.hybsView.sortLabeledSamples();
				}
				
				if (parentDocument.isMicroarrayState()) {
					if (parentApplication.submitInternalExperiment()) {
						parentDocument.hybSetupView.enabled = isComplete;					
					} else {
						parentDocument.hybsView.enabled = isComplete;
						if (isComplete) {
							parentDocument.hybsView.initializeHybsGrid();
						}
					}
				} else if (parentDocument.isCapSeqState()) {
					parentDocument.confirmView.enabled = isComplete;
				} else if (parentDocument.isFragAnalState()) {
					parentDocument.confirmView.enabled = isComplete;
				} else if (parentDocument.isMitSeqState()) {
					parentDocument.confirmView.enabled = isComplete;
				} else if (!parentDocument.isEditState()) {
					if (parentDocument.theTab.contains(parentDocument.visibilityView)) {
						parentDocument.visibilityView.enabled = isComplete;
					} else if (parentDocument.theTab.contains(parentDocument.confirmView)) {
						parentDocument.confirmView.enabled = isComplete;
					}
				}        	
				parentDocument.enableNextButtons();
				
				parentDocument.hybsView.checkHybsCompleteness();
				
				
				callLater(postSamplesCompleteness, [isComplete]);
				
				
			}
			
			private function showMaxLaneError(numberSeqLanes:String):void {
				Alert.show("Number of lanes to sequence " + numberSeqLanes + " exceeds max.");
			}
			
			
			private function postSamplesCompleteness(isComplete:Boolean):void {
				
				if (!isComplete) {
					if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
						parentDocument.hybSetupView.enabled = false;
					} 
					
					if (parentDocument.theTab.contains(parentDocument.hybsView)) {
						parentDocument.hybsView.enabled = false;
					} 
					if (parentDocument.theTab.contains(parentDocument.visibilityView)) {
						parentDocument.visibilityView.enabled = false;					
					}
					if (parentDocument.theTab.contains(parentDocument.confirmView)) {
						parentDocument.confirmView.enabled = false;					
					}
				} else {
					if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
						parentDocument.hybSetupView.checkHybSetupCompleteness();
						this.refreshHybsGrid();    				
					} 
				}
				
			}
			
			override public function propagateContainerType(containerType:String):void {
				samplesGrid.dataProvider = null;
				var idx:int = 0;
				parentDocument.samples.disableAutoUpdate();
				for each (var sample:Object in parentDocument.samples) {
					sample.@containerType = containerType;
					if (containerType == 'Plate') {
						sample.@plateName = this.getPlateName(idx);
						sample.@wellName = this.getWellName(idx);
					} else {
						sample.@plateName = '';
						sample.@wellName = '';
					}
					idx++;
				}
				parentDocument.samples.enableAutoUpdate();
			}
			
			override public function propagateNumberSequencingCycles(theSample:Object):void {
				if (parentApplication.submitInternalExperiment() && currentState != null && currentState.indexOf('SolexaSamples') >= 0) {
					for each(var lane:Object in parentDocument.getLanes(theSample, -1)) {
						lane.@idNumberSequencingCycles = theSample.@idNumberSequencingCycles;
					}
				}
			}		
			
			override public function initializeBarcoding():void {
				setSamplesGridDataProvider();
				
				// handle assay columns for fragment analysis
				manageFragAnalAssayColumns();
				
				// handle the download sample sheet events
				this.samplesGrid.validateNow();
				callLater(this.checkSamplesCompleteness);
				
			}
			
			override public function setShowCCNumber(show:Boolean):void {
				if (showCCNumberCheckbox != null) {
					this.showCCNumberCheckbox.selected = show;
				}
			}
			
			override public function getShowCCNumber():Boolean {
				if (showCCNumberCheckbox != null) {
					return this.showCCNumberCheckbox.selected;
				} else {
					return false;
				}
			}
			
			private function setSamplesGridDataProvider():void {
				this.samplesGrid.validateNow(); // Make sure columns on samples grid are created
				
				this.samplesGrid.dataProvider = parentDocument.samples;
				
				this.samplesGrid.sortableColumns = false;
				this.samplesGrid.dragMoveEnabled = false;
				this.samplesGrid.dropEnabled = false;
				this.samplesGrid.dragEnabled = false;
				
				this.plateNameCol.visible = hasPlates();
				
			}
			
			private function manageFragAnalAssayColumns():void {
				// set all assay columns to not visible.
				for each(var colRemove:AdvancedDataGridColumn in samplesGrid.columns) {
					if (colRemove.dataField != null && colRemove.dataField.substr(0, 9) == "@hasAssay") {
						colRemove.visible = false;
					}
				}
				
				// reset selected ones to visible -- creating them if necessary.
				if (parentDocument.isFragAnalState()) {
					for (var x:int = 0; x < parentDocument.assayCollection.length; x++) {
						var assayObject:Object = parentDocument.assayCollection.getItemAt(x);
						if (parentDocument.isAssaySelected(assayObject)) {
							var dataField:String = parentDocument.getAssayDataField(x);
							var exists:Boolean = false;
							var assayCol:AdvancedDataGridColumn = null;
							for each(var col:AdvancedDataGridColumn in samplesGrid.columns) {
								if (col.dataField != null && col.dataField == dataField) {
									assayCol = col;
									exists = true;
									break;
								}
							}
							if (exists) {
								assayCol.visible = true;
							} else {
								var newCol:AdvancedDataGridColumnWithType = new AdvancedDataGridColumnWithType();
								newCol.dataField = dataField;
								newCol.headerText = assayObject.@display;
								newCol.itemRenderer = views.renderers.CheckBoxRenderer.create(null, true);
								newCol.propertyType="CHECK";
								newCol.width = 60;
								newCol.resizable = false;
								newCol.rendererIsEditor = true;
								newCol.editorDataField = "selected";
								newCol.visible = true;
								newCol.editable = false;
								var newColumns:Array = new Array();
								var pushed:Boolean = false;
								for each (var col0:AdvancedDataGridColumn in samplesGrid.columns) {
									if (!pushed && col0.dataField != null && (col0.dataField == "@description" || (col0.dataField.substr(0, 9) == "@hasAssay" && col0.dataField > newCol.dataField))) {
										newColumns.push(newCol);
										pushed = true;
									}
									newColumns.push(col0);
								}
								samplesGrid.columns = newColumns;
								this.samplesGrid.validateNow();
							}
							
							// Set value in any samples where it doesn't exist
							for each (var sample:Object in parentDocument.samples) {
								
								if (!sample.hasOwnProperty(dataField)) {
									sample[dataField] = "Y";
								}
							}
							parentDocument.samples.refresh();
						}
					}
					
				}
			}
			
			private function plateSampleCompareFunction(a:XML, b:XML):int
			{
				if (a.hasOwnProperty("@plateName") && a.hasOwnProperty("@wellName") && b.hasOwnProperty("@plateName") && b.hasOwnProperty("@wellName")) {
					var compVal:int = 0;
					if (a.@plateName == b.@plateName) {
						compVal = compVal = ObjectUtil.numericCompare(a.@wellName.toString().substr(1), b.@wellName.toString().substr(1));
						if (compVal == 0) {
							compVal = ObjectUtil.stringCompare(a.@wellName.toString(), b.@wellName.toString());
						}
					} else {
						compVal = ObjectUtil.stringCompare(a.@plateName.toString(), b.@plateName.toString());
					}
					return compVal;
				} else {
					var aPersistFlag:Number = 0;
					var aPosition:Number = 0;
					if (a.@idSample.toString().indexOf("Sample") > -1) {
						aPosition = a.@idSample.toString().substr(6);
						aPersistFlag = 1;
					} else {
						aPosition = a.@idSample;
					}
					
					var bPersistFlag:Number = 0;
					var bPosition:Number = 0;
					if (b.@idSample.toString().indexOf("Sample") > -1) {
						bPosition = b.@idSample.toString().substr(6);
						bPersistFlag = 1; // non-persistent samples sort after the persistent ones
					} else {
						bPosition = b.@idSample;
					}
					
					if (aPersistFlag == bPersistFlag) {
						return ObjectUtil.numericCompare(aPosition, bPosition);				
					} else {
						return ObjectUtil.numericCompare(aPersistFlag, bPersistFlag);
					}
				}
			}
			
			private function setButtonsVisibility(vis:Boolean):void {
				buttonsContainer2.visible = vis;
				buttonsContainer2.includeInLayout = vis;
			}
			
			override public function showHideColumns():void {
				isExternal = (parentDocument.isEditState() && parentDocument.request.@isExternal == 'Y') || (!parentDocument.isEditState() && !parentApplication.isInternalExperimentSubmission);
				isEditState = parentDocument.isEditState();
				
				showCCNumberCheckbox.visible =  !isExternal;
				showCCNumberCheckbox.includeInLayout =  !isExternal;
				ccNumberVRule.visible = showCCNumberCheckbox.visible;
				ccNumberCheckBoxHelp.visible = !isExternal;
				ccNumberCheckBoxHelp.includeInLayout = !isExternal;
				
//				addSampleHelp.visible = addSampleHelp.includeInLayout = isExternal;
				
				setButtonsVisibility(true);
				samplesGrid.rowOperationsAllowed = true;
				
				// Don't allow sample editing on edit unless user is admin or experiment is external or experiment is non-submitted dna sq experiment.
				if (isEditState && !parentApplication.isAdminState && !isExternal && !parentDocument.isSequencingState()) {
					setButtonsVisibility(false);
					samplesGrid.rowOperationsAllowed = false;
				}
				
				samplesGrid.addRowEnabled = !this.hasPlates();
				samplesGrid.showRowNumberCol = !this.hasPlates();
				samplesGrid.hasPlates = this.hasPlates();
				samplesGrid.colorRowsByField = this.hasPlates() ? 'plateName' : null;
								
				// Edit columns shown
				existingNumberSequencingLanesCol.visible = false;
				additionalNumberSequencingLanesCol.visible = false;
				this.sampleTypeCol.visible = !parentDocument.isFragAnalState() && !parentDocument.isMitSeqState() 
					&& !parentDocument.isCherryPickState() && !parentDocument.isIScanState();
				
				seqPrepStatus.visible = false;
				
				wellNameCol.visible = (hasPlates() || parentDocument.isFragAnalState() || parentDocument.isMitSeqState()) ? true : false;
				
				this.sourceWellCol.visible = parentDocument.isCherryPickState() ? true : false;
				this.destinationWellCol.visible = parentDocument.isCherryPickState() ? true : false;
				this.sourcePlateCol.visible = parentDocument.isCherryPickState() ? true : false;
				
				this.qc_260_280Column.visible = false;
				this.sampleNameCol.visible = true;
				
				sampleNumberCol.visible = parentDocument.isEditState();
				
				this.concentrationCol.visible = !isExternal;
				this.otherOrganismCol.visible = false;
				this.sampleOrganismColumn.visible = !isExternal;
				this.otherSamplePrepMethodCol.visible = !isExternal;
				
				this.descriptionColumn.visible = (parentDocument.request.@hasSampleDescription == "Y");
				
				if (parentDocument.isSequencingState() ) {
					this.concentrationCol.visible = false;
					this.otherOrganismCol.visible = false;
					this.sampleOrganismColumn.visible = false;
					this.otherSamplePrepMethodCol.visible = false;
					this.numberSequencingLanesCol.visible = false;
					this.chipTypeColumn.visible = false; 
					this.labelColumn.visible = false;
					this.qual260_230Col.visible = false;
					this.qualCalcConcCol.visible = false;
					this.qualFragSizeFromCol.visible = false;
					this.qualFragSizeToCol.visible = false;
					this.qualRINCol.visible = false;
					this.qualStatusCol.visible = false;
					this.descriptionColumn.visible = false;
					
					if (currentState == 'CapSeqState') {
						this.descriptionColumn.visible = true;
						if (isEditState) { 
							this.sampleTypeCol.visible = true;
						} else {
							this.sampleTypeCol.visible = false;
						} 
						
					} 
					
				} else if (currentState != null && currentState.indexOf('QCSamples') >= 0) {
					numberSequencingLanesCol.visible = false;
					sampleOrganismColumn.visible = false;
					this.otherOrganismCol.visible = false;
					
					if (parentDocument.isEditState()) {
						chipTypeColumn.visible = parentDocument.request.@codeApplication == 'BIOAN' ? true : false;		
					} else {
						chipTypeColumn.visible = parentDocument.sampleSetupView.currentState == 'QCSetupBioanalyzerState' ? true : false;
					}
					labelColumn.visible = false;
					
				} else {
					numberSequencingLanesCol.visible = false;
					sampleOrganismColumn.editable = !isExternal;
					chipTypeColumn.visible = false; 
					labelColumn.visible = !parentDocument.isEditState();
				}
				
				if (!parentDocument.isEditState()) {
					if (parentDocument.theTab.contains(parentDocument.confirmView)) {
						parentDocument.confirmView.showHideColumns();									
					}
				}
				
				this.addOrganismButton.visible = this.sampleOrganismColumn.visible && !isExternal;
				this.addOrganismButton.includeInLayout = this.addOrganismButton.visible;
				addOrgVRule.visible = this.addOrganismButton.visible;
				this.samplesTabNewOrganismHelp.visible = this.addOrganismButton.visible;
				this.samplesTabNewOrganismHelp.includeInLayout = this.addOrganismButton.visible;
				
				// If this is a QC request, hide the annotation columns 
				if (currentState != null 
					&& (currentState.indexOf('QCSamples') >= 0 || currentState == 'CapSeqState'
						|| currentState == 'FragAnalState' || currentState == 'MitSeqState' || currentState == 'CherryPickState')) {
					// Make all annotation columns invisible
					for each(var col:AdvancedDataGridColumn in this.samplesGrid.columns) {
						if (col is views.util.AnnotationAdvancedDataGridColumn) {
							col.visible = false;
						}
					}
				}
			}
			
			private function refreshHybsGrid():void {
				parentDocument.hybsView.hybsGrid.invalidateList();
				parentDocument.hybsView.hybsGrid.invalidateDisplayList();
				if (!parentDocument.isEditState()) {
					parentDocument.confirmView.hybsGridConfirm.invalidateList();
					parentDocument.confirmView.hybsGridConfirm.invalidateDisplayList();
				}
			}
			
			private function toggleShowCCNumber():void {
				if (!this.showCCNumberCheckbox.selected) {
					for each(var s:XML in parentDocument.samples) {
						s.@ccNumber = '';
					}
				}
			}
			
			private function sortBarcodes(obj1:Object, obj2:Object, fields:Array=null):int {
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var scheme1:String = obj1.@oligoBarcodeSchemeDisplay;
					var scheme2:String = obj2.@oligoBarcodeSchemeDisplay;
					
					if (scheme1 < scheme2) {
						return -1;
					} else if (scheme1 > scheme2) {
						return 1; 
					} else {
						var order1:int = obj1.@sortOrder;
						var order2:int = obj2.@sortOrder;
						
						if (obj1.@value == '') {
							return -1;
						} else if (obj2.@value == '') {
							return 1;
						} else {
							if (order1 < order2) {
								return -1;
							} else if (order1 > order2) {
								return 1;
							} else {
								return 0;
							}
						}
						
					}
					
				}			
			}
			
			public function changeLabelCheckBoxStyles(cy3CheckBox:CheckBox, cy5CheckBox:CheckBox, label:String):void {
				cy3CheckBox.setStyle("fontWeight", label == "cy3"   ? "bold" : "normal");
				cy3CheckBox.setStyle("color", label == "cy3"  ? "green" : "grey");
				if (label == "cy3") {
					cy3CheckBox.setStyle("fillAlphas", [1.0, 0.7, 0.7, 0.7]);
				} else {
					cy3CheckBox.setStyle("fillAlphas", [.4, 0.2, 0.2, 0.2]);       			       			
				}
				cy5CheckBox.setStyle("fontWeight", label == "cy5" ? "bold" : "normal");               
				cy5CheckBox.setStyle("color", label == "cy5" ? "red" : "grey");
				if (label == "cy5") {
					cy5CheckBox.setStyle("fillAlphas", [1.0, 0.7, 0.7, 0.7]);
				} else {
					cy5CheckBox.setStyle("fillAlphas", [.4, 0.2, 0.2, 0.2]);       			       			
				}
				
			}
			
			public function textChange(item:String):void {
				var txt:String = item;
				if(txt.length == 30) {
					Alert.show("Maximum allowed limit is 30 characters");					
				}
			}
			
			override public function setCoreFacilityNoteVisibility(vis:Boolean):void {
				coreFacilityNoteVBox.visible = vis;
				coreFacilityNoteVBox.includeInLayout = vis;
				if (vis) {
					this.buttonAndNoteBox.height=88;
				} else {
					this.buttonAndNoteBox.height=20;
				}
			}
			
			override public function setTopBoxVisibility(vis:Boolean):void {
				topBox.visible = vis;
				topBox.includeInLayout = vis;
			}
			
			private function defaultToZero(item:Object, column:AdvancedDataGridColumn):String{
				if(item.@numberSequencingLanes == ''){
					item.@numberSequencingLanes = '0';
					return '0';
				} else{
					return item.@numberSequencingLanes;
				}
				
			}
		]]>
	</mx:Script>	
	<mx:Sort id="barcodeSort"  compareFunction="sortBarcodes"/>
	<mx:XMLListCollection id="barcodes" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OligoBarcode').DictionaryEntry}" sort="{barcodeSort}"/>
	<mx:XMLList id="barcodeList"/>
	
	<mx:VBox width="100%" height="100%" verticalGap="2" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
		<mx:HBox width="100%" id="topBox">
			<mx:VBox width="100%" height="88" verticalGap="0" paddingBottom="0" paddingTop="0" id="buttonAndNoteBox">
				<mx:VBox height="100%" width="100%" id="coreFacilityNoteVBox" verticalGap="0" paddingBottom="0" paddingTop="0">
					<util:ContextHelp context1="coreFacilityNoteHelp" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Core Facility Note Help"
									  label="Enter a note for the Core Facility (optional)." labelPlacement="left" id="coreFacilityNoteLabel"/>
					<util:TextAreaWorkaround id="coreFacilityNoteText" text="{parentDocument.request.@corePrepInstructions}" focusOut="parentDocument.request.@corePrepInstructions = coreFacilityNoteText.text" 
											 width ="100%" height="100%"/>
				</mx:VBox>
			</mx:VBox>
			<mx:VBox horizontalAlign="center" visible="{parentApplication.isInternalExperimentSubmission}" includeInLayout="{parentApplication.isInternalExperimentSubmission}" id="instructionVBox">
				<util:ContextHelp context1="samplesTabHelp" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" 
								  context3="{(parentDocument.requestType == 'MISEQ') ? 'HISEQ' : parentDocument.requestType}"
								  title="Samples Help" label="Click for Instructions" id="instructions" hideLabelIfNoHelp="true"/>
			</mx:VBox>
			
		</mx:HBox>
		<mx:Spacer width="8"/>
		<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle">
			<util:ContextHelp context1="addSampleHelp" context2="" context3="" 
							  showEdit="{parentApplication.isSuperAdmin}" 
							  title="Add Samples Help" label="How do I add a sample?" id="addSampleHelp" />
			<util:ContextHelp context1="samplesGridHelp" context2="" context3=""
							  showEdit="{parentApplication.isSuperAdmin}" 
							  title="Sample Grid Help" label="Copy and paste sample grid" id="copyPasteHelp" />
			<mx:HBox id="buttonsContainer2" horizontalGap="0">
				<mx:LinkButton horizontalGap="0" textDecoration="underline"  label="Upload sample sheet" click="uploadSampleSheet();" icon="@Embed(source='../../assets/upload.png')" id="uploadSampleSheetButton" toolTip="Upload sample sheet&#13;(tab delimited txt file)" />
				<mx:LinkButton  horizontalGap="0" textDecoration="underline" id="downloadButton" label="Download sample sheet" click="{downloadSampleSheet()}"   color="#0000FF" icon="@Embed(source='../../assets/download.png')"/>
				<mx:LinkButton  horizontalGap="0" textDecoration="underline" id="uploadHintLink" icon="@Embed(source='../../assets/information.png')" visible="{uploadSampleSheetButton.visible}" includeInLayout="{uploadSampleSheetButton.visible}"
								label="Sample sheet help" 
								click="PopUpManager.centerPopUp(PopUpManager.createPopUp(this, UploadSampleSheetInstructionsView, true));"
								toolTip=" 1.  Download the sample sheet or create your own table&#13;       in a program like Excel.&#13; 2.  Fill in the table for all the samples.&#13; 3.  Save the file as a tab-delimited txt file.&#13; 4.  Click 'Upload sample sheet' and select the file you created."/>
				<mx:Spacer width="1"/>
				<mx:VRule height="20" id="ccNumberVRule" />
			</mx:HBox>
			
			<mx:Spacer width="4"/>
			
			<mx:CheckBox id="showCCNumberCheckbox"
						 selected="false"
						 click="toggleShowCCNumber()"  
						 visible="{parentApplication.isInternalExperimentSubmission &amp;&amp; parentApplication.isBSTLinkageSupported &amp;&amp; currentState != 'CapSeqState'}"
						 includeInLayout="{parentApplication.isInternalExperimentSubmission &amp;&amp; parentApplication.isBSTLinkageSupported  &amp;&amp; currentState != 'CapSeqState'}" 
						 toolTip="Link samples to itBioPath using CC Number"
						 label="Enter CC Numbers" />
			<util:ContextHelp context1="ccNumberCheckBoxHelp" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="CC Number Help"
							  label="" labelPlacement="left" id="ccNumberCheckBoxHelp"/>
			<mx:Spacer width="4" />
			<mx:VRule height="20" id="addOrgVRule" />
			<mx:LinkButton  horizontalGap="0" label="Add Organism ..." textDecoration="underline"  click="addOrganism()" id="addOrganismButton"/>
			<util:ContextHelp context1="samplesTabNewOrganismHelp" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="New Organism Help"
							  label="" labelPlacement="left" id="samplesTabNewOrganismHelp"/>
		</mx:HBox>
		
		<grid:CopyPasteSampleGrid width="100%" height="100%" id="samplesGrid"  
								  editable="true"
								  itemFocusOut="checkSamplesCompleteness()"
								  addRowEnabled="{!this.hasPlates()}"
								  addRowFunction="{addSample}"
								  deleteRowFunction="deleteTheSample"
								  clearAllFunction="promptToClearAllSamples"
								  showRowNumberCol="{!this.hasPlates()}"
								  hasPlates="{this.hasPlates()}">
			<grid:columns>
				<mx:AdvancedDataGridColumn id="plateNameCol" headerText="Plate" dataField="@plateName" editable="false" visible="true" width="60" >
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off"  verticalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="samplePlateName" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Plate Help" 
												  showEdit="{parentApplication.isAdminState}" label="Plate" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				<mx:AdvancedDataGridColumn id="wellNameCol" visible="false" editable="false" headerText="Well"  width="50" resizable="false" dataField="@wellName">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off"  verticalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleWellName" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Well Help" 
												  showEdit="{parentApplication.isAdminState}" label="Well" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				<mx:AdvancedDataGridColumn id="sampleNumberCol" headerText="ID" width="80" visible="true"  dataField="@number"  editable="false">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off"  verticalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleNumber" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Sample ID Help" 
												  showEdit="{parentApplication.isAdminState}" label="ID" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				<mx:AdvancedDataGridColumn headerText="Sample Name" width="100" editorDataField="text" dataField="@name" rendererIsEditor="false"
										   id="sampleNameCol"
										   editable="true" showDataTips="true" dataTipField="Please enter maximum of 30 Characters"
										   itemRenderer="{hci.flex.controls.Label.create('@name')}" >
					<mx:itemEditor>
						<mx:Component id ="sampleNameTextField">
							<mx:TextInput  maxChars="30" change="outerDocument.textChange(this.text)">
							</mx:TextInput>
						</mx:Component>
					</mx:itemEditor> 
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off"  verticalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleName" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Sample Name Help" 
												  showEdit="{parentApplication.isAdminState}" label="Sample&#13;Name" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>  
				
				<mx:AdvancedDataGridColumn id="labelColumn" dataField="@label"  
										   width="100" headerText="Label" editable="false">
					<mx:itemRenderer>
						<mx:Component>
							<mx:HBox paddingLeft="4" horizontalGap="0" horizontalScrollPolicy="off">
								<mx:Script>
									<![CDATA[
										override public function set data(value:Object):void     {      
											super.data = value; 
											if (value == null) {
												cy3CheckBox.selected = false;      
												cy5CheckBox.selected = false;												   
											}else if (value["@label"] == "cy3")       {         
												cy3CheckBox.selected = true;      
												cy5CheckBox.selected = false;
											} else if (value["@label"] == "cy5")       {         
												cy3CheckBox.selected = false;      
												cy5CheckBox.selected = true;
											} else {
												cy3CheckBox.selected = false;      
												cy5CheckBox.selected = false;
											}       
											validateDisplayList();    
										}
									]]>
								</mx:Script>
								<mx:CheckBox id="cy3CheckBox"  label="cy3"  
											 change="onChange(event)"  selectedField="@isSelectedCy3"
											 fillColors="[0x23b12d, 0x23b12d, 0x23b12d, 0x23b12d]"
											 color="green" 
											 borderColor="green"
											 fillAlphas="[1.0, 0.15, 0.15, 0.15]">
									<mx:Script>
										<![CDATA[
											private function onChange(evt:Event):void {
												data.@label = cy3CheckBox.selected ? "cy3" : "";
												data.@isSelectedCy3 = true;
												data.@isSelectedCy5 = false;
												cy5CheckBox.selected = false;
												
												parentDocument.changeLabelCheckBoxStyles(cy3CheckBox, cy5CheckBox, data.@label);
												parentDocument.checkSamplesCompleteness();
											}
										]]>
									</mx:Script>
								</mx:CheckBox>
								<mx:CheckBox id="cy5CheckBox"  label="cy5"  change="onChangeCy5(event)"
											 fillColors="[0xda2020, 0xda2020, 0xda2020, 0xda2020]" 
											 color="0xFF0000" selectedField="@isSelectedCy5"
											 borderColor="0xFF0000" 
											 fillAlphas="[1.0, 0.15, 0.15, 0.15]}]"												
											 >
									<mx:Script>
										<![CDATA[
											private function onChangeCy5(evt:Event):void {
												data.@label = cy5CheckBox.selected ? "cy5" : "";
												data.@isSelectedCy5 = "true";
												data.@isSelectedCy3 = "false";
												parentDocument.changeLabelCheckBoxStyles(cy3CheckBox, cy5CheckBox, data.@label);
												
												cy3CheckBox.selected = false;
												parentDocument.checkSamplesCompleteness();
											}
										]]>
									</mx:Script>
								</mx:CheckBox>
							</mx:HBox>
						</mx:Component>
					</mx:itemRenderer>
					
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off"  verticalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleMicroarrayLabel" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Microarray Label Help" 
												  showEdit="{parentApplication.isAdminState}" label="Label" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
					
				</mx:AdvancedDataGridColumn>
				
				<mx:AdvancedDataGridColumn headerText="Conc. (ng/ul)" id="concentrationCol" visible="{parentApplication.isInternalExperimentSubmission}"  width="72" dataField="@concentration" rendererIsEditor="false"
										   itemRenderer="{hci.flex.controls.Label.create('@concentration')}"                 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSampleConcentration(), '')}" editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off"  verticalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleConcentration" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Concentration Help" 
												  showEdit="{parentApplication.isAdminState}" label="Conc.   &#13;(ng/ul)" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				<mx:AdvancedDataGridColumn id="qc_260_280Column"
										   editable="{parentApplication.hasPermission('canWriteAnyObject')}" 
										   headerText="QC 260/280" width="80" 
										   dataField="@qual260nmTo280nmRatio" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off"  verticalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleQc260280" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="QC 260/280 Help" 
												  showEdit="{parentApplication.isAdminState}" label="QC 260/280" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				<mx:AdvancedDataGridColumn id="ccNumber" headerText="CC Number" dataField="@ccNumber" editable="true" 
										   visible="{showCCNumberCheckbox.visible &amp;&amp; showCCNumberCheckbox.selected &amp;&amp; !parentDocument.isSequencingState() ? true : false}"
										   width="76"
										   itemRenderer="{hci.flex.controls.Label.createCustom('@ccNumber', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
										   itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.TextInput.create('@ccNumber').newInstance(), '')}" editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalGap="0" horizontalScrollPolicy="off"  verticalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleCCNumber" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="CC Number Help" 
												  showEdit="{parentApplication.isAdminState}" label="CC           &#13;Number" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				
				<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sourcePlateCol" visible="false" editable="true" headerText="Source Plate" width="150" resizable="false"
													 dataField="@sourcePlate" rendererIsEditor="false" editorDataField="value" sortable="false"
													 itemRenderer="{views.renderers.DropdownLabel.create(parentDocument.cherryPlateList, '@name', '@name', '@sourcePlate')}"                
													 itemEditor="{hci.flex.controls.ComboBox.getFactory(parentDocument.cherryPlateList, '@name', '@name', '@sourcePlate', true)}"/>
				<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sourceWellCol" visible="false" editable="true" headerText="Source Well" width="75" resizable="false"
													 dataField="@sourceWell" rendererIsEditor="false" editorDataField="value" sortable="false"
													 itemRenderer="{views.renderers.DropdownLabel.create(parentDocument.wellList, '@name', '@name', '@sourceWell')}"                
													 itemEditor="{hci.flex.controls.ComboBox.getFactory(parentDocument.wellList, '@name', '@name', '@sourceWell', true)}"/>
				<mx:AdvancedDataGridColumn id="destinationWellCol" visible="false" editable="false" headerText="Dest. Well" width="75" resizable="false"
										   dataField="@destinationWell" sortable="false"/>
				
				<mx:AdvancedDataGridColumn id="descriptionColumn" headerText="Sample Description" visible="false" width="140" dataField="@description" wordWrap="true"  itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" editorDataField="value"/>
				
				
				<mx:AdvancedDataGridColumn id="existingNumberSequencingLanesCol" 
										   headerText="# Lanes to Sequence" width="72" 
										   dataField="@sequenceLaneCount" 
										   editable="false">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								<mx:Label text="Existing #"/> 
								<mx:Label text="Seq Lanes"/> 
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn> 
				
				
				<mx:AdvancedDataGridColumn id="numberSequencingLanesCol" headerText="# Lanes to Sequence" width="72" dataField="@numberSequencingLanes" 
										   editable="false"
										   rendererIsEditor="false"
										   itemRenderer="{hci.flex.controls.Label.create('@numberSequencingLanes')}"         
										   itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSampleNumberSeqLanes(), '')}" editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								<mx:Label text="# Seq"/> 
								<mx:Label text="Lanes"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>  
				
				
				<mx:AdvancedDataGridColumn id="additionalNumberSequencingLanesCol" 
										   headerText="# Lanes to Sequence" width="72" 
										   dataField="@numberSequencingLanes" 
										   editable="true" labelFunction="defaultToZero"
										   rendererIsEditor="false"
										   itemRenderer="{hci.flex.controls.Label.create('@numberSequencingLanes')}"         
										   itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSampleNumberSeqLanes(), '')}" editorDataField="value" >
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								<mx:Label text="Addtl #"/> 
								<mx:Label text="Seq Lanes"/> 
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn> 
				
				<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sampleTypeCol"  headerText="Sample Type" visible="true" width="180"   dataField="@idSampleType" 
													 editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
													 itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType', false, true)}"                 
													 itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(this.filteredSampleTypeList.source, '@display', '@value', '@idSampleType', true).newInstance(), '')}">
					<util:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleType" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Sample type Help" showEdit="{parentApplication.isAdminState}"
												  label="Sample Type" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</util:headerRenderer>
				</util:AdvancedDataGridColumnWithType>
				<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sampleOrganismColumn" visible="true" width="170" headerText="Organism"  dataField="@idOrganism" 
													 editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"   
													 itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OrganismLite').DictionaryEntry, '@display', '@value', '@idOrganism')}"                
													 itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OrganismLite').DictionaryEntry, '@display', '@value', '@idOrganism', true).newInstance(), '')}">
					<util:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleOrganism" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Organism Help" showEdit="{parentApplication.isAdminState}"
												  label="Organism" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</util:headerRenderer>
				</util:AdvancedDataGridColumnWithType>
				<mx:AdvancedDataGridColumn id="otherOrganismCol" headerText="Organism (other)" 
										   width="140" dataField="@otherOrganism"
										   visible="false"
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value"/> 
				<mx:AdvancedDataGridColumn id="otherSamplePrepMethodCol" headerText="Nucl. acid extraction meth." 
										   width="140" dataField="@otherSamplePrepMethod" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleNuclAcidExtraction" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Nucl. Acid Extraction Help" showEdit="{parentApplication.isAdminState}"
												  label="Nucl. acid                     &#13;extraction meth." noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn> 
				
				
				<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="chipTypeColumn" visible="{parentDocument.request.@codeRequestCategory != 'QC' &amp;&amp; !isExternal ? false : true}" headerText="Chip Type" width="150" dataField="@codeBioanalyzerChipType" 
													 editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
													 itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@codeBioanalyzerChipType')}"                
													 itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@codeBioanalyzerChipType', true).newInstance(), '')}">
					<util:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleChipType" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Chip Type Help" showEdit="{parentApplication.isAdminState}"
												  label="Chip Type" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</util:headerRenderer>
				</util:AdvancedDataGridColumnWithType>
				<mx:AdvancedDataGridColumn visible="{!isExternal &amp;&amp; isEditState}" 
										   editable="{parentApplication.hasPermission('canWriteAnyObject')}" 
										   headerText="QC Conc. ng/uL" 
										   width="80" 
										   dataField="@qualCalcConcentration" 
										   id="qualCalcConcCol" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleQCConc" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="QC Conc. Help" showEdit="{parentApplication.isAdminState}"
												  label="QC Conc.&#13;(ng/uL)" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				<mx:AdvancedDataGridColumn visible="{!isExternal &amp;&amp; isEditState}" 
										   editable="{parentApplication.hasPermission('canWriteAnyObject')}" 
										   headerText="QC 260/230" 
										   width="80" 
										   dataField="@qual260nmTo230nmRatio" 
										   id="qual260_230Col" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleQual260nmTo230nmRation" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="QC 260/230 Help" showEdit="{parentApplication.isAdminState}"
												  label="QC 260/230" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				<mx:AdvancedDataGridColumn visible="{!isExternal &amp;&amp; isEditState}" 
										   editable="{parentApplication.hasPermission('canWriteAnyObject')}" 
										   headerText="QC RIN" 
										   width="70" 
										   dataField="@qualRINNumber" 
										   id="qualRINCol" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleQualRINCol" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="QC RIN Help" showEdit="{parentApplication.isAdminState}"
												  label="QC RIN" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				<mx:AdvancedDataGridColumn visible="{!isExternal &amp;&amp; isEditState}" 
										   editable="{parentApplication.hasPermission('canWriteAnyObject')}" 
										   headerText="QC Frag size (from)" 
										   width="87" 
										   dataField="@qualFragmentSizeFrom" 
										   id="qualFragSizeFromCol" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleQualFragmentSize" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="QC Frag Size Help" showEdit="{parentApplication.isAdminState}"
												  label="QC Frag size&#13;(from)" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				<mx:AdvancedDataGridColumn visible="{!isExternal &amp;&amp; isEditState}" 
										   editable="{parentApplication.hasPermission('canWriteAnyObject')}" 
										   headerText="QC Frag size (to)" 
										   width="87" 
										   dataField="@qualFragmentSizeTo" 
										   id="qualFragSizeToCol" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleQualFragmentSize" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="QC Frag Size Help" showEdit="{parentApplication.isAdminState}"
												  label="QC Frag size&#13;(to)" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				<mx:AdvancedDataGridColumn visible="{!isExternal &amp;&amp; isEditState}" headerText="QC Status" width="90" dataField="@qualStatus" id="qualStatusCol"
										   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"  itemRenderer="mx.controls.Label" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(ComboBoxWorkflowStatus.create('@qualStatus').newInstance(), '')}">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleQualStatus" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="QC Status Help" showEdit="{parentApplication.isAdminState}"
												  label="QC Status" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				
				<mx:AdvancedDataGridColumn  id="seqPrepStatus" visible="true" headerText="Seq Prep Status" width="90" dataField="@seqPrepStatus"
											sortable="false" editable="true" rendererIsEditor="false"  itemRenderer="mx.controls.Label" 
											itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSampleNumberSeqLanes(), '')}" editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleSeqPrepStatus" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Seq PrepStatus Help" showEdit="{parentApplication.isAdminState}"
												  label="Seq Prep Status" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
			</grid:columns>
		</grid:CopyPasteSampleGrid>
		
		
		
	</mx:VBox>
	
	<exp:states>
		<mx:State name="SamplesEditState" >
			<mx:RemoveChild target="{instructionVBox}"/>
		</mx:State>
		
		<mx:State name="SamplesAdminState">
			<mx:RemoveChild target="{instructionVBox}"/>
		</mx:State>
		
		
		<mx:State name="SolexaSamplesState" >
		</mx:State>
		<mx:State name="SolexaSamplesEditState" basedOn="SamplesEditState" >
		</mx:State>
		<mx:State name="SolexaSamplesAdminState" basedOn="SamplesAdminState" >
		</mx:State>
		
		<mx:State name="QCSamplesState" >
		</mx:State>
		<mx:State name="QCSamplesEditState" basedOn="SamplesEditState" >
		</mx:State>
		<mx:State name="QCSamplesAdminState" basedOn="SamplesAdminState" >
		</mx:State>
		
		<mx:State name="MicroarraySamplesState" >
			<mx:SetProperty target="{labelColumn}" name="visible" value="true" />
		</mx:State>
		<mx:State name="MicroarraySamplesEditState" basedOn="SamplesEditState" >
		</mx:State>
		<mx:State name="MicroarraySamplesAdminState" basedOn="SamplesAdminState" >
		</mx:State>
		<mx:State name="MicroarrayOneColorSamplesState" basedOn="MicroarraySamplesState">
			<mx:SetProperty target="{labelColumn}" name="visible" value="false" />
		</mx:State>
		<mx:State name="CapSeqState">
			<mx:RemoveChild target="{showCCNumberCheckbox}"/>
			<mx:RemoveChild target="{ccNumberCheckBoxHelp}"/>
			<mx:RemoveChild target="{ccNumberVRule}"/>
		</mx:State>
		<mx:State name="FragAnalState">
			<mx:RemoveChild target="{showCCNumberCheckbox}"/>
			<mx:RemoveChild target="{ccNumberCheckBoxHelp}"/>
			<mx:RemoveChild target="{ccNumberVRule}"/>
		</mx:State>
		<mx:State name="MitSeqState">
			<mx:RemoveChild target="{showCCNumberCheckbox}"/>
			<mx:RemoveChild target="{ccNumberCheckBoxHelp}"/>
			<mx:RemoveChild target="{ccNumberVRule}"/>
		</mx:State>
		<mx:State name="CherryPickState">
			<mx:RemoveChild target="{showCCNumberCheckbox}"/>
			<mx:RemoveChild target="{ccNumberCheckBoxHelp}"/>
			<mx:RemoveChild target="{ccNumberVRule}"/>
		</mx:State>
		<mx:State name="IScanState">
			<mx:RemoveChild target="{showCCNumberCheckbox}"/>
			<mx:RemoveChild target="{ccNumberCheckBoxHelp}"/>
			<mx:RemoveChild target="{ccNumberVRule}"/>
		</mx:State>
		
	</exp:states>
	
</exp:TabSamplesBase>
