<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
    xmlns:views="*.views"
    xmlns:fx="*.views.renderers" show="{this.initializeBarcoding()}"
	label="Sample View" width="100%" height="100%"  enabled="false">
<mx:Script>
	<![CDATA[
		import mx.collections.GroupingField;
		import mx.collections.Grouping;
		import mx.collections.GroupingCollection;
		import views.renderers.TextInputSeqPrepByCore;
		import hci.flex.controls.DropdownLabel;
		import views.renderers.ComboBox;
		import views.renderers.ComboBoxWorkflowStatus;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import hci.flex.controls.Label; 
		import views.util.AnnotationDataGridColumn;
		import mx.validators.NumberValidator;
		import mx.validators.ValidationResult;
		import mx.events.ValidationResultEvent;		
		import mx.collections.XMLListCollection;
		import mx.events.DragEvent;
		import mx.managers.DragManager;
		
		public var sampleGroupingCollection:GroupingCollection = null;

		
		public function addSample():void {
			var emptyNode:XML = null;
			if (parentDocument.isSolexaState()) {
				if (parentDocument.sampleSetupView.currentState == 'SolexaSetupPreppedState' || 
				    parentDocument.sampleSetupView.currentState == 'SolexaAmendPreppedState') {
					emptyNode = new XML("<Sample " +
				    " idSample='" + "Sample" + parentDocument.samples.length + "'" +
				    " name='' description='' " +
				    " canChangeSampleName='Y'" +
				    " canChangeSampleType='Y'" +
				    " canChangeSampleConcentration='Y'" +
				    " canChangeSampleSource='Y'" +
				    " canChangeSamplePrepMethod='Y'" +
   					" canChangeNumberSequencingLanes='Y'" +  
   					" canChangeNumberSequencingCycles='Y'" +
					" concentration=''" + 
					" idNumberSequencingCycles='" + parentDocument.seqSetup1View.numberSequencingCyclesRadioGroup.selectedValue + "'" +				
					" idSeqRunType='" + parentDocument.seqSetup1View.seqRunTypeRadioGroup.selectedValue + "'" +				
					" numberSequencingLanes='1'" +
					" codeConcentrationUnit='ng/ul'" + 
					" idSampleType='" + parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value + "'" +
					" seqPrepByCore = 'N'" +
					" idOligoBarcode = ''" +
					" barcodeSequence = ''" +
					" idSamplePrepMethod='" + parentDocument.sampleSetupView.samplePrepMethodCombo.selectedItem.@value + "'" +				
					" otherSamplePrepMethod='" + parentDocument.sampleSetupView.otherSamplePrepMethod.text + "'" +				
					" idSeqLibProtocol='" + parentDocument.sampleSetupView.seqLibProtocolCombo.selectedItem.@value + "'" +				
					" idGenomeBuildAlignTo='" + parentDocument.seqSetup1View.genomeBuildCombo.selectedItem.@value + "'" +				
					" analysisInstructions='" + parentDocument.seqSetup1View.analysisInstructions.text + "'" +				
					" prepInstructions='" + parentDocument.seqSetup1View.prepInstructions.text + "'" +				
					" idOrganism='"  + parentDocument.sampleSetupView.sampleOrganismCombo.selectedItem.@value + "'" +				
					" treatment='"  + parentDocument.annotationView.treatmentTextInput.text + "'" +				
					"/>");
					
				} else {
					emptyNode = new XML("<Sample " +
				    " idSample='" + "Sample" + parentDocument.samples.length + "'" +
				    " name='' description='' " +
				    " canChangeSampleName='Y'" +
  				    " canChangeSampleType='Y'" +
				    " canChangeSampleConcentration='Y'" +
				    " canChangeSampleSource='Y'" +
				    " canChangeSamplePrepMethod='Y'" +
   					" canChangeNumberSequencingCycles='Y'" + 
					" canChangeNumberSequencingLanes='Y'" + 
					" concentration=''" +
					" idOligoBarcode = ''" +
					" barcodeSequence = ''" +
					" idNumberSequencingCycles='" + parentDocument.seqSetup1View.numberSequencingCyclesRadioGroup.selectedValue + "'" +
					" idSeqRunType='" +	parentDocument.seqSetup1View.seqRunTypeRadioGroup.selectedValue + "'" +				
					" numberSequencingLanes='1'" +
					" codeConcentrationUnit='ng/ul'" + 
					" idSampleType='" + parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value + "'" +
					" idGenomeBuildAlignTo='" + parentDocument.seqSetup1View.genomeBuildCombo.selectedItem.@value + "'" +				
					" analysisInstructions='" + parentDocument.seqSetup1View.analysisInstructions.text + "'" +				
					" idSamplePrepMethod='" + parentDocument.sampleSetupView.samplePrepMethodCombo.selectedItem.@value + "'" +				
					" otherSamplePrepMethod='" + parentDocument.sampleSetupView.otherSamplePrepMethod.text + "'" +				
					" idSeqLibProtocol = ''" +
					" seqPrepByCore = 'Y'" +
					" idOrganism='"  + parentDocument.sampleSetupView.sampleOrganismCombo.selectedItem.@value + "'" +				
					" treatment='"  + parentDocument.annotationView.treatmentTextInput.text + "'" +				
					"/>");
					
				}
				
				
			}
			else if (currentState != null && (currentState.indexOf('QCSamples') >= 0)) {
				emptyNode = new XML("<Sample " +
			    " idSample='" + "Sample" + parentDocument.samples.length + "'" +
			    " name='' description='' " +
			    " canChangeSampleName='Y'" +
			    " canChangeSampleType='Y'" +
			    " canChangeSampleConcentration='Y'" +
			    " canChangeSampleSource='Y'" +
			    " canChangeSamplePrepMethod='Y'" +
  				" canChangeNumberSequencingCycles='Y'" +
				" canChangeNumberSequencingLanes='Y'" + 
				" concentration=''" +
			    " idOligoBarcode = ''" +
			    " barcodeSequence = ''" +
				" codeConcentrationUnit='ng/ul'" + 
				" codeBioanalyzerChipType='" + parentDocument.sampleSetupView.getSelectedCodeBioanalyzerChipType() + "'" +
				" idSampleType='" + parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value + "'" +
				" idSamplePrepMethod='" + parentDocument.sampleSetupView.samplePrepMethodCombo.selectedItem.@value + "'" +				
				" otherSamplePrepMethod='" + parentDocument.sampleSetupView.otherSamplePrepMethod.text + "'" +				
				" treatment='" + parentDocument.annotationView.treatmentTextInput.text + "'" +				
				"/>");
			
			} else {
				emptyNode = new XML("<Sample " +
			    " idSample='" + "Sample" + parentDocument.samples.length + "'" +
			    " name='' description='' " +
			    " cy3='false'" +
			    " cy5='false'" +			    
			    " canChangeSampleName='Y'" +
			    " canChangeSampleType='Y'" +
			    " canChangeSampleConcentration='Y'" +
			    " canChangeSampleSource='Y'" +
			    " canChangeSamplePrepMethod='Y'" +
  				" canChangeNumberSequencingCycles='Y'" +
				" canChangeNumberSequencingLanes='Y'" + 
				" concentration=''" + 
	   		    " idOligoBarcode = ''" +				
	   		    " barcodeSequence = ''" +				
				" codeConcentrationUnit='ng/ul'" + 
				" idSampleType='" + parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value + "'" +
				" idSamplePrepMethod='" + parentDocument.sampleSetupView.samplePrepMethodCombo.selectedItem.@value + "'" +				
				" otherSamplePrepMethod='" + parentDocument.sampleSetupView.otherSamplePrepMethod.text + "'" +				
				" idOrganism='"  + parentDocument.sampleSetupView.sampleOrganismCombo.selectedItem.@value + "'" +				
				" treatment='"  + parentDocument.annotationView.treatmentTextInput.text + "'" +				
				"/>");
			}
			
			parentDocument.samples.addItem(emptyNode);
			 

		}
		
 
        
		
		private function deleteSample():void {
			parentDocument.dirty.setDirty();
			if (samplesGrid.selectedItems.length > 0) {
				for each(var sample:Object in samplesGrid.selectedItems) {
					var isValid:Boolean = true;
					// Only administrators can delete samples
					if (!parentApplication.hasPermission("canWriteAnyObject")) {
						if (sample.@idSample.indexOf("Sample") < 0) {
							Alert.show("Existing sample " + sample.@number + " cannot be deleted from the experiment.");
							isValid = false;
							continue;
						}
					}		
					
					if (isValid) {
					
						for each(var hyb:Object in parentDocument.hybs) {
							if (hyb.@idSampleChannel1 == sample.@idSample) {
								if (sample.@idSample.indexOf("Sample") >= 0) {
									hyb.@idSampleChannel1 = '0';								
								} else {
									Alert.show("Please remove hyb(s) for sample " + sample.@name + " before attempting to delete sample.");
									isValid = false;
									break;
								}
							}
							if (hyb.@idSampleChannel2 == sample.@idSample) {
								if (sample.@idSample.indexOf("Sample") >= 0) {
									hyb.@idSampleChannel2 = '0';
								} else {
									Alert.show("Please remove hyb(s) for sample " + sample.@name + " before attempting to delete sample.");
									isValid = false;
									break;
								}
							}
						}
						for each(var lane:Object in parentDocument.getLanes(sample, -1)) {
							if (sample.@idSample.indexOf("Sample") >= 0) {
								parentDocument.lanes.removeItemAt(parentDocument.lanes.getItemIndex(lane));
							} else {
								Alert.show("Please remove sequence lanes for sample " + sample.@name + " before attempting to delete sample.");
								isValid = false;
								break;
							}
						}
						}
					
					if (isValid) {
						parentDocument.samples.removeItemAt(parentDocument.samples.getItemIndex(sample));
					} else {
						break;
					}
					
				}
			}
			if (parentDocument.isMicroarrayState()) {
				parentDocument.hybsView.hybsGrid.invalidateList();
				parentDocument.hybsView.hybsGrid.invalidateDisplayList();
			}

            this.initializeBarcoding();


		}
		
		private function copySample():void {
			parentDocument.dirty.setDirty();
			if (samplesGrid.selectedIndex != -1) {
				for each(var sampleToCopy:Object in samplesGrid.selectedItems) {	
					
					var emptyNode:XML = new XML("<Sample " +
					" idSample='" + "Sample" + parentDocument.samples.length + "'" +
					" name='" + sampleToCopy.@name + "'" + 
					" canChangeSampleName='Y'" +
			    	" canChangeSampleType='Y'" +
			   	 	" canChangeSampleConcentration='Y'" +
			    	" canChangeSampleSource='Y'" +
			    	" canChangeSamplePrepMethod='Y'" +
					" canChangeNumberSequencingLanes='Y'" + 
					" description='" + sampleToCopy.@description + "'" + 
					" idSampleType='" + sampleToCopy.@idSampleType + "'" +
					" idSamplePrepMethod='" + sampleToCopy.@idSamplePrepMethod + "'" +				
					" otherSamplePrepMethod='" + sampleToCopy.@otherSamplePrepMethod + "'" +				
					" idSeqLibProtocol='" + sampleToCopy.@idSeqLibProtocol + "'" +				
					" idOrganism='" + sampleToCopy.@idOrganism + "'" +				
					" concentration='" + sampleToCopy.@concentration + "'" +				
					" treatment='" + sampleToCopy.@treatment + "'" +		
					" idOligoBarcode='" + sampleToCopy.@idOligoBarcode + "'" +		
					" barcodeSequence='" + sampleToCopy.@barcodeSequence + "'" +		
					" seqPrepByCore='" + sampleToCopy.@seqPrepByCore + "'" +		
					" prepInstructions='" + sampleToCopy.@prepInstructions + "'" +		
					" codeConcentrationUnit='" + sampleToCopy.@codeConcentrationUnit + "'" +				
					" codeBioanalyzerChipType='" + sampleToCopy.@codeBioanalyzerChipType + "'" +				
					" idGenomeBuildAlignTo='" + sampleToCopy.@idGenomeBuildAlignTo+ "'" +				
					" idNumberSequencingCycles='" + sampleToCopy.@idNumberSequencingCycles+ "'" +				
					" idSeqRunType='" + sampleToCopy.@idSeqRunType + "'" +				
					" numberSequencingLanes='" + sampleToCopy.@numberSequencingLanes + "'" +
					" ccNumber='" + sampleToCopy.@ccNumber + "'" +
					" AGE='" + sampleToCopy.@AGE + "'" +				
					" CELLLINE='" + sampleToCopy.@CELLLINE + "'" +				
					" CELLTYPE='" + sampleToCopy.@CELLTYPE + "'" +				
					" CLININFO='" + sampleToCopy.@CLININFO + "'" +				
					" COMPOUND='" + sampleToCopy.@COMPOUND + "'" +				
					" DISSTATE='" + sampleToCopy.@DISSTATE + "'" +				
					" DOSE='" + sampleToCopy.@DOSE + "'" +				
					" GENMOD='" + sampleToCopy.@GENMOD + "'" +				
					" GENOTYPE='" + sampleToCopy.@GENOTYPE + "'" +				
					" INDIV='" + sampleToCopy.@INDIV + "'" +				
					" GROWTHCOND='" + sampleToCopy.@GROWTHCOND + "'" +				
					" ORGPART='" + sampleToCopy.@ORGPART + "'" +				
					" OTHER='" + sampleToCopy.@OTHER + "'" +				
					" SEX='" + sampleToCopy.@SEX + "'" +				
					" TEMP='" + sampleToCopy.@TEMP + "'" +				
					" TIME='" + sampleToCopy.@TIME + "'" +				
					"/>");
			
					parentDocument.samples.addItem(emptyNode);
					
				}
			}


		}
       	public function initializeSamplesGrid():void {
        	if (parentDocument.requestToClone != null) {
        		return;
        	}
       		if (!parentDocument.sampleSetupView.checkSampleSetupCompleteness()) {
       			return;
       		}
        	
    		var numberOfSamplesToAdd:Number = new Number(parentDocument.sampleSetupView.numberOfSamples.text);
    		if(parentDocument.samples.length <= numberOfSamplesToAdd) {
    			numberOfSamplesToAdd = numberOfSamplesToAdd - parentDocument.samples.length;
    		} else {
    			numberOfSamplesToAdd = 0;
    		}
    		for(var x:int = 0; x < numberOfSamplesToAdd; x++) {
    			addSample();
    		}
        }
        
        
        
		
		
		public function promptToClearAllSamples():void {
			Alert.show("Remove all samples currently showing in list?",
						null, 
						(Alert.YES | Alert.NO), this, 
						onPromptToClearAllSamples);
			
		}
		
		private function onPromptToClearAllSamples(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	parentDocument.samples.removeAll();
            	parentDocument.lanes.removeAll();
            	checkSamplesCompleteness();
            	this.initializeBarcoding();
            }
        }		
        
        public function checkSamplesCompleteness():void {
          	parentDocument.userWarningsSamples = "";
          	
          	
          	var numberOfAdditionalLanes:int = 0;
          	if (parentDocument.currentState == 'SolexaLaneAmendState' || parentDocument.sampleSetupView.currentState == "SolexaAmendState") {
	          	for each(var s2:Object in parentDocument.samples) {
	          		if (isEntered(s2, "@numberSequencingLanes")) {
	          			numberOfAdditionalLanes += s2.@numberSequencingLanes;
	          		}
	          	}
	        }
        	var completeCount:int = 0;
        	for each(var sample:Object in parentDocument.samples) {
        		if (currentState != null && currentState.indexOf('SolexaSamples') >= 0) {
        			
        			if (parentDocument.currentState == 'SolexaLaneAmendState') {
	        			if (isEntered(sample, "@name") &&
			        		isEntered(sample, "@concentration") &&
			        		isEntered(sample, "@idSampleType") &&
	        			    isEntered(sample, "@idOrganism") &&
			        		//isEntered(sample, "@idSamplePrepMethod") &&	don't require b/c old requests won't have this filled in        		
	        			    isEntered(sample, "@idSeqRunType") &&
	        			    isEntered(sample, "@idNumberSequencingCycles") &&
							numberOfAdditionalLanes > 0) {
			        		
		        			completeCount++;
		        		}
		        	} else if (!parentDocument.isEditState() &&
		        		 parentDocument.sampleSetupView.currentState == "SolexaSetupState" || 
		        		 parentDocument.sampleSetupView.currentState == "SolexaAmendState") {
	        			if (isEntered(sample, "@name") &&
			        		isEntered(sample, "@concentration") &&
			        		isEntered(sample, "@idSampleType") &&
	        			    isEntered(sample, "@idOrganism") &&
			        		isEntered(sample, "@idSamplePrepMethod") &&	        		
	        			    isEntered(sample, "@idSeqRunType") &&
	        			    isEntered(sample, "@idNumberSequencingCycles") &&
	        			    (isEntered(sample, "@numberSequencingLanes") || numberOfAdditionalLanes > 0)) {
	        			    	
	        			   
			        		completeCount++;
	        			   
			        		
		        		}
		        		
		        			   	
		        	} else {
	        			if (isEntered(sample, "@name") &&
			        		isEntered(sample, "@idSampleType") &&	        		
			        		isEntered(sample, "@idSamplePrepMethod") &&	        		
			        		isEntered(sample, "@idSeqLibProtocol") &&	        		
			        		isEntered(sample, "@concentration") &&
			        		isEntered(sample, "@idOrganism") &&
			        		isEntered(sample, "@idSeqRunType") &&
			        		isEntered(sample, "@idNumberSequencingCycles")) {
			        			
			        			
			        		if (!parentDocument.isEditState()) {
		        				if (sample.@numberSequencingLanes != '') {
		        					 if (parentDocument.showSampleCustomBarcodes()) {
	        			    			if (isEntered( sample, "@barcodeSequence")) {
											completeCount++;      			    		
	        			    			}
	        			    		 } else {
		        						completeCount++;
	        			    		 }
		        				}		
		        			} else {
		        				completeCount++;
		        			}
		        			
		       			
		        		 }
		        		 
		        	}
			   	
		        } else if (currentState != null && currentState.indexOf('QCSamples') >= 0){
	        		if (isEntered(sample, "@name") &&
			        	isEntered(sample, "@idSampleType") &&		        		
			        	isEntered(sample, "@idSamplePrepMethod") &&		        		
			        	isEntered(sample, "@concentration") &&
	        			isEntered(sample, "@codeConcentrationUnit") ) {
	        				
	        			if (!parentDocument.isEditState() &&
	        			    parentDocument.sampleSetupView.currentState == 'QCSetupBioanalyzerState') {
	        				if (isEntered(sample, "@codeBioanalyzerChipType")) {
								completeCount++;       				
	        				} 
	        			} else {
	        				completeCount++;
	        			}
	        		}
	        		 
        		} else {
	        		if (isEntered(sample, "@name") &&
			        	isEntered(sample, "@idSampleType") &&		        		
			        	isEntered(sample, "@idSamplePrepMethod") &&		        		
			        	isEntered(sample, "@concentration") &&
			        	isEntered(sample, "@idOrganism")) {
			        	
			        	if (parentDocument.getRequestCategory().@numberOfChannels == "2") {
			        		if (isEntered(sample, "@label")) {
			        			completeCount++;
			        		}
			        	} else {
		        			completeCount++;       						        		
			        	}	
	        		}
	        		
        			
        		}
        	}
        	
        	
        	var isComplete:Boolean = false;
        	if (parentDocument.samples.length > 0 && completeCount == parentDocument.samples.length) {
        		isComplete = true;
        	} else if (parentDocument.isEditState()) {
        		isComplete = true;
        	}
        	
        	// Make sure that sample concentration is valid
    		for each (var s1:Object in parentDocument.samples) {
    			var vr:ValidationResultEvent = parentDocument.concentrationValidator.validate(s1.@concentration);
	    		if (vr.type == ValidationResultEvent.INVALID) {
	    			parentDocument.userWarningsSamples += "Invalid sample concentration '" + s1.@concentration + "'.  "; 
	    			isComplete = false;
	    		}
    		}
    		
    		// Sort the samples
    		if (isComplete && parentDocument.isMicroarrayState()) {
        		parentDocument.hybsView.sortLabeledSamples();
    		}
    	
        	
        	
        	// If this is a Solexa request and the sample setup is complete,
        	// create the sequencing lanes based on the number of lanes 
        	// entered for each sample.
        	if (isComplete && currentState != null && currentState =='SolexaSamplesState') {
        		var isValidNumberSeqLanes:Boolean = true;
        		for each (var s:Object in parentDocument.samples) {
    				if (s.@numberSequencingLanes > 100) {
    					callLater(showMaxLaneError, [s.@numberSequencingLanes]);
    					parentDocument.userWarningsSamples += "Number of lanes to sequence '" + s.@numberSeqLanes + "' exceed max.  ";
    					isValidNumberSeqLanes = false;
    					break;
    				}
        		}
        		if (isValidNumberSeqLanes) {
        			var lanesAdded:Boolean = false;
	        		for each (var theSample:Object in parentDocument.samples) {
	        			var numberLanesForSample:int = parentDocument.getLaneCount(theSample);
	        			if (numberLanesForSample < theSample.@numberSequencingLanes) {
		        			var numberLanesToAdd:int = theSample.@numberSequencingLanes - numberLanesForSample;
		        			for (var x:Number = 0; x < numberLanesToAdd; x++) {
		        				addSequencingLaneForSample(theSample);
		        				lanesAdded = true;
		        			}
	        			} else if (numberLanesForSample > theSample.@numberSequencingLanes) {
	        				var numberLanesToRemove:int = numberLanesForSample - theSample.@numberSequencingLanes;
							for each(var lane:Object in parentDocument.getLanes(theSample, numberLanesToRemove)) {
								parentDocument.lanes.removeItemAt(parentDocument.lanes.getItemIndex(lane));
							}
	        			}
	        				
	        		}
	        		
	        		if (lanesAdded) {
	        			parentDocument.lanes.refresh();
	        		}
        		}
        	}

        	
        	
			if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
        		parentDocument.hybSetupView.enabled = isComplete;
    		} if (parentDocument.isSolexaEditState()) {
    			parentDocument.lanesView.enabled = isComplete;
    		} else {
    			if (parentDocument.theTab.contains(parentDocument.visibilityView)) {
    				parentDocument.visibilityView.enabled = isComplete;
    			}
    		}        	
    		parentDocument.enableNextButtons();
    		

			callLater(postSamplesCompleteness, [isComplete]);
        	
        
        }
        private function isEntered(sample:Object, fieldName:String):Boolean {
        	if (!sample.hasOwnProperty(fieldName) || sample[fieldName] == '') {
        		return false;
        	} else {
        		return true;
        	}
        }

        
        private function showMaxLaneError(numberSeqLanes:String):void {
			Alert.show("Number of lanes to sequence " + numberSeqLanes + " exceeds max.");
        }
        
                
        private function postSamplesCompleteness(isComplete:Boolean):void {
	    		
	    	if (!isComplete) {
	        	if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
		        	parentDocument.hybSetupView.enabled = false;
	        	} 
	
	        	if (parentDocument.theTab.contains(parentDocument.hybsView)) {
		        	parentDocument.hybsView.enabled = false;
	        	} 
	        	
	        	if (parentDocument.isSolexaEditState()) {
	    			parentDocument.lanesView.enabled = false;
	        	}
	
				parentDocument.visibilityView.enabled = false;
	        	parentDocument.confirmView.enabled = false;
    		} else {
    			if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
	    			parentDocument.hybSetupView.checkHybSetupCompleteness();
	    			this.refreshHybsGrid();    				
    			} 
    			if (parentDocument.isSolexaState() && !parentDocument.isEditState() && !parentDocument.isAmendState()) {
    				this.refreshLanesGrid();
    			}
    		}
        	
        }
		
		private function addSequencingLaneForSample(sample:Object):void {
			var emptyNode:XML = new XML("<SequenceLane " +
			    " idSequenceLane='" + "SequenceLane" + parentDocument.lanes.length + "'" +
			    " notes='' " + 
				" idSeqRunType='" + sample.@idSeqRunType + "'" +
				" idNumberSequencingCycles='" + sample.@idNumberSequencingCycles + "'" +
				" idSample='" + sample.@idSample + "'" +
				" idGenomeBuildAlignTo='" + sample.@idGenomeBuildAlignTo + "'" +
				" analysisInstructions='" + sample.@analysisInstructions + "'" +
				"/>");
			
			parentDocument.lanes.addItem(emptyNode);
		}
		
		public function propagateOrganism(idOrganism:String):void {
			if (currentState != null && currentState.indexOf('SolexaSamples') >= 0) {
				for each (var sample:Object in parentDocument.samples) {
					sample.@idOrganism = idOrganism;
				}
			}
		}
		public function propagateSeqRunType(idSeqRunType:String):void {
			if (currentState != null && currentState.indexOf('SolexaSamples') >= 0) {
				for each (var sample:Object in parentDocument.samples) {
					sample.@idSeqRunType = idSeqRunType;
				}
			}
		}
		public function propagateNumberSequencingCycles(theSample:Object):void {
			if (currentState != null && currentState.indexOf('SolexaSamples') >= 0) {
				for each(var lane:Object in parentDocument.getLanes(theSample, -1)) {
					lane.@idNumberSequencingCycles = theSample.@idNumberSequencingCycles;
				}
			}
		}		
 		public function propagateSolexaLibraryType(idSolexaLibraryType:String):void {
			if (currentState != null && currentState.indexOf('SolexaSamples') >= 0) {
				for each (var sample:Object in parentDocument.samples) {
					sample.@idSolexaLibraryType = idSolexaLibraryType;
				}
			}
		}   
		
		public function initializeBarcoding():void {
			if (parentDocument.isSolexaState()) {
				
				
				if (barcodeList == null || this.barcodeList.length() == 0) {
					barcodes.refresh();
					barcodeList = new XMLList(barcodes.toXMLString());
				}

				parentDocument.seqSetup1View.propagateBarcode();
			}
			
			
			
        	if (parentDocument.showSampleMultiplexGroup()) {
        		this.samplesGrid.dataProvider = null;
        		sampleGroupingCollection = new GroupingCollection();
        		sampleGroupingCollection.source = parentDocument.samples;
        		var group:Grouping = new Grouping();
        		var gf:GroupingField = new GroupingField();
        		gf.name = "@multiplexGroupNumber";
        		group.fields = [gf];
        		sampleGroupingCollection.grouping  = group;
        		sampleGroupingCollection.refresh(); 
        		this.samplesGrid.dataProvider = sampleGroupingCollection;
        		
        		this.samplesGrid.dragMoveEnabled = true;
        		this.samplesGrid.dropEnabled = true;
        		this.samplesGrid.dragEnabled = true;

        		this.sampleRowNumberCol.visible = false;
        		this.multiplexGroupNumberColumn.visible = true;
        		this.barcodeColumn.visible = false;

        	} else {
        		sampleGroupingCollection = null;
        		this.samplesGrid.dataProvider = parentDocument.samples;
        		
        		this.samplesGrid.dragMoveEnabled = false;
        		this.samplesGrid.dropEnabled = false;
        		this.samplesGrid.dragEnabled = false;

        		this.sampleRowNumberCol.visible = true;
        		this.multiplexGroupNumberColumn.visible = false;

        	}
        		
        	this.barcodeColumn.visible = parentDocument.showSampleBarcodes();
        	this.customBarcodeColumn.visible = parentDocument.showSampleCustomBarcodes();
        	
			this.samplesGrid.validateNow();
        	callLater(this.checkSamplesCompleteness);

		}
		

		
        public function showHideColumns():void {
        	buttonsContainer.visible = !parentDocument.isAmendState();
        	
        	existingNumberSequencingLanesCol.visible = false;
        	additionalNumberSequencingLanesCol.visible = false;
        	corePrepInstructionsCol.visible = false;
        	
        	
        	sampleNumberCol.visible = parentDocument.isEditState() || parentDocument.isAmendState();
        	this.showQCFieldsCheckBox.visible = parentDocument.isEditState();
        	this.showSeqPrepFieldsCheckBox.visible = parentDocument.isEditState() && currentState.indexOf('SolexaSamples') >= 0;
        	
        	if (showQCFieldsCheckBox.selected || showSeqPrepFieldsCheckBox.selected) {
        		numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible = false;
				idSeqRunTypeCol.visible = false; 
				concentrationUnitColumn.visible = false;
				concentrationUnitColumn.editable = true;
				sampleOrganismColumn.visible = false;
				chipTypeColumn.visible = false; 
				samplePrepMethodCol.visible = true;
				seqLibProtocolCol.visible = false;
				preppedByCoreCol.visible = false;
				numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible =  false;
				preppedByCoreCol.visible =  false;
				idSeqRunTypeCol.visible =  false;

        	} else if (currentState != null && currentState.indexOf('SolexaSamples') >= 0 ) {
        		numberSequencingLanesCol.visible = !parentDocument.isEditState() && !parentDocument.isAmendState();
				numberSequencingLanesCol.editable = true;
				numberSequencingCyclesCol.visible = !parentDocument.isEditState();
				preppedByCoreCol.visible = true;
				corePrepInstructionsCol.visible = true;
				
				if (parentDocument.currentState == "SolexaLaneAmendState") {
					numberSequencingLanesCol.editable = false;
					additionalNumberSequencingLanesCol.visible = true;
					existingNumberSequencingLanesCol.visible = true;
				} else if (parentDocument.currentState == "SolexaBaseAmendState") {
					numberSequencingLanesCol.editable = false;
					numberSequencingLanesCol.visible = true;
					numberSequencingLanesCol.editable = true;
				}
				
				if (parentDocument.isEditState() ||
				    parentDocument.sampleSetupView.currentState == "SolexaSetupPreppedState" ||
				    parentDocument.sampleSetupView.currentState == "SolexaAmendPreppedState" ) {
					seqLibProtocolCol.visible = true;
				} else {
					seqLibProtocolCol.visible = false;
				}

				idSeqRunTypeCol.visible = !parentDocument.isEditState(); 
				concentrationUnitColumn.visible = true;
				concentrationUnitColumn.editable = false;
				sampleOrganismColumn.visible = true;
				chipTypeColumn.visible = false; 
				samplePrepMethodCol.visible = true;
				labelColumn.visible = false;
				
				samplePrepMethodCol.visible = true;
				
        		

			} else if (currentState != null && currentState.indexOf('QCSamples') >= 0) {
        		numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible = false;
				preppedByCoreCol.visible = false;
				seqLibProtocolCol.visible = false;
				idSeqRunTypeCol.visible = false; 
				concentrationUnitColumn.visible = true;
				concentrationUnitColumn.editable = true;
				sampleOrganismColumn.visible = false;
				samplePrepMethodCol.visible = true;
				
				
				if (parentDocument.isEditState) {
					chipTypeColumn.visible = parentDocument.request.@codeApplication == 'BIOAN' ? true : false;		
				} else {
					chipTypeColumn.visible = parentDocument.sampleSetupView.currentState == 'QCSetupBionanalyzerState' ? true : false;
				}
				labelColumn.visible = false;
				
			} else {
        		numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible = false;
				preppedByCoreCol.visible = false;
				seqLibProtocolCol.visible = false;
				idSeqRunTypeCol.visible = false; 
				concentrationUnitColumn.visible = true;
				concentrationUnitColumn.editable = false;
				sampleOrganismColumn.visible = true;
				samplePrepMethodCol.visible = true;
				chipTypeColumn.visible = false; 
				labelColumn.visible = !parentDocument.isEditState();
			}
			 
			if (!parentDocument.isEditState()) {
				parentDocument.confirmView.showHideColumns();				
			}
			
			// If this is a QC request, hide the annotation columns 
			if (currentState != null && currentState.indexOf('QCSamples') >= 0) {
				// Make all annotation columns invisible
				for each(var col:AdvancedDataGridColumn in this.samplesGrid.columns) {
					if (col is views.util.AnnotationDataGridColumn) {
						col.visible = false;
					}
				}
			}
  						
        }
		private function refreshHybsGrid():void {
 		    parentDocument.hybsView.hybsGrid.invalidateList();
	        parentDocument.hybsView.hybsGrid.invalidateDisplayList();
	        if (!parentDocument.isEditState()) {
		        parentDocument.confirmView.hybsGridConfirm.invalidateList();
		        parentDocument.confirmView.hybsGridConfirm.invalidateDisplayList();
	        }
		}
		private function refreshLanesGrid():void {
			parentDocument.confirmView.lanesConfirmGrid.invalidateList();
 			parentDocument.confirmView.lanesConfirmGrid.invalidateDisplayList();
		}
		
		public function onEdit():void {
			parentDocument.dirty.setDirty();
		}
		
		private function highlightWhenMissing():Boolean {
			if (this.parentDocument.isEditState()) {
				return false;
			} else {
				return true;
			}
		}
		
		private function toggleShowCCNumber():void {
			if (!this.showCCNumberCheckbox.selected) {
				for each(var s:XML in parentDocument.samples) {
					s.@ccNumber = '';
				}
			}
		}
		
		private function onDragEnter(event:DragEvent):void
		{
			if (currentState.indexOf('SolexaSamples') >= 0) {
			    DragManager.acceptDragDrop(AdvancedDataGrid(event.target));
			} else {
				this.samplesGrid.hideDropFeedback(event);
				event.preventDefault();
				DragManager.showFeedback(DragManager.NONE);
			}
		}
		

		
		private function onDragDropSample(event:DragEvent) : void
		{
			var dropNode:Object = null;
			if (idx > 0) {
				idx--;
			}
			var idx:int = samplesGrid.calculateDropIndex(event);
			var renderer:Object = samplesGrid.indexToItemRenderer(idx); 
			if (renderer != null) {
				dropNode = renderer.data; 
			}
			
			if (dropNode == null) {
				event.preventDefault();
				return;
			}
			
			var draggedFormat:String = event.dragSource.formats[0];
			var draggedItems:Array = event.dragSource.dataForFormat(draggedFormat) as Array;	
		    if (draggedItems != null) {
				for(var i:int = 0; i < draggedItems.length; i++) {
    	       		var dragItem:XML = XML(draggedItems[i]);
    	       		dragItem.@multiplexGroupNumber = dropNode.@multiplexGroupNumber;
    			}	 
		    } else {
		    	event.preventDefault();
		    }
		}		
		public function getSampleTreeIcon(item:Object):Class {
			if (item == null) {
				return parentApplication.iconGroup;
			} else {
				return null; 
			}  
		}  
		 
         private function sortBarcodes(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var scheme1:String = obj1.@oligoBarcodeSchemeDisplay;
				var scheme2:String = obj2.@oligoBarcodeSchemeDisplay;
				
				if (scheme1 < scheme2) {
					return -1;
				} else if (scheme1 > scheme2) {
					return 1; 
				} else {
					var order1:int = obj1.@sortOrder;
					var order2:int = obj2.@sortOrder;
					
					if (obj1.@value == '') {
						return -1;
					} else if (obj2.@value == '') {
						return 1;
					} else {
						if (order1 < order2) {
							return -1;
						} else if (order1 > order2) {
							return 1;
						} else {
							return 0;
						}
					}
					
				}
				
			}			
		}					

        
	]]>
</mx:Script>	
	<mx:Sort id="barcodeSort"  compareFunction="sortBarcodes"/>
    <mx:XMLListCollection id="barcodes" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OligoBarcode').DictionaryEntry}" sort="{barcodeSort}"/>
    <mx:XMLList id="barcodeList"/>
    
	<mx:VBox width="100%" height="100%" verticalGap="2">
	        <mx:HBox  horizontalAlign="center" paddingLeft="4" id="vbox1" width="100%" verticalAlign="middle"> 
  			  <mx:TextArea styleName="instructionBox" width="590" wordWrap="true" height="88" id="textarea1" verticalScrollPolicy="off" horizontalScrollPolicy="off">
				<mx:htmlText><![CDATA[Instructions<br>  1.  Mandatory: Fill in the following highlighted fields:  sample name, label, and concentration.<br>  2.  Optional: Any annotation characteristic that you selected from the previous screen appears on this screen <br>       as a highlighted column. Please type desired information under the highlighted field with the annotation header.<br>  3.  Optional: Provide a short description of your sample in the non-highlighted description field.<br>  4.  After completing all line items, click the 'Next' button at the bottom of the page to proceed.]]></mx:htmlText>
			  </mx:TextArea>
			</mx:HBox>
			<mx:Spacer width="8"/>
			<mx:HBox id="buttonsContainer">
				<mx:CheckBox id="showCCNumberCheckbox" 
					click="toggleShowCCNumber()" 
					visible="{parentApplication.isBSTLinkageSupported}"
					width="{parentApplication.isBSTLinkageSupported ? 250 : 0}" 
					label="Link to BST samples using CC Number" />
				<mx:LinkButton textDecoration="underline"  label="Add sample" click="addSample();checkSamplesCompleteness()" icon="@Embed(source='../../assets/add.png')" id="addSampleButton" toolTip="Add sample" />
				<mx:LinkButton textDecoration="underline" label="Copy sample" click="copySample();checkSamplesCompleteness()" icon="@Embed('../../assets/table_multiple.png')" id="copySampleButton" toolTip="Copy sample(s)" />
				<mx:LinkButton textDecoration="underline" label="Delete sample" click="deleteSample();checkSamplesCompleteness();parentDocument.hybsView.checkHybsCompleteness()" icon="@Embed(source='../../assets/delete.png')" id="deleteSampleButton" toolTip="Delete sample(s)" />
				<mx:LinkButton textDecoration="underline" label="Clear all" click="promptToClearAllSamples();deleteSample();" icon="@Embed('../../assets/folder_delete.png')" id="clearSamplesButton" toolTip="Clear all samples" />
			</mx:HBox>
					
			<mx:AdvancedDataGrid width="100%" height="100%" id="samplesGrid"  
				editable="true"
				allowMultipleSelection="false" 
				itemFocusOut="checkSamplesCompleteness()" 
				horizontalScrollPolicy="auto" 
				sortableColumns="false"
				sortExpertMode="true"  
				dragDrop="onDragDropSample(event)"
				defaultLeafIcon="{null}" 
				iconFunction="getSampleTreeIcon"
				displayItemsExpanded="true"  
				selectionColor="#DDF3FB">
				<mx:columns>
	                <mx:AdvancedDataGridColumn id="multiplexGroupNumberColumn" headerText="Multiplex #" dataField="@multiplexGroupNumberDisplay" editable="false" visible="true"
						width="54">
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox horizontalScrollPolicy="off" verticalGap="0">
									<mx:Label text="Mutiplex"/>
									<mx:Label text="Group"/>
								</mx:VBox> 
							</mx:Component> 
						</mx:headerRenderer> 
				    </mx:AdvancedDataGridColumn>
  			        <mx:AdvancedDataGridColumn id="sampleRowNumberCol" visible="true" editable="false" headerText=""  width="25" resizable="false" labelFunction="parentDocument.getSamplesGridRowNumber"/>
					<mx:AdvancedDataGridColumn id="sampleNumberCol" headerText="ID" width="60" visible="true"  dataField="@number"  editable="false"/>
					<mx:AdvancedDataGridColumn headerText="Sample Name" width="100" editorDataField="text" dataField="@name" rendererIsEditor="false"
					   editable="true" 
 	                   itemRenderer="{hci.flex.controls.Label.create('@name')}"                
 	                   itemEditor="views.renderers.TextInputSampleName"      />           


 
	               <mx:AdvancedDataGridColumn id="labelColumn" dataField="@label" width="92" headerText="Label" rendererIsEditor="true" 
					      itemRenderer="views.renderers.CheckBoxSampleLabel">
				    </mx:AdvancedDataGridColumn>

	 				<mx:AdvancedDataGridColumn headerText="Conc." id="concentrationCol" visible="{!showQCFieldsCheckBox.selected &amp;&amp; !showSeqPrepFieldsCheckBox.selected}"  width="42" dataField="@concentration" editorDataField="text"  rendererIsEditor="false"
 	                   itemRenderer="{hci.flex.controls.Label.create('@concentration')}"                
 	                   itemEditor="views.renderers.TextInputSampleConcentration"         />          
	                <mx:AdvancedDataGridColumn id="concentrationUnitColumn" visible="{!showQCFieldsCheckBox.selected}" width="40" headerText="Unit" dataField="@codeConcentrationUnit" 
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"  
 	                   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ConcentrationUnit').DictionaryEntry, '@display', '@value', '@codeConcentrationUnit', true)}"                
 	                   itemEditor="{hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ConcentrationUnit').DictionaryEntry, '@display', '@value', '@idConcentrationUnit', true)}"/>
	                <mx:AdvancedDataGridColumn id="ccNumber" headerText="CC Number" dataField="@ccNumber" editable="true" visible="{showCCNumberCheckbox.selected ? true : false}"
						width="76"
						itemRenderer="{hci.flex.controls.Label.createCustom('@ccNumber', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                    itemEditor="{hci.flex.controls.TextInput.create('@ccNumber')}"/>
	                <mx:AdvancedDataGridColumn id="barcodeColumn" visible="true" headerText="Barcode" width="85" dataField="@idOligoBarcode" 
	                   editorDataField="value" sortable="false" editable="{parentApplication.hasPermission('canWriteAnyObject')}" rendererIsEditor="false" 
 	                   itemRenderer="{DropdownLabel.getFactory(barcodeList, '@display', '@value', '@idOligoBarcode', true)}"                
 	                   itemEditor="{hci.flex.controls.ComboBox.getFactory(barcodeList, '@display', '@value', '@idOligoBarcode', true)}"/>
	                <mx:AdvancedDataGridColumn id="customBarcodeColumn" headerText="Custom Barcode" dataField="@barcodeSequence" editable="true" visible="true"
						width="80"
						itemRenderer="{hci.flex.controls.Label.createCustom('@barcodeSequence', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                    itemEditor="{hci.flex.controls.TextInput.create('@barcodeSequence')}">
 	                     <mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								    <mx:Label text="Barcode"/> 
								    <mx:Label text="Sequence"/>
								</mx:VBox> 
							</mx:Component>
						 </mx:headerRenderer>
 	                </mx:AdvancedDataGridColumn>  
					
					
	 		 	    
	 				<mx:AdvancedDataGridColumn id="numberSequencingLanesCol" headerText="# Lanes to Sequence" width="72" editorDataField="text" dataField="@numberSequencingLanes" 
						editable="false"
						rendererIsEditor="false"
 	                   itemRenderer="{hci.flex.controls.Label.create('@numberSequencingLanes')}"         
 	                   itemEditor="views.renderers.TextInputSampleNumberSeqLanes"      >
 	                     <mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								    <mx:Label text="# Lanes to"/> 
								    <mx:Label text="Sequence"/>
								</mx:VBox> 
							</mx:Component>
						 </mx:headerRenderer>
 	                </mx:AdvancedDataGridColumn>  
 	                
 	                <mx:AdvancedDataGridColumn id="existingNumberSequencingLanesCol" 
 	                	headerText="# Lanes to Sequence" width="72" 
 	                	dataField="@sequenceLaneCount" 
						editable="false">
 	                     <mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								    <mx:Label text="Existing"/> 
								    <mx:Label text="# Lanes"/> 
								</mx:VBox> 
							</mx:Component>
						 </mx:headerRenderer>
 	                </mx:AdvancedDataGridColumn> 
 	                
 	                <mx:AdvancedDataGridColumn id="additionalNumberSequencingLanesCol" 
 	                	headerText="# Lanes to Sequence" width="72" 
 	                	editorDataField="text" dataField="@numberSequencingLanes" 
						editable="true"
						rendererIsEditor="false"
 	                   itemRenderer="{hci.flex.controls.Label.create('@numberSequencingLanes')}"         
 	                   itemEditor="views.renderers.TextInputSampleNumberSeqLanes"      >
 	                     <mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								    <mx:Label text="Additional"/> 
								    <mx:Label text="# Lanes to"/> 
								    <mx:Label text="Sequence"/>
								</mx:VBox> 
							</mx:Component>
						 </mx:headerRenderer>
 	                </mx:AdvancedDataGridColumn> 
 	                        
	 				<mx:AdvancedDataGridColumn headerText="Seq Run Type" id="idSeqRunTypeCol" visible="{currentState == 'SolexaSamplesState'}"  editable="false" width="150" dataField="@idSeqRunType"
                        itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry, '@display', '@value', '@idSeqRunType', true)}"/>                 											
	 				<mx:AdvancedDataGridColumn headerText="# Seq Cycles" id="numberSequencingCyclesCol" visible="{currentState == 'SolexaSamplesState'}"  width="70" dataField="@idNumberSequencingCycles" 
	 				    rendererIsEditor="false" editorDataField="value" 
 	                   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry, '@display', '@value', '@idNumberSequencingCycles', true)}"                
   	                   itemEditor="{ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry, '@display', '@value', '@idNumberSequencingCycles', '@canChangeNumberSequencingCycles', true)}">
						 <mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								    <mx:Label text="# Seq"/>
								    <mx:Label text="Cycles"/>
								</mx:VBox> 
							</mx:Component>
						 </mx:headerRenderer>
					</mx:AdvancedDataGridColumn>

					<mx:AdvancedDataGridColumn id="preppedByCoreCol" headerText="Core to prep lib?"   visible="{true}" width="60"  dataField="@seqPrepByCore"
 	                   itemRenderer="{hci.flex.controls.Label.create('@seqPrepByCore')}"                
 	                   itemEditor="views.renderers.TextInputSeqPrepByCore"      >
 	                   	<mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								    <mx:Label text="Core to"/>
								    <mx:Label text="prep lib?"/>
								</mx:VBox> 
							</mx:Component>
						</mx:headerRenderer>
 	                </mx:AdvancedDataGridColumn>          
                    <mx:AdvancedDataGridColumn id="seqLibProtocolCol" headerText="Seq Lib Protocol" visible="{true}"  width="180" dataField="@idSeqLibProtocol" 
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"
 	                   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqLibProtocol').DictionaryEntry, '@display', '@value', '@idSeqLibProtocol', true)}"                
	                   itemEditor="{ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqLibProtocol').DictionaryEntry, '@display', '@value', '@idSeqLibProtocol', '@canChangeSamplePrepMethod', true)}"/>

					<mx:AdvancedDataGridColumn id="AGE" headerText="Age" dataField="@AGE" editable="true" visible="{parentDocument.request.@AGE == 'Y'}"
						itemRenderer="{hci.flex.controls.Label.createCustom('@AGE', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@AGE')}"/>          
					<mx:AdvancedDataGridColumn id="CELLLINE" headerText="Cell line" dataField="@CELLLINE" editable="true" visible="{parentDocument.request.@CELLLINE == 'Y'}"
					    itemRenderer="{hci.flex.controls.Label.createCustom('@CELLLINE', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@CELLLINE')}"/>
					<mx:AdvancedDataGridColumn id="CELLTYPE" headerText="Cell Type" dataField="@CELLTYPE" editable="true" visible="{parentDocument.request.@CELLTYPE == 'Y'}"
						itemRenderer="{hci.flex.controls.Label.createCustom('@CELLTYPE', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@CELLTYPE')}"/>
			 		<mx:AdvancedDataGridColumn id="CLININFO" headerText="Clinical Info" dataField="@CLININFO" editable="true" visible="{parentDocument.request.@CLININFO == 'Y'}"
			 		itemRenderer="{hci.flex.controls.Label.createCustom('@CLININFO', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@CLININFO')}"/>
					<mx:AdvancedDataGridColumn id="COMPOUND" headerText="Compound" dataField="@COMPOUND" editable="true" visible="{parentDocument.request.@COMPOUND == 'Y'}"
						itemRenderer="{hci.flex.controls.Label.createCustom('@COMPOUND', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@COMPOUND')}"/>
					<mx:AdvancedDataGridColumn id="DISSTATE" headerText="Disease State" dataField="@DISSTATE" editable="true" visible="{parentDocument.request.@DISSTATE == 'Y'}"
						itemRenderer="{hci.flex.controls.Label.createCustom('@DISSTATE', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@DISSTATE')}"/>
					<mx:AdvancedDataGridColumn id="DOSE" headerText="Dose" dataField="@DOSE" editable="true" visible="{parentDocument.request.@DOSE == 'Y'}"
						itemRenderer="{hci.flex.controls.Label.createCustom('@DOSE', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@DOSE')}"/>
					<mx:AdvancedDataGridColumn id="GENMOD" headerText="Genetic Modification" dataField="@GENMOD" editable="true" visible="{parentDocument.request.@GENMOD == 'Y'}"
					   itemRenderer="{hci.flex.controls.Label.createCustom('@GENMOD',parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@GENMOD')}"/>
					<mx:AdvancedDataGridColumn id="GENOTYPE" headerText="Genotype" dataField="@GENOTYPE" editable="true" visible="{parentDocument.request.@GENOTYPE == 'Y'}"
					itemRenderer="{hci.flex.controls.Label.createCustom('@GENOTYPE', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@GENOTYPE')}"/>
					<mx:AdvancedDataGridColumn id="GROWTHCOND" headerText="Growth Conditions" dataField="@GROWTHCOND" editable="true" visible="{parentDocument.request.@GROWTHCOND == 'Y'}"
						itemRenderer="{hci.flex.controls.Label.createCustom('@GROWTHCOND', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@GROWTHCOND')}"/>
					<mx:AdvancedDataGridColumn id="INDIV" headerText="Individual" dataField="@INDIV" editable="true" visible="{parentDocument.request.@INDIV == 'Y'}"
						itemRenderer="{hci.flex.controls.Label.createCustom('@INDIV', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@INDIV')}"/>
					<mx:AdvancedDataGridColumn id="ORGPART" headerText="Organ / Tissue" dataField="@ORGPART" editable="true" visible="{parentDocument.request.@ORGPART == 'Y'}"
						itemRenderer="{hci.flex.controls.Label.createCustom('@ORGPART', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@ORGPART')}"/>
					<mx:AdvancedDataGridColumn id="SEX" headerText="Sex" dataField="@SEX" editable="true" visible="{parentDocument.request.@SEX == 'Y'}"
						itemRenderer="{hci.flex.controls.Label.createCustom('@SEX', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@SEX')}"/>
					<mx:AdvancedDataGridColumn id="TEMP" headerText="Temperature" dataField="@TEMP" editable="true" visible="{parentDocument.request.@TEMP == 'Y'}"
						itemRenderer="{hci.flex.controls.Label.createCustom('@TEMP', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@TEMP')}"/>
					<mx:AdvancedDataGridColumn id="TIME" headerText="Time Course" dataField="@TIME" editable="true" visible="{parentDocument.request.@TIME == 'Y'}"
						itemRenderer="{hci.flex.controls.Label.createCustom('@TIME', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@TIME')}"/>
					<mx:AdvancedDataGridColumn id="otherDataColumn" headerText="Other" dataField="@OTHER" editable="true" visible="{parentDocument.request.@OTHER == 'Y'}"
						itemRenderer="{hci.flex.controls.Label.createCustom('@OTHER', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@OTHER')}"/>
					<mx:AdvancedDataGridColumn id="treatmentColumn" headerText="Treatment" visible="{parentDocument.request.@treatment == 'Y' ? true : false}" width="100" dataField="@treatment"
					itemRenderer="{hci.flex.controls.Label.createCustom('@treatment', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                   itemEditor="{hci.flex.controls.TextInput.create('@treatment')}"/>
 	                   
					<mx:AdvancedDataGridColumn id="corePrepInstructionsCol" headerText="Core Prep Instructions" width="140" dataField="@prepInstructions"/> 
					<mx:AdvancedDataGridColumn headerText="Description" width="140" dataField="@description"/> 

                    <mx:AdvancedDataGridColumn id="samplePrepMethodCol" headerText="Nucl. acid extraction meth." visible="{!showQCFieldsCheckBox.selected}"  width="180" dataField="@idSamplePrepMethod" 
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"
 	                   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SamplePrepMethod').DictionaryEntry, '@display', '@value', '@idSamplePrepMethod', true)}"                
	                   itemEditor="{ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SamplePrepMethod').DictionaryEntry, '@display', '@value', '@idSamplePrepMethod', '@canChangeSamplePrepMethod', true)}"/>
					<mx:AdvancedDataGridColumn id="otherSamplePrepMethodCol" headerText="Other Nucl. acid extraction meth." width="140" dataField="@otherSamplePrepMethod"/> 
	                 <mx:AdvancedDataGridColumn id="sampleTypeCol"  headerText="Sample Type" visible="{!showQCFieldsCheckBox.selected  &amp;&amp; !showSeqPrepFieldsCheckBox.selected }" width="120"   dataField="@idSampleType" 
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
 	                   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType', true)}"                 
	                   itemEditor="{ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType', '@canChangeSampleType', true)}"/>
	                <mx:AdvancedDataGridColumn id="sampleOrganismColumn" visible="{!showQCFieldsCheckBox.selected}" width="110" headerText="Organism"  dataField="@idOrganism" 
	                    editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"   
 	                   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Organism').DictionaryEntry, '@display', '@value', '@idOrganism', true)}"                
 	                   itemEditor="{hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Organism').DictionaryEntry, '@display', '@value', '@idOrganism', true)}"/>


	                <mx:AdvancedDataGridColumn id="chipTypeColumn" visible="{showQCFieldsCheckBox.selected || parentDocument.request.@codeRequestCategory != 'QC' ? false : true}" headerText="Chip Type" width="150" dataField="@codeBioanalyzerChipType" 
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
 	                   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@codeBioanalyzerChipType', true)}"                
 	                   itemEditor="{hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@codeBioanalyzerChipType', true)}"/>
					<mx:AdvancedDataGridColumn visible="{showQCFieldsCheckBox.selected}" editable="{parentApplication.hasPermission('canWriteAnyObject')}" headerText="QC Conc. ng/uL" width="80" dataField="@qualCalcConcentration"/>
					<mx:AdvancedDataGridColumn visible="{showQCFieldsCheckBox.selected}" editable="{parentApplication.hasPermission('canWriteAnyObject')}" headerText="QC 260/230" width="80" dataField="@qual260nmTo230nmRatio"/>
					<mx:AdvancedDataGridColumn visible="{showQCFieldsCheckBox.selected}" editable="{parentApplication.hasPermission('canWriteAnyObject')}" headerText="QC RIN" width="70" dataField="@qualRINNumber"/>
					<mx:AdvancedDataGridColumn visible="{showQCFieldsCheckBox.selected}" editable="{parentApplication.hasPermission('canWriteAnyObject')}" headerText="QC Frag size (from)" width="87" dataField="@qualFragmentSizeFrom"/>
					<mx:AdvancedDataGridColumn visible="{showQCFieldsCheckBox.selected}" editable="{parentApplication.hasPermission('canWriteAnyObject')}" headerText="QC Frag size (to)" width="87" dataField="@qualFragmentSizeTo"/>
					<mx:AdvancedDataGridColumn visible="{showQCFieldsCheckBox.selected}" headerText="QC Status" width="90" dataField="@qualStatus"
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"  itemRenderer="mx.controls.Label" 
   	                   itemEditor="{ComboBoxWorkflowStatus.create('@qualStatus')}"/>

	                <mx:AdvancedDataGridColumn id="seqPrepQualBioanalyzerMethodCol" visible="{showSeqPrepFieldsCheckBox.selected}" headerText="Seq Lib Prep Bioanal Meth" width="100" dataField="@seqPrepQualCodeBioanalyzerChipType" 
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
 	                   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@seqPrepQualCodeBioanalyzerChipType', true)}"                
 	                   itemEditor="{hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@seqPrepQualCodeBioanalyzerChipType', true)}"/>
					<mx:AdvancedDataGridColumn id="SeqPrepGelFragmentSizeFromCol"  visible="{showSeqPrepFieldsCheckBox.selected}" headerText="Gel size (from)" width="100" editorDataField="text" dataField="@seqPrepGelFragmentSizeFrom" rendererIsEditor="false"
 	                   itemRenderer="{hci.flex.controls.Label.create('@seqPrepGelFragmentSizeFrom')}"                
 	                   itemEditor="views.renderers.TextInputSampleLibFragSizeFrom"      />          
					<mx:AdvancedDataGridColumn id="SeqPrepGelFragmentSizeToCol" headerText="Gel size (to)"  visible="{showSeqPrepFieldsCheckBox.selected}"  width="100" editorDataField="text" dataField="@seqPrepGelFragmentSizeTo"  rendererIsEditor="false"
 	                   itemRenderer="{hci.flex.controls.Label.create('@seqPrepGelFragmentSizeTo')}"                
 	                   itemEditor="views.renderers.TextInputSampleLibFragSizeTo"      />          
					<mx:AdvancedDataGridColumn visible="{showSeqPrepFieldsCheckBox.selected}" headerText="Seq Prep Status" width="90" dataField="@seqPrepStatus"
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"  itemRenderer="mx.controls.Label" 
   	                   itemEditor="views.renderers.TextInputSampleNumberSeqLanes"  />

				</mx:columns>
			</mx:AdvancedDataGrid>
			<mx:HBox width="100%" horizontalAlign="right">
				<mx:CheckBox id="showQCFieldsCheckBox" label="Show QC columns"  visible="true" click="showHideColumns()">
				</mx:CheckBox>							
				<mx:CheckBox id="showSeqPrepFieldsCheckBox" label="Illumina Lib Prep"  visible="true" click="showHideColumns()">
				</mx:CheckBox>							
			</mx:HBox>

			
		
	</mx:VBox>
	
	<mx:states>
		<mx:State name="SamplesEditState" >
			<mx:RemoveChild target="{buttonsContainer}"/>
			<mx:RemoveChild target="{vbox1}"/>
		</mx:State>

		<mx:State name="SamplesAdminState">
			<mx:RemoveChild target="{vbox1}"/>
		</mx:State>


		<mx:State name="SolexaSamplesState" >
			<mx:SetProperty target="{textarea1}" name="htmlText">
				<mx:value><![CDATA[Instructions<br>  1.  Mandatory: Fill in the following highlighted fields:  sample name and concentration<br>  2.  Optional: Any annotation characteristic that you selected from the previous screen appears on this screen <br>       as a highlighted column. Please type desired information under the highlighted field with the annotation header.<br>  3.  Optional: Provide a short description of your sample in the non-highlighted description field.<br>  4.  After completing all line items, click the 'Next' button at the bottom of the page to proceed.]]></mx:value>
			</mx:SetProperty>
			<mx:SetProperty target="{textarea1}" name="editable" value="false"/>
		</mx:State>
		<mx:State name="SolexaSamplesEditState" basedOn="SamplesEditState" >
		</mx:State>
		<mx:State name="SolexaSamplesAdminState" basedOn="SamplesAdminState" >
			<mx:RemoveChild target="{addSampleButton}"/>
			<mx:RemoveChild target="{clearSamplesButton}"/>

		</mx:State>

		<mx:State name="QCSamplesState" >
			<mx:SetProperty target="{textarea1}" name="htmlText">
				<mx:value><![CDATA[Instructions<br>  1.  Mandatory: Fill in the following highlighted fields:  sample name and concentration.<br>  2.  Optional: Any annotation characteristic that you selected from the previous screen appears on this screen <br>       as a highlighted column. Please type desired information under the highlighted field with the annotation header.<br>  3.  Optional: Provide a short description of your sample in the non-highlighted description field.<br>  4.  After completing all line items, click the 'Next' button at the bottom of the page to proceed.]]></mx:value>
			</mx:SetProperty>
		</mx:State>
		<mx:State name="QCSamplesEditState" basedOn="SamplesEditState" >
		</mx:State>
		<mx:State name="QCSamplesAdminState" basedOn="SamplesAdminState" >
			<mx:RemoveChild target="{clearSamplesButton}"/>
			<mx:RemoveChild target="{addSampleButton}"/>
		</mx:State>

		<mx:State name="MicroarraySamplesState" >
		</mx:State>
		<mx:State name="MicroarraySamplesEditState" basedOn="SamplesEditState" >
		</mx:State>
		<mx:State name="MicroarraySamplesAdminState" basedOn="SamplesAdminState" >
			<mx:RemoveChild target="{addSampleButton}"/>
			<mx:RemoveChild target="{clearSamplesButton}"/>
		</mx:State>
		<mx:State name="MicroarrayOneColorSamplesState" basedOn="MicroarraySamplesState">
			<mx:SetProperty target="{textarea1}" name="htmlText">
				<mx:value><![CDATA[Instructions<br>  1.  Mandatory: Fill in the following highlighted fields:  sample name and concentration.<br>  2.  Optional: Any annotation characteristic that you selected from the previous screen appears on this screen <br>       as a highlighted column. Please type desired information under the highlighted field with the annotation header.<br>  3.  Optional: Provide a short description of your sample in the non-highlighted description field.<br>  4.  After completing all line items, click the 'Next' button at the bottom of the page to proceed.]]></mx:value>
			</mx:SetProperty>
		</mx:State>


		
	</mx:states>
	
</mx:Canvas>
