<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
    xmlns:views="*.views" 
	xmlns:util="views.util.*"
    xmlns:fx="*.views.renderers" show="{this.initializeBarcoding();}"
	label="Samples" width="100%" height="100%"  enabled="false" xmlns:controls="hci.flex.controls.*" xmlns:renderers="views.renderers.*">
  
<mx:Script>
	<![CDATA[
		import hci.flex.controls.DropdownLabel;
		import hci.flex.controls.Label;
		
		import mx.collections.Grouping;
		import mx.collections.GroupingCollection;
		import mx.collections.GroupingField;
		import mx.collections.IHierarchicalCollectionView;
		import mx.collections.SortField;
		import mx.collections.XMLListCollection;
		import mx.controls.Alert;
		import mx.controls.TextInput;
		import mx.events.CloseEvent;
		import mx.events.DragEvent;
		import mx.events.ValidationResultEvent;
		import mx.managers.DragManager;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		import mx.utils.ObjectUtil;
		import mx.utils.StringUtil;
		import mx.validators.NumberValidator;
		import mx.validators.ValidationResult;
		
		import views.renderers.ComboBox;
		import views.renderers.ComboBoxWorkflowStatus;
		import views.renderers.GridColumnFillButton;
		import views.renderers.LabelBarcodeSequence;
		import views.renderers.TextInputSeqPrepByCore;
		import views.util.AdvancedDataGridColumnWithType;
		import views.util.AnnotationAdvancedDataGridColumn;
		import views.util.CopySampleSheetColumnView;
		import views.util.UploadSampleSheetView;


		public  var DEFAULT_CONTROL_NAME:String	  = "Control";
		            
		public var sampleGroupingCollection:GroupingCollection = null;
		
		[Bindable]
		private var isExternal:Boolean = false;
		[Bindable]
		public var isEditState:Boolean = false;

		private var uploadFR:FileReference;
		private var uploadSampleSheetURL:String;
		private var docTypes:FileFilter;
		private var hasColumnNames:Boolean; 
		private var	sampleSheetXML:XML;
		
		private var downloadRequest:URLRequest; 
		private var downloadFileRef:FileReference; 

		public  var multiplexGroupNumberImported:Boolean = false;
		
		public function uploadSampleSheet():void {
			var uploadSampleSheetWindow:UploadSampleSheetView = UploadSampleSheetView(PopUpManager.createPopUp(parentApplication.theBody, UploadSampleSheetView, true));
			PopUpManager.centerPopUp(uploadSampleSheetWindow);
			var fieldList:Dictionary = null;
			var numPlates:int = 0;
			var nextPlate:int = 0;
			if (hasPlates()) {
				if ( parentDocument.isIScanState() || parentDocument.isSequenomState() ) {
					numPlates = parentDocument.numIScanPlates;
				} else {
					numPlates = parentDocument.numCapSeqPlates; 
					fieldList = new Dictionary();
					fieldList[this.sampleNameCol.dataField] = this.sampleNameCol;
					fieldList[this.descriptionColumn.dataField] = this.descriptionColumn;
				}
				for each (var sample:Object in parentDocument.samples) {
					var thisPlate:int = 0;
					if (sample.@name != '') {
						if (sample.@plateName == "Plate 1") thisPlate = 1;
						if (sample.@plateName == "Plate 2") thisPlate = 2;
						if (sample.@plateName == "Plate 3") thisPlate = 3;
						if (sample.@plateName == "Plate 4") thisPlate = 4;
					}
					if (thisPlate > nextPlate) {
						nextPlate = thisPlate;
					}
				}
				if (nextPlate < 4) {
					nextPlate = nextPlate + 1;
				} else {
					nextPlate = 0;
				}
			}
			if (parentDocument.isFragAnalState()) {
				fieldList = new Dictionary();
				fieldList[this.sampleNameCol.dataField] = this.sampleNameCol;
				fieldList[this.descriptionColumn.dataField] = this.descriptionColumn;
				for each (var col:AdvancedDataGridColumn in samplesGrid.columns) {
					if (col.dataField != null && col.dataField.substr(0,9) == "@hasAssay" && col.visible) {
						fieldList[col.dataField] = col;
					}
				}
			}
			uploadSampleSheetWindow.init(this, numPlates, nextPlate, fieldList, parentDocument.showSampleMultiplexGroup());
		}
		
		private function downloadSampleSheetExample(fileName:String):void {
			try {
				downloadRequest = new URLRequest("doc/" + fileName);
				downloadFileRef = new FileReference();
				downloadFileRef.addEventListener(Event.COMPLETE, downloadCompleteHandler);
				downloadFileRef.download(downloadRequest, fileName);
				
			} catch (error:Error) {
				Alert.show("Unable to download example sample sheet due to error. " + error.message);
			}
		}
		
		private function downloadCompleteHandler(event:Event):void
		{
			mx.controls.Alert.show("Example sample sheet downloaded.");
		}

		public function copyColumn():void {
			var copySampleSheetColumnWindow:CopySampleSheetColumnView = CopySampleSheetColumnView(PopUpManager.createPopUp(this, CopySampleSheetColumnView, true));
			PopUpManager.centerPopUp(copySampleSheetColumnWindow);
			copySampleSheetColumnWindow.init(this);
		}
		
		public function addSample():Boolean {
			var emptyNode:XML = null;
			var idOrganism:String = parentDocument.setupView.getIdOrganism();
			var isValid:Boolean = true;
			if (parentDocument.isSolexaState()) {
				if (parentDocument.sampleSetupView.currentState == 'SolexaSetupPreppedState' || 
				    parentDocument.sampleSetupView.currentState == 'SolexaAmendPreppedState') {
					emptyNode = new XML("<Sample " +
				    " idSample='" + "Sample" + getNextSampleId() + "'" +
				    " name='' description='' " +
				    " canChangeSampleName='Y'" +
				    " canChangeSampleType='Y'" +
					" canChangeSampleDropOffLocation='Y'" +
				    " canChangeSampleConcentration='Y'" +
				    " canChangeSampleSource='Y'" +
   					" canChangeNumberSequencingLanes='Y'" +  
   					" canChangeNumberSequencingCycles='Y'" +
					" concentration=''" + 
					" label=''" +
					" idNumberSequencingCycles='" + (parentApplication.submitInternalExperiment() ? parentDocument.seqSetup1View.getIdNumberSequencingCyclesSelected() : '') + "'" +				
					" idSeqRunType='" + (parentApplication.submitInternalExperiment() ? parentDocument.seqSetup1View.getIdSeqRunTypeSelected() : '') + "'" +				
					" numberSequencingLanes='1'" +
					" codeConcentrationUnit='ng/ul'" + 
					" idSampleType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value : '') + "'" +
					" seqPrepByCore = 'N'" +
					" idOligoBarcode = ''" +
					" barcodeSequence = ''" +
					" otherSamplePrepMethod=\"" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherSamplePrepMethod.text.replace(/\"/g, "&quot;") : '') + "\"" +				
					" idSeqLibProtocol='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.seqLibProtocolCombo.selectedItem.@value : '') + "'" +				
					" idGenomeBuildAlignTo='" + (parentApplication.submitInternalExperiment() ? parentDocument.seqSetup1View.genomeBuildCombo.selectedItem.@value : '') + "'" +				
					" analysisInstructions=\"" + (parentApplication.submitInternalExperiment() ? parentDocument.notesView.noteToBio.text.replace(/\"/g, "&quot;") : '') + "\"" +				
					" prepInstructions=\"" + (parentApplication.submitInternalExperiment() ? parentDocument.notesView.noteToSeq.text.replace(/\"/g, "&quot;") : '') + "\"" +				
					" idOrganism='"  + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleOrganismCombo.selectedItem.@value : idOrganism) + "'" +				
					" otherOrganism=\"" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherOrganism.text.replace(/\"/g, "&quot;") : '') + "\"" +				
					" treatment=''"   +				
					"/>");
					
				} else {
					emptyNode = new XML("<Sample " +
				    " idSample='" + "Sample" + getNextSampleId() + "'" +
				    " name='' description='' " +
				    " canChangeSampleName='Y'" +
  				    " canChangeSampleType='Y'" +
				    " canChangeSampleConcentration='Y'" +
				    " canChangeSampleSource='Y'" +
   					" canChangeNumberSequencingCycles='Y'" + 
					" canChangeNumberSequencingLanes='Y'" + 
					" concentration=''" +
					" label=''" +
					" idOligoBarcode = ''" +
					" barcodeSequence = ''" +
					" idNumberSequencingCycles='" + (parentApplication.submitInternalExperiment() ? parentDocument.seqSetup1View.getIdNumberSequencingCyclesSelected() : '') + "'" +
					" idSeqRunType='" +	(parentApplication.submitInternalExperiment() ? parentDocument.seqSetup1View.getIdSeqRunTypeSelected() : '') + "'" +				
					" numberSequencingLanes='1'" +
					" codeConcentrationUnit='ng/ul'" + 
					" idSampleType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value : '') + "'" +
					" idGenomeBuildAlignTo='" + (parentApplication.submitInternalExperiment() ? parentDocument.seqSetup1View.genomeBuildCombo.selectedItem.@value : '') + "'" +				
					" analysisInstructions='" + (parentApplication.submitInternalExperiment() ? parentDocument.notesView.noteToBio.text : '') + "'" +				
					" otherSamplePrepMethod=\"" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherSamplePrepMethod.text.replace(/\"/g, "&quot;") : '') + "\"" +				
					" idSeqLibProtocol = ''" +
					" seqPrepByCore = 'Y'" +
					" idOrganism='"  + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleOrganismCombo.selectedItem.@value : idOrganism) + "'" +				
					" otherOrganism=\"" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherOrganism.text.replace(/\"/g, "&quot;") : '') + "\"" +				
					" treatment=''"  +				
					"/>");
					
				}
				 
				
			}
			else if (currentState != null && (currentState.indexOf('QCSamples') >= 0)) {
				emptyNode = new XML("<Sample " +
			    " idSample='" + "Sample" + getNextSampleId() + "'" +
			    " name='' description='' " +
			    " canChangeSampleName='Y'" +
			    " canChangeSampleType='Y'" +
			    " canChangeSampleConcentration='Y'" +
			    " canChangeSampleSource='Y'" +
  				" canChangeNumberSequencingCycles='Y'" +
				" canChangeNumberSequencingLanes='Y'" + 
				" concentration=''" +
			    " idOligoBarcode = ''" +
			    " barcodeSequence = ''" +
				" codeConcentrationUnit='ng/ul'" + 
				" codeBioanalyzerChipType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.getSelectedCodeBioanalyzerChipType() : '') + "'" +
				" idSampleType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value : '')  + "'" +
				" otherSamplePrepMethod=\"" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherSamplePrepMethod.text.replace(/\"/g, "&quot;") : '')  + "\"" +				
				" treatment=''"  +				
				"/>");
			
			} else if (currentState != null && (currentState.indexOf('CapSeq') >= 0)) {
				if (parentDocument.samples.length >= 384) {
					Alert.show("Maximum number of samples reached.  Add Sample ignored.");
					isValid = false;
				} else {
					emptyNode = getEmptyCapSeqNode(parentDocument.samples.length); 
				}				
				
			} else if (currentState != null && (currentState.indexOf('FragAnal') >= 0)) {
				if (parentDocument.samples.length >= 96) {
					Alert.show("Maximum number of samples reached.  Add Sample ignored.");
					isValid = false;
				}
				var fragWellName:String = this.getWellName(parentDocument.samples.length);
				
				var fragXMLString:String = "<Sample " +
					" idSample='" + "Sample" + getNextSampleId() + "'" +
					" name='' description='' " +
					" canChangeSampleName='Y'" +
					" canChangeSampleType='Y'" +
					" canChangeSampleDropOffLocation='Y'" +
					" canChangeSampleConcentration='N'" +
					" canChangeSampleSource='N'" +
					" canChangeNumberSequencingCycles='N'" +
					" canChangeNumberSequencingLanes='N'" + 
					" concentration=''" +
					" idOligoBarcode = ''" +
					" barcodeSequence = ''" +
					" codeConcentrationUnit='ng/ul'" + 
					" codeBioanalyzerChipType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.getSelectedCodeBioanalyzerChipType() : '') + "'" +
					" otherSamplePrepMethod=''" + 				
					" treatment=''" +
					" plateName='Plate 1'" +
					" wellName='" + fragWellName + "'";
				for (var x:int = 0; x < parentDocument.assayCollection.length; x++) {
					var assayObject:Object = parentDocument.assayCollection.getItemAt(x);
					if (parentDocument.isAssaySelected(assayObject)) {
						fragXMLString += " " + parentDocument.getAssayDataField(x).substr(1) + "='Y'";
					}
				}
				fragXMLString += "/>";
				emptyNode = new XML(fragXMLString);
			} else if (currentState != null && (currentState.indexOf('MitSeq') >= 0)) {
				var mitWellName:String = getWellName(parentDocument.samples.length);
				emptyNode = new XML("<Sample " +
					" idSample='" + "Sample" + getNextSampleId() + "'" +
					" name='' description='' " +
					" canChangeSampleName='Y'" +
					" canChangeSampleType='Y'" +
					" canChangeSampleDropOffLocation='Y'" +
					" canChangeSampleConcentration='N'" +
					" canChangeSampleSource='N'" +
					" canChangeNumberSequencingCycles='N'" +
					" canChangeNumberSequencingLanes='N'" + 
					" concentration=''" +
					" idOligoBarcode = ''" +
					" barcodeSequence = ''" +
					" codeConcentrationUnit='ng/ul'" + 
					" codeBioanalyzerChipType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.getSelectedCodeBioanalyzerChipType() : '') + "'" +
					" otherSamplePrepMethod=''" + 				
					" treatment=''" +
					" plateName='Plate 1'" +
					" wellName='" + mitWellName + "'" +
					"/>");
			} else if (currentState != null && (currentState.indexOf('CherryPick') >= 0)) {
				var cherryWellName:String = getCherryWellName(parentDocument.samples.length, Number(parentDocument.sampleSetupView.cherryNumDestinationWellsRadioGroup.selectedValue));
				emptyNode = this.getEmptyCherryPickNode(cherryWellName);
			} else if (currentState != null && (currentState.indexOf('IScan') >= 0)) {
				
				emptyNode = this.getEmptyIScanNode(parentDocument.samples.length);
			
			} else if (currentState != null && ((currentState.indexOf('Sequenom') >= 0) || (currentState.indexOf('ClinicalSeq') >= 0))) {
				
				emptyNode = this.getEmptySequenomNode(parentDocument.samples.length);
				
			} else {
				var xmlString:String = "<Sample " +
					" idSample='" + "Sample" + getNextSampleId() + "'" +
					" name='' description='' " +
					" cy3='false'" +
					" cy5='false'" +			    
					" canChangeSampleName='Y'" +
					" canChangeSampleType='Y'" +
					" canChangeSampleConcentration='Y'" +
					" canChangeSampleSource='Y'" +
					" canChangeNumberSequencingCycles='Y'" +
					" canChangeNumberSequencingLanes='Y'" + 
					" concentration=''" + 
					" idOligoBarcode = ''" +				
					" barcodeSequence = ''" +				
					" codeConcentrationUnit='ng/ul'" + 
					" idSampleType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value : '') + "'" +
					" otherSamplePrepMethod=\"" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherSamplePrepMethod.text.replace(/\"/g, "&quot;") : '') + "\"" +				
					" idOrganism='"  + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleOrganismCombo.selectedItem.@value : idOrganism) + "'" +				
					" otherOrganism='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.otherOrganism.text.replace(/\"/g, "&quot;") : '') + "'" 	+	
					"/>"
				emptyNode = new XML(xmlString);
			}
			
			if (emptyNode != null) {
				parentDocument.samples.addItem(emptyNode);
			}
			
			return isValid;
		}
		
		private function getEmptyCapSeqNode(idx:int):XML {
			var plateName:String = getPlateName(idx);
			var wellName:String = getWellName(idx);
			var sampleId:String = "Sample" + idx;
			var emptyNode:XML = new XML("<Sample " +
				" idSample='" + sampleId + "'" +
				" name='' description='' " +
				" containerType='" + (parentDocument.request.@containerType == 'PLATE' ? 'Plate' : 'Tube') + "'" +
				" canChangeSampleName='Y'" +
				" canChangeSampleType='Y'" +
				" canChangeSampleDropOffLocation='Y'" +
				" canChangeSampleConcentration='N'" +
				" canChangeSampleSource='N'" +
				" canChangeNumberSequencingCycles='N'" +
				" canChangeNumberSequencingLanes='N'" + 
				" concentration=''" +
				" idOligoBarcode = ''" +
				" barcodeSequence = ''" +
				" codeConcentrationUnit='ng/ul'" + 
				" idSampleType='" + (parentApplication.submitInternalExperiment() && parentDocument.sampleSetupView.sampleTypeCombo.selectedItem != null ? parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value : '') + "'" +
				" codeBioanalyzerChipType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.getSelectedCodeBioanalyzerChipType() : '') + "'" +
				" otherSamplePrepMethod=''" + 				
				" treatment=''" +	
				" plateName='" + plateName + "'" +
				" wellName='" + wellName + "'" +
				" isControl=''" +
				"/>");
			return emptyNode;
		}
		
		private function getEmptyIScanNode(idx:int):XML {
			var plateName:String = getIScanPlateName(idx);
			var wellName:String = getWellName(idx);
			var sampleId:String = "Sample" + idx;
			var emptyNode:XML = new XML("<Sample " +
				" idSample='" + sampleId + "'" +
				" name='' description='' " +
				" containerType='Plate'" +
				" canChangeSampleName='Y'" +	
				" plateName='" + plateName + "'" +
				" wellName='" + wellName + "'" +
				"/>");
			return emptyNode;
		}
		
		private function getEmptySequenomNode(idx:int):XML {
			var plateName:String = getSequenomPlateName(idx);
			var wellName:String = getWellName(idx);
			var sampleId:String = "Sample" + idx;
			var emptyNode:XML = new XML("<Sample " +
				" idSample='" + sampleId + "'" +
				" name='' description='' " +
				" concentration=''" +
				" containerType='" + (parentDocument.request.@containerType == 'PLATE' ? 'Plate' : 'Tube') + "'" +
				" canChangeSampleName='Y'" +	
				" plateName='" + (parentDocument.request.@containerType == 'PLATE' ? plateName : '') + "'" +
				" wellName='" + (parentDocument.request.@containerType == 'PLATE' ? wellName : '') + "'" +
				" idSampleType='" + (parentApplication.submitInternalExperiment() ? parentDocument.sampleSetupView.sampleTypeCombo.selectedItem.@value : '')  + "'" +
				"/>");
			return emptyNode;
		}
		
		private function getEmptyCherryPickNode(cherryWellName:String):XML {
			var emptyNode:XML = new XML("<Sample " +
				" idSample='" + "Sample" + getNextSampleId() + "'" +
				" name='' description='' " +
				" canChangeSampleName='Y'" +
				" canChangeSampleType='Y'" +
				" canChangeSampleDropOffLocation='Y'" +
				" canChangeSampleConcentration='N'" +
				" canChangeSampleSource='N'" +
				" canChangeNumberSequencingCycles='N'" +
				" canChangeNumberSequencingLanes='N'" + 
				" concentration=''" +
				" idOligoBarcode = ''" +
				" barcodeSequence = ''" +
				" codeConcentrationUnit='ng/ul'" + 
				" codeBioanalyzerChipType=''" +
				" otherSamplePrepMethod=''" + 				
				" treatment=''" +
				" sourcePlate=''" +
				" sourceWell=''" +
				" destinationWell='" + cherryWellName + "'" +
				"/>");
			return emptyNode;
		}
		
		private function getPlateName(idx:int):String {
			var plateName:String = "";
			if (parentDocument.request.@containerType == 'PLATE') {
				var y:int = idx / 96;
				y = y + 1;
				plateName = "Plate " + String(y);
			}
			return plateName;
		}
		
		public function getIScanPlateName(idx:int):String {
			var plateName:String = "";
			
			var y:int = idx / 96;
			y = y + 1;
			plateName = parentDocument.sampleSetupView.getIScanPlateName(y);
			
			return plateName;
		}
		
		public function getSequenomPlateName(idx:int):String {
			var plateName:String = "";
			
			var y:int = idx / 96;
			y = y + 1;
			plateName = parentDocument.sampleSetupView.getSequenomPlateName(y);
			
			return plateName;
		}
		
		private function getWellName(idx:int):String {
			var wellName:String = "";
			if (parentDocument.isFragAnalState()) {
				wellName = "ABCDEFGH".substr(idx / 12, 1);
				var fragColNumber:int = idx % 12 + 1;
				wellName += fragColNumber.toString();
			} else {
				var y:int = idx % 96;
				wellName = parentApplication.wellNamesByColumn[y];
			}
			return wellName;
		}
		
		private function getCherryWellName(idx:int, numDestinationWells:int):String {
			var cherryWellName:String;
			var cherryColNumber:int;
			if (numDestinationWells == 384) {
				cherryWellName = "ABCDEFGHIJKLMNOP".substr(idx / 24, 1);
				cherryColNumber = idx % 24 + 1;
			} else {
				cherryWellName = "ABCDEFGHIJKLMNOP".substr(idx / 12, 1);
				cherryColNumber = idx % 12 + 1;
			}
			cherryWellName += cherryColNumber.toString();
			
			return cherryWellName;
		}
		
		private function getNextSampleId():Number {
			var lastId:Number = -1;
			
			for each(var sample:Object in parentDocument.samples) {
				if (sample.@idSample.toString().indexOf("Sample") == 0) {
					var id:Number = sample.@idSample.toString().substr(6);
					if (id > lastId) {
						lastId = id;
					}
				}
			}
			
			lastId++;
			return lastId; 
		}
 
        
		
		private function deleteSample():void {
			var isExternal:Boolean = (parentDocument.isEditState() && parentDocument.request.@isExternal == 'Y') || (!parentDocument.isEditState() && !parentApplication.isInternalExperimentSubmission);
			parentDocument.dirty.setDirty();
			var deleteHappened:Boolean = false;
			if (samplesGrid.selectedItems.length > 0) {
				for each(var sample:Object in samplesGrid.selectedItems) {
					var isValid:Boolean = true;
					// Only administrators can delete samples
					if (sample.@idSample.indexOf("Sample") < 0 && parentDocument.request.@canDeleteSample != 'Y') {
						Alert.show("Existing sample " + sample.@number + " cannot be deleted from the experiment.");
						isValid = false;
						continue;
					}
					
					if (isValid) {
					
						if (currentState != null && (currentState.indexOf('CapSeqState') >= 0)) {
							if (parentDocument.samples.length <= 32 && parentDocument.request.@containerType == 'PLATE') {
								Alert.show("You may not have less than 32 samples in a Plate container.  Delete ignored.");
								isValid = false;
							}
						}
					}
					
					if (isValid) {
						for each(var hyb:Object in parentDocument.hybs) {
							if (hyb.@idSampleChannel1 == sample.@idSample) {
								if (sample.@idSample.indexOf("Sample") >= 0) {
									hyb.@idSampleChannel1 = '0';								
								} else {
									Alert.show("Please remove hyb(s) for sample " + sample.@name + " before attempting to delete sample.");
									isValid = false;
									break;
								}
							}
							if (hyb.@idSampleChannel2 == sample.@idSample) {
								if (sample.@idSample.indexOf("Sample") >= 0) {
									hyb.@idSampleChannel2 = '0';
								} else {
									Alert.show("Please remove hyb(s) for sample " + sample.@name + " before attempting to delete sample.");
									isValid = false;
									break;
								}
							}
						}
						for each(var lane:Object in parentDocument.getLanes(sample, -1)) {
							if (sample.@idSample.indexOf("Sample") >= 0 || isExternal) {
								parentDocument.lanes.removeItemAt(parentDocument.lanes.getItemIndex(lane));
							} else {
								Alert.show("Please remove sequence lanes for sample " + sample.@name + " before attempting to delete sample.");
								isValid = false;
								break;
							}
						}
					}
					
					if (isValid) {
						var ind:int = parentDocument.samples.getItemIndex(sample);
						if ( parentDocument.isIScanState() ){
							parentDocument.samples.setItemAt(getEmptyIScanNode(ind),ind);
							
						} else if ( parentDocument.isSequenomState() ){
							parentDocument.samples.setItemAt(getEmptySequenomNode(ind),ind);
							
						} else {
							parentDocument.samples.removeItemAt(parentDocument.samples.getItemIndex(sample));
						}
						deleteHappened = true;
					} else {
						break;
					}
					
				}
			}
			
			if (deleteHappened && hasPlates() && !parentDocument.isIScanState() && !parentDocument.isSequenomState()) {
				for (var psIdx:int = 0; psIdx < parentDocument.samples.length; psIdx++) {
					var plateSample:Object = parentDocument.samples.getItemAt(psIdx);
					plateSample.@plateName = parentDocument.isCapSeqState() ? getPlateName(psIdx) : getIScanPlateName(psIdx);
				}
			}
			
			// reset wells on samples when one deleted in mit seq or frag anal
			if (deleteHappened && (parentDocument.isMitSeqState() || parentDocument.isFragAnalState())) {
				for (var msIdx:int = 0; msIdx < parentDocument.samples.length; msIdx++) {
					var mitSample:Object = parentDocument.samples.getItemAt(msIdx);
					var mitWellName:String = getWellName(msIdx);
					mitSample.@wellName = mitWellName;
				}
			}
			
			if (parentDocument.isMicroarrayState()) {
				parentDocument.hybsView.hybsGrid.invalidateList();
				parentDocument.hybsView.hybsGrid.invalidateDisplayList();
			}

            this.initializeBarcoding();


		}
		
		private function copyTheSample():void {
			var idx:int = samplesGrid.selectedIndex;
			copySample();
			this.initializeBarcoding();
			checkSamplesCompleteness();
			this.samplesGrid.selectedIndex = idx;
			
		}
		
		private function copySample():void {
			parentDocument.dirty.setDirty();
			if (samplesGrid.selectedIndex != -1) {
				for each(var sampleToCopy:Object in samplesGrid.selectedItems) {	
					
					var emptyNodeString:String = "<Sample " +
					" idSample='" + "Sample" + getNextSampleId() + "'" +
 	  		        " name='" + sampleToCopy.@name + "'" + 
					" canChangeSampleName='Y'" +
			    	" canChangeSampleType='Y'" +
					" canChangeSampleDropOffLocation='Y'" +
			   	 	" canChangeSampleConcentration='Y'" +
			    	" canChangeSampleSource='Y'" +
					" canChangeNumberSequencingLanes='Y'" + 
					" description='" + sampleToCopy.@description + "'" + 
					" idSampleType='" + sampleToCopy.@idSampleType + "'" +
					" otherSamplePrepMethod=\"" + sampleToCopy.@otherSamplePrepMethod + "\"" +				
					" idSeqLibProtocol='" + sampleToCopy.@idSeqLibProtocol + "'" +				
					" idOrganism='" + sampleToCopy.@idOrganism + "'" +				
					" concentration='" + sampleToCopy.@concentration + "'" +				
					" treatment='" + sampleToCopy.@treatment + "'" +		
					" idOligoBarcode='" + sampleToCopy.@idOligoBarcode + "'" +		
					" barcodeSequence='" + sampleToCopy.@barcodeSequence + "'" +		
					" seqPrepByCore='" + sampleToCopy.@seqPrepByCore + "'" +		
					" codeConcentrationUnit='" + sampleToCopy.@codeConcentrationUnit + "'" +				
					" codeBioanalyzerChipType='" + sampleToCopy.@codeBioanalyzerChipType + "'" +				
					" idGenomeBuildAlignTo='" + sampleToCopy.@idGenomeBuildAlignTo+ "'" +				
					" idNumberSequencingCycles='" + sampleToCopy.@idNumberSequencingCycles+ "'" +				
					" idSeqRunType='" + sampleToCopy.@idSeqRunType + "'" +				
					" numberSequencingLanes='" + sampleToCopy.@numberSequencingLanes + "'" +
					" ccNumber='" + sampleToCopy.@ccNumber + "'";
					if (parentDocument.isIScanState()) {
						emptyNodeString = emptyNodeString +
							" plateName='" + getIScanPlateName(parentDocument.samples.length) + "'" +
							" wellName=''";
					} else if (parentDocument.isSequenomState()) {
						emptyNodeString = emptyNodeString +
							" plateName='" + getSequenomPlateName(parentDocument.samples.length) + "'" +
							" wellName=''";
					} else if (hasPlates()) {
						emptyNodeString = emptyNodeString +
						" plateName='" + getPlateName(parentDocument.samples.length) + "'" +
						" wellName=''";
					}
					
					
					emptyNodeString = emptyNodeString + "/>";
					var emptyNode:XML = new XML(emptyNodeString); 
					
					// Now copy the sample annotations
					for each (var attribute:Object in sampleToCopy.attributes()) {
						if (attribute.name().toString().indexOf("ANNOT") == 0) {
							emptyNode["@" + attribute.name()] = sampleToCopy["@" + attribute.name()];
						}
					}
			
					parentDocument.samples.addItem(emptyNode);
					

				}
			}


		}
		
		private function deleteTheSample():void {
			var idx:int = samplesGrid.selectedIndex;
			deleteSample();
			checkSamplesCompleteness();
			parentDocument.hybsView.checkHybsCompleteness();
			samplesGrid.selectedIndex = idx;
		}
		
       	public function initializeSamplesGrid():void {
        	if (parentDocument.requestToClone != null) {
        		return;
        	}
       		
			var numberOfSamples:Number = 0;
			var numberOfSamplesToAdd:Number = 0;
			if (parentApplication.submitInternalExperiment()) {
				if (!parentDocument.isIScanState() && !parentDocument.sampleSetupView.checkSampleSetupCompleteness()) {
					return;
				}
				if (parentDocument.isCherryPickState()) {
					numberOfSamples = new Number(parentDocument.sampleSetupView.cherryNumDestinationWellsRadioGroup.selectedValue);
				} else if ( parentDocument.isIScanState()  || (parentDocument.isSequenomState() && parentDocument.request.@containerType == 'PLATE')){ 
					numberOfSamples = parentDocument.numIScanPlates*96;
					populateSampleList();
					
					return;
				} else if (hasPlates()) {
					numberOfSamples = parentDocument.numCapSeqPlates * 96;
				} else {
					if (parentDocument.isAmendState()) {
						numberOfSamples = new Number(parentDocument.samples.length);
					} else {
						numberOfSamples = new Number(parentDocument.sampleSetupView.numberOfSamples.text);
					}
				}
			} else {
				numberOfSamples = 1;
			}
			if (parentDocument.samples.length <= numberOfSamples) {
				numberOfSamplesToAdd = numberOfSamples - parentDocument.samples.length;
				for(var x:int = 0; x < numberOfSamplesToAdd; x++) {
					addSample();
				}
			} else {
				while (parentDocument.samples.length > numberOfSamples) {
					parentDocument.samples.removeItemAt(parentDocument.samples.length - 1);
				}
			}
		}
		
		public function hasPlates():Boolean {
			return (parentDocument.isCapSeqState() && parentDocument.request.@containerType == 'PLATE') || parentDocument.isIScanState() ||
				   (parentDocument.isSequenomState() && parentDocument.request.@containerType == 'PLATE') ;
		}
		
		public function fillPlates():void {
			if (hasPlates()) {
				var startOfPlate:int = 0;
				if ( parentDocument.isCapSeqState() ){
					for(var idx:int = 0; idx < parentDocument.numCapSeqPlates; idx++) {
						var curPlateName:String = getPlateName(startOfPlate);
						for (var sampleIdx:int = startOfPlate; sampleIdx < startOfPlate + 96; sampleIdx++) {
							if (sampleIdx >= parentDocument.samples.length) {
								addSample();
							} else {
								var curSample:Object = parentDocument.samples.getItemAt(sampleIdx);
								if (curSample.@plateName != curPlateName) {
									var newSample:Object = this.getEmptyCapSeqNode(sampleIdx);
									parentDocument.samples.addItemAt(newSample, sampleIdx);
								}
							}
						}
						startOfPlate += 96;
					}
				} else if ( parentDocument.isIScanState() || parentDocument.isSequenomState() ) {
					populateSampleList();
				}
			}
		}
		
		public function createEmptySampleList():void {
			parentDocument.samples.removeAll();
			for (var sampleIdx:int = 0; sampleIdx < parentDocument.numIScanPlates*96; sampleIdx++) {
				var emptySample:Object = parentDocument.isIScanState() ? this.getEmptyIScanNode(sampleIdx):this.getEmptySequenomNode(sampleIdx);
				parentDocument.samples.addItem(emptySample);
			}   
		}
		
		public function populateSampleList():void {
			var numberOfSamples:int = parentDocument.numIScanPlates*96;
			
			for (var sampleIdx:int = 0; sampleIdx < numberOfSamples; sampleIdx++) {
				
				var emptySample:Object = parentDocument.isIScanState() ? this.getEmptyIScanNode(sampleIdx):this.getEmptySequenomNode(sampleIdx);
				var existingSamples:XMLList = parentDocument.samples.source.(@plateName==emptySample.@plateName && @wellName==emptySample.@wellName);
				
				if ( existingSamples== null || existingSamples.length() == 0 ) {
					// If no sample in that plate and well, add empty one
					parentDocument.samples.addItemAt(emptySample, sampleIdx);
				} else if ( existingSamples.length > 1 ) {
					// If somehow we have more than one sample in the same well, we remove the extras
					for ( var ind:int = 1; ind < existingSamples.length; ind ++ ) {
						parentDocument.samples.removeItemAt(parentDocument.samples.getItemIndex(existingSamples[ind]));
					}
				}
			} 
			
			// Remove extra samples
			while (parentDocument.samples.length > numberOfSamples) {
				parentDocument.samples.removeItemAt(parentDocument.samples.length - 1);
			}
		}
		
        
		private function countSamples():void{
			samplesGrid.editable = 'true';
			if ( parentDocument.isIScanState()){
				var count:int = parentDocument.samples.source.(@name!=null&&@name!='').length();
				if (count >= new Number(parentDocument.sampleSetupView.numberOfSamples.text)) {
					var sample:Object = samplesGrid.selectedItem;
					if ( samplesGrid.selectedItem.@name == null || samplesGrid.selectedItem.@name == '' ) {
						samplesGrid.editable = 'false';
					}
				} 
			} 
		}
		
		public function prepareCherryPickingSamplesForEdit(numDestinationWells:int):void {
			parentDocument.request.replace("samples", <samples></samples>); 
			for(var idx:int = 0; idx < numDestinationWells; idx++) {
				var destinationWellName:String = getCherryWellName(idx, numDestinationWells);
				var found:Boolean = false;
				for each(var sample:Object in parentDocument.samples) {
					if (sample.@destinationWell == destinationWellName) {
						found = true;
						parentDocument.request.samples.appendChild(sample);
						break;
					}
				}
				if (!found) {
					var emptyNode:XML = this.getEmptyCherryPickNode(destinationWellName);
					parentDocument.request.samples.appendChild(emptyNode);
				}
			}
			parentDocument.samples.source = parentDocument.request.samples.Sample;
		}
		
		public function promptToClearAllSamples():void {
			Alert.show("Remove all samples currently showing in list?",
						null, 
						(Alert.YES | Alert.NO), this, 
						onPromptToClearAllSamples);
			
		}
		
		private function onPromptToClearAllSamples(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
				if ( parentDocument.isIScanState() ){
					for each ( var s:XML in parentDocument.samples.source.(@name!='') ) {
						var sampleIdx:int = parentDocument.samples.getItemIndex(s);
						var emptySample:Object = this.getEmptyIScanNode(sampleIdx);
						parentDocument.samples.setItemAt(emptySample, sampleIdx);
					}
				} else {
					parentDocument.samples.removeAll();
					parentDocument.lanes.removeAll();
					setMultiplexGroupNumberImported(false);
					if (hasPlates()) {
						fillPlates(); // Set up the plates as defined in sample setup
					} else {
						addSample(); 	// Add an initial blank sample to the grid
					}
				}
            	checkSamplesCompleteness();
            	this.initializeBarcoding();
            }
        }		
        
		public function setMultiplexGroupNumberImported(val:Boolean):void {
			this.multiplexGroupNumberImported = val;
			this.addSampleButton.enabled = !val;
			this.copySampleButton.enabled = !val;
		}
		
        public function checkSamplesCompleteness():void {
          	parentDocument.userWarningsSamples = "";
          	
          	
          	var numberOfAdditionalLanes:int = 0;
          	if (parentDocument.currentState == 'SolexaLaneAmendState' || parentDocument.sampleSetupView.currentState == "SolexaAmendState") {
	          	for each(var s2:Object in parentDocument.samples) {
	          		if (isEntered(s2, "@numberSequencingLanes")) {
	          			numberOfAdditionalLanes += s2.@numberSequencingLanes;
	          		}
	          	}
	        }
        	var completeCount:int = 0;
			var nameCompleteCount:int = 0;
        	for each(var sample:Object in parentDocument.samples) {
        		if (currentState != null && currentState.indexOf('SolexaSamples') >= 0) {
        			
        			if (parentDocument.currentState == 'SolexaLaneAmendState') {
	        			if (isEntered(sample, "@name") &&
			        		isEntered(sample, "@concentration") &&
			        		isEntered(sample, "@idSampleType") &&
	        			    isEntered(sample, "@idOrganism") &&
	        			    isEntered(sample, "@idSeqRunType") &&
	        			    isEntered(sample, "@idNumberSequencingCycles") &&
							reqdAnnotationsEntered(sample)&& 
							numberOfAdditionalLanes > 0) {
			        		
		        			completeCount++;
		        		}
		        	} else if (parentApplication.submitInternalExperiment() && 
						 !parentDocument.isEditState() &&
		        		 parentDocument.sampleSetupView.currentState == "SolexaSetupState" || 
		        		 parentDocument.sampleSetupView.currentState == "SolexaAmendState") {
	        			if (isEntered(sample, "@name") &&
			        		isEntered(sample, "@concentration") &&
			        		isEntered(sample, "@idSampleType") &&
							isEntered(sample, "@idOrganism") &&
	        			    isEntered(sample, "@idSeqRunType") &&
	        			    isEntered(sample, "@idNumberSequencingCycles") &&
							reqdAnnotationsEntered(sample) &&  
	        			    (isEntered(sample, "@numberSequencingLanes") || numberOfAdditionalLanes > 0)) {
	        			    	
	        			   
			        		completeCount++;
	        			   
			        		
		        		}
		        		
		        			   	
		        	} else if (!parentApplication.submitInternalExperiment() && parentDocument.isSolexaState()) {
						if (isEntered(sample, "@name") &&
							isEntered(sample, "@idSampleType") &&
							reqdAnnotationsEntered(sample) &&  
							isEntered(sample, "@idOrganism")) {
							
							completeCount++;
						}
					} else {
	        			if (isEntered(sample, "@name") &&
			        		isEntered(sample, "@idSampleType") &&	        		
			        		isEntered(sample, "@idSeqLibProtocol") &&	        		
			        		isEntered(sample, "@concentration") &&
							isEntered(sample, "@idOrganism") &&
			        		isEntered(sample, "@idSeqRunType") &&
							reqdAnnotationsEntered(sample) &&  
			        		isEntered(sample, "@idNumberSequencingCycles")) {
			        			
			        			
			        		if (!parentDocument.isEditState()) {
		        				if (sample.@numberSequencingLanes != '') {
		        					 if (parentDocument.showSampleCustomBarcodes()) {
	        			    			if (isEntered( sample, "@barcodeSequence")) {
											completeCount++;      			    		
	        			    			}
	        			    		 } else if (parentDocument.showSampleBarcodes()) {
										 if (isEntered( sample, "@idOligoBarcode")) {
											 completeCount++;      			    		
										 }
									 } else {
		        						completeCount++;
	        			    		 }
		        				}		
		        			} else {
		        				completeCount++;
		        			}
		        			
		       			
		        		 }
		        		 
		        	}
			   	
		        } else if (currentState != null && currentState.indexOf('QCSamples') >= 0){
					if (!parentApplication.submitInternalExperiment()) {
						if (isEntered(sample, "@name") &&
							reqdAnnotationsEntered(sample) &&
							isEntered(sample, "@idSampleType")) {
							completeCount++;
						}
					} else {
						if (isEntered(sample, "@name") &&
							isEntered(sample, "@idSampleType") &&		        		
							isEntered(sample, "@concentration") &&
							reqdAnnotationsEntered(sample) &&							
							isEntered(sample, "@codeConcentrationUnit") ) {
							
							if (!parentDocument.isEditState() &&
								parentDocument.sampleSetupView.currentState == 'QCSetupBioanalyzerState') {
								if (isEntered(sample, "@codeBioanalyzerChipType")) {
									completeCount++;       				
								} 
							} else {
								completeCount++;
							}
						}
					} 
	        		 
        		} else if (currentState == 'CapSeqState') {
					if (isEntered(sample, "@name")) {
						nameCompleteCount++;
					}
					completeCount++;
				} else if (currentState == 'FragAnalState') {
					if (isEntered(sample, "@name")) {
						for each(var col:AdvancedDataGridColumn in samplesGrid.columns) {
							if (col.dataField != null && col.dataField.substr(0,9) == "@hasAssay" && col.visible) {
								if (isEntered(sample, col.dataField) && sample[col.dataField] == 'Y') {
									completeCount++;
									break;
								}
							}
						}
					}
				} else if (currentState == 'MitSeqState') {
					if (isEntered(sample, "@name")) {
						
						completeCount++;
					}
				} else if (currentState == 'CherryPickState') {
					if (isEntered(sample, "@name") || isEntered(sample, "@sourcePlate") || isEntered(sample, "@sourceWell")) {
						var cherryNumPlates:int = Number(parentDocument.sampleSetupView.cherryNumSourcePlates.text);
						if (cherryNumPlates == 1) {
							sample.@sourcePlate = parentDocument.sampleSetupView.cherryPlate1Name.text;
						}
						if (isEntered(sample, "@name") && isEntered(sample, "@sourcePlate") && isEntered(sample, "@sourceWell") && isEntered(sample, "@destinationWell")) {
							completeCount++;
							nameCompleteCount++;
						}
					} else {
						completeCount++;
					}
				} else if (currentState == 'IScanState') {
					if (isEntered(sample, "@name")) {
						nameCompleteCount++;
					}
					completeCount++;
					
				} else if (currentState == 'SequenomState' || currentState == 'ClinicalSequenomState' ) {
					if (isEntered(sample, "@name")) {
						nameCompleteCount++;
					}
					completeCount++;
					
				} else {
					if (isEntered(sample, "@name") &&
			        	isEntered(sample, "@idSampleType") &&		        		
			        	(isEntered(sample, "@concentration") || !parentApplication.submitInternalExperiment()) &&  // only require concentration on internal requests
						reqdAnnotationsEntered(sample) &&
						isEntered(sample, "@idOrganism")) {
			        	
			        	if (parentDocument.getRequestCategory().@numberOfChannels == "2") {
			        		if (isEntered(sample, "@label")) {
			        			completeCount++;
			        		}
			        	} else {
		        			completeCount++;       						        		
			        	}	
	        		}
	        		
        			
        		}
        	}
        	
        	
        	var isComplete:Boolean = false;
        	if (parentDocument.samples.length > 0 && completeCount == parentDocument.samples.length) {
				if (currentState == 'CapSeqState' || currentState == 'IScanState' || currentState == 'SequenomState') {
					if (nameCompleteCount >= new Number(parentDocument.sampleSetupView.numberOfSamples.text)) {
						isComplete = true;
					} else {
						isComplete = false;
					}
				} else if (currentState == 'CherryPickState') {
					if (nameCompleteCount > 1) {
						isComplete = true;
					} else {
						isComplete = false;
					}
				} else {
        			isComplete = true;
				}
        	} else if (parentDocument.isEditState()) {
        		isComplete = true;
        	}
        	
        	// Make sure that sample concentration is valid
    		for each (var s1:Object in parentDocument.samples) {
    			var vr:ValidationResultEvent = parentDocument.concentrationValidator.validate(s1.@concentration);
	    		if (vr.type == ValidationResultEvent.INVALID) {
	    			parentDocument.userWarningsSamples += "Invalid sample concentration '" + s1.@concentration + "'.  "; 
	    			isComplete = false;
	    		}
    		}
			
			// Make sure sample names are ok
			if (parentDocument.isSequencingState()) {
				var pattern:RegExp = /^[a-zA-Z0-9-_]*$/;
				for each (var sNameCheck:Object in parentDocument.samples) {
					if (!pattern.test(sNameCheck.@name)) {
						parentDocument.userWarningsSamples += "Name may only contain alphanumeric, dash and underscore. '" + sNameCheck.@name + "'.  ";
						isComplete = false;
						break;
					}
				}
			}
			
			// Make sure the sample index tags are unique
			if (isComplete) {
				if (!areIndexTagsUnique()) {
					parentDocument.userWarningsSamples += "WARNING: Duplicate index tags have been specified.  This should only occur when samples (and their reads) are meant to be pooled."; 
				}
			}
    		
    		// Sort the samples
    		if (isComplete && parentDocument.isMicroarrayState()) {
        		parentDocument.hybsView.sortLabeledSamples();
    		}
    	
        	
        	
        	// If this is a Solexa request and the sample setup is complete,
        	// create the sequencing lanes based on the number of lanes 
        	// entered for each sample.
        	if (isComplete && currentState != null && currentState =='SolexaSamplesState') {
        		var isValidNumberSeqLanes:Boolean = true;
        		for each (var s:Object in parentDocument.samples) {
    				if (s.@numberSequencingLanes > 100) {
    					callLater(showMaxLaneError, [s.@numberSequencingLanes]);
    					parentDocument.userWarningsSamples += "Number of lanes to sequence '" + s.@numberSeqLanes + "' exceed max.  ";
    					isValidNumberSeqLanes = false;
    					break;
    				}
        		}
        		if (isValidNumberSeqLanes) {
        			var lanesAdded:Boolean = false;
	        		for each (var theSample:Object in parentDocument.samples) {
	        			var numberLanesForSample:int = parentDocument.getLaneCount(theSample);
	        			if (numberLanesForSample < theSample.@numberSequencingLanes) {
		        			var numberLanesToAdd:int = theSample.@numberSequencingLanes - numberLanesForSample;
		        			for (var x:Number = 0; x < numberLanesToAdd; x++) {
		        				addSequencingLaneForSample(theSample);
		        				lanesAdded = true;
		        			}
	        			} else if (numberLanesForSample > theSample.@numberSequencingLanes) {
	        				var numberLanesToRemove:int = numberLanesForSample - theSample.@numberSequencingLanes;
							for each(var lane:Object in parentDocument.getLanes(theSample, numberLanesToRemove)) {
								parentDocument.lanes.removeItemAt(parentDocument.lanes.getItemIndex(lane));
							}
	        			}
	        				
	        		}
	        		
	        		if (lanesAdded) {
	        			parentDocument.lanes.refresh();
	        		}
        		}
        	}

        	
        	
			if (parentDocument.isMicroarrayState()) {
				if (parentApplication.submitInternalExperiment()) {
					parentDocument.hybSetupView.enabled = isComplete;					
				} else {
					parentDocument.hybsView.enabled = isComplete;
					if (isComplete) {
						parentDocument.hybsView.initializeHybsGrid();
					}
				}
    		} else if (parentDocument.isSolexaEditState()) {
    			parentDocument.lanesView.enabled = isComplete;
    		} else if (parentDocument.isCapSeqState()) {
				parentDocument.confirmView.enabled = isComplete;
			} else if (parentDocument.isFragAnalState()) {
				parentDocument.confirmView.enabled = isComplete;
			} else if (parentDocument.isMitSeqState()) {
				parentDocument.confirmView.enabled = isComplete;
			} else if (parentDocument.isSequenomState()) {
				parentDocument.confirmView.enabled = isComplete;
			} else if (!parentDocument.isEditState()) {
    			if (parentDocument.theTab.contains(parentDocument.visibilityView)) {
    				parentDocument.visibilityView.enabled = isComplete;
    			} else if (parentDocument.theTab.contains(parentDocument.confirmView)) {
					parentDocument.confirmView.enabled = isComplete;
				}
    		}        	
    		parentDocument.enableNextButtons();
			
			parentDocument.hybsView.checkHybsCompleteness();
    		

			callLater(postSamplesCompleteness, [isComplete]);
        	
        
        }
		
		private function isEntered(sample:Object, fieldName:String):Boolean {
			if (!sample.hasOwnProperty(fieldName) || sample[fieldName] == '') {
				return false;
			} else {
				return true;
			}
		}

        private function reqdAnnotationsEntered(sample:Object):Boolean {
			for each(var col:AdvancedDataGridColumn in this.samplesGrid.columns) {
				if (col is views.util.AnnotationAdvancedDataGridColumn && col.visible) {
					if (!sample.hasOwnProperty(col.dataField) || sample[col.dataField] == '') {
						var idProperty:String = col.dataField.substr(6);
						var property:XML = parentApplication.getSampleProperty(idProperty);
						if(property.@isRequired == "Y") {
							return false;	
						}
					}					
				}
			}
			return true;
        }
        
        private function showMaxLaneError(numberSeqLanes:String):void {
			Alert.show("Number of lanes to sequence " + numberSeqLanes + " exceeds max.");
        }
        
                
        private function postSamplesCompleteness(isComplete:Boolean):void {
	    		
	    	if (!isComplete) {
	        	if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
		        	parentDocument.hybSetupView.enabled = false;
	        	} 
	
	        	if (parentDocument.theTab.contains(parentDocument.hybsView)) {
		        	parentDocument.hybsView.enabled = false;
	        	} 
	        	
	        	if (parentDocument.isSolexaEditState()) {
	    			parentDocument.lanesView.enabled = false;
	        	}
				if (parentDocument.theTab.contains(parentDocument.visibilityView)) {
					parentDocument.visibilityView.enabled = false;					
				}
				if (parentDocument.theTab.contains(parentDocument.confirmView)) {
					parentDocument.confirmView.enabled = false;					
				}
    		} else {
    			if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
	    			parentDocument.hybSetupView.checkHybSetupCompleteness();
	    			this.refreshHybsGrid();    				
    			} 
    			if (parentDocument.isSolexaState() && !parentDocument.isEditState() && !parentDocument.isAmendState()) {
    				this.refreshLanesGrid();
    			}
    		}
        	
        }
		
		private function addSequencingLaneForSample(sample:Object):void {
			var lanePlus:int = parentDocument.lanes.length + 100000;
			if (this.multiplexGroupNumberImported) {
				lanePlus = parseInt(sample.@multiplexGroupNumber) + 100000;
			}
			var laneStr:String = lanePlus.toString().substr(1);
			var emptyNode:XML = new XML("<SequenceLane " +
			    " idSequenceLane='" + "SequenceLane" + laneStr + "'" +
			    " notes='' " + 
				" idSeqRunType='" + sample.@idSeqRunType + "'" +
				" idNumberSequencingCycles='" + sample.@idNumberSequencingCycles + "'" +
				" idSample='" + sample.@idSample + "'" +
				" idGenomeBuildAlignTo='" + sample.@idGenomeBuildAlignTo + "'" +
				" analysisInstructions='" + sample.@analysisInstructions + "'" +
				"/>");
			
			parentDocument.lanes.addItem(emptyNode);
		}
		
		public function propagateContainerType(containerType:String):void {
			var idx:int = 0;
			parentDocument.samples.disableAutoUpdate();
			for each (var sample:Object in parentDocument.samples) {
				sample.@containerType = containerType;
				if (containerType == 'Plate') {
					sample.@plateName = parentDocument.isSequenomState() ? this.getSequenomPlateName(idx) : this.getPlateName(idx);
				} else {
					sample.@plateName = '';
				}
				idx++;
			}
			parentDocument.samples.enableAutoUpdate();
		}
		
		public function propagateOrganism(idOrganism:String):void {
			if (parentApplication.submitInternalExperiment() && currentState != null && currentState.indexOf('SolexaSamples') >= 0) {
				for each (var sample:Object in parentDocument.samples) {
					sample.@idOrganism = idOrganism;
				}
			} else if (!parentApplication.submitInternalExperiment()) {
				for each (var s:Object in parentDocument.samples) {
					s.@idOrganism = idOrganism;
				}
			}
		}
		
		public function propagateOtherOrganism(otherOrganism:String):void {
			for each (var sample:Object in parentDocument.samples) {
				sample.@otherOrganism = otherOrganism;
			}
		}

		public function propagateSeqRunType(idSeqRunType:String):void {
			if (parentApplication.submitInternalExperiment() && currentState != null && currentState.indexOf('SolexaSamples') >= 0) {
				for each (var sample:Object in parentDocument.samples) {
					sample.@idSeqRunType = idSeqRunType;
				}
			}
		}
		public function propagateNumberSequencingCycles(theSample:Object):void {
			if (parentApplication.submitInternalExperiment() && currentState != null && currentState.indexOf('SolexaSamples') >= 0) {
				for each(var lane:Object in parentDocument.getLanes(theSample, -1)) {
					lane.@idNumberSequencingCycles = theSample.@idNumberSequencingCycles;
				}
			}
		}		
 		public function propagateSolexaLibraryType(idSolexaLibraryType:String):void {
			if (parentApplication.submitInternalExperiment() && currentState != null && currentState.indexOf('SolexaSamples') >= 0) {
				for each (var sample:Object in parentDocument.samples) {
					sample.@idSolexaLibraryType = idSolexaLibraryType;
				}
			}
		}   
		
		public function initializeBarcoding():void {
			if (parentDocument.isSolexaState()) {
				
				
				if (barcodeList == null || this.barcodeList.length() == 0) {
					barcodes.refresh();
					barcodeList = new XMLList(barcodes.toXMLString());
				}

				propagateBarcode();
			}
			
			setSamplesGridDataProvider();
        		
        	this.barcodeColumn.visible = parentDocument.showSampleBarcodes();
        	this.barcodeColumn.editable = !parentDocument.isEditState() || parentApplication.hasPermission('canWriteAnyObject');
			this.customBarcodeColumn.visible = parentDocument.showSampleCustomBarcodes();
			this.customBarcodeColumn.editable = !parentDocument.isEditState() || parentApplication.hasPermission('canWriteAnyObject');

			// handle assay columns for fragment analysis
			manageFragAnalAssayColumns();
        	
			// handle the download sample sheet events
			
			this.samplesGrid.validateNow();
        	callLater(this.checkSamplesCompleteness);

		}

		public function propagateBarcode():void {
			if (!multiplexGroupNumberImported) {
				parentDocument.seqSetup1View.propagateBarcode();
			}
		}
		
		private function setSamplesGridDataProvider():void {
			if (hasPlates()) {
				this.samplesGrid.dataProvider = null;
				sampleGroupingCollection = new GroupingCollection();
				sampleGroupingCollection.source = parentDocument.samples;
				var groupCapSeq:Grouping = new Grouping();
				var gfCapSeq:GroupingField = new GroupingField();
				gfCapSeq.name = "@plateName";
				groupCapSeq.fields = [gfCapSeq];
				gfCapSeq.compareFunction = plateSampleCompareFunction;
				sampleGroupingCollection.grouping  = groupCapSeq;
				sampleGroupingCollection.refresh(); 
				this.samplesGrid.dataProvider = sampleGroupingCollection;
				
				this.samplesGrid.dragMoveEnabled = false;
				this.samplesGrid.dropEnabled = false;
				this.samplesGrid.dragEnabled = false;
				
				this.sampleRowNumberCol.visible = false;
				this.multiplexGroupNumberColumn.visible = false;
				this.switchFirstSampleGridColumns(this.plateNameCol, this.multiplexGroupNumberColumn);
				this.plateNameCol.visible = true;
				this.barcodeColumn.visible = false;
				this.multiplexGroupNumberEditColumn.visible = false;
			} else if (parentDocument.showSampleMultiplexGroup()) {
				this.samplesGrid.dataProvider = null;
				sampleGroupingCollection = new GroupingCollection();
				sampleGroupingCollection.source = parentDocument.samples;
				var group:Grouping = new Grouping();
				var gf:GroupingField = new GroupingField();
				gf.name = "@multiplexGroupNumber";
				group.fields = [gf];
				gf.compareFunction = sampleCompareFunction;
				sampleGroupingCollection.grouping  = group;
				sampleGroupingCollection.refresh(); 
				this.samplesGrid.dataProvider = sampleGroupingCollection;
				
				this.samplesGrid.dragMoveEnabled = true;
				this.samplesGrid.dropEnabled = true;
				this.samplesGrid.dragEnabled = true;
				
				this.sampleRowNumberCol.visible = false;
				this.multiplexGroupNumberColumn.visible = true;
				switchFirstSampleGridColumns(this.multiplexGroupNumberColumn, this.plateNameCol);
				this.barcodeColumn.visible = false;
				this.multiplexGroupNumberEditColumn.visible = false;
				this.plateNameCol.visible = false;
				
			} else {
				this.samplesGrid.sortableColumns = false;
				sampleGroupingCollection = null;
				this.samplesGrid.dataProvider = parentDocument.samples;
				
				this.samplesGrid.dragMoveEnabled = false;
				this.samplesGrid.dropEnabled = false;
				this.samplesGrid.dragEnabled = false;
				
				this.sampleRowNumberCol.visible = true;
				this.multiplexGroupNumberColumn.visible = false;
				this.multiplexGroupNumberEditColumn.visible = parentDocument.isSolexaState() && parentDocument.isEditState();
				this.multiplexGroupNumberEditColumn.editable = parentDocument.isSolexaState() && parentDocument.isEditState() && parentApplication.isAdminState;
				this.plateNameCol.visible = false;
				
			}
		}
		
		private function manageFragAnalAssayColumns():void {
			// set all assay columns to not visible.
			for each(var colRemove:AdvancedDataGridColumn in samplesGrid.columns) {
				if (colRemove.dataField != null && colRemove.dataField.substr(0, 9) == "@hasAssay") {
					colRemove.visible = false;
				}
			}

			// reset selected ones to visible -- creating them if necessary.
			if (parentDocument.isFragAnalState()) {
				for (var x:int = 0; x < parentDocument.assayCollection.length; x++) {
					var assayObject:Object = parentDocument.assayCollection.getItemAt(x);
					if (parentDocument.isAssaySelected(assayObject)) {
						var dataField:String = parentDocument.getAssayDataField(x);
						var exists:Boolean = false;
						var assayCol:AdvancedDataGridColumn = null;
						for each(var col:AdvancedDataGridColumn in samplesGrid.columns) {
							if (col.dataField != null && col.dataField == dataField) {
								assayCol = col;
								exists = true;
								break;
							}
						}
						if (exists) {
							assayCol.visible = true;
						} else {
							var newCol:AdvancedDataGridColumnWithType = new AdvancedDataGridColumnWithType();
							newCol.dataField = dataField;
							newCol.headerText = assayObject.@display;
							newCol.itemRenderer = views.renderers.CheckBoxRenderer.create(null, true);
							newCol.propertyType="CHECK";
							newCol.width = 60;
							newCol.resizable = false;
							newCol.rendererIsEditor = true;
							newCol.editorDataField = "selected";
							newCol.visible = true;
							newCol.editable = false;
							var newColumns:Array = new Array();
							var pushed:Boolean = false;
							for each (var col0:AdvancedDataGridColumn in samplesGrid.columns) {
								if (!pushed && col0.dataField != null && (col0.dataField == "@description" || (col0.dataField.substr(0, 9) == "@hasAssay" && col0.dataField > newCol.dataField))) {
									newColumns.push(newCol);
									pushed = true;
								}
								newColumns.push(col0);
							}
							samplesGrid.columns = newColumns;
							this.samplesGrid.validateNow();
						}
						
						// Set value in any samples where it doesn't exist
						for each (var sample:Object in parentDocument.samples) {
							
							if (!sample.hasOwnProperty(dataField)) {
								sample[dataField] = "Y";
							}
						}
						parentDocument.samples.refresh();
					}
				}
				
			}
		}
		
		private function switchFirstSampleGridColumns (col1:AdvancedDataGridColumn, col2:AdvancedDataGridColumn):void {
			var columns:Array = [];
			columns[0] = col1;
			columns[1] = col2;
			for(var i:int = 2;i < this.samplesGrid.columns.length;i++) {
				columns[i] = this.samplesGrid.columns[i];
			}
			this.samplesGrid.columns = columns;
		}
		
		private function sampleCompareFunction(a:XML, b:XML):int
		{
			var aPersistFlag:Number = 0;
			var aPosition:Number = 0;
			if (a.@idSample.toString().indexOf("Sample") > -1) {
				aPosition = a.@idSample.toString().substr(6);
				aPersistFlag = 1;
			} else {
				aPosition = a.@idSample;
			}

			var bPersistFlag:Number = 0;
			var bPosition:Number = 0;
			if (b.@idSample.toString().indexOf("Sample") > -1) {
				bPosition = b.@idSample.toString().substr(6);
				bPersistFlag = 1; // non-persistent samples sort after the persistent ones
			} else {
				bPosition = b.@idSample;
			}
			
			if (aPersistFlag == bPersistFlag) {
				return ObjectUtil.numericCompare(aPosition, bPosition);				
			} else {
				return ObjectUtil.numericCompare(aPersistFlag, bPersistFlag);
			}
		}

		private function plateSampleCompareFunction(a:XML, b:XML):int
		{
			if (a.hasOwnProperty("@plateName") && a.hasOwnProperty("@wellName") && b.hasOwnProperty("@plateName") && b.hasOwnProperty("@wellName")) {
				var compVal:int = 0;
				if (a.@plateName == b.@plateName) {
					compVal = compVal = ObjectUtil.numericCompare(a.@wellName.toString().substr(1), b.@wellName.toString().substr(1));
					if (compVal == 0) {
						compVal = ObjectUtil.stringCompare(a.@wellName.toString(), b.@wellName.toString());
					}
				} else {
					compVal = ObjectUtil.stringCompare(a.@plateName.toString(), b.@plateName.toString());
				}
				return compVal;
			} else {
				var aPersistFlag:Number = 0;
				var aPosition:Number = 0;
				if (a.@idSample.toString().indexOf("Sample") > -1) {
					aPosition = a.@idSample.toString().substr(6);
					aPersistFlag = 1;
				} else {
					aPosition = a.@idSample;
				}
				
				var bPersistFlag:Number = 0;
				var bPosition:Number = 0;
				if (b.@idSample.toString().indexOf("Sample") > -1) {
					bPosition = b.@idSample.toString().substr(6);
					bPersistFlag = 1; // non-persistent samples sort after the persistent ones
				} else {
					bPosition = b.@idSample;
				}
				
				if (aPersistFlag == bPersistFlag) {
					return ObjectUtil.numericCompare(aPosition, bPosition);				
				} else {
					return ObjectUtil.numericCompare(aPersistFlag, bPersistFlag);
				}
			}
		}
		
        public function showHideColumns():void {
			isExternal = (parentDocument.isEditState() && parentDocument.request.@isExternal == 'Y') || (!parentDocument.isEditState() && !parentApplication.isInternalExperimentSubmission);
			isEditState = parentDocument.isEditState();
			
			this.downloadExamplePlateButton.visible = hasPlates();
			this.downloadExamplePlateButton.includeInLayout = hasPlates();
			this.downloadExampleTubeButton.visible = parentDocument.isCapSeqState() && !hasPlates();
			this.downloadExampleTubeButton.includeInLayout = parentDocument.isCapSeqState() && !hasPlates();
			this.downloadExampleButton.visible = !parentDocument.isCapSeqState() && !parentDocument.isIScanState();
			this.downloadExampleButton.includeInLayout = !parentDocument.isCapSeqState() && !parentDocument.isIScanState();
			
			buttonsContainer.visible = !parentDocument.isAmendState();
			buttonsContainer.includeInLayout = buttonsContainer.visible;
			
			// Don't allow sample editing on edit unless user is admin or experiment is external or experiment is non-submitted dna sq experiment.
			if (isEditState && !parentApplication.isAdminState && !isExternal && !parentDocument.isDNASeqCoreState()) {
				buttonsContainer.visible = false;
				buttonsContainer.includeInLayout = false;
			}
        	
        	existingNumberSequencingLanesCol.visible = false;
        	additionalNumberSequencingLanesCol.visible = false;
            this.sampleTypeCol.visible = !parentDocument.isFragAnalState() && !parentDocument.isMitSeqState() 
											&& !parentDocument.isCherryPickState() && !parentDocument.isIScanState();
//											&& !parentDocument.isSequenomState() && !parentDocument.isClinicalSequenomState();
			
			this.concentrationCol.visible = !isExternal;
			this.otherOrganismCol.visible = !isExternal;
			this.sampleOrganismColumn.visible = !isExternal;
			this.preppedByCoreCol.visible = !isExternal;
			this.otherSamplePrepMethodCol.visible = !isExternal;
			this.seqLibProtocolCol.visible = !isExternal;
			
			seqPrepQualBioanalyzerMethodCol.visible = isEditState && !isExternal && parentDocument.isSolexaState();
			seqPrepStatus.visible = isEditState && !isExternal && parentDocument.isSolexaState();
        	
			showCCNumberCheckbox.visible =  !isExternal;
			showCCNumberCheckbox.includeInLayout =  !isExternal;
			showCCNumberCheckbox.width = isExternal ? 0 : 250;
        	sampleNumberCol.visible = parentDocument.isEditState() || parentDocument.isAmendState();
			
			
			wellNameCol.visible = (hasPlates() || parentDocument.isFragAnalState() || parentDocument.isMitSeqState()) ? true : false;
			plateNameCol.editable = false;
			wellNameCol.editable = false;
			
			this.sourceWellCol.visible = parentDocument.isCherryPickState() ? true : false;
			this.destinationWellCol.visible = parentDocument.isCherryPickState() ? true : false;
			this.sourcePlateCol.visible = parentDocument.isCherryPickState() ? true : false;

			if (parentDocument.isIScanState() || parentDocument.isSequenomState() || parentDocument.isClinicalSequenomState()) {
				this.addSampleButton.visible = false;
				this.addSampleButton.enabled = false;
				this.deleteSampleButton.visible = true;
				this.deleteSampleButton.enabled = true;
				this.copySampleButton.visible = false;
				this.copySampleButton.enabled = false;				
				this.copyColumnButton.visible = false;
				this.copyColumnButton.enabled = false;
			}  else if ( hasPlates() || parentDocument.isCherryPickState() ) {
				this.addSampleButton.visible = false;
				this.deleteSampleButton.visible = false;
				this.copySampleButton.visible = false;
				this.addSampleButton.enabled = false;
				this.deleteSampleButton.enabled = false;
				this.copySampleButton.enabled = false;
			} else {
				this.addSampleButton.visible = true;
				this.deleteSampleButton.visible = true;
				this.copySampleButton.visible = true;
				this.addSampleButton.enabled = true;
				this.deleteSampleButton.enabled = true;
				this.copySampleButton.enabled = true;
			}
			if (currentState != null && currentState.indexOf('SolexaSamples') >= 0 ) {
        		numberSequencingLanesCol.visible = !parentDocument.isEditState() && !parentDocument.isAmendState() && !isExternal;
				numberSequencingLanesCol.editable = true;
				numberSequencingCyclesCol.visible = !parentDocument.isEditState() && !isExternal;
				
				if (parentDocument.currentState == "SolexaLaneAmendState") {
					numberSequencingLanesCol.editable = false;
					additionalNumberSequencingLanesCol.visible = true;
					existingNumberSequencingLanesCol.visible = true;
				} else if (parentDocument.currentState == "SolexaBaseAmendState") {
					numberSequencingLanesCol.editable = false;
					numberSequencingLanesCol.visible = true;
					numberSequencingLanesCol.editable = true;
				}
				
				if (parentDocument.isEditState() ||
				    parentDocument.sampleSetupView.currentState == "SolexaSetupPreppedState" ||
				    parentDocument.sampleSetupView.currentState == "SolexaAmendPreppedState" ) {
					seqLibProtocolCol.visible = !isExternal;
				} else {
					seqLibProtocolCol.visible = false;
				}

				idSeqRunTypeCol.visible = !parentDocument.isEditState() && !isExternal; 
				concentrationUnitColumn.visible = !isExternal;
				concentrationUnitColumn.editable = false;
				sampleOrganismColumn.editable = !isExternal;
				chipTypeColumn.visible = false; 
				labelColumn.visible = false;
				
				
        		

			} else if (currentState != null && currentState.indexOf('QCSamples') >= 0) {
        		numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible = false;
				preppedByCoreCol.visible = false;
				seqLibProtocolCol.visible = false;
				idSeqRunTypeCol.visible = false; 
				concentrationUnitColumn.visible = !isExternal;
				concentrationUnitColumn.editable = true;
				sampleOrganismColumn.visible = false;
				this.otherOrganismCol.visible = false;

				
				if (parentDocument.isEditState()) {
					chipTypeColumn.visible = parentDocument.request.@codeApplication == 'BIOAN' ? true : false;		
				} else {
					chipTypeColumn.visible = parentDocument.sampleSetupView.currentState == 'QCSetupBionanalyzerState' ? true : false;
				}
				labelColumn.visible = false;
				
			} else if (currentState == 'CapSeqState') {
				
				numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible = false;
				preppedByCoreCol.visible = false;
				seqLibProtocolCol.visible = false;
				idSeqRunTypeCol.visible = false; 
				concentrationUnitColumn.visible = false;
				concentrationUnitColumn.editable = false;
				sampleOrganismColumn.visible = false;
				sampleOrganismColumn.editable = false;
				this.concentrationCol.visible = false;
				
				if (isEditState) { 
					this.sampleTypeCol.visible = true;
				} else {
					this.sampleTypeCol.visible = false;
				}
				this.otherOrganismCol.visible = false;
				otherSamplePrepMethodCol.visible = false;
				chipTypeColumn.visible = false; 
				labelColumn.visible = false;
				
			} else if (currentState == 'FragAnalState') {
				
				numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible = false;
				preppedByCoreCol.visible = false;
				seqLibProtocolCol.visible = false;
				idSeqRunTypeCol.visible = false; 
				concentrationUnitColumn.visible = false;
				concentrationUnitColumn.editable = false;
				sampleOrganismColumn.visible = false;
				sampleOrganismColumn.editable = false;
				this.concentrationCol.visible = false;
				
				this.otherOrganismCol.visible = false;
				otherSamplePrepMethodCol.visible = false;
				chipTypeColumn.visible = false; 
				labelColumn.visible = false;
				
			} else if (currentState == 'MitSeqState') {
				
				numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible = false;
				preppedByCoreCol.visible = false;
				seqLibProtocolCol.visible = false;
				idSeqRunTypeCol.visible = false; 
				concentrationUnitColumn.visible = false;
				concentrationUnitColumn.editable = false;
				sampleOrganismColumn.visible = false;
				sampleOrganismColumn.editable = false;
				this.concentrationCol.visible = false;
				
				this.otherOrganismCol.visible = false;
				otherSamplePrepMethodCol.visible = false;
				chipTypeColumn.visible = false; 
				labelColumn.visible = false;
				
			} else if (currentState == 'CherryPickState') {
				
				numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible = false;
				preppedByCoreCol.visible = false;
				seqLibProtocolCol.visible = false;
				idSeqRunTypeCol.visible = false; 
				concentrationUnitColumn.visible = false;
				concentrationUnitColumn.editable = false;
				sampleOrganismColumn.visible = false;
				sampleOrganismColumn.editable = false;
				this.concentrationCol.visible = false;
				
				this.otherOrganismCol.visible = false;
				otherSamplePrepMethodCol.visible = false;
				chipTypeColumn.visible = false; 
				labelColumn.visible = false;
				
			} else if (currentState == 'IScanState') {
				
				numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible = false;
				preppedByCoreCol.visible = false;
				seqLibProtocolCol.visible = false;
				idSeqRunTypeCol.visible = false; 
				concentrationUnitColumn.visible = false;
				concentrationUnitColumn.editable = false;
				sampleOrganismColumn.visible = false;
				sampleOrganismColumn.editable = false;
				this.concentrationCol.visible = false;
				this.otherOrganismCol.visible = false;
				otherSamplePrepMethodCol.visible = false;
				chipTypeColumn.visible = false; 
				labelColumn.visible = false;
				
			} else if (currentState == 'SequenomState') {
				
				numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible = false;
				preppedByCoreCol.visible = false;
				seqLibProtocolCol.visible = false;
				idSeqRunTypeCol.visible = false; 
				concentrationUnitColumn.visible = false;
				concentrationUnitColumn.editable = false;
				sampleOrganismColumn.visible = false;
				sampleOrganismColumn.editable = false;
				this.concentrationCol.visible = parentDocument.isEditState() ? true : false;
				this.otherOrganismCol.visible = false;
				otherSamplePrepMethodCol.visible = false;
				chipTypeColumn.visible = false; 
				labelColumn.visible = false;
				
			} else if (currentState == 'ClinicalSequenomState') {
				
				numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible = false;
				preppedByCoreCol.visible = false;
				seqLibProtocolCol.visible = false;
				idSeqRunTypeCol.visible = false; 
				concentrationUnitColumn.visible = false;
				concentrationUnitColumn.editable = false;
				sampleOrganismColumn.visible = false;
				sampleOrganismColumn.editable = false;
				this.concentrationCol.visible = parentDocument.isEditState() ? true : false;
				this.otherOrganismCol.visible = false;
				otherSamplePrepMethodCol.visible = false;
				chipTypeColumn.visible = false; 
				labelColumn.visible = false;
				
			} else {
        		numberSequencingLanesCol.visible = false;
				numberSequencingCyclesCol.visible = false;
				preppedByCoreCol.visible = false;
				seqLibProtocolCol.visible = false;
				idSeqRunTypeCol.visible = false; 
				concentrationUnitColumn.visible = !isExternal;
				concentrationUnitColumn.editable = false;
				sampleOrganismColumn.editable = !isExternal;
				chipTypeColumn.visible = false; 
				labelColumn.visible = !parentDocument.isEditState();
			}
			 
			if (!parentDocument.isEditState()) {
				if (parentDocument.theTab.contains(parentDocument.confirmView)) {
					parentDocument.confirmView.showHideColumns();									
				}
			}
			
			// If this is a QC request, hide the annotation columns 
			if (currentState != null 
				&& (currentState.indexOf('QCSamples') >= 0 || currentState == 'CapSeqState') 
				|| currentState == 'FragAnalState' || currentState == 'MitSeqState' || currentState == 'CherryPickState' 
				|| currentState == 'SequenomState' || parentDocument.isClinicalSequenomState()) {
				// Make all annotation columns invisible
				for each(var col:AdvancedDataGridColumn in this.samplesGrid.columns) {
					if (col is views.util.AnnotationAdvancedDataGridColumn) {
						col.visible = false;
					}
				}
			}
        }
		private function refreshHybsGrid():void {
 		    parentDocument.hybsView.hybsGrid.invalidateList();
	        parentDocument.hybsView.hybsGrid.invalidateDisplayList();
	        if (!parentDocument.isEditState()) {
		        parentDocument.confirmView.hybsGridConfirm.invalidateList();
		        parentDocument.confirmView.hybsGridConfirm.invalidateDisplayList();
	        }
		}
		private function refreshLanesGrid():void {
			parentDocument.confirmView.lanesConfirmGrid.invalidateList();
 			parentDocument.confirmView.lanesConfirmGrid.invalidateDisplayList();
		}
		
		public function onEdit():void {
			parentDocument.dirty.setDirty();
		}
		
		private function highlightWhenMissing():Boolean {
			if (this.parentDocument.isEditState()) {
				return false;
			} else {
				return true;
			}
		}
		
		private function toggleShowCCNumber():void {
			if (!this.showCCNumberCheckbox.selected) {
				for each(var s:XML in parentDocument.samples) {
					s.@ccNumber = '';
				}
			}
		}
		
		private function areIndexTagsUnique():Boolean {
			var isValid:Boolean = true;
			var barcodeField:String = "";
			if (parentDocument.showSampleCustomBarcodes()) {
				barcodeField = "@barcodeSequence";
			} else if (parentDocument.showSampleBarcodes()) {
				barcodeField = "@idOligoBarcode";
			} else {
				return isValid;
			}
			
			var sampleMap:Object = new Object();
			for each(var s:Object in parentDocument.samples) {
				var samplesForIndexGroup:XMLListCollection = sampleMap[s.@multiplexGroupNumber];
				if (samplesForIndexGroup == null) {
					samplesForIndexGroup = new XMLListCollection();
				}
				samplesForIndexGroup.addItem(s);
				sampleMap[s.@multiplexGroupNumber] = samplesForIndexGroup;
			}
			
			for (var multiplexGroupNumber:Object in sampleMap) {
				var samplesInGroup:XMLListCollection = sampleMap[multiplexGroupNumber];
				var tagMap:Object = new Object();
				for each(var s1:Object in samplesInGroup) {
					var barcode:Object = s1[barcodeField];
					tagMap[barcode] = barcode;
				}
				var uniqueTagCount:int = 0;
				for (var tm:Object in tagMap) {
					uniqueTagCount++;
				}
				if (uniqueTagCount < samplesInGroup.length) {
					isValid = false;
					break;
				}
			}
			return isValid;
		}
		
		private function onDragEnter(event:DragEvent):void
		{
			if (currentState.indexOf('SolexaSamples') >= 0) {
			    DragManager.acceptDragDrop(AdvancedDataGrid(event.target));
			} else {
				this.samplesGrid.hideDropFeedback(event);
				event.preventDefault();
				DragManager.showFeedback(DragManager.NONE);
			}
		}
		

		
		private function onDragDropSample(event:DragEvent) : void
		{
			var dropNode:Object = null;
			if (idx > 0) {
				idx--;
			}
			var idx:int = samplesGrid.calculateDropIndex(event);
			var renderer:Object = samplesGrid.indexToItemRenderer(idx); 
			if (renderer != null) {
				dropNode = renderer.data; 
			}
			
			if (dropNode == null) {
				event.preventDefault();
				return;
			}
			
			var draggedFormat:String = event.dragSource.formats[0];
			var draggedItems:Array = event.dragSource.dataForFormat(draggedFormat) as Array;	
		    if (draggedItems != null) {
				for(var i:int = 0; i < draggedItems.length; i++) {
    	       		var dragItem:XML = XML(draggedItems[i]);
    	       		dragItem.@multiplexGroupNumber = dropNode.@multiplexGroupNumber;
    			}	 
		    } else {
		    	event.preventDefault();
		    }
		}		
		public function getSampleTreeIcon(item:Object):Class {
			if (item == null) {
				return parentApplication.iconGroup;
			} else {
				return null; 
			}  
		}  
		 
         private function sortBarcodes(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var scheme1:String = obj1.@oligoBarcodeSchemeDisplay;
				var scheme2:String = obj2.@oligoBarcodeSchemeDisplay;
				
				if (scheme1 < scheme2) {
					return -1;
				} else if (scheme1 > scheme2) {
					return 1; 
				} else {
					var order1:int = obj1.@sortOrder;
					var order2:int = obj2.@sortOrder;
					
					if (obj1.@value == '') {
						return -1;
					} else if (obj2.@value == '') {
						return 1;
					} else {
						if (order1 < order2) {
							return -1;
						} else if (order1 > order2) {
							return 1;
						} else {
							return 0;
						}
					}
					
				}
				
			}			
		}
		
		//Used to display a full text area for editing sample descriptions.......May use this instead of scrolling options for small fields that
		//contain large amounts of text.  Still needs refinement
//		public function showDescriptionPopUp(event:MouseEvent):void{
//			descriptionWindow = PopUpManager.createPopUp(this, TextPopUp, true);
//			descriptionPopUp = TextPopUp(descriptionWindow);
//			descriptionPopUp.DataGridName = samplesGrid.selectedItem;
//		}

		// Used for multi-select renderer. Get all options (include inactive if edit state)
		public function getPropertyOptions(idProperty:String):XMLList {
			return parentApplication.getPropertyOptions(idProperty, parentDocument.isEditState());
		}
        
		public function changeLabelCheckBoxStyles(cy3CheckBox:CheckBox, cy5CheckBox:CheckBox, label:String):void {
			cy3CheckBox.setStyle("fontWeight", label == "cy3"   ? "bold" : "normal");
			cy3CheckBox.setStyle("color", label == "cy3"  ? "green" : "grey");
			if (label == "cy3") {
				cy3CheckBox.setStyle("fillAlphas", [1.0, 0.7, 0.7, 0.7]);
			} else {
				cy3CheckBox.setStyle("fillAlphas", [.4, 0.2, 0.2, 0.2]);       			       			
			}
			cy5CheckBox.setStyle("fontWeight", label == "cy5" ? "bold" : "normal");               
			cy5CheckBox.setStyle("color", label == "cy5" ? "red" : "grey");
			if (label == "cy5") {
				cy5CheckBox.setStyle("fillAlphas", [1.0, 0.7, 0.7, 0.7]);
			} else {
				cy5CheckBox.setStyle("fillAlphas", [.4, 0.2, 0.2, 0.2]);       			       			
			}

		}
		
		public function plateNameLabelFunction(item:Object, column:AdvancedDataGridColumn):String
		{
			if (item is XML) {
				return "";
			} else {
				return item.groupLabel;
			}
		}
	]]>
</mx:Script>	
	<mx:Sort id="barcodeSort"  compareFunction="sortBarcodes"/>
    <mx:XMLListCollection id="barcodes" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OligoBarcode').DictionaryEntry}" sort="{barcodeSort}"/>
    <mx:XMLList id="barcodeList"/>
    
	<mx:VBox width="100%" height="100%" verticalGap="2" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
		<mx:HBox width="100%" id="topBox">
			<mx:CheckBox id="showCCNumberCheckbox" 
						 click="toggleShowCCNumber()"  
						 visible="{parentApplication.isInternalExperimentSubmission &amp;&amp; parentApplication.isBSTLinkageSupported &amp;&amp; currentState != 'CapSeqState'}"
						 includeInLayout="{parentApplication.isInternalExperimentSubmission &amp;&amp; parentApplication.isBSTLinkageSupported  &amp;&amp; currentState != 'CapSeqState'}" 
						 label="Link to BST samples using CC Number" />
			<mx:TextArea styleName="instructionBox" width="{parentApplication.isInternalExperimentSubmission ? 590 : 0}" wordWrap="true" height="{parentApplication.isInternalExperimentSubmission ? 88 : 0}" visible="{parentApplication.isInternalExperimentSubmission}" id="textarea1" verticalScrollPolicy="off" horizontalScrollPolicy="off">
					<mx:htmlText><![CDATA[Instructions<br>  1.  Mandatory: Fill in the following highlighted fields:  sample name, label, and concentration.<br>  2.  Optional: Any annotation characteristic that you selected from the previous screen appears on this screen <br>       as a highlighted column. Please type desired information under the highlighted field with the annotation header.<br>  3.  Optional: Provide a short description of your sample in the non-highlighted description field.<br>  4.  After completing all line items, click the 'Next' button at the bottom of the page to proceed.]]></mx:htmlText>
			</mx:TextArea>
			
		</mx:HBox>
			<mx:Spacer width="8"/>
		    <mx:HBox width="100%">
				<mx:HBox id="buttonsContainer" horizontalGap="2">
					<mx:LinkButton textDecoration="underline"  label="Upload sample sheet" click="uploadSampleSheet();" icon="@Embed(source='../../assets/upload.png')" id="uploadSampleSheetButton" toolTip="Upload sample sheet" />
					<mx:LinkButton textDecoration="underline" id="downloadExamplePlateButton" label="Sample sheet (example)" click="{downloadSampleSheetExample('example_sample_sheet_wells_bycol.xls')}"   color="#0000FF" icon="@Embed(source='../../assets/download.png')"/>
					<mx:LinkButton textDecoration="underline" id="downloadExampleTubeButton" label="Sample sheet (example)" click="{downloadSampleSheetExample('example_sample_sheet_wells_bycol.xls')}"   color="#0000FF" icon="@Embed(source='../../assets/download.png')"/>
					<mx:LinkButton textDecoration="underline" id="downloadExampleButton" label="Sample sheet (example)" click="{downloadSampleSheetExample('example_sample_sheet.xls')}"   color="#0000FF" icon="@Embed(source='../../assets/download.png')"/>
					<mx:LinkButton textDecoration="underline" label="Add sample" click="addSample();this.initializeBarcoding();checkSamplesCompleteness()" icon="@Embed(source='../../assets/add.png')" id="addSampleButton" toolTip="Add sample" />
					<mx:LinkButton textDecoration="underline" label="Copy sample" click="copyTheSample();" icon="@Embed('../../assets/table_multiple.png')" id="copySampleButton" toolTip="Copy sample(s)" />
					<mx:LinkButton textDecoration="underline" label="Delete sample" click="deleteTheSample()" icon="@Embed(source='../../assets/delete.png')" id="deleteSampleButton" toolTip="Delete sample(s)" />
					<mx:LinkButton textDecoration="underline" label="Clear all" click="promptToClearAllSamples();deleteSample();" icon="@Embed('../../assets/folder_delete.png')" id="clearSamplesButton" toolTip="Clear all samples" />
					<mx:LinkButton textDecoration="underline" label="Copy column" click="copyColumn();" icon="@Embed('../../assets/table_multiple.png')" id="copyColumnButton" toolTip="Copy contents of one column to another" />
				</mx:HBox>
				
			</mx:HBox>
					
			<mx:AdvancedDataGrid width="100%" height="100%" id="samplesGrid"  
				editable="true"
				allowMultipleSelection="false" 
				itemFocusOut="checkSamplesCompleteness()" 
				horizontalScrollPolicy="auto" 
				variableRowHeight="true"
				sortableColumns="false"
				sortExpertMode="true"  
				dragDrop="onDragDropSample(event)"
				defaultLeafIcon="{null}" 
				iconFunction="getSampleTreeIcon"
				displayItemsExpanded="true"  
				selectionColor="#DDF3FB">
				<mx:columns>
					<mx:AdvancedDataGridColumn id="multiplexGroupNumberColumn" headerText="Index Tag Group" dataField="@multiplexGroupNumberDisplay" editable="false" visible="true"
											   width="60">
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox horizontalScrollPolicy="off" verticalGap="0">
									<mx:Label text="Index Tag"/>
									<mx:Label text="Group"/>
								</mx:VBox> 
							</mx:Component> 
						</mx:headerRenderer> 
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn id="plateNameCol" headerText="Plate" dataField="@plateName" editable="false" visible="true" width="60" labelFunction="plateNameLabelFunction" />
  			        <mx:AdvancedDataGridColumn id="sampleRowNumberCol" visible="true" editable="false" headerText=""  width="25" resizable="false" labelFunction="parentDocument.getSamplesGridRowNumber"/>
					<mx:AdvancedDataGridColumn id="wellNameCol" visible="false" editable="false" headerText="Well"  width="40" resizable="false" dataField="@wellName"/>
					<mx:AdvancedDataGridColumn id="sampleNumberCol" headerText="ID" width="60" visible="true"  dataField="@number"  editable="false"/>        
					<mx:AdvancedDataGridColumn headerText="Sample Name" width="100" editorDataField="text" dataField="@name" rendererIsEditor="false"
											   id="sampleNameCol"
											   editable="true" 
											   itemRenderer="{hci.flex.controls.Label.create('@name')}"                
											   itemEditor="{views.renderers.TextInputSampleName.create(currentState)}"      />    
 
	               <mx:AdvancedDataGridColumn id="labelColumn" dataField="@label"  
											  width="90" headerText="Label" editable="false">
					   <mx:itemRenderer>
						   <mx:Component>
							   <mx:HBox paddingLeft="4" horizontalGap="0" horizontalScrollPolicy="off">
								   <mx:Script>
									   <![CDATA[
										   override public function set data(value:Object):void     {      
											   super.data = value; 
											   if (value == null) {
												   cy3CheckBox.selected = false;      
												   cy5CheckBox.selected = false;												   
											   }else if (value["@label"] == "cy3")       {         
												   cy3CheckBox.selected = true;      
												   cy5CheckBox.selected = false;
											   } else if (value["@label"] == "cy5")       {         
												   cy3CheckBox.selected = false;      
												   cy5CheckBox.selected = true;
											   } else {
												   cy3CheckBox.selected = false;      
												   cy5CheckBox.selected = false;
											   }       
											   validateDisplayList();    
										   } 
									   ]]>
								   </mx:Script>
									   <mx:CheckBox id="cy3CheckBox"  label="cy3"  
										 change="onChange(event)"  selectedField="@isSelectedCy3"
										 fillColors="[0x23b12d, 0x23b12d, 0x23b12d, 0x23b12d]"
										 color="green" 
										 borderColor="green"
										 fillAlphas="[1.0, 0.15, 0.15, 0.15]">
										   <mx:Script>
											   <![CDATA[
												   private function onChange(evt:Event):void {
													   data.@label = cy3CheckBox.selected ? "cy3" : "";
													   data.@isSelectedCy3 = true;
													   data.@isSelectedCy5 = false;
													   cy5CheckBox.selected = false;

													   parentDocument.changeLabelCheckBoxStyles(cy3CheckBox, cy5CheckBox, data.@label);
													   parentDocument.checkSamplesCompleteness();
												   }
											   ]]>
										   </mx:Script>
										</mx:CheckBox>
								   <mx:CheckBox id="cy5CheckBox"  label="cy5"  change="onChangeCy5(event)"
												fillColors="[0xda2020, 0xda2020, 0xda2020, 0xda2020]" 
												color="0xFF0000" selectedField="@isSelectedCy5"
												borderColor="0xFF0000" 
												fillAlphas="[1.0, 0.15, 0.15, 0.15]}]"												
												>
									   <mx:Script>
										   <![CDATA[
											   private function onChangeCy5(evt:Event):void {
												   data.@label = cy5CheckBox.selected ? "cy5" : "";
												   data.@isSelectedCy5 = "true";
												   data.@isSelectedCy3 = "false";
												   parentDocument.changeLabelCheckBoxStyles(cy3CheckBox, cy5CheckBox, data.@label);

												   cy3CheckBox.selected = false;
												   parentDocument.checkSamplesCompleteness();
											   }
										   ]]>
									   </mx:Script>
								   </mx:CheckBox>
							   </mx:HBox>
						   </mx:Component>
					   </mx:itemRenderer>
					   

				    </mx:AdvancedDataGridColumn>

	 				<mx:AdvancedDataGridColumn headerText="Conc." id="concentrationCol" visible="{parentApplication.isInternalExperimentSubmission}"  width="42" dataField="@concentration" rendererIsEditor="false"
 	                   itemRenderer="{hci.flex.controls.Label.create('@concentration')}"                
 	                   itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSampleConcentration(), '')}" editorDataField="value" />          
	                <mx:AdvancedDataGridColumn id="concentrationUnitColumn" visible="true" width="40" headerText="Unit" dataField="@codeConcentrationUnit" 
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"  
 	                   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ConcentrationUnit').DictionaryEntry, '@display', '@value', '@codeConcentrationUnit')}"                
 	                   itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ConcentrationUnit').DictionaryEntry, '@display', '@value', '@idConcentrationUnit', true).newInstance(), '')}"/>
					
					<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sourcePlateCol" visible="false" editable="true" headerText="Source Plate" width="150" resizable="false"
														 dataField="@sourcePlate" rendererIsEditor="false" editorDataField="value" sortable="false"
														 itemRenderer="{views.renderers.DropdownLabel.create(parentDocument.cherryPlateList, '@name', '@name', '@sourcePlate')}"                
														 itemEditor="{hci.flex.controls.ComboBox.getFactory(parentDocument.cherryPlateList, '@name', '@name', '@sourcePlate', true)}"/>
					<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sourceWellCol" visible="false" editable="true" headerText="Source Well" width="75" resizable="false"
											   dataField="@sourceWell" rendererIsEditor="false" editorDataField="value" sortable="false"
											   itemRenderer="{views.renderers.DropdownLabel.create(parentDocument.wellList, '@name', '@name', '@sourceWell')}"                
											   itemEditor="{hci.flex.controls.ComboBox.getFactory(parentDocument.wellList, '@name', '@name', '@sourceWell', true)}"/>
					<mx:AdvancedDataGridColumn id="destinationWellCol" visible="false" editable="false" headerText="Dest. Well" width="75" resizable="false"
											   dataField="@destinationWell" sortable="false"/>

					<mx:AdvancedDataGridColumn id="descriptionColumn" headerText="Sample Description" visible="false" width="140" dataField="@description" wordWrap="true"  itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" editorDataField="value"/>
					

					<mx:AdvancedDataGridColumn id="existingNumberSequencingLanesCol" 
											   headerText="# Lanes to Sequence" width="72" 
											   dataField="@sequenceLaneCount" 
											   editable="false">
						<mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
									<mx:Label text="Existing #"/> 
									<mx:Label text="Seq Lanes"/> 
								</mx:VBox> 
							</mx:Component>
						</mx:headerRenderer>
					</mx:AdvancedDataGridColumn> 
					
					
					<mx:AdvancedDataGridColumn id="numberSequencingLanesCol" headerText="# Lanes to Sequence" width="72" dataField="@numberSequencingLanes" 
											   editable="false"
											   rendererIsEditor="false"
											   itemRenderer="{hci.flex.controls.Label.create('@numberSequencingLanes')}"         
											   itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSampleNumberSeqLanes(), '')}" editorDataField="value">
						<mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
									<mx:Label text="# Seq"/> 
									<mx:Label text="Lanes"/>
								</mx:VBox> 
							</mx:Component>
						</mx:headerRenderer>
					</mx:AdvancedDataGridColumn>  

					
					<mx:AdvancedDataGridColumn id="additionalNumberSequencingLanesCol" 
											   headerText="# Lanes to Sequence" width="72" 
											   dataField="@numberSequencingLanes" 
											   editable="true"
											   rendererIsEditor="false"
											   itemRenderer="{hci.flex.controls.Label.create('@numberSequencingLanes')}"         
											   itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSampleNumberSeqLanes(), '')}" editorDataField="value" >
						<mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
									<mx:Label text="Addtl #"/> 
									<mx:Label text="Seq Lanes"/> 
								</mx:VBox> 
							</mx:Component>
						</mx:headerRenderer>
					</mx:AdvancedDataGridColumn> 

					<mx:AdvancedDataGridColumn id="ccNumber" headerText="CC Number" dataField="@ccNumber" editable="true" visible="{showCCNumberCheckbox.selected ? true : false}"
						width="76"
						itemRenderer="{hci.flex.controls.Label.createCustom('@ccNumber', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
 	                    itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.TextInput.create('@ccNumber').newInstance(), '')}" editorDataField="value"/>

					<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sampleTypeCol"  headerText="Sample Type" visible="true" width="180"   dataField="@idSampleType" 
											   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
											   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType')}"                 
											   itemEditor="{views.renderers.GridColumnFillButton.create(ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType', '@canChangeSampleType', true).newInstance(), '')}"/>
					<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sampleOrganismColumn" visible="true" width="170" headerText="Organism"  dataField="@idOrganism" 
											   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"   
											   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OrganismLite').DictionaryEntry, '@display', '@value', '@idOrganism')}"                
											   itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OrganismLite').DictionaryEntry, '@display', '@value', '@idOrganism', true).newInstance(), '')}"/>
					<mx:AdvancedDataGridColumn id="otherOrganismCol" headerText="Organism (other)" 
											   width="140" dataField="@otherOrganism"
											   visible="{parentApplication.isInternalExperimentSubmission}"
											   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
											   editorDataField="value"/> 
					
					<mx:AdvancedDataGridColumn id="multiplexGroupNumberEditColumn" headerText="Index Tag Group" dataField="@multiplexGroupNumber" editable="true" visible="true"
						width="54">
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox horizontalScrollPolicy="off" verticalGap="0">
									<mx:Label text="Index tag"/>
									<mx:Label text="Group"/>
								</mx:VBox> 
							</mx:Component> 
						</mx:headerRenderer> 
				    </mx:AdvancedDataGridColumn>
	                <util:AdvancedDataGridColumnWithType propertyType="OPTION" id="barcodeColumn" visible="true" headerText="Index Tag" width="130" dataField="@idOligoBarcode" 
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
 	                   itemRenderer="{views.renderers.DropdownLabel.create(barcodeList, '@display', '@value', '@idOligoBarcode')}"                
 	                   itemEditor="{hci.flex.controls.ComboBox.getFactory(barcodeList, '@display', '@value', '@idOligoBarcode', true)}"/>
	                <mx:AdvancedDataGridColumn id="customBarcodeColumn" headerText="Index Tag Sequence" dataField="@barcodeSequence" editable="true" visible="true"
						width="80"
 	                    itemRenderer="views.renderers.LabelBarcodeSequence"               
 	                    itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.TextInput.create('@barcodeSequence').newInstance(), '')}" editorDataField="value">
 	                     <mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								    <mx:Label text="Index Tag"/> 
								    <mx:Label text="Sequence"/>
								</mx:VBox> 
							</mx:Component>
						 </mx:headerRenderer>
 	                </mx:AdvancedDataGridColumn>  
					
					
 	                        
	 				<mx:AdvancedDataGridColumn headerText="Sample Sequence Lane Type" id="idSeqRunTypeCol" visible="{currentState == 'SolexaSamplesState'  &amp;&amp; parentApplication.isInternalExperimentSubmission}"  editable="{!parentApplication.isInternalExperimentSubmission}" width="150" dataField="@idSeqRunType"
						rendererIsEditor="false" editorDataField="value" 
                        itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry, '@display', '@value', '@idSeqRunType')}"
						itemEditor="{views.renderers.GridColumnFillButton.create(ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry, '@display', '@value', '@idSeqRunType', '@canChangeSeqRunType', false).newInstance(), '')}">
						<mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
									<mx:Label text="Sample Sequence Lane"/>
									<mx:Label text="Type"/>
								</mx:VBox> 
							</mx:Component>
						</mx:headerRenderer>
					</mx:AdvancedDataGridColumn>
	 				<mx:AdvancedDataGridColumn headerText="# Seq Cycles" id="numberSequencingCyclesCol" visible="{currentState == 'SolexaSamplesState' &amp;&amp; parentApplication.isInternalExperimentSubmission}"  width="70" dataField="@idNumberSequencingCycles" 
	 				    rendererIsEditor="false" editorDataField="value" 
 	                   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry, '@display', '@value', '@idNumberSequencingCycles')}"                
   	                   itemEditor="{views.renderers.GridColumnFillButton.create(ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry, '@display', '@value', '@idNumberSequencingCycles', '@canChangeNumberSequencingCycles', true).newInstance(), '')}">
						 <mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								    <mx:Label text="# Seq"/>
								    <mx:Label text="Cycles"/>
								</mx:VBox> 
							</mx:Component>
						 </mx:headerRenderer>
					</mx:AdvancedDataGridColumn>

					<mx:AdvancedDataGridColumn id="preppedByCoreCol" headerText="Core to prep lib?"   visible="{true}" width="60"  dataField="@seqPrepByCore"
 	                   itemRenderer="{hci.flex.controls.Label.create('@seqPrepByCore')}"                
 	                   itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSeqPrepByCore(), '')}" editorDataField="value">
 	                   	<mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								    <mx:Label text="Core to"/>
								    <mx:Label text="prep lib?"/>
								</mx:VBox> 
							</mx:Component>
						</mx:headerRenderer>
 	                </mx:AdvancedDataGridColumn>          
                    <mx:AdvancedDataGridColumn id="seqLibProtocolCol" headerText="Seq Lib Protocol" visible="{true}"  width="180" dataField="@idSeqLibProtocol" 
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"
 	                   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqLibProtocol').DictionaryEntry, '@display', '@value', '@idSeqLibProtocol')}"                
	                   itemEditor="{views.renderers.GridColumnFillButton.create(ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqLibProtocol').DictionaryEntry, '@display', '@value', '@idSeqLibProtocol', '@canChangeSampleSource', true).newInstance(), '')}"/>

					<mx:AdvancedDataGridColumn id="otherSamplePrepMethodCol" headerText="Nucl. acid extraction meth." 
							width="140" dataField="@otherSamplePrepMethod" 
							itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" editorDataField="value"/> 


	                <mx:AdvancedDataGridColumn id="chipTypeColumn" visible="{parentDocument.request.@codeRequestCategory != 'QC' &amp;&amp; !isExternal ? false : true}" headerText="Chip Type" width="150" dataField="@codeBioanalyzerChipType" 
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
 	                   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@codeBioanalyzerChipType')}"                
 	                   itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@codeBioanalyzerChipType', true).newInstance(), '')}"/>
					<mx:AdvancedDataGridColumn visible="{!parentDocument.isSequencingState() &amp;&amp; !parentDocument.isSequenomState() &amp;&amp; !parentDocument.isClinicalSequenomState() &amp;&amp; !isExternal &amp;&amp; isEditState}" editable="{parentApplication.hasPermission('canWriteAnyObject')}" headerText="QC Conc. ng/uL" width="80" dataField="@qualCalcConcentration" itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" editorDataField="value"/>
					<mx:AdvancedDataGridColumn visible="{!parentDocument.isSequencingState() &amp;&amp; !parentDocument.isSequenomState() &amp;&amp; !parentDocument.isClinicalSequenomState() &amp;&amp; !isExternal &amp;&amp; isEditState}" editable="{parentApplication.hasPermission('canWriteAnyObject')}" headerText="QC 260/230" width="80" dataField="@qual260nmTo230nmRatio" itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" editorDataField="value"/>
					<mx:AdvancedDataGridColumn visible="{parentDocument.isSequenomState() &amp;&amp; isEditState}" 
											   editable="{parentApplication.hasPermission('canWriteAnyObject')}" 
											   headerText="QC 260/280" width="80" 
											   dataField="@qual260nmTo280nmRatio" 
											   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
											   editorDataField="value"/>
					<mx:AdvancedDataGridColumn visible="{!parentDocument.isSequencingState() &amp;&amp; !parentDocument.isSequenomState() &amp;&amp; !parentDocument.isClinicalSequenomState()&amp;&amp; !isExternal &amp;&amp; isEditState}" editable="{parentApplication.hasPermission('canWriteAnyObject')}" headerText="QC RIN" width="70" dataField="@qualRINNumber" itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" editorDataField="value"/>
					<mx:AdvancedDataGridColumn visible="{!parentDocument.isSequencingState() &amp;&amp; !parentDocument.isSequenomState() &amp;&amp; !parentDocument.isClinicalSequenomState()&amp;&amp; !isExternal &amp;&amp; isEditState}" editable="{parentApplication.hasPermission('canWriteAnyObject')}" headerText="QC Frag size (from)" width="87" dataField="@qualFragmentSizeFrom" itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" editorDataField="value"/>
					<mx:AdvancedDataGridColumn visible="{!parentDocument.isSequencingState() &amp;&amp; !parentDocument.isSequenomState() &amp;&amp; !parentDocument.isClinicalSequenomState()&amp;&amp; !isExternal &amp;&amp; isEditState}" editable="{parentApplication.hasPermission('canWriteAnyObject')}" headerText="QC Frag size (to)" width="87" dataField="@qualFragmentSizeTo" itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" editorDataField="value"/>
					<mx:AdvancedDataGridColumn visible="{!parentDocument.isSequencingState() &amp;&amp; !parentDocument.isSequenomState() &amp;&amp; !parentDocument.isClinicalSequenomState()&amp;&amp; !isExternal &amp;&amp; isEditState}" headerText="QC Status" width="90" dataField="@qualStatus"
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false"  itemRenderer="mx.controls.Label" 
   	                   itemEditor="{views.renderers.GridColumnFillButton.create(ComboBoxWorkflowStatus.create('@qualStatus').newInstance(), '')}"/>

	                <mx:AdvancedDataGridColumn id="seqPrepQualBioanalyzerMethodCol" visible="true" headerText="Seq Lib Prep Bioanal Meth" width="100" dataField="@seqPrepQualCodeBioanalyzerChipType" 
	                   editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
 	                   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@seqPrepQualCodeBioanalyzerChipType')}"                
 	                   itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@seqPrepQualCodeBioanalyzerChipType', true).newInstance(), '')}"/>
					<mx:AdvancedDataGridColumn  id="seqPrepStatus" visible="true" headerText="Seq Prep Status" width="90" dataField="@seqPrepStatus"
	                   sortable="false" editable="true" rendererIsEditor="false"  itemRenderer="mx.controls.Label" 
   	                   itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSampleNumberSeqLanes(), '')}" editorDataField="value"  />

				</mx:columns>
			</mx:AdvancedDataGrid>

			
		
	</mx:VBox>
	
	<mx:states>
		<mx:State name="SamplesEditState" >
			<mx:RemoveChild target="{textarea1}"/>
			<mx:RemoveChild target="{clearSamplesButton}"/>
			<mx:RemoveChild target="{addSampleButton}"/>
		</mx:State>

		<mx:State name="SamplesAdminState">
			<mx:RemoveChild target="{textarea1}"/>
		</mx:State>


		<mx:State name="SolexaSamplesState" >
			<mx:SetProperty target="{textarea1}" name="htmlText">
				<mx:value><![CDATA[Instructions<br>  1.  Mandatory: Fill in the following highlighted fields:  sample name and concentration<br>  2.  Optional: Any annotation characteristic that you selected from the previous screen appears on this screen <br>       as a highlighted column. Please type desired information under the highlighted field with the annotation header.<br>  3.  Optional: Provide a short description of your sample in the non-highlighted description field.<br>  4.  After completing all line items, click the 'Next' button at the bottom of the page to proceed.]]></mx:value>
			</mx:SetProperty>
			<mx:SetProperty target="{textarea1}" name="editable" value="false"/>
		</mx:State>
		<mx:State name="SolexaSamplesEditState" basedOn="SamplesEditState" >
		</mx:State>
		<mx:State name="SolexaSamplesAdminState" basedOn="SamplesAdminState" >
			<mx:RemoveChild target="{addSampleButton}"/>
			<mx:RemoveChild target="{clearSamplesButton}"/>

		</mx:State>

		<mx:State name="QCSamplesState" >
			<mx:SetProperty target="{textarea1}" name="htmlText">
				<mx:value><![CDATA[Instructions<br>  1.  Mandatory: Fill in the following highlighted fields:  sample name and concentration.<br>  2.  Optional: Any annotation characteristic that you selected from the previous screen appears on this screen <br>       as a highlighted column. Please type desired information under the highlighted field with the annotation header.<br>  3.  Optional: Provide a short description of your sample in the non-highlighted description field.<br>  4.  After completing all line items, click the 'Next' button at the bottom of the page to proceed.]]></mx:value>
			</mx:SetProperty>
		</mx:State>
		<mx:State name="QCSamplesEditState" basedOn="SamplesEditState" >
		</mx:State>
		<mx:State name="QCSamplesAdminState" basedOn="SamplesAdminState" >
			<mx:RemoveChild target="{clearSamplesButton}"/>
			<mx:RemoveChild target="{addSampleButton}"/>
		</mx:State>

		<mx:State name="MicroarraySamplesState" >
		</mx:State>
		<mx:State name="MicroarraySamplesEditState" basedOn="SamplesEditState" >
		</mx:State>
		<mx:State name="MicroarraySamplesAdminState" basedOn="SamplesAdminState" >
			<mx:RemoveChild target="{addSampleButton}"/>
			<mx:RemoveChild target="{clearSamplesButton}"/>
		</mx:State>
		<mx:State name="MicroarrayOneColorSamplesState" basedOn="MicroarraySamplesState">
			<mx:SetProperty target="{textarea1}" name="htmlText">
				<mx:value><![CDATA[Instructions<br>  1.  Mandatory: Fill in the following highlighted fields:  sample name and concentration.<br>  2.  Optional: Any annotation characteristic that you selected from the previous screen appears on this screen <br>       as a highlighted column. Please type desired information under the highlighted field with the annotation header.<br>  3.  Optional: Provide a short description of your sample in the non-highlighted description field.<br>  4.  After completing all line items, click the 'Next' button at the bottom of the page to proceed.]]></mx:value>
			</mx:SetProperty>
		</mx:State>
		<mx:State name="CapSeqState">
			<mx:RemoveChild target="{showCCNumberCheckbox}"/>
			<mx:SetProperty target="{textarea1}" name="htmlText" value="Instructions&lt;br&gt;  1.  Mandatory: Fill in the highlighted sample name.&lt;br&gt;  2.  Optional: Provide a short description of your sample in the non-highlighted description field.&lt;br&gt;  3.  After completing all line items, click the 'Next' button at the bottom of the page to proceed."/>
			<mx:SetProperty target="{textarea1}" name="height" value="64"/>
			<mx:SetProperty target="{textarea1}" name="width" value="500"/>
		</mx:State>
		<mx:State name="FragAnalState">
			<mx:RemoveChild target="{showCCNumberCheckbox}"/>
			<mx:SetProperty target="{textarea1}" name="htmlText" value="Instructions&lt;br&gt;  1.  Mandatory: Fill in the highlighted sample name.&lt;br&gt;  2.  Optional: Provide a short description of your sample in the non-highlighted description field.&lt;br&gt;  3.  After completing all line items, click the 'Next' button at the bottom of the page to proceed."/>
			<mx:SetProperty target="{textarea1}" name="height" value="64"/>
			<mx:SetProperty target="{textarea1}" name="width" value="500"/>
		</mx:State>
		<mx:State name="MitSeqState">
			<mx:RemoveChild target="{showCCNumberCheckbox}"/>
			<mx:SetProperty target="{textarea1}" name="htmlText" value="Instructions&lt;br&gt;  1.  Mandatory: Fill in the highlighted sample name.&lt;br&gt;  2.  Optional: Provide a short description of your sample in the non-highlighted description field.&lt;br&gt;  3.  After completing all line items, click the 'Next' button at the bottom of the page to proceed."/>
			<mx:SetProperty target="{textarea1}" name="height" value="64"/>
			<mx:SetProperty target="{textarea1}" name="width" value="500"/>
		</mx:State>
		<mx:State name="CherryPickState">
			<mx:RemoveChild target="{showCCNumberCheckbox}"/>
			<mx:SetProperty target="{textarea1}" name="htmlText" value="Instructions&lt;br&gt;  1.  Mandatory: Fill in the highlighted sample name.&lt;br&gt;  2.  Optional: Provide a short description of your sample in the non-highlighted description field.&lt;br&gt;  3.  After completing all line items, click the 'Next' button at the bottom of the page to proceed."/>
			<mx:SetProperty target="{textarea1}" name="height" value="64"/>
			<mx:SetProperty target="{textarea1}" name="width" value="500"/>
		</mx:State>
		<mx:State name="IScanState">
			<mx:RemoveChild target="{showCCNumberCheckbox}"/>
			<mx:SetProperty target="{textarea1}" name="htmlText" value="Instructions&lt;br&gt;  1.  Mandatory: Fill in the highlighted sample name.&lt;br&gt;  2.  Optional: Provide a short description of your sample in the non-highlighted description field.&lt;br&gt;  3.  After completing all line items, click the 'Next' button at the bottom of the page to proceed."/>
			<mx:SetProperty target="{textarea1}" name="height" value="64"/>
			<mx:SetProperty target="{textarea1}" name="width" value="500"/>
			<mx:SetProperty target="{textarea1}" name="visible" value="{parentDocument.request.@idRequest == 0}"/>
			<mx:SetProperty target="{textarea1}" name="includeInLayout" value="{parentDocument.request.@idRequest == 0}"/>
			<mx:SetEventHandler target="{samplesGrid}" name="itemFocusIn" handler="countSamples()"/>
			<mx:SetEventHandler target="{samplesGrid}" name="itemClick" handler="countSamples()"/>
			<mx:SetEventHandler target="{samplesGrid}" name="itemEditBegin" handler="countSamples()"/>
		</mx:State>
		<mx:State name="SequenomState">			
			<mx:SetProperty target="{textarea1}" name="htmlText" value="Instructions&lt;br&gt;  1.  Mandatory: Fill in the highlighted sample name.&lt;br&gt;  2.  Optional: Provide a short description of your sample in the non-highlighted description field.&lt;br&gt;  3.  After completing all line items, click the 'Next' button at the bottom of the page to proceed."/>
			<mx:SetProperty target="{textarea1}" name="height" value="64"/>
			<mx:SetProperty target="{textarea1}" name="width" value="500"/>
			<mx:SetProperty target="{textarea1}" name="visible" value="{parentDocument.request.@idRequest == 0}"/>
			<mx:SetProperty target="{textarea1}" name="includeInLayout" value="{parentDocument.request.@idRequest == 0}"/>
			<mx:SetEventHandler target="{samplesGrid}" name="itemFocusIn" handler="countSamples()"/>
			<mx:SetEventHandler target="{samplesGrid}" name="itemClick" handler="countSamples()"/>
			<mx:SetEventHandler target="{samplesGrid}" name="itemEditBegin" handler="countSamples()"/>
			<mx:SetProperty target="{showCCNumberCheckbox}" name="label" value="Link to itBioPath samples using CC Number"/>
			<mx:SetProperty target="{showCCNumberCheckbox}" name="width" value="287"/>
		</mx:State>
		<mx:State name="ClinicalSequenomState" basedOn="SequenomState">
			<mx:SetProperty target="{showCCNumberCheckbox}" name="selected" value="true"/>
			<mx:SetProperty target="{showCCNumberCheckbox}" name="enabled" value="false"/>
		</mx:State>
		
	</mx:states>
	
</mx:Canvas>
