<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%" 
	xmlns:views="views.*"   
	xmlns:experiment="views.experiment.*"  
	xmlns:util="views.util.*" 
	verticalGap="0" borderThicknessTop="0">
	   
  
   
   <mx:HTTPService  
    id="getRequest" 
    url="GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequest(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>


   <mx:HTTPService  
    id="getNewProject" 
    url="GetProject.gx"
    destination="getProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetNewProject(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get new project', event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idProject>0</idProject>    	
    </mx:request>
  </mx:HTTPService>

  
 <mx:Script>
 	<![CDATA[
 	import mx.collections.ArrayCollection;
 	import mx.core.IContainer;
 	import mx.rpc.events.ResultEvent;
    import mx.managers.PopUpManager;
	import mx.containers.TitleWindow;
	import views.experiment.ProjectDetailWindow;
	import views.util.DownloadHints;
	import mx.core.IFlexDisplayObject;



    [Bindable]
    public var selectedExperiment:Object;
    
    private var selectedIdRequest:int;

    private var projectDetailWindow:ProjectDetailWindow;
        
        
	public function checkSecurity():void { 
		if (parentApplication.isGuestMode()) {
			theViews.removeChild(this.trackView);
			theViews.removeChild(this.visibilityView);
		}
	}

        
    public function getFullName(item:Object, col:int):String {
    	return item.@ownerLastName + ", " + item.@ownerFirstName;
    }
    
    public function sortFullName(item1:Object, item2:Object):int {
    	var name1:String  = getFullName(item1, 0);
    	var name2:String  = getFullName(item2, 0);
    	
    	if (name1.toUpperCase() > name2.toUpperCase()) {
    		return 1;
    	} else if (name2.toUpperCase() > name1.toUpperCase()) {
    		return -1;
    	} else {
    		return 0;
    	}
    }

    public function sortRequestNumber(item1:Object, item2:Object):int {
    	var n1:String  = item1.@requestNumber;
    	var n2:String  = item2.@requestNumber;
    	
    	var number1:Number = -1;
    	var number2:Number = -1;
    	
    	var tokens:Array = n1.split("R");
    	if (tokens.length > 0) {
    		number1 = tokens[0];	
    	} else {
    		number1 = Number(n1);
    	}
    	tokens = n2.split("R");
    	if (tokens.length > 0) {
    		number2 = tokens[0];	
    	} else {
    		number2 = Number(n2);
    	}
    	
    	
    	if (number1 > number2) {
    		return 1;
    	} else if (number2 > number1) {
    		return -1;
    	} else {
    		return 0;
    	}
    }

    public function getRequestKind(item:Object, col:int):String {
    	var de:XMLList = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', item.@codeRequestCategory);
    	if (de.length() == 1) {
	    	return de[0].@display;
    	} else {
    		return "";
    	}
    }
    public function getExperimentKind(item:Object, col:int):String {
    	if (item.@codeMicroarrayCategory == "") {
    		return getRequestKind(item, col);
    	} else {
	    	var de:XMLList = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.MicroarrayCategory', item.@codeMicroarrayCategory);
	    	if (de.length() == 1) {
		    	return de[0].@display;    		
	    	} else {
	    		return getRequestKind(item, col);
	    	}
    	}
    }
    
    public function sortExperimentKind(item1:Object, item2:Object):int {
    	var buf1:String = getExperimentKind(item1, 0);
    	var buf2:String = getExperimentKind(item2, 0);
    	
    	if (buf1 > buf2) {
    		return 1;
    	} else if (buf2 > buf1) {
    		return -1;
    	} else {
    		return 0;
    	}
    }
    
   
    
  	public function refreshDownloadList():void {
		if (theViews.selectedChild == downloadView) {
			downloadView.getRequestDownloadList.send(getBrowseParameters());
			downloadView.theTab.selectedChild = downloadView.folderView;			
		}
	}
	
  	public function refreshDownloadListForExperiment():void {
		var params:Object = new Object();
		params.requestNumber = parentDocument.selectedExperiment.@number;
		downloadView.getRequestDownloadList.send(params);
	
	}
	
	public function refreshTrackList():void {
		if (theViews.selectedChild == trackView) {
			
			if (trackView.progressList != null) {
				trackView.progressList.removeAll();
				trackView.progressList.refresh();
			}
			trackView.getRequestProgressList.send(getBrowseParameters());
			trackView.getRequestProgressSolexaList.send(getBrowseParameters());
			
		}		
	}
	
	private function getBrowseParameters():Object {
		var params:Object = new Object();
		if (parentDocument.selectedIdProject != null) {
			params.idProject = parentDocument.selectedIdProject;
		}
		params.idLab = parentDocument.selectedIdLab;
		if (parentDocument.currentState == 'AdminState') {
		    if (parentDocument.selectedIdLab == null && parentDocument.browseLabCombo.selectedItem != null) {
				params.idLab = parentDocument.browseLabCombo.selectedItem.@idLab;
			}
			if (parentDocument.browseUserCombo.selectedItem != null) {
				params.idAppUser = parentDocument.browseUserCombo.selectedItem.@idAppUser;
			}
		} else  {
			if (parentDocument.myExperimentsCheckbox.selected) {
				params.idAppUser = parentApplication.getIdAppUser();
			}				
		}
		if (parentDocument.lastWeekCheckbox.selected) {
			params.lastWeek = 'Y';
		}
		if (parentDocument.lastMonthCheckbox.selected) {
			params.lastMonth = 'Y';
		}
		if (parentDocument.lastYearCheckbox.selected) { 
			params.lastYear = 'Y';
		}
		if (parentDocument.publicExperimentsOtherGroupsCheckbox.selected) {
			params.publicExperimentsInOtherGroups = 'Y';
		}
		params.isMicroarray  = this.parentDocument.MicroarrayCheckbox.selected ? "Y" : "N";
		params.isSolexa      = this.parentDocument.SolexaCheckbox.selected ? "Y" : "N";
		params.isBioanalyzer = this.parentDocument.BioanalyzerCheckbox.selected ? "Y" : "N";
		
		return params;					
	}
	
	public function refreshVisibilityList():void {
		if (theViews.selectedChild == visibilityView) {
			visibilityView.checkSecurity();
		}
	}
	
    
    private function getGridRowNumber(item:Object,col:int):String
    {
       var x:int = browseList.getItemIndex(item) + 1;
       return String(x);
    } 
  	
  	private function onExperimentRowSelected():void {
		showExperimentDetail(experimentList.selectedItem.@idRequest);
  	}
  	
  	public function showExperimentDetail(idRequest:int):void {
  		selectedIdRequest = idRequest;

		var parms:Object = new Object();
		parms.idRequest = selectedIdRequest;
		getRequest.send(parms);  		
  	}

  	private function onGetRequest(event:ResultEvent):void {
		selectedExperiment = getRequest.lastResult.Request.(@idRequest == selectedIdRequest);
		parentDocument.selectedExperiment = selectedExperiment;
		parentDocument.theViews.selectedChild = parentDocument.detailView;
		parentDocument.detailView.setupForm(parentDocument.selectedExperiment);
	}

	private function onViewSwitch():void {
		
		this.refreshDownloadList();
		this.refreshTrackList();
		this.refreshVisibilityList();
		
		refreshButtonStack();
		refreshFilterView();
		filterList();
		

	}
	
	public function refreshFilterView():void {
		if (theViews.selectedChild == projectDetailView) {
			filterListView.visible = false;
		} else {
			filterListView.visible = true;
		}
	}
	
    
	public function refreshButtonStack():void {
		if (parentApplication.canSubmitRequests(parentDocument.selectedIdLab)) {
			parentDocument.newProjectButton.enabled = true;
		} else {
			parentDocument.newProjectButton.enabled = false;
		}
		if (theViews.selectedChild == experimentListView ) {
			buttonStack.selectedChild = browseButtonView;				
		} else if (theViews.selectedChild == projectDetailView) {
			buttonStack.selectedChild = saveProjectButtonView;
		} else if (theViews.selectedChild == trackView) {
			buttonStack.selectedChild = trackButtonView;
		} else if (theViews.selectedChild == visibilityView) {
			buttonStack.selectedChild = saveVisibilityButtonView;
		} else if (theViews.selectedChild == downloadView) {
			if (downloadView.theTab.selectedIndex == 0) {
				buttonStack.selectedChild = downloadFoldersButtonView;			
			} else {
				buttonStack.selectedChild = downloadFilesButtonView;
			}
		}
		
	}
		

	
	
	public function filterList():void {
		if (theViews.selectedChild == experimentListView ||
		    theViews.selectedChild == visibilityView) {
			browseList.filterFunction = parentDocument.filterExperimentList;
			browseList.refresh();
		} else if (theViews.selectedChild == downloadView) {
			downloadView.downloadList.filterFunction = parentDocument.filterExperimentList;
			downloadView.downloadList.refresh();
		} else if (theViews.selectedChild == this.trackView) {
			trackView.progressList.filterFunction = parentDocument.filterExperimentList;
			trackView.progressList.refresh();
		}
		
	}
	
	public function clearFilter():void {
		if (theViews.selectedChild == experimentListView ||
		    theViews.selectedChild == visibilityView) {
			browseList.filterFunction = null;
		} else if (theViews.selectedChild == downloadView) {
			downloadView.downloadList.filterFunction = null;
		} else if (theViews.selectedChild == this.trackView) {
			trackView.progressList.filterFunction =null;
		}
	}
	 
	
	
	public function showNewProjectWindow():void {
		if (parentApplication.canSubmitRequests(parentDocument.selectedIdLab)) {
			getNewProject.send();		
		} else {
			mx.controls.Alert.show("You are not able to add projects in this group.");
		}
	}

	private function onGetNewProject(event:ResultEvent):void {
		if (getNewProject.lastResult.name() == "OpenProjectList") {
			 parentDocument.selectedProject = getNewProject.lastResult.Project.(@idProject == 0);
			 parentDocument.selectedProject.@idAppUser = parentApplication.getIdAppUser();
			 parentDocument.selectedProject.@idLab = parentDocument.selectedIdLab;
			 this.projectDetailWindow = ProjectDetailWindow(PopUpManager.createPopUp(this, ProjectDetailWindow, true));
			 this.projectDetailWindow.projectDetailView.experimentDesignEntries.refresh();
			 this.projectDetailWindow.projectDetailView.experimentFactorEntries.refresh();
			 
			 var selectedLabNode:Object = parentApplication.getLabList.lastResult.Lab.(@idLab == parentDocument.selectedIdLab);
			 this.projectDetailWindow.labCombo.selectedItem = selectedLabNode;
			 
			 PopUpManager.centerPopUp(this.projectDetailWindow);		
			
		} else {
			mx.controls.Alert.show(getNewProject.lastResult..ACTMESSAGE.@TEXT, "Get new project failed");
		}
	}
	

	
	public function getExperimentIcon(codeRequestCategory:String):Class {
		var theIcon:Class = parentApplication.iconExperiment;
		switch(codeRequestCategory){  
			case 'QC': 
				theIcon = parentApplication.iconQC; 
				break; 
			case 'SOLEXA': 
				theIcon = parentApplication.iconSolexa; 
				break; 
			default: 
				theIcon = parentApplication.iconExperiment;	
		}
		return theIcon;
	}
	
	private function showDownloadHints():void {
		var hints:IFlexDisplayObject = DownloadHints(PopUpManager.createPopUp(this, DownloadHints, true));
		PopUpManager.centerPopUp(hints);			 		
	}


 	]]>
 </mx:Script>
 
    <mx:XMLListCollection id="browseList" source="{parentDocument.browseTree.selectedItem..Request}"/>
 
		

<mx:VBox width="100%" height="100%" verticalGap="0" paddingLeft="0" paddingBottom="0" paddingRight="0" paddingTop="0">
 	<mx:VBox width="100%"  verticalGap="0" paddingTop="2">


	        <mx:HBox id="filterListView"  width="100%" horizontalAlign="right" horizontalGap="0">
		        <mx:HBox horizontalGap="0" paddingTop="0" paddingRight="0" horizontalAlign="right" paddingLeft="2" verticalAlign="middle">
			        <mx:Label text="Experiment #"/>
			        <mx:ComboBox dataProvider="{parentDocument.requestNumbers}" id="requestNumberCombo" change="filterList()" width="80" >					    		
			        </mx:ComboBox> 
		        </mx:HBox>
	        	
	        </mx:HBox>




	        <mx:TabBar dataProvider="{theViews}" 
	        	itemClick="onViewSwitch()" 
	        	useHandCursor="true" paddingBottom="0" paddingTop="2" height="25" styleName="formTabBar">
	        </mx:TabBar>
 					    
	</mx:VBox>

		        
	<mx:VBox width="100%" height="100%" styleName="formTabBody"  paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4" verticalGap="0">
		<mx:ViewStack id="theViews"  paddingTop="0" width="100%" height="100%"  paddingLeft="0">
		       <mx:VBox id="experimentListView" width="100%" height="100%" 
		       	label="Experiments" paddingLeft="4" paddingBottom="4" paddingRight="4" paddingTop="4">
			       <mx:DataGrid  id="experimentList" 
			       	dataProvider="{browseList}"  
			       	width="100%" height="100%"  			       	 
			       	itemDoubleClick="onExperimentRowSelected()" 
			       	doubleClickEnabled="true">
			         <mx:columns>
			            <mx:DataGridColumn   minWidth="28" width="28" headerText="#"  sortCompareFunction="sortRequestNumber">
			                <mx:itemRenderer>
			                    <mx:Component >
			                        <mx:HBox  horizontalGap="0"  >
			                          <mx:Image id="experimentImage"  
			                          	source="{(data.@codeRequestCategory == 'QC' ? parentApplication.iconQC : (data.@codeRequestCategory == 'SOLEXA' ? parentApplication.iconSolexa : parentApplication.iconExperiment))}" >
			                    	 </mx:Image> 
			                           <mx:Label id="requestNumber" text="{data.@requestNumber}">
			                           </mx:Label>
			                        </mx:HBox>
			                    </mx:Component>
			                </mx:itemRenderer>
			            </mx:DataGridColumn> 
				       	<mx:DataGridColumn headerText="Date" width="20" dataField="@requestCreateDateDisplay"/>
				        <mx:DataGridColumn headerText="Requester" width="40" labelFunction="getFullName" sortCompareFunction="sortFullName"/>
				       	<mx:DataGridColumn headerText="Project" width="40" dataField="@projectName"/>
				       	<mx:DataGridColumn headerText="Experiment Kind" width="40" labelFunction="getExperimentKind" sortCompareFunction="sortExperimentKind" />
				       	<mx:DataGridColumn headerText="Microarray" width="100" dataField="@slideProductName"/>
			            <mx:DataGridColumn width="10" headerText="Analysis?" >
			                <mx:itemRenderer>
			                    <mx:Component >
			                        <mx:HBox  horizontalAlign="center" horizontalGap="1" >
			                          <mx:Image source="{data.@analysisNames != '' ? parentApplication.iconCheck : ''}">
			                    	 </mx:Image> 
			                        </mx:HBox>
			                    </mx:Component>
			                </mx:itemRenderer>
			            </mx:DataGridColumn> 
				       	<mx:DataGridColumn headerText="Analysis Names" width="40" dataField="@analysisNames"/>
			         </mx:columns>
			       </mx:DataGrid> 	    
		       </mx:VBox>
			       
				<experiment:ExperimentDownloadView id="downloadView" 
					label="Downloads" 
					 borderStyle="none">
				</experiment:ExperimentDownloadView>
				
	 			<experiment:ExperimentTrackView id="trackView" label="Progress"  >
				</experiment:ExperimentTrackView>
				
	 			<experiment:ExperimentVisibilityView id="visibilityView" label="Visibility">
				</experiment:ExperimentVisibilityView>
				
				<experiment:ProjectDetailView id="projectDetailView" label="Project"  >
			     </experiment:ProjectDetailView>   
		</mx:ViewStack>
			
	</mx:VBox>	    	 
	
</mx:VBox>		     
		
	<mx:ControlBar width="100%" >
		<mx:HBox height="100%" verticalAlign="middle" width="100%" horizontalAlign="left" horizontalGap="0">
			<mx:ViewStack  id="buttonStack"  width="100%" >
	            <mx:HBox horizontalAlign="left" id="browseButtonView" horizontalGap="2" width="100%" height="100%">
 					<mx:Button  visible="false"/>
 	            </mx:HBox>
	            <mx:HBox  verticalAlign="middle"  horizontalAlign="right" id="browseProjectButtonView">
	            </mx:HBox>
	            <mx:HBox horizontalAlign="right" id="saveProjectButtonView" horizontalGap="2" verticalAlign="middle">
			        <util:DirtyNote id="dirtyProject"/>
		            <mx:Button id="saveProjectButton" label="Save" 
		            	icon="@Embed('../../assets/action_save.gif')" disabledIcon="@Embed(source='../../assets/save_disable.png')" 
		            	click="projectDetailView.save()"  toolTip="Save project">
		                  </mx:Button>
		            
	            </mx:HBox>
	            <mx:HBox  verticalAlign="middle" horizontalAlign="left" id="trackButtonView" horizontalGap="2">
	                <mx:Button label="Button" visible="false"/>
	            </mx:HBox>
	        	<mx:HBox  verticalAlign="middle" horizontalAlign="right" id="saveVisibilityButtonView" height="100%">
			        <util:DirtyNote id="dirtyVisibility"/>
		        	<mx:Button label="Save" id="saveVisibilityButton"
		        		icon="@Embed('../../assets/action_save.gif')" disabledIcon="@Embed(source='../../assets/save_disable.png')" 
		        		click="visibilityView.save()"  visible="true" toolTip="Save visibility for project and experiments">
		        	      </mx:Button>
	        	</mx:HBox>
	            <mx:HBox  verticalAlign="middle" horizontalAlign="left" id="downloadFoldersButtonView">
		            <mx:Button id="downloadFoldersButton" 
		            	click="downloadView.downloadFolders()" 
		            	icon="@Embed('../../assets/icon_download.gif')" 
		            	toolTip="Download selected folders"
		            	label="Download" 
		            	visible="true"/>
		            <mx:CheckBox  id="includeJPEGFilesCheckBox" label="Include JPEG files" selected="true"/>
		            <mx:CheckBox  id="includeTIFFFilesCheckBox" label="Include TIFF files" selected="false"/>
		            <mx:Spacer width="20"/>
		            <mx:LinkButton  label="having trouble downloading?" textDecoration="underline" click="showDownloadHints()"/>
	            </mx:HBox>		                    
	            <mx:HBox  verticalAlign="middle" horizontalAlign="left" id="downloadFilesButtonView" height="100%">
		            <mx:Button id="downloadFilesButton" 
		             	click="downloadView.downloadFiles()" 
		             	icon="@Embed('../../assets/icon_download.gif')" 
		             	toolTip="Download selected files"
		             	label="Download"/>
		            <mx:LinkButton  label="having trouble downloading?" textDecoration="underline" click="showDownloadHints()"/>
	            </mx:HBox>		                    
	        </mx:ViewStack>
		</mx:HBox>
	</mx:ControlBar>
	

</mx:Panel>



