<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"     
	label="Experiments" width="100%" height="100%" 
	xmlns:views="views.*" xmlns:experiment="views.experiment.*"
	cornerRadius="10"  >


  <mx:HTTPService  
    id="getProjectRequestList" 
    url="GetProjectRequestList.gx"
    destination="getProjectRequestList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProjectRequestList(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to get project request list', event)"
    method="POST" 
    useProxy="false">
    <mx:request>
            <idLab>{browseLabCombo.selectedItem.@idLab}</idLab> 
            <showSamples>N</showSamples>
            <showCategory>N</showCategory>
            <showMyLabsAlways>{currentState == "AdminState" ? 'N' : 'Y'}</showMyLabsAlways>
            <searchPublicProjects>{searchPublicProjectsCheckbox.selected ? 'Y' : 'N'}</searchPublicProjects>
    </mx:request>
   </mx:HTTPService>
   
   <mx:HTTPService  
    id="getRequest" 
    url="GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="false"
    result="onGetRequest(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to get request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>

   
   <mx:HTTPService  
    id="getRequestForDownload" 
    url="GetRequest.gx"
    destination="getRequestForDownload"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequestForDownload(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to get request for download', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
   
   <mx:HTTPService  
    id="deleteRequest" 
    url="DeleteRequest.gx"
    destination="deleteRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onDeleteRequest(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to delete request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>

   
   <mx:HTTPService  
    id="getProject" 
    url="GetProject.gx"
    destination="getProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProject(event)"
    method="POST"
 	fault="parentApplication.onFailHttpRequest('Failed to get project', event)"
    useProxy="false">
    <mx:request>
      <idProject>{selectedIdProject}</idProject>
    </mx:request>
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="saveRequestProject" 
    url="SaveRequestProject.gx"
    destination="saveRequestProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveRequestProject(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to reassign experiment project', event)"
    method="POST"
    useProxy="false">    
  </mx:HTTPService>


 
	   <mx:Script> 
        <![CDATA[
        import mx.controls.Alert;
        import mx.managers.DragManager;
        import mx.core.DragSource;
        import mx.events.DragEvent;
        import mx.events.CloseEvent;
        import mx.controls.Menu;
        import mx.collections.ArrayCollection;

        import mx.rpc.events.ResultEvent;   
        import mx.collections.XMLListCollection;
        
        public var selectedIdRequest:Object;
        public var selectedRequestNumber:Object;
        
        [Bindable]
        public var selectedExperiment:Object;
        
        [Bindable]
        public var selectedProject:Object;
        
        public var selectedIdLab:String;
        
        public var selectedNode:Object;
        
        private var dropProject:Object;
        private var dragRequest:Object;
        
        [Bindable]
        public var selectedIdProject:String;
        
        [Bindable]
    	public var rowCountMessage:String = new String();
    	

    	private var showDownloads:Boolean = false;
    

	 	public static const millisecondsPerDay:int = 1000 * 60 * 60 * 24;
	 	public static const millisecondsPerWeek:Number = 1000 * 60 * 60 * 24 * 7;
	 	public static const millisecondsPerMonth:Number = 1000 * 60 * 60 * 24 * 30;
	 	public static const millisecondsPerYear:Number = 1000 * 60 * 60 * 24 * 365;

		public function checkDirty():void {
		}
		
		public function checkSecurity():void {
			this.browseView.checkSecurity();
			if (parentApplication.hasPermission("canAccessAnyObject")) {
				currentState = "AdminState";
			} else if (parentApplication.isGuestMode()) {
				currentState = "GuestState";
			} else {
				currentState = "";
			}
		}

        private function getBrowseTreeLabel(item:Object):String {
        	var label:String = item.@label;
        	
        	if (item.name() == "Request") {
        		label = item.@requestNumber;
        	}
        	return label;
        }
        
       
        
        private function onGetRequestDownloadList(event:ResultEvent): void {        	
        	setResultsCount();
        }
        
        private function onGetProjectRequestList(event:ResultEvent): void {  
        	if (getProjectRequestList.lastResult.Lab.length() == 0) {
        		browseTree.visible = false;
        	} else {
        		browseTree.visible = true;
        	}
        	
        	var call:Object = event.token;
        	if (call.marker == "showDownloads") {
        		showDownloads = true;
        	} else {
        		showDownloads = false;
        	}

        	
        	
        	callLater(expandAndReselectTree);    	
        	
	    }

		private function expandAndReselectTree():void {
			
			//if (selectedRequestNumber != null) {
	        //	expandAllNodes();          		
        	//} else {
        	//	expandLabNodes();
        	//}
        	expandAllNodes();
			callLater(reselectTreeItem);
		}
	    
	    
	    private function reselectTreeItem():void {
			selectTreeNode();
	    	
	    }
	    
	    //private function selectTreeNode():void {
	    //	browseTree.selectedItem = selectedNode;
	    //	onBrowseTree();
	    //}
	    private function selectTreeNode():void {
	    	var idx:int = -1; 
    		var pos:int = 0;
    		var lab:Object;
    		var project:Object;
    		var request:Object; 
    		// If actionscript sets selectedItem (rather than selectedIndex) on tree,
    		// there is a flex bug that causes an extra node to be inserted under
    		// selected item.  To work around this problem, I'm iterating through
    		// open items to determine the selected index.  This is clumsy code,
    		// but it woirks!
    		if (selectedRequestNumber != null) {
		    	for each (lab in getProjectRequestList.lastResult..Lab) {
		    		pos++;	    	
		    		for each(project in lab.Project) {
		    			pos++;
		    			for each( request in project.Request) {
		    				pos++;
		    				if (request.@requestNumber == selectedRequestNumber) {
		    					idx = --pos;
		    					
		    					// We came from the main gnomex app, so select the lab from the lab combo
		    					if (this.currentState == "AdminState") {
		    						for each(var l:Object in  parentApplication.promptedLabList) {
		    							if (l.@idLab == request.@idLab) {
		    								this.browseLabCombo.selectedItem = l;
		    								break;	
		    							}
		    						}
		    					}
		    					break;
		    				} 
		    			}
		    			if (idx != -1) {
		    				break;
		    			} 
		    		}
		    		if (idx != -1) {
		    			break;
		    		}
    			}    			
    		} else if (selectedIdProject != null) {
		    	for each (lab in getProjectRequestList.lastResult..Lab) {	   
		    		pos++; 	
		    		for each(project in lab.Project) {
		    			pos++;
		    			if (project.@idProject == selectedIdProject) {
		    				idx = --pos;
		    				break;
		    			}
		    			for each( request in project.Request) {
		    				pos++;
		    			}
			    		if (idx != -1) {
			    			break;
			    		}
		    		}
		    		if (idx != -1) {
		    			break;
		    		}
    			}    			
    		} else if (selectedIdRequest != null) {
		    	for each (lab in getProjectRequestList.lastResult..Lab) {
		    		pos++;	    	
		    		for each(project in lab.Project) {
		    			pos++;
		    			for each( request in project.Request) {
		    				pos++;
		    				if (request.@idRequest == selectedIdRequest) {
		    					idx = --pos;
		    					break;
		    				} 
		    			}
		    			if (idx != -1) {
		    				break;
		    			} 
		    		}
		    		if (idx != -1) {
		    			break;
		    		}
    			}    			
    		} else if (selectedIdLab != null) {
    			for each (lab in getProjectRequestList.lastResult..Lab) {	    	
		    		pos++;
    				if (selectedIdLab == lab.@idLab) {
    					idx = --pos;
    					break;
    				}
		    		for each(project in lab.Project) {
		    			pos++;
		    			for each(request in project.Request) {
		    				pos++;
		    			}
			    		if (idx != -1) {
			    			break;
			    		}
		    		}
		    		if (idx != -1) {
		    			break;
		    		}
    			}    			
    		}
	    	
	    	if (idx != -1) {
	    		// Select the tree item
	    		browseTree.selectedIndex = idx;
	    	} else {
	    		// Otherwise, just select first lab
	    		browseTree.selectedIndex = 0;
	    	}
			onBrowseTree();
	    	
	    }	    
	    
        
        
	    private function expandLabNodes():void
  		{
  			browseTree.expandItem(getProjectRequestList.lastResult, true);
  			for each(var lab:Object in getProjectRequestList.lastResult..Lab) {
  				browseTree.expandItem(lab, true);
  			}
  			browseTree.validateNow();
  			treeContainer.validateNow();
  		}

	    public function expandAllNodes():void
  		{
  			browseTree.expandItem(getProjectRequestList.lastResult, true);
  			for each(var lab:Object in getProjectRequestList.lastResult..Lab) {
  				browseTree.expandItem(lab, true);
  			}
  			for each(var project:Object in getProjectRequestList.lastResult..Project) {
  				browseTree.expandItem(project, true);
  			}
  			browseTree.validateNow();
  			treeContainer.validateNow();
  		}
  		
  		
  		private function collapseAllBrowseNodes():void {
  			browseTree.openItems = [];
  			browseTree.validateNow();
  		}
  		
	    public function setResultsCount():void {
	    	if (browseTree.selectedItem == null) {
	    		rowCountMessage = "";
	    	} else if (browseTree.selectedItem..Request.length() == 1) {
		    	rowCountMessage = "(" + browseTree.selectedItem..Request.length() + " experiment)";
	    	} else {
			   	rowCountMessage = "(" + browseTree.selectedItem..Request.length() + " experiments)";
	    	}
	    }
    

		private function onBrowseTree():void {
			setResultsCount();
			
			browseView.dirtyProject.resetDirty();
			browseView.dirtyVisibility.resetDirty();

			selectedProject = null;
			selectedIdProject = null;
			selectedIdLab = null;
			
			deleteProjectButton.enabled = false;
			newProjectButton.enabled = false;
			
			if (browseTree.selectedItem == null) {
				return;
			}
			
			if (browseTree.selectedItem.name() == 'Request') {
				detailView.title = "Experiment " + browseTree.selectedItem.@requestNumber;
				selectedIdRequest = browseTree.selectedItem.@idRequest;
				var parms:Object = new Object();
				parms.idRequest = selectedIdRequest;
				getRequest.send(parms);
				selectedIdLab = null;
				selectedIdProject = null;
				selectedRequestNumber = null;
				
			} else {												
				selectedIdLab = browseTree.selectedItem.@idLab.toString();
				
				if (browseTree.selectedItem.name() == 'Project') {
					browseView.title = browseTree.selectedItem.@projectName + "\t" + rowCountMessage;
					selectedIdProject = browseTree.selectedItem.@idProject.toString();
					if (!browseView.theViews.contains(browseView.projectDetailView)) {
						browseView.theViews.addChild(browseView.projectDetailView);
					}
					getProject.send();
					
				} else {
					browseView.title =  browseTree.selectedItem.@labName + "\t" + rowCountMessage;;
					selectedIdProject = null;
					if (browseView.theViews.contains(browseView.projectDetailView)) {
						browseView.theViews.removeChild(browseView.projectDetailView);
					}
					browseView.buttonStack.selectedChild = browseView.browseButtonView;
					browseView.refreshButtonStack();
					
				}
				
				theViews.selectedIndex=0;
			} 
			
			browseView.requestNumberCombo.selectedIndex = -1;
			browseView.browseList.refresh();
			refreshRequestNumbers(browseView.browseList);
			browseView.refreshVisibilityList();
			theViews.visible = true;
			
			
		}
		
		public function showExperimentDownloads():void {
			
			selectedIdProject = browseTree.selectedItem.parent().@idProject;
			selectTreeNode();
			
			for each (var item:Object in requestNumbers) {
				if (item.data == selectedExperiment.@number) {
					browseView.requestNumberCombo.selectedItem = item;
					break;
				}
			}
			
			
			theViews.selectedChild = browseView;
			browseView.theViews.selectedChild = browseView.downloadView;
			browseView.downloadView.theTab.selectedChild = browseView.downloadView.folderView;
			browseView.refreshButtonStack();
			

		}
		
		public function refreshRequestNumbers(experimentList:XMLListCollection):void {
	    	requestNumbers.removeAll();
	    	browseView.requestNumberCombo.selectedIndex = -1;
	
			var blankItem:Object = new Object();
			blankItem.data = "";
			blankItem.label = "";
	    	requestNumbers.addItem(blankItem);
	    	
	    	for(var x:Number = 0; x < experimentList.length; x++) {
	    		var item:Object = experimentList.getItemAt(x, 0);
	    		
	    		var found:Boolean = false;
	    		for(var i:Number = 0; i < requestNumbers.length; i++) {
	    			if (requestNumbers.getItemAt(i).label == item.@requestNumber) {
	    				found = true;
	    				break;
	    			}
	    		}
	    		if (found == false) {
	    			var newItem:Object = new Object();
	    			newItem.data = item.@requestNumber;
	    			newItem.label = item.@requestNumber;
	    			requestNumbers.addItem(newItem);
	    		}
	    	}
	    	requestNumbers.refresh();
	    }		
		
		public function sortRequestNumbers(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var num1:String = obj1.label;
				var num2:String = obj2.label;
				
				if (num1 == 'Other') {
					return 1;
				} else if (num2 == 'Other') {
					return  -1;
				} else {
					if (num1 < num2) {
						return -1;
					} else if (num1 > num2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}

		public function filterExperimentList(item:Object):Boolean {
			var experimentDate:Date = new Date(item.@createDate.toString());
			
        	var keep:Boolean = true;
        	if (browseView.requestNumberCombo.selectedItem != null && browseView.requestNumberCombo.selectedItem.label != "") {
        		keep = false; 
        		if (item.@requestNumber == browseView.requestNumberCombo.selectedItem.label) {
        			keep = true;
        		}
        	}   
        	if (keep) {
	        	if (browseView.myExperimentsCheckbox.selected == true) {
	        		keep = false;
	        		if (item.@idAppUser == parentApplication.getIdAppUser()) {
	        			keep = true;
	        		}
	        	}
        	}    
        	if (keep) {
        		if (browseView.lastWeekCheckbox.selected == true) {
        			keep = false;
					var oneWeekAgo:Date = new Date();
					oneWeekAgo.setTime(oneWeekAgo.getTime() - millisecondsPerWeek);
        			if (experimentDate >= oneWeekAgo) {
        				keep = true;
        			}
        		}
        	} 	
        	if (keep) {
        		if (browseView.lastMonthCheckbox.selected == true) {
        			keep = false;
					var oneMonthAgo:Date = new Date();
					oneMonthAgo.setTime(oneMonthAgo.getTime() - millisecondsPerMonth);
        			if (experimentDate >= oneMonthAgo) {
        				keep = true;
        			}
        		}
        	}
        	if (keep) {
        		if (browseView.lastYearCheckbox.selected == true) {
        			keep = false;
					var oneYearAgo:Date = new Date();
					oneYearAgo.setTime(oneYearAgo.getTime() - millisecondsPerYear);
        			if (experimentDate >= oneYearAgo) {
        				keep = true;
        			}
        		}
        	}  	
        	return keep;
        }
        
 

		
		private function onGetRequest(event:ResultEvent):void {
			if (getRequest.lastResult.name() == "SUCCESS") {
				Alert.show("Experiment not found");
				parentApplication.theViews.selectedIndex = 0;
        		return;
        	}
			if (getRequest.lastResult.name() != "OpenRequestList") {
        		Alert.show(getRequest.lastResult..ACTMESSAGE.@TEXT);
        		return;
        	}
        	

        	
		    if (this.showDownloads) {
		    	this.showExperimentDownloads();
		    	theViews.visible = true;
		    	this.showDownloads = false;
		    	return;
		    }

			if (selectedIdRequest != null) {
				selectedExperiment = getRequest.lastResult.Request.(@idRequest == selectedIdRequest);			
			} else {
				selectedExperiment = getRequest.lastResult.Request.(@number == selectedRequestNumber);
				
				var params:Object = new Object();
				params.idProject = selectedExperiment.@idProject;
				params.showSamples = "N";
				params.showCategory = "N";
				params.searchPublicProjects = 'N';
				getProjectRequestList.send(params);
				
			    detailView.title = "Experiment " + selectedRequestNumber;
			    
			    
			}
		    theViews.selectedChild = detailView;
			detailView.setupForm(this.selectedExperiment);

		    theViews.visible = true;
		}

		private function onGetRequestForDownload(event:ResultEvent):void {
			if (getRequestForDownload.lastResult.name() != "OpenRequestList") {
        		Alert.show(getRequestForDownload.lastResult..ACTMESSAGE.@TEXT);
        		return;
        	}			
			selectedExperiment = getRequestForDownload.lastResult.Request.(@number == selectedRequestNumber);
			
			var params:Object = new Object();
			params.idProject = selectedExperiment.@idProject;
			params.showSamples = "N";
			params.showCategory = "N";
			var call:Object = getProjectRequestList.send(params);
			call.marker = "showDownloads";
		    theViews.visible = true;
		}
		
		private function onGetProject(event:ResultEvent):void {
			selectedProject = getProject.lastResult.Project.(@idProject == selectedIdProject);
			browseView.refreshDownloadList();
			browseView.refreshTrackList();
			browseView.refreshVisibilityList();
			
			browseView.refreshButtonStack();
			if (!browseView.theViews.contains(browseView.projectDetailView)) {
				browseView.theViews.addChild(browseView.projectDetailView);
			}
			browseView.projectDetailView.checkSecurity();
			browseView.projectDetailView.setupDataListeners();

		}

		public function getTreeIcon(item:Object):Class {
				if (item.name() == "Lab") {
					return parentApplication.iconGroup;
				} else if (item.name() == "Project") {
					return parentApplication.iconProject;
				} else if (item.name() == "RequestCategory") {
					return parentApplication.iconCategory;
				} else if (item.name() == "Request" && item.@codeRequestCategory == "QC") {
					return parentApplication.iconQC;
				} else if (item.name() == "Request" && item.@codeRequestCategory == "SOLEXA") {
					return parentApplication.iconSolexa;
				}else {
					return parentApplication.iconExperiment;
				}
		}

		public function getTreeLabel(item:Object):String {
				if (item.name() == "Request") {
					return item.@requestNumber;
				} else {
					return item.@label;
				}
		}
		
		public function refreshExperimentsAfterDrag():void {
			this.browseTree.selectedItem = null;
			selectedIdProject = null;
			selectedIdLab = null;
			if (this.selectedRequestNumber != null) {
				var params:Object = new Object();
				params.idProject = selectedExperiment.@idProject;
				params.showSamples = "N";
				params.showCategory = "N";
				params.searchPublicProjects = 'N';
				getProjectRequestList.send(params);
				
			} else {
				getProjectRequestList.send();
			}

		}
		
		public function refreshExperiments():void {
			if (this.selectedRequestNumber != null) {
				var params:Object = new Object();
				params.idProject = selectedExperiment.@idProject;
				params.showSamples = "N";
				params.showCategory = "N";
				params.searchPublicProjects = 'N';
				getProjectRequestList.send(params);
				
			} else {
				getProjectRequestList.send();
			}

		}
		public function initializeExperiments():void {
			if (parentApplication.hasPermission('canAccessAnyObject')) {
			} else {
				if (getProjectRequestList.lastResult == null ||
				    selectedRequestNumber != null) {
				    collapseAllBrowseNodes();
				    selectedRequestNumber = null;
					refreshExperiments();
				}
				
			}
		}
		
	  
	  	private function onDragDrop( event:DragEvent ) : void
		{
		   // Disallow drop operation if user is guest
		   if (parentApplication.isGuestMode()) {
				event.preventDefault();
		       	event.target.hideDropFeedback(event);
		       	DragManager.showFeedback(DragManager.NONE);		   	
		       	return;
		   }
	       var ds:DragSource = event.dragSource;
	       var dropTarget:Tree = Tree(event.currentTarget);
	
	       // retrieve the data associated with the "items" format. This will be the data that
	       // the dragInitiator has copied into the DragSource.
	       var items:Array = ds.dataForFormat("treeItems") as Array;
	
	       // determine where in the tree the drop occurs and select that node by the index; followed by 
	       // retrieving the node itself. 
	       var r:int = browseTree.calculateDropIndex(event);
	       browseTree.selectedIndex = r;
	       var node:XML = browseTree.selectedItem as XML;
	       var p:*;
	
	
	       if (node.name() == "Project") {
	       		p = node;
	       } else if (node.name() == "Request") {
	       		p = node.parent();
	       }else {
	       		//ignore drop operations on lab.
	       		event.preventDefault();
		       	event.target.hideDropFeedback(event);
		       	DragManager.showFeedback(DragManager.NONE);		 
		       	return;
	       }
	
	       // taking all of the items in the DragSouce, insert them into the 
	       // tree using parent p. 
	       if (p != null) {
		       for(var i:Number=0; i < items.length; i++) {
		       	if (items[i].name() == "Request") {
		             browseTree.dataDescriptor.addChildAt(p, items[i], r+i);
		             
		             dropProject = p;
		             dragRequest = items[i];
		           	 promptToReassignProject();
		             
		       	} 
		       }
	       	
	       }	       
		}
		
	    public function promptToReassignProject():void {
	   		var message:String = "Reassign experiment " + dragRequest.@requestNumber +
	               " to project " + dropProject.@projectName + "?";
	
			Alert.show(message, 
						null, 
						(Alert.YES | Alert.NO), this, 
						onPromptToReassignProject);
			
		}
		
		private function onPromptToReassignProject(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
	            selectedProject = dropProject;
	            selectedIdProject = dropProject.@idProject;
	            selectedIdLab = dropProject.@idLab;
	            
	            var params:Object = new Object();
	            params.idRequest = dragRequest.@idRequest;
	            params.idProject = dropProject.@idProject;
	                  		
           		saveRequestProject.send(params);
            }
        }

       	private function onSaveRequestProject(event:ResultEvent): void {
   			dropProject = null;
   			dragRequest = null;
       		if (saveRequestProject.lastResult.name() == "SUCCESS") {
				this.refreshExperimentsAfterDrag();
			
        	} else {
        		Alert.show(saveRequestProject.lastResult..ACTMESSAGE.@TEXT);
        	}	    	
	    }
	    
	    public function deleteExperiment():void {
	    	var params:Object = new Object();
	    	params.idRequest = selectedExperiment.@idRequest;
	    	deleteRequest.send(params);
	    }
	    
	    private function onDeleteRequest(event:ResultEvent): void {
	    	if (deleteRequest.lastResult.name() == "SUCCESS") {
	    		this.refreshExperiments();
	    		theViews.selectedChild = browseView;
	    	} else {
	    		Alert.show(deleteRequest.lastResult..ACTMESSAGE.@TEXT);
	    	}
	    }

		
       ]]>
    </mx:Script>
   	  <mx:ArrayCollection id="requestNumbers"  sort="{requestNumberSorter}"/>
	  <mx:Sort id="requestNumberSorter" compareFunction="sortRequestNumbers" unique="true"/>
    
	<mx:DateFormatter id="dateFormatter" formatString="YYYYMMDD"/>

    
	<mx:HDividedBox height="100%" width="100%">
	
	
			
			<mx:Panel label="Experiments" width="220" height="100%" title="Experiments" id="navPanel" >
				<mx:VBox id="navContainer" width="100%" height="100%" verticalGap="0" paddingTop="4" label="Experiments">

					<mx:VBox id="treeContainer"  dropShadowEnabled="true" width="100%" height="100%" paddingLeft="2" verticalGap="0" >
						<mx:Tree width="100%" height="100%" 
							dataProvider="{getProjectRequestList.lastResult}" 
							showRoot="false" 
							id="browseTree" click="onBrowseTree();" 
							borderStyle="none"
							labelField="@label"
							labelFunction="getTreeLabel"
					        dragEnabled="true" 
					        dropEnabled="true" 
					        dragMoveEnabled="true"
							dragDrop="onDragDrop(event);" 
							iconFunction="getTreeIcon" selectionColor="#FBF5B5" rollOverColor="#CECECE" backgroundAlpha="1"></mx:Tree>
						<mx:CheckBox label="Show public experiments" id="searchPublicProjectsCheckbox"/>
						
					</mx:VBox>

				</mx:VBox>
					<mx:ControlBar width="100%" verticalAlign="top">
						<mx:VBox verticalGap="0">
						        <mx:LinkButton label="New project" id="newProjectButton" click="browseView.showNewProjectWindow()" 
						        	icon="@Embed('../../assets/folder_add.png')" 
						        	toolTip="New project..." 
						        	enabled="false" 
						        	disabledIcon="@Embed(source='../../assets/folder_add_disable.png')" textDecoration="underline"/>
						        <mx:LinkButton  label="Delete project" id="deleteProjectButton" icon="@Embed('../../assets/folder_delete.png')" 
						        	click="browseView.projectDetailView.promptToDeleteProject()"
						        	toolTip="Delete project" enabled="false" textDecoration="underline">
						        	<mx:disabledIcon>@Embed(source='../../assets/folder_delete_disable.png')</mx:disabledIcon>
						        </mx:LinkButton>
							
						</mx:VBox>
						<mx:VBox verticalGap="0">
						        <mx:LinkButton label="Refresh" icon="@Embed(source='../../assets/action_refresh.gif')" click="refreshExperiments()" textDecoration="underline"/>
						</mx:VBox>
								
					</mx:ControlBar>
			</mx:Panel> 



	   

		
	     <mx:ViewStack id="theViews" creationPolicy="all" visible="true" width="100%" height="100%">

	        <experiment:ExperimentBrowseView id="browseView"  width="100%" height="100%">
	        </experiment:ExperimentBrowseView>

	        <experiment:ExperimentDetailView id="detailView" width="100%" height="100%">
	        </experiment:ExperimentDetailView>
	        


         </mx:ViewStack>
		
	</mx:HDividedBox>
	
	<mx:states>
		<mx:State name="GuestState">
			<mx:RemoveChild  target="{searchPublicProjectsCheckbox}"/>
		</mx:State>
		
		<mx:State name="AdminState">
			<mx:AddChild position="firstChild"  relativeTo="{navContainer}">
					<mx:VBox verticalGap="0" width="100%">
				        <mx:Label id="groupLabel" visible="true" text="Select group to show experiments:" paddingBottom="0"/>
						<mx:ComboBox id="browseLabCombo" 
							labelField="@name"
							dataProvider="{parentApplication.promptedLabList}"
							 change="selectedIdLab=null;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;getProjectRequestList.send()"  
							 visible="true"  width="200">
						</mx:ComboBox>				
				        <mx:Spacer height="6"/>
						
					</mx:VBox>
			</mx:AddChild>
			<mx:RemoveChild  target="{searchPublicProjectsCheckbox}"/>
		</mx:State>

		
	</mx:states>
	

    
</mx:Canvas>
