<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"     
	label="Experiments" width="100%" height="100%" 
	xmlns:views="views.*"
	xmlns:experiment="views.experiment.*"
	xmlns:util="views.util.*"
	backgroundAlpha="0"
	xmlns:renderers="views.renderers.*"
	creationPolicy="all"  show="init()"
>
     

  <mx:HTTPService  
    id="getProjectRequestList" 
    url="GetProjectRequestList.gx"
    destination="getProjectRequestList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProjectRequestList(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to get project request list', event)"
    method="POST" 
    useProxy="false">
    <mx:request>
    </mx:request>
   </mx:HTTPService>
   
   <mx:HTTPService  
    id="getRequest" 
    url="GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="false"
    result="onGetRequest(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to get request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>

   <mx:HTTPService  
    id="getRequestFromNav" 
    url="GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="false"
    result="onGetRequestFromNav(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to get request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
   
   <mx:HTTPService  
    id="getRequestForDownload" 
    url="GetRequest.gx"
    destination="getRequestForDownload"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequestForDownload(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to get request for download', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
   
   <mx:HTTPService  
    id="deleteRequest" 
    url="DeleteRequest.gx"
    destination="deleteRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onDeleteRequest(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to delete request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>

	
  <mx:HTTPService  
		id="submitRequest" 
		url="ChangeRequestStatus.gx"
		destination="submitRequest"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onSubmitRequest(event)"
		fault="parentApplication.onFailHttpRequest('Failed to submit request', event)"
		method="POST"
		useProxy="false">
   </mx:HTTPService>
   
   <mx:HTTPService  
    id="getProject" 
    url="GetProject.gx"
    destination="getProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProject(event)"
    method="POST"
 	fault="parentApplication.onFailHttpRequest('Failed to get project', event)"
    useProxy="false">
    <mx:request>
      <idProject>{selectedIdProject}</idProject>
	  <idLab>{selectedIdLab}</idLab>
    </mx:request>
  </mx:HTTPService>
	
	<mx:HTTPService  
		id="getProjectForLookup" 
		url="GetProject.gx"
		destination="getProject"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetProjectForLookup(event)"
		method="POST"
		fault="parentApplication.onFailHttpRequest('Failed to get project', event)"
		useProxy="false">
		<mx:request>
			<idProject>{selectedIdProject}</idProject>
			<idLab>{selectedIdLab}</idLab>
		</mx:request>
	</mx:HTTPService>
  
  <mx:HTTPService  
    id="saveRequestProject" 
    url="SaveRequestProject.gx"
    destination="saveRequestProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveRequestProject(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to reassign experiment project', event)"
    method="POST"
    useProxy="false">    
  </mx:HTTPService>

   <mx:HTTPService  
    id="getLab" 
    url="GetLab.gx" 
    destination="getLab" 
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetLab(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get group', event)"
    method="POST"
    useProxy="false">
    <mx:request>
    	<idLab>{this.browseLabCombo.selectedItem.@idLab}</idLab>
    </mx:request>
   </mx:HTTPService>

 
	   <mx:Script> 
        <![CDATA[
        import mx.collections.ArrayCollection;
        import mx.collections.XMLListCollection;
        import mx.controls.Alert;
        import mx.controls.Menu;
        import mx.core.DragSource;
        import mx.events.CloseEvent;
        import mx.events.DragEvent;
        import mx.managers.DragManager;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;
		import views.util.PromptXMLListCollection;
        
        public var selectedIdRequest:Object;
        public var selectedRequestNumber:Object;
        
        [Bindable]
		public var showEditView:Boolean = false;

		[Bindable]	
        public var selectedExperiment:Object;
        
        [Bindable]
        public var selectedProject:Object;
        
		[Bindable]
        public var selectedIdLab:String;
		
		public var showPromptToUpload:Boolean = false;
        
        public var selectedNode:Object;
			
		private var refreshCount:int = 0;
        
       [Bindable]
        private var appUsers:XMLListCollection;
        private var appUserSort:Sort;

		[Bindable]
		public var promptedMyCoreFacilities:PromptXMLListCollection;

        private var dropProject:Object;
        private var dragRequest:Object;
        
        [Bindable]
        public var selectedIdProject:String;
        
        [Bindable]
    	public var rowCountMessage:String = new String();
    	

    	private var showDownloads:Boolean = false;
    	
    	public var shortcutToDownloadTab:Boolean = false;
    	public var shortcutToExperimentListTab:Boolean = false;

	 	public static const millisecondsPerDay:int = 1000 * 60 * 60 * 24;
	 	public static const millisecondsPerWeek:Number = 1000 * 60 * 60 * 24 * 7;
	 	public static const millisecondsPerMonth:Number = 1000 * 60 * 60 * 24 * 30;
	 	public static const millisecondsPerYear:Number = 1000 * 60 * 60 * 24 * 365;
	 	
	 	public var isInitialized:Boolean = false;

		public function checkDirty():void {
		}
		
		private function init():void {
			checkSecurity();
			
			// Only initialize experiments if the user clicked on
			// Experiments link in top nav bar. (Bypass
			// if looking up experiment based on its number.)
			if (selectedRequestNumber == null && (this.selectedIdProject == null || this.selectedIdLab == null)) {
				
            	initializeExperiments();
   			} 
   			
   			if (this.shortcutToDownloadTab || this.shortcutToExperimentListTab) {
   				if (this.currentState == "AdminState") {
   					this.refreshExperiments();
   				}
   			} else {
   				if (this.selectedRequestNumber != null) {
   					if (parentApplication.launchExperimentDownloads()) {
   					    refreshExperimentForLookupDownload();
   					} else {
						refreshExperimentsForLookup();
   					}
   				} else if (this.selectedIdProject != null && this.selectedIdLab != null) {
					refreshExperimentsForProjectFolderLookup();
				}
   			}
   			if (this.shortcutToDownloadTab) {
        		this.experimentViews.selectedChild = this.browseView;
        		this.browseView.theViews.selectedChild = this.browseView.downloadView;
        	} else if (this.shortcutToExperimentListTab) {
        		this.experimentViews.selectedChild = this.browseView;
        		this.browseView.theViews.selectedChild = this.browseView.experimentListView;
        	}
			
			var emptyNode:XML = <CoreFacility displayName = '' idCoreFacility='' value='' label=''/>;
			promptedMyCoreFacilities = new PromptXMLListCollection(emptyNode, new XMLListCollection(parentApplication.myCoreFacilities));
			

			isInitialized = true;

		}
			
		public function refreshExperimentsForProjectFolderLookup():void {
			if (this.selectedIdLab != null && this.selectedIdProject != null) {
				getProjectForLookup.send();
			}
		}
		
		public function refreshExperimentsForLookup():void {
			if (this.selectedRequestNumber != null) {
				var params:Object = new Object();
				params.requestNumber = selectedRequestNumber;
				getRequestFromNav.send(params);
			}
		}
		
		public function refreshExperimentForLookupDownload():void {
			if (this.selectedRequestNumber != null) {
				var parms:Object = new Object();
				parms.requestNumber = selectedRequestNumber;
				this.getRequestForDownload.send(parms);
			}
		}
		
		public function checkSecurity():void {
			if (this.browseView != null) {
				this.browseView.checkSecurity();
			}
			if (parentApplication.hasPermission("canAccessAnyObject")) {
				currentState = "AdminState";
			} else if (parentApplication.currentState == "GuestState") {
				currentState = "GuestState"; 
			} else {
				currentState = "";
			}
		}

        private function getBrowseTreeLabel(item:Object):String {
        	var label:String = item.@label;
        	
        	if (item.name() == "Request") {
        		label = item.@requestNumber;
        	}
        	return label;
        }
        
       
        
        private function onGetRequestDownloadList(event:ResultEvent): void {        	
        	setResultsCount();
        }
        
        private function onGetProjectRequestList(event:ResultEvent): void {
			messageLabel.text = "";
        	if (getProjectRequestList.lastResult.name() != "ProjectRequestList") {
        		Alert.show(getProjectRequestList.lastResult..ACTMESSAGE.@TEXT);
        		browseTree.visible = false;
        		this.treeExpansionStack.visible = false;
        		return;
        	}
			
			refreshCount++;

			
			if (getProjectRequestList.lastResult.@message != "") {
				if (!parentApplication.isAdminState && !parentApplication.isBillingAdminState) {
					Alert.show(getProjectRequestList.lastResult.@message);
				}
				messageLabel.text = "(" + getProjectRequestList.lastResult.@message + ")";
			} else {
				messageLabel.text =  "(" + getProjectRequestList.lastResult.@experimentCount +  " experiments)"; 
			}
        	  
        	if (getProjectRequestList.lastResult..Request.length() == 0) {
				if (getProjectRequestList.lastResult..Project.length() == 0) {
	        		browseTree.visible = false;
    	    		this.treeExpansionStack.visible = false;
				} else {
					browseTree.visible = true;
					this.treeExpansionStack.visible = true;
				}
				
				if (this.selectedIdProject == null) {
					// If this is the first refresh and no experiments were returned, ask if search
					// should be broadened
					if ((currentState == null || currentState == "") && myExperimentsCheckbox.selected && refreshCount == 1) {
						Alert.show("No experiments found.  Do you want to broaden the list to include all experiments from your lab?", "", 					
							Alert.YES | Alert.NO, this, onPromptToShowLabExperiments);
					} else if ((currentState == null || currentState == "") && this.myLabsExperimentsCheckbox && refreshCount == 2) {
						Alert.show("No experiments found.  Do you want to broaden the list to include all experiments?", "", 
							Alert.YES | Alert.NO, this, onPromptToShowAllExperiments);
					}
				}
        	} else {
        		browseTree.visible = true;
        		this.treeExpansionStack.visible = true;
        	}
        	
        	var call:Object = event.token;
        	if (call.marker == "showDownloads") {
        		showDownloads = true;
        	} else {
        		showDownloads = false;
        	}

        	
        	
        	callLater(expandAndReselectTree);    	
        	
	    }
			
		private function onPromptToShowLabExperiments(event:CloseEvent):void {
			if (event.detail == Alert.YES) {
				this.myExperimentsCheckbox.selected = false;
				this.myLabsExperimentsCheckbox.selected =  true;
				this.publicExperimentsOtherGroupsCheckbox.selected = false;
				this.userAllExperimentsCheckbox.selected = false;
				this.refreshExperiments();
			}
		}
			
		private function onPromptToShowAllExperiments(event:CloseEvent):void {
			if (event.detail == Alert.YES) {
				this.myExperimentsCheckbox.selected = false;
				this.myLabsExperimentsCheckbox.selected = false;
				this.publicExperimentsOtherGroupsCheckbox.selected = false;
				this.userAllExperimentsCheckbox.selected = true;
				this.refreshExperiments();
			}
		}

		private function expandAndReselectTree():void {
			
        	expandAllNodes();
			this.treeExpansionStack.selectedIndex = 1;        		
        	
        	callLater(reselectTreeItem);
        	
        	if (this.shortcutToDownloadTab) {
        		this.experimentViews.selectedChild = this.browseView;
        		this.browseView.theViews.selectedChild = this.browseView.downloadView;
        		this.shortcutToDownloadTab = false;
        	} else if (this.shortcutToExperimentListTab) {
        		this.experimentViews.selectedChild = this.browseView;
        		this.browseView.theViews.selectedChild = this.browseView.experimentListView;
        		this.shortcutToExperimentListTab = false;
        	}
		}
	    
	    
	    private function reselectTreeItem():void {
			selectTreeNode();
	    	
	    }
	    
	    private function selectTreeNode():void {
	    	var idx:int = -1; 
    		var pos:int = 0;
    		var lab:Object;
    		var project:Object;
    		var request:Object; 
    		// If actionscript sets selectedItem (rather than selectedIndex) on tree,
    		// there is a flex bug that causes an extra node to be inserted under
    		// selected item.  To work around this problem, I'm iterating through
    		// open items to determine the selected index.  This is clumsy code,
    		// but it woirks!
    		if (selectedRequestNumber != null) {
		    	for each (lab in getProjectRequestList.lastResult..Lab) {
		    		pos++;	    	
		    		for each(project in lab.Project) {
		    			pos++;
		    			for each( request in project.Request) {
		    				pos++;
		    				if (request.@requestNumber == String(selectedRequestNumber).toUpperCase()) {
		    					idx = --pos;
		    					
		    					// We came from the main gnomex app, so select the lab from the lab combo
		    					if (this.currentState == "AdminState") {
		    						for each(var l:Object in  parentApplication.promptedLabList) {
		    							if (l.@idLab == request.@idLab) {
		    								this.browseLabCombo.selectedItem = l;
		    								break;	
		    							}
		    						}
		    					}
		    					break;
		    				} 
		    			}
		    			if (idx != -1) {
		    				break;
		    			} 
		    		}
		    		if (idx != -1) {
		    			break;
		    		}
    			}    			
    		} else if (selectedIdProject != null) {
		    	for each (lab in getProjectRequestList.lastResult..Lab) {	   
		    		pos++; 	
		    		for each(project in lab.Project) {
		    			pos++;
		    			if (project.@idProject == selectedIdProject) {
		    				idx = --pos;
		    				break;
		    			}
		    			for each( request in project.Request) {
		    				pos++;
		    			}
			    		if (idx != -1) {
			    			break;
			    		}
		    		}
		    		if (idx != -1) {
		    			break;
		    		}
    			}    			
    		} else if (selectedIdRequest != null) {
		    	for each (lab in getProjectRequestList.lastResult..Lab) {
		    		pos++;	    	
		    		for each(project in lab.Project) {
		    			pos++;
		    			for each( request in project.Request) {
		    				pos++;
		    				if (request.@idRequest == selectedIdRequest) {
		    					idx = --pos;
		    					break;
		    				} 
		    			}
		    			if (idx != -1) {
		    				break;
		    			} 
		    		}
		    		if (idx != -1) {
		    			break;
		    		}
    			}    			
    		} else if (selectedIdLab != null) {
    			for each (lab in getProjectRequestList.lastResult..Lab) {	    	
		    		pos++;
    				if (selectedIdLab == lab.@idLab) {
    					idx = --pos;
    					break;
    				}
		    		for each(project in lab.Project) {
		    			pos++;
		    			for each(request in project.Request) {
		    				pos++;
		    			}
			    		if (idx != -1) {
			    			break;
			    		}
		    		}
		    		if (idx != -1) {
		    			break;
		    		}
    			}    			
    		}
	    	
	    	if (idx != -1) {
	    		// Select the tree item
	    		browseTree.selectedIndex = idx;
	    		browseTree.scrollToIndex(browseTree.selectedIndex);
	    	} else {
	    		// Otherwise, just select first lab
	    		browseTree.selectedIndex = 0;
	    	}
			onBrowseTree();
	    	
	    }	    
	    
        
        
	    private function expandLabNodes():void
  		{
  			browseTree.expandItem(getProjectRequestList.lastResult, true);
  			for each(var lab:Object in getProjectRequestList.lastResult..Lab) {
  				browseTree.expandItem(lab, true);
  			}
  			browseTree.validateNow();
  			treeContainer.validateNow();
  		}
  		
  		private function collapseProjectNodes():void {
  			for each(var project:Object in getProjectRequestList.lastResult..Project) {
  				browseTree.expandItem(project, false);
  			}
  			browseTree.validateNow();
  			treeContainer.validateNow();
  			
  		}

	    public function expandAllNodes():void
  		{
  			browseTree.expandItem(getProjectRequestList.lastResult, true);
  			for each(var lab:Object in getProjectRequestList.lastResult..Lab) {
  				browseTree.expandItem(lab, true);
  			}
  			for each(var project:Object in getProjectRequestList.lastResult..Project) {
  				browseTree.expandItem(project, true);
  			}
  			browseTree.validateNow();
  			treeContainer.validateNow();
  		}
  		
  		
  		private function collapseAllBrowseNodes():void {
  			if (browseTree == null || browseTree.openItems == null) {
  				return;
  			}
  			
  			browseTree.openItems = [];
  			browseTree.validateNow();
  		}
  		
	    public function setResultsCount():void {
	    	if (browseTree.selectedItem == null) {
	    		rowCountMessage = "";
	    	} else if (browseTree.selectedItem..Request.length() == 1) {
		    	rowCountMessage = "(" + browseTree.selectedItem..Request.length() + " experiment)";
	    	} else {
			   	rowCountMessage = "(" + browseTree.selectedItem..Request.length() + " experiments)";
	    	}
	    }
    

		private function onBrowseTree():void {
			setResultsCount();
			
			browseView.dirtyProject.resetDirty();
			browseView.dirtyVisibility.resetDirty();

			selectedProject = null;
			selectedIdProject = null;
			selectedIdLab = null;
			
			deleteProjectButton.enabled = false;
			newProjectButton.enabled = false;

			
			if (browseTree.selectedItem == null) {
				return; 
			} 
			
			if (browseTree.selectedItem.name() == 'Request') {
				var viewTitle:String = (browseTree.selectedItem.@isExternal == 'Y' ? 'External Experiment ' :  'Experiment ') + browseTree.selectedItem.@requestNumber;
				experimentDetailView.titleLabel.text = viewTitle;
				experimentDetailView.navBackButton.visible = false;
				experimentDetailView.navBackButton.includeInLayout = false;

				var editTitle:String = (browseTree.selectedItem.@isExternal == 'Y' ? 'Edit External Experiment ' :  'Edit Experiment ')+ browseTree.selectedItem.@requestNumber;
				if (experimentEditView != null && experimentEditView.titleLabel != null) {
					experimentEditView.titleLabel.text = editTitle;
				}

				selectedIdRequest = browseTree.selectedItem.@idRequest;
				var parms:Object = new Object();
				parms.idRequest = selectedIdRequest;
				this.enabled = false;	// disable selection while getting the request.
				getRequest.send(parms);
				selectedIdLab = null;
				selectedIdProject = null;
				selectedRequestNumber = null;
				
			} else {		
				selectedIdRequest = null;
				selectedRequestNumber = null;										
				selectedIdLab = browseTree.selectedItem.@idLab.toString();
				
				if (browseTree.selectedItem.name() == 'Project') {
					browseView.titleLabel.text = browseTree.selectedItem.@projectName + "\t" + rowCountMessage;
					selectedIdProject = browseTree.selectedItem.@idProject.toString();
					if (!browseView.theViews.contains(browseView.projectDetailView)) {
						browseView.theViews.addChild(browseView.projectDetailView);
					}
					getProject.send();
					
				} else {
					browseView.titleLabel.text =  browseTree.selectedItem.@label + "\t" + rowCountMessage;;
					selectedIdProject = null;
					if (browseView.theViews.contains(browseView.projectDetailView)) {
						browseView.theViews.removeChild(browseView.projectDetailView);
					}
					browseView.buttonStack.selectedChild = browseView.browseButtonView;
					browseView.refreshButtonStack();
					
					browseView.refreshDownloadList();
					browseView.refreshTrackList();
					browseView.refreshVisibilityList();
					
					experimentDetailView.detail.refreshDownloadList();
					
				}
				
				experimentViews.selectedIndex=0;
			} 
			
			browseView.requestNumberCombo.selectedIndex = -1;
			browseView.browseList.refresh();
			refreshRequestNumbers(browseView.browseList);
			browseView.refreshVisibilityList();
			experimentViews.visible = true;
			
			
		}
		
		public function showExperimentDownloads():void {
			browseView.reloadDownloadList();
			experimentViews.selectedChild = browseView;
			browseView.theViews.selectedChild = browseView.downloadView;
			browseView.refreshButtonStack();
		}
		
		public function refreshRequestNumbers(experimentList:XMLListCollection):void {
	    	requestNumbers.removeAll();
	    	browseView.requestNumberCombo.selectedIndex = -1;
	
			var blankItem:Object = new Object();
			blankItem.data = "";
			blankItem.label = "";
	    	requestNumbers.addItem(blankItem);
	    	
	    	for(var x:Number = 0; x < experimentList.length; x++) {
	    		var item:Object = experimentList.getItemAt(x, 0);
	    		
	    		var found:Boolean = false;
	    		for(var i:Number = 0; i < requestNumbers.length; i++) {
	    			if (requestNumbers.getItemAt(i).label == item.@requestNumber) {
	    				found = true;
	    				break;
	    			}
	    		}
	    		if (found == false) {
	    			var newItem:Object = new Object();
	    			newItem.data = item.@requestNumber;
	    			newItem.label = item.@requestNumber;
	    			requestNumbers.addItem(newItem);
	    		}
	    	}
	    	requestNumbers.refresh();
	    }		
		
		public function sortRequestNumbers(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var num1:String = obj1.label;
				var num2:String = obj2.label;
				
				if (num1 == 'Other') {
					return 1;
				} else if (num2 == 'Other') {
					return  -1;
				} else {
					if (num1 < num2) {
						return -1;
					} else if (num1 > num2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}

		public function filterExperimentList(item:Object):Boolean {
			var keep:Boolean = true;
        	if (browseView.requestNumberCombo.selectedItem != null && browseView.requestNumberCombo.selectedItem.label != "") {
        		keep = false; 
        		if (item.@requestNumber == browseView.requestNumberCombo.selectedItem.label) {
        			keep = true;
        		}
        	}   
        	return keep;
        }
        
 
		private function addDescriptionFieldToAnnotations(sc:XMLList, isSelected:Boolean):void {
			var scXML:XML = sc[0];
			var descNode:XML = <PropertyEntry idProperty="-1" name="Description" otherLabel="" isSelected="false" isActive="Y"/>;
			if(isSelected) {
				descNode.@isSelected = "true";
			}	
			scXML.appendChild(descNode);
		}          
		  
		private function onGetRequest(event:ResultEvent):void {
			this.enabled = true; // reenable browse after got request.
			if (getRequest.lastResult.name() == "SUCCESS") {
				if (selectedRequestNumber != null) {
					Alert.show("Experiment " + selectedRequestNumber + " not found");					
				} else {
					Alert.show("Experiment " + selectedIdRequest + " not found.");
				}
				parentApplication.theViews.selectedIndex = 0;
				selectedRequestNumber = null;
				selectedIdRequest = null;
        		return;
        	}
			if (getRequest.lastResult.name() != "OpenRequestList") {
        		Alert.show(getRequest.lastResult..ACTMESSAGE.@TEXT);
        		selectedRequestNumber = null;
				selectedIdRequest = null;
        		return;
        	}
        	

        	
		    if (this.showDownloads) {
		    	this.showExperimentDownloads();
		    	experimentViews.visible = true;
		    	this.showDownloads = false;
		    	return;
		    }

			if (selectedIdRequest != null) {
				if(getRequest.lastResult.Request.(@idRequest == selectedIdRequest).@isExternal == 'Y') {
					addDescriptionFieldToAnnotations(getRequest.lastResult.Request.(@idRequest == selectedIdRequest).PropertyEntries, 
						getRequest.lastResult.Request.(@idRequest == selectedIdRequest).@hasSampleDescription=="Y");			
				}	
				selectedExperiment = getRequest.lastResult.Request.(@idRequest == selectedIdRequest);			
			} else {
				selectedExperiment = getRequest.lastResult.Request.(@number == selectedRequestNumber);
				
				var params:Object = new Object();
				params.idProject = selectedExperiment.@idProject;
				params.showSamples = "N";
				params.showCategory = "N";
				params.searchPublicProjects = 'N';
				getProjectRequestList.send(params);
				
			    experimentDetailView.titleLabel.text = (selectedExperiment.@isExternal == 'Y' ? 'External Experiment ' :  'Experiment ') + selectedRequestNumber;
			    
			    
			}
			
			if (showEditView) {
				experimentViews.selectedChild = experimentEditView;
				experimentEditView.removeDataListeners();
				experimentEditView.setupEditForm(this.selectedExperiment);
				callLater(experimentEditView.setupDataListeners);
				showEditView = false;						
			} else {
			    experimentViews.selectedChild = experimentDetailView;
				experimentDetailView.detail.setupForm(this.selectedExperiment);
				if(showPromptToUpload) {
					promptToUpload();
				}
				
			}
	
			showPromptToUpload = false;

		    experimentViews.visible = true;
		}
					
		private function promptToUpload():void {
			if (parentApplication.isFDTSupported) {
				Alert.buttonWidth = 120; 
				Alert.yesLabel = "Normal upload";
				Alert.noLabel = "FDT upload";
				Alert.show( "Which upload mechanism do you want to use?\n(FDT is recommended for uploads exceeding 1 GB.)",
					"Ready to upload files",
					(Alert.YES | Alert.NO | Alert.CANCEL), this, 
					onPromptToUpload);
			} else {
				ExperimentEditView.showExperimentUploadWindow(DisplayObject(parentApplication.theBody), this.selectedExperiment, this.experimentEditView, this.browseView.downloadView);				
			}
			
		}
		
		private function onPromptToUpload(event:CloseEvent):void {
			Alert.yesLabel = "Yes";
			Alert.noLabel = "No";
			if (event.detail==Alert.YES) {
				ExperimentEditView.showExperimentUploadWindow(DisplayObject(parentApplication.theBody), this.selectedExperiment, this.experimentEditView, this.browseView.downloadView);				
			} else if (event.detail == Alert.NO) {
				ExperimentEditView.showExperimentUploadFDTWindow(DisplayObject(parentApplication.theBody), this.selectedExperiment);				
			}
		}						

		private function onGetRequestForDownload(event:ResultEvent):void {
			if (getRequestForDownload.lastResult.name() != "OpenRequestList") {
        		Alert.show(getRequestForDownload.lastResult..ACTMESSAGE.@TEXT);
        		return;
        	}			
			selectedExperiment = getRequestForDownload.lastResult.Request.(@number == selectedRequestNumber);
			
			var params:Object = new Object();
		    // For normal users, make sure we scope to the
			// correct level to show the experiment just looked up.
			if (currentState == null || currentState == "") {
				if (!parentApplication.isMyLab(selectedExperiment.@idLab)) {		
					// If this experiment is not in user's lab, search
					// other lab's public experiments.
					if (selectedExperiment.@codeVisibility == 'PUBLIC') {
						params.publicExperimentsInOtherGroups = "Y";
						this.publicExperimentsOtherGroupsCheckbox.selected = true;
					} else {
						this.myLabsExperimentsCheckbox.selected = true;
					}
				} else if (parentApplication.getIdAppUser() != selectedExperiment.@idAppUser) {
					// If this experiment is not owned by user, include
					// all lab's experiments, not just user's experiments.
					params.showMyLabsAlways = "Y";
					this.myLabsExperimentsCheckbox.selected = true;
				}
			} 
			params.idProject = selectedExperiment.@idProject;
			params.showSamples = "N";
			params.showCategory = "N";
			var call:Object = getProjectRequestList.send(params);
			call.marker = "showDownloads";
 		    experimentViews.visible = true;
		}
		
		private function onGetRequestFromNav(event:ResultEvent):void {
			if (getRequestFromNav.lastResult.name() == "SUCCESS") {
				if (selectedRequestNumber != null) {
					Alert.show("Experiment " + selectedRequestNumber + " not found.");
				} else {
					Alert.show("Experiment " + selectedIdRequest + " not found.");
				}
				selectedIdRequest = null;
				selectedRequestNumber = null;
				parentApplication.theViews.selectedIndex = 0;
        		return;
        	}
			if (getRequestFromNav.lastResult.name() != "OpenRequestList") {
        		Alert.show(getRequestFromNav.lastResult..ACTMESSAGE.@TEXT);
        		return;
        	}
        	

			if (selectedIdRequest != null) {
				selectedExperiment = getRequestFromNav.lastResult.Request.(@idRequest == selectedIdRequest);			
			} else {
				var selectedRequestNumberBase:String = String(selectedRequestNumber).toUpperCase();
				if (selectedRequestNumberBase.indexOf("R") > 0) {
					var tokens:Array = String(selectedRequestNumber).toUpperCase().split("R");
					if (tokens != null && tokens.length > 0) {
						selectedRequestNumberBase = tokens[0] + "R";
					}
				}
				
				var reg:RegExp = new RegExp(selectedRequestNumberBase, "i");
				selectedExperiment = getRequestFromNav.lastResult.Request.(reg["test"](@number));
				selectedRequestNumber = selectedExperiment.@number.toString();
			}
			
			var params:Object = new Object();
			params.idProject = selectedExperiment.@idProject;
			params.showSamples = "N";
			params.showCategory = "N";
			params.showEmptyProjectFolders = "N";

			// Need this workaround to prevent type #1009 error.
			this.browseTree.setFocus();
			
			// For normal users, make sure we scope to the
			// correct level to show the experiment just looked up.
			if (currentState == null || currentState == "") {
				if (!parentApplication.isMyLab(selectedExperiment.@idLab)) {		
					// If this experiment is not in user's lab, search
					// other lab's public experiments.
					if (selectedExperiment.@codeVisibility == 'PUBLIC') {
						params.publicExperimentsInOtherGroups = "Y";
						this.publicExperimentsOtherGroupsCheckbox.selected = true;
					} else {
						this.myLabsExperimentsCheckbox.selected = true;
					}
				} else if (parentApplication.getIdAppUser() != selectedExperiment.@idAppUser) {
					// If this experiment is not owned by user, include
					// all lab's experiments, not just user's experiments.
					params.showMyLabsAlways = "Y";
					this.myLabsExperimentsCheckbox.selected = true;
				}
			} 
			getProjectRequestList.send(params);
		}
		
		private function onGetProject(event:ResultEvent):void {
			selectedProject = getProject.lastResult.Project.(@idProject == selectedIdProject);
			refreshSelectedProject()
		}
			
		private function refreshSelectedProject():void {
			browseView.refreshDownloadList();
			browseView.refreshTrackList();
			browseView.refreshVisibilityList();
			
			browseView.refreshButtonStack();
			if (!browseView.theViews.contains(browseView.projectDetailView)) {
				browseView.theViews.addChild(browseView.projectDetailView);
			}
			browseView.projectDetailView.checkSecurity();
			browseView.projectDetailView.setupDataListeners();

		}
		
		private function onGetProjectForLookup(event:ResultEvent):void {
			selectedProject = getProjectForLookup.lastResult.Project.(@idProject == selectedIdProject);
			refreshSelectedProject();
			
			var params:Object = new Object();
			params.idProject = selectedIdProject;
			params.showSamples = "N";
			params.showCategory = "N";
			params.showEmptyProjectFolders = "Y";
			
			// Need this workaround to prevent type #1009 error.
			this.browseTree.setFocus();
			
			// For normal users, make sure we scope to the
			// correct level to show the empty project folder just looked up.
			if (currentState == null || currentState == "") {
				if (!parentApplication.isMyLab(selectedProject.@idLab)) {		
					params.publicExperimentsInOtherGroups = "Y";
					this.publicExperimentsOtherGroupsCheckbox.selected = true;
				}
			} else {
				// Make sure empty project folder will show.
				params.showMyLabsAlways = "Y";
				this.myLabsExperimentsCheckbox.selected = true;
			}
			getProjectRequestList.send(params);
		}

		public function getTreeLabel(item:Object):String {
				if (item.name() == "Request") {
					return item.@requestNumber + (item.@name != "" ? " - " + item.@name : "");
				} else {
					return item.@label;
				}
		}
		
		public function refreshExperimentsAfterDrag():void {
			this.browseTree.selectedItem = null;
			selectedIdProject = null;
			selectedIdLab = null;
			if (this.selectedRequestNumber != null) {
				var params:Object = new Object();
				params.idProject = selectedExperiment.@idProject;
				params.showSamples = "N";
				params.showCategory = "N";
				params.publicExperimentsInOtherGroups = 'N';
				getProjectRequestList.send(params);
				
			} else {
				
				getProjectRequestList.send(getBrowseParameters());
			}

		}
		
		public function getBrowseParameters():Object {
			var params:Object = new Object();
			
			if ( coreFacilityCombo != null && coreFacilityCombo.selectedItem != null ) {
				params.idCoreFacility = coreFacilityCombo.selectedItem.@value;
			} 
			if ( ccLookupText.text != '' ) {
				params.ccNumber = ccLookupText.text;
			}
			if (currentState == 'AdminState' && allExperimentsCheckbox.selected) {
				params.allExperiments = 'Y';
			} else {
				if (currentState == 'AdminState') {
					if (browseLabCombo.selectedItem != null) {
						params.idLab = browseLabCombo.selectedItem.@idLab;
					}
					if (browseUserCombo.selectedItem != null) {
						params.idAppUser = browseUserCombo.selectedItem.@idAppUser;
					}
				} else if (currentState != "GuestState") {
					if (myExperimentsCheckbox.selected) {
						params.idAppUser = parentApplication.getIdAppUser();
					}		
					if (this.userAllExperimentsCheckbox.selected) {
						params.allExperiments = 'Y';
					}
				}
				if (this.externalExperimentsOnlyCheckbox.selected) {
					params.isExternalOnly = 'Y';
				}

				if (lastWeekCheckbox.selected) { 
					params.lastWeek = 'Y'; 
				} else if (lastMonthCheckbox.selected) {
					params.lastMonth = 'Y';
				} else if (lastThreeMonthsCheckbox.selected) {
					params.lastThreeMonths = 'Y';
				} else if (lastYearCheckbox.selected) {
					params.lastYear = 'Y';
				}
				
				
				if (publicExperimentsOtherGroupsCheckbox.selected) {
					params.publicExperimentsInOtherGroups = 'Y';
				} else {
					params.publicExperimentsInOtherGroups = 'N';
				}
				if (currentState == 'AdminState' || 
					lastWeekCheckbox.selected || 
					lastMonthCheckbox.selected || 
					lastYearCheckbox.selected ||
					this.MicroarrayCheckbox.selected ||
					this.NextGenSeqCheckbox.selected ||
					this.BioanalyzerCheckbox.selected ) {
					params.showMyLabsAlways = 'N'; 
				} else {
					params.showMyLabsAlways = 'Y';
				}
				
				params.isMicroarray  = this.MicroarrayCheckbox.selected ? "Y" : "N";
				params.isNextGenSeq  = this.NextGenSeqCheckbox.selected ? "Y" : "N";
				params.isBioanalyzer = this.BioanalyzerCheckbox.selected ? "Y" : "N";

				params.isCapSeq      = this.CapSeqCheckbox.selected ? "Y" : "N";
				params.isMitSeq      = this.MitSeqCheckbox.selected ? "Y" : "N";
				params.isFragAnal    = this.FragAnalCheckbox.selected ? "Y" : "N";
				params.isCherryPick  = this.CherryPickingCheckbox.selected ? "Y" : "N";
				params.isIScan       = this.IScanCheckbox.selected ? "Y" : "N";

			}

			params.showEmptyProjectFolders = this.showEmptyProjectFolders.selected ? "Y" : "N";
			
			params.showSamples = 'N';
			params.showCategory = 'N';
			
			return params;
		}
		 
		public function resetSearchComponents():void {
			
			if (this.MicroarrayCheckbox == null) {
				return;
			}
			
			this.coreFacilityCombo.selectedItem = null;
			
			this.MicroarrayCheckbox.selected = false;
			this.NextGenSeqCheckbox.selected = false;
			this.BioanalyzerCheckbox.selected = false;
			
			this.lastMonthCheckbox.selected = false;
			this.lastWeekCheckbox.selected = false;
			this.lastYearCheckbox.selected = false;
			
			if (this.currentState == null) {
				this.myExperimentsCheckbox.selected = false;
				this.myLabsExperimentsCheckbox.selected = false;
				this.publicExperimentsOtherGroupsCheckbox.selected = false;
			} else if (this.currentState == "AdminState") {
				this.browseUserCombo.selectedItem = null;				
			}
		}
		
		public function refreshExperiments():void {
			this.ccLookupText.text = '';
			if (this.selectedRequestNumber != null) {
				var params:Object = new Object();
				params.idProject = selectedExperiment.@idProject;
				params.showSamples = "N";
				params.showCategory = "N";
				params.searchPublicProjects = parentApplication.isGuestMode() ? 'Y' : 'N';
				getProjectRequestList.send(params);
				
			} else {
				getProjectRequestList.send(getBrowseParameters());
			}

		}
		public function initializeExperiments():void {
			if (parentApplication.hasPermission('canAccessAnyObject')) {
			} else {
				if (getProjectRequestList.lastResult == null ||
				    selectedRequestNumber != null) {
				    collapseAllBrowseNodes();
				    selectedRequestNumber = null;
				    
				    if (currentState == "" || currentState == null) {
						var prop:String = "";
						prop = parentDocument.getProperty(parentApplication.PROPERTY_EXPERIMENT_DEFAULT_VIEW);
						if (prop != null) prop = prop.toLowerCase();
						if (prop == 'my lab') {
							this.myExperimentsCheckbox.selected = false;
							this.myLabsExperimentsCheckbox.selected = true;
							this.publicExperimentsOtherGroupsCheckbox.selected = false;
							this.userAllExperimentsCheckbox.selected = false;
						} else if (prop == 'all') {
							this.myExperimentsCheckbox.selected = false;
							this.myLabsExperimentsCheckbox.selected = false;
							this.publicExperimentsOtherGroupsCheckbox.selected = false;
							this.userAllExperimentsCheckbox.selected = true;
						} else if(parentApplication.manageLabList.length > 0) {
							this.myExperimentsCheckbox.selected = false;
							this.myLabsExperimentsCheckbox.selected = true;
							this.publicExperimentsOtherGroupsCheckbox.selected = false;
							this.userAllExperimentsCheckbox.selected = false;
						} else{
							this.myExperimentsCheckbox.selected = true;
							this.myLabsExperimentsCheckbox.selected = false;
							this.publicExperimentsOtherGroupsCheckbox.selected = false;
							this.userAllExperimentsCheckbox.selected = false;
						}
				    }
				    this.refreshExperiments();
				    
				}
				
			}
		}
		
	  
	  	private function onDragDrop( event:DragEvent ) : void
		{
		   // Disallow drop operation if user is guest
		   if (parentApplication.isGuestMode()) {
				event.preventDefault();
		       	event.target.hideDropFeedback(event);
		       	DragManager.showFeedback(DragManager.NONE);		   	
		       	return;
		   }
	       var ds:DragSource = event.dragSource;
	       var dropTarget:Tree = Tree(event.currentTarget);
	
	       // retrieve the data associated with the "items" format. This will be the data that
	       // the dragInitiator has copied into the DragSource.
	       var items:Array = ds.dataForFormat("treeItems") as Array;
	
	       // determine where in the tree the drop occurs and select that node by the index; followed by 
	       // retrieving the node itself. 
	       var r:int = browseTree.calculateDropIndex(event);
	       browseTree.selectedIndex = r;
	       var node:XML = browseTree.selectedItem as XML;
	       var p:*;
	
	
	       if (node.name() == "Project") {
	       		p = node;
	       } else if (node.name() == "Request") {
	       		p = node.parent();
	       }else {
	       		//ignore drop operations on lab.
	       		event.preventDefault();
		       	event.target.hideDropFeedback(event);
		       	DragManager.showFeedback(DragManager.NONE);		 
		       	return;
	       }
	
	       // taking all of the items in the DragSouce, insert them into the 
	       // tree using parent p. 
	       if (p != null) {
		       for(var i:Number=0; i < items.length; i++) {
		       	if (items[i].name() == "Request") {
		             browseTree.dataDescriptor.addChildAt(p, items[i], r+i);
		             
		             dropProject = p;
		             dragRequest = items[i];
					 selectedIdRequest = dragRequest.@idRequest;
		           	 promptToReassignProject();
		             
		       	} 
		       }
	       	
	       }	       
		}
		
	    public function promptToReassignProject():void {
			var changePrompt:ProjectChangePrompt = ProjectChangePrompt(PopUpManager.createPopUp(this.experimentViews, ProjectChangePrompt, true));
			PopUpManager.centerPopUp(changePrompt);
			var message:String = "Reassign experiment " + dragRequest.@requestNumber +
				" to project " + dropProject.@projectName + "?";
			changePrompt.init(this, message, dragRequest.@idLab, dropProject.@idLab, dragRequest.@idAppUser, dragRequest.@idBillingAccount, dragRequest.@isExternal);			
		}
		
		public function onPromptToReassignProject(result:String, idOwner:String, idBillingAccount:String):void {
            if (result=="Yes") {
	            selectedProject = dropProject;
	            selectedIdProject = dropProject.@idProject;
	            selectedIdLab = dropProject.@idLab;
	            
	            var params:Object = new Object();
	            params.idRequest = dragRequest.@idRequest;
				params.idProject = dropProject.@idProject;
				params.idAppUser = idOwner;
				params.isExternal = dragRequest.@isExternal;
				if (dragRequest.@isExternal == null || dragRequest.@isExternal != "Y") {
					params.idBillingAccount = idBillingAccount;
				}
				
           		saveRequestProject.send(params);
            } else {
				dropProject = null;  
				dragRequest = null;
				this.refreshExperimentsAfterDrag();
			}
        }

       	private function onSaveRequestProject(event:ResultEvent): void {
   			dropProject = null;  
   			dragRequest = null;
       		if (saveRequestProject.lastResult.name() == "SUCCESS") {
				this.refreshExperimentsAfterDrag();
				// Inform if billing accounts reassigned on billing items
				if (saveRequestProject.lastResult.@billingAccountMessage != '') {
					Alert.show(saveRequestProject.lastResult.@billingAccountMessage);
				}
			
        	} else {
				this.refreshExperimentsAfterDrag();
        		Alert.show(saveRequestProject.lastResult..ACTMESSAGE.@TEXT);
        	}	    	
	    } 
	    
	    public function deleteExperiment():void {
	    	var params:Object = new Object();
	    	params.idRequest = selectedExperiment.@idRequest;
	    	deleteRequest.send(params);
	    }
			
		public function submitExperiment():void {
			var params:Object = new Object();
			params.idRequest = selectedExperiment.@idRequest;
			params.codeRequestStatus = 'SUBMITTED'
			submitRequest.send(params);
		}
	    
	    private function onDeleteRequest(event:ResultEvent): void {
	    	if (deleteRequest.lastResult.name() == "SUCCESS") {
	    		this.refreshExperiments();
	    		experimentViews.selectedChild = browseView;
	    	} else {
	    		Alert.show(deleteRequest.lastResult..ACTMESSAGE.@TEXT);
	    	}
	    }
			
		private function onSubmitRequest(event:ResultEvent): void {
			if (submitRequest.lastResult.name() == "SUCCESS") {
				this.refreshExperiments();
				experimentViews.selectedChild = browseView;
			} else {
				Alert.show(submitRequest.lastResult..ACTMESSAGE.@TEXT);
			}
		}
	    
	    private function getMembersOfLab():void {
			if (this.browseLabCombo.selectedItem != null && this.browseLabCombo.selectedItem.@idLab != null) {
				getLab.send();				
			}
		}
		private function onGetLab(event:ResultEvent):void {			
			var lab:Object = getLab.lastResult..Lab.(@idLab == browseLabCombo.selectedItem.@idLab);
			var emptyNode:XML = <AppUser idAppUser='' displayName=''/>;
			appUsers = new XMLListCollection(lab.members.AppUser);
			for each (var mgr:Object in lab.managers.AppUser) {
				if (!appUsers.contains(mgr)) {
					appUsers.addItem(mgr);				
				}
			}
			appUsers.addItemAt(emptyNode, 0);
			
			appUserSort = new Sort();
	        appUserSort.compareFunction = this.sortAppUsers;
	        appUsers.sort = appUserSort;
	        appUsers.refresh();
			
			this.browseUserCombo.dropdown.dataProvider = appUsers;
	        
	        this.browseUserCombo.selectedIndex = 0;
		}	    

        private function sortAppUsers(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var display1:String = obj1.@displayName;
				var display2:String = obj2.@displayName;
				
				if (display1 < display2) {
					return -1;
				} else if (display1 > display2) {
					return 1;
				} else {
					return 0;
				}
				
			}
		}			

	private function toggleDateCheckboxes(checkBoxNumber:int):void {
		this.ccLookupText.text = '';
		if (checkBoxNumber == 1) {
			this.lastMonthCheckbox.selected = false;
			this.lastThreeMonthsCheckbox.selected = false;
			this.lastYearCheckbox.selected  = false;
			if (currentState == "AdminState") {
				this.allExperimentsCheckbox.selected = false;
			}
		} else if (checkBoxNumber == 2) {
			this.lastWeekCheckbox.selected = false;
			this.lastThreeMonthsCheckbox.selected = false;
			this.lastYearCheckbox.selected  = false;
			if (currentState == "AdminState") {
				this.allExperimentsCheckbox.selected = false;
			}
		} else if (checkBoxNumber == 3) {
			this.lastWeekCheckbox.selected  = false;
			this.lastMonthCheckbox.selected = false; 
			this.lastYearCheckbox.selected  = false;
			if (currentState == "AdminState") {
				this.allExperimentsCheckbox.selected = false;
			}
		}  else if (checkBoxNumber == 4) {
			this.lastWeekCheckbox.selected  = false;
			this.lastMonthCheckbox.selected = false; 
			this.lastThreeMonthsCheckbox.selected = false;
			if (currentState == "AdminState") {
				this.allExperimentsCheckbox.selected = false;
			}
		}   
	} 		 
	
	private function toggleOwnershipCheckboxes(checkBoxNumber:int):void {
		if (checkBoxNumber == 1) {
			this.publicExperimentsOtherGroupsCheckbox.selected = false;
		} else if (checkBoxNumber == 2) { 
			this.myExperimentsCheckbox.selected = false;
		} 
	}
	private function toggleRequestKindCheckboxes(checkBoxNumber:int):void {
		this.ccLookupText.text = '';
		if (checkBoxNumber == 1) {
			this.NextGenSeqCheckbox.selected = false;
			this.BioanalyzerCheckbox.selected  = false;
			this.CapSeqCheckbox.selected = false;
			this.MitSeqCheckbox.selected = false;
			this.FragAnalCheckbox.selected = false;
			this.CherryPickingCheckbox.selected = false;
			this.IScanCheckbox.selected = false;
			if (currentState == "AdminState") {
				this.allExperimentsCheckbox.selected = false;
			}
		} else if (checkBoxNumber == 2) {
			this.MicroarrayCheckbox.selected = false;
			this.BioanalyzerCheckbox.selected  = false;
			this.CapSeqCheckbox.selected = false;
			this.MitSeqCheckbox.selected = false;
			this.FragAnalCheckbox.selected = false;
			this.CherryPickingCheckbox.selected = false;
			this.IScanCheckbox.selected = false;
			if (currentState == "AdminState") {
				this.allExperimentsCheckbox.selected = false;
			}
		} else if (checkBoxNumber == 3) {
			this.NextGenSeqCheckbox.selected = false;
			this.MicroarrayCheckbox.selected = false;
			this.CapSeqCheckbox.selected = false;
			this.MitSeqCheckbox.selected = false;
			this.FragAnalCheckbox.selected = false;
			this.CherryPickingCheckbox.selected = false;
			this.IScanCheckbox.selected = false;
			if (currentState == "AdminState") {
				this.allExperimentsCheckbox.selected = false;
			}
		}  else if (checkBoxNumber == 4) {
			this.NextGenSeqCheckbox.selected = false;
			this.MicroarrayCheckbox.selected = false;
			this.MitSeqCheckbox.selected = false;
			this.FragAnalCheckbox.selected = false;
			this.CherryPickingCheckbox.selected = false;
			this.IScanCheckbox.selected = false;
			if (currentState == "AdminState") {
				this.allExperimentsCheckbox.selected = false;
			}
		}  else if (checkBoxNumber == 5) {
			this.NextGenSeqCheckbox.selected = false;
			this.MicroarrayCheckbox.selected = false;
			this.CapSeqCheckbox.selected = false;
			this.FragAnalCheckbox.selected = false;
			this.CherryPickingCheckbox.selected = false;
			this.IScanCheckbox.selected = false;
			if (currentState == "AdminState") {
				this.allExperimentsCheckbox.selected = false;
			}
		}  else if (checkBoxNumber == 6) {
			this.NextGenSeqCheckbox.selected = false;
			this.MicroarrayCheckbox.selected = false;
			this.CapSeqCheckbox.selected = false;
			this.MitSeqCheckbox.selected = false;
			this.CherryPickingCheckbox.selected = false;
			this.IScanCheckbox.selected = false;
			if (currentState == "AdminState") {
				this.allExperimentsCheckbox.selected = false;
			}
		}  else if (checkBoxNumber == 7) {
			this.NextGenSeqCheckbox.selected = false;
			this.MicroarrayCheckbox.selected = false;
			this.CapSeqCheckbox.selected = false;
			this.MitSeqCheckbox.selected = false;
			this.FragAnalCheckbox.selected = false;
			this.IScanCheckbox.selected = false;
			if (currentState == "AdminState") {
				this.allExperimentsCheckbox.selected = false;
			}
		} else if (checkBoxNumber == 8) {
			this.NextGenSeqCheckbox.selected = false;
			this.MicroarrayCheckbox.selected = false;
			this.CapSeqCheckbox.selected = false;
			this.MitSeqCheckbox.selected = false;
			this.FragAnalCheckbox.selected = false;
			this.CherryPickingCheckbox.selected = false;
			if (currentState == "AdminState") {
				this.allExperimentsCheckbox.selected = false;
			}
		} 
	}
			
	private function toggleAllExperiments():void {
		if (currentState == "AdminState") {
			if (this.allExperimentsCheckbox.selected) {
				this.browseLabCombo.enabled = false;
				this.browseUserCombo.enabled = false;
				this.MicroarrayCheckbox.enabled = false;
				this.NextGenSeqCheckbox.enabled = false;
				this.BioanalyzerCheckbox.enabled = false;
				this.lastWeekCheckbox.enabled = false;
				this.lastMonthCheckbox.enabled = false;
				this.lastThreeMonthsCheckbox.enabled = false;
				this.lastYearCheckbox.enabled = false;
				this.externalExperimentsOnlyCheckbox.enabled = false;
				this.CapSeqCheckbox.enabled = false;
				this.MitSeqCheckbox.enabled = false;
				this.FragAnalCheckbox.enabled = false;
				this.CherryPickingCheckbox.enabled = false;
				this.IScanCheckbox.enabled = false;
			} else {
				this.browseLabCombo.enabled = true;
				this.browseUserCombo.enabled = true;
				this.MicroarrayCheckbox.enabled = true;
				this.NextGenSeqCheckbox.enabled = true;
				this.BioanalyzerCheckbox.enabled = true;
				this.lastWeekCheckbox.enabled = true;
				this.lastMonthCheckbox.enabled = true;
				this.lastThreeMonthsCheckbox.enabled = true;
				this.lastYearCheckbox.enabled = true;
				this.externalExperimentsOnlyCheckbox.enabled = true;
				this.CapSeqCheckbox.enabled = true;
				this.MitSeqCheckbox.enabled = true;
				this.FragAnalCheckbox.enabled = true;
				this.CherryPickingCheckbox.enabled = true;
				this.IScanCheckbox.enabled = true;
			}
		} 
	}
			
	private function toggleFilterBox():void {
		if (filterStack.selectedIndex == 0) {
			filterStack.selectedIndex = 1;
			filterBox.visible = true;
			filterBox.includeInLayout = true;
			filterButtonBox.setStyle('verticalAlign','bottom');
			
		} else {
			filterStack.selectedIndex = 0;
			filterBox.visible = false;
			filterBox.includeInLayout = false;
			filterButtonBox.setStyle('verticalAlign','middle');
		}
	}
			
	private function groupSelected():void {
		if(browseLabCombo.selectedIndex >= 0) {
			this.allExperimentsCheckbox.selected = false;
			this.browseUserCombo.selectedIndex = 0;
			selectedIdLab=null;
			selectedIdProject=null;
			selectedIdRequest=null;
			selectedRequestNumber=null;
			getMembersOfLab();			
		}
		else{
			browseUserCombo.dataProvider = new XMLListCollection;
			browseUserCombo.dropdown.dataProvider = new XMLListCollection;
		}
	}
	
	private function ccNoLookupFieldEntered():void {
		if (ccLookupText.text != '') {
			this.resetSearchComponents();
			this.getProjectRequestList.send(getBrowseParameters());
		} 
	}
		
       ]]>
    </mx:Script> 
   	
   	 
   	<mx:ArrayCollection id="requestNumbers"  sort="{requestNumberSorter}"/>
	<mx:Sort id="requestNumberSorter" compareFunction="sortRequestNumbers" unique="true"/>
     
	<mx:DateFormatter id="dateFormatter" formatString="YYYYMMDD"/>
 
	<mx:VBox width="100%" height="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" verticalGap="1" borderStyle="none" borderColor="#D2D2D2" backgroundAlpha="0">
		<mx:HBox width="100%" paddingRight="6" paddingTop="8" styleName="panelBox" paddingBottom="4" paddingLeft="6" borderThickness="1">
			
			<mx:VBox  verticalGap="6" height="100%">
				<mx:HBox horizontalGap="0" paddingTop="0" paddingLeft="0" horizontalAlign="left" verticalAlign="middle" width="100%">
					<mx:HBox paddingLeft="0" verticalAlign="middle" width="100%">
						<mx:HBox horizontalGap="0" width="100" verticalAlign="middle">
							<mx:Image source="assets/flask.png"/>
							<mx:Label text="Experiments" styleName="titleLabel"/>	
						</mx:HBox>
						
						<mx:HBox horizontalGap="0" height="100%" verticalAlign="middle" verticalGap="0" horizontalAlign="right" paddingRight="0" id="hbox2">
							<mx:RadioButtonGroup id="experimentRadioGroup"/>
							<mx:RadioButton label="My experiments" id="myExperimentsCheckbox"  groupName="experimentRadioGroup" letterSpacing=".4" horizontalGap="0" styleName="labelSmall" toolTip="Experiments that I submitted">
								<mx:click>this.ccLookupText.text = '';selectedIdProject=null;selectedIdLab=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
							</mx:RadioButton>
							<mx:RadioButton label="My lab" id="myLabsExperimentsCheckbox" groupName="experimentRadioGroup" paddingLeft="2" horizontalGap="0" styleName="labelSmall" selected="true">
								<mx:toolTip><![CDATA[Experiments of my lab,  those I collaborate on, and those visible to to my institution]]></mx:toolTip>
								<mx:click>this.ccLookupText.text = '';selectedIdProject=null;selectedIdLab=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
							</mx:RadioButton>
							<mx:RadioButton label="Other labs" id="publicExperimentsOtherGroupsCheckbox"   groupName="experimentRadioGroup" paddingLeft="2" letterSpacing=".4" horizontalGap="0" styleName="labelSmall">
								<mx:toolTip>Other lab's experiments that are available to public</mx:toolTip>
								<mx:click>this.ccLookupText.text = '';selectedIdProject=null;selectedIdLab=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
							</mx:RadioButton>
							<mx:RadioButton label="All" id="userAllExperimentsCheckbox"   groupName="experimentRadioGroup" paddingLeft="2" letterSpacing=".4" horizontalGap="0" styleName="labelSmall">
								<mx:toolTip>All experiments I have access to</mx:toolTip>
								<mx:click>this.ccLookupText.text = '';selectedIdProject=null;selectedIdLab=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
							</mx:RadioButton>
						</mx:HBox>
						<mx:Spacer width="14" id="spacer1"/>
						<mx:HBox horizontalGap="2" height="100%" verticalAlign="middle" verticalGap="0" horizontalAlign="right" paddingRight="0" id="hbox3">
							<mx:CheckBox id="lastWeekCheckbox" label="In last week" paddingRight="0" horizontalGap="0" styleName="labelSmall">
								<mx:click>toggleDateCheckboxes(1);selectedIdLab=null;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
							</mx:CheckBox>
							<mx:CheckBox  id="lastMonthCheckbox" label="month"  paddingRight="0" horizontalGap="0" styleName="labelSmall" selected="false">
								<mx:click>toggleDateCheckboxes(2);selectedIdLab=null;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
							</mx:CheckBox>
							<mx:CheckBox  id="lastThreeMonthsCheckbox" label="3 months"  paddingRight="0" horizontalGap="0" styleName="labelSmall">
								<mx:click>toggleDateCheckboxes(3);selectedIdLab=null;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
							</mx:CheckBox>		    		
							<mx:CheckBox  id="lastYearCheckbox" label="year"  horizontalGap="0" styleName="labelSmall">
								<mx:click>toggleDateCheckboxes(4);selectedIdLab=null;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
							</mx:CheckBox>			
						</mx:HBox>
						<mx:Spacer width="14" id="spacer3"/>
						<mx:CheckBox  id="externalExperimentsOnlyCheckbox" label="External Experiments" paddingRight="0" horizontalGap="0" 
									  styleName="labelSmall" toolTip="External experiments (only)" 
									  includeInLayout="{!parentApplication.isExternalDataSharingSite}" visible="{!parentApplication.isExternalDataSharingSite}">
							<mx:click>this.ccLookupText.text = '';selectedIdLab=null;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
						</mx:CheckBox>
						
					</mx:HBox>	
				</mx:HBox>
				
				<mx:VBox id="filterBox" verticalGap="4" visible="false" includeInLayout="false">
					<mx:HBox horizontalGap="0" paddingTop="0" paddingBottom="0" paddingLeft="0" horizontalAlign="left" verticalAlign="middle" width="100%" id="hbox7">
						<mx:Spacer width="100"/>
						<mx:HBox verticalAlign="middle" width="100%" paddingLeft="8" >
							<mx:HBox horizontalGap="2" verticalAlign="middle" >
								<mx:VBox verticalGap="0" verticalAlign="middle" fontSize="9" id="vbox4"
										 includeInLayout="{parentApplication.myCoreFacilities.length() > 1}" 
										 visible="{parentApplication.myCoreFacilities.length() > 1}" >
									<mx:ComboBox id="coreFacilityCombo" width="200" dataProvider="{promptedMyCoreFacilities}"
												 labelField="@display" prompt="Core facility..." fontSize="10" visible="{!parentApplication.isExternalDataSharingSite}" includeInLayout="{!parentApplication.isExternalDataSharingSite}">
										<mx:change>this.ccLookupText.text = '';selectedIdLab=null;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:change>
									</mx:ComboBox>
								</mx:VBox>
								<mx:Spacer width="18" id="spacer2" includeInLayout="{parentApplication.myCoreFacilities.length() > 1}" 
										   visible="{parentApplication.myCoreFacilities.length() > 1}"/>
								<mx:Label text="CC Number" paddingBottom="0" styleName="labelSmall" visible="{parentApplication.isBSTLinkageSupported}" id="label1"/>
								<mx:TextInput id="ccLookupText" fontSize="9"
											  height="19"
											  width="55" 
											  enter="{ccNoLookupFieldEntered()}" visible="{parentApplication.isBSTLinkageSupported}" includeInLayout="{parentApplication.isBSTLinkageSupported}"/>
							</mx:HBox>
						</mx:HBox>	
					</mx:HBox>
					
					<mx:HBox horizontalGap="0" paddingTop="0" paddingBottom="0" paddingLeft="0" horizontalAlign="left" verticalAlign="middle" width="100%">
						<mx:Spacer width="100"/>
						<mx:HBox verticalAlign="middle" width="100%" paddingLeft="8" >
							
							<mx:HBox horizontalGap="2" id="hbox5" verticalAlign="middle">
								<mx:CheckBox label="Illumina Seqencing"  id="NextGenSeqCheckbox"
											 visible="{parentApplication.isCoreGenomics}" includeInLayout="{parentApplication.isCoreGenomics}"								 
											 horizontalGap="0" styleName="labelSmall">
									<mx:click>toggleRequestKindCheckboxes(2);selectedIdLab=null;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
								</mx:CheckBox>
								<mx:CheckBox label="Microarray" id="MicroarrayCheckbox" 
											 visible="{parentApplication.isCoreGenomics}" includeInLayout="{parentApplication.isCoreGenomics}"								 
											 horizontalGap="0" styleName="labelSmall">
									<mx:click>toggleRequestKindCheckboxes(1);selectedIdLab=null;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
								</mx:CheckBox>
								<mx:CheckBox label="Sample Quality"  id="BioanalyzerCheckbox" 
											 visible="{parentApplication.isCoreGenomics}" includeInLayout="{parentApplication.isCoreGenomics}"								 
											 horizontalGap="0" styleName="labelSmall" >
									<mx:click>toggleRequestKindCheckboxes(3);selectedIdLab=null;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
								</mx:CheckBox>
							</mx:HBox>
							<mx:Spacer width="14" visible="{parentApplication.usesExperimentTypeCapSeq}" 							 
									   includeInLayout="{parentApplication.usesExperimentTypeCapSeq}" />
							<mx:HBox horizontalGap="2" id="dnaSeqCoreCheckboxBox" verticalAlign="middle">
								<mx:CheckBox label="Sanger Seq" id="CapSeqCheckbox" toolTip="DNA (Sanger) Sequencing"
											 visible="{parentApplication.usesExperimentTypeCapSeq}" 							 
											 includeInLayout="{parentApplication.usesExperimentTypeCapSeq}" 							 
											 horizontalGap="0" styleName="labelSmall">
									<mx:click>toggleRequestKindCheckboxes(4);selectedIdLab=null;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
								</mx:CheckBox>
								<mx:CheckBox label="Mit Seq"  id="MitSeqCheckbox"  toolTip="Mitochonrial Sequencing"
											 visible="{parentApplication.usesExperimentTypeMitSeq}" 							 
											 includeInLayout="{parentApplication.usesExperimentTypeMitSeq}" 							 
											 horizontalGap="0" styleName="labelSmall">
									<mx:click>toggleRequestKindCheckboxes(5);selectedIdLab=null;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
								</mx:CheckBox>
								<mx:CheckBox label="Frag Analysis"  id="FragAnalCheckbox"  toolTip="Fragment Analysis"
											 visible="{parentApplication.usesExperimentTypeFragAnalysis}" 							 
											 includeInLayout="{parentApplication.usesExperimentTypeFragAnalysis}" 							 
											 horizontalGap="0" styleName="labelSmall">
									<mx:click>toggleRequestKindCheckboxes(6);selectedIdLab=null;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
								</mx:CheckBox>
								<mx:CheckBox label="Cherry Pick"  id="CherryPickingCheckbox"  toolTip="Cherry Picking"
											 visible="{parentApplication.usesExperimentTypeCherryPick}" 							 
											 includeInLayout="{parentApplication.usesExperimentTypeCherryPick}" 							 
											 horizontalGap="0" styleName="labelSmall">
									<mx:click>toggleRequestKindCheckboxes(7);selectedIdLab=null;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
								</mx:CheckBox>
								<mx:CheckBox label="iScan"  id="IScanCheckbox"  toolTip="iScan"
											 visible="{parentApplication.usesExperimentTypeIScan}" includeInLayout="{parentApplication.usesExperimentTypeIScan}"								 
											 horizontalGap="0" styleName="labelSmall">
									<mx:click>toggleRequestKindCheckboxes(8);selectedIdLab=null;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;</mx:click>
								</mx:CheckBox>
							</mx:HBox>
						</mx:HBox>
					</mx:HBox>
					
				</mx:VBox>
			</mx:VBox>
			
			<mx:VBox height="100%" id="filterButtonBox" verticalAlign="middle">
				<mx:ViewStack id="filterStack" >
					<mx:HBox>
						<mx:LinkButton icon="@Embed('../../assets/arrow_down.gif')" label="More..." color="#0A4894" click="toggleFilterBox()" horizontalGap="0" textAlign="left" paddingLeft="0" paddingTop="0" paddingBottom="0"/>
					</mx:HBox>
					<mx:HBox >
						<mx:LinkButton icon="@Embed('../../assets/arrow_up.gif')" label="Less..." color="#0A4894" click="toggleFilterBox()" horizontalGap="0" textAlign="left" paddingLeft="0" paddingTop="0" paddingBottom="0"/>
					</mx:HBox>
					
				</mx:ViewStack>
			</mx:VBox>
			
			<mx:Spacer width="100%"/>
			
			<mx:VBox height="100%" verticalAlign="middle">
				<mx:LinkButton id="lookupButton" 
						   height="25"
						   label="Find"
						   toolTip="Run Search"
						   click="{getProjectRequestList.send(getBrowseParameters());}" 
						   icon="@Embed('../../assets/magnifier.png')"/>
			</mx:VBox>
			<!--<mx:LinkButton label="Refresh" icon="@Embed(source='../../assets/action_refresh.gif')" 
			click="refreshExperiments()" textDecoration="underline" paddingRight="0" id="linkbutton2" paddingLeft="0"/>-->
			
		</mx:HBox>
	  
	<mx:HDividedBox height="100%" width="100%" dividerAlpha="0" dividerThickness="3" dividerAffordance="0">
	
			<mx:VBox styleName="panelBox"   width="270" height="100%" id="navPanel" >
				<mx:HBox width="100%" verticalAlign="middle" horizontalGap="0">
					<mx:Text id="messageLabel"  width="100%" fontStyle="normal" fontSize="10"/>
					<mx:VBox styleName="hintBox" id="vbox2">
						<mx:LinkButton label="Drag-and-drop hint" 
									   click="{Alert.show('Drag-and-drop experiment to move to another project.')}" 
									   id="linkbutton1" styleName="hintLink" icon="@Embed(source='../../assets/information.png')"/>
					
					</mx:VBox>
				</mx:HBox>
				<mx:VBox id="navContainer" width="100%" height="100%" verticalGap="0" paddingTop="0" >
					<mx:VBox id="treeContainer"  width="100%" height="100%" paddingLeft="2" verticalGap="0" >
						<mx:Tree width="100%" height="100%" 
							dataProvider="{getProjectRequestList.lastResult}" 
							showRoot="false" 
							id="browseTree" 
							click="onBrowseTree();"
							doubleClickEnabled="false" 
							labelField="@label"
							labelFunction="getTreeLabel" 
					        dragEnabled="true" 
					        dropEnabled="true" 
					        dragMoveEnabled="true"
							dragDrop="onDragDrop(event);" 
							iconFunction="parentApplication.getTreeIcon" backgroundAlpha="1" dropShadowEnabled="true" borderStyle="none"></mx:Tree>
						 
					</mx:VBox>
     
				</mx:VBox>
				<mx:ControlBar width="100%" verticalAlign="top">
					<mx:VBox verticalGap="0" width="100%">
						<mx:HBox width="100%">	
							
							
							
							<mx:ViewStack id="treeExpansionStack" width="100%">
								<mx:HBox horizontalAlign="left">
									<mx:LinkButton label="Expand projects" click="{treeExpansionStack.selectedIndex = 1;this.expandAllNodes();}" textDecoration="underline" />
								</mx:HBox>
								<mx:HBox horizontalAlign="left">
									<mx:LinkButton label="Collapse projects" click="{treeExpansionStack.selectedIndex = 0;this.collapseProjectNodes()}" textDecoration="underline" />					    	
								</mx:HBox>
							</mx:ViewStack>
							<mx:CheckBox label="Show Empty Folders"  id="showEmptyProjectFolders" toolTip="Show Empty Project Folders"
										 horizontalGap="0" styleName="labelSmall" enabled="{browseTree.dataProvider.length>0}" >
								<mx:click>this.ccLookupText.text = '';getProjectRequestList.send(getBrowseParameters());</mx:click>
							</mx:CheckBox>
						</mx:HBox>
						<mx:HBox>
							<mx:LinkButton label="New project" id="newProjectButton" click="browseView.showNewProjectWindow()" 
										   icon="@Embed('../../assets/folder_add.png')" 
											   toolTip="New project..." 
											   enabled="false" 
											   disabledIcon="@Embed(source='../../assets/folder_add_disable.png')" textDecoration="underline"/>
								<mx:LinkButton  label="Delete project" id="deleteProjectButton" icon="@Embed('../../assets/folder_delete.png')" 
												click="browseView.projectDetailView.promptToDeleteProject()"
												toolTip="Delete project" enabled="false" textDecoration="underline">
												<mx:disabledIcon>@Embed(source='../../assets/folder_delete_disable.png')</mx:disabledIcon>
								</mx:LinkButton>
															
							</mx:HBox>
							<mx:HBox>
								<mx:LinkButton  label="Delete experiment" id="deleteExperimentButton"  icon="@Embed(source='../../assets/delete.png')"
												click="experimentDetailView.detail.promptToDeleteExperiment()"
												toolTip="Delete experiment" enabled="{browseTree.selectedItem != null &amp;&amp; selectedExperiment != null &amp;&amp; selectedExperiment.@canDelete == &quot;Y&quot; ? true : false}" textDecoration="underline">
									<mx:disabledIcon>@Embed(source='../../assets/delete_disable.png')</mx:disabledIcon>
								</mx:LinkButton>
							</mx:HBox>
							
			  			</mx:VBox>
								
					</mx:ControlBar> 
			</mx:VBox>  

 
 
	    
 
		
	     <mx:ViewStack id="experimentViews" creationPolicy="all" visible="true" width="100%" height="100%">

	        <experiment:ExperimentBrowseView id="browseView"  width="100%" height="100%">
	        </experiment:ExperimentBrowseView>

	        <experiment:ExperimentDetailPanel id="experimentDetailView" width="100%" height="100%">
	        </experiment:ExperimentDetailPanel>
	        
			<experiment:ExperimentEditView id="experimentEditView" width="100%" height="100%">
	        </experiment:ExperimentEditView>

         </mx:ViewStack>
		
	</mx:HDividedBox>
  </mx:VBox>
	
	<mx:states>
		<mx:State name="GuestState">
			<mx:RemoveChild target="{hbox2}"/>
			<mx:SetProperty target="{lastMonthCheckbox}" name="selected" value="false"/>
			<mx:RemoveChild target="{label1}"/>
			<mx:RemoveChild target="{ccLookupText}"/>
			<mx:RemoveChild target="{coreFacilityCombo}"/>
			<mx:RemoveChild target="{vbox4}"/>
			<mx:RemoveChild target="{spacer2}"/>
			<mx:RemoveChild target="{spacer1}"/>
			<mx:RemoveChild target="{hbox7}"/>
		</mx:State>
		
		<mx:State name="AdminState">
			<mx:RemoveChild target="{myExperimentsCheckbox}"/>
			<mx:RemoveChild target="{publicExperimentsOtherGroupsCheckbox}"/>
			<mx:RemoveChild target="{myLabsExperimentsCheckbox}"/>
			<mx:AddChild relativeTo="{hbox2}"  position="firstChild">
				<mx:HBox horizontalGap="0" verticalAlign="middle">
				<mx:CheckBox label="All" styleName="labelSmall" horizontalGap="0" id="allExperimentsCheckbox" click="toggleAllExperiments();getProjectRequestList.send(getBrowseParameters());" />
				<mx:Spacer width="14"/>
				<mx:Label id="groupLabel" visible="true" text="Group" paddingBottom="0" styleName="labelSmall"/>
				<renderers:FilterComboBox dataProvider="{parentApplication.labList.source}" 
										  labelField="@name" 
										  prompt="Select a lab..."
										  width="160" 
										  close="{groupSelected()}"  
										  id="browseLabCombo" fontSize="10">
				</renderers:FilterComboBox>
				</mx:HBox>
			</mx:AddChild>
			<mx:RemoveChild target="{userAllExperimentsCheckbox}"/>
			<mx:SetProperty target="{lastMonthCheckbox}" name="selected" value="false"/>
			<mx:SetProperty target="{coreFacilityCombo}" name="width" value="180"/>
			<mx:AddChild relativeTo="{label1}" position="before">
				<mx:HBox  horizontalGap="0"  verticalAlign="middle" id="hbox6">
				<mx:Label id="userLabel" visible="true" text="Submitter" paddingBottom="0" paddingLeft="2"  styleName="labelSmall"/>
				<mx:ComboBox id="browseUserCombo" 
					labelField="@displayName"
					dataProvider="{appUsers}"
					 change="this.allExperimentsCheckbox.selected = false;selectedIdProject=null;selectedIdRequest=null;selectedRequestNumber=null;getProjectRequestList.send(getBrowseParameters())"  
					 visible="true"  width="130" fontSize="10">
				</mx:ComboBox>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{label1}" position="before">
				<mx:Spacer width="14"/>
			</mx:AddChild>

		</mx:State>

		
	</mx:states>
	

    
</mx:VBox>
