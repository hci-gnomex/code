<?xml version="1.0" encoding="utf-8"?>
<mx:VBox  
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%" initialize="overallDescript.textArea.editable=false;"
	xmlns:views="views.*"   creationPolicy="all"
	xmlns:util="views.util.*" xmlns:experiment="views.experiment.*" 
	xmlns:data="views.data.*" xmlns:grid="views.util.grid.*">
	
	<mx:HTTPService  
		id="getProtocol" 
		url="GetProtocol.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetProtocol(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get protocol', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>
	
	
	
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			
			import mx.collections.Grouping;
			import mx.collections.GroupingCollection;
			import mx.collections.GroupingField;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.core.Container;
			import mx.events.CloseEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import views.experiment.ExperimentEditView;
			import views.order.NavOrderView;
			import views.renderers.MultiselectRenderer;
			import views.renderers.Text;
			import views.renderers.URLRenderer;
			import views.util.AnnotationUtility;
			import views.util.CollaboratorWindow;
			import views.util.GNomExStringUtil;
			
			public var sampleGroupingCollection:GroupingCollection = null;		
			
			
			[Bindable]
			public var globalAdapterSize:int = 0;
			[Bindable]
			private var requestCategoryName:String;
			[Bindable]
			public var isClinicalResearch:String = 'N';
			[Bindable]
			private var experimentCategoryName:String;
			[Bindable]
			private var seqLibTreatments:String;
			[Bindable]
			private var visibilityName:String;
			[Bindable]
			private var institutionName:String;
			[Bindable]
			private var relatedDataTitle:String = "Related Data";
			
			[Bindable]
			public var selectedExperiment:Object;
			
			[Bindable]
			private var genomeBuild:String = "";
			
			[Bindable]
			private var alignToGenomeBuild:String = "N";
			
			public var defaultTab:Container = null;
			
			public function isCapSeqState():Boolean {
				if (currentState == 'CapSeqState') {
					return true;
				} else {
					return false;
				}
			}
			
			public function isMitSeqState():Boolean {
				if (currentState == 'MitSeqState') {
					return true;
				} else {
					return false;
				}
			}
			
			public function isFragAnalState():Boolean {
				if (currentState == 'FragAnalState') {
					return true;
				} else {
					return false;
				}
			}
			
			public function isCherryPickState():Boolean {
				if (currentState == 'CherryPickState') {
					return true;
				} else {
					return false;
				}
			}
			
			public function isIScanState():Boolean {
				if (currentState == 'IScanState') {
					return true;
				} else {
					return false;
				}
			}
			
			public function isSequenomState():Boolean {
				if (currentState == 'SequenomState') {
					return true;
				} else {
					return false;
				}
			}
			
			public function isClinicalSequenomState():Boolean {
				if (currentState == 'ClinicalSeqState') {
					return true;
				} else {
					return false;
				}
			}
			
			public function isIsolationState():Boolean {
				if (currentState == 'IsolationState') {
					return true;
				} else {
					return false;
				}
			}
			
			public function isIonTorrentState():Boolean {
				if (currentState == 'IonTorrentState') {
					return true;
				} else {
					return false;
				}
			}
			
			public function isGenericState():Boolean {
				if (currentState == 'GenericState') {
					return true;
				} else {
					return false;
				}
			}
			
			public function isNanoStringState():Boolean {
				if (currentState == 'NanoStringState') {
					return true;
				} else {
					return false;
				}
			}
			
			public function checkSecurity():void {
				
				if (parentApplication.isGuestMode()) {
					this.showCy3LabelingFieldsCheckBox.visible = false;
					this.showCy5LabelingFieldsCheckBox.visible = false;
					this.showExtFieldsCheckBox.visible = false;
					this.showHybFieldsCheckBox.visible = false;
					
					
					if (parentDocument != null && parentDocument is ExperimentDetailPanel) {
						parentDocument.requestFormButton.visible = false;	
						parentDocument.requestFormButton.includeInLayout = false;
					}
				}
			}
			
			public function setupForm(selectedExperiment:Object):void {
				this.selectedExperiment = selectedExperiment;
				
				parentDocument.parentDocument.experimentEditView.instantiateTabs(this.selectedExperiment.@codeRequestCategory, true, false);
				
				if(selectedExperiment.sequenceLanes.SequenceLane[0] != null && selectedExperiment.sequenceLanes.SequenceLane[0].@idGenomeBuildAlignTo != null){
					genomeBuild = parentApplication.dictionaryManager.getEntryDisplay('hci.gnomex.model.GenomeBuildLite', selectedExperiment.sequenceLanes.SequenceLane[0].@idGenomeBuildAlignTo);
				}
				
				if (selectedExperiment.@alignToGenomeBuild != null && selectedExperiment.@alignToGenomeBuild != '') {
					this.alignToGenomeBuild = selectedExperiment.@alignToGenomeBuild.toString();
				} else {
					this.alignToGenomeBuild = 'N';
				}
				
				var requestApplication:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', selectedExperiment.@codeApplication);
				if(selectedExperiment.@captureLibDesignId != "" || selectedExperiment.@captureLibDesignId != ""){
					libDesignAndInsertBox.visible = true;
					libDesignAndInsertBox.includeInLayout = true;
					designAndInsertLabel.text = "Custom Design Id";
					designAndInsertText.text = selectedExperiment.@captureLibDesignId;
				}
				else if ( libDesignAndInsertBox != null ) {
					libDesignAndInsertBox.visible = false;
					libDesignAndInsertBox.includeInLayout = false;
				}
				if (relatedAnalysis.length == 0 && relatedTopics.length == 0) {
					if (theTab.contains(this.relatedEntriesTab)) {
						theTab.removeChild(relatedEntriesTab);
					}
				} else {
					if (!theTab.contains(this.relatedEntriesTab)) {
						theTab.addChild(relatedEntriesTab);
					}
					
				}
				
				if (selectedExperiment.@canUpdate == 'Y' && this.billingItems.length > 0) {
					if (!theTab.contains(this.billingTab)) {
						theTab.addChild(billingTab);
					}
				} else {
					if (theTab.contains(this.billingTab)) {
						theTab.removeChild(billingTab);
					}
				}
				//		if (this.protocolsBox.visible) {
				//			if (!this.headerBox.contains(this.protocolsBox)) {
				//				this.headerBox.addChild(this.protocolsBox);
				//			} 
				//		} else {
				//			if (this.headerBox.contains(this.protocolsBox)) {
				//				this.headerBox.removeChild(this.protocolsBox);
				//			} 
				//		}
				if (selectedExperiment.@projectDescription == ''){
					this.projectDescVBox.visible = false;
					this.projectDescVBox.includeInLayout = false;
				} else {
					this.projectDescVBox.visible = true;
					this.projectDescVBox.includeInLayout = true;
				}
				
				var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory',this.selectedExperiment.@codeRequestCategory);
				this.currentState = '';	
				if (this.selectedExperiment.@codeRequestCategory == "QC") {
					if(this.selectedExperiment.@isExternal != 'Y'){
						currentState = 'QCState';
					}
					else{
						currentState = 'ExternalQCState';
					}
					
				} else if (this.selectedExperiment.@isExternal != 'Y' && requestCategory.@isIlluminaType == 'Y') {
					currentState = 'SolexaState';
				} else if (requestCategory.@type == 'MICROARRAY') {
					if (this.selectedExperiment.@isExternal != 'Y') {
						currentState = 'MicroarrayState';
						
						
						showCy3LabelingFieldsCheckBox.selected = false;
						showCy5LabelingFieldsCheckBox.selected = false;
						showHybFieldsCheckBox.selected = false;
						showExtFieldsCheckBox.selected = false;
						
					} else {
						currentState = 'ExternalMicroarrayState';
					}
					
				} else if (requestCategory.@isIlluminaType == 'Y' && this.selectedExperiment.@isExternal == 'Y') {
					currentState = 'ExternalSeqState';
					if(headerBox != null) {
						headerBox.visible = false;
					}
					
				} else if (requestCategory.@type == 'CAPSEQ') {
					currentState = 'CapSeqState';
					this.chromoTab.idRequest = this.selectedExperiment.@idRequest;
					this.chromoTab.getList();
					for each(var doff:Object in parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SampleDropOffLocation').DictionaryEntry) {
						if (doff.@value == this.selectedExperiment.@idSampleDropOffLocation) {
							this.sampleDropOffLocationText.text = doff.@display;
						}
					}
				} else if (requestCategory.@type == 'MITSEQ') {
					currentState = 'MitSeqState';
				} else if (requestCategory.@type == 'FRAGANAL') {
					currentState = 'FragAnalState';
				} else if (requestCategory.@type == 'CHERRYPICK') {
					currentState = 'CherryPickState';
				}  else if (requestCategory.@type == 'ISCAN') {
					this.currentState = "IScanState";
					if ( parentDocument.parentDocument.experimentEditView.sampleSetupView != null ) {
						parentDocument.parentDocument.experimentEditView.sampleSetupView.currentState = 'IScanState';
						parentDocument.parentDocument.experimentEditView.sampleSetupView.updateIScanPlateList(this.selectedExperiment.iScanPlateList.Plate);
					}					
					parentDocument.parentDocument.experimentEditView.samplesView.currentState = 'IScanState';	
					if ( parentDocument.parentDocument.experimentEditView.annotationView != null ) {
						parentDocument.parentDocument.experimentEditView.annotationView.checkSecurity();
					}
				} else if (requestCategory.@type == 'SEQUENOM') {
					this.currentState = "SequenomState";
					if ( parentDocument.parentDocument.experimentEditView.sampleSetupView != null ) {
						parentDocument.parentDocument.experimentEditView.sampleSetupView.currentState = 'SequenomState';
					}
					if ( this.bisulfideConversionBox != null ) {
						this.bisulfideConversionBox.visible=requestCategory!=null && requestCategory.@codeRequestCategory=='SEQEPI';
						this.bisulfideConversionBox.includeInLayout=requestCategory!=null && requestCategory.@codeRequestCategory=='SEQEPI';
					}
				} else if (requestCategory.@type == 'CLINSEQ') {
					this.currentState = "ClinicalSeqState";
					if ( parentDocument.parentDocument.experimentEditView.sampleSetupView != null ) {
						parentDocument.parentDocument.experimentEditView.sampleSetupView.currentState = 'ClinicalSequenomState';	
					}
					parentDocument.parentDocument.experimentEditView.samplesView.currentState = 'ClinicalSequenomState';	
				} else if (requestCategory.@type == 'ISOLATION') {
					this.currentState = "IsolationState";
					if ( parentDocument.parentDocument.experimentEditView.sampleSetupView != null ) {
						parentDocument.parentDocument.experimentEditView.sampleSetupView.currentState = 'IsolationState';	
					}	
				}  else if (this.selectedExperiment.@codeRequestCategory.substr( 0, 6 ) == 'IONTOR') {
					this.currentState = "IonTorrentState";
					if ( parentDocument.parentDocument.experimentEditView.sampleSetupView != null ) {
						parentDocument.parentDocument.experimentEditView.sampleSetupView.currentState = 'GenericState';	
					}	
				} else if (requestCategory.@type == 'NANOSTRING') {
					this.currentState = "NanoStringState";
					if ( parentDocument.parentDocument.experimentEditView.sampleSetupView != null ) {
						parentDocument.parentDocument.experimentEditView.sampleSetupView.currentState = 'NanoStringState';	
					}	
				} else if (requestCategory.@type == 'GENERIC') {
					this.currentState = "GenericState";
					if ( parentDocument.parentDocument.experimentEditView.sampleSetupView != null ) {
						parentDocument.parentDocument.experimentEditView.sampleSetupView.currentState = 'GenericState';	
					}	
				}
				
				if (parentDocument != null && parentDocument is ExperimentDetailPanel) {
					if (this.selectedExperiment.analysisExperimentItems.hasOwnProperty("AnalysisExperimentItem")) {
						analysisButton.enabled = true;
					} else {
						analysisButton.enabled = false;
					} 
				}
				
				if(this.selectedExperiment.@isExternal == 'Y') {
					if(lanesConfirmContainer != null && theTab.contains(lanesConfirmContainer)) {
						//theTab.setChildIndex(lanesConfirmContainer, 2);
						//lanesConfirmContainer.enabled = false;
						/*
						var index:int = theTab.getChildIndex(lanesConfirmContainer);
						if (index > 0) {
						var tabButton:Button = theTab.getTabAt(index);
						if(tabButton != null) {
						lanesConfirmContainer.tabIndex = theTab.numChildren+1;
						//tabButton.visible = false;
						}						
						}
						*/
						
					}
				}
				
				getRequestCategoryVariables();
				getExperimentCategoryName();
				getSeqLibTreatments();
				getVisibilityName();
				getInstitutionName();
				callLater(showHideColumns);
				this.addNonStandardSampleColumns();
				
				if (theTab.selectedChild == this.filesView) {
					downloadExpandedFilesButtonView.visible = true;
					downloadExpandedFilesButtonView.includeInLayout = true;
				} else {
					downloadExpandedFilesButtonView.visible = false;
					downloadExpandedFilesButtonView.includeInLayout = false;
				}
				
				//			this.theTab.selectedIndex = 0;
				
				// Need to refresh download list here; otherwise last selected experiment's
				// files shown rather than current selection.
				this.refreshDownloadList();	
				if (relatedAnalysis.length > 0) {
					callLater( this.relatedAnalysisTree.expandChildrenOf, [ relatedAnalysis[0], true]); 				
				} 
				if (relatedTopics.length > 0) {
					callLater( this.relatedTopicsTree.expandChildrenOf, [ relatedTopics[0], true]); 
				}
				
				// If property exists, set the adapter size; otherwise it will remain at 0.
				var propAdapterSize:Object = parentApplication.getProperty(parentApplication.PROPERTY_BASE_INSERT_SIZE);			
				if (propAdapterSize != null && propAdapterSize != '') {
					globalAdapterSize = parseInt(String(propAdapterSize));			
				}
				
				if (defaultTab == null) {
					theTab.selectedIndex = 0;
				} else {
					theTab.selectedChild = defaultTab;
					defaultTab = null;
				}
				// Workflow progress
				callLater(setWorkflowStatus);
				
			}
			
			private function setWorkflowStatus():void {
				var x:int = 0;
				for each(var progressInfo:Object in selectedExperiment.workflowStatus.Progress) {
					this.workflowProgressBar[x].setProgress(progressInfo.@stepNumber, selectedExperiment.workflowStatus.@numberOfSteps );	
					x++;
				} 
				
				workflowProgressBox.visible = x > 0 ? true : false;
				workflowProgressBox.includeInLayout = x > 0 ? true : false;
				
				
			}
			
			public function initializeBarcoding():void {
				var showSampleMultiplexGroup:Boolean = false;
				var showSampleBarcode:Boolean = false;
				var showSampleBarcodeB:Boolean = false;
				var showSampleCustomBarcode:Boolean = false;
				var showPlates:Boolean = false;
				for each (var s:Object in samples) {
					if (s.@multiplexGroupNumber != '' && !isNanoStringState()) {
						showSampleMultiplexGroup = true;
					}
					if (((isCapSeqState() || isSequenomState()) && s.hasOwnProperty("@plateName") && s.@plateName != '') || isIScanState()) {
						showPlates = true;
					}
					if (s.@idOligoBarcode != '' ) {
						showSampleBarcode = true;
					}else if (s.@barcodeSequence != '' ) {
						showSampleCustomBarcode = true;
					}
					if(s.@idOligoBarcodeB != ''){
						showSampleBarcodeB = true;
					}
				}
				
				if (showPlates) {
					
					this.samplesGridConfirm.dataProvider = null;
					sampleGroupingCollection = new GroupingCollection();
					sampleGroupingCollection.source = this.samples;
					var groupCapSeq:Grouping = new Grouping();
					var gfCapSeq:GroupingField = new GroupingField();
					gfCapSeq.name = "@plateName";
					groupCapSeq.fields = [gfCapSeq];
					gfCapSeq.compareFunction = plateSampleCompareFunction;
					sampleGroupingCollection.grouping  = groupCapSeq;
					sampleGroupingCollection.refresh(); 
					this.samplesGridConfirm.dataProvider = sampleGroupingCollection;
					
					this.samplesGridConfirm.dragMoveEnabled = false;
					this.samplesGridConfirm.dropEnabled = false;
					this.samplesGridConfirm.dragEnabled = false;
					
					
					this.switchFirstSampleGridColumns(this.plateNameCol, this.multiplexGroupNumberColumn);
					this.plateNameCol.visible = true;
					this.multiplexGroupNumberColumn.visible = false;
					
				} else if (showSampleMultiplexGroup) {
					
					this.samplesGridConfirm.dataProvider = null;
					sampleGroupingCollection = new GroupingCollection();
					sampleGroupingCollection.source = this.samples;
					var group:Grouping = new Grouping();
					var gf:GroupingField = new GroupingField();
					gf.name = "@multiplexGroupNumber";
					gf.compareFunction = sampleCompareFunction;
					group.fields = [gf];
					sampleGroupingCollection.grouping  = group;
					sampleGroupingCollection.refresh();
					this.samplesGridConfirm.dataProvider = sampleGroupingCollection;
					
					this.multiplexGroupNumberColumn.visible = true;
					switchFirstSampleGridColumns(this.multiplexGroupNumberColumn, this.plateNameCol);
					this.plateNameCol.visible = false;
					
				} else {
					
					sampleGroupingCollection = null;
					this.samplesGridConfirm.dataProvider = this.samples;
					
					this.multiplexGroupNumberColumn.visible = false;
					
				}
				
				this.barcodeCol.visible = showSampleBarcode;
				this.customBarcodeCol.visible = showSampleCustomBarcode;
				this.customBarcodeColB.visible = showSampleCustomBarcode;
				this.barcodeColB.visible = showSampleBarcodeB;
				
				if (currentState == "SolexaState") {
					this.laneBarcodeCol.visible = showSampleBarcode;
					this.laneBarcodeColB.visible = showSampleBarcode;
					this.laneCustomBarcodeCol.visible = showSampleCustomBarcode;
					this.laneCustomBarcodeColB.visible = showSampleCustomBarcode;
				}
				
				this.samplesGridConfirm.validateNow();
			}
			
			private function switchFirstSampleGridColumns (col1:AdvancedDataGridColumn, col2:AdvancedDataGridColumn):void {
				var columns:Array = [];
				columns[0] = col1;
				columns[1] = col2;
				for(var i:int = 2;i < this.samplesGridConfirm.columns.length;i++) {
					columns[i] = this.samplesGridConfirm.columns[i];
				}
				this.samplesGridConfirm.columns = columns;
			}
			
			private function sampleCompareFunction(a:XML, b:XML):int
			{
				var aPersistFlag:Number = 0;
				var aPosition:Number = 0;
				if (a.@idSample.toString().indexOf("Sample") > -1) {
					aPosition = a.@idSample.toString().substr(6);
					aPersistFlag = 1;
				} else {
					aPosition = a.@idSample;
				}
				
				var bPersistFlag:Number = 0;
				var bPosition:Number = 0;
				if (b.@idSample.toString().indexOf("Sample") > -1) {
					bPosition = b.@idSample.toString().substr(6);
					bPersistFlag = 1; // non-persistent samples sort after the persistent ones
				} else {
					bPosition = b.@idSample;
				}
				
				if (aPersistFlag == bPersistFlag) {
					return ObjectUtil.numericCompare(aPosition, bPosition);				
				} else {
					return ObjectUtil.numericCompare(aPersistFlag, bPersistFlag);
				}
			}		
			
			private function plateSampleCompareFunction(a:XML, b:XML):int
			{
				if (a.hasOwnProperty("@plateName") && a.hasOwnProperty("@wellName") && b.hasOwnProperty("@plateName") && b.hasOwnProperty("@wellName")) {
					var compVal:int = 0;
					if (a.@plateName == b.@plateName) {
						compVal = compVal = ObjectUtil.numericCompare(a.@wellName.toString().substr(1), b.@wellName.toString().substr(1));
						if (compVal == 0) {
							compVal = ObjectUtil.stringCompare(a.@wellName.toString(), b.@wellName.toString());
						}
					} else {
						compVal = ObjectUtil.stringCompare(a.@plateName.toString(), b.@plateName.toString());
					}
					return compVal;
				} else {
					var aPersistFlag:Number = 0;
					var aPosition:Number = 0;
					if (a.@idSample.toString().indexOf("Sample") > -1) {
						aPosition = a.@idSample.toString().substr(6);
						aPersistFlag = 1;
					} else {
						aPosition = a.@idSample;
					}
					
					var bPersistFlag:Number = 0;
					var bPosition:Number = 0;
					if (b.@idSample.toString().indexOf("Sample") > -1) {
						bPosition = b.@idSample.toString().substr(6);
						bPersistFlag = 1; // non-persistent samples sort after the persistent ones
					} else {
						bPosition = b.@idSample;
					}
					
					if (aPersistFlag == bPersistFlag) {
						return ObjectUtil.numericCompare(aPosition, bPosition);				
					} else {
						return ObjectUtil.numericCompare(aPersistFlag, bPersistFlag);
					}
				}
			}
			
			private function showCy3LabelCols(isVisible:Boolean):void {
				labelCol1.visible = isVisible;
				labelCol2.visible = isVisible;
				labelCol3.visible = isVisible;
				labelCol4.visible = isVisible;
				labelCol5.visible = isVisible;
			}
			
			private function showCy5LabelCols(isVisible:Boolean):void {
				labelCol6.visible = isVisible;
				labelCol7.visible = isVisible;
				labelCol8.visible = isVisible;
				labelCol9.visible = isVisible;
				labelCol10.visible = isVisible;
			}
			
			private function getChannel1SampleName(item:Object, col:int):String {
				var de:XMLList = item.labeledSampleChannel1.LabeledSample.sample.Sample;
				if (de.length() == 1) {
					return de[0].@name;
				} else {
					return "";
				}
			}
			private function getChannel2SampleName(item:Object, col:int):String {
				var de:XMLList = item.labeledSampleChannel2.LabeledSample.sample.Sample;
				if (de.length() == 1) {
					return de[0].@name;
				} else {
					return "";
				}
			}
			private function getChannel1SampleNumber(item:Object, col:int):String {
				var de:XMLList = item.labeledSampleChannel1.LabeledSample.sample.Sample;
				if (de.length() == 1) {
					return de[0].@number;
				} else {
					return "";
				}
			}
			private function getChannel2SampleNumber(item:Object, col:int):String {
				var de:XMLList = item.labeledSampleChannel2.LabeledSample.sample.Sample;
				if (de.length() == 1) {
					return de[0].@number;
				} else {
					return "";
				}
			}
			private function getHybsGridRowNumber(item:Object,col:int):String
			{
				var x:int = hybsGridConfirm.dataProvider.getItemIndex(item) + 1;
				return String(x);
			} 
			
			private function getRequestCategoryVariables():void {
				var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', this.selectedExperiment.@codeRequestCategory);
				if (requestCategory is XMLList) {
					requestCategoryName = requestCategory[0].@display.toString();
					if (requestCategory[0].@isClinicalResearch != null) {
						isClinicalResearch = requestCategory[0].@isClinicalResearch.toString();
					} else {
						isClinicalResearch = 'N'
					}
				} else {
					requestCategoryName = requestCategory.@display.toString();		
					if (requestCategory.@isClinicalResearch != null) {
						isClinicalResearch = requestCategory.@isClinicalResearch.toString();
					} else {
						isClinicalResearch = 'N'
					}
				}
			}
			
			private function getExperimentCategoryName():void {
				var experimentCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', this.selectedExperiment.@codeApplication);
				if (experimentCategory is XMLList) {
					experimentCategoryName  = experimentCategory[0].@display.toString();
				} else {
					experimentCategoryName = experimentCategory.@display.toString();
				}
				if ( this.selectedExperiment.@codeApplication == 'OTHER' && this.selectedExperiment.@applicationNotes != '' ) {
					experimentCategoryName += ' - ' + this.selectedExperiment.@applicationNotes;
				}
			}
			
			private function getSeqLibTreatments():void {
				seqLibTreatments = "";
				for each(var item:Object in this.selectedExperiment.seqLibTreatments.SeqLibTreatment) {
					if (seqLibTreatments.length > 0) {
						seqLibTreatments += ", ";
					}
					seqLibTreatments += item.@display;
				}
			}
			private function getVisibilityName():void {
				if (selectedExperiment.hasOwnProperty("@codeVisibility")) {
					var visibility:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Visibility', this.selectedExperiment.@codeVisibility);
					if (visibility is XMLList) {
						visibilityName = visibility[0].@display.toString();			
					} else {
						visibilityName = visibility.@display.toString();
					}
				}
			}
			
			private function getInstitutionName():void {
				if (selectedExperiment.hasOwnProperty("@idInstitution")) {
					var institution:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Institution', this.selectedExperiment.@idInstitution);
					if (institution is XMLList) {
						institutionName = institution[0].@display.toString();			
					} else {
						institutionName = institution.@display.toString();
					}
				}
			}
			
			public function showDownloads():void {
				this.theTab.selectedChild = this.filesView;
				downloadExpandedFilesButtonView.visible = true;
				downloadExpandedFilesButtonView.includeInLayout = true;
			}
			
			public function promptToDeleteExperiment():void {
				var billingItems:XMLList = this.selectedExperiment.billingItems.BillingItem;
				if ( billingItems.length() > 0) {
					Alert.show("Delete experiment " + this.selectedExperiment.@number + 
						"?\n\nWARNING:  This will also delete "  +
						billingItems.length() + " billing item(s) associated with this experiment.\n\n", 
						"Confirm", 
						(Alert.YES | Alert.NO), this, 
						onPromptToDeleteExperiment);
					
				} else {
					Alert.show("Delete experiment " + this.selectedExperiment.@number + "?", 
						"Confirm", 
						(Alert.YES | Alert.NO), this, 
						onPromptToDeleteExperiment);
				}
				
			}
			
			private function onPromptToDeleteExperiment(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					deleteExperiment();
				}
			}
			private function deleteExperiment():void {
				parentDocument.parentDocument.deleteExperiment();
			}
			
			public function promptToSubmitExperiment():void {
				Alert.show("Submit experiment " + this.selectedExperiment.@number + "?  After submission only facility personnel will be able to make changes.", 
					"Confirm", 
					(Alert.YES | Alert.NO), this, 
					onPromptToSubmitExperiment);
			}
			
			private function onPromptToSubmitExperiment(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					submitExperiment();
				}
			}
			private function submitExperiment():void {
				parentDocument.parentDocument.submitExperiment();
			}
			
			public function showPrintableRequestForm():void {
				var url:URLRequest = new URLRequest('ShowRequestForm.gx?idRequest=' + this.selectedExperiment.@idRequest);
				navigateToURL(url, '_blank');			
			}
			
			public function checkForFileView():void {
				if(theTab.contains(this.filesView)) {
					theTab.selectedChild = filesView;	
					callLater(filesView.showDownloadWindow);
				}
			}	
			
			public function showEditExperimentWindow():void {
				parentDocument.parentDocument.experimentEditView.instantiateTabs(this.selectedExperiment.@codeRequestCategory, true, false);
				parentDocument.parentDocument.experimentEditView.coreFacility = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.CoreFacility', this.selectedExperiment.@idCoreFacility);
				
				parentDocument.parentDocument.experimentEditView.request = this.selectedExperiment;
				parentDocument.parentDocument.experimentEditView.coreFacility = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.CoreFacility', this.selectedExperiment.@idCoreFacility);
				parentDocument.parentDocument.experimentEditView.samplesView.setShowCCNumber(this.selectedExperiment.@hasCCNumber == 'Y');
				parentDocument.parentDocument.experimentEditView.selectedAssaysCollection = this.assays;
				parentDocument.parentDocument.experimentEditView.saveDescription = GNomExStringUtil.cleanRichTextHTML(this.overallDescript.htmlText);
				
				parentDocument.parentDocument.experimentViews.selectedChild = parentDocument.parentDocument.experimentEditView;
				if (parentDocument.parentDocument.experimentEditView.theTab.contains(parentDocument.parentDocument.experimentEditView.annotationView)) {
					parentDocument.parentDocument.experimentEditView.annotationView.onPropertyRefreshed(null);
					parentDocument.parentDocument.experimentEditView.annotationView.checkSecurity();
				} 
				
				if (this.isCherryPickState()) {
					var numDestinationWells:int = Number(this.selectedExperiment.@numDestinationWells.toString());
					parentDocument.parentDocument.experimentEditView.cherryPlateList = this.selectedExperiment.cherryPlateList.Plate;
					parentDocument.parentDocument.experimentEditView.samplesView.prepareCherryPickingSamplesForEdit(numDestinationWells);
				}
				
				if (this.isIScanState() || (this.isSequenomState() && this.selectedExperiment.@containerType == "PLATE") ) {
					parentDocument.parentDocument.experimentEditView.numIScanPlates = countPlates();
				}
				
				var editTitle:String = (this.selectedExperiment.@isExternal == 'Y' ? 'Edit External Experiment ' :  'Edit Experiment ') + this.selectedExperiment.@number;
				
				parentDocument.parentDocument.experimentEditView.removeDataListeners();
				parentDocument.parentDocument.experimentEditView.initializeData();
				parentDocument.parentDocument.experimentEditView.setupEditForm(this.selectedExperiment);
				parentDocument.parentDocument.experimentEditView.titleLabel.text = editTitle;
				
				if (parentDocument.parentDocument.experimentEditView.samplesView.hasPlates() && !parentDocument.parentDocument.experimentEditView.isIScanState()
					&& !parentDocument.parentDocument.experimentEditView.isSequenomState() ) {
					parentDocument.parentDocument.experimentEditView.numCapSeqPlates = countPlates();
				}
				
				chooseEditTabs();
				callLater(parentDocument.parentDocument.experimentEditView.setupDataListeners);
				
			}
			
			private function chooseEditTabs():void {
				chooseEditTab(infoTab, parentDocument.parentDocument.experimentEditView.infoTab);
				chooseEditTab(notesTab, parentDocument.parentDocument.experimentEditView.notesView);
				chooseEditTab(samplesTab, parentDocument.parentDocument.experimentEditView.samplesView);
				chooseEditTab(lanesConfirmContainer, parentDocument.parentDocument.experimentEditView.lanesView);
				chooseEditTab(bioinformaticsTab, parentDocument.parentDocument.experimentEditView.bioinformaticsView);
				chooseEditTab(filesView, parentDocument.parentDocument.experimentEditView.downloadView);
			}
			
			private function chooseEditTab(selectedTab:Object, parentTab:Container):void {
				if (theTab.selectedChild == selectedTab && parentDocument.parentDocument.experimentEditView.theTab.contains(parentTab)) {
					parentDocument.parentDocument.experimentEditView.defaultTab = parentTab;
				}
			}
			
			private function countPlates():int {
				var prevPlate:String = "xxxx";
				var numPlates:int = 0;
				for each (var s:Object in this.samples) {
					if (s.@plateName != prevPlate) {
						numPlates++;
					}
					prevPlate = s.@plateName;
				}
				
				return numPlates;
			}
			
			public function refreshSavedExperiment(idRequest:Object):void {
				parentDocument.parentDocument.selectedIdRequest = idRequest;
				var parms:Object = new Object();
				parms.idRequest = parentDocument.parentDocument.selectedIdRequest;
				parentDocument.parentDocument.getRequest.send(parms);
				
			}
			
			public function getLanesGridRowNumber(item:Object,col:int):String
			{
				var x:int = this.lanesConfirmGrid.dataProvider.getItemIndex(item) + 1;
				return String(x);     		
			}
			
			private function showHideColumns():void {
				descriptionCol.visible = (this.selectedExperiment.@hasSampleDescription=="Y");
				this.cherryDestinationWellCol.visible = false;
				this.cherrySourcePlateCol.visible = false;
				this.cherrySourceWellCol.visible = false;
				this.sampleSourceCol.visible = false;
				reactionPlateCol.visible = false;
				redoFlagCol.visible = false;
				this.sampleNameColumn.visible = true;
				qubitConcentrationCol.visible = (this.selectedExperiment.@includeQubitConcentration=="Y");
				
				this.concentrationCol.headerText = 'Conc.';
				// can't do this in state stuff because of external stuff below.
				this.noteToCoreFacilityBox.visible = true;
				this.noteToCoreFacilityBox.includeInLayout = true;
				
				// hide bio and core notes for external experiments unless populated.
				if (this.selectedExperiment.@isExternal == "Y") {
					if (this.noteToCoreFacilityBox.visible) {
						if (this.selectedExperiment.@corePrepInstructions == null || this.selectedExperiment.@corePrepInstructions == "") {
							this.noteToCoreFacilityBox.visible = false;
							this.noteToCoreFacilityBox.includeInLayout = false;
						}
					}
				}
				
				// Make description bigger if possible
				if (!this.noteToCoreFacilityBox.visible) {
					this.bioAndCoreNoteVBox.visible = false;
					this.bioAndCoreNoteVBox.includeInLayout = false;
				} else {
					this.bioAndCoreNoteVBox.visible = true;
					this.bioAndCoreNoteVBox.includeInLayout = true;
				}
				
				if (currentState == 'ExternalSeqState') {
					sampleTypeCol.visible = true;
					organismCol.visible = false;
					
					this.otherOrganismCol.visible = false;
					this.otherSamplePrepMethodCol.visible = false;
					concentrationCol.visible = false; 
					preppedByLabCol.visible = false;
					chipTypeCol.visible = false;
					concentrationUnitCol.visible = false;
					barcodeCol.visible = false;
					plateNameCol.visible = false;
					wellNameCol.visible = false;
					isControlCol.visible = false;
					this.qc260Col.visible = false;
					this.qc260280Col.visible = false;
					this.qcConcCol.visible = false;
					this.qcRINCol.visible = false;
					this.qcStatusCol.visible = false;
					
				} else if (currentState == 'ExternalMicroarrayState') {
					sampleTypeCol.visible = true;
					organismCol.visible = false;
					
					this.otherOrganismCol.visible = false;
					this.otherSamplePrepMethodCol.visible = false;
					concentrationCol.visible = false; 
					preppedByLabCol.visible = false;
					chipTypeCol.visible = false;
					concentrationUnitCol.visible = false;        		
					barcodeCol.visible = false;
					plateNameCol.visible = false;
					wellNameCol.visible = false;
					isControlCol.visible = false;
					this.qc260Col.visible = false;
					this.qc260280Col.visible = false;
					this.qcConcCol.visible = false;
					this.qcRINCol.visible = false;
					this.qcStatusCol.visible = false;
					
				} else {
					
					descriptionCol.visible = true;   
					
					if (currentState == 'SolexaState') {
						concentrationCol.visible = true; 
						sampleTypeCol.visible = true;
						organismCol.visible = true;
						preppedByLabCol.visible = true;
						otherSamplePrepMethodCol.visible = true;
						chipTypeCol.visible = false;
						concentrationUnitCol.visible = false;
						plateNameCol.visible = false;
						wellNameCol.visible = false;
						isControlCol.visible = false;
						this.qc260Col.visible = false;
						this.qc260280Col.visible = false;
						this.qcConcCol.visible = true;
						this.qcRINCol.visible = true;
						this.qcStatusCol.visible = true;
						descriptionCol.visible = false;
						
					} else if (currentState == 'QCState' || currentState == 'ExternalQCState') {
						concentrationCol.visible = false; 
						sampleTypeCol.visible = false;
						organismCol.visible = false;
						preppedByLabCol.visible = false;
						otherSamplePrepMethodCol.visible = true;
						var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', this.selectedExperiment.@codeApplication);
						chipTypeCol.visible = (application != null && application.@hasChipTypes == 'Y' ? true : false);
						concentrationUnitCol.visible = true;
						plateNameCol.visible = false;
						wellNameCol.visible = false;
						isControlCol.visible = false;
						this.qc260Col.visible = true;
						this.qc260280Col.visible = false;
						this.qcConcCol.visible = true;
						this.qcRINCol.visible = true;
						this.qcStatusCol.visible = currentState == 'QCState';
					} else if (isCapSeqState()) {
						concentrationCol.visible = false; 
						sampleTypeCol.visible = true;
						organismCol.visible = false;
						preppedByLabCol.visible = false;
						otherSamplePrepMethodCol.visible = false;
						chipTypeCol.visible = false
						concentrationUnitCol.visible = false;
						plateNameCol.visible = (this.selectedExperiment.@containerType == "PLATE" ? true : false);
						wellNameCol.visible = (this.selectedExperiment.@containerType == "PLATE" ? true : false);
						isControlCol.visible = (this.selectedExperiment.@containerType == "PLATE" ? true : false);
						this.qc260Col.visible = false;
						this.qc260280Col.visible = false;
						this.qcConcCol.visible = false;
						this.qcRINCol.visible = false;
						this.qcStatusCol.visible = false;
						reactionPlateCol.visible = true;
						redoFlagCol.visible = true;
						this.descriptionCol.visible = false;
						
					} else if (isMitSeqState()) {
						concentrationCol.visible = false; 
						sampleTypeCol.visible = false;
						organismCol.visible = false;
						preppedByLabCol.visible = false;
						otherSamplePrepMethodCol.visible = false;
						chipTypeCol.visible = false
						concentrationUnitCol.visible = false;
						plateNameCol.visible = false;
						wellNameCol.visible = true;
						isControlCol.visible = false;
						this.qc260Col.visible = false;
						this.qc260280Col.visible = false;
						this.qcConcCol.visible = false;
						this.qcRINCol.visible = false;
						this.qcStatusCol.visible = false;
						reactionPlateCol.visible = true;
						redoFlagCol.visible = true;
						
					} else if (isFragAnalState()) {
						concentrationCol.visible = false; 
						sampleTypeCol.visible = false;
						organismCol.visible = false;
						preppedByLabCol.visible = false;
						otherSamplePrepMethodCol.visible = false;
						chipTypeCol.visible = false
						concentrationUnitCol.visible = false;
						plateNameCol.visible = false;
						wellNameCol.visible = true;
						isControlCol.visible = false;
						this.qc260Col.visible = false;
						this.qc260280Col.visible = false;
						this.qcConcCol.visible = false;
						this.qcRINCol.visible = false;
						this.qcStatusCol.visible = false;
						reactionPlateCol.visible = true;
					} else if (isCherryPickState()) {
						concentrationCol.visible = false; 
						sampleTypeCol.visible = false;
						organismCol.visible = false;
						preppedByLabCol.visible = false;
						otherSamplePrepMethodCol.visible = false;
						chipTypeCol.visible = false
						concentrationUnitCol.visible = false;
						plateNameCol.visible = false;
						wellNameCol.visible = false;
						isControlCol.visible = false;
						this.qc260Col.visible = false;
						this.qc260280Col.visible = false;
						this.qcConcCol.visible = false;
						this.qcRINCol.visible = false;
						this.qcStatusCol.visible = false;
						this.cherryDestinationWellCol.visible = true;
						this.cherrySourcePlateCol.visible = true;
						this.cherrySourceWellCol.visible = true;
						reactionPlateCol.visible = true;
						
					} else if (isIScanState()) {
						concentrationCol.visible = false; 
						sampleTypeCol.visible = false;
						organismCol.visible = false;
						preppedByLabCol.visible = false;
						otherSamplePrepMethodCol.visible = false;
						chipTypeCol.visible = false
						concentrationUnitCol.visible = false;
						plateNameCol.visible = false;
						wellNameCol.visible = true;
						isControlCol.visible = false;
						this.qc260Col.visible = false;
						this.qc260280Col.visible = false;
						this.qcConcCol.visible = false;
						this.qcRINCol.visible = false;
						this.qcStatusCol.visible = false;
						this.cherryDestinationWellCol.visible = false;
						this.cherrySourcePlateCol.visible = false;
						this.cherrySourceWellCol.visible = false;
						reactionPlateCol.visible = false;
						this.descriptionCol.visible = false;
						
					} else if (isSequenomState()) {
						concentrationCol.visible = true; 
						sampleTypeCol.visible = true;
						organismCol.visible = false;
						preppedByLabCol.visible = false;
						otherSamplePrepMethodCol.visible = false;
						chipTypeCol.visible = false
						concentrationUnitCol.visible = false;
						plateNameCol.visible = (this.selectedExperiment.@containerType == "PLATE" ? true : false);
						wellNameCol.visible = (this.selectedExperiment.@containerType == "PLATE" ? true : false);
						isControlCol.visible = false;
						this.qc260Col.visible = false;
						this.qc260280Col.visible = true;
						this.qcConcCol.visible = false;
						this.qcRINCol.visible = false;
						this.qcStatusCol.visible = false;
						this.descriptionCol.visible = false;
						
					} else if (isClinicalSequenomState()) {
						concentrationCol.visible = true; 
						sampleTypeCol.visible = true;
						organismCol.visible = false;
						preppedByLabCol.visible = false;
						otherSamplePrepMethodCol.visible = false;
						chipTypeCol.visible = false
						concentrationUnitCol.visible = false;
						plateNameCol.visible = (this.selectedExperiment.@containerType == "PLATE" ? true : false);
						wellNameCol.visible = (this.selectedExperiment.@containerType == "PLATE" ? true : false);
						isControlCol.visible = false;
						this.qc260Col.visible = false;
						this.qc260280Col.visible = true;
						this.qcConcCol.visible = false;
						this.qcRINCol.visible = false;
						this.qcStatusCol.visible = false;
						this.descriptionCol.visible = false;
						this.sampleNameColumn.visible = false;
						
					} else if (isIsolationState()) {
						concentrationCol.visible = true; 
						sampleTypeCol.visible = false;
						organismCol.visible = false;
						preppedByLabCol.visible = false;
						otherSamplePrepMethodCol.visible = false;
						chipTypeCol.visible = false
						concentrationUnitCol.visible = false;
						plateNameCol.visible = false;
						wellNameCol.visible = false;
						isControlCol.visible = false;
						this.qc260Col.visible = false;
						this.qc260280Col.visible = true;
						this.qcConcCol.visible = false;
						this.qcRINCol.visible = false;
						this.qcStatusCol.visible = false;
						this.descriptionCol.visible = false;
						this.sampleSourceCol.visible = true;
						
						this.concentrationCol.headerText = 'NanoDrop Conc.';
					} else if (isIonTorrentState()) {
						concentrationCol.visible = true; 
						sampleTypeCol.visible = true;
						organismCol.visible = true;
						preppedByLabCol.visible = false;
						otherSamplePrepMethodCol.visible = true;
						chipTypeCol.visible = false
						concentrationUnitCol.visible = false;
						plateNameCol.visible = false;
						wellNameCol.visible = false;
						isControlCol.visible = false;
						this.qc260Col.visible = true;
						this.qc260280Col.visible = false;
						this.qcConcCol.visible = true;
						this.qcRINCol.visible = true;
						this.qcStatusCol.visible = false;
						this.descriptionCol.visible = false;
						this.sampleSourceCol.visible = false;
						
						this.concentrationCol.headerText = 'Conc. (ng/ul)';
						
					}  else if (isGenericState()) {
						concentrationCol.visible = false; 
						sampleTypeCol.visible = true;
						organismCol.visible = true;
						preppedByLabCol.visible = false;
						otherSamplePrepMethodCol.visible = false;
						chipTypeCol.visible = false
						concentrationUnitCol.visible = false;
						plateNameCol.visible = false;
						wellNameCol.visible = false;
						isControlCol.visible = false;
						this.qc260Col.visible = false;
						this.qc260280Col.visible = false;
						this.qcConcCol.visible = false;
						this.qcRINCol.visible = false;
						this.qcStatusCol.visible = false;
						this.descriptionCol.visible = false;
						this.sampleSourceCol.visible = false;
						
					}  else {
						concentrationCol.visible = true; 
						sampleTypeCol.visible = true;
						organismCol.visible = true;
						preppedByLabCol.visible = false;
						otherSamplePrepMethodCol.visible = true;
						chipTypeCol.visible = false;
						concentrationUnitCol.visible = false;        		
						plateNameCol.visible = false;
						wellNameCol.visible = false;
						isControlCol.visible = false;
						this.qc260Col.visible = true;
						this.qc260280Col.visible = false;
						this.qcConcCol.visible = true;
						this.qcRINCol.visible = true;
						this.qcStatusCol.visible = true;
					}
				}
				
				this.initializeBarcoding();
				otherOrganismCol.visible = false;
			}
			
			public function showRelatedAnalysis():void {
				parentApplication.showAnalysisForExperiment(this.selectedExperiment);
			}
			
			private function onDoubleClickRelatedAnalysis():void {
				var selectedItem:Object = this.relatedAnalysisTree.selectedItem;
				showRelatedObject(selectedItem);
			}
			private function onDoubleClickRelatedTopic():void {
				var selectedItem:Object = this.relatedTopicsTree.selectedItem;
				showRelatedObject(selectedItem);
			}
			
			private function showRelatedObject(selectedItem:Object):void {
				if (selectedItem.name() == "Analysis") {
					parentApplication.showAnalysisForNumber(selectedItem.@number);
				} else if (selectedItem.name() == "DataTrack") {
					parentApplication.showDataTrackForNumber(selectedItem.@number);
				} else if (selectedItem.name() == "Topic") {
					parentApplication.showTopicForNumber(selectedItem.@idTopic);
				} else if (selectedItem.name() == "Request" && selectedExperiment.@idRequest != selectedItem.@idRequest) {
					parentApplication.showExperimentById(selectedItem.@idRequest);
				}			
			}
			
			// Get all options (include inactive)
			public function getPropertyOptions(idProperty:String):XMLList {
				return parentApplication.getPropertyOptions(idProperty, true);
			}
			
			private function addAssayColumns():void {
				var columns:Array = samplesGridConfirm.columns;
				var newColumns:Array = new Array();
				
				// remove any existing assay columns
				var colRemoved:Boolean = false;
				for each(var remCol:AdvancedDataGridColumn in columns) {
					if (remCol.dataField == null || remCol.dataField.substr(0, 9) != "@hasAssay") {
						newColumns.push(remCol);
					} else {
						colRemoved = true;
					}
				}
				if (colRemoved) {
					samplesGridConfirm.columns = newColumns;
					samplesGridConfirm.validateNow();
				}
				
				if (isFragAnalState()) {
					columns = samplesGridConfirm.columns;
					newColumns = new Array();
					for each(var addCol:AdvancedDataGridColumn in columns) {
						if (addCol.dataField == "@description") {
							for each (var assay:Object in assays) {
								var newCol:AdvancedDataGridColumn = new AdvancedDataGridColumn();
								newCol.dataField  = "@hasAssay" + assay.@name;
								newCol.headerText = assay.@name;
								newCol.visible    = true;
								newCol.width	  = 40;
								newColumns.push(newCol);
							}
						}
						newColumns.push(addCol);
					}
					samplesGridConfirm.columns = newColumns;
					samplesGridConfirm.validateNow();
				}
			}
			
			public function addNonStandardSampleColumns():void {
				var annotation:Object;
				var col:AdvancedDataGridColumn;
				var exists:Boolean = false;
				
				addAssayColumns();
				
				// Make all annotation columns not visible
				for each(col in samplesGridConfirm.columns) {
					if (col.dataField != null && col.dataField.substr(0, 6) == "@ANNOT") {
						col.visible    = false;       				
					}    				
				}
				
				if (!isCapSeqState() && !isMitSeqState() && !isFragAnalState() && !isCherryPickState()) {
					for each(annotation in this.selectedExperiment.PropertyEntries.PropertyEntry) {
						if(annotation.@idProperty == "-1") {
							continue;
						}
						
						var property:XML = parentApplication.getSampleProperty(annotation.@idProperty);
						if ( property == null ) {
							continue;
						}
						var headerName:String = "";
						if (property.@name == "Other" && annotation.@otherLabel != "" ) {
							headerName = annotation.@otherLabel;
							annotation.@isSelected = "true";
						} else {
							headerName = annotation.@name;
						}
						
						// Note we don't specify application because that is taken care of in the back end (GetRequest).
						var isApplicable:Boolean = AnnotationUtility.isApplicableProperty(parentApplication.getSampleProperty(annotation.@idProperty),
							parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory',this.selectedExperiment.@codeRequestCategory),
							this.selectedExperiment.@idOrganism, this.selectedExperiment.@codeApplication);
						
						exists = false;
						
						for each(col in samplesGridConfirm.columns) {
							if (col.dataField == ("@ANNOT" + annotation.@idProperty)) {
								exists = true;
								col.visible    = annotation.@isSelected == "true" && isApplicable ? true : false;       				
								col.headerText = headerName;
								break;
							}    				
						}
						
						// We already have this column.  Just set the header and visible and move on.
						var newCol:AdvancedDataGridColumnWithType = new AdvancedDataGridColumnWithType();
						if (exists) {
							newCol = AdvancedDataGridColumnWithType(col);
						} else {
							newCol.dataField  = "@ANNOT" + annotation.@idProperty;
							newCol.headerText = headerName;
							newCol.visible    = (annotation.@isSelected == "true" && isApplicable ? true : false);
							newCol.propertyType = property.@codePropertyType;
							newCol.headerWordWrap = true;
							
							if (property.@codePropertyType == 'MOPTION') {
								newCol.itemRenderer =  MultiselectRenderer.create(false);
							} else if (property.@codePropertyType == 'URL') {
								newCol.itemRenderer = URLRenderer.create(false);
							} else if (property.@codePropertyType == 'CHECK') {
								// checkbox is just normal label renderer
							} else if (property.@codePropertyType == 'OPTION') {             
								newCol.itemRenderer = views.renderers.DropdownLabel.create(
									parentApplication.getPropertyOptions(annotation.@idProperty), 
									'@option', 
									'@idPropertyOption', 
									"@ANNOT" + annotation.@idProperty,
									false);                
							} else{
								newCol.wordWrap = true;
							}
						}						
						
						// Place the new column right after the description column
						var columns:Array = samplesGridConfirm.columns;
						var newColumns:Array = new Array();
						for each(var column:AdvancedDataGridColumn in columns) {
							if (column.dataField == "@description") {
								newColumns.push(newCol);
							}
							if (column != newCol) {
								newColumns.push(column);
							}
						}
						samplesGridConfirm.columns = newColumns;
						
						samplesGridConfirm.validateNow();
					} 
				}   		
			}
			
			private function showProtocol(idProtocol:Object, protocolClassName:String):void {
				var params:Object = new Object();
				params.id = idProtocol;
				params.protocolClassName = protocolClassName;
				getProtocol.send(params);
			}
			
			private function showAdapters(protocolClassName:String, fivePrime:String, threePrime:String):void {
				var adapterWindow:AdapterWindow = AdapterWindow(PopUpManager.createPopUp(DisplayObject(this.parentDocument), AdapterWindow, false));
				PopUpManager.centerPopUp(adapterWindow);
				adapterWindow.title = protocolClassName;
				adapterWindow.adapterTextArea.text = "Read 1 Adapter:\n " + threePrime + "\n\n" + "Read 2 Adapter:\n " + fivePrime;
			}
			
			private function onGetProtocol(event:ResultEvent): void { 
				if (getProtocol.lastResult.name() != "Protocol") {
					mx.controls.Alert.show(getProtocol.lastResult..ACTMESSAGE.@TEXT);
					return;
				}
				var protocolWindow:ProtocolWindow = ProtocolWindow(PopUpManager.createPopUp(DisplayObject(this.parentDocument), ProtocolWindow, false));
				PopUpManager.centerPopUp(protocolWindow);
				protocolWindow.title = getProtocol.lastResult.name;
				protocolWindow.protocolDescription.text = getProtocol.lastResult.description;
				protocolWindow.ThreePrimeAdapter.text = getProtocol.lastResult.adapterSequenceThreePrime;
				protocolWindow.FivePrimeAdapter.text = getProtocol.lastResult.adapterSequenceFivePrime;
			}
			
			public function getLaneTreeIcon(item:Object):Class {
				return null; 
			} 
			
			public function refreshDownloadList():void {
				if (theTab.selectedChild == filesView) {
					var params:Object = new Object();
					params.idRequest = this.selectedExperiment.@idRequest;
					filesView.getRequestDownloadList.send(params);
					filesView.browseParameters = params;
					theTab.selectedChild = filesView;
				}
			}
			
			public function filterList():void{		}
			
			protected function tabChangeHandler(event:IndexChangedEvent):void
			{
				refreshDownloadList();
			}
			
			[Bindable]
			private var selectedFileList:XMLListCollection;
			
			public function isControlLabelFunction(item:Object, column:AdvancedDataGridColumn):String
			{
				if (item is XML) {
					if (item.@isControl == "N") {
						return "";
					} else {
						return item.@isControl;
					}
				} else {
					return "";
				}
			}
			
			public function groupNameLabelFunction(item:Object, column:AdvancedDataGridColumn):String
			{
				if (item is XML) {
					return "";
				} else {
					return item.groupLabel;
				}
			}
			
			public function navigateToURLLink(ccNumber:String):void {
				
				if ( ccNumber == null ) {
					return;
				}
				
				var url:String = parentApplication.getProperty(parentApplication.PROPERTY_GNOMEX_LINKAGE_BST_URL) + "#ccNumber=" + ccNumber;
				
				navigateToURL( new URLRequest(url), '_blank' );
			}
			
			private function showCollaboratorWindow():void {
				var collaboratorWindow:CollaboratorWindow = CollaboratorWindow(PopUpManager.createPopUp(parentApplication.theBody, CollaboratorWindow, true));
				PopUpManager.centerPopUp(collaboratorWindow);
				collaboratorWindow.init("Collaborators for Experiment " + selectedExperiment.@number, 
					collaborators, 
					selectedExperiment);
				
			}
			
		]]>
	</mx:Script>
	
	<mx:XMLListCollection id="billingItems" source="{selectedExperiment.billingItems.BillingLab}"/>
	<mx:XMLListCollection id="samples" source="{selectedExperiment.samples.Sample}"/>
	<mx:XMLListCollection id="assays" source="{selectedExperiment.assays.Assay}"/>
	<mx:XMLListCollection id="primers" source="{selectedExperiment.primers.Primer}"/>
	<mx:XMLListCollection id="relatedAnalysis" source="{this.selectedExperiment.relatedObjects..Analysis}"/>
	<mx:XMLListCollection id="relatedTopics" source="{this.selectedExperiment.relatedTopics..Topic}"/>
	<mx:XMLListCollection id="multiplexLanes" source="{this.selectedExperiment.multiplexSequenceLanes.MultiplexLane}"/>
	<mx:XMLListCollection id="sortedTopics"
						  source="{this.selectedExperiment.topics.Topic}">
		
		<mx:sort>
			<mx:Sort>
				<mx:fields>
					<mx:SortField id="sortField"
								  name="@name"
								  caseInsensitive="true" />
				</mx:fields>
			</mx:Sort>
		</mx:sort>
	</mx:XMLListCollection>
	<mx:XMLListCollection id="collaborators" source="{selectedExperiment.collaborators.ExperimentCollaborator}"/>
	
	<mx:TabNavigator width="100%" height="100%" verticalGap="5" id="theTab" paddingBottom="4" paddingRight="4" paddingLeft="4" paddingTop="2" change="tabChangeHandler(event)">
		<mx:VBox label="Info" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4"  verticalGap="4" width="100%" id="infoTab"> 
			<mx:HBox horizontalGap="0" width="100%" >
				<mx:VBox verticalGap="4" label="Info" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4" >
					
					<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle">
						<mx:Label text="Lab group"  width="105"  styleName="formLabel" textAlign="left" id="label2"/>
						<mx:Text   text="{this.selectedExperiment.@labName}" width="280"/>
					</mx:HBox>
					<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="top" id="nameBox">
						<mx:Label text="Name" width="105" styleName="formLabel" textAlign="left" id="label3"/>
						<mx:Text text="{this.selectedExperiment.@name}"   width="280"/>
					</mx:HBox>
					<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle">
						<mx:Label text="Experiment"  width="105" styleName="formLabel" textAlign="left" id="label4"/>
						<mx:Text  text="{requestCategoryName}" width="280"/>
					</mx:HBox>
					<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle" id="hbox6">
						<mx:Label width="105"  id="label5"/>
						<mx:Text   text="{experimentCategoryName}" width="280"/>
					</mx:HBox>
					<mx:HBox width="100%" id="libDesignAndInsertBox" visible="false" includeInLayout="false">					
						<mx:HBox verticalGap="0" width="100%" horizontalGap="0">
							<mx:Text id="designAndInsertLabel" width="105" styleName="formLabel" />
							<mx:Text  id="designAndInsertText" width="280" />
						</mx:HBox>
					</mx:HBox>
					<mx:HBox id="prePoolBox"
							 visible="{this.selectedExperiment.@seqPrepByCore == 'N'}"
							 includeInLayout="{this.selectedExperiment.@seqPrepByCore == 'N'}"
							 width="100%" horizontalAlign="left" horizontalGap="0"
							 verticalAlign="top">
						<mx:Label width="105"/>
						<mx:Text width="280"
								 text="{'Library Prep. By Client' + (this.selectedExperiment.@hasPrePooledLibraries == 'Y' ? ', ' + this.selectedExperiment.@numPrePooledTubes.toString() + ' Pre-Pooled Tubes' : '')}" />
					</mx:HBox>
					<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle" id="hbox5" visible="{this.selectedExperiment.@coreToExtractDNA!=null&amp;&amp;this.selectedExperiment.@coreToExtractDNA=='Y'}" includeInLayout="{this.selectedExperiment.@coreToExtractDNA!=null&amp;&amp;this.selectedExperiment.@coreToExtractDNA=='Y'}">
						<mx:Label text="Core to extract DNA"  width="105" styleName="formLabel" textAlign="left" id="label0"/>
						<mx:Text  text="{this.selectedExperiment.@coreToExtractDNA=='Y' ? 'Yes' : 'No'}" width="280"/>
					</mx:HBox>
					<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle" includeInLayout="{this.selectedExperiment.@coreToExtractDNA!=null&amp;&amp;this.selectedExperiment.@coreToExtractDNA=='Y'}" visible="{this.selectedExperiment.@coreToExtractDNA!=null&amp;&amp;this.selectedExperiment.@coreToExtractDNA=='Y'}" id="hbox8">
						<mx:Label text="DNA prep type"  width="105" styleName="formLabel" textAlign="left"  id="label10"/>
						<mx:Text text="{this.selectedExperiment.@codeDNAPrepType != null ? parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.DNAPrepType').DictionaryEntry.(@value == this.selectedExperiment.@codeDNAPrepType).@display : ''}" 
								 width="280"/>
					</mx:HBox>
					<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle" visible="{this.selectedExperiment.@isExternal == 'Y' || this.selectedExperiment.@organismName != ''}" includeInLayout="{this.selectedExperiment.@isExternal == 'Y' || this.selectedExperiment.@organismName  != ''}" id="hbox3">
						<mx:Label text="Organism"  width="105"  styleName="formLabel" textAlign="left" id="label6"/>
						<mx:Text  text="{this.selectedExperiment.@organismName}" width="280"/>
					</mx:HBox>
					<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle" paddingTop="10" id="hbox7">
						<mx:Label text="{this.selectedExperiment.@isExternal == 'Y' ? 'Registered on' : 'Submitted on'}"  width="105"  styleName="formLabel" textAlign="left" id="label7"/>
						<mx:Text  text="{this.selectedExperiment.@createDate}" width="280"/>
					</mx:HBox>
					<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle">
						<mx:Label text="Last modified" width="105" styleName="formLabel" textAlign="left" id="label8"/>
						<mx:Text  text="{this.selectedExperiment.@lastModifyDate}" width="280"/>
					</mx:HBox>
					<mx:HBox verticalGap="0" horizontalGap="0" id="hbox2" verticalAlign="middle" 
							 visible="{selectedExperiment.@isExternal == 'Y' ? false : true}"
							 
							 includeInLayout="{selectedExperiment.@isExternal == 'Y' ? false : true}">
						<mx:Label width="105" text="Completed"  styleName="formLabel" textAlign="left" id="label9"/>
						<mx:Text    text="{this.selectedExperiment.@completedDate}" width="280"/>
					</mx:HBox>
					
				</mx:VBox>
				
				<mx:VBox borderStyle="none" verticalGap="4" width="100%">
					<mx:HBox verticalGap="0" horizontalGap="0">
						<mx:Label text="{'Owned by'}" width="105" styleName="formLabel" textAlign="left"/>
						<mx:Text   text="{this.selectedExperiment.@ownerName}" width="200"/>
					</mx:HBox>
					<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle">
						<mx:Label text="{this.selectedExperiment.@isExternal == 'Y' ? 'Registered by' : 'Submitted by'}" width="105"  styleName="formLabel" textAlign="left"/>
						<mx:Text  text="{this.selectedExperiment.@submitterName}" width="200"/>
					</mx:HBox>
					<mx:HBox verticalGap="0" horizontalGap="0" includeInLayout="{this.selectedExperiment.@email != ''}" visible="{this.selectedExperiment.@email != ''}" verticalAlign="middle">
						<mx:Label text="Email" width="105"  styleName="formLabel" textAlign="left"/>
						<mx:Text    text="{this.selectedExperiment.@email}" width="200"/>
					</mx:HBox>
					<mx:HBox verticalGap="0" horizontalGap="0">
						<mx:Label text="Phone" width="105" styleName="formLabel" textAlign="left"/>
						<mx:Text  text="{this.selectedExperiment.@phone}" width="200"/>
					</mx:HBox>
					<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle">
						<mx:Text  width="105" text="Visibility"  styleName="formLabel" textAlign="left"/>
						<mx:Text  text="{visibilityName}" width="200"/>
					</mx:HBox>
					<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle">
						<mx:Text  width="105" text="Institution"  styleName="formLabel" textAlign="left"/>
						<mx:Text  text="{institutionName}" width="200"/>
					</mx:HBox>
					<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="top"
							 visible="{this.selectedExperiment.@canUpdate == 'Y'}"
							 includeInLayout="{this.selectedExperiment.@canUpdate == 'Y'}">
						<mx:LinkButton  width="105" label="Collaborators" textDecoration="underline"
										enabled="{this.selectedExperiment.@canUpdateVisibility == 'Y'}"
										styleName="formLabel" textAlign="left" click="showCollaboratorWindow()" paddingLeft="0" />
						<mx:VBox verticalGap="0">
							<mx:Repeater id="collaboratorRepeater" dataProvider="{this.selectedExperiment.collaborators.ExperimentCollaborator}"> 
								<mx:Text id="collaborator" 
										 text="{parentApplication.dictionaryManager.getEntryDisplay('hci.gnomex.model.AppUserLite', collaboratorRepeater.currentItem.@idAppUser)}" />
							</mx:Repeater>
						</mx:VBox>
					</mx:HBox>
					
				</mx:VBox>
			</mx:HBox>
			<mx:VBox id="headerBox" width="100%" paddingLeft="4">
				<mx:HBox id="protocolsBox"
						 visible="{this.selectedExperiment.protocols.Protocol.length() &gt; 0}"
						 width="100%" horizontalAlign="left" horizontalGap="0"
						 verticalAlign="top">
					<mx:Label text="Protocols"  id="label1" styleName="formLabel" width="105" textAlign="left"/>
					<mx:Tile id="tile1" width="100%" height="100%" direction="horizontal"
							 fontSize="9" horizontalGap="0" paddingBottom="0"
							 paddingLeft="0" paddingRight="0" paddingTop="0" verticalGap="0">
						
						<mx:Repeater id="protocolRepeater" width="100%" height="100%"
									 dataProvider="{this.selectedExperiment.protocols.Protocol}"> 
							<mx:LinkButton id="labelProtocol" width="100%" height="100%"
										   label="{protocolRepeater.currentItem.@label}"
										   click="{showProtocol(event.currentTarget.getRepeaterItem().@idProtocol, event.currentTarget.getRepeaterItem().@protocolClassName)}"
										   paddingBottom="0" paddingLeft="1"
										   paddingRight="1" paddingTop="0"
										   styleName="formLinkProtocolButton"
										   textAlign="left"/>
						</mx:Repeater>									
						
					</mx:Tile>							
				</mx:HBox>
			</mx:VBox>										
			<mx:HBox id="adaptersBox"
					 visible="{this.selectedExperiment.protocols.Protocol.length() &gt; 0 &amp;&amp; (this.selectedExperiment.protocols.Protocol.@Adapter5Prime.toXMLString()!='' || this.selectedExperiment.protocols.Protocol.@Adapter3Prime.toXMLString()!='')}"
					 width="100%" horizontalAlign="left" horizontalGap="0"
					 verticalAlign="top">		
				<mx:Label id="labelAdapter" width="104" paddingLeft="4" styleName="formLabel"
						  text="Adapter Trimming" textAlign="left"/>
				<mx:Tile id="tileAdapter" direction="vertical" fontSize="9"
						 horizontalGap="0" paddingBottom="0" paddingLeft="0"
						 paddingRight="0" paddingTop="0" verticalGap="0" width="100%">
					<mx:HBox visible="{this.selectedExperiment.protocols.Protocol.@Adapter3Prime.toXMLString()!=''}"
							 width="100%">
						<mx:Label width="40" styleName="formLabel" text="Read 1"/>
						<mx:LinkButton width="100%"
									   label="{this.selectedExperiment.protocols.Protocol.length() ?  this.selectedExperiment.protocols.Protocol.@Adapter3Prime : ''}"
									   click="{showAdapters(this.selectedExperiment.protocols.Protocol[0].@label, this.selectedExperiment.protocols.Protocol[0].@Adapter5Prime, this.selectedExperiment.protocols.Protocol[0].@Adapter3Prime)}"
									   paddingLeft="1" paddingRight="1"
									   styleName="formLinkProtocolButton"
									   textAlign="left"/>
					</mx:HBox>		
					<mx:HBox visible="{this.selectedExperiment.protocols.Protocol.@Adapter5Prime.toXMLString()!=''}"
							 width="100%">
						<mx:Label width="40"  styleName="formLabel" text="Read 2"/>
						<mx:LinkButton width="100%"
									   label="{this.selectedExperiment.protocols.Protocol.length() &gt; 0 ?  this.selectedExperiment.protocols.Protocol.@Adapter5Prime : ''}"
									   click="{showAdapters(this.selectedExperiment.protocols.Protocol[0].@label, this.selectedExperiment.protocols.Protocol[0].@Adapter5Prime, this.selectedExperiment.protocols.Protocol[0].@Adapter3Prime)}"
									   paddingLeft="1" paddingRight="1"
									   styleName="formLinkProtocolButton"
									   textAlign="left"/>
					</mx:HBox>							
				</mx:Tile>							
			</mx:HBox>				          
			<mx:HBox width="100%" horizontalAlign="left" paddingLeft="0" id="hbox9">
				<mx:VBox id="workflowProgressBox"  verticalGap="0"  cornerRadius="6" borderStyle="solid" paddingLeft="4" paddingRight="4" paddingTop="4" shadowDirection="4">
					<mx:HBox width="100%" >
						<mx:Text width="90" text="Order Status" styleName="formLabel"  textAlign="right"/>
						
					</mx:HBox>
					<mx:HBox  verticalGap="0">
						<mx:Repeater id="stepLabelRepeater" dataProvider="{selectedExperiment.workflowStatus.Step}">
							<mx:Text text="{stepLabelRepeater.currentItem.@name}" width="89" fontSize="9" id="text1"/>
						</mx:Repeater>
					</mx:HBox>
					<mx:VBox >
						<mx:Repeater id="workflowProgressRepeater" dataProvider="{selectedExperiment.workflowStatus.Progress}" >
							<mx:HBox horizontalGap="0" verticalAlign="middle">
								<mx:ProgressBar id="workflowProgressBar" labelPlacement="right" width="{100 * selectedExperiment.workflowStatus.@numberOfSteps}" maximum="{selectedExperiment.workflowStatus.@numberOfSteps}" mode="manual" label="" themeColor="#2C9D11" paddingRight="0" paddingLeft="4"/>
								<mx:Text  text="{workflowProgressRepeater.currentItem.@title}" fontSize="9" paddingLeft="0" fontStyle="italic"/>
							</mx:HBox>
						</mx:Repeater>
					</mx:VBox>
				</mx:VBox>
				
			</mx:HBox>
			
		</mx:VBox>
		
		<mx:VBox id="notesTab" label="Description" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4" verticalGap="0">
			<mx:Spacer height="4"/>
			<mx:Label text="Description" styleName="formLabel"/>
			<mx:RichTextEditor  borderStyle="none"  headerHeight="0"  
								id="overallDescript" width="100%" 
								htmlText="{this.selectedExperiment.@description}" 
								showControlBar="false" 
								paddingLeft="0" paddingRight="0" paddingTop="0" 
								roundedBottomCorners="false" paddingBottom="0" 
								borderThicknessRight="0" borderThicknessLeft="0" 
								borderThicknessBottom="0" borderThickness="0" 
								borderThicknessTop="0" height="100%" minHeight="50" styleName="readOnly"/>
			<mx:VBox width="100%" height="100%" id="projectDescVBox">
				<mx:Spacer height="4" />
				<mx:VBox verticalGap="0" width="100%" height="100%" >
					<mx:Label text="Project Description"  styleName="formLabel"/>
					<util:TextAreaWorkaround id="projectDesc" backgroundColor="0xffffff" editable="false" text="{this.selectedExperiment.@projectDescription}" width ="100%" height="100%" />
				</mx:VBox>
			</mx:VBox>
			<mx:VBox width="100%" height="100%" id="bioAndCoreNoteVBox">
				<mx:Spacer height="4" />
				<mx:VBox verticalGap="0" width="100%" height="100%" id="noteToCoreFacilityBox" visible="true" includeInLayout="true">
					<mx:Label text="Notes for Core Facility"  styleName="formLabel"/>
					<util:TextAreaWorkaround id="noteToSeq" backgroundColor="0xffffff" editable="false" text="{this.selectedExperiment.@corePrepInstructions}" width ="100%" height="100%"  />
				</mx:VBox>
			</mx:VBox>
			<mx:VBox width="100%" height="100%" id="adminNoteBox" includeInLayout="{parentApplication.isAdminState &amp;&amp; parentApplication.getCoreFacilityProperty(this.selectedExperiment.@idCoreFacility, parentApplication.PROPERTY_SHOW_ADMIN_NOTES_ON_REQUEST) == 'Y'}"
					 visible="{parentApplication.isAdminState &amp;&amp; parentApplication.getCoreFacilityProperty(this.selectedExperiment.@idCoreFacility, parentApplication.PROPERTY_SHOW_ADMIN_NOTES_ON_REQUEST) == 'Y'}">
				<mx:Spacer height="4" />
				<mx:VBox verticalGap="0" width="100%" height="100%" id="adminNotes" visible="true" includeInLayout="true">
					<mx:Label text="Administration Notes"  styleName="formLabel"/>
					<util:TextAreaWorkaround id="noteToAdmin" backgroundColor="0xffffff" editable="false" text="{this.selectedExperiment.@adminNotes}" width ="100%" height="100%"  />
				</mx:VBox>
			</mx:VBox>
		</mx:VBox>
		<mx:VBox verticalGap="0" width="100%" height="100%" id="samplesTab" label="Samples" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4">
			
			<grid:CopyPasteSampleGrid width="100%" height="100%" id="samplesGridConfirm"  
									  editable="false" backgroundAlpha="0" borderStyle="solid" fontSize="11">
				<grid:columns>
					<mx:AdvancedDataGridColumn id="multiplexGroupNumberColumn" headerText="Multiplex #" dataField="@multiplexGroupNumber" labelFunction="groupNameLabelFunction" editable="false" visible="true"
											   width="60">
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox horizontalScrollPolicy="off" verticalGap="0">
									<mx:Label text="Multiplex"/>
									<mx:Label text="Group #"/>
								</mx:VBox> 
							</mx:Component> 
						</mx:headerRenderer> 
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn id="plateNameCol" headerText="Plate" dataField="@plateName" editable="false" visible="true" width="60" labelFunction="groupNameLabelFunction" />
					<mx:AdvancedDataGridColumn headerText="ID" width="70" dataField="@number"/>
					<mx:AdvancedDataGridColumn id="wellNameCol" visible="false" editable="false" headerText="Well"  width="40" resizable="false" dataField="@wellName"/>
					<mx:AdvancedDataGridColumn id="isControlCol" visible="false" editable="false" headerText="Ctrl?"  width="40" resizable="false" dataField="@isControl"
											   labelFunction="isControlLabelFunction"/>
					<mx:AdvancedDataGridColumn headerText="Sample Name" id="sampleNameColumn" width="160" dataField="@name"/>
					<mx:AdvancedDataGridColumn  headerText="Source Plate" width="150" dataField="@sourcePlate" editable="false" id="cherrySourcePlateCol"/>
					<mx:AdvancedDataGridColumn  headerText="Source Well"  width="75" dataField="@sourceWell" editable="false" id="cherrySourceWellCol"/>
					<mx:AdvancedDataGridColumn  headerText="Dest. Well" width="75" dataField="@destinationWell" editable="false" id="cherryDestinationWellCol"/>
					
					<mx:AdvancedDataGridColumn id="reactionPlateCol" headerText="Reaction Plates" width="140" dataField="@reactionPlateNames" editable="false" wordWrap="true" />
					<mx:AdvancedDataGridColumn id="redoFlagCol" width="40" headerText="Redo" dataField="@redoFlag" editable="false">
						<mx:itemRenderer>
							<mx:Component >
								<mx:HBox  horizontalAlign="center" horizontalGap="1" >
									<mx:Image source="{data.hasOwnProperty('@redoFlag') &amp;&amp; data.@redoFlag == 'Y' ? parentApplication.iconCheck : ''}">
									</mx:Image> 
								</mx:HBox>
							</mx:Component>
						</mx:itemRenderer>
					</mx:AdvancedDataGridColumn>
					
					
					
					<mx:AdvancedDataGridColumn id="concentrationCol" headerText="Conc." width="65" visible="true"  dataField="@concentration"/>
					<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="concentrationUnitCol" visible="{true}"  headerText="Unit"  width="60" 
											   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ConcentrationUnit').DictionaryEntry, '@display', '@value', '@codeConcentrationUnit')}"/>
					
					<mx:AdvancedDataGridColumn id="meanLibSizeActualCol" headerWordWrap="true" wordWrap="true" visible="{currentState == 'SolexaState' &amp;&amp; meanLibSizeActualCol.dataField != ''}" headerText="Ave Insert Size" width="90" dataField="@meanLibSizeActual" editable="false" rendererIsEditor="false">
						<mx:itemRenderer>
							<mx:Component>
								<mx:Label text="{data.hasOwnProperty('@meanLibSizeActual') &amp;&amp; data.@meanLibSizeActual != '' ? (parseInt(data.@meanLibSizeActual) - outerDocument.globalAdapterSize).toString() : ''}"/>
							</mx:Component>
						</mx:itemRenderer>
					</mx:AdvancedDataGridColumn>
					
					<mx:AdvancedDataGridColumn id="ccNumberCol" visible="{this.selectedExperiment.@hasCCNumber == 'Y' ? true : false}" headerText="CC Number" width="105" dataField="@ccNumber">
						<mx:itemRenderer>
							<mx:Component>
								<mx:LinkButton includeInLayout="{data.hasOwnProperty('@ccNumber')}" 
											   click="outerDocument.navigateToURLLink(data.@ccNumber)" 
											   label="{data.hasOwnProperty('@ccNumber') ? data.@ccNumber : ''}"  
											   paddingLeft="0" textDecoration="underline" color="#121CE8" width="100%" textAlign="left"/>
								
							</mx:Component>
						</mx:itemRenderer>
					</mx:AdvancedDataGridColumn>
					
					<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="barcodeCol" headerText="Index Tag A"  width="75" visible="{true}" dataField="@idOligoBarcode"
											   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OligoBarcode').DictionaryEntry, '@display', '@value', '@idOligoBarcode')}">
						<util:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalScrollPolicy="off">
									<mx:Label text="Index"/>
									<mx:Label text="Tag A"/>
								</mx:VBox>
							</mx:Component>
						</util:headerRenderer>
					</util:AdvancedDataGridColumnWithType>
					<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="barcodeColB" headerText="Index Tag B"  width="75" visible="{true}" dataField="@idOligoBarcodeB"
											   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OligoBarcode').DictionaryEntry, '@display', '@value', '@idOligoBarcodeB')}">
						<util:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalScrollPolicy="off">
									<mx:Label text="Index"/>
									<mx:Label text="Tag B"/>
								</mx:VBox>
							</mx:Component>
						</util:headerRenderer>
					</util:AdvancedDataGridColumnWithType>
					<mx:AdvancedDataGridColumn id="customBarcodeCol" headerText="Index Tag" width="65" visible="true"  dataField="@barcodeSequence">
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalScrollPolicy="off">
									<mx:Label text="Custom"/>
									<mx:Label text="Index Tag"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer> 
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn id="customBarcodeColB" headerText="Index Tag B" width="65" visible="true"  dataField="@barcodeSequenceB">
						<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalScrollPolicy="off">
									<mx:Label text="Custom"/>
									<mx:Label text="Index Tag B"/>
								</mx:VBox>
							</mx:Component>
						</mx:headerRenderer> 
					</mx:AdvancedDataGridColumn>
					<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="organismCol" headerText="Organism" visible="{true}"  width="80" dataField="@idOrganism'"
											   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OrganismLite').DictionaryEntry, '@display', '@value', '@idOrganism')}"/>
					<mx:AdvancedDataGridColumn id="otherOrganismCol" headerText="Organism (other)" width="105" dataField="@otherOrganism" visible="false"/>
					<mx:AdvancedDataGridColumn id="preppedByLabCol" headerText="Core to prep lib?"   visible="{true}" width="104"  dataField="@seqPrepByCore"/>
					<mx:AdvancedDataGridColumn id="otherSamplePrepMethodCol" headerText="Nucl. acid extraction meth." width="105" dataField="@otherSamplePrepMethod"/>
					<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="chipTypeCol" visible="{true}" headerText="Assay"  width="120" dataField="@codeBioanalyzerChipType"
											   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@codeBioanalyzerChipType')}"/>
					
					<mx:AdvancedDataGridColumn id="qcConcCol" visible="false" headerText="QC Conc. (ng/uL)" width="80" dataField="@qualCalcConcentration"/>
					<mx:AdvancedDataGridColumn id="qc260Col" visible="false" headerText="QC 260/230" width="80" dataField="@qual260nmTo230nmRatio"/>
					<mx:AdvancedDataGridColumn id="qc260280Col" visible="false" headerText="QC 260/280" width="80" dataField="@qual260nmTo280nmRatio"/>
					<mx:AdvancedDataGridColumn id="qubitConcentrationCol" headerText="Qubit Conc." width="65" visible="true"  dataField="@qubitConcentration"/>
					<mx:AdvancedDataGridColumn id="qcRINCol" visible="false" headerText="QC RIN" width="70" dataField="@qualRINNumber"/>
					<mx:AdvancedDataGridColumn visible="{currentState == 'SolexaState'}" headerText="QC Frag Size (from)" width="90" dataField="@qualFragmentSizeFrom"/>
					<mx:AdvancedDataGridColumn visible="{currentState == 'SolexaState'}" headerText="QC Frag Size (to)" width="90" dataField="@qualFragmentSizeTo"/>
					<mx:AdvancedDataGridColumn id='qcStatusCol' visible="true" headerText="QC Status" width="90" dataField="@qualStatus"/>
					<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sampleTypeCol" headerText="Sample Type"  width="105" visible="{true}" dataField="@idSampleType"
														 itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType')}"/>
					
					<util:AdvancedDataGridColumnWithType propertyType="OPTION"  visible="{currentState == 'SolexaState'}" headerText="Seq Lib Protocol"  width="120" dataField="@idSeqLibProtocol"
												itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqLibProtocol').DictionaryEntry, '@display', '@value', '@idSeqLibProtocol')}"/>
					<mx:AdvancedDataGridColumn visible="{currentState == 'SolexaState'}" headerText="Seq Lib Conc. ng/uL" width="90" dataField="@seqPrepLibConcentration"/>
					<mx:AdvancedDataGridColumn visible="{currentState == 'SolexaState'}" headerText="Seq Lib Prep Status" width="90" dataField="@seqPrepStatus"/>
					<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sampleSourceCol" headerText="Sample Source"  width="105" visible="{false}" dataField="@idSampleSource"
											   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleSource').DictionaryEntry, '@display', '@value', '@idSampleSource')}"/>
					<mx:AdvancedDataGridColumn id="descriptionCol" headerText="Description" wordWrap="true" width="105" dataField="@description"/>
				</grid:columns>
			</grid:CopyPasteSampleGrid>
		</mx:VBox>
		
		<mx:Canvas label="Billing" id="billingTab" width="100%" height="100%">
			<mx:VBox width="100%" height="100%" verticalGap="4"  paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4" id="billingContainer" >
				<mx:AdvancedDataGrid height="100%" width="100%" id="billingADConfirmGrid"  
									 displayItemsExpanded="true"  
									 editable="false" 
									 sortExpertMode="true" horizontalScrollPolicy="auto"
									 sortableColumns="false"
									 backgroundAlpha="0" borderStyle="solid" showHeaders="true" 
									 fontSize="9" iconFunction="parentApplication.getTreeIcon">
					<mx:dataProvider>   
						<mx:HierarchicalData source="{billingItems}"/> 
					</mx:dataProvider> 
					<mx:columns> 
						<mx:AdvancedDataGridColumn headerText="Group" dataField="@labName" editable="false" width="70" wordWrap="false"/>
						<mx:AdvancedDataGridColumn headerText="Acct" dataField="@accountName" editable="false" width="105" wordWrap="false" />
						<mx:AdvancedDataGridColumn headerText="Period" dataField="@idBillingPeriod" editable="false" width="70"  wordWrap="false"
												   itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingPeriod').DictionaryEntry,'@display', '@value', '@idBillingPeriod')}"/>
						<mx:AdvancedDataGridColumn  headerText="Price Category" wordWrap="true" dataField="@category" editable="false" width="200">
							<mx:itemRenderer>
								<mx:Component>
									<mx:Text text="{data.@category}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
								</mx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn headerText="Description" wordWrap="true" dataField="@description" editable="false" width="200">
							<mx:itemRenderer>
								<mx:Component>
									<mx:Text text="{data.@description}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
								</mx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn headerText="Notes"  dataField="@notes" editable="false" width="105" wordWrap="true">
							<mx:itemRenderer>
								<mx:Component>
									<mx:Text text="{data.@notes}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
								</mx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn headerText="Qty" dataField="@qty" editable="false" textAlign="right" width="50" >
							<mx:itemRenderer>
								<mx:Component>
									<mx:Text  textAlign="right" text="{data.@qty}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
								</mx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn headerText="Unit price" dataField="@unitPrice"  textAlign="right" editable="false" width="65" > 
							<mx:itemRenderer>
								<mx:Component>
									<mx:Text  textAlign="right" text="{data.@unitPrice}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
								</mx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn headerText="%" dataField="@percentageDisplay" editable="false" textAlign="right" width="50" wordWrap="false"
												   rendererIsEditor="false"
												   itemRenderer="views.renderers.LabelPercentage" />                             
						<mx:AdvancedDataGridColumn headerText="Total price" dataField="@invoicePriceDisplay" textAlign="right" width="105" editable="false" >
							<mx:itemRenderer>
								<mx:Component>
									<mx:Text text="{data.@invoicePrice}"  textAlign="right" styleName="{data.@other == 'Y' ?'other':'normal'}" />
								</mx:Component>
							</mx:itemRenderer>
						</mx:AdvancedDataGridColumn>
						<mx:AdvancedDataGridColumn headerText="Status" dataField="@codeBillingStatus" editable="false" width="70" wordWrap="false"
												   itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingStatus').DictionaryEntry,'@display', '@value', '@codeBillingStatus')}"/>                 
					</mx:columns>
				</mx:AdvancedDataGrid>
			</mx:VBox>
		</mx:Canvas>
		
		<experiment:ExperimentDownloadView id="filesView" uploadButtonsVisible="{this.selectedExperiment.@canUploadData == 'Y'}" request="{this.selectedExperiment}" >
		</experiment:ExperimentDownloadView>
		
		
		<mx:VBox id="relatedEntriesTab" verticalGap="0" width="100%" height="100%" label="{relatedDataTitle}" >
			<mx:HBox width="100%" height="100%" horizontalGap="0" >
				
				<mx:VBox visible="{relatedAnalysis.length &gt; 0}" includeInLayout="{relatedAnalysis.length &gt; 0}" width="100%" height="100%" paddingLeft="4" paddingRight="4" paddingTop="4" verticalGap="0" paddingBottom="0">
					<mx:HBox width="100%" verticalAlign="middle">
						<mx:Label text="Analyses and Data Tracks" styleName="formLabel"/>
						<mx:LinkButton label="Browse Analyses" icon="@Embed(source='../../assets/map.png')" textDecoration="underline" 
									   enabled="false" disabledIcon="@Embed(source='../../assets/map_disable.png')" 
									   id="analysisButton" click="showRelatedAnalysis()" textAlign="left" 
									   fontSize="10">
						</mx:LinkButton>
					</mx:HBox>
					<mx:Tree id="relatedAnalysisTree" width="100%" height="100%" dataProvider="{relatedAnalysis}"  
							 showRoot="false" labelField="@label"  
							 doubleClickEnabled="true"
							 itemDoubleClick="onDoubleClickRelatedAnalysis()"
							 iconFunction="parentApplication.getTreeIcon">							
					</mx:Tree> 
				</mx:VBox> 
				<mx:VBox visible="{relatedTopics.length &gt; 0}" includeInLayout="{relatedTopics.length &gt; 0}" width="100%" height="100%" paddingLeft="4" paddingRight="4" paddingBottom="0" paddingTop="4" verticalGap="0">
					<mx:Label text="Topics"  styleName="formLabel"/>
					<mx:Tree id="relatedTopicsTree" width="100%" height="100%" dataProvider="{relatedTopics}"  
							 showRoot="false" labelField="@label"  
							 doubleClickEnabled="true"
							 itemDoubleClick="onDoubleClickRelatedTopic()"
							 iconFunction="parentApplication.getTreeIcon">							
					</mx:Tree> 
				</mx:VBox> 
			</mx:HBox>						   
			
			<mx:HBox verticalAlign="middle" width="100%">
				<mx:Spacer width="100%"/>
				<mx:TextArea height="18" styleName="instructionBox" width="230" id="textarea1" >
					<mx:htmlText><![CDATA[Double-click on any entry to pull up details.]]></mx:htmlText>
				</mx:TextArea>
			</mx:HBox>
			
		</mx:VBox>
	</mx:TabNavigator>
	
	
	<mx:ControlBar width="100%"  id="controlbar1">
		<mx:HBox  verticalAlign="middle" 
				  visible="{theTab.selectedChild==filesView}" 
				  includeInLayout="{theTab.selectedChild==filesView}" 
				  width="100%" horizontalAlign="left" 
				  id="downloadExpandedFilesButtonView"  >
		</mx:HBox>		
	</mx:ControlBar>
	
	
	<mx:states>
		<mx:State name="MicroarrayState">		 
			<mx:AddChild relativeTo="{this.samplesTab}" position="after" >
				<mx:VBox width="100%" height="100%" verticalGap="0" id="hybsConfirmContainer" label="Hybs">
					<mx:HBox width="100%" horizontalGap="2" paddingTop="4">
						<mx:HBox width="100%"  horizontalAlign="right" paddingRight="4">
							<mx:CheckBox id="showCy3LabelingFieldsCheckBox" label="Show Cy3 Labeling columns" click="showCy3LabelCols(showCy3LabelingFieldsCheckBox.selected)"/>
							<mx:CheckBox id="showCy5LabelingFieldsCheckBox" label="Cy5 Labeling" click="showCy5LabelCols(showCy5LabelingFieldsCheckBox.selected)"/>
							<mx:CheckBox id="showHybFieldsCheckBox" label="Hyb"/>
							<mx:CheckBox id="showExtFieldsCheckBox" label="Scan/FE"/>
						</mx:HBox>
					</mx:HBox>
					<mx:DataGrid width="100%" height="100%" id="hybsGridConfirm"  horizontalScrollPolicy="auto" editable="false" dataProvider="{this.selectedExperiment.hybridizations.Hybridization}"  backgroundAlpha="0" borderStyle="solid">
						<mx:columns>
							<mx:DataGridColumn headerText="ID" width="60" dataField="@number"/>
							<mx:DataGridColumn editable="false" headerText="Cy3 Sample (green)"  width="122" labelFunction="getChannel1SampleName"/>
							<mx:DataGridColumn editable="false" headerText="ID"  width="60" labelFunction="getChannel1SampleNumber"/>
							<mx:DataGridColumn id="channel2SampleConfirmColumn" editable="false" headerText="Cy5 Sample (red)"  width="122" labelFunction="getChannel2SampleName"/>
							<mx:DataGridColumn editable="false" headerText="ID"  width="60" labelFunction="getChannel2SampleNumber"/>
							
							<mx:DataGridColumn id="labelCol1"  visible="false"  headerText="Channel1 Labeling protocol" width="80" dataField="@idLabelingProtocolChannel1"
											   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingProtocol').DictionaryEntry, '@display', '@value', '@idLabelingProtocolChannel1')}">                 											
								<mx:headerRenderer > 
									<mx:Component>
										<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
											<mx:Label text="Cy3 Label"/>
											<mx:Label text="Protocol"/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:DataGridColumn>
							<mx:DataGridColumn id="labelCol2"  visible="false" headerText="Channel1 Labeling yield" width="80" dataField="@labelingYieldChannel1">
								<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
											<mx:Label text="Cy3 Label"/>
											<mx:Label text="Conc."/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:DataGridColumn>
							<mx:DataGridColumn id="labelCol3"  visible="false" headerText="Channel1 Labeling Reaction size" width="80" dataField="@codeLabelingReactionSizeChannel1">
								<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
											<mx:Label text="Cy3 Label"/>
											<mx:Label text="Reaction size"/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:DataGridColumn>
							<mx:DataGridColumn id="labelCol4"  visible="false" headerText="Channel1 Labeling # Reactions" width="80" dataField="@numberOfReactionsChannel1">
								<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
											<mx:Label text="Cy3 Label"/>
											<mx:Label text="# reactions"/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:DataGridColumn>
							<mx:DataGridColumn  id="labelCol5"   visible="false" headerText="Channel1 Labeling Status" width="80" dataField="@labelingStatusChannel1">
								<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
											<mx:Label text="Cy3 Label"/>
											<mx:Label text="Status"/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:DataGridColumn>
							<mx:DataGridColumn id="labelCol6"   visible="false" headerText="Channel2 Labeling protocol"  width="80" dataField="@idLabelingProtocolChannel2"
											   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingProtocol').DictionaryEntry, '@display', '@value','@idLabelingProtocolChannel2')}">                 											
								<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
											<mx:Label text="Cy5 Label"/>
											<mx:Label text="Protocol"/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:DataGridColumn>
							<mx:DataGridColumn id="labelCol7"   visible="false" headerText="Channel2 Labeling yield" width="80" dataField="@labelingYieldChannel2">
								<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
											<mx:Label text="Cy5 Label"/>
											<mx:Label text="Conc."/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:DataGridColumn>
							<mx:DataGridColumn id="labelCol8"  visible="false" headerText="Channel2 Labeling Reaction size" width="80" dataField="@codeLabelingReactionSizeChannel2">
								<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
											<mx:Label text="Cy5 Label"/>
											<mx:Label text="Reaction size"/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:DataGridColumn>
							<mx:DataGridColumn id="labelCol9"  visible="false"  headerText="Channel2 Labeling # Reactions" width="80" dataField="@numberOfReactionsChannel2">
								<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
											<mx:Label text="Cy5 Label"/>
											<mx:Label text="# reactions"/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:DataGridColumn>
							<mx:DataGridColumn id="labelCol10"   visible="false" headerText="Channel2 Labeling Status" width="80" dataField="@labelingStatusChannel2">
								<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
											<mx:Label text="Cy5 Label"/>
											<mx:Label text="Status"/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:DataGridColumn>
							
							
							
							<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Hyb Slide barcode" width="70" dataField="@slideBarcode"/>
							<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Coordinate" width="70" dataField="@arrayCoordinateName"/>
							<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Hyb Protocol" width="70" dataField="@idHybProtocol"
											   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.HybProtocol').DictionaryEntry, '@display', '@value', '@idHybProtocol')}"/>                 											
							<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Hyb Status" width="90" dataField="@hybStatus"/>
							
							
							<mx:DataGridColumn visible="{showExtFieldsCheckBox.selected}" headerText="Scan Protocol" width="70" dataField="@idScanProtocol"
											   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ScanProtocol').DictionaryEntry, '@display', '@value', '@idScanProtocol')}"/>                 											
							<mx:DataGridColumn visible="{showExtFieldsCheckBox.selected}" headerText="F/E Protocol" width="70" dataField="@idFeatureExtractionProtocol"
											   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.FeatureExtractionProtocol').DictionaryEntry, '@display', '@value', '@idFeatureExtractionProtocol')}"/>                 											
							<mx:DataGridColumn visible="{showExtFieldsCheckBox.selected}" headerText="Ext Status" width="90" dataField="@extractionStatus"/>
							
							
							<mx:DataGridColumn headerText="Slide" visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showHybFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"  width="320" dataField="@slideDesignName" />
							<mx:DataGridColumn headerText="Slide Source"  visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showHybFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"   width="82"   
											   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SlideSource').DictionaryEntry, '@display', '@value', '@codeSlideSource')}"/>                 											
							<mx:DataGridColumn headerText="Notes" width="105"  visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"   dataField="@notes"/>
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="QCState">		
		</mx:State>
		<mx:State name="SolexaState">
			<mx:SetProperty target="{samplesTab}" name="label" value="Experiment Design"/>
			<mx:AddChild relativeTo="{this.samplesTab}" position="after">
				<mx:VBox  id="bioinformaticsTab" label="Bioinformatics"  verticalGap="0" width="100%" height="100%">
					<mx:VBox verticalGap="0" width="100%" height="100%"  id='noteToBioBox'
							 visible="true"  
							 includeInLayout="true">
						<mx:Label text="{'Organism: ' + this.selectedExperiment.@organismName}" 
								  styleName="formLabel"/>
						<mx:Spacer height="10"/>
						<mx:Label text="{'Align to GenomeBuild: ' + alignToGenomeBuild}"
								  styleName="formLabel"/>
						<mx:Label text="{'Genome Build: ' + genomeBuild}" 
								  styleName="formLabel"/>
						<mx:Spacer height="10"/>
						<mx:Label text="{this.selectedExperiment.@bioinformaticsAssist == 'Y' ? 'Bioinformatics Core Assistance Requested' : 'No Bioinformatics Core Assistance Desired'}" 
								  styleName="formLabel"/>
						<mx:Spacer height="10"/>
						<mx:Label text="Notes for Bioinformatics Group"   styleName="formLabel"/>
						<util:TextAreaWorkaround id="noteToBio" backgroundColor="0xffffff" editable="false" text="{this.selectedExperiment.@analysisInstructions}" width ="100%" height="100%" />
					</mx:VBox>
				</mx:VBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{this.samplesTab}" position="after">
				<mx:VBox  id="lanesConfirmContainer" label="Sequence Lanes"  verticalGap="0" width="100%" height="100%">
					<mx:AdvancedDataGrid width="100%" 
										 height="100%" id="lanesConfirmGrid"
										 displayItemsExpanded="true"
										 sortExpertMode="true"
										 sortableColumns="false"   resizableColumns="true"
										 editable="false"
										 iconFunction="getLaneTreeIcon"
										 rollOverColor="#C0C0C0" selectionColor="#FFFFB9" 
										 horizontalScrollPolicy="auto">
						<mx:dataProvider>   
							<mx:HierarchicalData source="{multiplexLanes}"/> 
						</mx:dataProvider> 							
						<mx:columns>
							<mx:AdvancedDataGridColumn headerText="ID" width="90" dataField="@number"/>
							<mx:AdvancedDataGridColumn  headerText="Sample Name"  width="100" dataField="@sampleName" editable="false"/>
							<mx:AdvancedDataGridColumn  headerText="Sample ID"  width="90" dataField="@sampleNumber" editable="false"/>
							<mx:AdvancedDataGridColumn id="laneBarcodeCol" headerText="Barcode"  width="75" visible="{true}"  
													   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OligoBarcode').DictionaryEntry, '@display', '@value', '@sampleIdOligoBarcode')}">
								<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalScrollPolicy="off">
											<mx:Label text="Illumina"/>
											<mx:Label text="Barcode"/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn id="laneBarcodeColB" headerText="Barcode B"  width="75" visible="{true}"  
													   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OligoBarcode').DictionaryEntry, '@display', '@value', '@sampleIdOligoBarcodeB')}">
								<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalScrollPolicy="off">
											<mx:Label text="Illumina"/>
											<mx:Label text="Barcode B"/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn id="laneCustomBarcodeCol" headerText="Barcode" width="65" visible="true"  dataField="@sampleBarcodeSequence">
								<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalScrollPolicy="off">
											<mx:Label text="Custom"/>
											<mx:Label text="Barcode"/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn id="laneCustomBarcodeColB" headerText="Barcode B" width="65" visible="true"  dataField="@sampleBarcodeSequenceB">
								<mx:headerRenderer>
									<mx:Component>
										<mx:VBox verticalGap="0" horizontalScrollPolicy="off">
											<mx:Label text="Custom"/>
											<mx:Label text="Barcode B"/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn width="215" id="numberOfSequencingCyclesCol" headerText="Sequencing Protocol"   editable="false" dataField="@idNumberSequencingCyclesAllowed" 						             						             
													   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCyclesAllowed').DictionaryEntry, '@display', '@value', '@idNumberSequencingCyclesAllowed')}"/>                 											
							<mx:AdvancedDataGridColumn  headerText="Status in Workflow" width="120" dataField="@workflowStatus"/>
							<mx:AdvancedDataGridColumn  width="65" id="flowCellNumberCol" headerText="Flow Cell #"  editable="false" dataField="@flowCellNumber"/> 	 					             						             
							<mx:AdvancedDataGridColumn  width="55" id="flowCellLaneNumber" headerText="Channel"  editable="false" dataField="@flowCellChannelNumber"/> 						             						             
							<mx:AdvancedDataGridColumn  width="90" headerText="Channel sample conc. pM"  editable="false" dataField="@flowCellChannelSampleConcentrationPmDisplay"> 						             						             
								<mx:headerRenderer > 
									<mx:Component>
										<mx:VBox verticalGap="0"   horizontalAlign="center"  horizontalScrollPolicy="off" verticalAlign="middle">
											<mx:Label text="Channel Sample"/>
											<mx:Label text="conc. pM"/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn  headerText="Last Cycle Status" width="90" dataField="@lastCycleStatus"> 
								<mx:headerRenderer > 
									<mx:Component>
										<mx:VBox verticalGap="0"  horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
											<mx:Label text="Last Cycle"/>
											<mx:Label text="Status"/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn width="150" id="genomeBuildAlignTo" headerText="Genome Build (align to)"  editable="false" dataField="@idGenomeBuildAlignTo" 						             						             
													   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.GenomeBuildLite').DictionaryEntry, '@display', '@value', '@idGenomeBuildAlignTo')}"/>                 											
							<mx:AdvancedDataGridColumn width="150" headerText="Analysis Instructions"   dataField="@analysisInstructions"/>
						</mx:columns> 
					</mx:AdvancedDataGrid>
					
				</mx:VBox>					        			
				
			</mx:AddChild>
			<mx:SetProperty target="{tile1}" name="tileHeight"/>
			<mx:SetProperty target="{tile1}" name="width"/>
			<mx:SetProperty target="{tile1}" name="tileWidth"/>
		</mx:State>
		<mx:State name="ExternalMicroarrayState" basedOn="MicroarrayState">
			<mx:SetProperty target="{tile1}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{tile1}" name="visible" value="false"/>
			<mx:SetProperty target="{headerBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{headerBox}" name="visible" value="false"/>
			<mx:SetProperty target="{label1}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{label1}" name="visible" value="false"/>
		</mx:State>
		<mx:State name="ExternalSeqState">
			<mx:SetProperty target="{samplesTab}" name="label" value="Samples"/>
		</mx:State>
		<mx:State name="BaseSeqState">
			<mx:SetProperty target="{prePoolBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{prePoolBox}" name="visible" value="false"/>
			<mx:SetProperty target="{headerBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{headerBox}" name="visible" value="false"/>
			<mx:SetProperty target="{adaptersBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{adaptersBox}" name="visible" value="false"/>
			<mx:SetProperty target="{controlbar1}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{controlbar1}" name="visible" value="false"/>
			<mx:AddChild relativeTo="{hbox7}" position="before">
				<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle" id="hbox0">
					<mx:Label text="Container Type"  width="105"  styleName="formLabel" textAlign="left" id="label11"/>
					<mx:Text  text="{this.selectedExperiment.@containerType}" width="280"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox7}" position="before">
				<mx:HBox verticalGap="0" width="100%" horizontalGap="0">
					<mx:Text  width="105" text="Drop Off Loc." styleName="formLabel"/>
					<mx:Text id="sampleDropOffLocationText" 
							 text="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SampleDropOffLocation').DictionaryEntry.(@value == this.selectedExperiment.@idSampleDropOffLocation).@display}" 
							 width="280" />
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox7}" position="before">
				<mx:HBox verticalGap="0" width="100%" horizontalGap="0" id="requestStatusBox">
					<mx:Text  width="105" text="Status" styleName="formLabel" />
					<mx:Text  text="{this.selectedExperiment.@requestStatus}" width="280" />
				</mx:HBox>
			</mx:AddChild>
			<mx:SetProperty target="{hbox6}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{hbox6}" name="visible" value="false"/>
		</mx:State>
		<mx:State name="BaseSeqChromoState" basedOn="BaseSeqState">
			<mx:AddChild relativeTo="{theTab}" position="lastChild">
				<mx:VBox  id="chromatContainer" label="Chromatogram"  width="100%" height="100%" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4" verticalGap="0" >
					<mx:HBox width="100%" height="100%" horizontalGap="0" >
						<data:ChromatBrowseView width="100%" backgroundAlpha="0" 
												height="100%"
												id="chromoTab"
												currentState="userState" />
					</mx:HBox>
				</mx:VBox>
			</mx:AddChild>
			<mx:RemoveChild target="{filesView}"/>
			<mx:RemoveChild target="{parentDocument.downloadsLink}"/>
			
		</mx:State>
		<mx:State name="CapSeqState" basedOn="BaseSeqChromoState">
			
		</mx:State>
		<mx:State name="MitSeqState" basedOn="BaseSeqChromoState">
			<mx:AddChild relativeTo="{this.requestStatusBox}" position="before">
				<mx:HBox verticalGap="0" width="100%" horizontalGap="0">
					<mx:Text  width="105" text="Primers" styleName="formLabel" />
					<mx:Text  text="{this.selectedExperiment.@primerList}" width="280" />
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="FragAnalState" basedOn="BaseSeqState">
			<mx:AddChild relativeTo="{this.requestStatusBox}" position="before">
				<mx:HBox verticalGap="0" width="100%" horizontalGap="0">
					<mx:Text  width="105" text="Assays" styleName="formLabel" />
					<mx:Text  text="{this.selectedExperiment.@assayList}" width="280" />
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="CherryPickState" basedOn="BaseSeqState">
		</mx:State>
		<mx:State name="ExternalQCState">
		</mx:State>
		<mx:State name="IScanState">
			<mx:AddChild relativeTo="{hbox3}" position="before">
				<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle">
					<mx:Label  width="105" text="iScan Chip"  styleName="formLabel" textAlign="left"/>
					<mx:Text  width="280" text="{this.selectedExperiment.@iScanChipName}"  />
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox3}" position="before">
				<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle">
					<mx:Label text="Number of Chips" width="105" styleName="formLabel"/>
					<mx:Text text="{this.selectedExperiment.@numberIScanChips}" width="280" />
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox3}" position="before">
				<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle">
					<mx:Label text="Quote Number" width="105" styleName="formLabel"/>
					<mx:Text text="{this.selectedExperiment.@materialQuoteNumber}" width="280" />
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox3}" position="before">
				<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle">
					<mx:Label text="Quote Received" width="105" styleName="formLabel"/>
					<mx:Text text="{this.selectedExperiment.@quoteReceivedDate}" width="280" />
				</mx:HBox>
			</mx:AddChild>
			<mx:SetProperty target="{prePoolBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{prePoolBox}" name="visible" value="false"/>
			<mx:SetProperty target="{adaptersBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{adaptersBox}" name="visible" value="false"/>
			<mx:SetProperty target="{headerBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{headerBox}" name="visible" value="false"/>
			<mx:SetProperty target="{controlbar1}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{controlbar1}" name="visible" value="false"/>
		</mx:State>
		<mx:State name="SequenomState">
			<mx:AddChild relativeTo="{hbox3}" position="before">
				<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle" id="bisulfideConversionBox">
					<mx:Label text="Bisulfide conversion"  width="105" styleName="formLabel" textAlign="left" />
					<mx:Text  text="{this.selectedExperiment.@includeBisulfideConversion=='Y' ? 'Yes' : 'No'}" width="280"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{hbox7}" position="before">
				<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle" id="hbox1">
					<mx:Label text="Container Type"  width="105"  styleName="formLabel" textAlign="left" id="label12"/>
					<mx:Text  text="{this.selectedExperiment.@containerType}" width="280"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:SetProperty target="{controlbar1}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{controlbar1}" name="visible" value="false"/>
			<mx:SetProperty target="{adaptersBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{adaptersBox}" name="visible" value="false"/>
			<mx:SetProperty target="{headerBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{headerBox}" name="visible" value="false"/>
			<mx:SetProperty target="{prePoolBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{prePoolBox}" name="visible" value="false"/>
		</mx:State>
		<mx:State name="ClinicalSeqState" basedOn="SequenomState">
			<mx:SetProperty target="{hbox1}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{hbox1}" name="visible" value="false"/>
		</mx:State>
		<mx:State name="IsolationState" basedOn="SequenomState">
			<mx:SetProperty target="{hbox5}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{hbox5}" name="visible" value="false"/>
			<mx:SetProperty target="{hbox6}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{hbox6}" name="visible" value="false"/>
			<mx:AddChild relativeTo="{hbox3}" position="before">
				<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle" 
						 includeInLayout="{this.selectedExperiment.@codeRNAPrepType!=null &amp;&amp; this.selectedExperiment.@codeRNAPrepType!=''}" 
						 visible="{this.selectedExperiment.@codeRNAPrepType!=null &amp;&amp; this.selectedExperiment.@codeRNAPrepType!=''}">
					<mx:Label text="RNA prep type"  width="105" styleName="formLabel" textAlign="left"  id="rnaLabel"/>
					<mx:Text text="{this.selectedExperiment.@codeRNAPrepType != null ? parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RNAPrepType').DictionaryEntry.(@value == this.selectedExperiment.@codeRNAPrepType).@display : ''}" 
							 width="280"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:SetProperty target="{hbox1}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{hbox1}" name="visible" value="false"/>
			<mx:SetProperty target="{bisulfideConversionBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{bisulfideConversionBox}" name="visible" value="false"/>
			<mx:AddChild relativeTo="{hbox3}" position="before">
				<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle" id="qubitConcentrationBox">
					<mx:Label text="Qubit Concentration"  width="105" styleName="formLabel" textAlign="left" />
					<mx:Text  text="{this.selectedExperiment.@includeQubitConcentration=='Y' ? 'Yes' : 'No'}" width="280"/>
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="GenericState">
			<mx:SetProperty target="{hbox5}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{hbox5}" name="visible" value="false"/>
			<mx:SetProperty target="{hbox8}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{hbox8}" name="visible" value="false"/>
			<mx:SetProperty target="{prePoolBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{prePoolBox}" name="visible" value="false"/>
			<mx:SetProperty target="{adaptersBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{adaptersBox}" name="visible" value="false"/>
			<mx:SetProperty target="{headerBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{headerBox}" name="visible" value="false"/>
		</mx:State>
		<mx:State name="IonTorrentState" basedOn="GenericState"/>
		<mx:State name="NanoStringState" basedOn="SequenomState">
			<mx:SetProperty target="{bisulfideConversionBox}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{bisulfideConversionBox}" name="visible" value="false"/>
			<mx:SetProperty target="{hbox1}" name="includeInLayout" value="false"/>
			<mx:SetProperty target="{hbox1}" name="visible" value="false"/>
		</mx:State>
	</mx:states>
	
</mx:VBox>
