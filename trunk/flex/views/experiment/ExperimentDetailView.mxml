<?xml version="1.0" encoding="utf-8"?>
<mx:VBox
    xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%" 
	xmlns:views="views.*"   creationPolicy="all"
	xmlns:util="views.util.*" xmlns:experiment="views.experiment.*" >
   
	<mx:HTTPService  
    id="getProtocol" 
    url="GetProtocol.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProtocol(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get protocol', event)"
	method="POST"
    useProxy="false">
  </mx:HTTPService>
	
	
	<mx:HTTPService  
		id="cacheFDTFileDownloadList" 
		url="CacheFileDownloadList.gx"
		destination="cacheFileDownloadList"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onCacheFDTFileDownloadList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get cache file download list', event)"
		method="POST"
		useProxy="false">
		<mx:request>
			<fileDescriptorXMLString>{selectedFileList.toXMLString()}</fileDescriptorXMLString>
		</mx:request>
	</mx:HTTPService>
  	 
<mx:Script>
	<![CDATA[
		import hci.flex.controls.DropdownLabel;
		
		import mx.collections.Grouping;
		import mx.collections.GroupingCollection;
		import mx.collections.GroupingField;
		import mx.collections.XMLListCollection;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import mx.events.IndexChangedEvent;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		import mx.utils.ObjectUtil;
		
		import views.experiment.ConvertIlluminaRequestWindow;
		import views.experiment.ExperimentEditView;
		import views.renderers.MultiselectRenderer;
		import views.renderers.URLRenderer;
		
		public var sampleGroupingCollection:GroupingCollection = null;		
		
	
		[Bindable]
		private var requestCategoryName:String;
		[Bindable]
		private var experimentCategoryName:String;
		[Bindable]
		private var seqLibTreatments:String;
		[Bindable]
		private var visibilityName:String;
		
		[Bindable]
		public var selectedExperiment:Object;
		
		public function checkSecurity():void {
			
			if (parentApplication.isGuestMode()) {
				this.showCy3LabelingFieldsCheckBox.visible = false;
				this.showCy5LabelingFieldsCheckBox.visible = false;
				this.showExtFieldsCheckBox.visible = false;
				this.showHybFieldsCheckBox.visible = false;
				this.showQCFieldsCheckBox.visible = false;
				
				if (parentDocument != null && parentDocument is ExperimentDetailPanel) {
					parentDocument.requestFormButton.visible = false;				
				}
			}
		}
	
		public function setupForm(selectedExperiment:Object):void {
			this.selectedExperiment = selectedExperiment;
			
			if (selectedExperiment.@canUpdate == 'Y' && this.billingItems.length > 0) {
				if (!theTab.contains(this.billingTab)) {
					theTab.addChild(billingTab);
				}
			} else {
				if (theTab.contains(this.billingTab)) {
					theTab.removeChild(billingTab);
				}
			}
			if (this.protocolsBox.visible) {
				if (!this.headerBox.contains(this.protocolsBox)) {
					this.headerBox.addChild(this.protocolsBox);
				} 
			} else {
				if (this.headerBox.contains(this.protocolsBox)) {
					this.headerBox.removeChild(this.protocolsBox);
				} 
			}
			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory',this.selectedExperiment.@codeRequestCategory);
			this.currentState = '';	
			if (this.selectedExperiment.@codeRequestCategory == "QC") {
				currentState = 'QCState';
				
			} else if (this.selectedExperiment.@isExternal != 'Y' &&
				       (this.selectedExperiment.@codeRequestCategory == 'SOLEXA' ||
			           this.selectedExperiment.@codeRequestCategory == 'HISEQ')) {
				currentState = 'SolexaState';
			} else if (requestCategory.@type == 'MICROARRAY') {
				if (this.selectedExperiment.@isExternal != 'Y') {
					currentState = 'MicroarrayState';
					
					
					showCy3LabelingFieldsCheckBox.selected = false;
					showCy5LabelingFieldsCheckBox.selected = false;
					showHybFieldsCheckBox.selected = false;
					showExtFieldsCheckBox.selected = false;
					
				} else {
					currentState = 'ExternalMicroarrayState';
				}

			} else if (requestCategory.@type == 'ILLUMINA' && this.selectedExperiment.@isExternal == 'Y') {
				currentState = 'ExternalSeqState';
				if(headerBox != null) {
					headerBox.visible = false;
				}
				if(hbox2 != null) {
					hbox2.visible = false;		
				}
				if(showQCFieldsCheckBox != null) {
					showQCFieldsCheckBox.visible = false;				
				}
				if(showSeqPrepFieldsCheckBox != null) {
					showSeqPrepFieldsCheckBox.visible = false;
				}
			}
			
			if (parentDocument != null && parentDocument is ExperimentDetailPanel) {
				if (this.selectedExperiment.analysisExperimentItems.hasOwnProperty("AnalysisExperimentItem")) {
					parentDocument.analysisButton.enabled = true;
				} else {
					parentDocument.analysisButton.enabled = false;
				}
				if(this.selectedExperiment.@isExternal == 'Y') {
					parentDocument.linkButtonToHiSeqOrGAIIx.visible = false;			
				}
			}
			
			if(this.selectedExperiment.@isExternal == 'Y') {
				if(lanesConfirmContainer != null && theTab.contains(lanesConfirmContainer)) {
					//theTab.setChildIndex(lanesConfirmContainer, 2);
					//lanesConfirmContainer.enabled = false;
					/*
					var index:int = theTab.getChildIndex(lanesConfirmContainer);
					if (index > 0) {
						var tabButton:Button = theTab.getTabAt(index);
						if(tabButton != null) {
							lanesConfirmContainer.tabIndex = theTab.numChildren+1;
							//tabButton.visible = false;
						}						
					}
					*/

				}
				showQCFieldsCheckBox.visible = false;					
			}
			else {
				showQCFieldsCheckBox.visible = true;
				showQCFieldsCheckBox.selected = true;
			}
			
			
			
			//showQCFieldsCheckBox.selected = selectedExperiment.@isExternal == 'Y' ? false : true;

			getRequestCategoryName();
			getExperimentCategoryName();
			getSeqLibTreatments();
			getVisibilityName();
			callLater(showHideColumns);
			this.addNonStandardSampleColumns();
			
			if (theTab.selectedChild == this.filesView) {
				downloadExpandedFilesButtonView.visible = true;
				downloadExpandedFilesButtonView.includeInLayout = true;
			} else {
				downloadExpandedFilesButtonView.visible = false;
				downloadExpandedFilesButtonView.includeInLayout = false;
			}

		}
		
		public function initializeBarcoding():void {
			var showSampleMultiplexGroup:Boolean = false;
			var showSampleBarcode:Boolean = false;
			var showSampleCustomBarcode:Boolean = false;
			for each (var s:Object in samples) {
				if (s.@multiplexGroupNumber != '') {
					showSampleMultiplexGroup = true;
				}
				if (s.@idOligoBarcode != '' ) {
					showSampleBarcode = true;
				}else if (s.@barcodeSequence != '' ) {
					showSampleCustomBarcode = true;
				}
			}
			
        	if (showSampleMultiplexGroup) {

        		this.samplesGridConfirm.dataProvider = null;
        		sampleGroupingCollection = new GroupingCollection();
        		sampleGroupingCollection.source = this.samples;
        		var group:Grouping = new Grouping();
        		var gf:GroupingField = new GroupingField();
        		gf.name = "@multiplexGroupNumber";
				gf.compareFunction = sampleCompareFunction;
        		group.fields = [gf];
        		sampleGroupingCollection.grouping  = group;
        		sampleGroupingCollection.refresh();
        		this.samplesGridConfirm.dataProvider = sampleGroupingCollection;
       
        		this.multiplexGroupNumberColumn.visible = true;

        	} else {
        		sampleGroupingCollection = null;
        		this.samplesGridConfirm.dataProvider = this.samples;
        		
        		this.multiplexGroupNumberColumn.visible = false;

        	}
        		
        	this.barcodeCol.visible = showSampleBarcode;
        	this.customBarcodeCol.visible = showSampleCustomBarcode;
        	
        	if (currentState == "SolexaState") {
	        	this.laneBarcodeCol.visible = showSampleBarcode;
    	    	this.laneCustomBarcodeCol.visible = showSampleCustomBarcode;
        	}
        	
			this.samplesGridConfirm.validateNow();
		}
		
		private function sampleCompareFunction(a:XML, b:XML):int
		{
			var aPersistFlag:Number = 0;
			var aPosition:Number = 0;
			if (a.@idSample.toString().indexOf("Sample") > -1) {
				aPosition = a.@idSample.toString().substr(6);
				aPersistFlag = 1;
			} else {
				aPosition = a.@idSample;
			}
			
			var bPersistFlag:Number = 0;
			var bPosition:Number = 0;
			if (b.@idSample.toString().indexOf("Sample") > -1) {
				bPosition = b.@idSample.toString().substr(6);
				bPersistFlag = 1; // non-persistent samples sort after the persistent ones
			} else {
				bPosition = b.@idSample;
			}
			
			if (aPersistFlag == bPersistFlag) {
				return ObjectUtil.numericCompare(aPosition, bPosition);				
			} else {
				return ObjectUtil.numericCompare(aPersistFlag, bPersistFlag);
			}
		}		

		
		private function showCy3LabelCols(isVisible:Boolean):void {
			labelCol1.visible = isVisible;
			labelCol2.visible = isVisible;
			labelCol3.visible = isVisible;
			labelCol4.visible = isVisible;
			labelCol5.visible = isVisible;
		}
			
		private function showCy5LabelCols(isVisible:Boolean):void {
			labelCol6.visible = isVisible;
			labelCol7.visible = isVisible;
			labelCol8.visible = isVisible;
			labelCol9.visible = isVisible;
			labelCol10.visible = isVisible;
		}

	    private function getChannel1SampleName(item:Object, col:int):String {
			var de:XMLList = item.labeledSampleChannel1.LabeledSample.sample.Sample;
	    	if (de.length() == 1) {
		    	return de[0].@name;
	    	} else {
	    		return "";
	    	}
		}
		private function getChannel2SampleName(item:Object, col:int):String {
			var de:XMLList = item.labeledSampleChannel2.LabeledSample.sample.Sample;
	    	if (de.length() == 1) {
		    	return de[0].@name;
	    	} else {
	    		return "";
	    	}
		}
		private function getChannel1SampleNumber(item:Object, col:int):String {
			var de:XMLList = item.labeledSampleChannel1.LabeledSample.sample.Sample;
	    	if (de.length() == 1) {
		    	return de[0].@number;
	    	} else {
	    		return "";
	    	}
		}
		private function getChannel2SampleNumber(item:Object, col:int):String {
			var de:XMLList = item.labeledSampleChannel2.LabeledSample.sample.Sample;
	    	if (de.length() == 1) {
		    	return de[0].@number;
	    	} else {
	    		return "";
	    	}
		}

   	 	private function getSamplesGridRowNumber(item:Object,col:int):String
	    {
    	   var x:int = samplesGridConfirm.dataProvider.getItemIndex(item) + 1;
	       return String(x);
	    } 
   	 	private function getHybsGridRowNumber(item:Object,col:int):String
	    {
    	   var x:int = hybsGridConfirm.dataProvider.getItemIndex(item) + 1;
	       return String(x);
	    } 

		private function getRequestCategoryName():void {
			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', this.selectedExperiment.@codeRequestCategory);
			if (requestCategory is XMLList) {
				requestCategoryName = requestCategory[0].@display.toString();				
			} else {
				requestCategoryName = requestCategory.@display.toString();		
			}
		}
		private function getExperimentCategoryName():void {
			var experimentCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', this.selectedExperiment.@codeApplication);
			if (experimentCategory is XMLList) {
				experimentCategoryName  = experimentCategory[0].@display.toString();
			} else {
				experimentCategoryName = experimentCategory.@display.toString();
			}
		}

		private function getSeqLibTreatments():void {
			seqLibTreatments = "";
			for each(var item:Object in this.selectedExperiment.seqLibTreatments.SeqLibTreatment) {
				if (seqLibTreatments.length > 0) {
					seqLibTreatments += ", ";
				}
				seqLibTreatments += item.@display;
			}
		}
		private function getVisibilityName():void {
			var visibility:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Visibility', this.selectedExperiment.@codeVisibility);
			if (visibility is XMLList) {
				visibilityName = visibility[0].@display.toString();			
			} else {
				visibilityName = visibility.@display.toString();
			}
		}
		
		public function showDownloads():void {
			this.theTab.selectedChild = this.filesView;
			downloadExpandedFilesButtonView.visible = true;
			downloadExpandedFilesButtonView.includeInLayout = true;
		}

	  	public function promptToDeleteExperiment():void {
	  		var billingItems:XMLList = this.selectedExperiment.billingItems.BillingItem;
	  		if ( billingItems.length() > 0) {
				Alert.show("Delete experiment " + this.selectedExperiment.@number + 
				            "?\n\nWARNING:  This will also delete "  +
				            billingItems.length() + " billing item(s) associated with this experiment.\n\n", 
							"Confirm", 
							(Alert.YES | Alert.NO), this, 
							onPromptToDeleteExperiment);
	  			
	  		} else {
				Alert.show("Delete experiment " + this.selectedExperiment.@number + "?", 
							"Confirm", 
							(Alert.YES | Alert.NO), this, 
							onPromptToDeleteExperiment);
	  		}
			
	  	}
		
	  	private function onPromptToDeleteExperiment(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	deleteExperiment();
            }
      	}
		private function deleteExperiment():void {
			parentDocument.parentDocument.deleteExperiment();
		}
		
		public function showPrintableRequestForm():void {
			var url:URLRequest = new URLRequest('ShowRequestForm.gx?idRequest=' + this.selectedExperiment.@idRequest);
			navigateToURL(url, '_blank');			
		}
		
		public function showEditExperimentWindow():void {
			 // add this get request code b/c the edit window was freezing the second time 
			 // the edit window was pressed.  by putting this extra call in, it seems to clear
			 // out some weird state.
			 //var parms:Object = new Object();
			 //parms.idRequest = this.selectedExperiment.@idRequest;
			 //parentDocument.getRequest.send(parms);
           	 
           	 parentDocument.parentDocument.editView.request = this.selectedExperiment;
           	 parentDocument.parentDocument.editView.samplesView.showCCNumberCheckbox.selected = this.selectedExperiment.@hasCCNumber == 'Y' ? true : false;
			 
           	 
           	 parentDocument.parentDocument.theViews.selectedChild = parentDocument.parentDocument.editView;
			 if (parentDocument.parentDocument.editView.theTab.contains(parentDocument.parentDocument.editView.annotationView)) {
				 parentDocument.parentDocument.editView.annotationView.onSampleCharacteristicRefreshed(null);
				 parentDocument.parentDocument.editView.annotationView.checkSecurity();
			 } 
			 //parentDocument.editView.removeDataListeners();
           	 //parentDocument.editView.initializeData();
           	 //callLater(parentDocument.editView.setupDataListeners);
		}
		
		public function refreshSavedExperiment(idRequest:Object):void {
			 parentDocument.parentDocument.selectedIdRequest = idRequest;
			 var parms:Object = new Object();
			 parms.idRequest = parentDocument.parentDocument.selectedIdRequest;
			 parentDocument.parentDocument.getRequest.send(parms);
			
		}

		public function getLanesGridRowNumber(item:Object,col:int):String
        {
           var x:int = this.lanesConfirmGrid.dataProvider.getItemIndex(item) + 1;
           return String(x);     		
        }
	
        private function showHideColumns():void {
			if(this.selectedExperiment.@isExternal == 'Y') {
				if(this.showQCFieldsCheckBox != null) {
					this.showQCFieldsCheckBox.selected = false;	
				}
				if(this.showSeqPrepFieldsCheckBox != null) {
					this.showSeqPrepFieldsCheckBox.selected = false;
				}				
			}
			if (currentState == 'ExternalSeqState') {
				sampleTypeCol.visible = true;
				organismCol.visible = true;
				descriptionCol.visible = (this.selectedExperiment[0].@hasSampleDescription=="Y");

				this.otherOrganismCol.visible = false;
				this.otherSamplePrepMethodCol.visible = false;
				concentrationCol.visible = false; 
				preppedByLabCol.visible = false;
				samplePrepCol.visible = false;
				chipTypeCol.visible = false;
				concentrationUnitCol.visible = false;
				prepInstructionsCol.visible = false;
				treatmentCol.visible = false;   
				barcodeCol.visible = false;
				
			} else if (currentState == 'ExternalMicroarrayState') {
				sampleTypeCol.visible = true;
				organismCol.visible = true;
				//samplePrepCol.visible = true;
				samplePrepCol.visible = false;
				descriptionCol.visible = (this.selectedExperiment[0].@hasSampleDescription=="Y");

				this.otherOrganismCol.visible = false;
				this.otherSamplePrepMethodCol.visible = false;
				concentrationCol.visible = false; 
				preppedByLabCol.visible = false;
				chipTypeCol.visible = false;
				concentrationUnitCol.visible = false;        		
				prepInstructionsCol.visible = false;
				barcodeCol.visible = false;
				
			} else if (this.showQCFieldsCheckBox.selected) {
				concentrationCol.visible = false; 
				sampleTypeCol.visible = false;
				organismCol.visible = false;
				preppedByLabCol.visible = false;
				samplePrepCol.visible = false;
				chipTypeCol.visible = false;
				concentrationUnitCol.visible = false;
				prepInstructionsCol.visible = false;

				treatmentCol.visible = false;   
				descriptionCol.visible = false;   
        		
        	} else {
  
				treatmentCol.visible = this.selectedExperiment.@treatment == 'Y' ? true : false;   
				descriptionCol.visible = true;   

	        	if (currentState == 'SolexaState') {
					concentrationCol.visible = true; 
					sampleTypeCol.visible = true;
					organismCol.visible = true;
					preppedByLabCol.visible = true;
					samplePrepCol.visible = true;
					chipTypeCol.visible = false;
					concentrationUnitCol.visible = false;
				    prepInstructionsCol.visible = true;
	        		
	        	} else if (currentState == 'QCState') {
					concentrationCol.visible = false; 
					sampleTypeCol.visible = false;
					organismCol.visible = false;
					preppedByLabCol.visible = false;
					samplePrepCol.visible = true;
					chipTypeCol.visible = (this.selectedExperiment.@codeApplication == 'BIOAN' ? true : false);
					concentrationUnitCol.visible = true;
				    prepInstructionsCol.visible = false;
	        		
	        	} else {
					concentrationCol.visible = true; 
					sampleTypeCol.visible = true;
					organismCol.visible = true;
					preppedByLabCol.visible = false;
					samplePrepCol.visible = true;
					chipTypeCol.visible = false;
					concentrationUnitCol.visible = false;        		
				    prepInstructionsCol.visible = false;
        		}
        	} 
        	this.initializeBarcoding();
        }
        
        public function showRelatedAnalysis():void {
        	parentApplication.showAnalysisForExperiment(this.selectedExperiment);
        }

		// Get all options (include inactive)
		public function getSampleCharacteristicOptions(idSampleCharacteristic:String):XMLList {
			return parentApplication.getSampleCharacteristicOptions(idSampleCharacteristic, true);
		}
        
        public function addNonStandardSampleColumns():void {
       		var annotation:Object;
       		var col:AdvancedDataGridColumn;
       		var exists:Boolean = false;
       		for each(annotation in this.selectedExperiment.SampleCharacteristicEntries.SampleCharacteristicEntry) {
				if(annotation.@idSampleCharacteristic == "-1") {
					continue;
				}
				
				var sampleCharacteristic:XML = parentApplication.getSampleCharacteristic(annotation.@idSampleCharacteristic);
				var headerName:String = "";
				if (sampleCharacteristic.@sampleCharacteristic == "Other" && annotation.@otherLabel != "" ) {
					headerName = annotation.@otherLabel;
					annotation.@isSelected = "true";
				} else {
					headerName = annotation.@sampleCharacteristic;
				}

				exists = false;
				
       			for each(col in samplesGridConfirm.columns) {
					if (col.dataField == ("@ANNOT" + annotation.@idSampleCharacteristic)) {
						exists = true;
						col.visible    = annotation.@isSelected == "true" ? true : false;       				
						col.headerText = headerName;
						break;
					}    				
       			}
				
				// We already have this column.  Just set the header and visible and move on.
				if (exists) {
					continue;
				}
   				var newCol:AdvancedDataGridColumn = new AdvancedDataGridColumn();
   				newCol.dataField  = "@ANNOT" + annotation.@idSampleCharacteristic;
   				newCol.headerText = headerName;
   				newCol.visible    = (annotation.@isSelected == "true" ? true : false);
				
				if (sampleCharacteristic.@codeCharacteristicType == 'MOPTION') {
					newCol.itemRenderer =  MultiselectRenderer.create(false);
				} else if (sampleCharacteristic.@codeCharacteristicType == 'URL') {
					newCol.itemRenderer = URLRenderer.create(false);
				} else if (sampleCharacteristic.@codeCharacteristicType == 'CHECK') {
					// checkbox is just normal label renderer
				} else if (sampleCharacteristic.@codeCharacteristicType == 'OPTION') {
					             
					newCol.itemRenderer = views.renderers.DropdownLabel.create(
						parentApplication.getSampleCharacteristicOptions(annotation.@idSampleCharacteristic), 
						'@option', 
						'@idSampleCharacteristicOption', 
						"@ANNOT" + annotation.@idSampleCharacteristic,
						false);                
				} 
				
   				var columns:Array = samplesGridConfirm.columns;
   				// Pop the description; we want it to be the last column
   				var descCol:AdvancedDataGridColumn = AdvancedDataGridColumn(columns.pop());
   				columns.push(newCol);
   				columns.push(descCol);
   				samplesGridConfirm.columns = columns;
				samplesGridConfirm.validateNow();
   			} 
   		
        }

        private function showProtocol(idProtocol:Object, protocolClassName:String):void {
        	var params:Object = new Object();
        	params.id = idProtocol;
        	params.protocolClassName = protocolClassName;
        	getProtocol.send(params);
        }
        
    	private function onGetProtocol(event:ResultEvent): void { 
			if (getProtocol.lastResult.name() != "Protocol") {
        		mx.controls.Alert.show(getProtocol.lastResult..ACTMESSAGE.@TEXT);
      	  		return;
   			}
   			var protocolWindow:ProtocolWindow = ProtocolWindow(PopUpManager.createPopUp(DisplayObject(this.parentDocument), ProtocolWindow, false));
   			PopUpManager.centerPopUp(protocolWindow);
   			protocolWindow.title = getProtocol.lastResult.name;
   			protocolWindow.protocolDescription.text = getProtocol.lastResult.description;
    	}
    	
    	public function showConvertIlluminaRequest():void {
   			var convertWindow:ConvertIlluminaRequestWindow = ConvertIlluminaRequestWindow(PopUpManager.createPopUp(DisplayObject(this), ConvertIlluminaRequestWindow, false));
   			PopUpManager.centerPopUp(convertWindow);
   			convertWindow.init(this.selectedExperiment);
    	}  
    	
		public function getSampleTreeIcon(item:Object):Class {
			if (item == null) {
				return parentApplication.iconGroup;
			} else {
				return null; 
			}  
		}   
		public function getLaneTreeIcon(item:Object):Class {
			return null; 
		} 
		
		public function refreshDownloadList():void {
			if (theTab.selectedChild == filesView) {
				// Getting the download list is slow since we now show an expanded file
				// view by default.  Only show downloads at request or project level.
				if (parentDocument.parentDocument.selectedIdProject != null || 
					parentDocument.parentDocument.selectedIdRequest != null) {
					filesView.getRequestDownloadList.send(getBrowseParameters());
					filesView.browseMessage = "";
				} else {
					filesView.browseMessage = "Click on a project or request to narrow download selection.";
					filesView.downloadSizeMessage = "";
					filesView.rowCountMessage = "";
					filesView.downloadTree.visible = false;
				}
				theTab.selectedChild = filesView;
			}
		}
		
		private function getBrowseParameters():Object {
			var params:Object = new Object();
			if (parentDocument.parentDocument.selectedIdProject != null) {
				params.idProject = parentDocument.parentDocument.selectedIdProject;
			}
			if (parentDocument.parentDocument.selectedIdRequest != null) {
				params.idRequest = parentDocument.parentDocument.selectedIdRequest;
			}
			params.idLab = parentDocument.parentDocument.selectedIdLab;
			
			if (parentDocument.parentDocument.currentState == 'AdminState' && parentDocument.parentDocument.allExperimentsCheckbox.selected) {
				params.allExperiments = 'Y';
			} else {
				if (parentDocument.parentDocument.currentState == 'AdminState') {
					if (parentDocument.parentDocument.selectedIdLab == null && parentDocument.parentDocument.browseLabCombo.selectedItem != null) {
						params.idLab = parentDocument.parentDocument.browseLabCombo.selectedItem.@idLab;
					}
					if (parentDocument.parentDocument.browseUserCombo.selectedItem != null) {
						params.idAppUser = parentDocument.parentDocument.browseUserCombo.selectedItem.@idAppUser;
					}
				} else if (parentDocument.parentDocument.currentState != "GuestState")  {
					if (parentDocument.parentDocument.myExperimentsCheckbox.selected) {
						params.idAppUser = parentApplication.getIdAppUser();
					}				
					if (parentDocument.parentDocument.userAllExperimentsCheckbox.selected) {
						params.allExperiments = 'Y';
					}
				}
				if (parentDocument.parentDocument.lastWeekCheckbox.selected) {
					params.lastWeek = 'Y';
				}
				if (parentDocument.parentDocument.lastMonthCheckbox.selected) {
					params.lastMonth = 'Y';
				}
				if (parentDocument.parentDocument.lastYearCheckbox.selected) { 
					params.lastYear = 'Y';
				}
				if (parentDocument.parentDocument.publicExperimentsOtherGroupsCheckbox.selected) {
					params.publicExperimentsInOtherGroups = 'Y';
				}
				params.isMicroarray  = this.parentDocument.parentDocument.MicroarrayCheckbox.selected ? "Y" : "N";
				params.isNextGenSeq  = this.parentDocument.parentDocument.NextGenSeqCheckbox.selected ? "Y" : "N";
				params.isBioanalyzer = this.parentDocument.parentDocument.BioanalyzerCheckbox.selected ? "Y" : "N";
			}
			return params;					
		}
		
		public function filterList():void{		}

		protected function tabChangeHandler(event:IndexChangedEvent):void
		{
			refreshDownloadList();
		}
		
		[Bindable]
		private var selectedFileList:XMLListCollection;
		
		public function downloadFilesUsingFDT():void {
			var selectedFiles:XMLList = filesView.getRequestDownloadList.lastResult..FileDescriptor.(@isSelected == "true");
			selectedFileList = new XMLListCollection(selectedFiles);					
			
			if (selectedFileList.length == 0) {
				mx.controls.Alert.show("Please select the files to download.");
			} else {
				cacheFDTFileDownloadList.send();
			}
		}
		
		private function onCacheFDTFileDownloadList(event:ResultEvent):void {
			// We have cached the selected analysis files
			// Now call the URL to start the FDT app using webstart
			showFastDataTransferDownloadPage();
		}
		
		public function showFastDataTransferDownloadPage():void {
			var paramStr:String =  selectedFileList.toXMLString();			
			var url:URLRequest = new URLRequest('FastDataTransferDownloadExpServlet.gx');	
			url.contentType = "text/xml";
			url.method = URLRequestMethod.GET;
			navigateToURL(url, '_self');						
		}
		
		public function showAlternateDownloadPage():void {
			if (parentDocument.parentDocument.selectedIdRequest != null) {
				var url:URLRequest = new URLRequest('ShowRequestDownloadForm' + 
					(parentDocument.parentApplication.isGuestMode() ? 'ForGuest' : '') +   
					'.gx?idRequest=' + 
					parentDocument.parentDocument.selectedIdRequest);
				navigateToURL(url, '_blank');					 
			} else if (theTab.selectedChild == filesView ) {
				var requestNumbers:String = "";
				for each(var dl:Object in filesView.downloadList) {
					if (requestNumbers.length > 0) {
						requestNumbers += ":"
					}
					requestNumbers += dl.@requestNumber;
				}
				if (requestNumbers.length > 0) {
					var url1:URLRequest = new URLRequest('ShowRequestDownloadForm' + 
						(parentDocument.parentApplication.isGuestMode() ? 'ForGuest' : '') +   
						'.gx?requestNumbers=' + 
						requestNumbers);
					navigateToURL(url1, '_blank');	
				}
			}
		}

	]]>
</mx:Script>

<mx:XMLListCollection id="billingItems" source="{selectedExperiment.billingItems.BillingLab}"/>
<mx:XMLListCollection id="samples" source="{selectedExperiment.samples.Sample}"/>
<mx:XMLListCollection id="multiplexLanes" source="{this.selectedExperiment.multiplexSequenceLanes.MultiplexLane}"/>

<mx:VBox width="100%" height="100%"  styleName="form"  id="vbox2">
    <mx:VBox height="100%"  width="100%" verticalGap="0">
        <mx:HBox width="100%" paddingTop="4" paddingBottom="0" horizontalGap="6" paddingLeft="4" paddingRight="4">
        	<mx:VBox verticalGap="0">
	        	 
	        	 <mx:HBox verticalGap="0" horizontalGap="0">
	        	       <mx:Label text="Experiment"  width="80" fontWeight="bold"/>
	        	       <mx:Text text="{requestCategoryName}" width="160" />
	        	 </mx:HBox>
	            <mx:HBox verticalGap="0" horizontalGap="0">
	                <mx:Label width="80" fontWeight="bold"/>
	                <mx:Text  text="{experimentCategoryName}" width="160" />
	            </mx:HBox>
        	</mx:VBox>
        	<mx:VBox verticalGap="0">
        		 <mx:HBox verticalGap="0" horizontalGap="0">
        		   <mx:Label text="{this.selectedExperiment.@isExternal == 'Y' ? 'Registered by' : 'Submitted by'}" width="100" fontWeight="bold"/>
        		   <mx:Text text="{this.selectedExperiment.@ownerName}" width="130" />
        		 </mx:HBox>
        	       <mx:HBox verticalGap="0" horizontalGap="0">
        	         <mx:Label text="{this.selectedExperiment.@isExternal == 'Y' ? 'Registered on' : 'Submitted on'}"  width="100" fontWeight="bold"/>
        	         <mx:Text text="{this.selectedExperiment.@createDate}" width="130"/>
        	       </mx:HBox>
                  <mx:HBox verticalGap="0" horizontalGap="0" id="hbox2">
                    <mx:Label width="100" text="Completed" fontWeight="bold"/>
                    <mx:Text  text="{this.selectedExperiment.@completedDate}" width="130" />
                  </mx:HBox>
        	</mx:VBox>
        	<mx:VBox width="100%" verticalGap="0">
        	    <mx:HBox verticalGap="0" width="100%" horizontalGap="0">
        	           <mx:Label text="Group"  width="55" fontWeight="bold"/>
        	           <mx:Text text="{this.selectedExperiment.@labName}" width="130"/>
        	     </mx:HBox>
	            <mx:HBox verticalGap="0" width="100%" horizontalGap="0">
	                <mx:Label text="Project"  width="55" fontWeight="bold"/>
	                <mx:Text  text="{this.selectedExperiment.@projectName}" width="100%"/>
	            </mx:HBox>
	        	

	            <mx:HBox width="100%">
		            <mx:HBox verticalGap="0" width="100%" horizontalGap="0">
		                <mx:Label width="55" text="Visibility" fontWeight="bold"/>
		                <mx:Text text="{visibilityName}" width="100%" />
		            </mx:HBox>

	            </mx:HBox>
	            
        	</mx:VBox>
        	
        </mx:HBox>

		<mx:VBox id="headerBox" width="100%">
	        <mx:HBox width="100%" id="protocolsBox"   visible="{this.selectedExperiment.protocols.Protocol.length() > 0}" horizontalGap="0" horizontalAlign="left" verticalAlign="top">
       		<mx:Label text="Materials &amp; Methods" fontWeight="bold" paddingLeft="4" id="label1"/>
        	<mx:Tile horizontalGap="0" width="100%" direction="horizontal" id="tile1" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" verticalGap="0" fontSize="9">
        		<mx:Repeater id="protocolRepeater" dataProvider="{this.selectedExperiment.protocols.Protocol}"> 
		    		<mx:LinkButton id="labelProtocol" label="{protocolRepeater.currentItem.@label}" styleName="formLinkProtocolButton" 
		    		paddingLeft="1" paddingRight="1"
		    		click="{showProtocol(event.currentTarget.getRepeaterItem().@idProtocol, event.currentTarget.getRepeaterItem().@protocolClassName)}" paddingTop="0" paddingBottom="0"/>
  				</mx:Repeater>
        	</mx:Tile>

	        </mx:HBox>	  
		</mx:VBox>
            
        <mx:VBox width="100%" height="100%" paddingBottom="4" paddingRight="4" paddingLeft="4" paddingTop="2" id="vbox3">
			<mx:TabNavigator    width="100%" height="100%" verticalGap="5" id="theTab" paddingRight="0" paddingLeft="0" paddingBottom="0" paddingTop="0" change="tabChangeHandler(event)">

				<mx:VBox verticalGap="0" width="100%" height="100%" id="samplesTab" label="Samples">
					<mx:HBox width="100%" horizontalGap="2" paddingTop="4">
						<mx:HBox width="100%" horizontalAlign="right" paddingRight="4" id="hbox1">
							<mx:CheckBox id="showQCFieldsCheckBox" label="Show QC columns" visible="true" click="showHideColumns()"/>
						</mx:HBox>
							
					</mx:HBox>
					<mx:AdvancedDataGrid width="100%" id="samplesGridConfirm"  
						editable="false" 
						backgroundAlpha="0" borderStyle="solid"
						sortableColumns="false"
						sortExpertMode="true"
						defaultLeafIcon="{null}" 	
						iconFunction="getSampleTreeIcon"					 
						displayItemsExpanded="true"
						horizontalScrollPolicy="auto" height="100%">
						<mx:columns>
			                <mx:AdvancedDataGridColumn id="multiplexGroupNumberColumn" headerText="Multiplex #" dataField="@multiplexGroupNumberDisplay" editable="false" visible="true"
								width="60">
								<mx:headerRenderer>
									<mx:Component>
										<mx:VBox horizontalScrollPolicy="off" verticalGap="0">
											<mx:Label text="Index Tag"/>
											<mx:Label text="Group"/>
										</mx:VBox> 
									</mx:Component> 
								</mx:headerRenderer> 
						    </mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn headerText="ID" width="60" dataField="@number"/>
							<mx:AdvancedDataGridColumn headerText="Sample Name" width="100" dataField="@name"/>
							<mx:AdvancedDataGridColumn id="concentrationCol" headerText="Conc." width="65" visible="true"  dataField="@concentration"/>
			                <mx:AdvancedDataGridColumn id="concentrationUnitCol" visible="{true}"  headerText="Unit"  width="60" 
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ConcentrationUnit').DictionaryEntry, '@display', '@value', '@codeConcentrationUnit')}"/>
							<mx:AdvancedDataGridColumn id="ccNumberCol" visible="{this.selectedExperiment.@hasCCNumber == 'Y' ? true : false}" headerText="CC Number" width="100" dataField="@ccNumber"/>
			                <mx:AdvancedDataGridColumn id="barcodeCol" headerText="Index Tag"  width="75" visible="{true}"  
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OligoBarcode').DictionaryEntry, '@display', '@value', '@idOligoBarcode')}">
			                   <mx:headerRenderer>
			                   	  <mx:Component>
			                   	    <mx:VBox verticalGap="0" horizontalScrollPolicy="off">
			                   	    	<mx:Label text="Index"/>
			                   	    	<mx:Label text="Tag"/>
			                   	    </mx:VBox>
			                   	  </mx:Component>
			                   </mx:headerRenderer>
			                </mx:AdvancedDataGridColumn>
			                <mx:AdvancedDataGridColumn id="customBarcodeCol" headerText="Index Tag" width="65" visible="true"  dataField="@barcodeSequence">
			                   <mx:headerRenderer>
			                   	  <mx:Component>
			                   	    <mx:VBox verticalGap="0" horizontalScrollPolicy="off">
			                   	    	<mx:Label text="Custom"/>
			                   	    	<mx:Label text="Index Tag"/>
			                   	    </mx:VBox>
			                   	  </mx:Component>
			                   </mx:headerRenderer>
			                </mx:AdvancedDataGridColumn>
			                <mx:AdvancedDataGridColumn id="sampleTypeCol" headerText="Sample Type"  width="100" visible="{true}"  
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType')}"/>
				            <mx:AdvancedDataGridColumn id="organismCol" headerText="Organism" visible="{true}"  width="80" 
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Organism').DictionaryEntry, '@display', '@value', '@idOrganism')}"/>
							<mx:AdvancedDataGridColumn id="otherOrganismCol" headerText="Organism (other)" width="100" dataField="@otherOrganism"/>
				            <mx:AdvancedDataGridColumn id="preppedByLabCol" headerText="Core to prep lib?"   visible="{true}" width="104"  dataField="@seqPrepByCore"/>
				            <mx:AdvancedDataGridColumn id="samplePrepCol" headerText="Nucl. acid extraction meth."   visible="{true}" width="100" 
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SamplePrepMethod').DictionaryEntry, '@display', '@value', '@idSamplePrepMethod')}"/>
							<mx:AdvancedDataGridColumn id="otherSamplePrepMethodCol" headerText="Other Nucl. acid extraction meth." width="100" dataField="@otherSamplePrepMethod"/>
			                <mx:AdvancedDataGridColumn id="chipTypeCol" visible="{true}" headerText="Chip Type"  width="120" 
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@codeBioanalyzerChipType')}"/>
							
	
							<mx:AdvancedDataGridColumn visible="{showQCFieldsCheckBox.selected}" headerText="QC Conc. ng/uL" width="80" dataField="@qualCalcConcentration"/>
							<mx:AdvancedDataGridColumn visible="{showQCFieldsCheckBox.selected}" headerText="QC 260/230" width="80" dataField="@qual260nmTo230nmRatio"/>
							<mx:AdvancedDataGridColumn visible="{showQCFieldsCheckBox.selected}" headerText="QC RIN" width="70" dataField="@qualRINNumber"/>
			                <mx:AdvancedDataGridColumn  visible="{showQCFieldsCheckBox.selected &amp;&amp; currentState == 'SolexaState'}" headerText="QC Bioanalyzer method"  width="120" 
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@codeBioanalyzerChipType')}"/>
				 			<mx:AdvancedDataGridColumn visible="{showQCFieldsCheckBox.selected &amp;&amp; currentState == 'SolexaState'}" headerText="QC Frag Size (from)" width="90" dataField="@qualFragmentSizeFrom"/>
							<mx:AdvancedDataGridColumn visible="{showQCFieldsCheckBox.selected &amp;&amp; currentState == 'SolexaState'}" headerText="QC Frag Size (to)" width="90" dataField="@qualFragmentSizeTo"/>
							<mx:AdvancedDataGridColumn visible="{showQCFieldsCheckBox.selected}" headerText="QC Status" width="90" dataField="@qualStatus"/>
	
			                <mx:AdvancedDataGridColumn  visible="{currentState == 'SolexaState'}" headerText="Seq Lib Protocol"  width="120" 
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqLibProtocol').DictionaryEntry, '@display', '@value', '@idSeqLibProtocol')}"/>
			                <mx:AdvancedDataGridColumn  visible="{currentState == 'SolexaState' &amp;&amp; showSeqPrepFieldsCheckBox.selected}" headerText="Lib QC Bioanalyzer method"  width="120" 
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@seqPrepQualCodeBioanalyzerChipType')}"/>
							<mx:AdvancedDataGridColumn visible="{currentState == 'SolexaState' &amp;&amp; showSeqPrepFieldsCheckBox.selected}" headerText="Lib Conc. ng/uL" width="90" dataField="@seqPrepLibConcentration"/>
							<mx:AdvancedDataGridColumn visible="{currentState == 'SolexaState' &amp;&amp; showSeqPrepFieldsCheckBox.selected}" headerText="Gel size (from)" width="90" dataField="@seqPrepGelFragmentSizeFrom"/>
							<mx:AdvancedDataGridColumn visible="{currentState == 'SolexaState' &amp;&amp; showSeqPrepFieldsCheckBox.selected}" headerText="Gel size (to)" width="90" dataField="@seqPrepGelFragmentSizeTo"/>
							<mx:AdvancedDataGridColumn visible="{currentState == 'SolexaState' &amp;&amp; showSeqPrepFieldsCheckBox.selected}" headerText="Lib Prep Status" width="90" dataField="@seqPrepStatus"/>
	
							
							<mx:AdvancedDataGridColumn id="treatmentCol" visible="{this.selectedExperiment.@treatment == 'Y' ? true : false}" headerText="Treatment" width="100" dataField="@treatment"/>
	
							<mx:AdvancedDataGridColumn id="prepInstructionsCol" headerText="Prep Instructions" width="100" dataField="@prepInstructions"/>
							<mx:AdvancedDataGridColumn id="descriptionCol" headerText="Description" width="100" dataField="@description"/>
						</mx:columns>
					</mx:AdvancedDataGrid>
				</mx:VBox>
				
    			<mx:Canvas label="Billing" id="billingTab" width="100%" height="100%">
    			 <mx:VBox width="100%" height="100%" verticalGap="4"  paddingBottom="0" paddingTop="0" paddingRight="0" paddingLeft="0" id="billingContainer" >
					<mx:AdvancedDataGrid height="100%" width="100%" id="billingADConfirmGrid"  
					displayItemsExpanded="true"  
        			editable="false" 
        			sortExpertMode="true" 
        			sortableColumns="false"
					backgroundAlpha="0" borderStyle="solid" showHeaders="true" 
					fontSize="9" iconFunction="parentApplication.getTreeIcon">
						<mx:dataProvider>   
      						<mx:HierarchicalData source="{billingItems}"/> 
    					</mx:dataProvider> 
        				<mx:columns> 
	        				<mx:AdvancedDataGridColumn headerText="Group" dataField="@labName" editable="false" width="70" wordWrap="false"/>
	        				<mx:AdvancedDataGridColumn headerText="Acct" dataField="@accountName" editable="false" width="100" wordWrap="false" />
	        				<mx:AdvancedDataGridColumn headerText="Period" dataField="@idBillingPeriod" editable="false" width="70"  wordWrap="false"
							  itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingPeriod').DictionaryEntry,'@display', '@value', '@idBillingPeriod')}"/>
	        				<mx:AdvancedDataGridColumn  headerText="Price Category" wordWrap="true" dataField="@category" editable="false" width="200">
				              <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@category}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
	        				</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Description" wordWrap="true" dataField="@description" editable="false" width="200">
				              <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@description}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
	        				</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Notes"  dataField="@notes" editable="false" width="100" wordWrap="true">
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@notes}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Qty" dataField="@qty" editable="false" textAlign="right" width="50" >
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text  textAlign="right" text="{data.@qty}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Unit price" dataField="@unitPrice"  textAlign="right" editable="false" width="65" > 
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text  textAlign="right" text="{data.@unitPrice}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="%" dataField="@percentageDisplay" editable="false" textAlign="right" width="50" wordWrap="false"
	        				  rendererIsEditor="false"
							  itemRenderer="views.renderers.LabelPercentage" />                             
	        				<mx:AdvancedDataGridColumn headerText="Total price" dataField="@totalPriceDisplay" textAlign="right" width="105" editable="false" >
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@totalPrice}"  textAlign="right" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Status" dataField="@codeBillingStatus" editable="false" width="70" wordWrap="false"
							  itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingStatus').DictionaryEntry,'@display', '@value', '@codeBillingStatus')}"/>                 
	        			</mx:columns>
	        		</mx:AdvancedDataGrid>
				</mx:VBox>
    			</mx:Canvas>
				
				<experiment:ExperimentDownloadView id="filesView" uploadButtonsVisible="{this.selectedExperiment.@canUpdate == 'Y'}" >
				</experiment:ExperimentDownloadView>
						   
			</mx:TabNavigator>
			
        </mx:VBox>      
		
	</mx:VBox>
	
	<mx:HBox  verticalAlign="middle" 
			  visible="{theTab.selectedChild==filesView}" 
			  includeInLayout="{theTab.selectedChild==filesView}" 
			  width="100%" horizontalAlign="left" 
			  id="downloadExpandedFilesButtonView"  paddingBottom="5" paddingLeft="5">
		<mx:Button id="downloadExpandedFilesButton" 
				   click="filesView.downloadExpandedFiles()" 
				   icon="@Embed('../../assets/download.png')" 
				   toolTip="Download selected files"
				   label="Download"/>
		<mx:Button visible="{parentApplication.isFDTSupported ? true : false}" 
				   includeInLayout="{parentApplication.isFDTSupported ? true : false}" 
				   label="FDT Download"  click="{this.downloadFilesUsingFDT()}" 
				   icon="@Embed(source='../../assets/download_large.png')"/>
		<mx:Button visible="{parentApplication.isFDTSupported ? false : true}" 
				   includeInLayout="{parentApplication.isFDTSupported ? false : true}" 
				   label="HTTP Download" click="{this.showAlternateDownloadPage()}" 
				   icon="@Embed(source='../../assets/download_large.png')"/>
	</mx:HBox>
	
</mx:VBox>

<mx:states>
	<mx:State name="MicroarrayState">		 
		<mx:AddChild relativeTo="{this.samplesTab}" position="after" >
			<mx:VBox width="100%" height="100%" verticalGap="0" id="hybsConfirmContainer" label="Hybs">
				<mx:HBox width="100%" horizontalGap="2" paddingTop="4">
					<mx:HBox width="100%"  horizontalAlign="right" paddingRight="4">
						<mx:CheckBox id="showCy3LabelingFieldsCheckBox" label="Show Cy3 Labeling columns" click="showCy3LabelCols(showCy3LabelingFieldsCheckBox.selected)"/>
						<mx:CheckBox id="showCy5LabelingFieldsCheckBox" label="Cy5 Labeling" click="showCy5LabelCols(showCy5LabelingFieldsCheckBox.selected)"/>
						<mx:CheckBox id="showHybFieldsCheckBox" label="Hyb"/>
						<mx:CheckBox id="showExtFieldsCheckBox" label="Scan/FE"/>
					</mx:HBox>
				</mx:HBox>
				<mx:DataGrid width="100%" height="100%" id="hybsGridConfirm"  horizontalScrollPolicy="auto" editable="false" dataProvider="{this.selectedExperiment.hybridizations.Hybridization}"  backgroundAlpha="0" borderStyle="solid">
					<mx:columns>
						<mx:DataGridColumn headerText="ID" width="60" dataField="@number"/>
					    <mx:DataGridColumn editable="false" headerText="Cy3 Sample (green)"  width="122" labelFunction="getChannel1SampleName"/>
					    <mx:DataGridColumn editable="false" headerText="ID"  width="60" labelFunction="getChannel1SampleNumber"/>
					    <mx:DataGridColumn id="channel2SampleConfirmColumn" editable="false" headerText="Cy5 Sample (red)"  width="122" labelFunction="getChannel2SampleName"/>
					    <mx:DataGridColumn editable="false" headerText="ID"  width="60" labelFunction="getChannel2SampleNumber"/>
						
						<mx:DataGridColumn id="labelCol1"  visible="false"  headerText="Channel1 Labeling protocol" width="80" dataField="@idLabelingProtocolChannel1"
						                         itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingProtocol').DictionaryEntry, '@display', '@value', '@idLabelingProtocolChannel1')}">                 											
							<mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy3 Label"/>
								    <mx:Label text="Protocol"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol2"  visible="false" headerText="Channel1 Labeling yield" width="80" dataField="@labelingYieldChannel1">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy3 Label"/>
								    <mx:Label text="Conc."/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol3"  visible="false" headerText="Channel1 Labeling Reaction size" width="80" dataField="@codeLabelingReactionSizeChannel1">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy3 Label"/>
								    <mx:Label text="Reaction size"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol4"  visible="false" headerText="Channel1 Labeling # Reactions" width="80" dataField="@numberOfReactionsChannel1">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy3 Label"/>
								    <mx:Label text="# reactions"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn  id="labelCol5"   visible="false" headerText="Channel1 Labeling Status" width="80" dataField="@labelingStatusChannel1">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy3 Label"/>
								    <mx:Label text="Status"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol6"   visible="false" headerText="Channel2 Labeling protocol"  width="80" dataField="@idLabelingProtocolChannel2"
						                         itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingProtocol').DictionaryEntry, '@display', '@value','@idLabelingProtocolChannel2')}">                 											
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy5 Label"/>
								    <mx:Label text="Protocol"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol7"   visible="false" headerText="Channel2 Labeling yield" width="80" dataField="@labelingYieldChannel2">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy5 Label"/>
								    <mx:Label text="Conc."/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol8"  visible="false" headerText="Channel2 Labeling Reaction size" width="80" dataField="@codeLabelingReactionSizeChannel2">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy5 Label"/>
								    <mx:Label text="Reaction size"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol9"  visible="false"  headerText="Channel2 Labeling # Reactions" width="80" dataField="@numberOfReactionsChannel2">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy5 Label"/>
								    <mx:Label text="# reactions"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol10"   visible="false" headerText="Channel2 Labeling Status" width="80" dataField="@labelingStatusChannel2">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy5 Label"/>
								    <mx:Label text="Status"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						
						
						
						<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Hyb Slide barcode" width="70" dataField="@slideBarcode"/>
						<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Coordinate" width="70" dataField="@arrayCoordinateName"/>
						<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Hyb Protocol" width="70" dataField="@idHybProtocol"
						                          itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.HybProtocol').DictionaryEntry, '@display', '@value', '@idHybProtocol')}"/>                 											
						<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Hyb Status" width="90" dataField="@hybStatus"/>
						
						
						<mx:DataGridColumn visible="{showExtFieldsCheckBox.selected}" headerText="Scan Protocol" width="70" dataField="@idScanProtocol"
						                         itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ScanProtocol').DictionaryEntry, '@display', '@value', '@idScanProtocol')}"/>                 											
						<mx:DataGridColumn visible="{showExtFieldsCheckBox.selected}" headerText="F/E Protocol" width="70" dataField="@idFeatureExtractionProtocol"
						                          itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.FeatureExtractionProtocol').DictionaryEntry, '@display', '@value', '@idFeatureExtractionProtocol')}"/>                 											
						<mx:DataGridColumn visible="{showExtFieldsCheckBox.selected}" headerText="Ext Status" width="90" dataField="@extractionStatus"/>
					     
					     
					     <mx:DataGridColumn headerText="Slide" visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showHybFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"  width="320" dataField="@slideDesignName" />
					     <mx:DataGridColumn headerText="Slide Source"  visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showHybFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"   width="82"   
					                        itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SlideSource').DictionaryEntry, '@display', '@value', '@codeSlideSource')}"/>                 											
						<mx:DataGridColumn headerText="Notes" width="100"  visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"   dataField="@notes"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
		</mx:AddChild>
	</mx:State>
	<mx:State name="QCState">		
	</mx:State>
	<mx:State name="SolexaState">
		<mx:AddChild relativeTo="{this.samplesTab}" position="after">
				<mx:VBox  id="lanesConfirmContainer" label="Sample Sequencing Runs"  verticalGap="0" width="100%" height="100%">
						<mx:AdvancedDataGrid width="100%" 
							height="100%" id="lanesConfirmGrid"
							displayItemsExpanded="true"
							sortExpertMode="true"
							sortableColumns="false"  
							editable="false"
							iconFunction="getLaneTreeIcon"
							rollOverColor="#C0C0C0" selectionColor="#FFFFB9" 
							horizontalScrollPolicy="auto">
							<mx:dataProvider>   
      							<mx:HierarchicalData source="{multiplexLanes}"/> 
    						</mx:dataProvider> 							
						<mx:columns>
							<mx:AdvancedDataGridColumn headerText="ID" width="90" dataField="@number"/>
						    <mx:AdvancedDataGridColumn  headerText="Sample Name"  width="100" dataField="@sampleName" editable="false"/>
						    <mx:AdvancedDataGridColumn  headerText="Sample ID"  width="68" dataField="@sampleNumber" editable="false"/>
			                <mx:AdvancedDataGridColumn id="laneBarcodeCol" headerText="Barcode"  width="75" visible="{true}"  
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OligoBarcode').DictionaryEntry, '@display', '@value', '@sampleIdOligoBarcode')}">
			                   <mx:headerRenderer>
			                   	  <mx:Component>
			                   	    <mx:VBox verticalGap="0" horizontalScrollPolicy="off">
			                   	    	<mx:Label text="Illumina"/>
			                   	    	<mx:Label text="Barcode"/>
			                   	    </mx:VBox>
			                   	  </mx:Component>
			                   </mx:headerRenderer>
			                </mx:AdvancedDataGridColumn>
			                <mx:AdvancedDataGridColumn id="laneCustomBarcodeCol" headerText="Barcode" width="65" visible="true"  dataField="@sampleBarcodeSequence">
			                   <mx:headerRenderer>
			                   	  <mx:Component>
			                   	    <mx:VBox verticalGap="0" horizontalScrollPolicy="off">
			                   	    	<mx:Label text="Custom"/>
			                   	    	<mx:Label text="Barcode"/>
			                   	    </mx:VBox>
			                   	  </mx:Component>
			                   </mx:headerRenderer>
			                </mx:AdvancedDataGridColumn>
				            <mx:AdvancedDataGridColumn  width="150" id="seqRunTypeCol" headerText="Flow Cell Type"  editable="false" dataField="@idSeqRunType" 						             						             
                                    itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry, '@display', '@value', '@idSeqRunType')}"/>                 											
				            <mx:AdvancedDataGridColumn width="65" id="numberOfSequencingCyclesCol" headerText="# Cycles"   editable="false" dataField="@idNumberSequencingCycles" 						             						             
                                    itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry, '@display', '@value', '@idNumberSequencingCycles')}"/>                 											
							<mx:AdvancedDataGridColumn  headerText="Status in Workflow" width="120" dataField="@workflowStatus"/>
				            <mx:AdvancedDataGridColumn  width="65" id="flowCellNumberCol" headerText="Flow Cell #"  editable="false" dataField="@flowCellNumber"/> 	 					             						             
				            <mx:AdvancedDataGridColumn  width="55" id="flowCellLaneNumber" headerText="Channel"  editable="false" dataField="@flowCellChannelNumber"/> 						             						             
				            <mx:AdvancedDataGridColumn  width="90" headerText="Channel sample conc. pM"  editable="false" dataField="@flowCellChannelSampleConcentrationPmDisplay"> 						             						             
							   <mx:headerRenderer > 
							    <mx:Component>
							    	<mx:VBox verticalGap="0"   horizontalAlign="center"  horizontalScrollPolicy="off" verticalAlign="middle">
								        <mx:Label text="Channel Sample"/>
								        <mx:Label text="conc. pM"/>
					    			</mx:VBox>
							    </mx:Component>
							   </mx:headerRenderer>
						    </mx:AdvancedDataGridColumn>
				            <mx:AdvancedDataGridColumn  width="90" headerText="# Cycles (actual)"  editable="false" dataField="@numberSequencingCyclesActual"> 						             						             
							   <mx:headerRenderer > 
							    <mx:Component>
							    	<mx:VBox verticalGap="0"   horizontalAlign="center"  horizontalScrollPolicy="off" verticalAlign="middle">
								        <mx:Label text="# Seq Cycles"/>
								        <mx:Label text="(actual)"/>
					    			</mx:VBox>
							    </mx:Component>
							   </mx:headerRenderer>
						    </mx:AdvancedDataGridColumn>
				            <mx:AdvancedDataGridColumn  width="90" headerText="Read 1 Clusters PF (M)"  editable="false" dataField="@read1ClustersPassedFilterM"> 						             						             
							   <mx:headerRenderer > 
							    <mx:Component>
							    	<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
								        <mx:Label text="Read 1 Clusters"/>
								        <mx:Label text="PF (M)"/>
					    			</mx:VBox>
							    </mx:Component>
							   </mx:headerRenderer>
						    </mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn  width="90" headerText="Read 2 Clusters PF (M)"  editable="false" dataField="@read2ClustersPassedFilterM"> 						             						             
								<mx:headerRenderer > 
									<mx:Component>
										<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
											<mx:Label text="Read 2 Clusters"/>
											<mx:Label text="PF (M)"/>
										</mx:VBox>
									</mx:Component>
								</mx:headerRenderer>
							</mx:AdvancedDataGridColumn>
				            <mx:AdvancedDataGridColumn  width="90" headerText="Q30 (Gb)"  editable="false" dataField="@q30Gb"/> 						             						             
				            <mx:AdvancedDataGridColumn  width="90"  headerText="File name"  editable="false" dataField="@fileName"/> 						             						             
							<mx:AdvancedDataGridColumn  headerText="Last Cycle Status" width="90" dataField="@lastCycleStatus"> 
							   <mx:headerRenderer > 
							    <mx:Component>
							    	<mx:VBox verticalGap="0"  horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
								        <mx:Label text="Last Cycle"/>
								        <mx:Label text="Status"/>
					    			</mx:VBox>
							    </mx:Component>
							   </mx:headerRenderer>
						    </mx:AdvancedDataGridColumn>
				            <mx:AdvancedDataGridColumn width="150" id="genomeBuildAlignTo" headerText="Genome Build (align to)"  editable="false" dataField="@idGenomeBuildAlignTo" 						             						             
                                    itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.GenomeBuild').DictionaryEntry, '@display', '@value', '@idGenomeBuildAlignTo')}"/>                 											
							<mx:AdvancedDataGridColumn width="150" headerText="Analysis Instructions"   dataField="@analysisInstructions"/>
						</mx:columns> 
					</mx:AdvancedDataGrid>
					
				</mx:VBox>					        			
		
		</mx:AddChild>
		<mx:AddChild relativeTo="{hbox1}" position="lastChild">
			<mx:CheckBox id="showSeqPrepFieldsCheckBox" label="Illumina Lib Prep" visible="true" click="showHideColumns()"/>
		</mx:AddChild>
		<mx:SetProperty target="{tile1}" name="tileHeight"/>
		<mx:SetProperty target="{tile1}" name="width"/>
		<mx:SetProperty target="{tile1}" name="tileWidth" value="220"/>
	</mx:State>
	<mx:State name="ExternalMicroarrayState" basedOn="MicroarrayState">
		<mx:RemoveChild target="{tile1}"/>
		<mx:RemoveChild target="{label1}"/>
		<mx:RemoveChild target="{protocolsBox}"/>
		<mx:RemoveChild target="{headerBox}"/>
		<mx:RemoveChild target="{hbox2}"/>
		<mx:RemoveChild target="{showQCFieldsCheckBox}"/>
	</mx:State>
	<!--mx:State name="ExternalSeqState" basedOn="SolexaState"-->
	<mx:State name="ExternalSeqState">
		<!--mx:RemoveChild target="{protocolsBox}"/>
		<mx:RemoveChild target="{headerBox}"/>
		<mx:RemoveChild target="{hbox2}"/>
		<mx:RemoveChild target="{showQCFieldsCheckBox}"/>
		<mx:RemoveChild target="{showSeqPrepFieldsCheckBox}"/-->
	</mx:State>
</mx:states>
	
</mx:VBox>
