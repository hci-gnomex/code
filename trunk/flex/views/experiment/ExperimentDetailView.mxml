<?xml version="1.0" encoding="utf-8"?>
<mx:VBox
    xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%" 
	xmlns:views="views.*"  
	xmlns:util="views.util.*" >
   <mx:HTTPService  
    id="getProtocol" 
    url="GetProtocol.gx"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetProtocol(event)"
    fault="parentApplication.onFailHttpRequest('Failed to get protocol', event)"
	method="POST"
    useProxy="false">
    
  </mx:HTTPService>
  	 
<mx:Script>
	<![CDATA[
		import mx.managers.PopUpManager;
		import mx.events.CloseEvent;
		import mx.controls.Alert;
		import views.experiment.ExperimentEditView;
		import hci.flex.controls.DropdownLabel; 
		import mx.rpc.events.ResultEvent;
		import views.experiment.ConvertIlluminaRequestWindow;
		
		
		
	
		[Bindable]
		private var requestCategoryName:String;
		[Bindable]
		private var experimentCategoryName:String;
		[Bindable]
		private var seqLibTreatments:String;
		[Bindable]
		private var visibilityName:String;
		
		[Bindable]
		public var selectedExperiment:Object;
		
		public function checkSecurity():void {
			
			if (parentApplication.isGuestMode()) {
				this.showCy3LabelingFieldsCheckBox.visible = false;
				this.showCy5LabelingFieldsCheckBox.visible = false;
				this.showExtFieldsCheckBox.visible = false;
				this.showHybFieldsCheckBox.visible = false;
				this.showQCFieldsCheckBox.visible = false;
				
				if (parentDocument != null && parentDocument is ExperimentDetailPanel) {
					parentDocument.requestFormButton.visible = false;				
				}
			}
			
			
		}
	
		public function setupForm(selectedExperiment:Object):void {
			this.selectedExperiment = selectedExperiment;
			
			if (selectedExperiment.@canUpdate == 'Y' && this.billingItems.length > 0) {
				if (!theTab.contains(this.billingTab)) {
					theTab.addChild(billingTab);
				}
			} else {
				if (theTab.contains(this.billingTab)) {
					theTab.removeChild(billingTab);
				}
			}
			if (this.protocolsBox.visible) {
				if (!this.headerBox.contains(this.protocolsBox)) {
					this.headerBox.addChild(this.protocolsBox);
				} 
			} else {
				if (this.headerBox.contains(this.protocolsBox)) {
					this.headerBox.removeChild(this.protocolsBox);
				} 
			}
			
			this.currentState = '';						
			this.theTab.selectedIndex = 0;
			if (this.selectedExperiment.@codeRequestCategory == "QC") {
				currentState = 'QCState';
			} else if (this.selectedExperiment.@codeRequestCategory == 'SOLEXA' ||
			           this.selectedExperiment.@codeRequestCategory == 'HISEQ') {
				currentState = 'SolexaState';
			} else {
				currentState = 'MicroarrayState';

				
				showCy3LabelingFieldsCheckBox.selected = false;
				showCy5LabelingFieldsCheckBox.selected = false;
				showHybFieldsCheckBox.selected = false;
				showExtFieldsCheckBox.selected = false;

			}
			
			if (parentDocument != null && parentDocument is ExperimentDetailPanel) {
				if (this.selectedExperiment.analysisExperimentItems.hasOwnProperty("AnalysisExperimentItem")) {
					parentDocument.analysisButton.enabled = true;
				} else {
					parentDocument.analysisButton.enabled = false;
				}
			}
			

			showQCFieldsCheckBox.selected = false;


			getRequestCategoryName();
			getExperimentCategoryName();
			getSeqLibTreatments();
			getVisibilityName();
			callLater(showHideColumns);
			this.addNonStandardSampleColumns();
			
		}
		
		private function showCy3LabelCols(isVisible:Boolean):void {
			labelCol1.visible = isVisible;
			labelCol2.visible = isVisible;
			labelCol3.visible = isVisible;
			labelCol4.visible = isVisible;
			labelCol5.visible = isVisible;
		}
			
		private function showCy5LabelCols(isVisible:Boolean):void {
			labelCol6.visible = isVisible;
			labelCol7.visible = isVisible;
			labelCol8.visible = isVisible;
			labelCol9.visible = isVisible;
			labelCol10.visible = isVisible;
		}

	    private function getChannel1SampleName(item:Object, col:int):String {
			var de:XMLList = item.labeledSampleChannel1.LabeledSample.sample.Sample;
	    	if (de.length() == 1) {
		    	return de[0].@name;
	    	} else {
	    		return "";
	    	}
		}
		private function getChannel2SampleName(item:Object, col:int):String {
			var de:XMLList = item.labeledSampleChannel2.LabeledSample.sample.Sample;
	    	if (de.length() == 1) {
		    	return de[0].@name;
	    	} else {
	    		return "";
	    	}
		}
		private function getChannel1SampleNumber(item:Object, col:int):String {
			var de:XMLList = item.labeledSampleChannel1.LabeledSample.sample.Sample;
	    	if (de.length() == 1) {
		    	return de[0].@number;
	    	} else {
	    		return "";
	    	}
		}
		private function getChannel2SampleNumber(item:Object, col:int):String {
			var de:XMLList = item.labeledSampleChannel2.LabeledSample.sample.Sample;
	    	if (de.length() == 1) {
		    	return de[0].@number;
	    	} else {
	    		return "";
	    	}
		}

   	 	private function getSamplesGridRowNumber(item:Object,col:int):String
	    {
    	   var x:int = samplesGridConfirm.dataProvider.getItemIndex(item) + 1;
	       return String(x);
	    } 
   	 	private function getHybsGridRowNumber(item:Object,col:int):String
	    {
    	   var x:int = hybsGridConfirm.dataProvider.getItemIndex(item) + 1;
	       return String(x);
	    } 

		private function getRequestCategoryName():void {
			var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', this.selectedExperiment.@codeRequestCategory);
			if (requestCategory is XMLList) {
				requestCategoryName = requestCategory[0].@display.toString();				
			} else {
				requestCategoryName = requestCategory.@display.toString();		
			}
		}
		private function getExperimentCategoryName():void {
			var experimentCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', this.selectedExperiment.@codeApplication);
			if (experimentCategory is XMLList) {
				experimentCategoryName  = experimentCategory[0].@display.toString();
			} else {
				experimentCategoryName = experimentCategory.@display.toString();
			}
		}

		private function getSeqLibTreatments():void {
			seqLibTreatments = "";
			for each(var item:Object in this.selectedExperiment.seqLibTreatments.SeqLibTreatment) {
				if (seqLibTreatments.length > 0) {
					seqLibTreatments += ", ";
				}
				seqLibTreatments += item.@display;
			}
		}
		private function getVisibilityName():void {
			var visibility:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Visibility', this.selectedExperiment.@codeVisibility);
			if (visibility is XMLList) {
				visibilityName = visibility[0].@display.toString();			
			} else {
				visibilityName = visibility.@display.toString();
			}
		}
		
		public function showDownloads():void {
			parentDocument.parentDocument.showExperimentDownloads();
		}

	  	public function promptToDeleteExperiment():void {
	  		var billingItems:XMLList = this.selectedExperiment.billingItems.BillingItem;
	  		if ( billingItems.length() > 0) {
				Alert.show("Delete experiment " + this.selectedExperiment.@number + 
				            "?\n\nWARNING:  This will also delete "  +
				            billingItems.length() + " billing item(s) associated with this experiment.\n\n", 
							"Confirm", 
							(Alert.YES | Alert.NO), this, 
							onPromptToDeleteExperiment);
	  			
	  		} else {
				Alert.show("Delete experiment " + this.selectedExperiment.@number + "?", 
							"Confirm", 
							(Alert.YES | Alert.NO), this, 
							onPromptToDeleteExperiment);
	  		}
			
	  	}
		
	  	private function onPromptToDeleteExperiment(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	deleteExperiment();
            }
      	}
		private function deleteExperiment():void {
			parentDocument.parentDocument.deleteExperiment();
		}
		
		public function showPrintableRequestForm():void {
			var url:URLRequest = new URLRequest('ShowRequestForm.gx?idRequest=' + this.selectedExperiment.@idRequest);
			navigateToURL(url, '_blank');			
		}
		
		public function showEditExperimentWindow():void {
			 // add this get request code b/c the edit window was freezing the second time 
			 // the edit window was pressed.  by putting this extra call in, it seems to clear
			 // out some weird state.
			 //var parms:Object = new Object();
			 //parms.idRequest = this.selectedExperiment.@idRequest;
			 //parentDocument.getRequest.send(parms);
           	 
           	 //parentDocument.editView.setupEditForm(this.selectedExperiment);
           	 parentDocument.parentDocument.editView.request = this.selectedExperiment;
           	 parentDocument.parentDocument.editView.samplesView.showCCNumberCheckbox.selected = this.selectedExperiment.@hasCCNumber == 'Y' ? true : false;
           	 
           	 parentDocument.parentDocument.theViews.selectedChild = parentDocument.parentDocument.editView;
           	 //parentDocument.editView.removeDataListeners();
           	 //parentDocument.editView.initializeData();
           	 //callLater(parentDocument.editView.setupDataListeners);
		}
		
		public function refreshSavedExperiment(idRequest:Object):void {
			 parentDocument.parentDocument.selectedIdRequest = idRequest;
			 var parms:Object = new Object();
			 parms.idRequest = parentDocument.parentDocument.selectedIdRequest;
			 parentDocument.parentDocument.getRequest.send(parms);
			
		}

		public function getLanesGridRowNumber(item:Object,col:int):String
        {
           var x:int = this.lanesConfirmGrid.dataProvider.getItemIndex(item) + 1;
           return String(x);     		
        }
		public function getLaneSampleName(item:Object,col:int):String
        {
        	var sampleName:String = "";
    		for each(var sample:Object in this.samplesGridConfirm.dataProvider) {
    			if (sample.@idSample == item.@idSample) {
    				sampleName = sample.@name;
    				break;
    			}
    		}
        	return sampleName;
        }
        

        
       
		public function getLaneSampleNumber(item:Object,col:int):String
        {
        	var sampleNumber:String = "";
    		for each(var sample:Object in this.samplesGridConfirm.dataProvider) {
    			if (sample.@idSample == item.@idSample) {
    				sampleNumber = sample.@number;
    				break;
    			}
    		}
        	return sampleNumber;
        }
        
        private function showHideColumns():void {
       	if (this.showQCFieldsCheckBox.selected) {
				concentrationCol.visible = false; 
				sampleTypeCol.visible = false;
				organismCol.visible = false;
				preppedByLabCol.visible = false;
				samplePrepCol.visible = false;
				chipTypeCol.visible = false;
				barcodeCol.visible = false;
				concentrationUnitCol.visible = false;
				prepInstructionsCol.visible = false;

				AGE0.visible = false;
				CELLLINE0.visible = false;   
				CELLTYPE0.visible = false;   
				CLININFO0.visible = false;   
				COMPOUND0.visible = false;   
				DISSTATE0.visible = false;   
				DOSE0.visible = false;   
				GENMOD0.visible = false;   
				GENOTYPE0.visible = false;   
				GROWTHCOND0.visible = false;   
				INDIV0.visible = false;   
				ORGPART0.visible = false;   
				SEX0.visible = false;   
				TEMP0.visible = false;   
				TIME0.visible = false;   
				otherDataColumnConfirm.visible = false;   
				treatmentCol.visible = false;   
				descriptionCol.visible = false;   
        		
        	} else {
				AGE0.visible = this.selectedExperiment.@AGE == 'Y' ? true : false;        		
				CELLLINE0.visible = this.selectedExperiment.@CELLLINE == 'Y' ? true : false;   
				CELLTYPE0.visible = this.selectedExperiment.@CELLTYPE == 'Y' ? true : false;   
				CLININFO0.visible = this.selectedExperiment.@CLININFO == 'Y' ? true : false;   
				COMPOUND0.visible = this.selectedExperiment.@COMPOUND == 'Y' ? true : false;   
				DISSTATE0.visible = this.selectedExperiment.@DISSTATE == 'Y' ? true : false;   
				DOSE0.visible = this.selectedExperiment.@DOSE == 'Y' ? true : false;   
				GENMOD0.visible = this.selectedExperiment.@GENMOD == 'Y' ? true : false;   
				GENOTYPE0.visible = this.selectedExperiment.@GENOTYPE == 'Y' ? true : false;   
				GROWTHCOND0.visible = this.selectedExperiment.@GROWTHCOND == 'Y' ? true : false;   
				INDIV0.visible = this.selectedExperiment.@INDIV == 'Y' ? true : false;   
				ORGPART0.visible = this.selectedExperiment.@ORGPART == 'Y' ? true : false;   
				SEX0.visible = this.selectedExperiment.@SEX == 'Y' ? true : false;   
				TEMP0.visible = this.selectedExperiment.@TEMP == 'Y' ? true : false;   
				TIME0.visible = this.selectedExperiment.@TIME == 'Y' ? true : false;   
				otherDataColumnConfirm.visible = this.selectedExperiment.@OTHER == 'Y' ? true : false;   
				treatmentCol.visible = this.selectedExperiment.@treatment == 'Y' ? true : false;   
				descriptionCol.visible = true;   

	        	if (currentState == 'SolexaState') {
					concentrationCol.visible = true; 
					sampleTypeCol.visible = true;
					organismCol.visible = true;
					preppedByLabCol.visible = true;
					samplePrepCol.visible = true;
					chipTypeCol.visible = false;
					barcodeCol.visible = true;
					concentrationUnitCol.visible = false;
				    prepInstructionsCol.visible = true;
	        		
	        	} else if (currentState == 'QCState') {
					concentrationCol.visible = false; 
					sampleTypeCol.visible = false;
					organismCol.visible = false;
					preppedByLabCol.visible = false;
					samplePrepCol.visible = true;
					chipTypeCol.visible = (this.selectedExperiment.@codeApplication == 'BIOAN' ? true : false);
					barcodeCol.visible = false;
					concentrationUnitCol.visible = true;
				    prepInstructionsCol.visible = false;
	        		
	        	} else {
					concentrationCol.visible = true; 
					sampleTypeCol.visible = true;
					organismCol.visible = true;
					preppedByLabCol.visible = false;
					samplePrepCol.visible = true;
					chipTypeCol.visible = false;
					barcodeCol.visible = false;
					concentrationUnitCol.visible = false;        		
				    prepInstructionsCol.visible = false;
        		}
        	} 
        }
        
        public function showRelatedAnalysis():void {
        	parentApplication.showAnalysisForExperiment(this.selectedExperiment);
        }
        
        public function addNonStandardSampleColumns():void {
       		var annotation:Object;
       		var col:DataGridColumn;
       		var exists:Boolean = false;
       		for each(annotation in this.selectedExperiment.SampleCharacteristicEntries.SampleCharacteristicEntry) {
				exists = false;
       			for each(col in samplesGridConfirm.columns) {
					if (col.dataField == ("@" + annotation.@codeSampleCharacteristic)) {
						exists = true;
						break;
					}    				
       			}
       			if (!exists) {
       				
       				var newCol:DataGridColumn = new DataGridColumn();
       				newCol.dataField  = "@" + annotation.@codeSampleCharacteristic;
       				newCol.headerText = annotation.@sampleCharacteristic;
       				newCol.visible    = annotation.@isSelected == "true" ? true : false;
       				
       				var columns:Array = samplesGridConfirm.columns;
       				// Pop the description; we want it to be the last column
       				var descCol:DataGridColumn = DataGridColumn(columns.pop());
       				columns.push(newCol);
       				columns.push(descCol);
       				samplesGridConfirm.columns = columns;
       			} else {
       				col.visible    = annotation.@isSelected == "true" ? true : false;       				
       			}
       		}
        	
        }

        
        
        private function showProtocol(idProtocol:Object, protocolClassName:String):void {
        	var params:Object = new Object();
        	params.id = idProtocol;
        	params.protocolClassName = protocolClassName;
        	getProtocol.send(params);
        }
        
    	private function onGetProtocol(event:ResultEvent): void { 
			if (getProtocol.lastResult.name() != "Protocol") {
        		mx.controls.Alert.show(getProtocol.lastResult..ACTMESSAGE.@TEXT);
      	  		return;
   			}
   			var protocolWindow:ProtocolWindow = ProtocolWindow(PopUpManager.createPopUp(DisplayObject(this.parentDocument), ProtocolWindow, false));
   			PopUpManager.centerPopUp(protocolWindow);
   			protocolWindow.title = getProtocol.lastResult.name;
   			protocolWindow.protocolDescription.text = getProtocol.lastResult.description;
    	}
    	
    	public function showConvertIlluminaRequest():void {
   			var convertWindow:ConvertIlluminaRequestWindow = ConvertIlluminaRequestWindow(PopUpManager.createPopUp(DisplayObject(this), ConvertIlluminaRequestWindow, false));
   			PopUpManager.centerPopUp(convertWindow);
   			convertWindow.init(this.selectedExperiment);
    	}  
    	
		public function getBillingTreeIcon(item:Object):Class {
			if (item.name() == "BillingLab") {
				return parentApplication.iconGroup;
			} else {
				return parentApplication.iconBilling; 
			}  
		}   
	]]>
</mx:Script>

<mx:XMLListCollection id="billingItems" source="{selectedExperiment.billingItems.BillingLab}"/>

<mx:VBox width="100%" height="100%"  styleName="form"  id="vbox2">
    <mx:VBox height="100%"  width="100%" verticalGap="0">
        <mx:HBox width="100%" paddingTop="4" paddingBottom="0" horizontalGap="6" paddingLeft="4" paddingRight="4">
        	<mx:VBox verticalGap="0">
	        	 
	        	 <mx:HBox verticalGap="0" horizontalGap="0">
	        	       <mx:Label text="{this.selectedExperiment.@isExternal == 'Y' ? 'External Experiment' :  'Experiment'}"  width="128" fontWeight="bold"/>
	        	       <mx:Text text="{requestCategoryName}" width="160" />
	        	 </mx:HBox>
	            <mx:HBox verticalGap="0" horizontalGap="0">
	                <mx:Label width="128" fontWeight="bold"/>
	                <mx:Text  text="{experimentCategoryName}" width="160" />
	            </mx:HBox>
        	</mx:VBox>
        	<mx:VBox verticalGap="0">
        		 <mx:HBox verticalGap="0" horizontalGap="0">
        		   <mx:Label text="{this.selectedExperiment.@isExternal == 'Y' ? 'Registered by' : 'Submited by'}" width="100" fontWeight="bold"/>
        		   <mx:Text text="{this.selectedExperiment.@ownerName}" width="130" />
        		 </mx:HBox>
        	       <mx:HBox verticalGap="0" horizontalGap="0">
        	         <mx:Label text="{this.selectedExperiment.@isExternal == 'Y' ? 'Registered on' : 'Submited on'}"  width="100" fontWeight="bold"/>
        	         <mx:Text text="{this.selectedExperiment.@createDate}" width="130"/>
        	       </mx:HBox>
                  <mx:HBox verticalGap="0" horizontalGap="0">
                    <mx:Label width="100" text="Completed" fontWeight="bold"/>
                    <mx:Text  text="{this.selectedExperiment.@completedDate}" width="130" />
                  </mx:HBox>
        	</mx:VBox>
        	<mx:VBox width="100%" verticalGap="0">
        	    <mx:HBox verticalGap="0" width="100%" horizontalGap="0">
        	           <mx:Label text="Group"  width="55" fontWeight="bold"/>
        	           <mx:Text text="{this.selectedExperiment.@labName}" width="130"/>
        	     </mx:HBox>
	            <mx:HBox verticalGap="0" width="100%" horizontalGap="0">
	                <mx:Label text="Project"  width="55" fontWeight="bold"/>
	                <mx:Text  text="{this.selectedExperiment.@projectName}" width="100%"/>
	            </mx:HBox>
	        	

	            <mx:HBox width="100%">
		            <mx:HBox verticalGap="0" width="100%" horizontalGap="0">
		                <mx:Label width="55" text="Visibility" fontWeight="bold"/>
		                <mx:Text text="{visibilityName}" width="100%" />
		            </mx:HBox>

	            </mx:HBox>
	            
        	</mx:VBox>
        	
        </mx:HBox>

		<mx:VBox id="headerBox" width="100%">
	        <mx:HBox width="100%" id="protocolsBox"   visible="{this.selectedExperiment.protocols.Protocol.length() > 0}" horizontalGap="0" horizontalAlign="left" verticalAlign="top">
       		<mx:Label text="Materials &amp; Methods" fontWeight="bold" paddingLeft="4"/>
        	<mx:Tile horizontalGap="0" width="100%" direction="horizontal" id="tile1" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" verticalGap="0" fontSize="9">
        		<mx:Repeater id="protocolRepeater" dataProvider="{this.selectedExperiment.protocols.Protocol}"> 
		    		<mx:LinkButton id="labelProtocol" label="{protocolRepeater.currentItem.@label}" styleName="formLinkProtocolButton" 
		    		paddingLeft="1" paddingRight="1"
		    		click="{showProtocol(event.currentTarget.getRepeaterItem().@idProtocol, event.currentTarget.getRepeaterItem().@protocolClassName)}" paddingTop="0" paddingBottom="0"/>
  				</mx:Repeater>
        	</mx:Tile>

	        </mx:HBox>	  
		</mx:VBox>
            
        <mx:VBox width="100%" height="100%" paddingBottom="4" paddingRight="4" paddingLeft="4" paddingTop="2">
			<mx:TabNavigator    width="100%" height="100%" verticalGap="5" id="theTab" paddingRight="0" paddingLeft="0" paddingBottom="0" paddingTop="0">

				<mx:VBox verticalGap="0" width="100%" height="100%" id="samplesTab" label="Samples">
					<mx:HBox width="100%" horizontalGap="2" paddingTop="4">
						<mx:HBox width="100%" horizontalAlign="right" paddingRight="4" id="hbox1">
							<mx:CheckBox id="showQCFieldsCheckBox" label="Show QC columns" visible="true" click="showHideColumns()"/>
						</mx:HBox>
							
					</mx:HBox>
					<mx:DataGrid width="100%" id="samplesGridConfirm"  editable="false" dataProvider="{this.selectedExperiment.samples.Sample}" backgroundAlpha="0" borderStyle="solid" horizontalScrollPolicy="auto" height="100%">
						<mx:columns>
							<mx:DataGridColumn headerText="ID" width="60" dataField="@number"/>
							<mx:DataGridColumn headerText="Sample Name" width="100" dataField="@name"/>
							<mx:DataGridColumn id="concentrationCol" headerText="Conc." width="65" visible="true"  dataField="@concentration"/>
			                <mx:DataGridColumn id="concentrationUnitCol" visible="{true}"  headerText="Unit"  width="60" 
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ConcentrationUnit').DictionaryEntry, '@display', '@value', '@codeConcentrationUnit')}"/>
			                <mx:DataGridColumn id="barcodeCol" visible="{true}" headerText="Barcode"  width="80" 
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OligoBarcode').DictionaryEntry, '@barcodeSequence', '@value', '@idOligoBarcode')}"/>
				            <mx:DataGridColumn id="sampleTypeCol" headerText="Sample Type"  width="100" visible="{true}"  
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType')}"/>
				            <mx:DataGridColumn id="organismCol" headerText="Organism" visible="{true}"  width="80" 
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Organism').DictionaryEntry, '@display', '@value', '@idOrganism')}"/>
				            <mx:DataGridColumn id="preppedByLabCol" headerText="Core to prep lib?"   visible="{true}" width="104"  dataField="@seqPrepByCore"/>
				            <mx:DataGridColumn id="samplePrepCol" headerText="Nucl. acid extraction meth."   visible="{true}" width="100" 
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SamplePrepMethod').DictionaryEntry, '@display', '@value', '@idSamplePrepMethod')}"/>
							<mx:DataGridColumn id="otherSamplePrepMethodCol" headerText="Other Nucl. acid extraction meth." width="100" dataField="@otherSamplePrepMethod"/>
			                <mx:DataGridColumn id="chipTypeCol" visible="{true}" headerText="Chip Type"  width="120" 
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@codeBioanalyzerChipType')}"/>
							
	
							<mx:DataGridColumn visible="{showQCFieldsCheckBox.selected}" headerText="QC Conc. ng/uL" width="80" dataField="@qualCalcConcentration"/>
							<mx:DataGridColumn visible="{showQCFieldsCheckBox.selected}" headerText="QC 260/230" width="80" dataField="@qual260nmTo230nmRatio"/>
							<mx:DataGridColumn visible="{showQCFieldsCheckBox.selected}" headerText="QC RIN" width="70" dataField="@qualRINNumber"/>
			                <mx:DataGridColumn  visible="{showQCFieldsCheckBox.selected &amp;&amp; currentState == 'SolexaState'}" headerText="QC Bioanalyzer method"  width="120" 
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@codeBioanalyzerChipType')}"/>
				 			<mx:DataGridColumn visible="{showQCFieldsCheckBox.selected &amp;&amp; currentState == 'SolexaState'}" headerText="QC Frag Size (from)" width="90" dataField="@qualFragmentSizeFrom"/>
							<mx:DataGridColumn visible="{showQCFieldsCheckBox.selected &amp;&amp; currentState == 'SolexaState'}" headerText="QC Frag Size (to)" width="90" dataField="@qualFragmentSizeTo"/>
							<mx:DataGridColumn visible="{showQCFieldsCheckBox.selected}" headerText="QC Status" width="90" dataField="@qualStatus"/>
	
			                <mx:DataGridColumn  visible="{currentState == 'SolexaState'}" headerText="Seq Lib Protocol"  width="120" 
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqLibProtocol').DictionaryEntry, '@display', '@value', '@idSeqLibProtocol')}"/>
			                <mx:DataGridColumn  visible="{currentState == 'SolexaState' &amp;&amp; showSeqPrepFieldsCheckBox.selected}" headerText="Lib QC Bioanalyzer method"  width="120" 
	              				itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@seqPrepQualCodeBioanalyzerChipType')}"/>
							<mx:DataGridColumn visible="{currentState == 'SolexaState' &amp;&amp; showSeqPrepFieldsCheckBox.selected}" headerText="Lib Conc. ng/uL" width="90" dataField="@seqPrepLibConcentration"/>
							<mx:DataGridColumn visible="{currentState == 'SolexaState' &amp;&amp; showSeqPrepFieldsCheckBox.selected}" headerText="Gel size (from)" width="90" dataField="@seqPrepGelFragmentSizeFrom"/>
							<mx:DataGridColumn visible="{currentState == 'SolexaState' &amp;&amp; showSeqPrepFieldsCheckBox.selected}" headerText="Gel size (to)" width="90" dataField="@seqPrepGelFragmentSizeTo"/>
							<mx:DataGridColumn visible="{currentState == 'SolexaState' &amp;&amp; showSeqPrepFieldsCheckBox.selected}" headerText="Lib Prep Status" width="90" dataField="@seqPrepStatus"/>
	
							
							<mx:DataGridColumn id="AGE0" headerText="Age" visible="{this.selectedExperiment.@AGE == 'Y' ? true : false}" dataField="@AGE"  />
							<mx:DataGridColumn id="CELLLINE0" headerText="Cell line" dataField="@CELLLINE" visible="{this.selectedExperiment.@CELLLINE == 'Y' ? true : false}" />
							<mx:DataGridColumn id="CELLTYPE0" headerText="Cell Type" dataField="@CELLTYPE" visible="{!this.selectedExperiment.@CELLTYPE == 'Y' ? true : false}" />
							<mx:DataGridColumn id="CLININFO0" headerText="Clinical Info" dataField="@CLININFO" visible="{this.selectedExperiment.@CLININFO == 'Y' ? true : false}" />
							<mx:DataGridColumn id="COMPOUND0" headerText="Compound" dataField="@COMPOUND" visible="{this.selectedExperiment.@COMPOUND == 'Y' ? true : false}" />
							<mx:DataGridColumn id="DISSTATE0" headerText="Disease State" dataField="@DISSTATE" visible="{this.selectedExperiment.@DISSTATE == 'Y' ? true : false}" />
							<mx:DataGridColumn id="DOSE0" headerText="Dose" dataField="@DOSE" visible="{this.selectedExperiment.@DOSE == 'Y' ? true : false}" />
							<mx:DataGridColumn id="GENMOD0" headerText="Genetic Modification" dataField="@GENMOD" visible="{this.selectedExperiment.@GENMOD == 'Y' ? true : false}" />
							<mx:DataGridColumn id="GENOTYPE0" headerText="Genotype" dataField="@GENOTYPE" visible="{this.selectedExperiment.@GENOTYPE == 'Y' ? true : false}" />
							<mx:DataGridColumn id="GROWTHCOND0" headerText="Growth Conditions" dataField="@GROWTHCOND" visible="{this.selectedExperiment.@GROWTHCOND == 'Y' ? true : false}" />
							<mx:DataGridColumn id="INDIV0" headerText="Individual" dataField="@INDIV" visible="{this.selectedExperiment.@INDIV == 'Y' ? true : false}" />
							<mx:DataGridColumn id="ORGPART0" headerText="Organ / Tissue" dataField="@ORGPART" visible="{this.selectedExperiment.@ORGPART == 'Y' ? true : false}" />
							<mx:DataGridColumn id="SEX0" headerText="Sex" dataField="@SEX" visible="{this.selectedExperiment.@SEX == 'Y' ? true : false}" />
							<mx:DataGridColumn id="TEMP0" headerText="Temperature" dataField="@TEMP" visible="{!this.selectedExperiment.@TEMP == 'Y' ? true : false}" />
							<mx:DataGridColumn id="TIME0" headerText="Time Course" dataField="@TIME" visible="{this.selectedExperiment.@TIME == 'Y' ? true : false}" />
							<mx:DataGridColumn id="otherDataColumnConfirm" headerText="{this.selectedExperiment.@otherLabel.toString()}" dataField="@OTHER" visible="{this.selectedExperiment.@OTHER == 'Y' ? true : false}" />
							<mx:DataGridColumn id="treatmentCol" visible="{this.selectedExperiment.@treatment == 'Y' ? true : false}" headerText="Treatment" width="100" dataField="@treatment"/>
							<mx:DataGridColumn id="ccNumberCol" visible="{this.selectedExperiment.@hasCCNumber == 'Y' ? true : false}" headerText="CCNumber" width="100" dataField="@ccNumber"/>
	
							<mx:DataGridColumn id="prepInstructionsCol" headerText="Prep Instructions" width="100" dataField="@prepInstructions"/>
							<mx:DataGridColumn id="descriptionCol" headerText="Description" width="100" dataField="@description"/>
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
				
    			<mx:Canvas label="Billing" id="billingTab" width="100%" height="100%">
    			 <mx:VBox width="100%" height="100%" verticalGap="4"  paddingBottom="0" paddingTop="0" paddingRight="0" paddingLeft="0" id="billingContainer" >
					<mx:AdvancedDataGrid height="100%" width="100%" id="billingADConfirmGrid"  
					displayItemsExpanded="true"  
        			editable="false" 
        			sortExpertMode="true" 
        			sortableColumns="false"
					backgroundAlpha="0" borderStyle="solid" showHeaders="true" 
					fontSize="9" iconFunction="getBillingTreeIcon">
						<mx:dataProvider>   
      						<mx:HierarchicalData source="{billingItems}"/> 
    					</mx:dataProvider> 
        				<mx:columns> 
	        				<mx:AdvancedDataGridColumn headerText="Group" dataField="@labName" editable="false" width="70" wordWrap="false"/>
	        				<mx:AdvancedDataGridColumn headerText="Acct" dataField="@accountName" editable="false" width="100" wordWrap="false" />
	        				<mx:AdvancedDataGridColumn headerText="Period" dataField="@idBillingPeriod" editable="false" width="70"  wordWrap="false"
							  itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingPeriod').DictionaryEntry,'@display', '@value', '@idBillingPeriod')}"/>
	        				<mx:AdvancedDataGridColumn  headerText="Price Category" wordWrap="true" dataField="@category" editable="false" width="200">
				              <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@category}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
	        				</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Description" wordWrap="true" dataField="@description" editable="false" width="200">
				              <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@description}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
	        				</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Notes"  dataField="@notes" editable="false" width="100" wordWrap="true">
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@notes}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Qty" dataField="@qty" editable="false" textAlign="right" width="50" >
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text  textAlign="right" text="{data.@qty}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Unit price" dataField="@unitPrice"  textAlign="right" editable="false" width="65" > 
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text  textAlign="right" text="{data.@unitPrice}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="%" dataField="@percentageDisplay" editable="false" textAlign="right" width="50" wordWrap="false"
	        				  rendererIsEditor="false"
							  itemRenderer="views.renderers.LabelPercentage" />                             
	        				<mx:AdvancedDataGridColumn headerText="Total price" dataField="@totalPriceDisplay" textAlign="right" width="105" editable="false" >
	        				  <mx:itemRenderer>
				                  <mx:Component>
				                  <mx:Text text="{data.@totalPrice}"  textAlign="right" styleName="{data.@other == 'Y' ?'other':'normal'}" />
				                  </mx:Component>
				              </mx:itemRenderer>
							</mx:AdvancedDataGridColumn>
	        				<mx:AdvancedDataGridColumn headerText="Status" dataField="@codeBillingStatus" editable="false" width="70" wordWrap="false"
							  itemRenderer="{views.renderers.DropdownLabelBillingItem.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BillingStatus').DictionaryEntry,'@display', '@value', '@codeBillingStatus')}"/>                 
	        			</mx:columns>
	        		</mx:AdvancedDataGrid>
				</mx:VBox>
    			</mx:Canvas>
				

			</mx:TabNavigator>
            	
        </mx:VBox>      
	
	</mx:VBox>
</mx:VBox>

<mx:states>
	<mx:State name="MicroarrayState">		 
		<mx:AddChild relativeTo="{this.samplesTab}" position="after" >
			<mx:VBox width="100%" height="100%" verticalGap="0" id="hybsConfirmContainer" label="Hybs">
				<mx:HBox width="100%" horizontalGap="2" paddingTop="4">
					<mx:HBox width="100%"  horizontalAlign="right" paddingRight="4">
						<mx:CheckBox id="showCy3LabelingFieldsCheckBox" label="Show Cy3 Labeling columns" click="showCy3LabelCols(showCy3LabelingFieldsCheckBox.selected)"/>
						<mx:CheckBox id="showCy5LabelingFieldsCheckBox" label="Cy5 Labeling" click="showCy5LabelCols(showCy5LabelingFieldsCheckBox.selected)"/>
						<mx:CheckBox id="showHybFieldsCheckBox" label="Hyb"/>
						<mx:CheckBox id="showExtFieldsCheckBox" label="Scan/FE"/>
					</mx:HBox>
				</mx:HBox>
				<mx:DataGrid width="100%" height="100%" id="hybsGridConfirm"  horizontalScrollPolicy="auto" editable="false" dataProvider="{this.selectedExperiment.hybridizations.Hybridization}"  backgroundAlpha="0" borderStyle="solid">
					<mx:columns>
						<mx:DataGridColumn headerText="ID" width="60" dataField="@number"/>
					    <mx:DataGridColumn editable="false" headerText="Cy3 Sample (green)"  width="122" labelFunction="getChannel1SampleName"/>
					    <mx:DataGridColumn editable="false" headerText="ID"  width="60" labelFunction="getChannel1SampleNumber"/>
					    <mx:DataGridColumn id="channel2SampleConfirmColumn" editable="false" headerText="Cy5 Sample (red)"  width="122" labelFunction="getChannel2SampleName"/>
					    <mx:DataGridColumn editable="false" headerText="ID"  width="60" labelFunction="getChannel2SampleNumber"/>
						
						<mx:DataGridColumn id="labelCol1"  visible="false"  headerText="Channel1 Labeling protocol" width="80" dataField="@idLabelingProtocolChannel1"
						                         itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingProtocol').DictionaryEntry, '@display', '@value', '@idLabelingProtocolChannel1')}">                 											
							<mx:headerRenderer > 
							<mx:Component>
								<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy3 Label"/>
								    <mx:Label text="Protocol"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol2"  visible="false" headerText="Channel1 Labeling yield" width="80" dataField="@labelingYieldChannel1">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy3 Label"/>
								    <mx:Label text="Conc."/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol3"  visible="false" headerText="Channel1 Labeling Reaction size" width="80" dataField="@codeLabelingReactionSizeChannel1">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy3 Label"/>
								    <mx:Label text="Reaction size"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol4"  visible="false" headerText="Channel1 Labeling # Reactions" width="80" dataField="@numberOfReactionsChannel1">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy3 Label"/>
								    <mx:Label text="# reactions"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn  id="labelCol5"   visible="false" headerText="Channel1 Labeling Status" width="80" dataField="@labelingStatusChannel1">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy3 Label"/>
								    <mx:Label text="Status"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol6"   visible="false" headerText="Channel2 Labeling protocol"  width="80" dataField="@idLabelingProtocolChannel2"
						                         itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingProtocol').DictionaryEntry, '@display', '@value','@idLabelingProtocolChannel2')}">                 											
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy5 Label"/>
								    <mx:Label text="Protocol"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol7"   visible="false" headerText="Channel2 Labeling yield" width="80" dataField="@labelingYieldChannel2">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy5 Label"/>
								    <mx:Label text="Conc."/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol8"  visible="false" headerText="Channel2 Labeling Reaction size" width="80" dataField="@codeLabelingReactionSizeChannel2">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy5 Label"/>
								    <mx:Label text="Reaction size"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol9"  visible="false"  headerText="Channel2 Labeling # Reactions" width="80" dataField="@numberOfReactionsChannel2">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy5 Label"/>
								    <mx:Label text="# reactions"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn id="labelCol10"   visible="false" headerText="Channel2 Labeling Status" width="80" dataField="@labelingStatusChannel2">
							<mx:headerRenderer>
							<mx:Component>
								<mx:VBox verticalGap="0" horizontalAlign="center" verticalAlign="middle">
								    <mx:Label text="Cy5 Label"/>
								    <mx:Label text="Status"/>
								</mx:VBox>
							</mx:Component>
							</mx:headerRenderer>
						</mx:DataGridColumn>
						
						
						
						<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Hyb Slide barcode" width="70" dataField="@slideBarcode"/>
						<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Coordinate" width="70" dataField="@arrayCoordinateName"/>
						<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Hyb Protocol" width="70" dataField="@idHybProtocol"
						                          itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.HybProtocol').DictionaryEntry, '@display', '@value', '@idHybProtocol')}"/>                 											
						<mx:DataGridColumn visible="{showHybFieldsCheckBox.selected}" headerText="Hyb Status" width="90" dataField="@hybStatus"/>
						
						
						<mx:DataGridColumn visible="{showExtFieldsCheckBox.selected}" headerText="Scan Protocol" width="70" dataField="@idScanProtocol"
						                         itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ScanProtocol').DictionaryEntry, '@display', '@value', '@idScanProtocol')}"/>                 											
						<mx:DataGridColumn visible="{showExtFieldsCheckBox.selected}" headerText="F/E Protocol" width="70" dataField="@idFeatureExtractionProtocol"
						                          itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.FeatureExtractionProtocol').DictionaryEntry, '@display', '@value', '@idFeatureExtractionProtocol')}"/>                 											
						<mx:DataGridColumn visible="{showExtFieldsCheckBox.selected}" headerText="Ext Status" width="90" dataField="@extractionStatus"/>
					     
					     
					     <mx:DataGridColumn headerText="Slide" visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showHybFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"  width="320" dataField="@slideDesignName" />
					     <mx:DataGridColumn headerText="Slide Source"  visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showHybFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"   width="82"   
					                        itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SlideSource').DictionaryEntry, '@display', '@value', '@codeSlideSource')}"/>                 											
						<mx:DataGridColumn headerText="Notes" width="100"  visible="{showCy3LabelingFieldsCheckBox.selected || showCy5LabelingFieldsCheckBox.selected || showExtFieldsCheckBox.selected ? false : true}"   dataField="@notes"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
		</mx:AddChild>
	</mx:State>
	<mx:State name="QCState">		
	</mx:State>
	<mx:State name="SolexaState">
		<mx:AddChild relativeTo="{this.samplesTab}" position="after">
				<mx:VBox  id="lanesConfirmContainer" label="Sequence Lanes"  verticalGap="0" width="100%" height="100%">
						<mx:DataGrid width="100%" height="100%" id="lanesConfirmGrid"  editable="false" dataProvider="{this.selectedExperiment.sequenceLanes.SequenceLane}"  rollOverColor="#C0C0C0" selectionColor="#FFFFB9" horizontalScrollPolicy="auto">
						<mx:columns>
							<mx:DataGridColumn headerText="ID" width="60" dataField="@number"/>
						    <mx:DataGridColumn  headerText="Sample Name"  width="100" labelFunction="getLaneSampleName" editable="false"/>
						    <mx:DataGridColumn  headerText="Sample ID"  width="68" labelFunction="getLaneSampleNumber" editable="false"/>
				            <mx:DataGridColumn  width="150" id="seqRunTypeCol" headerText="Flow Cell Type"  editable="false" dataField="@idSeqRunType" 						             						             
                                    itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry, '@display', '@value', '@idSeqRunType')}"/>                 											
				            <mx:DataGridColumn width="65" id="numberOfSequencingCyclesCol" headerText="# Cycles"   editable="false" dataField="@idNumberSequencingCycles" 						             						             
                                    itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry, '@display', '@value', '@idNumberSequencingCycles')}"/>                 											
							<mx:DataGridColumn  headerText="Status in Workflow" width="120" dataField="@workflowStatus"/>
				            <mx:DataGridColumn  width="65" id="flowCellNumberCol" headerText="Flow Cell #"  editable="false" dataField="@flowCellNumber"/> 	 					             						             
				            <mx:DataGridColumn  width="55" id="flowCellLaneNumber" headerText="Channel"  editable="false" dataField="@flowCellChannelNumber"/> 						             						             
				            <mx:DataGridColumn  width="90" headerText="# Cycles (actual)"  editable="false" dataField="@numberSequencingCyclesActual"> 						             						             
							   <mx:headerRenderer > 
							    <mx:Component>
							    	<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
								        <mx:Label text="# Seq Cycles"/>
								        <mx:Label text="(actual)"/>
					    			</mx:VBox>
							    </mx:Component>
							   </mx:headerRenderer>
						    </mx:DataGridColumn>
				            <mx:DataGridColumn  width="90" headerText="Clusters per Tile"  editable="false" dataField="@clustersPerTile"> 						             						             
							   <mx:headerRenderer > 
							    <mx:Component>
							    	<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
								        <mx:Label text="Clusters per"/>
								        <mx:Label text="Tile"/>
					    			</mx:VBox>
							    </mx:Component>
							   </mx:headerRenderer>
						    </mx:DataGridColumn>
				            <mx:DataGridColumn  width="90" headerText="PhiX Error Rate"  editable="false" dataField="@phiXErrorRate"> 						             						             
							   <mx:headerRenderer > 
							    <mx:Component>
							    	<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
								        <mx:Label text="PhiX"/>
								        <mx:Label text="Error Rate"/>
					    			</mx:VBox>
							    </mx:Component>
							   </mx:headerRenderer>
						    </mx:DataGridColumn>
				            <mx:DataGridColumn  width="90"  headerText="File name"  editable="false" dataField="@fileName"/> 						             						             
							<mx:DataGridColumn  headerText="Last Cycle Status" width="90" dataField="@lastCycleStatus"> 
							   <mx:headerRenderer > 
							    <mx:Component>
							    	<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle">
								        <mx:Label text="Last Cycle"/>
								        <mx:Label text="Status"/>
					    			</mx:VBox>
							    </mx:Component>
							   </mx:headerRenderer>
						    </mx:DataGridColumn>
				            <mx:DataGridColumn width="150" id="genomeBuildAlignTo" headerText="Genome Build (align to)"  editable="false" dataField="@idGenomeBuildAlignTo" 						             						             
                                    itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.GenomeBuild').DictionaryEntry, '@display', '@value', '@idGenomeBuildAlignTo')}"/>                 											
							<mx:DataGridColumn width="150" headerText="Analysis Instructions"   dataField="@analysisInstructions"/>
						</mx:columns> 
					</mx:DataGrid>
					
				</mx:VBox>					        			
		
		</mx:AddChild>
		<mx:AddChild relativeTo="{hbox1}" position="lastChild">
			<mx:CheckBox id="showSeqPrepFieldsCheckBox" label="Illumina Lib Prep" visible="true" click="showHideColumns()"/>
		</mx:AddChild>
		<mx:SetProperty target="{tile1}" name="tileHeight"/>
		<mx:SetProperty target="{tile1}" name="width"/>
		<mx:SetProperty target="{tile1}" name="tileWidth" value="220"/>
	</mx:State>
</mx:states>
	
</mx:VBox>
