<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="Seq application" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:util="views.util.*" 
	 width="100%" height="100%" show="init()" >
	<mx:states>
		<mx:State name="EditState">
			<mx:RemoveChild target="{hbox1}"/>
			<mx:SetProperty name="enabled" value="true"/>
			<mx:SetProperty target="{seqLibTreatmentBox}" name="styleName"/>
		</mx:State>
	</mx:states>
<mx:Script>
	<![CDATA[
		import hci.flex.controls.CheckBox;
		
		import mx.collections.XMLListCollection;
		import mx.controls.RadioButton;
		import mx.controls.Spacer;
		import mx.events.ListEvent;
		
		import views.renderers.CheckBoxIsSelectedChipType;
	
		private var validNumberOfSamples:Boolean = true;
		private var validConcentration:Boolean = true;
		private var isValidRange:Boolean = false;
		private var designComplete:Boolean = false;
		



		public function init():void {
			checkSecurity();
			
			// We don't show seq apps on edit window
			if (this.currentState == "EditState") {
				return;
			}
			
			// Only initialize once.
			if (this.seqAppBox.getChildren().length > 0) {
				return;
			}
			
			// Map the apps by theme
			var themeMap:Array= new Array();
			for each(var item:Object in parentDocument.filteredAppList) {
				var theKey:Object = item.@idApplicationTheme;
				var apps:XMLListCollection = themeMap[theKey];
				if (apps == null) {
					apps = new XMLListCollection();
					themeMap[theKey] = apps;
				}
				apps.addItem(item);
			}
			
			// Organize the sequencing appliction radio buttons by theme.  
			for (var key:Object in themeMap) {
				var theApps:XMLListCollection = themeMap[key];
				
				if (seqAppBox.getChildren().length > 0) {
					var spacer:Spacer = new Spacer();
					spacer.height = 10;
					seqAppBox.addChild(spacer);
				}
				
				
				var header:mx.controls.Label = new mx.controls.Label();
				header.text = parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.ApplicationTheme", key);
				if (header.text != "" && header.text != null) {
					seqAppBox.addChild(header);
				}
				else{
					header.text = "Other";
					seqAppBox.addChild(header);
				}
				
				for each(var app:Object in theApps) {
					var rb:RadioButton = new RadioButton();
					rb.value = app.@value;
					rb.label = app.@application;
					rb.group = radioGroupSeqApp;
					rb.setStyle("paddingLeft", 10);
					rb.addEventListener("click", onSeqAppRadioClick);
					seqAppBox.addChild(rb);
				}

			}
			
			
		}
		
		public function checkSecurity():void {
			if (this.currentState == "EditState") {
				if (parentApplication.hasPermission("canWriteAnyObject")) {
					this.seqLibTreatmentGrid.enabled = true;	
					this.seqLibCheckboxCol.editable = true;
				} else {
					this.seqLibTreatmentGrid.enabled = false;
					this.seqLibCheckboxCol.editable = false;
				}				
			} else {
				this.seqLibTreatmentGrid.enabled = true;
				this.seqLibCheckboxCol.editable = true;

			}
		}
		
		private function onSeqAppRadioClick(event:Object):void {
			pickSeqApp();
		}
	
	 

      	public function checkSeqAppSetupCompleteness():Boolean {
        	var isComplete:Boolean = false;
        	if (parentDocument.isEditState() && (isValidRange || designComplete)) {
        		isComplete = true;
        	} else if (parentDocument.isSolexaState() || parentDocument.isSolexaAmendState() || parentDocument.isAmendState()) {
	        	if (this.radioGroupSeqApp.selectedValue != null && this.radioGroupSeqApp.selectedValue != '' && (isValidRange || designComplete)) {
	        		isComplete = true;
	        	 }
        	} 

			if (this.currentState != "EditState") {
	        	parentDocument.sampleSetupView.enabled = isComplete; 
        	}
        	
    		parentDocument.enableNextButtons();

        	callLater(postSeqAppSetupCompleteness, [isComplete]);
        	
    		return isComplete;
    	    	
        }
        
        private function postSeqAppSetupCompleteness(isComplete:Boolean):void {
	    		
	    	if (!isComplete) {
	        	if (parentDocument.theTab.contains(parentDocument.sampleSetupView)) {
		        	parentDocument.sampleSetupView.enabled = false;
	        	}
	        	parentDocument.confirmView.enabled = false;
    		} else {
    			if (parentDocument.theTab.contains(parentDocument.sampleSetupView)) {
		    		parentDocument.sampleSetupView.checkSampleSetupCompleteness();
		    	}
    		}
        	
        }
        


		private function pickSeqApp():void {
			if (this.radioGroupSeqApp.selectedValue != null) {
				this.seqAppBox.styleName = 'normalBox';
				var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', radioGroupSeqApp.selectedValue);
				if (application != null && application is XMLList) {
					this.parentDocument.applicationName = application[0].@display;
					if(application[0].@display.indexOf("SureSelect") > 0){ //If it is sure select we need to show the library capture id input box
						libraryDesign.visible = true;
					}
					else{
						libraryDesign.visible = false;
					}
					if(application[0].@display.indexOf("Mononucleosome") != -1 || application[0].@display.indexOf("Genomic") != -1){
						insertRanges.visible = true;
					}
					else{
						insertRanges.visible = false;
					}
				} else if (application != null && application is XML) {
					this.parentDocument.applicationName = application.@display;
				}
			} else {
				this.seqAppBox.styleName = 'requiredBox';
				this.parentDocument.applicationName = '';
			}
			
			this.checkSeqAppSetupCompleteness();
			if (!this.parentDocument.isAmendState()) {
				this.parentDocument.sampleSetupView.pickSeqApp();
			}
		}
		
	   	public function selectSeqLibTreatment(event:ListEvent):void {
	   		if (event == null || event.columnIndex == 0) {
	   			return;
	   		}
	   		if (seqLibTreatmentGrid == null || seqLibTreatmentGrid.selectedItem == null) {
	   			return;
	   		}
	   		if (seqLibTreatmentGrid.selectedItem.@isSelected == "true") {
				seqLibTreatmentGrid.selectedItem.@isSelected = "false";
						
			} else {
				seqLibTreatmentGrid.selectedItem.@isSelected = "true";
			}
			
			var count:int = 0;
			parentDocument.seqLibTreatmentsDisplay = "";
			for each (var item:Object in seqLibTreatments) {
				if (item.@isSelected == "true") {
					this.seqLibTreatmentBox.styleName = 'normalBox';
					if (count > 0) {
					   parentDocument.seqLibTreatmentsDisplay += ", ";
					}
					parentDocument.seqLibTreatmentsDisplay += item.@display;
					count++;
				} 
			}
			
			/* Don't make seq lib treatment required for now.
			if (count > 0) {
				this.seqLibTreatmentBox.styleName = 'normalBox';
			} else {
				this.seqLibTreatmentBox.styleName = 'requiredBox';
			}
			*/ 
			
			this.seqLibTreatmentBox.styleName = 'normalBox';

			
			this.checkSeqAppSetupCompleteness();
		}
		
		private function propagateDesign():void{
			designComplete = false;
			isValidRange = false;
			
			if(designID.text != "" || designID.text != null){
				parentDocument.request.@captureLibDesignId = designID.text;
				designComplete = true;
			}
			
			checkSeqAppSetupCompleteness();
		}
		
		private function propagateInsertRange():void{
			
			var pattern:RegExp = /[a-z]/i;
			designComplete = false;
			isValidRange = false;
			
			if(minInsertRange.text == "" || maxInsertRange.text == "" || pattern.test(minInsertRange.text) || pattern.test(maxInsertRange.text))
				isValidRange = false;
			else if((parseInt(minInsertRange.text) < 60 || parseInt(minInsertRange.text) > 100) || (parseInt(maxInsertRange.text) > 100 || parseInt(maxInsertRange.text) < 60))
				isValidRange = false;
			else
			{
				parentDocument.request.@avgInsertSizeFrom = minInsertRange.text;
				parentDocument.request.@avgInsertSizeTo = maxInsertRange.text;
				isValidRange = true;
			}	
			checkSeqAppSetupCompleteness();
		}
			
	]]>
</mx:Script>

  <mx:XMLListCollection id="seqLibTreatments" source="{parentDocument.request.SeqLibTreatmentEntries.SeqLibTreatment}"/>
  <mx:Canvas width="100%" height="100%">
        	
	<mx:VBox width="100%" height="100%" verticalGap="2">
   		<mx:VBox width="100%" height="100%"  paddingTop="2"  verticalGap="20" id="sampleSetupContainer" enabled="true">
		   <mx:HBox width="100%" horizontalGap="0" id="hbox1">
		       <mx:Text text="Select a sequencing application." width="200" id="labelApplication"/>
		       <mx:RadioButtonGroup id = "radioGroupSeqApp">       	
		       </mx:RadioButtonGroup>
		       <mx:VBox height="100%" verticalGap="0" paddingLeft="2" paddingRight="2" paddingBottom="0" paddingTop="0" styleName="requiredBox" id="seqAppBox">
		       </mx:VBox>
		   </mx:HBox>
			<mx:HBox id="libraryDesign" visible="false">
				<mx:Label text="Capture Library Design ID" id="designIDLabel" width="200"/>
				<mx:TextInput id="designID" focusOut="propagateDesign()"/>
			</mx:HBox>
			<mx:HBox id="insertRanges" visible="false">
				<mx:Label text="Insert Range" id="insertRangeLabel" width="200"/>
				<mx:TextInput id="minInsertRange" width="50" focusOut="propagateInsertRange()"/>
				<mx:Text text=" to "/>
				<mx:TextInput id="maxInsertRange" width="50" focusOut="propagateInsertRange()"/>
				<mx:Text text="Insert sizes range from 60bp to 100bp" fontStyle="italic"/>
			</mx:HBox>
		   	 
		   <mx:HBox width="100%" horizontalGap="0" height="100%" visible="false">
		       <mx:Text text="Identify all conditions/instructions that apply to these samples." width="200" id="labelSeqLibTreatment"/>
		       <mx:VBox height="100%"  width="550" verticalGap="0" paddingLeft="2" paddingRight="2" paddingBottom="2" paddingTop="2" styleName="requiredBox" id="seqLibTreatmentBox">
		           <mx:DataGrid id="seqLibTreatmentGrid"   
		           	  dataProvider="{seqLibTreatments}" 
		           	  width="100%" height="100%"
		           	  itemClick="selectSeqLibTreatment(event)"  
		           	  showHeaders="false" verticalGridLines="false"  alternatingItemColors="[#ffffff, #ffffff]" borderStyle="none">
		             <mx:columns>
			           	  <mx:DataGridColumn headerText=" "  
			           	  	id="seqLibCheckboxCol"
			            	width="20" 
			            	editable="true"                        	
			            	dataField="@isSelected" 
			            	editorDataField="selected" sortable="false"
			            	itemRenderer="views.renderers.CheckBoxIsSelectedSeqLibTreatment">
					      </mx:DataGridColumn>
					      
					      <mx:DataGridColumn headerText="" dataField="@seqLibTreatment">		      	
				          </mx:DataGridColumn>
		             	
		             </mx:columns>
		           </mx:DataGrid>
		       </mx:VBox>
		   </mx:HBox>


		</mx:VBox>
		
	</mx:VBox>
	
  </mx:Canvas>


	
</mx:Canvas>
