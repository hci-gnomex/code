<?xml version="1.0" encoding="utf-8"?>
<exp:TabSamplesBase show="{this.init();}"
					label="Samples" width="100%" height="100%"  enabled="false" 
				    xmlns:mx="http://www.adobe.com/2006/mxml" 
				    xmlns:util="views.util.*"
				    xmlns:exp="views.experiment.*"
				    xmlns:renderers="views.renderers.*" 
				    xmlns:grid="views.util.grid.*" >

	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			import hci.flex.controls.Label;
			
			import mx.collections.Grouping;
			import mx.collections.GroupingCollection;
			import mx.collections.GroupingField;
			import mx.collections.IHierarchicalCollectionView;
			import mx.collections.SortField;
			import mx.collections.XMLListCollection;
			import mx.controls.AdvancedDataGrid;
			import mx.controls.Alert;
			import mx.controls.TextInput;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			import mx.validators.NumberValidator;
			import mx.validators.ValidationResult;
			
			import views.renderers.CheckBoxRenderer;
			import views.renderers.ComboBox;
			import views.renderers.ComboBoxWorkflowStatus;
			import views.renderers.GridColumnFillButton;
			import views.renderers.MultiselectRenderer;
			import views.renderers.TextInputSeqPrepByCore;
			import views.renderers.URLRenderer;
			import views.util.AdvancedDataGridColumnWithType;
			import views.util.AnnotationAdvancedDataGridColumn;
			import views.util.CopySampleSheetColumnView;
			import views.util.UploadSampleSheetInstructionsView;
			import views.util.UploadSampleSheetView;
			
			private var saveInstructionToolTipText:String;
			
			public var sampleGroupingCollection:GroupingCollection = null;
			
			[Bindable]
			private var isExternal:Boolean = false;
			
			private var uploadFR:FileReference;
			private var uploadSampleSheetURL:String;
			private var docTypes:FileFilter;
			private var hasColumnNames:Boolean; 
			private var	sampleSheetXML:XML;

			
			override public function getSamplesGrid():AdvancedDataGrid {
				return this.samplesGrid;
			}
			
			
			override protected function getNumPlates():int {
				var numPlates:int = 0;
				if (hasPlates()) {
					numPlates = parentDocument.numIScanPlates;
				}
				return numPlates;
			}
			
			override protected function getNextPlate():int {
				var nextPlate:int = 0;
				if (hasPlates()) {
					for each (var sample:Object in parentDocument.samples) {
						var thisPlate:int = 0;
						if (sample.@name != '') {
							if (sample.@plateName == parentDocument.sampleSetupView.getSequenomPlateName(1)) thisPlate = 1;
							if (sample.@plateName == parentDocument.sampleSetupView.getSequenomPlateName(2)) thisPlate = 2;
							if (sample.@plateName == parentDocument.sampleSetupView.getSequenomPlateName(3)) thisPlate = 3;
							if (sample.@plateName == parentDocument.sampleSetupView.getSequenomPlateName(4)) thisPlate = 4;
						}
						if (thisPlate > nextPlate) {
							nextPlate = thisPlate;
						}
					}
					if (nextPlate < 4) {
						nextPlate = nextPlate + 1;
					} else {
						nextPlate = 0;
					}
				}
				return nextPlate;
			}
			
			override protected function getAddAllAnnotations():Boolean {
				return false;
			}

			
			override public function addSample():Boolean {
				var emptyNode:XML = null;
				var isValid:Boolean = true;
				
				emptyNode = this.getEmptySequenomNode(parentDocument.samples.length);
				
				if (emptyNode != null) {
					parentDocument.samples.addItem(emptyNode);
				}
				
				return isValid;
			}
			
			
			private function getEmptySequenomNode(idx:int):XML {
				var plateName:String = getPlateName(idx);
				var wellName:String = getWellName(idx);
				var sampleId:String = "Sample" + idx;
				var emptyNode:XML = new XML("<Sample " +
					" idSample='" + sampleId + "'" +
					" name='' description='' " +
					" concentration=''" +
					" containerType='" + (parentDocument.request.@containerType == 'PLATE' ? 'Plate' : 'Tube') + "'" +
					" canChangeSampleName='Y'" +	
					" plateName='" + (parentDocument.request.@containerType == 'PLATE' ? plateName : '') + "'" +
					" wellName='" + (parentDocument.request.@containerType == 'PLATE' ? wellName : '') + "'" +
					" idSampleType='" + (parentApplication.submitInternalExperiment() && !this.isEditState ? parentDocument.sampleSetupView.sampleTypeRadioGroup.selectedValue : '')  + "'" +
					"/>");
				return emptyNode;
			}
						
			override public function getPlateName(idx:int):String {
				
				var plateName:String = "";
				var y:int = idx / 96;
				if ( this.isEditState && parentDocument.samples.getItemAt( y*96 ) != null ) {
					plateName = parentDocument.samples.getItemAt( y*96 ).@plateName;
				} else {
					y = y + 1;
					plateName = parentDocument.sampleSetupView.getSequenomPlateName(y);
				}
				return plateName;
			}
			
			
			override protected function deleteSingleSample(sample:Object):Boolean {
				var ind:int = parentDocument.samples.getItemIndex(sample);
				if ( this.hasPlates() && ind >= 0) {
					parentDocument.samples.setItemAt(getEmptySequenomNode(ind),ind);
				} else {
					parentDocument.samples.removeItemAt(parentDocument.samples.getItemIndex(sample));
				}
				return true;
			}
			
			
			private function deleteTheSample():void {
				var idx:int = samplesGrid.selectedIndex;
				deleteSample();
				checkSamplesCompleteness();
				samplesGrid.selectedIndex = idx;
			}
			
			override public function initializeSamplesGrid():void {
				if (parentDocument.requestToClone != null) {
					return;
				}
				
				var numberOfSamples:Number = 0;
				var numberOfSamplesToAdd:Number = 0;
				
				if (parentApplication.submitInternalExperiment() ){
					
					if (parentDocument.isEditState()) {
						numberOfSamples = parentDocument.samples.length > 0 ? new Number(parentDocument.samples.length) : 1;
					} else {
						if (!parentDocument.sampleSetupView.checkSampleSetupCompleteness()) {
							return;
						}
						if ( hasPlates() ) {
							populateSampleList();
							return;
						}
						numberOfSamples = new Number(parentDocument.sampleSetupView.numberOfSamples.text);
					}
					
				} else {
					numberOfSamples = 1;
				}
				
				if (parentDocument.samples.length <= numberOfSamples) {
					numberOfSamplesToAdd = numberOfSamples - parentDocument.samples.length;
					for(var x:int = 0; x < numberOfSamplesToAdd; x++) {
						addSample();
					}
				} else {
					while (parentDocument.samples.length > numberOfSamples) {
						parentDocument.samples.removeItemAt(parentDocument.samples.length - 1);
					}
				}
			}
			
									
			override public function hasPlates():Boolean {
				return parentDocument.request.@containerType == 'PLATE' ;
			}
						
			public function populateSampleList():void {
				var numberOfSamples:int = parentDocument.numIScanPlates*96;
				
				for (var sampleIdx:int = 0; sampleIdx < numberOfSamples; sampleIdx++) {
					
					var emptySample:Object = this.getEmptySequenomNode(sampleIdx);
					var existingSamples:XMLList = parentDocument.samples.source.(@plateName==emptySample.@plateName && @wellName==emptySample.@wellName);
					
					if ( existingSamples== null || existingSamples.length() == 0 ) {
						// If no sample in that plate and well, add empty one
						parentDocument.samples.addItemAt(emptySample, sampleIdx);
					} else if ( existingSamples.length > 1 ) {
						// If somehow we have more than one sample in the same well, we remove the extras
						for ( var ind:int = 1; ind < existingSamples.length; ind ++ ) {
							parentDocument.samples.removeItemAt(parentDocument.samples.getItemIndex(existingSamples[ind]));
						}
					}
				} 
				
				// Remove extra samples
				while (parentDocument.samples.length > numberOfSamples) {
					parentDocument.samples.removeItemAt(parentDocument.samples.length - 1);
				}
			}
			
			override protected function onPromptToClearAllSamples(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					parentDocument.samples.removeAll();
					this.initializeSamplesGrid();
						
					checkSamplesCompleteness();
					this.initializeBarcoding();
				}
			}		
			
			override public function checkSamplesCompleteness():void {
				parentDocument.userWarningsSamples = "";
				
				var completeCount:int = 0;
				var nameCompleteCount:int = 0;
				for each(var sample:Object in parentDocument.samples) {
					if (isEntered(sample, "@name")) {
						nameCompleteCount++;
					}
					completeCount++;
				}
				
				var isComplete:Boolean = false;
				if (parentDocument.samples.length > 0 && completeCount == parentDocument.samples.length) {
					
						if (nameCompleteCount >= new Number(parentDocument.sampleSetupView.numberOfSamples.text)) {
							isComplete = true;
						} else {
							isComplete = false;
						}
					
				} else if (parentDocument.isEditState()) {
					isComplete = true;
				}
								
				parentDocument.confirmView.enabled = isComplete;
				parentDocument.enableNextButtons();
								
				callLater(postSamplesCompleteness, [isComplete]);
			
			}
			
			private function postSamplesCompleteness(isComplete:Boolean):void {
				
				if (!isComplete) {
					
					if (parentDocument.theTab.contains(parentDocument.visibilityView)) {
						parentDocument.visibilityView.enabled = false;					
					}
					if (parentDocument.theTab.contains(parentDocument.confirmView)) {
						parentDocument.confirmView.enabled = false;					
					}
				} 
			
			}
			
			override public function propagateContainerType(containerType:String):void {
				samplesGrid.dataProvider = null;
				var idx:int = 0;
				parentDocument.samples.disableAutoUpdate();
				for each (var sample:Object in parentDocument.samples) {
					sample.@containerType = containerType;
					if (containerType == 'Plate') {
						sample.@plateName = this.getPlateName(idx) ;
						sample.@wellName = this.getWellName(idx);
					} else {
						sample.@plateName = '';
						sample.@wellName = '';
					}
					idx++;
				}
				parentDocument.samples.enableAutoUpdate();
			}
	
			
			override public function initializeBarcoding():void {
				setSamplesGridDataProvider();
								
				// handle the download sample sheet events
				this.samplesGrid.validateNow();
				callLater(this.checkSamplesCompleteness);
			
			}
			
			override public function setShowCCNumber(show:Boolean):void {
				if (showCCNumberCheckbox != null) {
					this.showCCNumberCheckbox.selected = show;
				}
			}
			
			override public function getShowCCNumber():Boolean {
				if (showCCNumberCheckbox != null) {
					return this.showCCNumberCheckbox.selected;
				} else {
					return false;
				}
			}
			
			private function setSamplesGridDataProvider():void {
				this.samplesGrid.validateNow(); // Make sure columns on samples grid are created
				if (hasPlates()) {
					this.samplesGrid.dataProvider = null;
					sampleGroupingCollection = new GroupingCollection();
					sampleGroupingCollection.source = parentDocument.samples;
					var groupCapSeq:Grouping = new Grouping();
					var gfCapSeq:GroupingField = new GroupingField();
					gfCapSeq.name = "@plateName";
					groupCapSeq.fields = [gfCapSeq];
					gfCapSeq.compareFunction = plateSampleCompareFunction;
					sampleGroupingCollection.grouping  = groupCapSeq;
					sampleGroupingCollection.refresh(); 
					this.samplesGrid.dataProvider = sampleGroupingCollection;
										
					this.plateNameCol.visible = true;
				} else {
					this.samplesGrid.sortableColumns = false;
					sampleGroupingCollection = null;
					this.samplesGrid.dataProvider = parentDocument.samples;
										
					this.plateNameCol.visible = false;
					
				}
			}
			
			
			
			private function plateSampleCompareFunction(a:XML, b:XML):int
			{
				if (a.hasOwnProperty("@plateName") && a.hasOwnProperty("@wellName") && b.hasOwnProperty("@plateName") && b.hasOwnProperty("@wellName")) {
					var compVal:int = 0;
					if (a.@plateName == b.@plateName) {
						compVal = compVal = ObjectUtil.numericCompare(a.@wellName.toString().substr(1), b.@wellName.toString().substr(1));
						if (compVal == 0) {
							compVal = ObjectUtil.stringCompare(a.@wellName.toString(), b.@wellName.toString());
						}
					} else {
						compVal = ObjectUtil.stringCompare(a.@plateName.toString(), b.@plateName.toString());
					}
					return compVal;
				} else {
					var aPersistFlag:Number = 0;
					var aPosition:Number = 0;
					if (a.@idSample.toString().indexOf("Sample") > -1) {
						aPosition = a.@idSample.toString().substr(6);
						aPersistFlag = 1;
					} else {
						aPosition = a.@idSample;
					}
					
					var bPersistFlag:Number = 0;
					var bPosition:Number = 0;
					if (b.@idSample.toString().indexOf("Sample") > -1) {
						bPosition = b.@idSample.toString().substr(6);
						bPersistFlag = 1; // non-persistent samples sort after the persistent ones
					} else {
						bPosition = b.@idSample;
					}
					
					if (aPersistFlag == bPersistFlag) {
						return ObjectUtil.numericCompare(aPosition, bPosition);				
					} else {
						return ObjectUtil.numericCompare(aPersistFlag, bPersistFlag);
					}
				}
			}
			
			private function setButtonsVisibility(vis:Boolean):void {
				buttonsContainer2.visible = vis;
				buttonsContainer2.includeInLayout = vis;
			}
			
			override public function showHideColumns():void {
				isExternal = (parentDocument.isEditState() && parentDocument.request.@isExternal == 'Y') || (!parentDocument.isEditState() && !parentApplication.isInternalExperimentSubmission);
				isEditState = parentDocument.isEditState();
				
				showCCNumberCheckbox.visible =  !isExternal;
				showCCNumberCheckbox.includeInLayout =  !isExternal;
				showCCNumberCheckbox.width = isExternal ? 0 : 250;
				
				setButtonsVisibility(true);
				samplesGrid.rowOperationsAllowed = true;
				
				// Don't allow sample editing on edit unless user is admin or experiment is external or experiment is non-submitted dna sq experiment.
				if (isEditState && !parentApplication.isAdminState && !isExternal) {
					setButtonsVisibility(false);
					samplesGrid.rowOperationsAllowed = false;
				}
				
				samplesGrid.addRowEnabled = !this.hasPlates() || parentDocument.isEditState();
				samplesGrid.showRowNumberCol = !this.hasPlates();
				samplesGrid.hasPlates = this.hasPlates();
				
				// Edit columns shown
				wellNameCol.visible = hasPlates() ? true : false;
												
				sampleNumberCol.visible = parentDocument.isEditState();
				
				this.sampleTypeCol.visible = parentDocument.isEditState() || (parentDocument.isSequenomState()&&parentDocument.sampleSetupView.coreToExtractDNACheckBox!=null&&!parentDocument.sampleSetupView.coreToExtractDNACheckBox.selected) ? true : false;		
				this.concentrationCol.visible = parentDocument.isEditState() || (parentDocument.isSequenomState()&&parentDocument.sampleSetupView.coreToExtractDNACheckBox!=null&&!parentDocument.sampleSetupView.coreToExtractDNACheckBox.selected) ? true : false;
				this.qc_260_280Column.visible = parentDocument.isEditState() || (parentDocument.isSequenomState()&&parentDocument.sampleSetupView.coreToExtractDNACheckBox!=null&&!parentDocument.sampleSetupView.coreToExtractDNACheckBox.selected) ? true : false;
				
				if ( parentDocument.isClinicalSequenomState() ) {
					this.sampleNameCol.visible = false;
				}
				
				if (!parentDocument.isEditState()) {
					if (parentDocument.theTab.contains(parentDocument.confirmView)) {
						parentDocument.confirmView.showHideColumns();									
					}
				}
				
			}
			
			override protected function rebuildSamplesGrid():void {
				var grid:AdvancedDataGrid = getSamplesGrid();
				var columns:Array = grid.columns;
				var newColumns:Array = new Array();
				if (grid != null) {
					var found:Boolean = false;
					for (var x:Number = 0; x < columns.length; x++) {
						var dc:AdvancedDataGridColumn = grid.columns[x];
						
						if (dc.dataField == null || dc.dataField.substr(0, 6) != "@ANNOT") {
							newColumns.push(dc);
						}
					}
					addAnnotationProperties(columns, newColumns);
				}
				grid.columns = newColumns;
				grid.validateNow();
			}
			
			private function toggleShowCCNumber():void {
				if (!this.showCCNumberCheckbox.selected) {
					for each(var s:XML in parentDocument.samples) {
						s.@ccNumber = '';
					}
				}
			}
						
			public function textChange(item:String):void {
				var txt:String = item;
				if(txt.length == 30) {
					Alert.show("Maximum allowed limit is 30 characters");					
				}
			}
			
			private function showHideInstructions():void {
				if (parentApplication.isInternalExperimentSubmission) {
					if (textarea1.visible) {
						textarea1.visible = false;
						textarea1.includeInLayout = false;
						instructions.label = "Click for instructions";
						if (saveInstructionToolTipText != null && (instructions.toolTip == '' || instructions.toolTip == null)) {
							instructions.toolTip = this.saveInstructionToolTipText;
						}
					} else {
						textarea1.visible = true;
						textarea1.includeInLayout = true;
						instructions.label = "Click to hide instructions";
						this.saveInstructionToolTipText = instructions.toolTip;
						instructions.toolTip = "";
					}
				}
			}
			

		]]>
	</mx:Script>	
	
	<mx:VBox width="100%" height="100%" verticalGap="2" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
		<mx:HBox width="100%" id="topBox">
			<mx:VBox width="100%" height="88" verticalGap="0" paddingBottom="0" paddingTop="0" id="buttonAndNoteBox">
				<mx:VBox height="100%" width="100%" id="coreFacilityNoteVBox" verticalGap="0" paddingBottom="0" paddingTop="0">
					<mx:Label text="Enter a note for the Core Facility. (optional)"  id="coreFacilityNoteLabel" fontSize="10"/>
					<util:TextAreaWorkaround id="coreFacilityNoteText" text="{parentDocument.request.@corePrepInstructions}" focusOut="parentDocument.request.@corePrepInstructions = coreFacilityNoteText.text" 
											 width ="100%" height="100%"/>
				</mx:VBox>
			</mx:VBox>
			<mx:VBox horizontalAlign="center" visible="{parentApplication.isInternalExperimentSubmission}" includeInLayout="{parentApplication.isInternalExperimentSubmission}" id="instructionVBox">
				<mx:LinkButton id="instructions" icon="@Embed(source='../../assets/information.png')" label="Click for Instructions" click="{showHideInstructions()}"
							   toolTip=""/>
				<mx:TextArea styleName="instructionBox" width="500" wordWrap="true" height="88" id="textarea1" 
							 verticalScrollPolicy="off" horizontalScrollPolicy="off" visible="false" includeInLayout="false">
					<mx:htmlText><![CDATA[Instructions<br>  1.  Mandatory: Fill in the following highlighted fields:  sample name(Max 30 characters), label, and concentration.<br>  2.  Optional: Any annotation characteristic that you selected from the previous screen appears on this screen <br>       as a highlighted column. Please type desired information under the highlighted field with the annotation header.<br>  3.  Optional: Provide a short description of your sample in the non-highlighted description field.<br>  4.  After completing all line items, click the 'Next' button at the bottom of the page to proceed.]]></mx:htmlText>
				</mx:TextArea>
			</mx:VBox>
			
		</mx:HBox>
		<mx:Spacer width="8"/>
		<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle">
			<mx:HBox id="buttonsContainer2" horizontalGap="0" verticalAlign="middle">
				<mx:LinkButton horizontalGap="0" textDecoration="underline"  label="Upload sample sheet" click="uploadSampleSheet();" icon="@Embed(source='../../assets/upload.png')" id="uploadSampleSheetButton" toolTip="Upload sample sheet&#13;(tab delimited txt file)" />
				<mx:LinkButton  horizontalGap="0" textDecoration="underline" id="downloadButton" label="Download sample sheet" click="{downloadSampleSheet()}"   color="#0000FF" icon="@Embed(source='../../assets/download.png')"/>
				<mx:LinkButton  horizontalGap="0" textDecoration="underline" id="uploadHintLink" icon="@Embed(source='../../assets/information.png')" visible="{uploadSampleSheetButton.visible}" includeInLayout="{uploadSampleSheetButton.visible}"
								label="Sample sheet help" 
								click="PopUpManager.centerPopUp(PopUpManager.createPopUp(this, UploadSampleSheetInstructionsView, true));"
								toolTip=" 1.  Download the sample sheet or create your own table&#13;       in a program like Excel.&#13; 2.  Fill in the table for all the samples.&#13; 3.  Save the file as a tab-delimited txt file.&#13; 4.  Click 'Upload sample sheet' and select the file you created."/>
				<mx:Spacer width="1"/>
				<mx:VRule height="20"/>
			</mx:HBox>
			
			<mx:Spacer width="4"/>
			
			<mx:CheckBox id="showCCNumberCheckbox"
						 selected="false"
						 click="toggleShowCCNumber()"  
						 visible="{parentApplication.isInternalExperimentSubmission &amp;&amp; parentApplication.isBSTLinkageSupported &amp;&amp; currentState != 'CapSeqState'}"
						 includeInLayout="{parentApplication.isInternalExperimentSubmission &amp;&amp; parentApplication.isBSTLinkageSupported  &amp;&amp; currentState != 'CapSeqState'}" 
						 toolTip="Link samples to itBioPath using CC Number"
						 label="Enter CC Numbers" />
		</mx:HBox>

		<grid:CopyPasteSampleGrid width="100%" height="100%" id="samplesGrid"  
								  editable="true"
								  itemFocusOut="checkSamplesCompleteness()" 
								  deleteRowFunction="deleteTheSample"
								  addRowEnabled="{!this.hasPlates()||parentDocument.isEditState()}"
								  addRowFunction="addSample"
								  clearAllFunction="promptToClearAllSamples"
								  showRowNumberCol="{!this.hasPlates()}"
								  hasPlates="{this.hasPlates()}">
			<grid:columns>
				<mx:AdvancedDataGridColumn id="plateNameCol" headerText="Plate" dataField="@plateName" editable="false" visible="true" width="60" labelFunction="groupNameLabelFunction" />
				<mx:AdvancedDataGridColumn id="wellNameCol" visible="false" editable="false" headerText="Well"  width="40" resizable="false" dataField="@wellName"/>
				<mx:AdvancedDataGridColumn id="sampleNumberCol" headerText="ID" width="80" visible="true"  dataField="@number"  editable="false"/>        
				<mx:AdvancedDataGridColumn headerText="Sample Name" width="100" editorDataField="text" dataField="@name" rendererIsEditor="false"
										   id="sampleNameCol"
										   editable="true" showDataTips="true" dataTipField="Please enter maximum of 30 Characters"
										   itemRenderer="{hci.flex.controls.Label.create('@name')}" >
					<mx:itemEditor>
						<mx:Component id ="sampleNameTextField">
							<mx:TextInput  maxChars="30" change="outerDocument.textChange(this.text)"/>
						</mx:Component>
					</mx:itemEditor> 
					
				</mx:AdvancedDataGridColumn>  

				<mx:AdvancedDataGridColumn headerText="Conc." id="concentrationCol" 
										   visible="{parentApplication.isInternalExperimentSubmission}"  width="72" dataField="@concentration" rendererIsEditor="false"
										   itemRenderer="{hci.flex.controls.Label.create('@concentration')}"                 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSampleConcentration(), '')}" editorDataField="value" />
				<mx:AdvancedDataGridColumn id="qc_260_280Column"
										   editable="{parentApplication.hasPermission('canWriteAnyObject')}" 
										   headerText="QC 260/280" width="80" 
										   dataField="@qual260nmTo280nmRatio" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value"/>
				<mx:AdvancedDataGridColumn id="ccNumber" headerText="CC Number" dataField="@ccNumber" editable="true" 
										   visible="{showCCNumberCheckbox.visible &amp;&amp; showCCNumberCheckbox.selected &amp;&amp; !parentDocument.isSequencingState() ? true : false}"
										   width="76"
										   itemRenderer="{hci.flex.controls.Label.createCustom('@ccNumber', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
										   itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.TextInput.create('@ccNumber').newInstance(), '')}" editorDataField="value"/>
				
				<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sampleTypeCol"  headerText="Sample Type" visible="true" width="180"   dataField="@idSampleType" 
													 editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
													 itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType', false, true)}"                 
													 itemEditor="{views.renderers.GridColumnFillButton.create(ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType', '@canChangeSampleType', true).newInstance(), '')}"/>
				
				
				
			</grid:columns>
		</grid:CopyPasteSampleGrid>

	</mx:VBox>
	
	<exp:states>
		<mx:State name="ClinicalSequenomState" >
			<mx:SetProperty target="{showCCNumberCheckbox}" name="selected" value="true"/>
			<mx:SetProperty target="{showCCNumberCheckbox}" name="enabled" value="false"/>
		</mx:State>
	</exp:states>

</exp:TabSamplesBase>
