<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas  label="Seq Setup" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"  enabled="false">
	<mx:states>
		<mx:State name="BarcodeState">
			<mx:SetProperty target="{label10}" name="text">
				<mx:value>(2) Select the desired number of sequencing cycles.</mx:value>
			</mx:SetProperty>
			<mx:SetProperty target="{label11}" name="text" value="(3) Do you want the sequence data to be aligned?"/>
			<mx:SetProperty target="{label10}" name="width" value="340"/>
			<mx:SetProperty target="{label11}" name="width" value="340"/>			
			<mx:AddChild relativeTo="{hbox1}" position="firstChild">
				<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle">
					<mx:Text text="(1) Select the number of samples with index tags that you would like to have combined into a single sequencing lane." width="340"/>
					<mx:NumericStepper id="numberSamplesPerChannel" minimum="0" stepSize="1" maximum="{this.maxSamplesPerChannel}">
						<mx:change>pickBarcodeScheme();parentDocument.samplesView.initializeSamplesGrid();this.checkSeqSetup1Completeness();</mx:change>
					</mx:NumericStepper>
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
	</mx:states>
<mx:Script>
	<![CDATA[
		import mx.collections.Sort;
		import mx.collections.XMLListCollection;
		
		private var barcodes:XMLListCollection = null;
	
		[Bindable]
		private var maxSamplesPerChannel:int = 2;
		
		private var barcodesSort:Sort = null;
		
       	public function propagateSeqRunType():void {

			var idSeqRunType:Object = ''; 
			if (parentDocument.isSolexaState()) {
				idSeqRunType = this.getIdSeqRunTypeSelected();				
				
				for each (var sample:Object in parentDocument.samples) {
					sample.@idSeqRunType = idSeqRunType;
				}
				for each (var lane:Object in parentDocument.lanes) {
					lane.@idSeqRunType = idSeqRunType;
				}
				callLater(parentDocument.samplesView.checkSamplesCompleteness);
				
			}
		}  
       	public function propagateGenomeBuild():void {
			for each (var sample:Object in parentDocument.samples) {
				if (this.genomeBuildCombo.selectedItem != null) {
					if(!alignCheckBox.selected) {
						sample.@idGenomeBuildAlignTo = "";
					} else {
						sample.@idGenomeBuildAlignTo = this.genomeBuildCombo.selectedItem.@value;						
					}
				}
			} 
			for each (var lane:Object in parentDocument.lanes) {
				if (this.genomeBuildCombo.selectedItem != null) {
					if(!alignCheckBox.selected) {
						lane.@idGenomeBuildAlignTo = "";
					} else {
						lane.@idGenomeBuildAlignTo = this.genomeBuildCombo.selectedItem.@value;						
					}					
				}
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}

       	public function propagateNumberSequencingCycles():void {
			for each (var sample:Object in parentDocument.samples) {
				if (this.numberSequencingCyclesRadioGroup.selectedValue != null) {
					
					sample.@idNumberSequencingCycles = getIdNumberSequencingCyclesSelected();				
				} else {
					sample.@idNumberSequencingCycles = '';
				}
			}
			for each (var lane:Object in parentDocument.lanes) {
				if (this.numberSequencingCyclesRadioGroup.selectedValue != null) {
					lane.@idNumberSequencingCycles = getIdNumberSequencingCyclesSelected();
				} else {
					lane.@idNumberSequencingCycles = '';
				}
			}
			callLater(parentDocument.samplesView.checkSamplesCompleteness);
		}
		
		public function getIdNumberSequencingCyclesSelected():String {
			var idNumberSequencingCycles:String = '';
			if (this.numberSequencingCyclesRadioGroup.selectedValue != null && this.numberSequencingCyclesRadioGroup.selectedValue != '') {
				for each(var item:Object in parentDocument.filteredNumberSequencingCycleAllowedList) {
					if (item.@value == this.numberSequencingCyclesRadioGroup.selectedValue) {
						idNumberSequencingCycles = item.@idNumberSequencingCycles;
						break;
					}
				}
			}
			return idNumberSequencingCycles;
		}
		public function getIdSeqRunTypeSelected():String {
			var idSeqRunType:String = '';
			if (this.numberSequencingCyclesRadioGroup.selectedValue != null && this.numberSequencingCyclesRadioGroup.selectedValue != '') {
				for each(var item:Object in parentDocument.filteredNumberSequencingCycleAllowedList) {
					if (item.@value == this.numberSequencingCyclesRadioGroup.selectedValue) {
						idSeqRunType = item.@idSeqRunType;
						break;
					}
				}
			}
			return idSeqRunType;
		}
		
		
		public function selectDefaultGenomeBuild():void {
			if (this.genomeBuildCombo.dataProvider.length > 1) {
				for each(var genomeBuild:Object in this.genomeBuildCombo.dataProvider) {
					if (genomeBuild.@isLatestBuild != null && genomeBuild.@isLatestBuild == 'Y') {
						this.genomeBuildCombo.selectedItem = genomeBuild;
						propagateGenomeBuild();
						break;
					}
				}
			}
		}
	    
	    public function checkSeqSetup1Completeness():Boolean {
        	var isComplete:Boolean = false;
        	if (parentDocument.isEditState()) {
        		isComplete = true;
        	}else if (parentDocument.isSolexaState()) {
	        	if (this.numberSequencingCyclesRadioGroup.selectedValue != null && this.numberSequencingCyclesRadioGroup.selectedValue != '') {
	        	
	        		if (this.currentState == 'BarcodeState') {
						if (this.numberSamplesPerChannel.value > 0 && this.barcodes.length > 0) {
							isComplete = true;							
						}        			
	        		} else {
		        		isComplete = true;
	        			
	        		}
	        	    
	        	 }
        	
        	} 
        	
        	     
        	
    		parentDocument.samplesView.enabled = isComplete; 
    			
			if (parentDocument.theTab.contains(parentDocument.annotationView)) {
				parentDocument.annotationView.enabled = isComplete;        			
	    	}
    		parentDocument.enableNextButtons();

        	callLater(postSeqSetup1Completeness, [isComplete]);
        	
    		return isComplete;
    	    	
        }
        
        private function postSeqSetup1Completeness(isComplete:Boolean):void {
	    		
	    	if (!isComplete) {
	        	parentDocument.confirmView.enabled = false;
    		} else {
    			parentDocument.samplesView.checkSamplesCompleteness();
    		}
        	
        }
        
        private function initializeBarcodes():void {
        	barcodes = new XMLListCollection();

        	var bestFitBarcodeCount:int = 99;
        	if (this.currentState == 'BarcodeState') {
	        	for each(var barcodeScheme:Object in parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.OligoBarcodeScheme').DictionaryEntry) {
    	    		// Only use scheme if it is allowed for this request category
    	    		var keepScheme:Boolean = false;
    	    		for each (var x:XML in parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.OligoBarcodeSchemeAllowed').DictionaryEntry.(@value != '' && @idOligoBarcodeScheme == barcodeScheme.@idOligoBarcodeScheme)) {
    	    			if (x.@codeRequestCategory == parentDocument.getRequestCategory().@codeRequestCategory.toString()) {
    	    				keepScheme = true;
    	    				break;
    	    			}
    	    		}
    	    		if (!keepScheme) {
    	    			continue;
    	    		}
    	    		
    	    		
    	    		var theBarcodes:XMLListCollection = new XMLListCollection(parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.OligoBarcode').DictionaryEntry.(@value != '' && @isActive != 'N' && @idOligoBarcodeScheme == barcodeScheme.@value));
    	    		if (this.numberSamplesPerChannel.value <= theBarcodes.length) {
    	    		   	if (theBarcodes.length < bestFitBarcodeCount) {
    	    		   		// Sort barcodes by sortOrder
    	    		   		barcodesSort = new Sort();
	        				barcodesSort.compareFunction = this.sortBarcodes;
	        				theBarcodes.sort = barcodesSort;
	        				theBarcodes.refresh();
    	    		   		
    	    		   		barcodes = theBarcodes;
    	    		   		bestFitBarcodeCount = theBarcodes.length;
    	    		   	}
    	    		}
        		}
        		if (barcodes.length == 0) {
        			mx.controls.Alert.show("Unable to initialize barcodes.", "Error");
        		}
        	} else {
        		barcodes = new XMLListCollection();
        	}
        	
        }
        
        private function sortBarcodes(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var order1:int = obj1.@sortOrder;
				var order2:int = obj2.@sortOrder;
				
				if (obj1.@value == '') {
					return -1;
				} else if (obj2.@value == '') {
					return 1;
				} else {
					if (order1 < order2) {
						return -1;
					} else if (order1 > order2) {
						return 1;
					} else {
						return 0;
					}
				}
			}			
		}			

        
        public function pickBarcodeScheme():void {
			if (parentApplication.submitInternalExperiment()) {
				if (parentDocument.sampleSetupView.radioYesBarcoding.selected || 
					((parentDocument.sampleSetupView.currentState == "SolexaSetupPreppedState" ||  parentDocument.sampleSetupView.currentState == "SolexaAmendPreppedState")&& parentDocument.sampleSetupView.radioYesCustomBarcoding.selected)) {
					currentState = 'BarcodeState';
					for each(var barcodeScheme:Object in parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.OligoBarcodeScheme').DictionaryEntry) {
						var theBarcodes:XMLListCollection = new XMLListCollection(parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.OligoBarcode').DictionaryEntry.(@value != '' && @isActive != 'N' && @idOligoBarcodeScheme == barcodeScheme.@value));
						if (this.numberSamplesPerChannel.value <= theBarcodes.length) {
							if (theBarcodes.length > this.maxSamplesPerChannel) {
								this.maxSamplesPerChannel = theBarcodes.length;
							}
						}
					}
				} else {
					currentState = '';
				}
        	} else {
        		currentState = '';
        	}
        	this.initializeBarcodes();
        }
        public function propagateBarcode():void {
        	if (parentDocument == null || parentDocument.currentState == "SolexaLaneAmendState" || parentDocument.isEditState()) {
        		return;
        	}
       		var x:int = 0;
       		var multiplexGroupNumber:int = 1;
			for each (var sample:Object in parentDocument.samples) {
				if (this.currentState == "BarcodeState" && this.barcodes.length > 0) {
					if (x == this.numberSamplesPerChannel.value) {
						x = 0;
						multiplexGroupNumber++;
					}
					if (parentDocument.showSampleMultiplexGroup()) {
						sample.@multiplexGroupNumber = multiplexGroupNumber;
					} else {
						sample.@multiplexGroupNumber = '';
					}
					x++;
				} else {
					sample.@idOligoBarcode = '';
					sample.@multiplexGroupNumber = '';
					sample.@barcodeSequence = '';
				}
			} 
			if (parentDocument.samplesView.sampleGroupingCollection != null) {
				parentDocument.samplesView.sampleGroupingCollection.refresh();
				parentDocument.samplesView.samplesGrid.validateNow();
			}
        	
        }
        


        private function pickNumberSequencingCycles():void {
        	if (this.numberSequencingCyclesRadioGroup.selectedValue != null && this.numberSequencingCyclesRadioGroup.selectedValue != '') {
        		this.numberSequencingCyclesBox.styleName = "normalBox";
        	} else {
        		this.numberSequencingCyclesBox.styleName = "requiredBox";
        	}
			parentDocument.samplePrepMethodList.refresh();
			if (!parentDocument.isAmendState()) {
				parentDocument.samplesView.initializeSamplesGrid();
			}
   		    this.propagateNumberSequencingCycles();				
			this.propagateSeqRunType();			
			this.checkSeqSetup1Completeness();
        }

		
	]]>
</mx:Script>   
 

			
	<mx:VBox width="100%" id="hbox1" height="100%" verticalGap="12">
			<mx:HBox id="numberOfCyclesContainer" width="100%" horizontalGap="0">
				<mx:Label text="(1) Select the desired number of sequencing cycles." width="314"  id="label10"/>
				<mx:VBox verticalGap="0" styleName="requiredBox" id="numberSequencingCyclesBox" width="100%">
				    <mx:RadioButtonGroup id="numberSequencingCyclesRadioGroup"/>
						<mx:Repeater id="numberSequencingCyclesRepeater" dataProvider="{parentDocument.filteredNumberSequencingCycleAllowedList}"> 
						    <mx:HBox verticalAlign="middle" width="100%">
						    	<mx:RadioButton  label="{numberSequencingCyclesRepeater.currentItem.@display}" 
						    		paddingLeft="0" paddingRight="1"
						    		value="{numberSequencingCyclesRepeater.currentItem.@value}"
						    	    groupName="numberSequencingCyclesRadioGroup"
					    			click="{pickNumberSequencingCycles()}" width="190"/>
					    		<mx:Text  text="{numberSequencingCyclesRepeater.currentItem.@notes}" width="100%"  fontSize="9"/>
				    </mx:HBox>
	  					</mx:Repeater>
				    	
				</mx:VBox>
			</mx:HBox>
			<mx:HBox id="numberOfCyclesContainer0" width="100%" horizontalGap="0">
				<mx:Label text="(2) Do you want the sequence data to be aligned?" width="314"  id="label11"/>
				<mx:VBox width="100%" id="alignMoreContainer" paddingRight="4">
					<mx:HBox width="100%" horizontalGap="2">
						<mx:CheckBox id="alignCheckBox" label="Yes, align to genome build" click="{if (!alignCheckBox.selected) {genomeBuildCombo.selectedIndex = 0;};this.checkSeqSetup1Completeness();}" selected="true"/>
						<mx:ComboBox labelField="@display" id="genomeBuildCombo" change="this.propagateGenomeBuild();this.checkSeqSetup1Completeness();" width="300" dataProvider="{parentDocument.filteredGenomeBuildList}">							
						  	</mx:ComboBox>                			
					</mx:HBox>
						<mx:HBox width="100%" horizontalGap="0">
						    <mx:Spacer width="20"/>
						</mx:HBox>
				</mx:VBox> 
			</mx:HBox>
			<!--<mx:HBox id="coreInstructionsBox" width="100%" horizontalGap="0" height="100%" paddingRight="5" paddingBottom="5">
				<mx:Text text="{'(3) Provide any special instructions (libraray prep, etc.) for the ' + parentApplication.getProperty(parentApplication.PROPERTY_CORE_FACILITY_NAME) + '.'}" width="314"  id="label12"/>
				<mx:TextArea id="prepInstructions" width="100%" focusOut="this.propagatePrepInstructions()" maxChars="2000" height="100%"/>
			</mx:HBox>
			<mx:HBox id="analysisInstructionsBox" width="100%" horizontalGap="0" height="100%" paddingRight="5" paddingBottom="5">
				<mx:Text text="(4) Provide any special analysis instructions for bionformatics." width="314"  id="text1"/>
				<mx:TextArea id="analysisInstructions" width="100%" focusOut="this.propagateAnalysisInstructions()" maxChars="2000" height="100%"/>
			</mx:HBox>-->
		
	</mx:VBox>
</mx:Canvas>
