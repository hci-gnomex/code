<?xml version="1.0" encoding="utf-8"?>
<mx:VBox label="Advanced Search"  
	xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:views="views.*"
	paddingBottom="6" paddingTop="8" paddingLeft="8" paddingRight="8"
	width="100%" height="100%"  creationPolicy="all">


  <mx:HTTPService  
    id="searchGNomEx" 
    url="SearchIndex.gx"
    destination="searchGNomEx"
    resultFormat="e4x"
    result="onSearchIndex(event)"
	fault="parentApplication.onFailHttpRequest('Failed to search index', event)"
    method="POST"
    useProxy="false">
    <mx:request>
            <listKind>SearchList</listKind>
            <matchAnyTerm>{matchAnyTermRadio.selected == true ? "Y" : "N"}</matchAnyTerm>
            <matchAllTerms>{matchAllTermsRadio.selected == true ? "Y" : "N"}</matchAllTerms>
            <text1>{text1.text}</text1>
            <text2>{text2.text}</text2>
            <text3>{text3.text}</text3>
            <text4>{text4.text}</text4>
            <idLab>{labCombo.selectedItem.@idLab}</idLab>
            <idOrganism>{organismCombo.selectedItem.@value}</idOrganism>
            <idSampleType>{sampleTypeCombo.selectedItem.@value}</idSampleType>
            <codeRequestCategory>{requestCategoryCombo.selectedItem.@value}</codeRequestCategory>
            <searchOrganismOnSlideProduct>{searchOrganismOnSlideProductCheck.selected == true ? "Y" : "N" }</searchOrganismOnSlideProduct>
            <searchOrganismOnSample>{searchOrganismOnSampleCheck.selected == true ? "Y" : "N" }</searchOrganismOnSample>
            <codeMicroarrayCategory>{microarrayCategoryCombo.selectedItem.@value}</codeMicroarrayCategory>
            <idSampleSource>{sampleSourceCombo.selectedItem.@value}</idSampleSource>
            <idSlideProduct>{microarrayCombo.selectedItem.@idSlideProduct}</idSlideProduct>
            <idAnalysisType>{analysisTypeCombo.selectedItem.@value}</idAnalysisType>
            <idAnalysisProtocol>{analysisProtocolCombo.selectedItem.@value}</idAnalysisProtocol>
            <experimentDesignConcatCodes>{experimentDesignCodes}</experimentDesignConcatCodes>
            <experimentFactorConcatCodes>{experimentFactorCodes}</experimentFactorConcatCodes>
            <lab>{labCombo.selectedItem.@name}</lab>
            <organism>{organismCombo.selectedItem.@organism}</organism>
            <slideProduct>{microarrayCombo.selectedItem.@name}</slideProduct>
            <microarrayCategory>{microarrayCategoryCombo.selectedItem.@display}</microarrayCategory>
            <requestCategory>{requestCategoryCombo.selectedItem.@display}</requestCategory>
            <sampleSource>{sampleSourceCombo.selectedItem.@display}</sampleSource>
            <sampleType>{sampleTypeCombo.selectedItem.@display}</sampleType>
            <analysisType>{analysisTypeCombo.selectedItem.@display}</analysisType>
            <analysisProtocol>{analysisProtocolCombo.selectedItem.@display}</analysisProtocol>
            <searchPublicProjects>{includePublicProjectsCheckBox.selected == true ? "Y" : "N"}</searchPublicProjects>
            <showCategory>N</showCategory>
            <isExperimentOnlySearch>{currentState == "ExperimentOnlySearchState" ? "Y" : "N"}</isExperimentOnlySearch>
            <isAnalysisOnlySearch>{currentState == "AnalysisOnlySearchState" ? "Y" : "N"}</isAnalysisOnlySearch>
    </mx:request>
    </mx:HTTPService >
    
    <mx:Script> 
        <![CDATA[
        import mx.events.ListEvent;
        import mx.rpc.events.FaultEvent;           
        import mx.rpc.events.ResultEvent;   
        import mx.controls.Alert;
        import mx.events.CollectionEvent;
        
        [Bindable]
        private var experimentDesignCodes:String = new String();
        [Bindable]
        private var experimentFactorCodes:String = new String();
        
        [Bindable]
        private var myXMLString:String = "";
        
       public function checkSecurity():void {
       	if (parentApplication.hasPermission("canAccessAnyObject") ||
       	    parentApplication.isGuestMode()) {
       		this.includePublicProjectsCheckBox.visible = false;    	
       	} else {
       		this.includePublicProjectsCheckBox.visible = true;
       	}
       }


       public function initializeData():void {
       	parentApplication.filteredSlideProductList.filterFunction = filterSlideProduct;
       	parentApplication.filteredSlideProductList.refresh();
       	microarrayCombo.dataProvider = parentApplication.filteredSlideProductList;
       	
       	microarrayCategoryCombo.dataProvider     = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.MicroarrayCategory');
       	organismCombo.dataProvider               = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.Organism');
       	sampleSourceCombo.dataProvider           = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SampleSource');
       	requestCategoryCombo.dataProvider        = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.RequestCategory');
       	sampleTypeCombo.dataProvider             = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.SampleType');
       	analysisTypeCombo.dataProvider           = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.AnalysisType');
       	analysisProtocolCombo.dataProvider       = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.AnalysisProtocol');

		parentApplication.experimentDesignList.addEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingExperimentDesignChange);
		parentApplication.experimentFactorList.addEventListener(CollectionEvent.COLLECTION_CHANGE, underlyingExperimentFactorChange);			
       
       }
		private function underlyingExperimentDesignChange(event:CollectionEvent):void {
			scopeSearch();
		}
		private function underlyingExperimentFactorChange(event:CollectionEvent):void {
			scopeSearch();
		}
       
        private function filterSlideProduct(item:Object):Boolean {
        	if (item.@idSlideProduct == null || item.@idSlideProduct == "") {
        		return true;
        	}
			var doesMatchRequestCategoryVendor:Boolean = true;
        	if (requestCategoryCombo.selectedItem != null && 
        	    requestCategoryCombo.selectedItem.@value != '') {
        		doesMatchRequestCategoryVendor = false;
				var rCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', requestCategoryCombo.selectedItem.@value);
        		if (item.@idVendor == rCategory.@idVendor) {
        			doesMatchRequestCategoryVendor = true;        			
        		}
        	}       	
        	
        	var doesMatchOrganism:Boolean = true;
        	if (organismCombo.selectedItem != null && 
        	    organismCombo.selectedItem.@value != null  &&
        	    organismCombo.selectedItem.@value != "") {
        		if (item.@idOrganism == organismCombo.selectedItem.@idOrganism) {
        			doesMatchOrganism = true;
        		} else {
        			doesMatchOrganism = false;
        		}
        	}
        	var doesMatchExperimentCategory:Boolean = true;
        	if (microarrayCategoryCombo.selectedItem != null && 
        	    microarrayCategoryCombo.selectedItem.@value != null &&
        	    microarrayCategoryCombo.selectedItem.@value != "") {
        		doesMatchExperimentCategory = false;
        		var categoriesForSlideProduct:XMLList  = item.microarrayCategories.MicroarrayCategory;
        		for(var x:Number = 0; x < categoriesForSlideProduct.length(); x++) {
        			if (categoriesForSlideProduct[x].@codeMicroarrayCategory == microarrayCategoryCombo.selectedItem.@value) {
        				doesMatchExperimentCategory = true;
        				break;
        			}
        		}
        	}
        	var doesMatchGroup:Boolean = true;
        	if (labCombo.selectedItem != null && labCombo.selectedItem.@idLab != "") {
        		if (item.@isCustom == "Y" && item.@idLab == labCombo.selectedItem.@idLab) {
        			doesMatchGroup = true;
        		} else {
        			doesMatchGroup = false;
        		}
        	}
        	
        	return doesMatchRequestCategoryVendor && doesMatchOrganism && doesMatchExperimentCategory && doesMatchGroup;
        }  
        public function callSearchIndex():void {
			var codeDesignList:XMLList = parentApplication.getExperimentDesignList.lastResult.ExperimentDesign;     			
			experimentDesignCodes = new String(); 
        	for(var i:Number = 0; i < codeDesignList.length(); i++) {
        		if (codeDesignList[i].@isSelected != null && codeDesignList[i].@isSelected.toString() == "true") {
            		experimentDesignCodes = experimentDesignCodes + codeDesignList[i].@codeExperimentDesign + ":";
          		}
            } 
            
            var codeFactorList:XMLList = parentApplication.getExperimentFactorList.lastResult.ExperimentFactor;     			
			experimentFactorCodes = new String(); 
        	for(var i1:Number = 0; i1 < codeFactorList.length(); i1++) {
        		if (codeFactorList[i1].@isSelected != null && codeFactorList[i1].@isSelected.toString() == "true") {
            		experimentFactorCodes = experimentFactorCodes + codeFactorList[i1].@codeExperimentFactor + ":";
          		}
            } 
            
            //var codeFactorList:XMLList = parentApplication.getExperimentFactorList.lastResult.ExperimentFactor;    
            //myXMLString = codeFactorList.toXMLString();
            //trace(myXMLString.length);
            //trace(myXMLString);
        	searchGNomEx.send(); 
        }
        
        private function onSearchIndex(event:ResultEvent): void {        	
        	parentDocument.searchViews.selectedChild = parentDocument.searchResultsGridView;
        	parentDocument.onViewSwitch();
        	parentDocument.setResultsCount();
        	
        	// Expansion takes forever... comment out for now.
        	//callLater(parentDocument.expandAllNodes);
        }
        

		public function clearForm():void {
			this.text1.text = "";
			this.text2.text = "";
			this.text3.text = "";
			this.text4.text = "";
			this.labCombo.selectedIndex = 0;
			this.sampleSourceCombo.selectedIndex = 0;
			this.organismCombo.selectedIndex = 0;
			this.microarrayCategoryCombo.selectedIndex = 0;
			this.microarrayCombo.selectedIndex = 0;
			this.requestCategoryCombo.selectedIndex = 0;
			this.sampleTypeCombo.selectedIndex = 0;
			this.analysisProtocolCombo.selectedIndex = 0;
			this.analysisTypeCombo.selectedIndex = 0;
			this.searchOrganismOnSampleCheck.selected = false;
			this.searchOrganismOnSlideProductCheck.selected = false;
			
			parentApplication.filteredSlideProductList.refresh();
			
			for each (var item:Object in parentApplication.experimentDesignList) {
				item.@isSelected = "false";
			}
			this.experimentDesignGrid.invalidateDisplayList();
			this.experimentDesignGrid.invalidateList();
			
			for each (var item1:Object in parentApplication.experimentFactorList) {
				item1.@isSelected = "false";
			}
			this.experimentFactorGrid.invalidateDisplayList();
			this.experimentFactorGrid.invalidateList();
			
			scopeSearch();
		}
		
		private function toggleExperimentDesignCheck(event:ListEvent):void {
			if (event.columnIndex == 0) {
   				return;
   			}
			if (experimentDesignGrid.selectedItem.@isSelected == "true") {
				experimentDesignGrid.selectedItem.@isSelected = "false";
			} else {
				experimentDesignGrid.selectedItem.@isSelected = "true";
			}
			scopeSearch();
		}
		private function toggleExperimentFactorCheck(event:ListEvent):void {
			if (event.columnIndex == 0) {
   				return;
   			}
			if (experimentFactorGrid.selectedItem.@isSelected == "true") {
				experimentFactorGrid.selectedItem.@isSelected = "false";
			} else {
				experimentFactorGrid.selectedItem.@isSelected = "true";
			}
			scopeSearch();
		}
                
        private function scopeSearch():void {
        
        	var hasExperimentDesignCodes:Boolean = false;
        	for each (var entry:Object in parentApplication.getExperimentDesignList.lastResult.ExperimentDesign) {
        		if (entry.@isSelected == "true") {
        			hasExperimentDesignCodes = true;
        			break;
        		}
        	}

        	var hasExperimentFactorCodes:Boolean = false;
			for each (var ef:Object in parentApplication.getExperimentFactorList.lastResult.ExperimentFactor) {
        		if (ef.@isSelected == "true") {
        			hasExperimentFactorCodes = true;
        			break;
        		}
        	}


        	if ((this.requestCategoryCombo.selectedItem != null && this.requestCategoryCombo.selectedItem.@value != "") ||
        		(this.sampleTypeCombo.selectedItem != null && this.sampleTypeCombo.selectedItem.@value != "") ||
        		(this.sampleSourceCombo.selectedItem != null && this.sampleSourceCombo.selectedItem.@value != "") ||
        		(this.searchOrganismOnSampleCheck.selected) ||
        		(this.searchOrganismOnSlideProductCheck.selected) ||
        		(this.microarrayCategoryCombo.selectedItem != null && this.microarrayCategoryCombo.selectedItem.@value != "") ||
        		(this.microarrayCombo.selectedItem != null && this.microarrayCombo.selectedItem.@idSlideProduct != "") ||
        		(hasExperimentFactorCodes) ||
        		(hasExperimentDesignCodes)) {
    	    	currentState = "ExperimentOnlySearchState";       					        			
        	} else if ((this.analysisProtocolCombo.selectedItem != null && this.analysisProtocolCombo.selectedItem.@value != "") ||
        		      (this.analysisTypeCombo.selectedItem != null && this.analysisTypeCombo.selectedItem.@value != "")) {
    	    	currentState = "AnalysisOnlySearchState";       					        			
        	} else {
        		currentState = "";
        	}
        }
           

        ]]>
    </mx:Script>
    
   
<mx:HDividedBox width="100%" height="100%">
    
        <mx:VBox height="100%" verticalGap="8" paddingRight="4">
            <mx:HBox width="100%">
              <mx:VBox width="100%" verticalGap="8">
                <mx:HBox>
                	<mx:Label text="Keywords:" textAlign="left" width="190"/>
                	<mx:TextInput id="text1" width="80">
                    </mx:TextInput>
                    <mx:TextInput id="text2" width="80">
                    </mx:TextInput>
                    <mx:TextInput id="text3" width="80">
                    </mx:TextInput>
                    <mx:TextInput id="text4" width="80">
                    </mx:TextInput>

                </mx:HBox>
              	
              </mx:VBox>
            </mx:HBox>
            <mx:HBox>
              <mx:Label text="Group:" textAlign="left" width="190" id="label3"/>
              <mx:ComboBox id="labCombo"  
              	labelField="@name" dataProvider="{parentApplication.promptedLabList}" 
               width="200"
               change="parentApplication.filteredSlideProductList.refresh();microarrayCombo.selectedIndex=0">
              	</mx:ComboBox>
              	
            </mx:HBox>
            <mx:HBox paddingBottom="0" width="100%" id="hbox2">
             	<mx:Label text="Organism:" textAlign="left" width="190" id="label7"/>
            	<mx:VBox verticalGap="0">
               		<mx:ComboBox 
               			id="organismCombo"  labelField="@display"  
               		width="200" 
               		change="parentApplication.filteredSlideProductList.refresh();microarrayCombo.selectedIndex=0;scopeSearch()">
               		</mx:ComboBox>
               		<mx:HBox>
                  		<mx:CheckBox id="searchOrganismOnSlideProductCheck" label="Microarray"  selected="false" click="scopeSearch()"/>
                  		<mx:CheckBox id="searchOrganismOnSampleCheck" label="Sample"  selected="false" click="scopeSearch()"/>
               		</mx:HBox>
            	</mx:VBox>
            </mx:HBox>
            <mx:HRule width="100%"/>
            <mx:HBox id="hbox3">
             <mx:Label text="Experiment Category:" textAlign="left" width="190" id="label4"/>
             <mx:ComboBox id="requestCategoryCombo"  labelField="@display" 
             	 width="200">
              <mx:change>parentApplication.filteredSlideProductList.refresh();microarrayCombo.selectedIndex=0;scopeSearch()</mx:change>
             </mx:ComboBox>
            </mx:HBox>
            <mx:HBox>
               <mx:Label text="Experiment Sample Type:" textAlign="left" width="190" id="label5"/>
               <mx:ComboBox id="sampleTypeCombo"  
                labelField="@display"
               	 width="200" change="scopeSearch()">
               </mx:ComboBox>
            </mx:HBox>
            <mx:HBox>
               <mx:Label text="Experiment Sample Source:" textAlign="left" width="190" id="label6"/>
               <mx:ComboBox id="sampleSourceCombo"  
                labelField="@display"
               	 width="200" change="scopeSearch()">
               </mx:ComboBox>
            </mx:HBox>
            <mx:HBox>
             <mx:Label text="Experiment Microarray Category:" textAlign="left" width="190" id="label8"/>
             <mx:ComboBox id="microarrayCategoryCombo"  labelField="@display" 
             	 width="200" change="parentApplication.filteredSlideProductList.refresh();microarrayCombo.selectedIndex=0;scopeSearch()">
             </mx:ComboBox>
            </mx:HBox>
            <mx:HBox width="100%">
             <mx:Label text="Experiment Microarray:" textAlign="left" width="190" id="label9"/>
             <mx:ComboBox id="microarrayCombo"  
             	labelField="@name" 
             	 width="340" change="scopeSearch()">
             </mx:ComboBox>
            </mx:HBox>
    	    <mx:HRule width="100%"/>
            <mx:HBox id="hbox4">
               <mx:Label text="Analysis Type:" textAlign="left" width="190" id="label1"/>
               <mx:ComboBox id="analysisTypeCombo"  
                labelField="@display"
               	 width="300" change="scopeSearch()">
               </mx:ComboBox>
            </mx:HBox>
            <mx:HBox>
               <mx:Label text="Analysis Protocol:" textAlign="left" width="190" id="label2"/>
               <mx:ComboBox id="analysisProtocolCombo"  
                labelField="@display"
               	 width="300" change="scopeSearch()">
               </mx:ComboBox>
            </mx:HBox>
    	<mx:VBox width="100%" height="100%" verticalAlign="bottom">
    	    <mx:HBox width="100%" id="hbox1">
    	         <mx:VBox verticalGap="0">
		        	<mx:RadioButtonGroup id="radiogroup1"/>
		        	<mx:RadioButton id="matchAllTermsRadio" label="Match ALL terms" groupName="radiogroup1" selected="true"/>
		        	<mx:RadioButton id="matchAnyTermRadio" label="Match ANY term" groupName="radiogroup1" selected="false"/>
    	         </mx:VBox>
	        	<mx:HBox width="100%"  height="100%" verticalAlign="bottom" horizontalAlign="left">
	        		<mx:CheckBox label="Include public data" id="includePublicProjectsCheckBox" selected="true" width="100%" textAlign="right" >
	        		</mx:CheckBox>
	        	</mx:HBox>
    	    </mx:HBox>
         </mx:VBox>
            
        </mx:VBox>
        <mx:HBox width="250" height="100%"  paddingLeft="4">
            <mx:DataGrid  width="100%" height="100%" dataProvider="{parentApplication.experimentDesignList}" selectionColor="#FFFFFF" rowHeight="20" id="experimentDesignGrid">
                <mx:itemClick>toggleExperimentDesignCheck(event)</mx:itemClick>
                <mx:columns>
                    <mx:DataGridColumn headerText=" " 
                    	width="18" 
                    	editable="true"                        	
                    	dataField="@isSelected" 
                    	editorDataField="selected"
                    	itemRenderer="hci.flex.renderers.CheckBox" >
                    </mx:DataGridColumn>
                    <mx:DataGridColumn headerText="Experiment Design (general intent)" editable="false" editorDataField="selected" dataField="@experimentDesign"/>
                </mx:columns>
            </mx:DataGrid>
            <mx:DataGrid width="100%" height="100%" dataProvider="{parentApplication.experimentFactorList}" selectionColor="#FFFFFF" rowHeight="20" id="experimentFactorGrid" itemClick="toggleExperimentFactorCheck(event)">
                <mx:columns>
                    <mx:DataGridColumn headerText=" " 
                    	width="18" 
                    	editable="true"                        	
                    	dataField="@isSelected" 
                    	editorDataField="selected" 
                    	itemRenderer="hci.flex.renderers.CheckBox">
                    </mx:DataGridColumn>
                    <mx:DataGridColumn headerText="Experimental Factors (differences)" editable="false" dataField="@experimentFactor"/>
                </mx:columns>
            </mx:DataGrid>
        </mx:HBox>


						
						

</mx:HDividedBox>

<mx:states>
	<mx:State name="ExperimentOnlySearchState">	
		<mx:SetProperty target="{analysisTypeCombo}" name="enabled" value="false"/>
		<mx:SetProperty target="{analysisProtocolCombo}" name="enabled" value="false"/>
		<mx:SetProperty target="{label1}" name="enabled" value="false"/>
		<mx:SetProperty target="{label2}" name="enabled" value="false"/>
		<mx:AddChild relativeTo="{hbox1}" position="before">
			<mx:Label text="* Experiments only will be searched" fontWeight="bold" color="#730A1E"/>
		</mx:AddChild>
	</mx:State>
	<mx:State name="AnalysisOnlySearchState">	
		<mx:SetProperty target="{requestCategoryCombo}" name="enabled" value="false"/>
		<mx:SetProperty target="{sampleTypeCombo}" name="enabled" value="false"/>
		<mx:SetProperty target="{sampleSourceCombo}" name="enabled" value="false"/>
		<mx:SetProperty target="{searchOrganismOnSlideProductCheck}" name="enabled" value="false"/>
		<mx:SetProperty target="{searchOrganismOnSampleCheck}" name="enabled" value="false"/>
		<mx:SetProperty target="{microarrayCategoryCombo}" name="enabled" value="false"/>
		<mx:SetProperty target="{microarrayCombo}" name="enabled" value="false"/>
		<mx:SetProperty target="{label3}" name="enabled" value="false"/>
		<mx:SetProperty target="{label4}" name="enabled" value="false"/>
		<mx:SetProperty target="{label5}" name="enabled" value="false"/>
		<mx:SetProperty target="{label6}" name="enabled" value="false"/>
		<mx:SetProperty target="{label7}" name="enabled" value="false"/>
		<mx:SetProperty target="{label8}" name="enabled" value="false"/>
		<mx:SetProperty target="{label9}" name="enabled" value="false"/>
		<mx:SetProperty target="{experimentDesignGrid}" name="editable" value="false"/>
		<mx:SetProperty target="{experimentFactorGrid}" name="editable" value="false"/>
		<mx:SetProperty target="{experimentDesignGrid}" name="enabled" value="false"/>
		<mx:SetProperty target="{experimentFactorGrid}" name="enabled" value="false"/>
		<mx:AddChild relativeTo="{hbox1}" position="before">
			<mx:Label text="* Analysis only will be searched" fontWeight="bold" color="#730A1E"/>
		</mx:AddChild>
	</mx:State>
</mx:states>
       

</mx:VBox>
