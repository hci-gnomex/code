<?xml version="1.0" encoding="utf-8"?>
<mx:VBox label="Advanced Search"  
	xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:views="views.*"
	paddingBottom="6" paddingTop="8" paddingLeft="8" paddingRight="8"
	width="100%" height="100%" >

 
  <mx:HTTPService  
    id="searchGNomEx" 
    url="SearchIndex.gx"
    destination="searchGNomEx"
    resultFormat="e4x"
    result="onSearchIndex(event)"
	fault="parentApplication.onFailHttpRequest('Failed to search index', event)"
    method="POST"
    useProxy="false">
    </mx:HTTPService >
	
	<mx:HTTPService  
		id="getSearchMetaInformation" 
		url="GetSearchMetaInformation.gx"
		destination="getSearchMetaInformation"
		resultFormat="e4x"
		result="onGetSearchMetaInformation(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get search meta information', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
    
    <mx:Script> 
        <![CDATA[
			import hci.flex.controls.CheckBox;
			
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.CollectionEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import views.renderers.MultiselectRendererVariableDictionary;
        
        [Bindable]
        private var myXMLString:String = "";
        
		[Bindable]
		private var dictionaryMap:Array = new Array();
			
		[Bindable]
		public var searchCriteriaDisplay:String = "";

		private var firstTime:Boolean = true;
		
       public function checkSecurity():void {
       	if (parentApplication.hasPermission("canAccessAnyObject") ||
       	    parentApplication.currentState == "GuestState") {
       		this.includePublicProjectsCheckBox.visible = false;    	
       	} else {
       		this.includePublicProjectsCheckBox.visible = true;
       	}
       }


       public function initializeData():void {
       	//parentDocument.filteredSlideProductList.filterFunction = filterSlideProduct;
       	parentDocument.filteredSlideProductList.refresh();
       	
       	organismCombo.dataProvider               = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.OrganismLite');

		this.getSearchMetaInformation.send();
       }
			
		private function onGetSearchMetaInformation(event:ResultEvent):void {
			var dm:XMLListCollection = new XMLListCollection(event.result.DictionaryMap.Dictionary);
			this.dictionaryMap = new Array();
			for (var x:Number = 0; x < dm.length; x++) {
				dictionaryMap[dm[x].@fieldName] = new XMLList(dm[x].DictionaryEntry);
			}
		}
			/*
        private function filterSlideProduct(item:Object):Boolean {
        	if (item.@idSlideProduct == null || item.@idSlideProduct == "") {
        		return true;
        	}
			var doesMatchRequestCategoryVendor:Boolean = true;
        	if (requestCategoryCombo.selectedItem != null && 
        	    requestCategoryCombo.selectedItem.@value != '') {
        		doesMatchRequestCategoryVendor = false;
				var rCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', requestCategoryCombo.selectedItem.@value);
        		if (item.@idVendor == rCategory.@idVendor) {
        			doesMatchRequestCategoryVendor = true;        			
        		}
        	}       	
        	
        	var doesMatchOrganism:Boolean = true;
        	if (organismCombo.selectedItem != null && 
        	    organismCombo.selectedItem.@value != null  &&
        	    organismCombo.selectedItem.@value != "") {
        		if (item.@idOrganism == organismCombo.selectedItem.@idOrganism) {
        			doesMatchOrganism = true;
        		} else {
        			doesMatchOrganism = false;
        		}
        	}
        	var doesMatchExperimentCategory:Boolean = true;
        	if (applicationCombo.selectedItem != null && 
        	    applicationCombo.selectedItem.@value != null &&
        	    applicationCombo.selectedItem.@value != "") {
        		doesMatchExperimentCategory = false;
        		var categoriesForSlideProduct:XMLList  = item.applications.Application;
        		for(var x:Number = 0; x < categoriesForSlideProduct.length(); x++) {
        			if (categoriesForSlideProduct[x].@codeApplication == applicationCombo.selectedItem.@value) {
        				doesMatchExperimentCategory = true;
        				break;
        			}
        		}
        	}
        	var doesMatchGroup:Boolean = true;
        	if (labCombo.selectedItem != null && labCombo.selectedItem.@idLab != "") {
        		if (item.@isCustom == "Y" && item.@idLab == labCombo.selectedItem.@idLab) {
        			doesMatchGroup = true;
        		} else {
        			doesMatchGroup = false;
        		}
        	}
        	
        	return doesMatchRequestCategoryVendor && doesMatchOrganism && doesMatchExperimentCategory && doesMatchGroup;
        }  */
        public function callSearchIndex():void {
			var params:Object = new Object();
			params.listKind = "SearchList";
			params.matchAnyTerm = matchAnyTermRadio.selected == true ? "Y" : "N";
			params.matchAllTerms = matchAllTermsRadio.selected == true ? "Y" : "N";
			params.searchPublicProjects = includePublicProjectsCheckBox.selected == true ? "Y" : "N";
			params.text1 = text1.text;
			params.text2 = text2.text;
			params.text3 = text3.text;
			params.text4 = text4.text;
			params.idLab = labCombo.selectedItem.@idLab;
			params.lab = labCombo.selectedItem.@name;
			params.idOrganism = organismCombo.selectedItem.@value;
			params.organism = organismCombo.selectedItem.@organism;
			params.searchOrganismOnSlideProduct = searchOrganismOnSlideProductCheck.selected == true ? "Y" : "N";
			params.searchOrganismOnSample = searchOrganismOnSampleCheck.selected == true ? "Y" : "N";
			params.showCategory = "N";
			params.isExperimentOnlySearch = this.ExperimentsRadioButton.selected ? "Y" : "N"
			params.isAnalysisOnlySearch = this.AnalysesRadioButton.selected ? "Y" : "N";
			params.isProtocolOnlySearch = this.ProtocolsRadioButton.selected ? "Y" : "N";
			params.isDataTrackOnlySearch = this.DataTracksRadioButton.selected ? "Y" : "N";

			if (this.ExperimentsRadioButton.selected) {
				params.searchList = this.experimentSearchList;
			} else if (this.AnalysesRadioButton.selected) {
				params.searchList = this.analysisSearchList;
			} else if (this.ProtocolsRadioButton.selected) {
				params.searchList = this.protocolSearchList;
			} else if (this.DataTracksRadioButton.selected) {
				params.searchList = this.dataTrackSearchList;
			}

			buildSearchCriteriaDisplay();
            
            //var codeFactorList:XMLList = parentApplication.getExperimentFactorList.lastResult.ExperimentFactor;    
            //myXMLString = codeFactorList.toXMLString();
            //trace(myXMLString.length);
            //trace(myXMLString);
        	searchGNomEx.send(params); 
        }
			
        private function onSearchIndex(event:ResultEvent): void {        	
        	parentDocument.searchViews.selectedChild = parentDocument.searchResultsView;
        	parentDocument.onViewSwitch();
        	parentDocument.setResultsCount();
        	
        	this.parentDocument.simpleSearchText = null;
			
        	
        	// Expansion takes forever... comment out for now.
        	//callLater(parentDocument.expandAllNodes);
        }
        
			
		private function buildSearchCriteriaDisplay():void {
			this.searchCriteriaDisplay = "";
			firstTime = true;
			if (text1.text != "") {
				addLogicalOperator();
				this.searchCriteriaDisplay += "any text field = " + text1.text;
			}
			if (text2.text != "") {
				addLogicalOperator();
				this.searchCriteriaDisplay += "any text field = " + text2.text;
			}
			if (text3.text != "") {
				addLogicalOperator();
				this.searchCriteriaDisplay += "any text field = " + text3.text;
			}
			if (text4.text != "") {
				addLogicalOperator();
				this.searchCriteriaDisplay += "any text field = " + text4.text;
			}
			if (organismCombo.selectedItem.@value != "" && (AllObjectsRadioButton.selected || ExperimentsRadioButton.selected || AnalysesRadioButton.selected)) {
				addLogicalOperator();
				if (searchOrganismOnSlideProductCheck.selected && !searchOrganismOnSampleCheck.selected && ExperimentsRadioButton.selected) {
					this.searchCriteriaDisplay += "organism of microarray slide = ";
				} else if (!searchOrganismOnSlideProductCheck.selected && searchOrganismOnSampleCheck.selected && ExperimentsRadioButton.selected) {
					this.searchCriteriaDisplay += "organism of sample = ";
				} else {
					this.searchCriteriaDisplay += "organism = ";
				}
				this.searchCriteriaDisplay += organismCombo.selectedItem.@display;
			}
			if (labCombo.selectedItem != null && labCombo.selectedItem.@idLab != "" && (AllObjectsRadioButton.selected || ExperimentsRadioButton.selected
						|| AnalysesRadioButton.selected || DataTracksRadioButton.selected)) {
				addLogicalOperator();
				this.searchCriteriaDisplay += "project lab = " + labCombo.selectedItem.@name;
			}
			
			if (ExperimentsRadioButton.selected) {
				buildSearchListDisplay(this.experimentSearchList);
			} else if (AnalysesRadioButton.selected) {
				buildSearchListDisplay(this.analysisSearchList);
			} else if (this.ProtocolsRadioButton.selected) {
				buildSearchListDisplay(this.protocolSearchList);
			} else if (this.DataTracksRadioButton.selected) {
				buildSearchListDisplay(this.dataTrackSearchList);
			}
		}
			
		private function buildSearchListDisplay(searchList:XMLListCollection):void {
			for each (var searchRow:XML in searchList) {
				if (searchRow.@value != "") {
					addLogicalOperator();
					this.searchCriteriaDisplay += searchRow.@displayName;
					if (searchRow.@isOptionChoice == 'N') {
						this.searchCriteriaDisplay += " = " + searchRow.@value;
					} else {
						this.searchCriteriaDisplay += " contains at least one of ("
						var allOptions:XMLList = dictionaryMap[searchRow.@displayName];
						var values:Array = new Array();
						var v:String = searchRow.@value;
						values = v.split(",");
						var idx:Object = null;
						
						
						var option:XML = null;
						var firstOption:Boolean = true;
						for each(option in allOptions) {
							var theOption:XML = option.copy();
							var isSelected:Boolean = false;
							if (values != null) {
								for (idx in values) {
									if (values[idx] != null && theOption.@value == values[idx]) {
										isSelected = true;
										break;
									}
								}
							}
							if (isSelected) {
								if (!firstOption) {
									this.searchCriteriaDisplay += ",";
								}
								firstOption = false;
								this.searchCriteriaDisplay += option.@display;
							}
						}
						this.searchCriteriaDisplay += ")";
					}
				}
			}
		}

		private function addLogicalOperator():void {
			if (firstTime) {
				firstTime = false;
			} else {
				if (this.matchAllTermsRadio.selected) {
					this.searchCriteriaDisplay += " AND ";
				} else {
					this.searchCriteriaDisplay += " OR ";
				}
			}
		}
			
		public function clearForm():void {
			this.text1.text = "";
			this.text2.text = "";
			this.text3.text = "";
			this.text4.text = "";
			this.labCombo.selectedIndex = 0;
			this.organismCombo.selectedIndex = 0;
			
			for each (var i1:Object in this.experimentSearchList) {
				i1.@value = "";
			}
			for each (var i2:Object in this.analysisSearchList) {
				i2.@value = "";
			}
			for each (var i3:Object in this.protocolSearchList) {
				i3.@value = "";
			}
			for each (var i4:Object in this.dataTrackSearchList) {
				i4.@value = "";
			}
			
			this.ExperimentsRadioButton.selected = false;
			this.AnalysesRadioButton.selected = false;
			this.ProtocolsRadioButton.selected = false;
			this.DataTracksRadioButton.selected = false;
			this.AllObjectsRadioButton.selected = true;
			searchTypeChange();
		}
                
        public function scopeSearch():void {
        
			// disable everything till initialized.
			if (!parentDocument.isInitialized) {
				this.currentState = "PreInitialization";
				return;
			}

			if (this.ExperimentsRadioButton.selected) {
				currentState = "ExperimentOnlySearchState";
			} else if (this.AnalysesRadioButton.selected) {
				currentState = "AnalysisOnlySearchState";
			} else if (this.ProtocolsRadioButton.selected) {
				currentState = "ProtocolOnlySearchState";
			} else if (this.DataTracksRadioButton.selected) {
				currentState = "DataTrackOnlySearchState";
			} else {
				currentState = "";
			}
        }
			
		private function searchTypeChange():void {
			if (this.ExperimentsRadioButton.selected) {
				this.searchGrid.dataProvider = experimentSearchList;
			} else if (this.AnalysesRadioButton.selected) {
				this.searchGrid.dataProvider = analysisSearchList;
			} else if (this.ProtocolsRadioButton.selected) {
				this.searchGrid.dataProvider = protocolSearchList;
			} else if (this.DataTracksRadioButton.selected) {
				this.searchGrid.dataProvider = dataTrackSearchList;
			} else {
				this.searchGrid.dataProvider = new XMLListCollection();
			}
			scopeSearch();
		}
        ]]>
    </mx:Script>
    
	<mx:XMLListCollection id="experimentSearchList" source="{this.getSearchMetaInformation.lastResult.ExperimentSearchList.Field}"/>
	<mx:XMLListCollection id="analysisSearchList" source="{this.getSearchMetaInformation.lastResult.AnalysisSearchList.Field}"/>
	<mx:XMLListCollection id="dataTrackSearchList" source="{this.getSearchMetaInformation.lastResult.DataTrackSearchList.Field}"/>
	<mx:XMLListCollection id="protocolSearchList" source="{this.getSearchMetaInformation.lastResult.ProtocolSearchList.Field}"/>

<mx:HBox width="100%">
	<mx:Label text="Keywords:" textAlign="left"/>
	<mx:TextInput id="text1" width="80">
	</mx:TextInput>
	<mx:TextInput id="text2" width="80">
	</mx:TextInput>
	<mx:TextInput id="text3" width="80">
	</mx:TextInput>
	<mx:TextInput id="text4" width="80">
	</mx:TextInput>
	<mx:HBox>
		<mx:Label text="Group:" textAlign="left" id="label3"/>
		<mx:ComboBox id="labCombo"  
					 labelField="@name" dataProvider="{parentApplication.promptedLabList}" 
					 width="200"
					 >
		</mx:ComboBox>
		
	</mx:HBox>
	<mx:HBox paddingBottom="0" width="100%" id="hbox2">
		<mx:Label text="Organism:" textAlign="left" id="label7"/>
		<mx:VBox verticalGap="0">
			<mx:ComboBox 
				id="organismCombo"  labelField="@display"  
				width="200" 
				>
			</mx:ComboBox>
			<mx:HBox>
				<mx:CheckBox id="searchOrganismOnSlideProductCheck" label="Microarray"  selected="false" click="scopeSearch()" enabled="false"/>
				<mx:CheckBox id="searchOrganismOnSampleCheck" label="Sample"  selected="false" click="scopeSearch()" enabled="false"/>
			</mx:HBox>
		</mx:VBox>
	</mx:HBox>
</mx:HBox>
<mx:HRule width="100%"/>
<mx:VBox height="100%" width="100%" verticalGap="6" paddingRight="4">
	<mx:VBox width="100%" height="240">
		<mx:HBox verticalGap="0" width="100%" verticalAlign="top" horizontalGap="0">
			<mx:Label text="Search " />
			<mx:RadioButton label="All Objects" selected="true" id="AllObjectsRadioButton" paddingBottom="0" paddingLeft="4" paddingRight="0" paddingTop="0" textAlign="left" horizontalGap="0">
				<mx:click>{searchTypeChange()}</mx:click>
			</mx:RadioButton>
			<mx:RadioButton label="Experiments" selected="false" id="ExperimentsRadioButton" paddingBottom="0" paddingLeft="4" paddingRight="0" paddingTop="0" textAlign="left" horizontalGap="0">
				<mx:click>{searchTypeChange()}</mx:click>
			</mx:RadioButton>
			<mx:RadioButton label="Analyses" selected="false" id="AnalysesRadioButton" paddingBottom="0" paddingLeft="4" paddingRight="0" paddingTop="0" textAlign="left" horizontalGap="0">
				<mx:click>{searchTypeChange()}</mx:click>
			</mx:RadioButton>
			<mx:RadioButton label="Protocols" selected="false" id="ProtocolsRadioButton" paddingBottom="0" paddingLeft="4" paddingRight="0" paddingTop="0" textAlign="left" horizontalGap="0">
				<mx:click>{searchTypeChange()}</mx:click>
			</mx:RadioButton>
			<mx:RadioButton label="Data Tracks" selected="false" id="DataTracksRadioButton" paddingBottom="0" paddingLeft="4" paddingRight="0" paddingTop="0" textAlign="left" horizontalGap="0">
				<mx:click>{searchTypeChange()}</mx:click>
			</mx:RadioButton>
		</mx:HBox>
		<mx:DataGrid id="searchGrid"  horizontalScrollPolicy="auto"
					 dataProvider="{new XMLListCollection()}" editable="true"
					 width="100%" height="100%">
			<mx:columns>
				<mx:DataGridColumn headerText="Field" id="fieldName" dataField="@displayName" editable="false" width="200" >
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="Values"   id="values"
								   itemRenderer="{views.renderers.MultiselectRendererVariableDictionary.create('Values', dictionaryMap, '@displayName', '@allowMultipleChoice')}" 
								   dataField="@value" />  
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
	<mx:Label text="* Experiments only will be searched" id="warningLabel" visible="false" fontWeight="bold" color="#730A1E"/>    	
	<mx:VBox width="100%" height="100%" verticalAlign="bottom">
	    <mx:HBox width="100%" id="hbox1">
	         <mx:HBox horizontalGap="0">
	        	<mx:RadioButtonGroup id="radiogroup1"/>
	        	<mx:RadioButton id="matchAllTermsRadio" label="Match ALL terms" groupName="radiogroup1" selected="true"/>
	        	<mx:RadioButton id="matchAnyTermRadio" label="Match ANY term" groupName="radiogroup1" selected="false"/>
	         </mx:HBox>
        	<mx:HBox width="100%"  height="100%" verticalAlign="bottom" horizontalAlign="left">
        		<mx:CheckBox label="Include public data" id="includePublicProjectsCheckBox" selected="true" width="100%" textAlign="right" >
        		</mx:CheckBox>
        	</mx:HBox>
	    </mx:HBox>
     </mx:VBox>
    
</mx:VBox>

<mx:states>
	<mx:State name="ExperimentOnlySearchState">	
		<mx:SetProperty target="{warningLabel}" name="visible" value="true"/>
		<mx:SetProperty target="{warningLabel}" name="text" value="* Experiments only will be searched"/>
		<mx:SetProperty target="{searchOrganismOnSlideProductCheck}" name="enabled" value="true"/>
		<mx:SetProperty target="{searchOrganismOnSampleCheck}" name="enabled" value="true"/>
	</mx:State>
	<mx:State name="AnalysisOnlySearchState">	
		<mx:SetProperty target="{searchOrganismOnSlideProductCheck}" name="enabled" value="false"/>
		<mx:SetProperty target="{searchOrganismOnSampleCheck}" name="enabled" value="false"/>
		<mx:SetProperty target="{warningLabel}" name="visible" value="true"/>
		<mx:SetProperty target="{warningLabel}" name="text" value="* Analysis only will be searched"/>
	</mx:State>
	<mx:State name="ProtocolOnlySearchState">	
		<mx:SetProperty target="{warningLabel}" name="visible" value="true"/>
		<mx:SetProperty target="{warningLabel}" name="text" value="* Experiments only will be searched"/>
		<mx:SetProperty target="{searchOrganismOnSlideProductCheck}" name="enabled" value="false"/>
		<mx:SetProperty target="{searchOrganismOnSampleCheck}" name="enabled" value="false"/>
		<mx:SetProperty target="{label3}" name="enabled" value="false"/>
		<mx:SetProperty target="{label7}" name="enabled" value="false"/>
		<mx:SetProperty target="{organismCombo}" name="enabled" value="false"/>
		<mx:SetProperty target="{labCombo}" name="enabled" value="false"/>
		<mx:SetProperty target="{warningLabel}" name="visible" value="true"/>
		<mx:SetProperty target="{warningLabel}" name="text" value="* Analysis only will be searched"/>
	</mx:State>
	<mx:State name="DataTrackOnlySearchState">	
		<mx:SetProperty target="{warningLabel}" name="visible" value="true"/>
		<mx:SetProperty target="{warningLabel}" name="text" value="* Experiments only will be searched"/>
		<mx:SetProperty target="{searchOrganismOnSlideProductCheck}" name="enabled" value="false"/>
		<mx:SetProperty target="{searchOrganismOnSampleCheck}" name="enabled" value="false"/>
		<mx:SetProperty target="{label7}" name="enabled" value="false"/>
		<mx:SetProperty target="{organismCombo}" name="enabled" value="false"/>
		<mx:SetProperty target="{warningLabel}" name="visible" value="true"/>
		<mx:SetProperty target="{warningLabel}" name="text" value="* Analysis only will be searched"/>
	</mx:State>
	<mx:State name="PreInitialization">	
		<mx:SetProperty target="{searchOrganismOnSlideProductCheck}" name="enabled" value="false"/>
		<mx:SetProperty target="{searchOrganismOnSampleCheck}" name="enabled" value="false"/>
		<mx:SetProperty target="{organismCombo}" name="enabled" value="false"/>
		<mx:SetProperty target="{labCombo}" name="enabled" value="false"/>
		<mx:SetProperty target="{label3}" name="enabled" value="false"/>
		<mx:SetProperty target="{label7}" name="enabled" value="false"/>
		<mx:SetProperty target="{warningLabel}" name="visible" value="true"/>
		<mx:SetProperty target="{this.ExperimentsRadioButton}" name="enabled" value="false"/>
		<mx:SetProperty target="{this.AnalysesRadioButton}" name="enabled" value="false"/>
		<mx:SetProperty target="{this.ProtocolsRadioButton}" name="enabled" value="false"/>
		<mx:SetProperty target="{this.DataTracksRadioButton}" name="enabled" value="false"/>
		<mx:SetProperty target="{this.AllObjectsRadioButton}" name="enabled" value="false"/>
		<mx:SetProperty target="{warningLabel}" name="visible" value="true"/>
		<mx:SetProperty target="{warningLabel}" name="text" value="* Initializing.  Please Wait."/>
	</mx:State>
</mx:states> 
       

</mx:VBox>
