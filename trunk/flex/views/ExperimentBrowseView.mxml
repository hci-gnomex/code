<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%" xmlns:views="views.*"
	  verticalGap="0" paddingTop="0">
	  


   <mx:HTTPService  
    id="getRequest" 
    url="http://localhost/gnomex/GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequest(event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>


   <mx:HTTPService  
    id="getNewProject" 
    url="http://localhost/gnomex/GetProject.gx"
    destination="getProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetNewProject(event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idProject>0</idProject>    	
    </mx:request>
  </mx:HTTPService>

  
 <mx:Script>
 	<![CDATA[
 		import mx.collections.ArrayCollection;
 	import mx.core.IContainer;
 	import mx.rpc.events.ResultEvent;
    import mx.managers.PopUpManager;
	import mx.containers.TitleWindow;



    [Bindable]
    public var selectedExperiment:Object;
    
    private var selectedIdRequest:int;

    private var projectDetailWindow:views.ProjectDetailWindow;
        
    public function getFullName(item:Object, col:int):String {
    	return item.@ownerLastName + ", " + item.@ownerFirstName;
    }

    public function getRequestKind(item:Object, col:int):String {
    	var de:XMLList = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry.(@value == item.@codeRequestCategory);
    	if (de.length() == 1) {
	    	return de[0].@display;
    	} else {
    		return "";
    	}
    }
    public function getExperimentKind(item:Object, col:int):String {
    	if (item.@codeMicroarrayCategory == "") {
    		return getRequestKind(item, col);
    	} else {
	    	var de:XMLList = parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.MicroarrayCategory').DictionaryEntry.(@value == item.@codeMicroarrayCategory);
	    	if (de.length() == 1) {
		    	return de[0].@display;    		
	    	} else {
	    		return getRequestKind(item, col);
	    	}
    	}
    }
    
   
    
  	public function refreshDownloadList():void {
		if (theViews.selectedIndex == 1) {
			var params:Object = new Object();
			if (parentDocument.selectedIdLab != null) {
				params.idLab = parentDocument.selectedIdLab;				
			} 
			if (parentDocument.selectedIdProject != null) {
				params.idProject = parentDocument.selectedIdProject;
			}
			downloadView.getRequestDownloadList.send(params);
		}
	}
	
	public function refreshTrackList():void {
		if (theViews.selectedIndex == 2) {
			var params:Object = new Object();
			if (parentDocument.selectedIdLab != null) {
				params.idLab = parentDocument.selectedIdLab;				
			} 
			if (parentDocument.selectedIdProject != null) {
				params.idProject = parentDocument.selectedIdProject;
			}
			if (trackView.progressList != null) {
				trackView.progressList.removeAll();
				trackView.progressList.refresh();
			}
			trackView.getRequestProgressList.send(params);
			
		}		
	}
	
	public function refreshVisibilityList():void {
		if (theViews.selectedIndex == 3) {
			visibilityView.checkSecurity();
			visibilityView.setVisibilityCombo();
		}
	}
	
    
    private function getGridRowNumber(item:Object,col:int):String
    {
       var x:int = browseList.getItemIndex(item) + 1;
       return String(x);
    } 
  	
  	private function onExperimentRowSelected():void {
		showExperimentDetail(experimentList.selectedItem.@idRequest);
  	}
  	
  	public function showExperimentDetail(idRequest:int):void {
  		selectedIdRequest = idRequest;

		var parms:Object = new Object();
		parms.idRequest = selectedIdRequest;
		getRequest.send(parms);  		
  	}

  	private function onGetRequest(event:ResultEvent):void {
		selectedExperiment = getRequest.lastResult.Request.(@idRequest == selectedIdRequest);
		parentDocument.selectedExperiment = selectedExperiment;
		parentDocument.theViews.selectedChild = parentDocument.detailView;
	}

	private function onViewSwitch():void {
		
		this.refreshDownloadList();
		this.refreshTrackList();
		this.refreshVisibilityList();
		
		refreshButtonStack();
		refreshFilterView();
		filterList();
		

	}
	
	public function refreshFilterView():void {
		if (theViews.selectedChild == projectDetailView) {
			filterListView.visible = false;
			filterListView.height = 0;
		} else {
			filterListView.visible = true;
			filterListView.height = 34;
		}
	}
	
    

	
	public function refreshButtonStack():void {
		if (parentApplication.canSubmitRequests(parentDocument.selectedIdLab)) {
			newProjectButton.visible = true;
		} else {
			newProjectButton.visible = false;
		}
		if (theViews.selectedChild == experimentListView ) {
			buttonStack.selectedChild = browseButtonView;				
		} else if (theViews.selectedChild == projectDetailView) {
			buttonStack.selectedChild = saveProjectButtonView;
		} else if (theViews.selectedChild == trackView) {
			buttonStack.selectedChild = trackButtonView;
		} else if (theViews.selectedChild == visibilityView) {
			buttonStack.selectedChild = saveVisibilityButtonView;
		} else if (theViews.selectedChild == downloadView) {
			if (downloadView.theTab.selectedIndex == 0) {
				buttonStack.selectedChild = downloadFoldersButtonView;			
			} else {
				buttonStack.selectedChild = downloadFilesButtonView;
			}
		}
		
	}
	
	public function filterList():void {
		if (theViews.selectedChild == experimentListView ||
		    theViews.selectedChild == visibilityView) {
			browseList.filterFunction = parentDocument.filterExperimentList;
			browseList.refresh();
		} else if (theViews.selectedChild == downloadView) {
			downloadView.downloadList.filterFunction = parentDocument.filterExperimentList;
			downloadView.downloadList.refresh();
		} else if (theViews.selectedChild == this.trackView) {
			trackView.progressList.filterFunction = parentDocument.filterExperimentList;
			trackView.progressList.refresh();
		}
		
	}
	
	
	
	private function showNewProjectWindow():void {
		if (parentApplication.canSubmitRequests(parentDocument.selectedIdLab)) {
			getNewProject.send();		
		} else {
			mx.controls.Alert.show("You are not able to add projects in this group.");
		}
	}

	private function onGetNewProject(event:ResultEvent):void {
		if (getNewProject.lastResult.name() == "OpenProjectList") {
			 parentDocument.selectedProject = getNewProject.lastResult.Project.(@idProject == 0);
			 parentDocument.selectedProject.@idAppUser = parentApplication.createSecurityAdvisor.lastResult.@idAppUser;
			 parentDocument.selectedProject.@idLab = parentDocument.selectedIdLab;
			 this.projectDetailWindow = views.ProjectDetailWindow(PopUpManager.createPopUp(this, views.ProjectDetailWindow, true));
			 this.projectDetailWindow.projectDetailView.experimentDesignEntries.refresh();
			 this.projectDetailWindow.projectDetailView.experimentFactorEntries.refresh();
			 
			 var selectedLabNode:Object = parentApplication.getLabList.lastResult.Lab.(@idLab == parentDocument.selectedIdLab);
			 this.projectDetailWindow.labCombo.selectedItem = selectedLabNode;
			 
			 PopUpManager.centerPopUp(this.projectDetailWindow);		
			
		} else {
			mx.controls.Alert.show(getNewProject.lastResult..ACTMESSAGE.@TEXT, "Get new project failed");
		}
	}


 	]]>
 </mx:Script>
 
    <mx:XMLListCollection id="browseList" source="{parentDocument.browseTree.selectedItem..Request}"/>
 
		
		    
		        <mx:ApplicationControlBar 
		        	width="100%" 
		        	id="linkBar" dock="true" fillAlphas="[.8, .5]" 
		        	paddingBottom="0" paddingLeft="4" paddingRight="4" paddingTop="0" cornerRadius="0">
		            <mx:VBox width="100%" height="100%">
		            	
						<mx:HBox  verticalAlign="middle" width="100%" horizontalAlign="left" paddingTop="0" horizontalGap="2">
					        <mx:LinkBar dataProvider="{theViews}" 
					        	itemClick="onViewSwitch()" 
					        	useHandCursor="true" styleName="linkBar"  >
					        </mx:LinkBar>
					        
					        <mx:VRule height="20"/>
					        <mx:ViewStack  id="buttonStack"  width="100%" >
					            <mx:HBox   verticalAlign="middle" horizontalAlign="left" width="100%" id="browseButtonView" horizontalGap="2">
					            </mx:HBox>
					            <mx:HBox  verticalAlign="middle"  horizontalAlign="right" width="100%" id="browseProjectButtonView">
					            </mx:HBox>
					            <mx:HBox horizontalAlign="right" width="100%" id="saveProjectButtonView" horizontalGap="2" verticalAlign="middle">
						            <mx:Button id="saveProjectButton" label="Save" 
						            	icon="@Embed('../assets/action_save.gif')" 
						            	click="projectDetailView.save()"  toolTip="Save project">
						                  </mx:Button>
						            
					            </mx:HBox>
					            <mx:HBox  verticalAlign="middle" horizontalAlign="left" width="100%" id="trackButtonView" horizontalGap="2">
					            </mx:HBox>
					        	<mx:HBox  verticalAlign="middle" horizontalAlign="right" width="100%" id="saveVisibilityButtonView">
						        	<mx:Button label="Save" id="saveVisibilityButton"
						        		icon="@Embed('../assets/action_save.gif')" 
						        		click="visibilityView.save()"  visible="true" toolTip="Save visibility for project and experiments">
						        	      </mx:Button>
					        	</mx:HBox>
					            <mx:HBox  verticalAlign="middle" horizontalAlign="right"  width="100%" id="downloadFoldersButtonView">
						            <mx:Button id="downloadFoldersButton" 
						            	click="downloadView.downloadFolders()" 
						            	icon="@Embed('../assets/icon_download.gif')" 
						            	toolTip="Download selected folders"
						            	label="Download" 
						            	visible="true"/>
					            </mx:HBox>		                    
					            <mx:HBox  verticalAlign="middle" horizontalAlign="right"  width="100%" id="downloadFilesButtonView">
						            <mx:Button id="downloadFilesButton" 
						             	click="downloadView.downloadFiles()" 
						             	icon="@Embed('../assets/icon_download.gif')" 
						             	toolTip="Download selected files"
						             	label="Download"/>
					            </mx:HBox>		                    
					            
					        	
					        </mx:ViewStack>
					        <mx:Button id="deleteProjectButton" icon="@Embed('../assets/folder_delete.png')" 
					        	click="projectDetailView.promptToDeleteProject()"
					        	label="Delete"  letterSpacing=".3" horizontalGap="0" toolTip="Delete project"/>
					        <mx:Button id="newProjectButton" click="showNewProjectWindow()" icon="@Embed('../assets/folder_add.png')" 
					        	label="New.." paddingLeft="1" paddingRight="0" horizontalGap="0" letterSpacing=".3" toolTip="New project..."/>
					    </mx:HBox>
					    
   	 	            </mx:VBox>

		        </mx:ApplicationControlBar>
			    	 
		    	
	    <mx:HBox id="filterListView" width="100%" paddingTop="12"  horizontalGap="30">
	        <mx:HBox horizontalGap="0">
		    	<mx:Label text="Experiment #"/>
		    	<mx:ComboBox dataProvider="{parentDocument.requestNumbers}" id="requestNumberCombo" change="filterList()" width="80">					    		
		    	</mx:ComboBox> 
	        	
	        </mx:HBox>
	    	
	    	<mx:HBox horizontalGap="0">
	    		<mx:CheckBox id="lastWeekCheckbox" label="Last week's experiments" change="filterList()"/>
	    		<mx:CheckBox  id="lastMonthCheckbox" label="Last month" change="filterList()"/>
	    		<mx:CheckBox  id="lastYearCheckbox" label="Last year" change="filterList()"/>
	    	</mx:HBox>
	    	
	    	<mx:CheckBox label="My experiments only" id="myExperimentsCheckbox" change="filterList()"/>

	    </mx:HBox>
				   
		              
		<mx:ViewStack id="theViews"  paddingTop="8" width="100%" height="100%" >
			       <mx:VBox id="experimentListView" width="100%" height="100%" 
			       	label="Experiments"
			       	icon="@Embed('../assets/application_view_detail.png')" >
				       <mx:DataGrid  id="experimentList" 
				       	dataProvider="{browseList}"  
				       	width="100%" height="100%" 
				       	itemDoubleClick="onExperimentRowSelected()" 
				       	doubleClickEnabled="true">
				         <mx:columns>
				            <mx:DataGridColumn headerText=" " 
				            	width="10" 
				            	editable="true"                        	
				            	dataField="@isSelected" 
				            	editorDataField="selected" 
				            	itemRenderer="views.CheckBoxIsSelected" textAlign="center"/>
				            <mx:DataGridColumn  width="28" headerText="#">
				                <mx:itemRenderer>
				                    <mx:Component >
				                        <mx:HBox  horizontalGap="0"  >
				                          <mx:Image id="experimentImage"  source="../assets/color_swatch.png">
				                    	 </mx:Image> 
				                           <mx:Label id="requestNumber" text="{data.@requestNumber}">
				                           </mx:Label>
				                        </mx:HBox>
				                    </mx:Component>
				                </mx:itemRenderer>
				            </mx:DataGridColumn> 
					       	<mx:DataGridColumn headerText="Date" width="20" dataField="@requestCreateDateDisplay"/>
					        <mx:DataGridColumn headerText="Requester" width="40" labelFunction="getFullName"/>
					       	<mx:DataGridColumn headerText="Project" width="40" dataField="@projectName"/>
					       	<mx:DataGridColumn headerText="Experiment Kind" width="40" labelFunction="getExperimentKind"/>
					       	<mx:DataGridColumn headerText="Microarray" width="100" dataField="@slideProductName"/>
				         </mx:columns>
				       </mx:DataGrid> 	    
				       
	
		       	   	
			       </mx:VBox>
			       
			       


	
				<views:ExperimentDownloadView id="downloadView" 
					label="Downloads" 
					icon="@Embed('../assets/folder_go.png')" borderStyle="none">
				</views:ExperimentDownloadView>
				
	 			<views:ExperimentTrackView id="trackView" label="Progress" icon="@Embed('../assets/application_go.png')" >
				</views:ExperimentTrackView>
				
	 			<views:ExperimentVisibilityView id="visibilityView" label="Visibility" icon="@Embed('../assets/lock.png')">
				</views:ExperimentVisibilityView>
				
				<views:ProjectDetailView id="projectDetailView" label="Project"  icon="@Embed('../assets/folder.png')">
			     </views:ProjectDetailView>   

		     	
		
		
		</mx:ViewStack>
		

</mx:VBox>



