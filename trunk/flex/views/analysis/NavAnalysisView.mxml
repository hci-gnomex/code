<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"     
	label="Analysis" width="100%" height="100%" 
	xmlns:views="views.*" xmlns:analysis="views.analysis.*"
	cornerRadius="10"  >


  <mx:HTTPService  
    id="getAnalysisGroupList" 
    url="GetAnalysisGroupList.gx"
    destination="getAnalysisGroupList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetAnalysisGroupList(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to get analysis group list', event)"
    method="POST" 
    useProxy="false">
    <mx:request>
            <idLab>{browseLabCombo.selectedItem.@idLab}</idLab> 
            <showMyLabsAlways>{this.currentState == "AdminState" ? 'N' : 'Y'}</showMyLabsAlways>
            <searchPublicProjects>{searchPublicProjectsCheckbox.selected ? 'Y' : 'N'}</searchPublicProjects>
    </mx:request>
   </mx:HTTPService>
   
   <mx:HTTPService  
    id="getAnalysis" 
    url="GetAnalysis.gx"
    destination="getAnalysis"
    resultFormat="e4x"
    showBusyCursor="false"
    result="onGetAnalysis(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to get analysis', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>


   <mx:HTTPService  
    id="deleteAnalysisGroup" 
    url="DeleteAnalysisGroup.gx"
    destination="deleteAnalysisGroup"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onDeleteAnalysisGroup(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to delete analysis group', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>

   <mx:HTTPService  
    id="deleteAnalysis" 
    url="DeleteAnalysis.gx"
    destination="deleteAnalysis"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onDeleteAnalysis(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to delete analysis', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>

   
   <mx:HTTPService  
    id="getAnalysisGroup" 
    url="GetAnalysisGroup.gx"
    destination="getAnalysisGroup"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetAnalysisGroup(event)"
    method="POST"
 	fault="parentApplication.onFailHttpRequest('Failed to get analysis group', event)"
    useProxy="false">
    <mx:request>
      <idAnalysisGroup>{selectedIdAnalysisGroup}</idAnalysisGroup>
    </mx:request>
  </mx:HTTPService>
  
    <mx:HTTPService  
    id="getNewAnalysisGroup" 
    url="GetAnalysisGroup.gx"
    destination="getAnalysisGroup"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetNewAnalysisGroup(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get new project', event)"
    method="POST"
    useProxy="false">
    <mx:request>
   		<idAnalysisGroup>0</idAnalysisGroup>    	
    </mx:request>
  </mx:HTTPService>
 
 
	   <mx:Script> 
        <![CDATA[
        import mx.controls.Alert;
        import mx.managers.DragManager;
        import mx.core.DragSource;
        import mx.events.DragEvent;
        import mx.events.CloseEvent;
        import mx.controls.Menu;
        import mx.collections.ArrayCollection;

        import mx.rpc.events.ResultEvent;   
        import mx.collections.XMLListCollection;
        import mx.managers.PopUpManager;
        
        public var selectedIdAnalysis:Object;
        public var selectedAnalysisNumber:Object;
        
        [Bindable]
        public var selectedAnalysis:Object;
        
        [Bindable]
        public var selectedAnalysisGroup:Object;
        
        public var selectedIdLab:String;
        
        public var selectedNode:Object;
        
        private var dropProject:Object;
        private var dragRequest:Object;
        
        [Bindable]
        public var selectedIdAnalysisGroup:String;
        
        [Bindable]
    	public var rowCountMessage:String = new String();
    	

    	private var showDownloads:Boolean = false;
    
    	private var analysisGroupWindow:AnalysisGroupWindow;
    
	 	public static const millisecondsPerDay:int = 1000 * 60 * 60 * 24;
	 	public static const millisecondsPerWeek:Number = 1000 * 60 * 60 * 24 * 7;
	 	public static const millisecondsPerMonth:Number = 1000 * 60 * 60 * 24 * 30;
	 	public static const millisecondsPerYear:Number = 1000 * 60 * 60 * 24 * 365;

		public function checkDirty():void {
		}
		
		public function checkSecurity():void {
			this.browseView.checkSecurity();
			if (parentApplication.hasPermission("canWriteAnyObject")) {
				currentState = "AdminState";
			} else if (parentApplication.isGuestMode()) {
				currentState = "GuestState";
			} else {
				currentState = "";
			}
		}

        private function getBrowseTreeLabel(item:Object):String {
        	var label:String = item.@label;
        	return label;
        }
        
       
        
        private function onGetRequestDownloadList(event:ResultEvent): void {        	
        	setResultsCount();
        }
        
        private function onGetAnalysisGroupList(event:ResultEvent): void {  
        	if (getAnalysisGroupList.lastResult.Lab.length() == 0) {
        		browseTree.visible = false;
        	} else {
        		browseTree.visible = true;
        	}
        	
        	var call:Object = event.token;
        	if (call.marker == "showDownloads") {
        		showDownloads = true;
        	} else {
        		showDownloads = false;
        	}

        	callLater(reselectTreeItem);
        	callLater(expandAllNodes); 
	    }

	    
	    
	    private function reselectTreeItem():void {
	    	callLater(selectTreeNode);
	    }
	    
	    private function selectTreeNode():void {
	    	var idx:int = -1;
    		var pos:int = 0;
    		var lab:Object;
    		var analysisGroup:Object;
    		var analysis:Object;
    		if (selectedAnalysis != null) {
		    	for each (lab in getAnalysisGroupList.lastResult..Lab) {
		    		pos++;	    	
		    		trace(lab.@name + ' ' + pos);
		    		for each(analysisGroup in lab.AnalysisGroup) {
		    			pos++;
		    			for each( analysis in analysisGroup.Analysis) {
		    				pos++;
		    				if (analysis.@idAnalysis == selectedAnalysis.@idAnalysis &&
		    				    analysisGroup.@idAnalysisGroup == selectedIdAnalysisGroup) {
		    					idx = --pos;
		    					break;
		    				}
		    			}
		    			if (idx != -1) {
		    				break;
		    			} 
		    		}
		    		if (idx != -1) {
		    			break;
		    		}
    			}    			
    		}else if (selectedIdAnalysisGroup != null) {
		    	for each (lab in getAnalysisGroupList.lastResult..Lab) {	   
		    		pos++; 	
		    		for each(analysisGroup in lab.AnalysisGroup) {
		    			pos++;
		    			if (analysisGroup.@idAnalysisGroup == selectedIdAnalysisGroup) {
		    				idx = --pos;
		    				break;
		    			}
		    			for each( analysis in analysisGroup.Analysis) {
		    				pos++;
		    			}
			    		if (idx != -1) {
			    			break;
			    		}
		    		}
		    		if (idx != -1) {
		    			break;
		    		}
    			}    			
    		} else if (selectedIdLab != null) {
    			for each (lab in getAnalysisGroupList.lastResult..Lab) {	    	
		    		pos++;
    				if (selectedIdLab == lab.@idLab) {
    					idx = --pos;
    					break;
    				}
		    		for each(analysisGroup in lab.AnalysisGroup) {
		    			pos++;
		    			for each(analysis in analysisGroup.Analysis) {
		    				pos++;
		    			}
			    		if (idx != -1) {
			    			break;
			    		}
		    		}
		    		if (idx != -1) {
		    			break;
		    		}
    			}    			
    		}
	    	
	    	if (idx != -1) {
	    		browseTree.selectedIndex = idx;
	    	}
	    	
	    	onBrowseTree();
	    }
	    
        
        
	    private function expandLabNodes():void
  		{
  			browseTree.expandItem(getAnalysisGroupList.lastResult, true);
  			for each(var lab:Object in getAnalysisGroupList.lastResult..Lab) {
  				browseTree.expandItem(lab, true);
  			}
  			browseTree.validateNow();
  			treeContainer.validateNow();
  		}

	    public function expandAllNodes():void
  		{
  			browseTree.expandItem(getAnalysisGroupList.lastResult, true);
  			for each(var lab:Object in getAnalysisGroupList.lastResult..Lab) {
  				browseTree.expandItem(lab, true);
  			}
  			for each(var ag:Object in getAnalysisGroupList.lastResult..AnalysisGroup) {
  				browseTree.expandItem(ag, true);
  			}
  			for each(var a:Object in getAnalysisGroupList.lastResult..Analysis) {
  				browseTree.expandItem(a, true);
  			}
  			browseTree.validateNow();
  			treeContainer.validateNow();
  		}
  		
  		
  		private function collapseAllBrowseNodes():void {
  			browseTree.openItems = [];
  			browseTree.validateNow();
  		}
  		
	    public function setResultsCount():void {
	    	if (browseTree.selectedItem == null) {
	    		rowCountMessage = "";
	    	} else if (browseTree.selectedItem..Request.length() == 1) {
		    	rowCountMessage = "(" + browseTree.selectedItem..Analysis.length() + " analysis)";
	    	} else {
			   	rowCountMessage = "(" + browseTree.selectedItem..Analysis.length() + " analyses)";
	    	}
	    }
    

		private function onBrowseTree():void {
			setResultsCount();
			
			browseView.dirtyAnalysisGroup.resetDirty();
			browseView.dirtyVisibility.resetDirty();

			selectedAnalysisGroup = null;
			selectedIdAnalysisGroup = null;
			selectedIdAnalysis = null;
			selectedAnalysis = null;
			selectedIdLab = null;
			
			this.deleteButton.enabled = false;
			
			if (browseTree.selectedItem == null) {
				return;
			}
			
			if (browseTree.selectedItem.name() == 'Analysis') {
				detailView.title = "Analysis " + browseTree.selectedItem.@number;
				selectedIdAnalysis = browseTree.selectedItem.@idAnalysis;
				var parms:Object = new Object();
				parms.idAnalysis = selectedIdAnalysis;
				getAnalysis.send(parms);
				selectedIdLab = browseTree.selectedItem.@idLab;
				selectedIdAnalysisGroup = browseTree.selectedItem.parent().@idAnalysisGroup;
				
			} else {												
				selectedIdLab = browseTree.selectedItem.@idLab.toString();
				
				if (browseTree.selectedItem.name() == 'AnalysisGroup') {
					browseView.title = browseTree.selectedItem.@label + "\t" + rowCountMessage;
					selectedIdAnalysisGroup = browseTree.selectedItem.@idAnalysisGroup.toString();
					if (!browseView.theViews.contains(browseView.analysisGroupView)) {
						browseView.theViews.addChild(browseView.analysisGroupView);
					}
					getAnalysisGroup.send();
					
				} else {
					browseView.title =  browseTree.selectedItem.@labName + "\t" + rowCountMessage;;
					selectedIdAnalysisGroup = null;
					if (browseView.theViews.contains(browseView.analysisGroupView)) {
						browseView.theViews.removeChild(browseView.analysisGroupView);
					}
					browseView.buttonStack.selectedChild = browseView.browseButtonView;
					browseView.refreshButtonStack();
					
				}
				
				theViews.selectedIndex=0;
			} 
			
			browseView.analysisNumberCombo.selectedIndex = -1;
			browseView.browseList.refresh();
			refreshAnalysisNumbers(browseView.browseList);
			browseView.refreshVisibilityList();
			theViews.visible = true;
			
			
		}
		
		public function showExperimentDownloads():void {
			
			selectedNode = browseTree.selectedItem.parent();
			selectTreeNode();
			
			for each (var item:Object in analysisNumbers) {
				if (item.data == selectedAnalysis.@number) {
					browseView.analysisNumberCombo.selectedItem = item;
					break;
				}
			}
			
			
			theViews.selectedChild = browseView;
			browseView.theViews.selectedChild = browseView.downloadView;
			browseView.refreshButtonStack();
			

		}
		
		public function refreshAnalysisNumbers(analysisList:XMLListCollection):void {
	    	analysisNumbers.removeAll();
	    	browseView.analysisNumberCombo.selectedIndex = -1;
	
			var blankItem:Object = new Object();
			blankItem.data = "";
			blankItem.label = "";
	    	analysisNumbers.addItem(blankItem);
	    	
	    	for(var x:Number = 0; x < analysisList.length; x++) {
	    		var item:Object = analysisList.getItemAt(x, 0);
	    		
	    		var found:Boolean = false;
	    		for(var i:Number = 0; i < analysisNumbers.length; i++) {
	    			if (analysisNumbers.getItemAt(i).label == item.@number) {
	    				found = true;
	    				break;
	    			}
	    		}
	    		if (found == false) {
	    			var newItem:Object = new Object();
	    			newItem.data = item.@number;
	    			newItem.label = item.@number;
	    			analysisNumbers.addItem(newItem);
	    		}
	    	}
	    	analysisNumbers.refresh();
	    }		
		
		public function sortAnalysisNumbers(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var num1:String = obj1.label;
				var num2:String = obj2.label;
				
				if (num1 == 'Other') {
					return 1;
				} else if (num2 == 'Other') {
					return  -1;
				} else {
					if (num1 < num2) {
						return -1;
					} else if (num1 > num2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}

		public function filterAnalysisList(item:Object):Boolean {
        	var keep:Boolean = true;
        	if (browseView.analysisNumberCombo.selectedItem != null && browseView.analysisNumberCombo.selectedItem.label != "") {
        		keep = false; 
        		if (item.@number == browseView.analysisNumberCombo.selectedItem.label) {
        			keep = true;
        		}
        	}   
        	return keep;
        }
        
 

		
		private function onGetAnalysis(event:ResultEvent):void {
			if (getAnalysis.lastResult.name() == "SUCCESS") {
				Alert.show("Analysis not found");
				parentApplication.theViews.selectedIndex = 0;
        		return;
        	}
			if (getAnalysis.lastResult.name() != "OpenAnalysisList") {
        		Alert.show(getAnalysis.lastResult..ACTMESSAGE.@TEXT);
        		return;
        	}
        	

        	
		    if (this.showDownloads) {
		    	this.showExperimentDownloads();
		    	theViews.visible = true;
		    	this.showDownloads = false;
		    	return;
		    }

			if (selectedIdAnalysis != null) {
				selectedAnalysis = getAnalysis.lastResult.Analysis.(@idAnalysis == selectedIdAnalysis);			
			} else {
				selectedAnalysis = getAnalysis.lastResult.Analysis.(@number == selectedAnalysisNumber);
				
				var params:Object = new Object();
				params.idProject = selectedAnalysis.@idProject;
				params.showSamples = "N";
				params.showCategory = "N";
				params.searchPublicProjects = 'N';
				getAnalysisGroupList.send(params);
				
			    detailView.title = "Analysis " + selectedAnalysisNumber;
			    
			    
			}
		    theViews.selectedChild = detailView;
			detailView.setupForm();

			if (selectedAnalysis.@canDelete == "Y") {
				this.deleteButton.enabled = true;
			} else {
				this.deleteButton.enabled = false;
			}
			browseView.refreshButtonStack();

		    theViews.visible = true;
		}

		private function onGetAnalysisGroup(event:ResultEvent):void {
			selectedAnalysisGroup = getAnalysisGroup.lastResult.AnalysisGroup.(@idAnalysisGroup == selectedIdAnalysisGroup);
			browseView.refreshDownloadList();
			browseView.refreshTrackList();
			browseView.refreshVisibilityList();
			
			browseView.refreshButtonStack();
			if (!browseView.theViews.contains(browseView.analysisGroupView)) {
				browseView.theViews.addChild(browseView.analysisGroupView);
			}
			browseView.analysisGroupView.checkSecurity();

			if (selectedAnalysisGroup.@canDelete == "Y") {
				this.deleteButton.enabled = true;
			} else {
				this.deleteButton.enabled = false;
			}
		}
		
		private function onGetNewAnalysisGroup(event:ResultEvent):void {
			if (getNewAnalysisGroup.lastResult.name() == "OpenAnalysisGroupList") {
				 selectedAnalysisGroup = getNewAnalysisGroup.lastResult.AnalysisGroup.(@idAnalysisGroup == 0);
				 selectedAnalysisGroup.@idAppUser = parentApplication.getIdAppUser();
				 selectedAnalysisGroup.@idLab = selectedIdLab;
				 this.analysisGroupWindow = AnalysisGroupWindow(PopUpManager.createPopUp(this, AnalysisGroupWindow, true));
				 
				 var selectedLabNode:Object = parentApplication.getLabList.lastResult.Lab.(@idLab == browseLabCombo.selectedItem.@idLab);
				 this.analysisGroupWindow.labCombo.selectedItem = selectedLabNode;
				 
				 PopUpManager.centerPopUp(this.analysisGroupWindow);		
				
			} else {
				mx.controls.Alert.show(getNewAnalysisGroup.lastResult..ACTMESSAGE.@TEXT, "Get new analysis group failed");
			}
		}
		

		public function getTreeIcon(item:Object):Class {
				if (item.name() == "Lab") {
					return parentApplication.iconGroup;
				} else if (item.name() == "AnalysisGroup") {
					return parentApplication.iconProject;
				} else if (item.name() == "Analysis") {
					return parentApplication.iconAnalysis;
				} else {
					return parentApplication.iconAnalysis;
				}
		}

		public function getTreeLabel(item:Object):String {
				if (item.name() == "Analysis") { 
					return item.@number + " (" + item.@name + ")";
				} else {
					return item.@label;
				}
		}
		
		public function refreshAnalysis():void {
			this.browseTree.selectedItem = null;
			getAnalysisGroupList.send();
		}
		
		public function initializeAnalysis():void {
			if (parentApplication.hasPermission('canAccessAnyObject')) {
			} else {
				if (getAnalysisGroupList.lastResult == null ||
				    selectedAnalysisNumber != null) {
				    collapseAllBrowseNodes();
				    selectedAnalysisNumber = null;
					refreshAnalysis();
				}
				
			}
		}


		public function promptToDelete():void {
			if (selectedAnalysis != null) {
				Alert.show("Delete analysis " + selectedAnalysis.@name + "?", 
							null, 
							(Alert.YES | Alert.NO), this, 
							onPromptToDelete);
				
			} else if (selectedAnalysisGroup != null) {
				Alert.show("Delete analysis group " + selectedAnalysisGroup.@name + "?", 
							null, 
							(Alert.YES | Alert.NO), this, 
							onPromptToDelete);
				
			}
		}
		
		
	    public function onPromptToDelete(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
			    var params:Object = new Object();
		    	if (selectedAnalysis != null) {
			    	params.idAnalysis = selectedAnalysis.@idAnalysis;
		    		deleteAnalysis.send(params);
		    	} else if (selectedAnalysisGroup != null) {
			    	params.idAnalysisGroup = selectedAnalysisGroup.@idAnalysisGroup;
		    		deleteAnalysisGroup.send(params);
		    	}
            }
	    }
	    
	    private function onDeleteAnalysis(event:ResultEvent): void {
	    	if (deleteAnalysis.lastResult.name() == "SUCCESS") {
        		selectedAnalysisGroup = null;
        		selectedIdAnalysisGroup = null;
        		browseView.buttonStack.selectedChild = browseView.browseButtonView;
	    		this.refreshAnalysis();
	    		theViews.selectedChild = browseView;
	    	} else {
	    		Alert.show(deleteAnalysis.lastResult..ACTMESSAGE.@TEXT);
	    	}
	    }
	    
	    
	    private function onDeleteAnalysisGroup(event:ResultEvent): void {
	    	if (deleteAnalysisGroup.lastResult.name() == "SUCCESS") {
        		selectedAnalysisGroup = null;
        		selectedIdAnalysisGroup = null;
        		browseView.buttonStack.selectedChild = browseView.browseButtonView;
	    		this.refreshAnalysis();
	    		theViews.selectedChild = browseView;
	    	} else {
	    		Alert.show(deleteAnalysisGroup.lastResult..ACTMESSAGE.@TEXT);
	    	}
	    }
	    

		
       ]]>
    </mx:Script>
   	  <mx:ArrayCollection id="analysisNumbers"  sort="{requestNumberSorter}"/>
	  <mx:Sort id="requestNumberSorter" compareFunction="sortAnalysisNumbers" unique="true"/>
    
	<mx:DateFormatter id="dateFormatter" formatString="YYYYMMDD"/>

    
	<mx:HDividedBox height="100%" width="100%">
	
	
			
			<mx:Panel label="Experiments" width="235" height="100%" title="Analysis" id="navPanel" >
				<mx:VBox id="navContainer" width="100%" height="100%" verticalGap="0" paddingTop="4" label="Experiments">
					<mx:VBox id="treeContainer"  dropShadowEnabled="true" width="100%" height="100%" paddingLeft="2" verticalGap="0" >
						<mx:Tree width="100%" height="100%" 
							dataProvider="{getAnalysisGroupList.lastResult}" 
							showRoot="false" 
							id="browseTree" click="onBrowseTree();" 
							borderStyle="none"
							labelField="@label"
							labelFunction="getTreeLabel"
							iconFunction="getTreeIcon" selectionColor="#FBF5B5" rollOverColor="#CECECE" backgroundAlpha="1"></mx:Tree>
						<mx:CheckBox label="Show public analysis" id="searchPublicProjectsCheckbox"/>
						
					</mx:VBox>

				</mx:VBox>
					<mx:ControlBar width="100%">
						        <mx:Button id="newAnalysisGroupButton" click="getNewAnalysisGroup.send()" icon="@Embed('../../assets/folder_add.png')" 
						        	label="New.." paddingLeft="1" paddingRight="0" horizontalGap="0" letterSpacing=".3" toolTip="New analysis group..." width="58" enabled="false">
						        	        <mx:disabledIcon>@Embed(source='../../assets/folder_add_disable.png')</mx:disabledIcon>
						        </mx:Button>
						        <mx:Button id="newAnalysisButton" click="getNewAnalysisGroup.send()" icon="@Embed('../../assets/map_add.png')" 
						        	label="New.." paddingLeft="1" paddingRight="0" horizontalGap="0" letterSpacing=".3" toolTip="New analysis..." width="58" enabled="false" disabledIcon="@Embed(source='../../assets/map_add_disable.png')"/>
						        <mx:Button id="deleteButton" icon="@Embed('../../assets/delete.png')" 
						        	click="promptToDelete()"
						        	label=""  letterSpacing=".3" horizontalGap="0" toolTip="Delete"  enabled="false">
						        	        <mx:disabledIcon>@Embed(source='../../assets/delete_disable.png')</mx:disabledIcon>
						        </mx:Button>
						        <mx:Button icon="@Embed(source='../../assets/action_refresh.gif')" click="this.refreshAnalysis()"/>
								
					</mx:ControlBar>
			</mx:Panel> 

 

	   

		
	     <mx:ViewStack id="theViews" creationPolicy="all" visible="true" width="100%" height="100%">

	        <analysis:AnalysisBrowseView id="browseView"  width="100%" height="100%">
	        </analysis:AnalysisBrowseView>

	        <analysis:AnalysisDetailView id="detailView" width="100%" height="100%">
	        </analysis:AnalysisDetailView>
	        


         </mx:ViewStack>
		
	</mx:HDividedBox>
	
	<mx:states>
		<mx:State name="GuestState">
			<mx:RemoveChild  target="{searchPublicProjectsCheckbox}"/>
		</mx:State>
		
		<mx:State name="AdminState">
			<mx:AddChild position="firstChild"  relativeTo="{navContainer}">
					<mx:VBox verticalGap="0" width="100%">
				        <mx:Label id="groupLabel" visible="true" text="Select group to show experiments:" paddingBottom="0"/>
						<mx:ComboBox id="browseLabCombo" 
							labelField="@name"
							dataProvider="{parentApplication.promptedLabList}"
							 change="getAnalysisGroupList.send()"  
							 visible="true"  width="200">
						</mx:ComboBox>				
				        <mx:Spacer height="6"/>
						
					</mx:VBox>
			</mx:AddChild>
			<mx:RemoveChild  target="{searchPublicProjectsCheckbox}"/>
			<mx:SetProperty target="{newAnalysisGroupButton}" name="enabled" value="true"/>
			<mx:SetProperty target="{newAnalysisButton}" name="enabled" value="true"/>
		</mx:State>

		
	</mx:states>
	

    
</mx:Canvas>
