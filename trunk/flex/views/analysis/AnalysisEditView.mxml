<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"     
    xmlns:views="views.*" 
    xmlns:util="views.util.*" 
    xmlns:analysis="views.analysis.*"
    close="{onCloseWindow()}"
    showEffect="{parentApplication.fadeIn}" hideEffect="{parentApplication.fadeOut}" 
	title="Edit Analysis" 
	width="100%" height="100%" 
	headerHeight="22" paddingBottom="2" paddingLeft="1" paddingRight="1">

  <mx:HTTPService  
    id="getExperimentPickList" 
    url="GetExperimentPickList.gx"
    resultFormat="e4x"
    showBusyCursor="false"
    result="onGetExperimentPickList(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to get project request list', event)"
    method="POST" 
    useProxy="false">
    <mx:request>
            <idLab>{analysis.@idLab}</idLab> 
            <showSamples>N</showSamples>
            <showCategory>N</showCategory>
            <showMyLabsAlways>N</showMyLabsAlways>
            <searchPublicProjects>N</searchPublicProjects>
    </mx:request>
   </mx:HTTPService>
   
   <mx:HTTPService  
    id="saveAnalysis" 
    url="SaveAnalysis.gx"
    resultFormat="e4x"
    showBusyCursor="false"
    result="onSaveAnalysis(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to save analysis', event)"
    method="POST" 
    useProxy="false">
   </mx:HTTPService>
  
   <mx:HTTPService  
    id="getAnalysis" 
    url="GetAnalysis.gx"
    destination="getAnalysis"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetAnalysis(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get analysis', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
     <mx:HTTPService  
    id="getAnalysisAfterUpload" 
    url="GetAnalysis.gx"
    destination="getAnalysis"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetAnalysisAfterUpload(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get analysis after upload', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="getRequest" 
    url="GetRequest.gx"
    destination="getRequest"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetRequest(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to get request', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
  
  <mx:HTTPService  
    id="getAnalysisUploadURL" 
    url="UploadAnalysisURLServlet.gx"
    resultFormat="e4x"
    showBusyCursor="true" 
    result="onGetAnalysisUploadURL(event)" 
	fault="parentApplication.onFailHttpRequest('Failed to get analysis upload URL', event)"
    method="POST"
    useProxy="false">
  </mx:HTTPService>
     	 
<mx:Script>
	<![CDATA[
		import mx.events.CollectionEvent;
		import views.protocol.ProtocolsView;
		import views.experiment.ExperimentDetailView;
		import mx.managers.PopUpManager;
		import mx.events.CloseEvent;
		import mx.controls.Alert;
		import mx.rpc.events.ResultEvent;
		import mx.events.DragEvent;
		import mx.events.DragEvent;
		import mx.managers.DragManager;
        import mx.core.DragSource;
        import mx.core.UIComponent;
        import mx.controls.listClasses.ListBase;
        import views.util.MultiFileUpload;
        import views.experiment.ExperimentDetailView;
        import hci.flex.dictionary.DictionaryEvent;
        import hci.flex.dictionary.DictionaryEditor;
        import hci.flex.controls.DropdownLabel;
        import mx.events.CollectionEventKind;
        import mx.events.PropertyChangeEvent;
        	
	    [Bindable]
		private var analysis:Object;
		
		[Bindable]
		public var selectedExperiment:Object; 
		
		private var multiFileUpload:MultiFileUpload;
        private var UPLOAD_SERVLET_URL:String = "UploadAnalysisFileServlet.gx";
        
        private var experimentDetailWindow:ExperimentDetailView;  
        
        private var dictionaryEditor:DictionaryEditor; 
        
        private var protocolEditor:views.protocol.ProtocolsView;
        
        private function onCloseWindow():void {
        	if (dirty.isDirty()) {
        		promptToCloseOnDirty();
        	} else if (uploadButton.enabled) {
        		promptToCloseOnUploadPending();
        	}else {
        		PopUpManager.removePopUp(this);
        	}
        }
		private function promptToCloseOnDirty():void {
			Alert.show( "The analysis has not been saved.  Do you want the changes to be saved before closing window?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToSaveAndClose,						
						parentApplication.iconWarning);
		}
		private function promptToCloseOnUploadPending():void {
			Alert.show( "Some analysis files have not been uploaded. Upload files before closing window?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToSaveAndClose,						
						parentApplication.iconWarning);
		}
		
		private function onPromptToSaveAndClose(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	this.validateAndSaveAnalysis();
            	PopUpManager.removePopUp(this);            	
            } else {
            	PopUpManager.removePopUp(this);            	
            }
        }	
		
		public function setupEditForm(theAnalysis:Object):void {
			initializeDataProviders();

			
			this.analysis = theAnalysis;

			
			// Build hybs & lanes collection.  Assign the idRequest to the Hybridization
			// and SequenceLane node.

			hybs = new XMLListCollection();
			hybs.source = analysis..AnalysisExperimentItem..Hybridization;			

			lanes = new XMLListCollection();
			lanes.source = analysis..AnalysisExperimentItem..SequenceLane;

			var item:Object;
			for each(item in analysis..AnalysisExperimentItem) {
				for each (var hyb:Object in item..Hybridization) {
						hyb.@idRequest = item.@idRequest;
				}
				for each (var lane:Object in item..SequenceLane) {
						lane.@idRequest = item.@idRequest;
				}
			}

			

			
			labCombo.selectedItem              = parentApplication.getLabList.lastResult.Lab.(@idLab == analysis.@idLab);
			analysisTypeCombo.selectedItem     = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.AnalysisType', analysis.@idAnalysisType);
			analysisProtocolCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.AnalysisProtocol', analysis.@idAnalysisProtocol);
			organismCombo.selectedItem         = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Organism', analysis.@idOrganism);
			filteredGenomeBuildList.refresh();
			genomeBuildCombo.selectedItem      = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.GenomeBuild', analysis.@idGenomeBuild);
			visibilityCombo.selectedItem       = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Visibility',  analysis.@codeVisibility);
			
			
			this.getExperimentPickList.send();			
			
			
			files.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingFilesChange);
			
			getAnalysisUploadURL.send();
			
		}
		
		private function onGetAnalysisUploadURL(event:ResultEvent):void {
			if (getAnalysisUploadURL.lastResult.name() == "UploadAnalysisURL") {
				var url:String = getAnalysisUploadURL.lastResult.@url;
				initializeFileUploadControl(url);
			}
		}
		
		public function initializeDataProviders():void {
			filteredGenomeBuildList.source = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.GenomeBuild');
			filteredGenomeBuildList.filterFunction = filterGenomeBuild;
			
			
			analysisTypeCombo.dataProvider     = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.AnalysisType');								
			analysisProtocolCombo.dataProvider = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.AnalysisProtocol');								
			organismCombo.dataProvider         = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.Organism');							
			genomeBuildCombo.dataProvider      = filteredGenomeBuildList;								

		}
		
		private function nextTab():void {
			theTab.selectedIndex++;
		}
		
		private function previousTab():void {
			if (theTab.selectedIndex > 0) {
				theTab.selectedIndex--;				
			}
		}
		private function addAnalysisGroup():void {
			dirty.setDirty();
			var node:XML = new XML("<AnalysisGroup " +
			    " idAnalysisGroup='" + analysisGroupCombo.selectedItem.@idAnalysisGroup + "'" +
			    " name='"            + analysisGroupCombo.selectedItem.@name + "'" +
				"/>");
			analysisGroups.addItem(node);
		}

		private function removeAnalysisGroup():void {
			dirty.setDirty();
			if (analysisGroupGrid.selectedIndex != -1) {
				analysisGroups.removeItemAt(analysisGroupGrid.selectedIndex);
			}
		}
		private function addExperimentItem(item:Object):void {
			dirty.setDirty();
			var node:XML;
			if (item.@type == "SequenceLane") {
				node = new XML("<SequenceLane " +
			    	" number ='" + item.@itemNumber + "'" +
			    	" createDate ='" + item.@createDate + "'" + 
			    	" idRequest ='" + item.@idRequest + "'" +
			    	" idOrganism ='" + item.@idOrganism + "'" +
			    	" idSample ='" + item.@idSample + "'" +
			    	" idSequenceLane ='" + item.@idSequenceLane + "'" +
			    	" idNumberSequencingCycles ='" + item.@idNumberSequencingCycles + "'" +
			    	" idSeqRunType ='" + item.@idSeqRunType + "'" +
			    	" sampleNumber ='" + item.@sampleNumber1 + "'" +
			    	" flowCellNumber ='" + item.@flowCellNumber + "'" +
			    	" flowCellChannelNumber ='" + item.@flowCellChannelNumber  + "'" +
			    	" idGenomeBuildAlignTo ='" + item.@idGenomeBuildAlignTo + "'" +
			    	"/>");
			    // Sample names and other text may have special characters.  Assign this
				// way to avoid malformed XML error.
				node.@label = item.@label;
				node.@sampleName = item.@sampleName1;
				node.@analysisInstructions = item.@analysisInstructions;
				var found:Boolean = false;
				for each(var lane:Object in lanes) {
					if (lane.@number == item.@itemNumber) {
						found = true;
						break;
					}
				} 
				if (!found) {
					lanes.addItem(node);
				}
				this.experimentItemStack.selectedChild = lanesView;	
			} else {
				node = new XML("<Hybridization " +
			    	" number ='" + item.@itemNumber + "'" +
			    	" idRequest ='" + item.@idRequest + "'" +
			    	" idHybridization ='" + item.@idHybridization + "'" +
			    	" sampleNumber1 ='" + item.@sampleNumber1 + "'" +
			    	" sampleNumber2 ='" + item.@sampleNumber2 + "'" +
			    	" slideDesign ='" + item.@slideDesign + "'" +
			    	" idSlideDesign ='" + item.@idSlideDesign + "'" +
					"/>");
				// Sample names may have special characters.  Assign this
				// way to avoid malformed XML error.
				node.@label = item.@label;
				node.@sampleName1 = item.@sampleName1;
				node.@sampleName2 = item.@sampleName2;	
				for each(var hyb:Object in hybs) {
					if (hyb.@number == item.@itemNumber) {
						found = true;
						break;
					}
				}
				if (!found) {
					hybs.addItem(node);
				}
				this.experimentItemStack.selectedChild = hybsView;	
			}
		}
		
		private function promptToRemoveAllExperimentItems():void {
			Alert.show( "Remove all links to experiment items?",
						"Confirm",
						(Alert.YES | Alert.NO), this, 
						onPromptToRemoveAllExperimentItems,						
						parentApplication.iconWarning);
		}
		private function onPromptToRemoveAllExperimentItems(event:CloseEvent):void {
			if (event.detail == Alert.YES) {
				removeAllExperimentItems();
			}
		}
		private function removeAllExperimentItems():void {
			this.dirty.setDirty();
			hybs.removeAll();
			lanes.removeAll();
		}
		private function removeExperimentItem():void {
			dirty.setDirty();
			if (hybsGrid.selectedItem != null) {
				hybs.removeItemAt(hybsGrid.selectedIndex);				
			} else if (lanesGrid.selectedItem != null) {
				lanes.removeItemAt(lanesGrid.selectedIndex);								
			}
		}
		private function promptToRemoveAllAnalysisFiles():void {
			Alert.show( "Remove all analysis files from server?",
						"Confirm",
						(Alert.YES | Alert.NO), this, 
						onPromptToRemoveAllAnalysisFiles,						
						parentApplication.iconWarning);
		}
		private function onPromptToRemoveAllAnalysisFiles(event:CloseEvent):void {
			if (event.detail == Alert.YES) {
				removeAllAnalysisFiles();
			}
		}
		private function removeAllAnalysisFiles():void {
			this.dirty.setDirty();
			files.removeAll();
		}
		private function removeAnalysisFile():void {
			dirty.setDirty();
			if (this.filesGrid.selectedIndex != -1) {
				files.removeItemAt(filesGrid.selectedIndex);
			}
		}
		private function onGetExperimentPickList(event:ResultEvent): void {
			callLater(expandAllNodes);
  		}
  		
  		public function expandAllNodes():void
  		{
  			experimentTree.expandItem(getExperimentPickList.lastResult, true);
  			for each(var lab:Object in getExperimentPickList.lastResult..Lab) {
  				experimentTree.expandItem(lab, true);
  			}
  			for each(var p:Object in getExperimentPickList.lastResult..Project) {
  				experimentTree.expandItem(p, true);
  			}
  			experimentTree.validateNow();
  		}


   	 	private function getLanesGridRowNumber(item:Object,col:int):String
	    {
	    	var x:int = lanesGrid.dataProvider.getItemIndex(item) + 1;
	       	return String(x);
	    } 
   	 	private function getHybsGridRowNumber(item:Object,col:int):String
	    {
	    	var x:int = hybsGrid.dataProvider.getItemIndex(item) + 1;
	       	return String(x);
	    } 
   	 	private function getFilesGridRowNumber(item:Object,col:int):String
	    {
	    	var x:int = filesGrid.dataProvider.getItemIndex(item) + 1;
	       	return String(x);
	    } 		
		private function promptToCancel():void {
			Alert.show( "The analysis has not been saved.  Are you sure you want to quit?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToCancel,						
						parentApplication.iconWarning);
		}
		
		private function onPromptToCancel(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	cancelAnalysis();
            }
        }	
        
        public function cancelAnalysis():void {
        }     
        
        private function validateAndSaveAnalysis():void {
        	initializeFileUploadParameters();
        	
        	// Check for required fields
        	if (analysisName.text == "") {
        		analysisName.setFocus();
        		Alert.show("Please enter an analysis name.");        		
        		return;
        	} else if (labCombo.selectedItem == null || labCombo.selectedItem.@idLab == "") {
        		labCombo.setFocus();
        		Alert.show("Please select a group.");
        		return;        		
        	} else if (organismCombo.selectedItem == null || organismCombo.selectedItem.@value == "") {
        		organismCombo.setFocus();
        		Alert.show("Please select an organism.");
        		return;        		
        	} else if (analysisGroups.length == 0) {
        		analysisGroupCombo.setFocus();
        		Alert.show("Please choose at least one analysis group.");
        		return;
        	}
        	        	

			var params:Object = new Object();

			params.idAnalysis         = analysis.@idAnalysis;
			params.name               = this.analysisName.text;
			params.description        = this.description.text;
			params.idLab              = this.labCombo.selectedItem.@idLab;
			params.idAnalysisType     = this.analysisTypeCombo.selectedItem.@value;
			params.idAnalysisProtocol = this.analysisProtocolCombo.selectedItem.@value;
			params.idOrganism         = this.organismCombo.selectedItem.@value;
			params.idGenomeBuild      = this.genomeBuildCombo.selectedItem != null ? this.genomeBuildCombo.selectedItem.@value : "";
			params.codeVisibilityToUpdate = this.visibilityCombo.selectedItem != null ? this.visibilityCombo.selectedItem.@value : "";
			
			params.hybsXMLString  = "<hybs>" + hybs.toXMLString() + "</hybs>";
			params.lanesXMLString = "<lanes>" + lanes.toXMLString() + "</lanes>";
			params.analysisGroupsXMLString = "<analysisGroups>" + analysisGroups.toXMLString() + "</analysisGroups>";
			params.analysisFilesXMLString = "<analysisFiles>" +  files.toXMLString() + "</analysisFiles>";
			 
			 

			saveAnalysis.send(params);			

        }   	
        
		private function onSaveAnalysis(event:ResultEvent):void {
			if (saveAnalysis.lastResult.name() == "SUCCESS") {

				// start file uploads
				this.uploadButton.visible = true;
				this.multiFileUpload.startUpload();


				dirty.resetDirty();

				// refresh analysis
			 	var parms:Object = new Object();
			 	parms.idAnalysis = analysis.@idAnalysis;
			 	getAnalysis.send(parms);
			 	
			 	parentApplication.navAnalysisView.showEditView = true;
				parentApplication.navAnalysisView.detailView.refreshSavedAnalysis(analysis.@idAnalysis);			 				
			} else {
				Alert.show(saveAnalysis.lastResult..ACTMESSAGE.@TEXT);
			}
		}

		private function onGetAnalysis(event:ResultEvent):void {
			analysis = getAnalysis.lastResult..Analysis.(@idAnalysis = analysis.@idAnalysis);
		}

		private function onGetAnalysisAfterUpload(event:ResultEvent):void {
			analysis.files = getAnalysisAfterUpload.lastResult..Analysis.(@idAnalysis = analysis.@idAnalysis).files;
			files.source = analysis..AnalysisFile;
		}
		        
        private function validateAndSubmitAnalysis():void {        	
        }   	
        
        public function getExperimentTreeIcon(item:Object):Class { 
				if (item.name() == "Lab") {
					return parentApplication.iconGroup;
				} else if (item.name() == "Project") {
					return parentApplication.iconProject;
				} else if (item.name() == "Request" && item.@codeRequestCategory == "QC") {
					return parentApplication.iconQC;
				} else if (item.name() == "Request" && item.@codeRequestCategory == "AFFY") {
					return parentApplication.iconMicroarrayAffy;
				} else if (item.name() == "Request" && item.@codeRequestCategory == "AGIL") {
					return parentApplication.iconMicroarray;
				} else if (item.name() == "Request" && item.@codeRequestCategory == "SOLEXA") {
					return parentApplication.iconSolexa;
				} else if (item.name() == "Request" ) {
					return parentApplication.iconFlask;
				} else {
					return parentApplication.iconGreenBullet;
				}
		}

		public function getExperimentTreeLabel(item:Object):String { 
			return item.@label;
		}

		private function onDragEnter( event:DragEvent ) : void
		{ 
     		if( event.dragInitiator is Tree ) {
         		var ds:DragSource = event.dragSource;
         		if( !ds.hasFormat("treeItems") ) return; // no useful data
         		var items:Array = ds.dataForFormat("treeItems") as Array;
         		for(var i:Number=0; i < items.length; i++) {
             		var item:XML = XML(items[i]);
             		if( item.name() != "Request" && item.name() != "Item" ) {
             			return; // not what we want
             		}
         		}    
     		} 

     		// if the tree passes or the dragInitiator is not a tree, accept the drop
		     DragManager.acceptDragDrop(UIComponent(event.currentTarget)); 
		}
		private function onDragOver( event:DragEvent ) : void
		{
		     if( event.dragInitiator is Tree ) {
		         DragManager.showFeedback(DragManager.COPY);
		     } else {
		         if (event.ctrlKey)
		             DragManager.showFeedback(DragManager.COPY);
		         else if (event.shiftKey)
		             DragManager.showFeedback(DragManager.LINK);
		         else {
		             DragManager.showFeedback(DragManager.MOVE);
		         }
		     }
		}
		
		private function onDragExit( event:DragEvent ) : void
		{
		     var dropTarget:ListBase=ListBase(event.currentTarget); 
		     dropTarget.hideDropFeedback(event);
		}
		
	  	public function onDragDropExperimentItem(event:DragEvent) : void
		{
	       // retrieve the data associated with the "items" format. This will be the data that
	       // the dragInitiator has copied into the DragSource.
	       var items:Array = event.dragSource.dataForFormat("treeItems") as Array;
	
	       // take the dragged tree items and add them to the experiment items
	       // collection
	       for(var i:Number=0; i < items.length; i++) {
	       	if (items[i].name() == "Item") {
		    	addExperimentItem(items[i]);	       			
	       	} else if (items[i].name() == "Request") {
	       		for each(var experimentItem:Object in items[i]..Item) {
	       			addExperimentItem(experimentItem);
	       		}
	       	}
	       }
	       
	       
	       // Don't allow flex to do any default moves to the data.  
	       // We handle it in the code above.
	       event.preventDefault();
	       
		}
		public function initializeFileUploadParameters():void{
           var postVariables:URLVariables = new URLVariables;
		   postVariables.idAnalysis = this.analysis.@idAnalysis.toString(); 
		   multiFileUpload.setUploadURLParameters(postVariables);  
		}
		
		public function initializeFileUploadControl(uploadServletURL:String):void{
            
            if (multiFileUpload == null) {
		         
		        multiFileUpload = new MultiFileUpload(
		            this.uploadFilesGrid,
		            this.uploadBrowseButton,
		            this.uploadClearButton,
		            this.uploadDeleteButton,
		            this.uploadButton,
		            this.uploadProgressBar,
		            uploadServletURL,
		            postVariables,
		            0,
		            null
		            );
		        
		       multiFileUpload.addEventListener(Event.COMPLETE, onUploadFinished);
		       multiFileUpload.addEventListener(Event.OPEN, onChooseFileToUpload);
            	
            } else {
            	var postVariables:URLVariables = new URLVariables;
		        postVariables.idAnalysis = this.analysis.@idAnalysis.toString(); 
		        multiFileUpload.setUploadURLParameters(postVariables);  
            }
          
       }
       public function onUploadFinished(event:Event):void{
				// refresh analysis
			 	var parms:Object = new Object();
			 	parms.idAnalysis = analysis.@idAnalysis;
			 	getAnalysisAfterUpload.send(parms);
			 	
       }	
       
       public function onChooseFileToUpload(event:Event):void {
       		//dirty.setDirty();
       }
        
        private function filterGenomeBuild(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}
        	if (item.@isActive == 'N') {
        		return false;
        	}
        	var doesMatch:Boolean = false;
        	if (this.organismCombo.selectedItem != null && 
        	    this.organismCombo.selectedItem.@value != null  &&
        	    this.organismCombo.selectedItem.@value != "") {
        	    if (item.@idOrganism.toString() == this.organismCombo.selectedItem.@value.toString()) {
        	    	doesMatch = true;
        	    }
        	}
    	   	return doesMatch;
    	}
       	
       private function showExperimentDetailWindow():void {  
       		if (this.experimentTree.selectedItem.name() == "Request" ||
       		    this.experimentTree.selectedItem.name() == "Item") {
	       		var params:Object = new Object();
    	   		params.idRequest = this.experimentTree.selectedItem.@idRequest;
				getRequest.send(params);		 
       		}
       		
		}

		private function onGetRequest(event:ResultEvent):void {
			selectedExperiment = getRequest.lastResult..Request.(@idRequest == this.experimentTree.selectedItem.@idRequest);

			this.experimentDetailWindow = ExperimentDetailView(PopUpManager.createPopUp(parentApplication.mainArea, ExperimentDetailView, false));
			experimentDetailWindow.width  = 800;
			experimentDetailWindow.height = 500;			
			experimentDetailWindow.setupForm(selectedExperiment); 
		 	PopUpManager.centerPopUp(this.experimentDetailWindow);	
		 	this.experimentDetailWindow.buttonBar.visible = false;	
		}
		
		private function underlyingFilesChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets 
				return;
			}
			
			var commentEdit:Boolean = false;
			for each(var e:Object in event.items) {
				if (e is PropertyChangeEvent) {
					var pe:PropertyChangeEvent = PropertyChangeEvent(e);
					if (pe.property == "@comments") {
						commentEdit = true;
						break;
					}
				}
			}
			// Only process comment edits
			if (commentEdit) {
				dirty.setDirty();
			}			
		}

		
        //
        // Edit organism dictionary
        //
		private function editOrganism():void {
			dictionaryEditor = DictionaryEditor(PopUpManager.createPopUp(parentApplication.mainArea, DictionaryEditor, true));
			dictionaryEditor.addEventListener(DictionaryEvent.DICTIONARY_WINDOW_INITIALIZED,   
			                          onDictionaryOrganismInitialized);
			dictionaryEditor.addEventListener(DictionaryEvent.DICTIONARY_WINDOW_DICTIONARY_SELECTED, 
			                          onDictionaryOrganismSelected);			
			parentApplication.dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_LOADED,   
			                                                      onDictionaryOrganismRefreshed);
			PopUpManager.centerPopUp(dictionaryEditor);
		}
          
       	private function onDictionaryOrganismInitialized(event:Event):void{
			dictionaryEditor.selectDictionary("hci.gnomex.model.Organism");
        }	
       	private function onDictionaryOrganismRefreshed(event:Event):void{
			organismCombo.dataProvider     = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.Organism');								
			organismCombo.selectedItem     = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Organism', analysis.@idOrganism);				
        }	
       	private function onDictionaryOrganismSelected(event:Event):void{
       		if (this.organismCombo.selectedItem != null && this.organismCombo.selectedItem.@value != "") {
       			dictionaryEditor.selectDictionaryEntry(organismCombo.selectedItem);
       		}
        }	
		
        //
        // Edit genome build dictionary
        //
		private function editGenomeBuild():void {
			dictionaryEditor = DictionaryEditor(PopUpManager.createPopUp(parentApplication.mainArea, DictionaryEditor, true));
			dictionaryEditor.addEventListener(DictionaryEvent.DICTIONARY_WINDOW_INITIALIZED,   
			                                  onDictionaryGenomeBuildInitialized);
			dictionaryEditor.addEventListener(DictionaryEvent.DICTIONARY_WINDOW_DICTIONARY_SELECTED, 
			                                   onDictionaryGenomeBuildSelected);			
			parentApplication.dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_LOADED,   
			                                                     onDictionaryGenomeBuildRefreshed);
			PopUpManager.centerPopUp(dictionaryEditor);
		}
          
       	public function onDictionaryGenomeBuildInitialized(event:Event):void{
			dictionaryEditor.selectDictionary("hci.gnomex.model.GenomeBuild");
        }	
       	public function onDictionaryGenomeBuildRefreshed(event:Event):void{
			filteredGenomeBuildList.source = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.GenomeBuild');
			filteredGenomeBuildList.filterFunction = filterGenomeBuild;
			
			
			this.genomeBuildCombo.dataProvider     = filteredGenomeBuildList;								
			this.genomeBuildCombo.selectedItem     = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.GenomeBuild', analysis.@idGenomeBuild);				
        }	
       	private function onDictionaryGenomeBuildSelected(event:Event):void{
       		if (this.genomeBuildCombo.selectedItem != null && this.genomeBuildCombo.selectedItem.@value != "") {
       			dictionaryEditor.selectDictionaryEntry(genomeBuildCombo.selectedItem);
       		}
        }	
        
        
        //
        // Edit analysis type dictionary
        //
		private function editAnalysisType():void {
			dictionaryEditor = DictionaryEditor(PopUpManager.createPopUp(parentApplication.mainArea, DictionaryEditor, true));
			dictionaryEditor.addEventListener(DictionaryEvent.DICTIONARY_WINDOW_INITIALIZED,   
			                                   onDictionaryAnalysisTypeInitialized);
			dictionaryEditor.addEventListener(DictionaryEvent.DICTIONARY_WINDOW_DICTIONARY_SELECTED, 
			                                   onDictionaryAnalysisTypeSelected);			
			parentApplication.dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_LOADED,   
			                                                     onDictionaryAnalysisTypeRefreshed);
			PopUpManager.centerPopUp(dictionaryEditor);
		}
       	private function onDictionaryAnalysisTypeInitialized(event:Event):void{
			dictionaryEditor.selectDictionary("hci.gnomex.model.AnalysisType");
        }          
       	private function onDictionaryAnalysisTypeRefreshed(event:Event):void{
			analysisTypeCombo.dataProvider     = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.AnalysisType');								
			analysisTypeCombo.selectedItem     = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.AnalysisType', analysis.@idAnalysisType);				
        }	
       	private function onDictionaryAnalysisTypeSelected(event:Event):void{
       		if (this.analysisTypeCombo.selectedItem != null && this.analysisTypeCombo.selectedItem.@value != "") {
       			dictionaryEditor.selectDictionaryEntry(analysisTypeCombo.selectedItem);
       		}
        }

        //
        // Edit analysis protocol dictionary
        //
		private function editAnalysisProtocol():void {
			protocolEditor = views.protocol.ProtocolsView(PopUpManager.createPopUp(parentApplication.mainArea, views.protocol.ProtocolsView, true));
			protocolEditor.width = 800;
			protocolEditor.height = 500;
			protocolEditor.bodyPanel.showCloseButton = true;
			protocolEditor.bodyPanel.addEventListener(Event.CLOSE, onCloseProtocolEditWindow);
			protocolEditor.initializeData('hci.gnomex.model.AnalysisProtocol');
			PopUpManager.centerPopUp(protocolEditor);
		}
		
		public function onCloseProtocolEditWindow(event:Event):void {
			parentApplication.dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_LOADED, onRefreshAnalysisProtocol);
			parentApplication.dictionaryManager.reload('hci.gnomex.model.AnalysisProtocol');
		}
		
		public function onRefreshAnalysisProtocol(event:Event):void {
			PopUpManager.removePopUp(protocolEditor);
			analysisProtocolCombo.dataProvider     = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.AnalysisProtocol');							
			analysisProtocolCombo.selectedItem     = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.AnalysisProtocol', analysis.@idAnalysisProtocol);
			parentApplication.dictionaryManager.removeEventListener(DictionaryEvent.DICTIONARY_LOADED, onRefreshAnalysisProtocol);				
		}
		
		private function showViewWindow():void {
            parentDocument.theViews.selectedChild = parentDocument.detailView;
            parentDocument.detailView.setupForm();
		}
		

	]]>
</mx:Script>

<mx:XMLListCollection  id="filteredGenomeBuildList"/>
<mx:XMLListCollection  id="analysisGroups" source="{analysis..AnalysisGroup}"/>
<mx:XMLListCollection  id="experimentItems" />
<mx:XMLListCollection  id="hybs"           />
<mx:XMLListCollection  id="lanes"         />
<mx:XMLListCollection  id="files"          source="{analysis..AnalysisFile}"/>
	<mx:HBox width="100%"  horizontalGap="5"  verticalAlign="top" horizontalAlign="left">
		<mx:VBox verticalGap="4" width="100%">
		                <mx:HBox horizontalGap="0" width="100%">
		                	<mx:Label text="Name" width="81" fontWeight="bold">
		                 	</mx:Label>
		                	<mx:TextInput text="{analysis.@name}" width="100%" change="dirty.setDirty();" id="analysisName"/>
		                </mx:HBox>
		         <mx:HBox verticalGap="4" horizontalGap="0" width="100%">
		                <mx:Label text="Submitted by"  width="81" fontWeight="bold"/>
		                <mx:Text text="{analysis.@ownerName}" width="100%"/> 
		         </mx:HBox>
		         <mx:HBox verticalGap="0" horizontalGap="0" width="100%">
		           <mx:Label text="Submit Date"  width="81" fontWeight="bold"/>
		           <mx:Text text="{analysis.@createDate}" width="100%"/>
		       </mx:HBox> 
		</mx:VBox>
		<mx:VBox verticalGap="4">
		<mx:HBox horizontalAlign="left" verticalAlign="top" horizontalGap="0">
			<mx:Label text="Group" width="60" textAlign="left" fontWeight="bold">
			</mx:Label>
			<mx:ComboBox  width="200" id="labCombo" 
				dataProvider="{parentApplication.promptedSubmitRequestLabList}" 
				selectedIndex="-1" labelField="@name"  change="dirty.setDirty();"/>
		</mx:HBox>
			<mx:HBox verticalGap="0" horizontalGap="0">
				<mx:Label text="Visibility" width="60" fontWeight="bold">
				</mx:Label>
				  <mx:ComboBox width="200" id="visibilityCombo" labelField="@display" change="dirty.setDirty();">
				     		<mx:dataProvider>{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Visibility').DictionaryEntry}</mx:dataProvider>
				     	  </mx:ComboBox>
			</mx:HBox>
		</mx:VBox>
	</mx:HBox>
	<mx:TabNavigator id="theTab" width="100%" height="100%" tabWidth="200">
		<mx:HDividedBox label="Description" width="100%" height="100%" horizontalGap="10">
			<mx:VBox paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4" verticalGap="10" width="100%" height="100%">
				<mx:HBox width="100%" height="100%">
					<mx:Label text="Description" width="100">
					</mx:Label>
					<mx:TextArea text="{analysis.@description}" width="100%" height="100%" change="dirty.setDirty();" id="description"/>
				</mx:HBox>
				<mx:HBox horizontalGap="10" width="100%">
					<mx:VBox paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="0" width="100%" height="100%" verticalGap="6">
					    <mx:HBox>
					    <mx:HBox verticalGap="0" horizontalGap="0">
					    	<mx:Label text="Organism" width="100" fontWeight="normal">
					    	</mx:Label>
					    	<mx:VBox verticalGap="0" horizontalAlign="right">
					    		<mx:ComboBox  width="230" id="organismCombo" labelField="@display" change="dirty.setDirty();filteredGenomeBuildList.refresh();"/>
					    		<mx:LinkButton label="New/Edit..." textDecoration="underline" color="#0F19DF" click="editOrganism()"/>
					    	</mx:VBox>
					    </mx:HBox>
					        <mx:HBox verticalGap="0" horizontalGap="0">
					        	<mx:Label text="Analysis Type" width="105" fontWeight="normal">
					        	</mx:Label>
					        	<mx:VBox verticalGap="0" horizontalAlign="right">
					        		<mx:ComboBox  width="230" id="analysisTypeCombo" labelField="@display" change="dirty.setDirty();"/>
					        		<mx:LinkButton label="New/Edit..." textDecoration="underline" color="#0F19DF" click="editAnalysisType()"/>							
					        	</mx:VBox>
					        </mx:HBox>
					    	
					    </mx:HBox>
					    <mx:HBox>
					    <mx:HBox width="100%" verticalGap="0" horizontalGap="0">
					    	<mx:Label text="Genome Build" width="100" fontWeight="normal">
					    	</mx:Label>
					    	<mx:VBox verticalGap="0" horizontalAlign="right">
					    		<mx:ComboBox  width="230" id="genomeBuildCombo" labelField="@display" change="dirty.setDirty();"/>
					    		<mx:LinkButton label="New/Edit..." textDecoration="underline" color="#0F19DF" click="editGenomeBuild()"/>
					    	</mx:VBox>
					    </mx:HBox>
					        <mx:VBox verticalGap="0">
					        <mx:HBox width="100%" horizontalGap="0">
					        	<mx:Label text="Analysis Protocol" width="105" fontWeight="normal">
					        	</mx:Label>
					        	<mx:VBox verticalGap="0"  horizontalAlign="right">
					        		<mx:ComboBox  width="230" id="analysisProtocolCombo" labelField="@display" change="dirty.setDirty();"/>
					        		<mx:LinkButton label="New/Edit..." textDecoration="underline" color="#0F19DF" click="editAnalysisProtocol()"/>														
					        	</mx:VBox>
					        </mx:HBox>
					        </mx:VBox>
					    	
					    </mx:HBox>
					    <mx:VBox width="100%" verticalGap="1" >
						  <mx:HBox width="100%" paddingBottom="3" horizontalGap="2">
							<mx:Label width="100" text="Analysis Groups"/>
							<mx:ComboBox id="analysisGroupCombo" dataProvider="{parentApplication.navAnalysisView.getAnalysisGroupList.lastResult..AnalysisGroup}" labelField="@name" selectedIndex="-1" prompt="..." width="150">						
							</mx:ComboBox>
						 	   	    <mx:Button icon="@Embed(source='../../assets/add.png')" 
						 	   	    	disabledIcon="@Embed(source='../../assets/add_disable.png')" 
						 	   	    	width="25" click="addAnalysisGroup()">
						 	   	    	<mx:enabled>{analysisGroupCombo.selectedItem != null  ? true : false}</mx:enabled>
						 	   	    </mx:Button>
						 	   	    <mx:Button icon="@Embed(source='../../assets/delete.png')" 
						 	   	    	disabledIcon="@Embed(source='../../assets/delete_disable.png')" 
						 	   	    	enabled="{analysisGroupGrid.selectedItem != null}" 
						 	   	    	width="25" click="removeAnalysisGroup()"/>					
						  </mx:HBox>
					  	
						  <mx:DataGrid id="analysisGroupGrid" width="100%" dataProvider="{analysisGroups}" showHeaders="false" height="118">
							<mx:columns>
								<mx:DataGridColumn headerText="Name" dataField="@name"/>
							</mx:columns>
  						  </mx:DataGrid>
					    	
					    </mx:VBox>
						
					</mx:VBox>
				</mx:HBox>
				
			</mx:VBox>
			
		</mx:HDividedBox>
		<mx:Canvas label="Experiments" width="100%" height="100%">
			<mx:HDividedBox width="100%" height="100%" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
				<mx:VBox width="230" height="100%">
					<mx:Text  width="230" height="35" text="To select experiments, drag hybs or sequence lanes onto grid">						
					</mx:Text>
					<mx:Tree width="100%" height="100%" dataProvider="{getExperimentPickList.lastResult}" id="experimentTree" 
						showRoot="false" 
						dataTipFunction="getExperimentTreeLabel"
						dragEnabled="true"
						dropEnabled="false"
						dragMoveEnabled="false"
						iconFunction="getExperimentTreeIcon" 
						labelField="@label" 
						labelFunction="getExperimentTreeLabel" doubleClickEnabled="true" itemDoubleClick="showExperimentDetailWindow()">						
					</mx:Tree>
				</mx:VBox>
				<mx:VBox width="100%" height="100%">
					<mx:VBox verticalGap="0" width="100%" height="100%" id="vbox1">
						<mx:HBox>
   					        <mx:Label text="Experiments:" fontWeight="bold" paddingBottom="0"/>
   					        <mx:LinkBar dataProvider="{experimentItemStack}" textDecoration="underline" color="#ABA097" fontWeight="normal" disabledColor="#1D22E0" paddingTop="0"/>
						</mx:HBox>
					     <mx:HBox width="100%">
					          <mx:HBox width="100%" horizontalAlign="right" horizontalGap="0">
					               <mx:LinkButton icon="@Embed(source='../../assets/delete.png')"  
					               	label="Remove" textDecoration="underline"
					               	disabledIcon="@Embed(source='../../assets/delete_disable.png')" 
					               	enabled="{hybsGrid.selectedItem != null || lanesGrid.selectedItem != null}" 
					               	click="removeExperimentItem()"/>
					               <mx:LinkButton label="Clear all" toolTip="Clear all experiments" id="experimentClearButton"
					               	click="promptToRemoveAllExperimentItems()" 
					               	icon="@Embed(source='../../assets/folder_delete.png')" disabledIcon="@Embed(source='../../assets/folder_delete_disable.png') " textDecoration="underline"/>
					          </mx:HBox>
					     </mx:HBox>
					     <mx:ViewStack width="100%" height="100%" id="experimentItemStack" >


					     	<mx:Canvas label="Microarray Hybridizations" width="100%" height="100%" id="hybsView">
					     	
					     	<mx:DataGrid width="100%" height="100%" id="hybsGrid"  dataProvider="{hybs}"
								dragEnabled="true"
						        dragEnter="onDragEnter(event)"
						        dragOver="onDragOver(event)"
						        dragDrop="onDragDropExperimentItem(event)"
						        dragExit="onDragExit(event)">
					     		<mx:columns>
					     		    <mx:DataGridColumn headerText="" width="10" labelFunction="getHybsGridRowNumber"/>
					     			<mx:DataGridColumn headerText="ID" width="60" dataField="@number"/>
					     		    <mx:DataGridColumn editable="false" headerText="Cy3 Sample (green)"  width="122" dataField="@sampleName1"/>
					     		    <mx:DataGridColumn editable="false" headerText="ID"  width="60" dataField="@sampleNumber1"/>
					     		    <mx:DataGridColumn id="channel2SampleConfirmColumn" editable="false" headerText="Cy5 Sample (red)"  width="122" dataField="@sampleName2"/>
					     		    <mx:DataGridColumn editable="false" headerText="ID"  width="60" dataField="@sampleNumber2"/>
					     		    <mx:DataGridColumn headerText="Slide" width="320" labelFunction="parentApplication.lookupSlideDesignName"  />
					     		</mx:columns>
					     	</mx:DataGrid>
					     	
					     	</mx:Canvas>
					     	<mx:Canvas label="Illumina Sequence Lanes" width="100%" height="100%" id="lanesView">
					     		<mx:DataGrid width="100%" height="100%" dataProvider="{lanes}" id="lanesGrid"
					     			dragEnabled="true"  
							        dragEnter="onDragEnter(event)"
							        dragOver="onDragOver(event)"
					     			dragDrop="onDragDropExperimentItem(event)"
							        dragExit="onDragExit(event)">
					     		  <mx:columns>
					     		  <mx:DataGridColumn headerText="" width="10" labelFunction="getLanesGridRowNumber"/>
					     		  <mx:DataGridColumn headerText="ID" width="60" dataField="@number"/>
					     		  <mx:DataGridColumn  headerText="Sample Name"  width="100" dataField="@sampleName" editable="false"/>
					     		  <mx:DataGridColumn  headerText="Sample ID"  width="68" dataField="@sampleNumber" editable="false"/>
					     		    <mx:DataGridColumn  width="150" id="seqRunTypeCol" headerText="Flow Cell Type"  editable="false" dataField="@idSeqRunType" 						             						             
					     		                     itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry,'@display', '@value', '@idSeqRunType')}"/>                 											
					     		    <mx:DataGridColumn width="65" id="numberOfSequencingCyclesCol" headerText="# Cycles"   editable="false" dataField="@idNumberSequencingCycles" 						             						             
					     		                     itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry,'@display', '@value', '@idNumberSequencingCycles')}"/>                 											
					     		    <mx:DataGridColumn  width="55" id="flowCellNumberCol" headerText="Flow Cell #"  editable="false" dataField="@flowCellNumber"/> 						             						             
					     		    <mx:DataGridColumn  width="45" id="flowCellLaneNumber" headerText="Channel"  editable="false" dataField="@flowCellChannelNumber"/> 						             						             
					     		    <mx:DataGridColumn width="150" id="genomeBuildAlignTo" headerText="Genome Build (align to)"  editable="false" dataField="@idGenomeBuildAlignTo" 						             						             
					     		                     itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.GenomeBuild').DictionaryEntry,'@display', '@value', '@idGenomeBuildAlignTo')}"/>                 											
					     		  <mx:DataGridColumn width="150" headerText="Analysis Instructions"   dataField="@analysisInstructions"/>
					     		  </mx:columns>
					     		</mx:DataGrid>
					     	</mx:Canvas>
					     </mx:ViewStack>
					</mx:VBox>
				</mx:VBox>	
			</mx:HDividedBox>
		</mx:Canvas>
		<mx:VDividedBox label="Files" width="100%" height="100%" paddingLeft="4" paddingBottom="4" paddingRight="4" paddingTop="4">
			<mx:VBox width="100%" height="100%" verticalGap="2">
				<mx:Label text="Files to upload" fontWeight="bold"/>
	            <mx:HBox  width="100%">
	                <mx:LinkButton id="uploadBrowseButton" label="Choose files" icon="@Embed(source='../../assets/add.png')" disabledIcon="@Embed(source='../../assets/add_disable.png')"  toolTip="Choose file(s) to upload"  textDecoration="underline"/>
	                <mx:LinkButton id="uploadDeleteButton" label="Remove" disabledIcon="@Embed(source='../../assets/delete_disable.png')" icon="@Embed(source='../../assets/delete.png')" toolTip="Remove file"  textDecoration="underline"/>
	                <mx:LinkButton label="Clear all" toolTip="Clear all files" id="uploadClearButton" icon="@Embed(source='../../assets/folder_delete.png')" disabledIcon="@Embed(source='../../assets/folder_delete_disable.png') " textDecoration="underline"/>
	                <mx:HBox width="100%"  horizontalAlign="right">
	                    <mx:VRule height="20"/>
	                    <mx:ProgressBar id="uploadProgressBar"  width="100%" labelPlacement="center" trackHeight="15" height="20" fontWeight="normal" themeColor="#EAED9A"/>
	                </mx:HBox>
	            </mx:HBox>
				<mx:DataGrid id="uploadFilesGrid" width="100%" height="100%">				
				</mx:DataGrid>				
        		<mx:Spacer  width="100%" height="10"/>		
			</mx:VBox>
			<mx:VBox width="100%" height="100%" verticalGap="2">
				<mx:Label text="Uploaded Files" fontWeight="bold"/>
				<mx:HBox>
					<mx:LinkButton id="removeFileButton" label="Remove (from file system)"  enabled="{filesGrid.selectedItem != null}" disabledIcon="@Embed(source='../../assets/delete_disable.png')" icon="@Embed(source='../../assets/delete.png')" toolTip="Remove file"  textDecoration="underline" click="removeAnalysisFile()"/>
					<mx:LinkButton id="clearFileButton" label="Clear all" disabledIcon="@Embed(source='../../assets/folder_delete_disable.png')" icon="@Embed(source='../../assets/folder_delete.png')" toolTip="Clear all files"  textDecoration="underline" click="promptToRemoveAllAnalysisFiles()"/>					
				</mx:HBox>
				<mx:DataGrid id="filesGrid"  dataProvider="{files}"  editable="true" width="100%" height="100%">
					<mx:columns>
					    <mx:DataGridColumn headerText="" width="25" editable="false" labelFunction="getFilesGridRowNumber"/>
						<mx:DataGridColumn headerText="File name"  editable="false" dataField="@fileName"/>
						<mx:DataGridColumn headerText="Upload Date"  editable="false" width="80" dataField="@uploadDate"/>
						<mx:DataGridColumn headerText="Comments" editable="true" dataField="@comments"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
		</mx:VDividedBox>
	</mx:TabNavigator>
    <mx:HBox width="100%" horizontalAlign="right" id="editButtonView">
        <mx:HBox width="100%" horizontalAlign="left">
	        <mx:LinkButton label="Downloads" click="parentApplication.navAnalysisView.detailView.showDownloads()" icon="@Embed(source='../../assets/icon_download.gif')" id="downloadExperimentButton" textDecoration="underline"/>
	        <mx:LinkButton label="View" click="showViewWindow()" icon="@Embed(source='../../assets/page.png')" textDecoration="underline">    	        
        	</mx:LinkButton>
        </mx:HBox>
        <util:DirtyNote id="dirty"/>
        <mx:Button label="Upload files" id="uploadButton" click="initializeFileUploadParameters()" enabled="false" visible="true"/>
      	<mx:Button id="saveButton" label="Save" 
             	icon="@Embed('../../assets/action_save.gif')" click="validateAndSaveAnalysis()">
        </mx:Button>
    	
    </mx:HBox>
		

</mx:TitleWindow>
