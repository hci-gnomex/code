<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"   
		 xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" 
		 height="100%"  paddingTop="6"
		 xmlns:views="views.*" 
		 xmlns:util="views.util.*" xmlns:analysis="views.analysis.*">
	 
	
	<mx:HTTPService  
		id="cacheFDTFileDownloadList" 
		url="CacheAnalysisFileDownloadList.gx"
		destination="cacheAnalysisFileDownloadList"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onCacheFDTFileDownloadList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get cache file download list', event)"
		method="POST"
		useProxy="false">
		<mx:request>
			<fileDescriptorXMLString>{selectedFileList.toXMLString()}</fileDescriptorXMLString>
		</mx:request>
	</mx:HTTPService>
	
	
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.CheckBox;
			import hci.flex.controls.DropdownLabel;
			
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import views.analysis.AnalysisEditView;
			import views.analysis.DownloadProgressView;
			import views.util.DownloadHints;
			import views.util.FileUtil;		
			import views.util.RunAlignmentWindow;
			
			[Bindable]
			public var rowCountMessage:String = new String();
			[Bindable]
			public var downloadSizeMessage:String = new String();
			[Bindable]
			private var analysisTypeName:String;
			[Bindable]
			private var analysisProtocolName:String;
			[Bindable]
			private var organismName:String;
			[Bindable] 
			private var genomeBuildName:String;
			[Bindable] 
			private var visibilityName:String;
			[Bindable]
			public var analysis:Object;
			[Bindable]
			private var selectedFileList:XMLListCollection;
			
			private var uploadWindow:AnalysisUploadWindow = null;
			
			
			
			public function checkSecurity():void {
				if (parentApplication.isGuestMode()) {
				}
			}
			
			public function setupForm(theAnalysis:Object):void {
				this.currentState = '';						
				this.analysis = theAnalysis;
				
				getAnalysisTypeName();
				getAnalysisProtocolName();
				getOrganismName();
				getGenomeBuildName();
				getVisibilityName();
				
				var sequenceLanes:int = 0;
				for each (var experimentItem:Object in analysis.experimentItems.AnalysisExperimentItem..SequenceLane) {
					sequenceLanes++;
				}
				if (sequenceLanes > 0) {
					this.experimentItemStack.selectedIndex = 1;
				} else {
					this.experimentItemStack.selectedIndex = 0;
				}
				
				var params:Object = new Object();
				params.idAnalysis = analysis.@idAnalysis;
				params.includeUploadStagingDir = 'Y';
				filesView.getAnalysisDownloadList.send(params);
				
			}
			
			private function refreshDownloadView(e:CloseEvent):void {
				var params:Object = new Object();
				params.idAnalysis = analysis.@idAnalysis;
				params.includeUploadStagingDir = 'Y';
				filesView.getAnalysisDownloadList.send(params);
			}
			
			private function getChannel1SampleName(item:Object, col:int):String {
				var de:XMLList = item.labeledSampleChannel1.LabeledSample.sample.Sample;
				if (de.length() == 1) {
					return de[0].@name;
				} else {
					return "";
				}
			}
			private function getChannel2SampleName(item:Object, col:int):String {
				var de:XMLList = item.labeledSampleChannel2.LabeledSample.sample.Sample;
				if (de.length() == 1) {
					return de[0].@name;
				} else {
					return "";
				}
			}
			private function getChannel1SampleNumber(item:Object, col:int):String {
				var de:XMLList = item.labeledSampleChannel1.LabeledSample.sample.Sample;
				if (de.length() == 1) {
					return de[0].@number;
				} else {
					return "";
				}
			}
			private function getChannel2SampleNumber(item:Object, col:int):String {
				var de:XMLList = item.labeledSampleChannel2.LabeledSample.sample.Sample;
				if (de.length() == 1) {
					return de[0].@number;
				} else {
					return "";
				}
			}
			
			private function getAnalysisTypeName():void {
				var dict:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.AnalysisType', analysis.@idAnalysisType);
				analysisTypeName = dict.@display.toString();
			}
			private function getAnalysisProtocolName():void {
				var dict:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.AnalysisProtocol', analysis.@idAnalysisProtocol);
				analysisProtocolName = dict.@display.toString();
			}
			private function getOrganismName():void {
				var dict:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.OrganismLite', analysis.@idOrganism);
				organismName = dict.@display.toString();
			}
			private function getGenomeBuildName():void {
				var dict:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.GenomeBuildLite', analysis.@idGenomeBuild);
				genomeBuildName = dict.@display.toString();
			}		
			private function getVisibilityName():void {
				var dict:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Visibility', analysis.@codeVisibility);
				visibilityName = dict.@display.toString();
			}
			
			
			private function showEditWindow():void {
				parentDocument.editView.setupEditForm(analysis);
				parentDocument.theViews.selectedChild = parentDocument.editView;
			}
			
			
			public function clearUploadWindowVar():void {
				uploadWindow = null;
			}
			
			public function refreshSavedAnalysis(idAnalysis:Object):void {
				parentDocument.selectedIdAnalysis = idAnalysis;
				var parms:Object = new Object();
				parms.idAnalysis = parentDocument.selectedIdAnalysis;
				parentDocument.getAnalysis.send(parms);
			}
			
			public function updateUploadFormAnalysisObj():void {
				if(uploadWindow != null) {
					uploadWindow.refreshAnalysis(analysis);
				}
			}
			
			private function getLanesGridRowNumber(item:Object,col:int):String
			{
				var x:int = lanesGrid.dataProvider.getItemIndex(item) + 1;
				return String(x);
			} 
			private function getHybsGridRowNumber(item:Object,col:int):String
			{
				var x:int = hybsGrid.dataProvider.getItemIndex(item) + 1;
				return String(x);
			} 
			private function getDownloadTreeRowNumber(item:Object,col:int):String
			{
				var x:int = filesView.downloadTree.dataProvider.getItemIndex(item) + 1;
				return String(x);
			} 
			
			private function showExperimentForSelectedHyb():void {
				
				var ei:Object = analysis.experimentItems.AnalysisExperimentItem..Hybridization.(@idHybridization == hybsGrid.selectedItem.@idHybridization).parent().parent();
				parentApplication.showExperimentById(ei.@idRequest);
				
			}
			
			private function showExperimentForSelectedLane():void {
				parentApplication.showExperimentById(lanesGrid.selectedItem.@idRequest);
			}
			
			private function showDownloadHints():void {
				var hints:IFlexDisplayObject = DownloadHints(PopUpManager.createPopUp(this, DownloadHints, true));
				PopUpManager.centerPopUp(hints);			 		
			}
			
			
			public function downloadFilesUsingFDT():void {
				var selectedFiles:XMLList = filesView.getAnalysisDownloadList.lastResult..AnalysisFileDescriptor.(@isSelected == "true");
				selectedFileList = new XMLListCollection(selectedFiles);					
				
				if (selectedFileList.length == 0) {
					mx.controls.Alert.show("Please select the files to download.");
				} else {
					cacheFDTFileDownloadList.send();
				}
			} 
			
			public function alignSelectedFiles():void {
				var selectedFiles:XMLList = filesView.getAnalysisDownloadList.lastResult..AnalysisFileDescriptor.(@isSelected == "true");
				selectedFileList = new XMLListCollection(selectedFiles);	
				
				var checkDirectoryPath:String = "";
				var filesStr:String = "";
				
				for each(var file:XML in selectedFileList) {
					var fileName:String = file.@fileName;
					var splitIndx:int = fileName.lastIndexOf("/");
					var splitIndx1:int = fileName.lastIndexOf("\\");
					if(splitIndx1 > splitIndx) {
						splitIndx = splitIndx1;
					}
					if(splitIndx < 0) {
						Alert.show("Cannot proceed because file '" + file.@displayName + "' is not physically present.");					
						return;
					}
					var fullDirectoryPath:String = fileName.substr(0, splitIndx);
					fileName = fileName.substr(splitIndx+1, 0x7fffffff);
					if(checkDirectoryPath.length == 0) {
						checkDirectoryPath = fullDirectoryPath;
						filesStr = fileName;
					} else {
						filesStr = filesStr + "," + fileName;
					}			
					if(checkDirectoryPath != fullDirectoryPath) {
						Alert.show("All files submitted must reside within a single folder. When selecting files from multiple folders, please submit a separate job for each folder.");
						return;
					}
					if(fileName.length < 3 || fileName.substr(fileName.length-3, int.MAX_VALUE) != ".gz") {
						Alert.show("File '" + fileName + "' cannot be submitted. Please only select files with the '.gz' extension.");
						return;
					}
					
				}
				
				
				if (selectedFileList.length == 0) {
					mx.controls.Alert.show("Please select the file(s).");
				} else {
					var alignFilesWindow:RunAlignmentWindow = RunAlignmentWindow(PopUpManager.createPopUp(this, RunAlignmentWindow, true));
					if(parentDocument.selectedAnalysis != null) {
						alignFilesWindow.setOrganismDropdown(parentDocument.selectedAnalysis.@idOrganism);
					}
					alignFilesWindow.setFolderPathAndFilesStr(checkDirectoryPath, filesStr);
					PopUpManager.centerPopUp(alignFilesWindow);
				}
			}			
			
			private function onCacheFDTFileDownloadList(event:ResultEvent):void {
				// We have cached the selected analysis files
				// Now call the URL to start the FDT app using webstart
				showFastDataTransferDownloadPage();
			}
			
			public function showFastDataTransferDownloadPage():void {	
				var url:URLRequest = new URLRequest('FastDataTransferDownloadAnalysisServlet.gx');	
				url.contentType = "text/xml";
				url.method = URLRequestMethod.GET;
				navigateToURL(url, '_self');					
			}
			
			
			private function showAlternateDownloadPage():void {
				var url:URLRequest = new URLRequest('ShowAnalysisDownloadForm' + 
					(parentApplication.isGuestMode() ? 'ForGuest' : '') +   
					'.gx?idAnalysis=' + 
					this.analysis.@idAnalysis);
				navigateToURL(url, '_blank');					
			}
			
			public function setFileCount():void {
				rowCountMessage = filesView.getAnalysisDownloadList.lastResult..AnalysisFileDescriptor.(@type != 'dir').length() + " file(s).";    	
			}
			
			private function underlyingDownloadsChange(event:CollectionEvent):void {
				if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
					// ignore refresh and resets 
					return;
				}
				
				var selectedDownloadSize:Number = 0;
				var selectedFiles:XMLList = filesView.getAnalysisDownloadList.lastResult..AnalysisFileDescriptor.(@isSelected == "true");        	
				for each(var file:Object in selectedFiles) {
					if (file.@type != "dir") {
						var size:Number = FileUtil.getEstimatedCompressedSize(file);
						selectedDownloadSize += size;
					}
				}
				downloadSizeMessage = "Ready to download " + FileUtil.getFileSizeText(selectedDownloadSize);
				
			}
			
			public function refreshDownloadList():void {
				if (theTab.selectedChild == filesView) {
					// Getting the download list is slow since we now show an expanded file
					// view by default.  Only show downloads at request or project level.
					if (analysis.@idAnalysis != null ) {
						
						var params:Object = new Object();
						params.idAnalysis = analysis.@idAnalysis;
						params.includeUploadStagingDir = 'Y';
						filesView.getAnalysisDownloadList.send(params);
						filesView.browseMessage = "";
					} else {
						filesView.browseMessage = "Click on a project or request to narrow download selection.";
						filesView.downloadSizeMessage = "";
						filesView.rowCountMessage = "";
						filesView.downloadTree.visible = false;
					}
					theTab.selectedChild = filesView;
				}
			}
			
			private function expandDownloadList():void {
				if (filesView.downloadTree != null) { // Necessary?
					for each(var r:Object in filesView.getAnalysisDownloadList.lastResult.Analysis) {
						filesView.downloadTree.expandChildrenOf(r, true);
					}
				}
			}
			
			private function onTabChange():void {
				refreshDownloadList();
			} 
			
			
		]]>
	</mx:Script>
	
	<mx:XMLListCollection id="genomeBuilds" source="{analysis.genomeBuilds.GenomeBuild}"/>
	
	<mx:HBox width="100%" verticalGap="20" verticalAlign="middle" horizontalGap="20">
		<mx:HBox horizontalGap="1">
			<mx:Image source="{parentApplication.iconAnalysis}"/>
			<mx:Label id="titleLabel" styleName="titleLabel"/>
		</mx:HBox>
		
		<mx:HBox width="100%" horizontalAlign="left" verticalAlign="bottom">
			
			<mx:HBox  horizontalCenter="8" paddingTop="0" paddingLeft="0" paddingBottom="0" paddingRight="0"  verticalAlign="bottom">
				<mx:LinkButton label="Edit" click="showEditWindow()" icon="@Embed(source='../../assets/tag_blue_edit.png')" textDecoration="underline" paddingLeft="0" fontSize="9" textAlign="left">
					<mx:height>{analysis.@canUpdate == &quot;Y&quot; ? 22 : 0}</mx:height>
					<mx:visible>{analysis.@canUpdate == &quot;Y&quot; ? true : false}</mx:visible>
				</mx:LinkButton>
				
			</mx:HBox>
			
		</mx:HBox>
		
	</mx:HBox>
	
	<mx:VBox width="100%" height="100%"  styleName="form"  paddingLeft="4" paddingRight="4" paddingBottom="4">
		
		
		<mx:HBox horizontalGap="5" >
			<mx:VBox verticalGap="0">
				
				<mx:HBox horizontalGap="0">
					<mx:Label text="Name"  width="81" fontWeight="bold">
					</mx:Label>
					<mx:Text  text="{analysis.@name}"  width="130" />
				</mx:HBox>
				<mx:HBox verticalGap="0" width="100%" horizontalGap="0">
					<mx:Label text="Submitted by"  width="81" fontWeight="bold"/>
					<mx:Text text="{analysis.@ownerName}" width="130"/> 
				</mx:HBox>
				<mx:HBox verticalGap="0" width="100%" horizontalGap="0">
					<mx:Label text="Group"  width="81" fontWeight="bold"/>
					<mx:Text text="{analysis.@labName}" width="100%"/>
				</mx:HBox>
				<mx:HBox verticalGap="0" horizontalGap="0">
					<mx:Label text="Submit Date"  width="81" fontWeight="bold"/>
					<mx:Text text="{analysis.@createDate}" width="130"/>
				</mx:HBox> 
				
			</mx:VBox>
			
			<mx:VBox verticalGap="0" width="220" horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<mx:HBox verticalGap="0" horizontalGap="0">
					<mx:Label text="Organism"  width="85" fontWeight="bold"/>
					<mx:Text  text="{organismName}" width="150" />
				</mx:HBox>
				<mx:VBox verticalGap="0" horizontalGap="0" width="100%">
					<mx:Label text="Genome Builds"  width="111" fontWeight="bold"/>
					<!--mx:Text  text="{genomeBuildName}" width="150" /-->
					<mx:DataGrid id="genomeBuildGrid" width="100%" height="46" dataProvider="{genomeBuilds}" showHeaders="false" verticalScrollPolicy="auto" borderStyle="none" alternatingItemColors="[#FFFFFF, #FFFFFF]">
						<mx:columns>
							<mx:DataGridColumn dataField="@display"/>
						</mx:columns>
					</mx:DataGrid>	
				</mx:VBox>
			</mx:VBox>
			
			<mx:VBox verticalGap="0">
				<mx:HBox verticalGap="0" horizontalGap="0">
					<mx:Label text="Analysis Groups"  width="98" fontWeight="bold"/>
					<mx:Text text="{analysis.@analysisGroupNames}" width="140"/>
				</mx:HBox>
				
				<mx:HBox verticalGap="0" horizontalGap="0">
					<mx:Label text="Visibility"  width="98" fontWeight="bold"/>
					<mx:Text text="{visibilityName}" width="140"/>
				</mx:HBox>
				<mx:HBox verticalGap="0" horizontalGap="0">
					<mx:Label text="Analysis Type"  width="98" fontWeight="bold"/>
					<mx:Text text="{analysisTypeName}" width="140" />
				</mx:HBox>
				<mx:HBox verticalGap="0" horizontalGap="0">
					<mx:Label text="Protocol"  width="98" fontWeight="bold"/>
					<mx:Text  text="{analysisProtocolName}" width="140" />
				</mx:HBox>
			</mx:VBox>
			
		</mx:HBox>
		
		<mx:HRule width="100%"/>
		
		<mx:TabNavigator id="theTab"   change="{onTabChange()}" width="100%" height="100%" >
			<mx:HBox width="100%" horizontalGap="0" label="Description" >
				<mx:Text text="{analysis.@description}" width="100%"/>
			</mx:HBox>
			
			<mx:VBox  label="Experiments" verticalGap="0" width="100%" height="100%" id="vbox1">
				<mx:LinkBar dataProvider="{experimentItemStack}" textDecoration="underline" color="#ABA097" fontWeight="normal" disabledColor="#1D22E0" paddingTop="0" paddingBottom="0"/>
				<mx:ViewStack width="100%" height="100%" id="experimentItemStack">
					<mx:Canvas label="{'Microarray Hybridizations (' + hybsGrid.dataProvider.length + ')'}" width="100%" height="100%">
						
						<mx:DataGrid width="100%" height="100%" id="hybsGrid"  editable="false" 
									 dataProvider="{analysis..Hybridization}"
									 doubleClickEnabled="true"
									 doubleClick="showExperimentForSelectedHyb()">
							<mx:columns>
								<mx:DataGridColumn headerText="" width="10" labelFunction="getHybsGridRowNumber"/>
								<mx:DataGridColumn headerText="ID" width="60" dataField="@number"/>
								<mx:DataGridColumn editable="false" headerText="Cy3 Sample (green)"  width="122" labelFunction="getChannel1SampleName"/>
								<mx:DataGridColumn editable="false" headerText="ID"  width="60" labelFunction="getChannel1SampleNumber"/>
								<mx:DataGridColumn id="channel2SampleConfirmColumn" editable="false" headerText="Cy5 Sample (red)"  width="122" labelFunction="getChannel2SampleName"/>
								<mx:DataGridColumn editable="false" headerText="ID"  width="60" labelFunction="getChannel2SampleNumber"/>
								<mx:DataGridColumn headerText="Slide" width="320" dataField="@slideDesignName"/>
								<mx:DataGridColumn headerText="Notes" width="100"   dataField="@notes"/>
							</mx:columns>
						</mx:DataGrid>
						
					</mx:Canvas>
					<mx:Canvas label="{'Illumina Sequencing Lanes (' +  lanesGrid.dataProvider.length + ')'}" width="100%" height="100%">
						<mx:DataGrid width="100%" height="100%" 
									 dataProvider="{analysis..SequenceLane}" 
									 id="lanesGrid"
									 doubleClickEnabled="true"
									 doubleClick="showExperimentForSelectedLane()">									
							<mx:columns>
								<mx:DataGridColumn headerText="" width="10" labelFunction="getLanesGridRowNumber"/>
								<mx:DataGridColumn headerText="ID" width="60" dataField="@number"/> 
								<mx:DataGridColumn  headerText="Sample Name"  width="100" dataField="@sampleName" editable="false"/>
								<mx:DataGridColumn  headerText="Sample ID"  width="68" dataField="@sampleNumber" editable="false"/>
								<mx:DataGridColumn  width="150" id="seqRunTypeCol" headerText="Flow Cell Type"  editable="false" dataField="@idSeqRunType" 						             						             
													itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry, '@display', '@value', '@idSeqRunType')}"/>                 											
								<mx:DataGridColumn width="65" id="numberOfSequencingCyclesCol" headerText="# Cycles"   editable="false" dataField="@idNumberSequencingCycles" 						             						             
												   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry, '@display', '@value', '@idNumberSequencingCycles')}"/>                 											
								<mx:DataGridColumn  width="55" id="flowCellNumberCol" headerText="Flow Cell #"  editable="false" dataField="@flowCellNumber"/> 						             						             
								<mx:DataGridColumn  width="45" id="flowCellLaneNumber" headerText="Channel"  editable="false" dataField="@flowCellChannelNumber"/> 						             						             
								<mx:DataGridColumn width="150" id="genomeBuildAlignTo" headerText="Genome Build (align to)"  editable="false" dataField="@idGenomeBuildAlignTo" 						             						             
												   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingProtocol').DictionaryEntry, '@display', '@value', '@idGenomeBuildAlignTo')}"/>                 											
								<mx:DataGridColumn width="150" headerText="Analysis Instructions"   dataField="@analysisInstructions"/>
							</mx:columns>
						</mx:DataGrid>
					</mx:Canvas>
				</mx:ViewStack>
			</mx:VBox>
			
			<analysis:AnalysisDownloadView id="filesView" uploadButtonsVisible="{analysis.@canUpdate == 'Y'}" />
			
		</mx:TabNavigator>
		
	</mx:VBox> 
	
	<mx:ControlBar>
		<mx:HBox width="100%">
			<mx:Button id="downloadExpandedFilesButton" 
					   click="filesView.downloadExpandedFiles()"
					   icon="@Embed('../../assets/download.png')" 
					   toolTip="Download selected folders"
					   label="Download"  
					   visible="{theTab.selectedChild == filesView}"
					   includeInLayout="{theTab.selectedChild == filesView}"/>
			<mx:Button visible="{theTab.selectedChild == filesView &amp;&amp; parentApplication.isFDTSupported ? true : false}" 
					   includeInLayout="{theTab.selectedChild == filesView &amp;&amp; parentApplication.isFDTSupported ? true : false}"
					   label="FDT Download" click="{this.downloadFilesUsingFDT()}" 
					   icon="@Embed(source='../../assets/download_large.png')"/>
			<mx:Button visible="{theTab.selectedChild == filesView &amp;&amp; parentApplication.isFDTSupported == false? true : false}" 
					   includeInLayout="{theTab.selectedChild == filesView &amp;&amp; parentApplication.isFDTSupported == false? true : false}"
					   label="HTTP Download"  
					   click="{this.showAlternateDownloadPage()}" icon="@Embed(source='../../assets/download_large.png')"/>
			<mx:Button id="alignSelectedFilesButton" 
					   click="this.alignSelectedFiles()" 
					   icon="@Embed('../../assets/align.png')" 
					   toolTip="Run automated alignment on selected files"
					   visible="{theTab.selectedChild == filesView &amp;&amp; parentApplication.isSequenceAlignmentSupported}"
					   includeInLayout="{theTab.selectedChild == filesView &amp;&amp; parentApplication.isSequenceAlignmentSupported}"
					   label="Run Alignment"/>	
			<mx:LinkButton  label="Downloading tips" textDecoration="underline" 
							visible="{theTab.selectedChild == filesView}"
							includeInLayout="{theTab.selectedChild == filesView}"
							click="showDownloadHints()" styleName="hintLink" 
							icon="@Embed(source='../../assets/information.png')" fontStyle="italic"/>		
		</mx:HBox>
		
	</mx:ControlBar>
	
	
</mx:VBox>
