<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"   
	xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" 
	height="100%"  paddingTop="6"
	xmlns:views="views.*" 
	xmlns:util="views.util.*">
	
<mx:HTTPService  
    id="cacheFileDownloadList" 
    url="CacheAnalysisFileDownloadList.gx"
    destination="cacheFileDownloadList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onCacheFileDownloadList(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get cache file download list', event)"
    method="POST"
    useProxy="false">
    <mx:request>
    	<fileDescriptorXMLString>{selectedFileList.toXMLString()}</fileDescriptorXMLString>
    </mx:request>
</mx:HTTPService>
  
<mx:Script>
	<![CDATA[
		import mx.managers.PopUpManager;
		import mx.events.CloseEvent;
		import mx.controls.Alert;
		import views.analysis.AnalysisEditView;
		import hci.flex.controls.DropdownLabel;
		import mx.core.IFlexDisplayObject;
		import views.util.DownloadHints;
	    import hci.flex.controls.CheckBox;
    	import mx.rpc.events.ResultEvent;
    	import mx.collections.XMLListCollection;
    	import views.experiment.ExperimentDownloadView;
    	import views.experiment.DownloadProgressView;
	
		[Bindable]
		private var analysisTypeName:String;
		[Bindable]
		private var analysisProtocolName:String;
		[Bindable]
		private var organismName:String;
		[Bindable] 
		private var genomeBuildName:String;
		[Bindable] 
		private var visibilityName:String;
		
		private var filesExceedingMaxMessage:String = "";
		
    	public static const DOWNLOAD_FILES_URL:String   = "DownloadAnalysisFileServlet.gx";  
    	public static const SUGGESTED_LOCAL_FILENAME:String   = "gnomex-analysis";
    	  		    
	    [Bindable]
	    private var selectedFileList:XMLListCollection;
	    
	    private var estimatedDownloadSize:Number;

		public function checkSecurity():void {
			if (parentApplication.isGuestMode()) {
			}
		}
	
		public function setupForm():void {
			this.currentState = '';						


			getAnalysisTypeName();
			getAnalysisProtocolName();
			getOrganismName();
			getGenomeBuildName();
			getVisibilityName();
			
			var sequenceLanes:int = 0;
			for each (var experimentItem:Object in parentDocument.selectedAnalysis.experimentItems.AnalysisExperimentItem..SequenceLane) {
				sequenceLanes++;
			}
			if (sequenceLanes > 0) {
				this.experimentItemStack.selectedIndex = 1;
			} else {
				this.experimentItemStack.selectedIndex = 0;
			}
		}
		
	    private function getChannel1SampleName(item:Object, col:int):String {
			var de:XMLList = item.labeledSampleChannel1.LabeledSample.sample.Sample;
	    	if (de.length() == 1) {
		    	return de[0].@name;
	    	} else {
	    		return "";
	    	}
		}
		private function getChannel2SampleName(item:Object, col:int):String {
			var de:XMLList = item.labeledSampleChannel2.LabeledSample.sample.Sample;
	    	if (de.length() == 1) {
		    	return de[0].@name;
	    	} else {
	    		return "";
	    	}
		}
		private function getChannel1SampleNumber(item:Object, col:int):String {
			var de:XMLList = item.labeledSampleChannel1.LabeledSample.sample.Sample;
	    	if (de.length() == 1) {
		    	return de[0].@number;
	    	} else {
	    		return "";
	    	}
		}
		private function getChannel2SampleNumber(item:Object, col:int):String {
			var de:XMLList = item.labeledSampleChannel2.LabeledSample.sample.Sample;
	    	if (de.length() == 1) {
		    	return de[0].@number;
	    	} else {
	    		return "";
	    	}
		}

		private function getAnalysisTypeName():void {
			var dict:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.AnalysisType', parentDocument.selectedAnalysis.@idAnalysisType);
			analysisTypeName = dict.@display.toString();
		}
		private function getAnalysisProtocolName():void {
			var dict:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.AnalysisProtocol', parentDocument.selectedAnalysis.@idAnalysisProtocol);
			analysisProtocolName = dict.@display.toString();
		}
		private function getOrganismName():void {
			var dict:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Organism', parentDocument.selectedAnalysis.@idOrganism);
			organismName = dict.@display.toString();
		}
		private function getGenomeBuildName():void {
			var dict:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.GenomeBuild', parentDocument.selectedAnalysis.@idGenomeBuild);
			genomeBuildName = dict.@display.toString();
		}		
		private function getVisibilityName():void {
			var dict:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Visibility', parentDocument.selectedAnalysis.@codeVisibility);
			visibilityName = dict.@display.toString();
		}
		

		private function showEditWindow():void {
            parentDocument.editView.setupEditForm(parentDocument.selectedAnalysis);
            parentDocument.theViews.selectedChild = parentDocument.editView;
		}
		
		
		private function showUploadWindow():void {
			var uploadWindow:AnalysisUploadWindow = AnalysisUploadWindow(PopUpManager.createPopUp(parentApplication.mainArea, AnalysisUploadWindow, true));
			PopUpManager.centerPopUp(uploadWindow);
			uploadWindow.initFromDetail(this, parentDocument.selectedAnalysis);
		}

		
		public function refreshSavedAnalysis(idAnalysis:Object):void {
			parentDocument.selectedIdAnalysis = idAnalysis;
			var parms:Object = new Object();
			parms.idAnalysis = parentDocument.selectedIdAnalysis;
			parentDocument.getAnalysis.send(parms);
		}


   	 	private function getLanesGridRowNumber(item:Object,col:int):String
	    {
	    	var x:int = lanesGrid.dataProvider.getItemIndex(item) + 1;
	       	return String(x);
	    } 
   	 	private function getHybsGridRowNumber(item:Object,col:int):String
	    {
	    	var x:int = hybsGrid.dataProvider.getItemIndex(item) + 1;
	       	return String(x);
	    } 
   	 	private function getFilesGridRowNumber(item:Object,col:int):String
	    {
	    	var x:int = filesGrid.dataProvider.getItemIndex(item) + 1;
	       	return String(x);
	    } 
	    
	    private function showExperimentForSelectedHyb():void {
	    	
	    	var ei:Object = parentDocument.selectedAnalysis.experimentItems.AnalysisExperimentItem..Hybridization.(@idHybridization == hybsGrid.selectedItem.@idHybridization).parent().parent();
	    	parentApplication.showExperimentById(ei.@idRequest);
	    	
	    }
	    
	    private function showExperimentForSelectedLane():void {
	    	parentApplication.showExperimentById(lanesGrid.selectedItem.@idRequest);
	    }

        private function showDownloadHints():void {
			var hints:IFlexDisplayObject = DownloadHints(PopUpManager.createPopUp(this, DownloadHints, true));
			PopUpManager.centerPopUp(hints);			 		
		}
		
		public function downloadFiles():void {
			var selectedFiles:XMLList = parentDocument.selectedAnalysis..AnalysisFileDescriptor.(@isSelected == "true");
	    	selectedFileList = new XMLListCollection(selectedFiles);
		   	filesExceedingMaxMessage = "";
	    	
	    	if (selectedFileList.length == 0) {
	    		Alert.show("Please select the files to download.");
	    	} else {
		    	estimatedDownloadSize = 0;
				for each (var item:Object in selectedFileList) {
					var size:Number = ExperimentDownloadView.getEstimatedCompressedSize(item);
    				if (size > ExperimentDownloadView.MAX_DOWNLOAD_SIZE) {
    					if (filesExceedingMaxMessage.length > 0) {
    						filesExceedingMaxMessage += ", ";
    					}
    					filesExceedingMaxMessage += item.@displayName;
    				}

					estimatedDownloadSize += ExperimentDownloadView.getEstimatedCompressedSize(item);
				}
				
				if (estimatedDownloadSize == 0) {
					
					Alert.show("At least one non-empty file must be selected in order for download to proceed.");
					
				} else {
			
			    	var call:Object = cacheFileDownloadList.send();
		    		call.marker = estimatedDownloadSize;
		
				}
	    	
	    	}
	 	}

	    private function onCacheFileDownloadList(event:ResultEvent):void {
	    	var call:Object = event.token;
	    	var message:String = "";
	    	var title:String = "";
	    	var estimatedSize:Number = call.marker;
	    	if (filesExceedingMaxMessage != "") {
	    		message =  
	    			"The following files exceed the 4 GB maximum:\n" + this.filesExceedingMaxMessage + ".\n\nDo you want to be directed to the browser page for downloading large files individually?"
	    		title = "Download file exceeds maximum size"; 
				Alert.show( message,
					title,
					(Alert.OK | Alert.CANCEL), this, 
					onAlternateDownloadFiles,						
					parentApplication.iconWarning);
	
	    	} else if (estimatedSize >= ExperimentDownloadView.MAX_DOWNLOAD_SIZE) {
	    		message =  
	    			"The total download size (" + views.experiment.ExperimentDownloadView.getFileSizeText(call.marker) + ") exceeds the 4 GB maximum.\n\nYou must unselect some files or click on the 'Download large files' link to download files individually."
	    		title = "Total download size exceeds maximum size"; 
				Alert.show( message, title);
	
	    	} else {
	    		message = "Ready to download approximately " + views.experiment.ExperimentDownloadView.getFileSizeText(call.marker) + " of data.  Proceed?"
				Alert.show( message,
							title,
							(Alert.YES | Alert.NO), this, 
							onDownloadFiles,						
							parentApplication.iconWarning);
	    	}
	
	    	
	    }
	    
		private function onDownloadFiles(event:CloseEvent):void {
			if (event.detail==Alert.YES) {
		        
		        var progressWindow:DownloadProgressView = new DownloadProgressView();
		        
		        var parms:URLVariables = new URLVariables();
		        parms.mode = "zip";
	    		
	    		progressWindow.init(this, DOWNLOAD_FILES_URL, parms, this.downloadFilesButton, estimatedDownloadSize, SUGGESTED_LOCAL_FILENAME);		
			}
		}

		private function onAlternateDownloadFiles(event:CloseEvent):void {
			if (event.detail==Alert.OK) {
				showAlternateDownloadPage();	
			} 		
		}
		
		private function showAlternateDownloadPage():void {
			var url:URLRequest = new URLRequest('ShowAnalysisDownloadForm' + 
				(parentApplication.isGuestMode() ? 'ForGuest' : '') +   
				'.gx?idAnalysis=' + 
				this.parentDocument.selectedAnalysis.@idAnalysis);
			navigateToURL(url, '_blank');					
		}
		
		private function onTabChange():void {
			if (theTab.selectedChild == filesView) {
				this.downloadButtonStack.selectedIndex = 1;
			} else {
				this.downloadButtonStack.selectedIndex = 0;
			}
		}    
		private function selectAllDownloads():void {
			for each(var f:Object in analysisFiles) {
				f.@isSelected = 'true';
			}
			selectAllStack.selectedIndex = 1;
		}		
		private function unselectAllDownloads():void {
			for each(var f:Object in analysisFiles) {
				f.@isSelected = 'false';
			}
			selectAllStack.selectedIndex = 0;
		}		
	]]>
</mx:Script>

<mx:XMLListCollection id="analysisFiles" source="{parentDocument.selectedAnalysis..AnalysisFileDescriptor}"/>

<mx:Label id="titleLabel" styleName="titleLabel"/>
<mx:VBox width="100%" height="100%"  styleName="form"  paddingLeft="4" paddingRight="4" paddingBottom="4">
	
		
	
 	    
	        <mx:HBox width="100%"  horizontalGap="5" >
	        	<mx:VBox verticalGap="0">

	        		<mx:HBox horizontalGap="0">
	                    <mx:Label text="Name"  width="81" fontWeight="bold">
	                    </mx:Label>
	                    <mx:Text  text="{parentDocument.selectedAnalysis.@name}"  width="130" />
	                </mx:HBox>
		            <mx:HBox verticalGap="0" width="100%" horizontalGap="0">
		                   <mx:Label text="Submitted by"  width="81" fontWeight="bold"/>
		                   <mx:Text text="{parentDocument.selectedAnalysis.@ownerName}" width="130"/> 
		            </mx:HBox>
		            <mx:HBox verticalGap="0" width="100%" horizontalGap="0">
		                   <mx:Label text="Group"  width="81" fontWeight="bold"/>
		                   <mx:Text text="{parentDocument.selectedAnalysis.@labName}" width="100%"/>
		            </mx:HBox>
	                <mx:HBox verticalGap="0" horizontalGap="0">
	                  <mx:Label text="Submit Date"  width="81" fontWeight="bold"/>
	                  <mx:Text text="{parentDocument.selectedAnalysis.@createDate}" width="130"/>
	                </mx:HBox> 
	        	</mx:VBox>
	        	<mx:VBox verticalGap="0">
		            <mx:HBox verticalGap="0" horizontalGap="0">
		                <mx:Label text="Organism"  width="85" fontWeight="bold"/>
		                <mx:Text  text="{organismName}" width="150" />
		            </mx:HBox>
		            <mx:HBox verticalGap="0" horizontalGap="0">
		                <mx:Label text="Genome Build"  width="85" fontWeight="bold"/>
		                <mx:Text  text="{genomeBuildName}" width="150" />
		            </mx:HBox>
		        	

	        	</mx:VBox>
	        	<mx:VBox width="100%" verticalGap="0">
		            <mx:HBox verticalGap="0" width="100%" horizontalGap="0">
		                   <mx:Label text="Analysis Groups"  width="98" fontWeight="bold"/>
		                   <mx:Text text="{parentDocument.selectedAnalysis.@analysisGroupNames}" width="140"/>
		            </mx:HBox>
		        	
		            <mx:HBox verticalGap="0" width="100%" horizontalGap="0">
		                   <mx:Label text="Visibility"  width="98" fontWeight="bold"/>
		                   <mx:Text text="{visibilityName}" width="140"/>
		            </mx:HBox>
		            <mx:HBox verticalGap="0" horizontalGap="0">
		        	       <mx:Label text="Analysis Type"  width="98" fontWeight="bold"/>
		        	       <mx:Text text="{analysisTypeName}" width="140" />
		        	   </mx:HBox>
		            <mx:HBox verticalGap="0" horizontalGap="0">
		                <mx:Label text="Protocol"  width="98" fontWeight="bold"/>
		                <mx:Text  text="{analysisProtocolName}" width="140" />
		            </mx:HBox>
	        	</mx:VBox>
	        </mx:HBox>
		   <mx:HRule width="100%"/>

	        



		<mx:TabNavigator id="theTab"   change="{onTabChange()}" width="100%" height="100%" >
		    <mx:HBox width="100%" horizontalGap="0" label="Description" >
		    	<mx:Text text="{parentDocument.selectedAnalysis.@description}" width="100%"/>
		    </mx:HBox>
		
			<mx:VBox  label="Experiments" verticalGap="0" width="100%" height="100%" id="vbox1">
			        <mx:LinkBar dataProvider="{experimentItemStack}" textDecoration="underline" color="#ABA097" fontWeight="normal" disabledColor="#1D22E0" paddingTop="0" paddingBottom="0"/>
			        <mx:ViewStack width="100%" height="100%" id="experimentItemStack">
			        	<mx:Canvas label="{'Microarray Hybridizations (' + hybsGrid.dataProvider.length + ')'}" width="100%" height="100%">
	
							<mx:DataGrid width="100%" height="100%" id="hybsGrid"  editable="false" 
								dataProvider="{parentDocument.selectedAnalysis..Hybridization}"
								doubleClickEnabled="true"
								doubleClick="showExperimentForSelectedHyb()">
								<mx:columns>
								    <mx:DataGridColumn headerText="" width="10" labelFunction="getHybsGridRowNumber"/>
									<mx:DataGridColumn headerText="ID" width="60" dataField="@number"/>
								    <mx:DataGridColumn editable="false" headerText="Cy3 Sample (green)"  width="122" labelFunction="getChannel1SampleName"/>
								    <mx:DataGridColumn editable="false" headerText="ID"  width="60" labelFunction="getChannel1SampleNumber"/>
								    <mx:DataGridColumn id="channel2SampleConfirmColumn" editable="false" headerText="Cy5 Sample (red)"  width="122" labelFunction="getChannel2SampleName"/>
								    <mx:DataGridColumn editable="false" headerText="ID"  width="60" labelFunction="getChannel2SampleNumber"/>
								    <mx:DataGridColumn headerText="Slide" width="320" dataField="@slideDesignName"/>
									<mx:DataGridColumn headerText="Notes" width="100"   dataField="@notes"/>
								</mx:columns>
							</mx:DataGrid>
	
			        	</mx:Canvas>
			        	<mx:Canvas label="{'Illumina Sequencing Lanes (' +  lanesGrid.dataProvider.length + ')'}" width="100%" height="100%">
			        		<mx:DataGrid width="100%" height="100%" 
			        			dataProvider="{parentDocument.selectedAnalysis..SequenceLane}" 
			        			id="lanesGrid"
			        			doubleClickEnabled="true"
								doubleClick="showExperimentForSelectedLane()">									
			        		  <mx:columns>
								<mx:DataGridColumn headerText="" width="10" labelFunction="getLanesGridRowNumber"/>
								<mx:DataGridColumn headerText="ID" width="60" dataField="@number"/> 
							    <mx:DataGridColumn  headerText="Sample Name"  width="100" dataField="@sampleName" editable="false"/>
							    <mx:DataGridColumn  headerText="Sample ID"  width="68" dataField="@sampleNumber" editable="false"/>
					            <mx:DataGridColumn  width="150" id="seqRunTypeCol" headerText="Flow Cell Type"  editable="false" dataField="@idSeqRunType" 						             						             
	                                    itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry, '@display', '@value', '@idSeqRunType')}"/>                 											
					            <mx:DataGridColumn width="65" id="numberOfSequencingCyclesCol" headerText="# Cycles"   editable="false" dataField="@idNumberSequencingCycles" 						             						             
	                                    itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry, '@display', '@value', '@idNumberSequencingCycles')}"/>                 											
					            <mx:DataGridColumn  width="55" id="flowCellNumberCol" headerText="Flow Cell #"  editable="false" dataField="@flowCellNumber"/> 						             						             
					            <mx:DataGridColumn  width="45" id="flowCellLaneNumber" headerText="Channel"  editable="false" dataField="@flowCellChannelNumber"/> 						             						             
					            <mx:DataGridColumn width="150" id="genomeBuildAlignTo" headerText="Genome Build (align to)"  editable="false" dataField="@idGenomeBuildAlignTo" 						             						             
	                                    itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingProtocol').DictionaryEntry, '@display', '@value', '@idGenomeBuildAlignTo')}"/>                 											
								<mx:DataGridColumn width="150" headerText="Analysis Instructions"   dataField="@analysisInstructions"/>
			        		  </mx:columns>
			        		</mx:DataGrid>
			        	</mx:Canvas>
			        </mx:ViewStack>
				</mx:VBox>
				
		    
			<mx:VBox id="filesView"  label="Files" width="100%" height="100%" verticalGap="0" paddingTop="0" >
			    <mx:ViewStack id="selectAllStack" width="100" paddingBottom="0" paddingTop="0">
				    <mx:HBox width="100%"  paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0" verticalAlign="middle">
			   		    <mx:LinkButton label="Select all" styleName="formLinkButton" paddingLeft="0" click="selectAllDownloads()"  paddingTop="0" paddingRight="0" paddingBottom="0"/>
				    </mx:HBox>
				    <mx:HBox width="100%" paddingBottom="0" paddingTop="0">
			   		    <mx:LinkButton label="Unselect all" styleName="formLinkButton" paddingLeft="0" click="unselectAllDownloads()"  paddingTop="0" paddingBottom="0"/>
				    </mx:HBox>			    	
			    </mx:ViewStack>
				<mx:DataGrid id="filesGrid" dataProvider="{analysisFiles}" width="100%" height="100%">
					<mx:columns>
			            <mx:DataGridColumn headerText=" " 
		            		editable="true"       
		            		width="15"                 	
		            		dataField="@isSelected" 
		            		editorDataField="selected" sortable="false"
		            		itemRenderer="{CheckBox.getFactory('true', 'false', '@isSelected', true)}">
		            	</mx:DataGridColumn>				
						<mx:DataGridColumn headerText="File name"  dataField="@displayName"/>
						<mx:DataGridColumn headerText="Comments"   dataField="@comments"/>
						<mx:DataGridColumn headerText="Upload Date"  dataField="@lastModifyDateDisplay" width="30"/>
				    	<mx:DataGridColumn dataField="@type"           headerText="Type" width="20" />
				    	<mx:DataGridColumn dataField="@fileSizeText"   headerText="Size" width="20"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>

			
		</mx:TabNavigator>

		

	    
	     




	
</mx:VBox> 

<mx:ControlBar width="100%">
    <mx:HBox width="100%" horizontalAlign="left" verticalAlign="bottom">
        <mx:ViewStack id="downloadButtonStack" width="100%">
			<mx:HBox  horizontalCenter="8" paddingTop="0" paddingLeft="0" paddingBottom="0" paddingRight="0"  verticalAlign="bottom">
			    <mx:LinkButton label="Show Downloads" click="{theTab.selectedChild = filesView}" icon="@Embed(source='../../assets/download.png')" textDecoration="underline">
	    		</mx:LinkButton>				
			    <mx:LinkButton label="Edit" click="showEditWindow()" icon="@Embed(source='../../assets/tag_blue_edit.png')" textDecoration="underline">
			        <mx:height>{parentDocument.selectedAnalysis.@canUpdate == &quot;Y&quot; ? 22 : 0}</mx:height>
	    		    <mx:visible>{parentDocument.selectedAnalysis.@canUpdate == &quot;Y&quot; ? true : false}</mx:visible>
	    		</mx:LinkButton>				
				<mx:LinkButton label="Upload files" click="showUploadWindow()" icon="@Embed(source='../../assets/upload.png')" textDecoration="underline">
					<mx:height>{parentDocument.selectedAnalysis.@canUpdate == &quot;Y&quot; ? 22 : 0}</mx:height>
					<mx:visible>{parentDocument.selectedAnalysis.@canUpdate == &quot;Y&quot; ? true : false}</mx:visible>
				</mx:LinkButton>				
			</mx:HBox>
        	<mx:HBox horizontalGap="8" paddingTop="0" paddingLeft="0" paddingBottom="0" paddingRight="0"  verticalAlign="bottom">
				    <mx:Button id="downloadFilesButton" 
				    	click="downloadFiles()"
				    	icon="@Embed('../../assets/download.png')" 
				    	toolTip="Download selected folders"
				    	label="Download" 
				    	visible="true"/>
				    <mx:LinkButton label="Download large files" textDecoration="underline" click="{this.showAlternateDownloadPage()}" icon="@Embed(source='../../assets/download_large.png')"/>
				    <mx:VBox styleName="hintBox">
					    <mx:LinkButton  label="Downloading help" textDecoration="underline" click="showDownloadHints()" styleName="hintLink" icon="@Embed(source='../../assets/information.png')"/>
				    </mx:VBox>
		    		<mx:LinkButton label="Edit" click="showEditWindow()" icon="@Embed(source='../../assets/tag_blue_edit.png')" textDecoration="underline">
	    	    		<mx:height>{parentDocument.selectedAnalysis.@canUpdate == &quot;Y&quot; ? 22 : 0}</mx:height>
	        			<mx:visible>{parentDocument.selectedAnalysis.@canUpdate == &quot;Y&quot; ? true : false}</mx:visible>
	    			</mx:LinkButton>				
					<mx:LinkButton label="Upload files" click="showUploadWindow()" icon="@Embed(source='../../assets/upload.png')" textDecoration="underline">
						<mx:height>{parentDocument.selectedAnalysis.@canUpdate == &quot;Y&quot; ? 22 : 0}</mx:height>
						<mx:visible>{parentDocument.selectedAnalysis.@canUpdate == &quot;Y&quot; ? true : false}</mx:visible>
					</mx:LinkButton>				
	
			</mx:HBox>

        </mx:ViewStack>
    </mx:HBox>
</mx:ControlBar>

	
</mx:VBox>
