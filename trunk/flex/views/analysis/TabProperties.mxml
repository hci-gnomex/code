<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:views="views.*"  xmlns:util="views.util.*" label="Properties" enabled="true" width="100%" height="100%">
	<mx:Script>
		<![CDATA[
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.LinkButton;
			import mx.controls.TextInput;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import views.admin.PropertyWindow;
			import views.util.CheckBoxRequiredIndicator;
			import views.util.TextInputRequiredIndicator;

			[Bindable]
			public var properties:XMLListCollection;
			
			public var propertiesToSave:XMLListCollection;
			
			[Bindable]
			public var editable:Boolean;
			
			private function setDirty():void {
				if (parentDocument.hasOwnProperty("dirty")) {
					parentDocument.dirty.setDirty();
				}
			}
			
			public function requiredAnnotationsEntered():Boolean {
				var optionSelected:Boolean;
				for (var i:int = 0; i < properties.length; i++) {
					var property:XML = XML(properties.getItemAt(i));
					if (propertyValueViewStack[i].selectedIndex == 0) {
						// url
						if(property.@isRequired == 'Y' && (this.urlText[0][0].text == "" || this.urlText[0][0].text == "Enter URL here...")) {
							Alert.show('Please enter a value for the "' + property.@name + '" annotation.', 'Missing Required Annotation');
							return false;
						}						
					} else if (propertyValueViewStack[i].selectedIndex == 1) {
						// text
						if(property.@isRequired == 'Y' && propertyText[i].text == "") {
							Alert.show('Please enter a value for the "' + property.@name + '" annotation.', 'Missing Required Annotation');
							return false;
						}
					} else if (propertyValueViewStack[i].selectedIndex == 2) {
						// combo
						optionSelected = false;
						for each (var option:XML in  property..PropertyOption) {
							if (propertyCombo[i].selectedItem != null &&
								option.@idPropertyOption == propertyCombo[i].selectedItem.@idPropertyOption && option.@name != '') {
								optionSelected = true;
							}
						}
						if(property.@isRequired == 'Y' && !optionSelected) {
							Alert.show('Please enter a value for the "' + property.@name + '" annotation.', 'Missing Required Annotation');
							return false;
						}
					} else if (propertyValueViewStack[i].selectedIndex == 3) {
						// check box can only be checked or unchecked, so nothing req'd here
					} else if (propertyValueViewStack[i].selectedIndex == 4) {
						// multi-select
						optionSelected = false;		
						var idx:int = 0;
						for each (var opt:XML in  property..PropertyOption) {
							if (multiselectCheck[i][idx].selected) {
								optionSelected = true;
							}
							idx++;
						}
						if(property.@isRequired == 'Y' && !optionSelected) {
							Alert.show('Please enter a value for the "' + property.@name + '" annotation.', 'Missing Required Annotation');
							return false;
						}						
					}
				}
				return true;
			}
			
			private function onCreatePropertyLabel(property:XML, index:int):void {
				if(property == null) {
					return;
				}
				if (property.@codePropertyType == 'TEXT') {
					propertyValueViewStack[index].selectedIndex = 1;
					propertyText[index].text = property.@value;
					if(this.parentDocument is AnalysisEditView) {
						propertyText[index].isRequired = property.@isRequired== 'Y' ? true : false;
					} else {
						// If not in edit version then disable editing
						propertyText[index].isRequired = false;
						propertyText[index].editable = false;
					}
					
				} else if (property.@codePropertyType == 'URL') {
					propertyValueViewStack[index].selectedIndex = 0;
					if(this.parentDocument is AnalysisEditView) {
						if(urlText != null && urlText[index].length > 0) {
							// Req'd flag only needed for first item
							urlText[index][0].isRequired = property.@isRequired== 'Y' ? true : false;
							urlText[index][0].SetBackgroundColor();
						}	
						// Change urlLabel for edit mode
						for each (var uBtn:LinkButton in urlLabel[index]) {
							uBtn.label = "Edit";
						}
						// Show urlRemoveImage for view mode
						for each (var uImg:Image in urlRemoveImage[index]) {
							uImg.visible = true;
							uImg.includeInLayout = true;
						}						
						
					} else {
						var lastItemIndx:int = aliasText[index].length-1;
						// If not in edit version then disable editing
						for each (var aTxt:TextInput in aliasText[index]) {
							aTxt.editable = false;
						}
						for each (var uTxt:TextInputRequiredIndicator in urlText[index]) {
							uTxt.isRequired = false;
							uTxt.editable = false;
						}
						// Change urlLabel for view mode
						for each (var uBtn1:LinkButton in urlLabel[index]) {
							uBtn1.label = "Show fields";
						}
						// Hide urlRemoveImage for view mode
						for each (var uImg1:Image in urlRemoveImage[index]) {
							uImg1.visible = false;
							uImg1.includeInLayout = false;
						}
						// Hide last URL item in view mode (no need to show empty item)
						urlStack[index][lastItemIndx].visible = false;
						urlStack[index][lastItemIndx].includeInLayout = false;
					}

				} else  if (property.@codePropertyType == 'OPTION') {
					propertyValueViewStack[index].selectedIndex = 2;
					propertyCombo[index].dataProvider =  property..PropertyOption;
					if(this.parentDocument is AnalysisEditView) {
						propertyCombo[index].isRequired = property.@isRequired== 'Y' ? true : false;
					} else {
						propertyCombo[index].isRequired = false;
						propertyCombo[index].enabled = false;
					}
					for each(var theOption:XML in property..PropertyOption) {
						if (theOption.@selected == 'Y') { 
							propertyCombo[index].selectedItem =  theOption;
							break;   			
						}
					}
				} else  if (property.@codePropertyType == 'MOPTION') { 
					propertyValueViewStack[index].selectedIndex = 4;
					var cbLen:int = multiselectCheck[index].length;
					var cbCount:int = 0;
					if(this.parentDocument is AnalysisEditView) {
						for each (var cbx:CheckBoxRequiredIndicator in multiselectCheck[index]) {
							cbx.isRequired = property.@isRequired== 'Y' ? true : false;
							cbCount++;
							if(cbCount == cbLen) {
								cbx.setBackgroundColor();
							}
						}						
					} else {
						for each (var cbx1:CheckBoxRequiredIndicator in multiselectCheck[index]) {
							cbx1.isRequired = false;
							cbx1.enabled = false;
						}						
					}

				} else if (property.@codePropertyType == 'CHECK') {
					propertyValueViewStack[index].selectedIndex = 3;
					propertyCheck[index].selected = property.@value == 'Y' ? true : false;
					if(!this.parentDocument is AnalysisEditView) {
						propertyCheck[index].enabled = false;
					} 
				}
			}
			
			public function initializePropertiesFromComponents():void {
				propertiesToSave = new XMLListCollection();
				for (var i:int = 0; i < properties.length; i++) {
					var property:XML = XML(properties.getItemAt(i));
					if (propertyValueViewStack[i].selectedIndex == 0) {
						// url
						property.@value = "";
						var urlIdx:int = 0;
						var urlItemDefined:Boolean = false;
						for each (var propertyValue:XML in  property..PropertyEntryValue) {
							var url:String = this.urlText[i][urlIdx].text;
							var alias:String = this.aliasText[i][urlIdx].text;
							
							if (url == 'Enter URL here...' || url == '') {
								continue;
							}
							
							var pv:String = url;
							if (alias != null && alias != 'Enter alias here...' && StringUtil.trim(alias) != "") {
								pv += ',' + alias;
							}
							propertyValue.@value = pv;
							
							if(pv.length > 0) {
								urlItemDefined = true;
							}
							urlIdx++;
						}
						if(urlItemDefined) {
							propertiesToSave.addItem(property);
						}
						
					} else if (propertyValueViewStack[i].selectedIndex == 1) {
						// text
						var textVal:String = propertyText[i].text;
						property.@value = textVal;
						if(textVal.length > 0) {
							propertiesToSave.addItem(property);
						}
					} else if (propertyValueViewStack[i].selectedIndex == 2) {
						// combo
						property.@value = "";
						var comboItemSelected:Boolean = false;
						for each (var option:XML in  property..PropertyOption) {
							if (propertyCombo[i].selectedItem != null &&
								option.@idPropertyOption == propertyCombo[i].selectedItem.@idPropertyOption) {
								option.@selected = 'Y';
								var optName:String = option.@name;
								if(optName != null && optName.length > 0 && optName != " ") {
									comboItemSelected = true;
								}
							} else {
								option.@selected = 'N';
							}
						}
						if(comboItemSelected) {
							propertiesToSave.addItem(property);
						}
					} else if (propertyValueViewStack[i].selectedIndex == 3) {
						// check
						property.@value = propertyCheck[i].selected ? 'Y' : 'N';
					} else if (propertyValueViewStack[i].selectedIndex == 4) {
						// multi-select
						property.@value = "";		
						var idx:int = 0;
						var multiItemSelected:Boolean = false;
						for each (var opt:XML in  property..PropertyOption) {
							if (multiselectCheck[i][idx].selected) {
								opt.@selected = 'Y';
								if (property.@value != '') {
									property.@value += ",";
								}
								property.@value += opt.@name;
								multiItemSelected = true;
							} else {
								opt.@selected = 'N';
							}
							idx++;
						}
						if(multiItemSelected) {
							propertiesToSave.addItem(property);
						}
					}
				}
			}
			
			private function onPropertyURLClick(event:TextEvent):void {
				var url:URLRequest = new URLRequest(event.target.text);
				navigateToURL( url, '_blank' );
			}
			
			private function removeProperty(property:XML):void {
				this.initializePropertiesFromComponents();
				properties.removeItemAt(properties.getItemIndex(property));
			}
			
			
			private function selectURLText(indices:Array):void {
				if (urlText[indices[0]][indices[1]].text == 'Enter URL here...') {
					urlText[indices[0]][indices[1]].selectionBeginIndex = 0;
					urlText[indices[0]][indices[1]].selectionEndIndex = urlText[indices[0]][indices[1]].text.length;
				} 
			}
			
			private function selectAliasText(indices:Array):void {
				if (aliasText[indices[0]][indices[1]].text == 'Enter alias here...') {
					aliasText[indices[0]][indices[1]].selectionBeginIndex = 0;
					aliasText[indices[0]][indices[1]].selectionEndIndex = aliasText[indices[0]][indices[1]].text.length;
				} 
			}
			
			private function onChangeURLText(indices:Array):void {
				var newText:String = urlText[indices[0]][indices[1]].text;
				var values:XMLListCollection = XMLListCollection(urlRepeater[indices[0]].dataProvider);
				values.getItemAt(indices[1]).@value = newText;
				setDirty();
			}
			
			private function showURLLink(indices:Array):void {
				if (urlText[indices[0]][indices[1]].text == 'Enter URL here...') {
					return;
				}
				var isNew:Boolean = false;
				if ( urlLink[indices[0]][indices[1]].label == 'Enter URL here...' || urlLink[indices[0]][indices[1]].label == '') {
					isNew = true;
				}
				
				var newUrlText:String = urlText[indices[0]][indices[1]].text;
				var newUrlAlias:String = aliasText[indices[0]][indices[1]].text;
				var newUrlDisplay:String = "";
				if (newUrlAlias != 'Enter alias here...' && newUrlAlias != '') {
					newUrlDisplay = newUrlAlias;
				} else {
					newUrlDisplay = newUrlText;
				}
				
				var values:XMLListCollection = XMLListCollection(urlRepeater[indices[0]].dataProvider);
				values.getItemAt(indices[1]).@urlDisplay = newUrlDisplay;
				values.getItemAt(indices[1]).@url = newUrlText;
				values.getItemAt(indices[1]).@urlAlias= newUrlAlias;		
				
				urlLink[indices[0]][indices[1]].label = newUrlDisplay;
				
				urlStack[indices[0]][indices[1]].selectedIndex = 0;
				
				if (isNew) {
					addURL(indices);
				}
				
				
			}
			
			private function navigateToURLLink(indices:Array):void {
				if (urlLink[indices[0]][indices[1]].label == 'Enter URL here...') {
					return;
				}
				var values:XMLListCollection = XMLListCollection(urlRepeater[indices[0]].dataProvider);
				var urlString:String = values.getItemAt(indices[1]).@url;
				urlString = urlString.replace(",", "");
				if (urlString.indexOf("http") < 0) {
					urlString = "http://" + urlString;
				}
				var url:URLRequest = new URLRequest(urlString);
				navigateToURL( url, '_blank' );
			}
			
			private function showURLEdit(indices:Array):void {
				urlStack[indices[0]][indices[1]].selectedIndex = 1;
			}
			
			private function tabToURLText(indices:Array):void {
				urlText[indices[0]][indices[1]].setFocus();
			}
			
			
			private function removeURL(indices:Array):void {
				var values:XMLListCollection = XMLListCollection(urlRepeater[indices[0]].dataProvider);
				
				var property:XML = XML(XMLListCollection(propertyRepeater.dataProvider).getItemAt(indices[0]));
				delete property.PropertyEntryValue[indices[1]];
				
				values.removeItemAt(indices[1]);
				
				this.initializePropertiesFromComponents();
				
				propertyMainBox.removeAllChildren();
				propertyRepeater.initializeRepeater(propertyMainBox, true);
				setDirty();
				
			}
			
			private function addURL(indices:Array):void {
				var values:XMLListCollection = XMLListCollection(urlRepeater[indices[0]].dataProvider);
				
				var property:XML = XML(XMLListCollection(propertyRepeater.dataProvider).getItemAt(indices[0]));
				property.appendChild(new XMLList("<PropertyEntryValue idPropertyEntryValue='' urlAlias='Enter alias here...' url='Enter URL here...'/>"));
				values = new XMLListCollection(property.PropertyEntryValue);
				
				this.initializePropertiesFromComponents();
				propertyMainBox.removeAllChildren();
				propertyRepeater.initializeRepeater(propertyMainBox, true);
			}
			
			private function showPropertyConfigWindow():void {
				var configWindow:PropertyWindow = PropertyWindow(PopUpManager.createPopUp(parentApplication.theBody, PropertyWindow, true));
				configWindow.addEventListener("updateProperties", updateProperties);
				PopUpManager.centerPopUp(configWindow);
				configWindow.showSampleAnnotations.selected = false;
				configWindow.showAnalysisAnnotations.selected = true;
				configWindow.showDataTrackAnnotations.selected = false;
				configWindow.onPropertyRefreshed(null);
				
			}
			
			public function updateProperties(event:Event):void{
				parentApplication.dictionaryManager.call("reload", "");
				parentApplication.getPropertyList.send();
				parentDocument.refreshAnalysis();
			}
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%" label="Properties" paddingLeft="4" paddingRight="4" paddingBottom="4" verticalGap="0" paddingTop="0">
		<mx:VBox id="propertyMainBox" width="100%" height="100%" verticalGap="4" paddingTop="2" >
			<mx:Repeater  id="propertyRepeater" 
						  dataProvider="{properties}">
				<mx:HBox verticalAlign="top" width="100%"  horizontalGap="0" >
					<mx:HBox width="126" horizontalGap="0" paddingLeft="0" paddingRight="0">
						<mx:Text text="{propertyRepeater.currentItem.@name}" width="100%"  styleName="labelSmall"
								 creationComplete="{onCreatePropertyLabel(event.currentTarget.getRepeaterItem(), event.target.instanceIndices[0])}"/>
						
					</mx:HBox>
					<mx:ViewStack id="propertyValueViewStack" creationPolicy="all" height="100%" width="270" >
						<mx:VBox id="urlOuterBox" width="100%" height="100%" verticalGap="0" horizontalScrollPolicy="off" >
							<mx:Repeater id="urlRepeater" dataProvider="{propertyRepeater.currentItem.PropertyEntryValue}" >
								<mx:ViewStack id="urlStack"  selectedIndex="{urlRepeater.currentItem.@url == 'Enter URL here...' ? 1 : 0}" width="100%" creationPolicy="all">
									<mx:HBox  id="urlBox" verticalAlign="middle" horizontalGap="0" width="100%" horizontalScrollPolicy="off">
										<mx:LinkButton id="urlLink" label="{urlRepeater.currentItem.@urlDisplay }"  
													   click="{navigateToURLLink(event.target.instanceIndices)}" 
													   paddingLeft="0" textDecoration="underline" color="#121CE8" 
													   width="204" textAlign="left"/>
										<mx:LinkButton id="urlLabel" label="Edit" 
													   click="{showURLEdit(event.target.instanceIndices)}" 
													   styleName="linkMenuButtonSmall" textAlign="left"/>
										<mx:Image id="urlRemoveImage" source="{parentApplication.iconSmallDelete}"  
												  click="{removeURL(event.currentTarget.instanceIndices)}" />						
									</mx:HBox>
									<mx:HBox width="100%" verticalAlign="middle"  horizontalGap="2" horizontalAlign="left" horizontalScrollPolicy="off">
										<mx:TextInput id="aliasText"  enter="{tabToURLText(event.target.instanceIndices)}" 
													  click="{selectAliasText(event.currentTarget.instanceIndices)}" 
													  change="{setDirty()}"
													  editable="{editable}"
													  text="{urlRepeater.currentItem.@urlAlias}"  
													  width="100" color="#8D7B7B"/>	
										<util:TextInputRequiredIndicator id="urlText" text="{urlRepeater.currentItem.@url}" 
													  enter="{showURLLink(event.target.instanceIndices)}" 
													  editable="{editable}"
													  change="{onChangeURLText(event.target.instanceIndices)}" 
													  click="{selectURLText(event.currentTarget.instanceIndices)}" 
													  width="100" color="#8D7B7B"/>						
										<mx:LinkButton textAlign="left" label="Show link" click="{showURLLink(event.target.instanceIndices)}" styleName="linkMenuButtonSmall"/>
									</mx:HBox>
								</mx:ViewStack>		
								
							</mx:Repeater>
							
						</mx:VBox>
						
						<mx:HBox >
							<util:TextInputRequiredIndicator id="propertyText" change="{setDirty()}" editable="{editable}" styleName="labelSmall" text="{propertyRepeater.currentItem.@value}" width="100%">
							</util:TextInputRequiredIndicator> 
						</mx:HBox>
						
						<mx:HBox >
							<util:ComboBoxRequiredIndicator id="propertyCombo" change="{setDirty()}" enabled="{editable}" styleName="labelSmall" width="240" labelField="@name">
							</util:ComboBoxRequiredIndicator>						
						</mx:HBox>
						
						<mx:HBox width="100%" >
							<mx:CheckBox id="propertyCheck" click="{setDirty()}" enabled="{editable}" styleName="labelSmall">
							</mx:CheckBox>
						</mx:HBox>
						
						<mx:VBox id="multiselectOuterBox" width="100%" height="100%" verticalGap="0" >
							<mx:Repeater id="multiselectRepeater" dataProvider="{propertyRepeater.currentItem.PropertyOption}" >
								<util:CheckBoxRequiredIndicator id="multiselectCheck"  styleName="labelSmall" 
											 label="{multiselectRepeater.currentItem.@name}"  
											 paddingLeft="0"  
											 paddingTop="0" 
											 click="{setDirty()}"
											 enabled="{editable}"
											 paddingBottom="0"
											 selected="{multiselectRepeater.currentItem.@selected == 'Y' ? true : false}"
											 width="100%" textAlign="left">
								</util:CheckBoxRequiredIndicator> 
							</mx:Repeater>
						</mx:VBox>
						
					</mx:ViewStack>
				</mx:HBox>
			</mx:Repeater>	
		</mx:VBox>
		<mx:LinkButton label="Configure annotations ..." 
					   visible="{editable}"
					   includeInLayout="{editable}"
					   click="showPropertyConfigWindow()" 
					   styleName="linkMenuButtonSmall"  
					   textAlign="left" paddingLeft="0"/>					   
		
	</mx:VBox>
</mx:Canvas>
