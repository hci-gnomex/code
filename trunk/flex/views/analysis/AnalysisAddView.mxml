<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="vertical" 
	title="Add Analysis" width="446" height="376" 
	defaultButton="{saveButton}">
	 
    <mx:HTTPService 
    id="saveAnalysis" 
    url="SaveAnalysis.gx"
    resultFormat="e4x"
    result="onSaveAnalysis(event)"
    fault="parentApplication.onFailHttpRequest('Unable to save analysis', event)"
    method="POST"
    useProxy="false">
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="getAnalysis" 
    url="GetAnalysis.gx"
    destination="getAnalysis"
    showBusyCursor="true"
    resultFormat="e4x"
    result="onGetAnalysis(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get analysis', event)"
    useProxy="false">   
     
    </mx:HTTPService >    
      <mx:HTTPService  
    id="getAnalysisGroupList" 
    url="GetAnalysisGroupList.gx"
    destination="getAnalysisGroupList"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onGetAnalysisGroupList(event)"
 	fault="parentApplication.onFailHttpRequest('Failed to get analysis group list', event)"
    method="POST"   
    useProxy="false">
    <mx:request>
            <labKeys>{labCombo.selectedItem.@idLab}</labKeys> 
    </mx:request> 
   </mx:HTTPService>


<mx:Script>
	<![CDATA[
		import mx.collections.XMLListCollection;
		import views.util.AboutView;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		import mx.managers.PopUpManager;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		
		private var savedIdAnalysis:Object;
		private var savedIdAnalysisGroup:Object;
		
		[Bindable]
		private var analysisGroupList:XMLListCollection = new XMLListCollection();

		private var selectedIdAnalysisGroup:Object;
		private var selectedIdLab:Object;
		
		public function initializeData(idLab:Object, idAnalysisGroup:Object):void {
			filteredGenomeBuildList.source = parentApplication.dictionaryManager.getEntries('hci.gnomex.model.GenomeBuild');
			filteredGenomeBuildList.filterFunction = filterGenomeBuild;
			genomeBuildCombo.dataProvider      = filteredGenomeBuildList;		
			filteredGenomeBuildList.refresh();	
			selectedIdLab = idLab;
			selectedIdAnalysisGroup = idAnalysisGroup;
			// Select the lab in the dropdown.  If no lab was
			// selected in the nav analysis tree, just select
			// the first lab;
			var foundLab:Boolean = false;
			if (selectedIdLab != null && selectedIdLab != '') {
				for each(var l:Object in labCombo.dataProvider) {
					if (l.@idLab == selectedIdLab) {
						labCombo.selectedItem = l;
						var params:Object = new Object();
						params.labKeys = l.@idLab;
						getAnalysisGroupList.send(params);
						foundLab = true;
						break;
					}
				}				
			} 
			
			if (!foundLab) {
				labCombo.selectedIndex = 0;
				getAnalysisGroupList.send();
			}
			
					
			
		}
		
		
		public function refreshAnalysisGroupForDropdown():void {
			if (this.labCombo.selectedItem != null && this.labCombo.selectedItem.@idLab != '') {
				analysisGroupList = new XMLListCollection(getAnalysisGroupList.lastResult..AnalysisGroup.(@idLab == this.labCombo.selectedItem.@idLab));
				if (selectedIdAnalysisGroup != null) {
					for each(var ag:Object in analysisGroupList) {
						if (ag.@idAnalysisGroup == selectedIdAnalysisGroup) {
							this.analysisGroupCombo.selectedItem = ag;
							selectedIdAnalysisGroup = null;
							break;
						}
					}
					
				}
			} else {
				analysisGroupList = new XMLListCollection();
			}
		}
		
		public function selectAnalysisGroupDropdown(idAnalysisGroup:Object):void {
			for each(var ag:Object in analysisGroupList) {
				if (ag.@idAnalysisGroup == idAnalysisGroup) {
					this.analysisGroupCombo.selectedItem = ag;
					break;
				}
			}
		}
		

	 	
		private function validateAndSave():void {
			
			if (genomeBuildCombo.selectedItem == null || genomeBuildCombo.selectedItem.@value == "") {
				Alert.show( "The genome build is not specified.  Create new analysis anyways?",
							"Warning",
							(Alert.YES | Alert.NO), this, 
							onPromptToContinueSave,						
							parentApplication.iconWarning);
			} else {
				save();
			}
			
		}
		
		private function onPromptToContinueSave(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	save();
            }
        }	 	
		private function save():void {
			var params:Object = new Object();
			
			params.idAnalysis = 0;
			params.idLab = labCombo.selectedItem.@idLab;
			params.name = analysisName.text;
			params.idOrganism = organismCombo.selectedItem.@idOrganism;
			params.idGenomeBuild = genomeBuildCombo.selectedItem != null ? genomeBuildCombo.selectedItem.@idGenomeBuild : "";
			if (currentState == "NewAnalysisGroupState") {
				params.analysisGroupsXMLString = "<analysisGroups/>";
				params.newAnalysisGroupName = newAnalysisGroupName.text;
			
			} else {
				if (analysisGroupCombo.selectedItem != null) {
					params.analysisGroupsXMLString = "<analysisGroups>" + analysisGroupCombo.selectedItem.toXMLString() + "</analysisGroups>";				
				} else {
					params.analysisGroupsXMLString = "<analysisGroups/>";
				}
			}
			params.hybsXMLString = "<hybs/>";
			params.lanesXMLString = "<lanes/>";
			params.analysisFilesXMLString = "<analysisFiles/>";
			params.analysisFilesToDeleteXMLString = "<analysisFilesToDelete/>";
			params.collaboratorsXMLString = "<collaborators/>";
			
			saveAnalysis.send(params);
		}
		
		private function onSaveAnalysis(event:ResultEvent):void {
			if (saveAnalysis.lastResult.name() == "SUCCESS") {
				savedIdAnalysis = saveAnalysis.lastResult.@idAnalysis;
				savedIdAnalysisGroup = saveAnalysis.lastResult.@idAnalysisGroup;
				
				var params:Object = new Object();
				params.idAnalysis = savedIdAnalysis;
	 			getAnalysis.send(params);
				PopUpManager.removePopUp(this);
				
			} else {
				Alert.show("An error occurred while saving the analysis.");
			}			
		}
		
		private function checkCompleteness():Boolean {
			var isComplete:Boolean = false; 
			if (currentState == "NewAnalysisGroupState") {
				isComplete = labCombo.selectedItem != null && 
				newAnalysisGroupName.text != '' && 
				analysisName.text != '' && 
				organismCombo.selectedItem != null && 
				organismCombo.selectedItem.@value != ""; 
				
			} else {
				isComplete = labCombo.selectedItem != null && 
				analysisName.text != '' && 
				organismCombo.selectedItem != null  && 
				organismCombo.selectedItem.@value != ""; 
			}
			this.saveButton.enabled = isComplete;
			return isComplete;
		}
		
		
	     private function onGetAnalysis(event:ResultEvent):void {
          parentApplication.navAnalysisView.selectedIdAnalysis = savedIdAnalysis;
          parentApplication.navAnalysisView.selectedAnalysis = getAnalysis.lastResult.Analysis.(@idAnalysis = savedIdAnalysis);
          if (savedIdAnalysisGroup != "-1" ) {
          	parentApplication.navAnalysisView.selectedIdAnalysisGroup = savedIdAnalysisGroup;          	
          } else {
	        parentApplication.navAnalysisView.selectedIdAnalysisGroup = analysisGroupCombo.selectedItem.@idAnalysisGroup;
          }
          parentApplication.navAnalysisView.showEditView = true;
          parentApplication.navAnalysisView.refreshAnalysis();
          
        }

		private function refreshAnalysisGroups():void {
			if (parentApplication.navAnalysisView.currentState == "AdminState") {
				for each(var l:Object in parentApplication.navAnalysisView.labList) {
					if (l.@idLab == labCombo.selectedItem.@idLab) {
						l.@isSelected = 'true';
						parentApplication.navAnalysisView.labKeys = labCombo.selectedItem.@idLab;
						parentApplication.navAnalysisView.selectedLabsLabel = labCombo.selectedItem.@name;
					} else {
						l.@isSelected = 'false';
					}
				}
			}
			parentApplication.navAnalysisView.selectedIdLab = labCombo.selectedItem.@idLab;
			callLater(parentApplication.navAnalysisView.refreshAnalysis);
			getAnalysisGroupList.send();
		}
		
		private function onGetAnalysisGroupList(event:ResultEvent): void {
        	this.refreshAnalysisGroupForDropdown();		
  		}
		
        private function filterGenomeBuild(item:Object):Boolean {
        	if (item.@value == "") {
        		return true;
        	}
        	if (item.@isActive == 'N') {
        		return false;
        	}
        	var doesMatch:Boolean = false;
        	if (this.organismCombo.selectedItem != null && 
        	    this.organismCombo.selectedItem.@value != null  &&
        	    this.organismCombo.selectedItem.@value != "") {
        	    if (item.@idOrganism.toString() == this.organismCombo.selectedItem.@value.toString()) {
        	    	doesMatch = true;
        	    }
        	}
    	   	return doesMatch;
    	}		
	]]>
</mx:Script>
<mx:XMLListCollection  id="filteredGenomeBuildList"/>
	<mx:VBox width="100%"  verticalGap="20">
		<mx:VBox width="100%" verticalGap="0">
				<mx:Label text="Group"/>
				<mx:ComboBox id="labCombo" 
				 labelField="@name"
				 dataProvider="{parentApplication.submitRequestLabList}"
				 visible="true" width="424" change="refreshAnalysisGroups();checkCompleteness()">
				</mx:ComboBox>
		</mx:VBox>
		<mx:VBox height="100%" verticalGap="0" width="100%" id="analysisGroupBox">
			<mx:Label text="Analysis group" id="label1"/>
			<mx:ComboBox width="424" id="analysisGroupCombo" 
				dataProvider="{analysisGroupList}" 
				labelField="@name" selectedIndex="-1" prompt="..." change="checkCompleteness()">						
			</mx:ComboBox>
			<mx:HBox width="100%" horizontalAlign="right" id="hbox1">
				<mx:LinkButton textDecoration="underline" color="#161FDA" id="newAnalysisGroupButton" label="New analysis group" click="currentState = &quot;NewAnalysisGroupState&quot;"/>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox height="100%" verticalGap="0" width="100%">
			<mx:Label text="Analysis name"/>
			<mx:TextInput id="analysisName" width="100%" change="checkCompleteness()"/>
		</mx:VBox>
		<mx:VBox height="100%" verticalGap="0" width="100%">
			<mx:Label text="Organism" width="100">
			</mx:Label>
			<mx:ComboBox  width="424" id="organismCombo" labelField="@display"  change="filteredGenomeBuildList.refresh();checkCompleteness();">
				<mx:dataProvider>{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Organism').DictionaryEntry}</mx:dataProvider>
			</mx:ComboBox>
		</mx:VBox>
		<mx:VBox height="100%" verticalGap="0" width="100%">
			<mx:Label text="Genome Build:" width="100">
			</mx:Label>
			<mx:ComboBox  width="424" id="genomeBuildCombo" labelField="@display"  change="checkCompleteness()">
				<mx:dataProvider>{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.GenomeBuild').DictionaryEntry}</mx:dataProvider>
			</mx:ComboBox>
		</mx:VBox>
	</mx:VBox>
	<mx:ControlBar horizontalAlign="right">
		<mx:Button label="Save" id="saveButton" click="validateAndSave()" icon="@Embed(source='../../assets/save.png')" enabled="{analysisName.text != '' &amp;&amp; analysisGroupCombo.selectedItem != null &amp;&amp; labCombo.selectedItem != null}" disabledIcon="@Embed(source='../../assets/save_disable.png')"/>
		<mx:Button label="Cancel" click="{mx.managers.PopUpManager.removePopUp(this)}"/>
	</mx:ControlBar>
	
	
	<mx:states>
		<mx:State name="NewAnalysisGroupState">
			<mx:RemoveChild target="{analysisGroupCombo}"/>
			<mx:RemoveChild target="{newAnalysisGroupButton}"/>
			<mx:SetProperty target="{label1}" name="text" value="New analysis group name"/>
			<mx:AddChild relativeTo="{analysisGroupBox}" position="lastChild">
				<mx:TextInput width="100%" id="newAnalysisGroupName" change="checkCompleteness()"/>
			</mx:AddChild>
			<mx:SetProperty target="{saveButton}" name="enabled" value="true">
			</mx:SetProperty>
			<mx:RemoveChild target="{hbox1}"/>
		
		</mx:State>
	</mx:states>
</mx:TitleWindow>
