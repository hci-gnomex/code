<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:views="views.*" 
		   xmlns:util="views.util.*" label="Files" xmlns:analysis="views.analysis.*">
	
	
	<mx:HTTPService  
		id="cacheAnalysisFileDownloadList" 
		url="CacheAnalysisFileDownloadList.gx"
		destination="cacheAnalysisFileDownloadList"
		resultFormat="e4x"
		showBusyCursor="false"
		result="onCacheAnalysisFileDownloadList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get cache file download list', event)"
		method="POST"
		useProxy="false">
		<mx:request>
			<fileDescriptorXMLString>{selectedFileList.toXMLString()}</fileDescriptorXMLString>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="cacheFDTFileDownloadList" 
		url="CacheAnalysisFileDownloadList.gx"
		destination="cacheAnalysisFileDownloadList"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onCacheFDTFileDownloadList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get cache file download list', event)"
		method="POST"
		useProxy="false">
		<mx:request>
			<fileDescriptorXMLString>{selectedFileList.toXMLString()}</fileDescriptorXMLString>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="getAnalysisDownloadList" 
		url="GetAnalysisDownloadList.gx"
		destination="getAnalysisDownloadList"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetAnalysisDownloadList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get analysis download list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >	
	
	<mx:HTTPService  
		id="fdtUploadStart" 
		url="FastDataTransferUploadStart.gx"
		resultFormat="e4x"
		showBusyCursor="true" 
		result="onFdtUploadStart(event)" 
		fault="parentApplication.onFailHttpRequest('Failed to start FDT upload', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="getFDTUploadInstructions" 
		url="FastDataTransferUploadGetJnlpServlet.gx"
		resultFormat="e4x"
		showBusyCursor="true" 
		result="onGetFDTUploadInstructions(event)" 
		fault="parentApplication.onFailHttpRequest('Failed to start FDT upload', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="getFDTDownloadInstructions" 
		url="FastDataTransferDownloadAnalysisServlet.gx"
		resultFormat="e4x"
		showBusyCursor="true" 
		result="onGetFDTDownloadInstructions(event)" 
		fault="parentApplication.onFailHttpRequest('Failed to start FDT upload', event)"
		method="GET"
		useProxy="false">
	</mx:HTTPService>
	
	<mx:HTTPService             
		id="makeUCSCLinks" 
		url="MakeDataTrackUCSCLinks.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onMakeUCSCLinks(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get UCSC link URLs', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService> 
	
	<mx:HTTPService             
		id="makeIGVLink" 
		url="MakeDataTrackIGVLink.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onMakeIGVLink(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get IGV link URL', event)"
		method="POST"
		useProxy="false">
		<mx:request>
			
		</mx:request>
	</mx:HTTPService> 
	
	<mx:HTTPService             
		id="makeLinks" 
		url="MakeDataTrackLinks.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onMakeLinks(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get link URLs', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService> 
	
	<mx:HTTPService             
		id="makeIOBIOLinks" 
		url="MakeDataTrackLinks.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onMakeIOBIOLinks(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get IOBIO link URLs', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService> 
	
	
	<mx:Script>
		<![CDATA[
			import flash.display.Sprite;
			import flash.net.FileReference;
			import flash.net.URLRequest;
			import flash.net.URLRequestMethod;
			import flash.net.URLVariables;
			
			import hci.flex.controls.CheckBox;
			
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.events.AdvancedDataGridEvent;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.ListEvent;
			import mx.events.PropertyChangeEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import views.experiment.DownloadProgressView;
			import views.renderers.CheckBoxGroupedItem;
			import views.util.FileUtil;
			import views.util.GuestDownloadTermsWindow;
			
			private var downloadWindow:AnalysisDownloadWindow;
			
			[Bindable]
			public var uploadButtonsVisible:Boolean = false;
			
			[Bindable]
			public var removeFileButtonsVisible:Boolean = false;
			
			[Bindable]
			public var rowCountMessage:String = new String();
			
			[Bindable]
			public var downloadSizeMessage:String = new String();
			
			[Bindable]
			public var browseMessage:String = new String();
			
			public var browseParameters:Object;
			
			[Bindable]
			private var selectedFileList:XMLListCollection;
			
			public var showCommandLineInstructions:Boolean = false;
			
			public var idAnalysis:String = "";
			
			private var estimatedDownloadSize:Number;
			
			private const DOWNLOAD_FILES_URL:String    = "DownloadAnalysisFileServlet.gx"; 
			private const SUGGESTED_LOCAL_FILENAME:String = "gnomex-analysis";  
			
			[Bindable]
			public var resultKeys:String;
			
			private var filesExceedingMaxMessage:String = "";
			
			public static const   ALERT_BUTTON_WIDTH:int = Alert.buttonWidth;
			
			private var dateFormatter:DateFormatter = new DateFormatter();
			
			private var uploadWindow:AnalysisUploadWindow = null;
			
			
			private function onGetAnalysisDownloadList(event:ResultEvent): void {
				if (getAnalysisDownloadList.lastResult.name() != "AnalysisDownloadList") {
					Alert.show(getAnalysisDownloadList.lastResult..ACTMESSAGE.@TEXT);
					return;
				} 
				this.downloadTree.visible = true;
				setFileCount();
				callLater(expandNodes); 
				
			}
			
			private function expandNodes():void {
				if(downloadList.length > 0) {
					downloadTree.expandItem(downloadList.getItemAt(0),true); 
				}	
			}
			
			private function getSelectedFolders():void {
				resultKeys = "";
				for(var i:Number = 0; i < downloadList.length; i++) {
					if (downloadList[i].@isSelected != null && downloadList[i].@isSelected.toString() == "true") {
						resultKeys += downloadList[i].@key + ":"; 
					}
				}     	
			}
			
			
			public function downloadExpandedFiles(selectedFiles:XMLList):void {
				selectedFileList = new XMLListCollection(selectedFiles);
				
				filesExceedingMaxMessage = "";
				if (selectedFileList.length == 0) {
					Alert.show("Please select the files to download.");
				} else {
					estimatedDownloadSize = 0;
					for each (var item:Object in selectedFileList) {
						var size:Number = FileUtil.getEstimatedCompressedSize(item);
						if (size > parentApplication.MAX_DOWNLOAD_SIZE) {
							if (filesExceedingMaxMessage.length > 0) {
								filesExceedingMaxMessage += ", ";
							}
							filesExceedingMaxMessage += item.@displayName;
						}
						estimatedDownloadSize += size;
					}
					
					var call:Object = cacheAnalysisFileDownloadList.send();
					call.marker = estimatedDownloadSize;    		
				}
			}
			
			public function setFileCount():void {
				rowCountMessage = getAnalysisDownloadList.lastResult..AnalysisFileDescriptor.(@type != 'dir').length() + " file(s)";    	
			}
			
			public function downloadFilesUsingFDT(selectedFiles:XMLList):void {
				selectedFileList = new XMLListCollection(selectedFiles);
				downloadFilesUsingFDTFromGlobalList();
			}
			
			private function downloadFilesUsingFDTFromGlobalList():void {
				if (selectedFileList.length == 0) {
					mx.controls.Alert.show("Please select the files to download.");
				} else {
					cacheFDTFileDownloadList.send();
				}
			} 
			private function onCacheFDTFileDownloadList(event:ResultEvent):void {
				// We have cached the selected analysis files
				// Now call the URL to start the FDT app using webstart
				showFastDataTransferDownloadPage();
			}
			
			public function showFastDataTransferDownloadPage():void {
				
				if(showCommandLineInstructions){
					var params:Object = new Object();
					params.showCommandLineInstructions = showCommandLineInstructions ? "Y" : "N";
					if (parentApplication.guestEmailAddress != null) {
						params.emailAddress = parentApplication.guestEmailAddress;
					}
					getFDTDownloadInstructions.send(params);
					showCommandLineInstructions = false;
				} else{
					var url:URLRequest = new URLRequest('FastDataTransferDownloadAnalysisServlet.gx');	
					url.contentType = "text/plain";
					url.method = URLRequestMethod.GET;
					var parms:URLVariables = new URLVariables();
					if (parentApplication.guestEmailAddress != null) {
						parms.emailAddress = parentApplication.guestEmailAddress;
					}
					parms.showCommandLineInstructions = this.showCommandLineInstructions ? "Y" : "N";
					url.data = parms;
					navigateToURL(url, '_self');
				}	
			}
			
			private function onGetFDTDownloadInstructions(event:ResultEvent):void{
				Alert.show(event.result.toString(), "Command Line Instructions");
			}
			
			public function startFDTUpload():void {			
				var params:Object = new Object();		
				params.idAnalysis = idAnalysis;
				showCommandLineInstructions = true;
				
				fdtUploadStart.send(params);
			}
			
			private function onFdtUploadStart(event:ResultEvent):void {
				if (fdtUploadStart.lastResult.name() == "FDTUploadUuid") {
					var uuid:String = fdtUploadStart.lastResult.@uuid;
					
					if(showCommandLineInstructions){
						var params:Object = new Object();
						params.uuid = uuid;
						params.showCommandLineInstructions = showCommandLineInstructions ? "Y" : "N";
						getFDTUploadInstructions.send(params);
						showCommandLineInstructions = false;
					} else{
						var url:URLRequest = new URLRequest('FastDataTransferUploadGetJnlpServlet.gx');
						var uv:URLVariables = new URLVariables();
						uv.uuid = uuid;
						uv.showCommandLineInstructions = showCommandLineInstructions ? "Y" : "N";
						url.data = uv;
						url.method = URLRequestMethod.POST;
						
						navigateToURL(url, '_self');
					}
				}
			}
			
			private function onGetFDTUploadInstructions(event:ResultEvent):void{
				Alert.show(event.result.toString(), "Command Line Instructions");
			}
			
			private function onCacheAnalysisFileDownloadList(event:ResultEvent):void {
				var call:Object = event.token;
				var message:String = "";
				var title:String = "";
				var estimatedSize:Number = call.marker;
				if (filesExceedingMaxMessage != "") {
					message = "The following files exceed the " + parentApplication.MAX_DOWNLOAD_SIZE_DISPLAY + " maximum:\n" + this.filesExceedingMaxMessage + ".\n\n";
					if (parentApplication.isFDTSupported) {
						message += "Do you want to be download using FDT instead?";
					} else {
						message += "Do you want to be directed to the browser page for downloading large files individually?";
					}
					title = "Download file exceeds maximum size"; 
					Alert.show( message,
						title,
						(Alert.OK | Alert.CANCEL), this, 
						onAlternateDownloadFiles,						
						parentApplication.iconWarning);
					
				} else if (estimatedSize >= parentApplication.MAX_DOWNLOAD_SIZE) {
					message =  
						"The total download size (" + FileUtil.getFileSizeText(call.marker) + ") exceeds the " + parentApplication.MAX_DOWNLOAD_SIZE_DISPLAY + " maximum.\n\n"
					if (parentApplication.isFDTSupported) {
						message += "Please choose FDT Download instead";
					} else {
						message += "You must unselect some files or click on the 'Download large files' link to download files individually."; 
					}
					title = "Total download size exceeds maximum size"; 
					Alert.show( message, title);
					
				} else {
					message = "Ready to download approximately " + FileUtil.getFileSizeText(call.marker) + " of data.  Proceed?";
					Alert.show( message,
						title,
						(Alert.YES | Alert.NO), parentApplication.theBody, 
						onDownloadFiles,						
						parentApplication.iconWarning);
				}
			}
			
			private function onDownloadFiles(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					var parms:URLVariables = new URLVariables();
					parms.mode =  "zip";
					if (parentApplication.guestEmailAddress != null) {
						parms.emailAddress = parentApplication.guestEmailAddress;
					}
					var progressWindow:DownloadProgressView = new DownloadProgressView();
					progressWindow.init(parentApplication.theBody, this.DOWNLOAD_FILES_URL, parms, downloadWindow.downloadExpandedFilesButton, estimatedDownloadSize, this.SUGGESTED_LOCAL_FILENAME);		
				}
			}    
			
			public function showAlternateDownloadPage(selectedFiles:XMLList):void {
				// Sort by request number to avoid duplicates
				var filesCollection:XMLListCollection = new XMLListCollection(selectedFiles);
				var sortByNum:Sort = new Sort();
				sortByNum.fields = [new SortField("idAnalysis")];
				filesCollection.sort = sortByNum;
				filesCollection.refresh();
				
				var idAnalysisList:String = "";
				var previous:String = "";
				for each(var dl:Object in filesCollection.source) {
					var currentNum:String = dl.@idAnalysis;
					if ( currentNum != previous ) {
						if (idAnalysisList.length > 0) {
							idAnalysisList += ":"
						}
						idAnalysisList += currentNum;
					}
					previous = currentNum;
				}
				
				var parms:URLVariables = new URLVariables;
				parms.idAnalysis = idAnalysisList;
				parms.emailAddress = parentApplication.guestEmailAddress;
				var url:URLRequest = new URLRequest('ShowAnalysisDownloadForm' + 
					(parentApplication.isGuestMode() ? 'ForGuest' : '') +   
					'.gx');
				url.data = parms;
				navigateToURL(url, '_blank');					
			}
			
			private function onAlternateDownloadFiles(event:CloseEvent):void {
				if (event.detail==Alert.OK) {
					if (parentApplication.isFDTSupported) {
						downloadFilesUsingFDTFromGlobalList();
					} else {
						showAlternateDownloadPage(selectedFileList.source);	
					}
				} 		
			}
			
			public function selectDownload(analysisNumber:String):void {
				var pos:int = -1;
				for each(var a:Object in downloadList) {
					if (a.@analysisNumber == analysisNumber) {
						downloadTree.selectedItem = a;
						break;
					}
					pos++;
					for each(var ad:Object in a.AnalysisDownload) {
						pos++;
						for each(var fd:Object in ad.AnalysisFileDescriptor) {
							pos++;
						}
					}
				}
				
				if (pos >= 0) {
					downloadTree.scrollToIndex(pos);
				}
			}
			
			
			
			private function showAnalysisUploadWindow():void {
				var analysis:Object = getAnalysisDownloadList.lastResult..Analysis[0];
				uploadWindow = AnalysisUploadWindow(PopUpManager.createPopUp(parentApplication.mainArea, AnalysisUploadWindow, true));
				uploadWindow.addEventListener(CloseEvent.CLOSE, refreshDownloadView);
				uploadWindow.init(analysis);
			}
			
			private function showAnalysisOrganizeWindow():void {
				var analysis:Object = getAnalysisDownloadList.lastResult..Analysis[0];
				uploadWindow = AnalysisUploadWindow(PopUpManager.createPopUp(parentApplication.mainArea, AnalysisUploadWindow, true));
				uploadWindow.theTab.selectedIndex = 1;
				uploadWindow.addEventListener(CloseEvent.CLOSE, refreshDownloadView);
				uploadWindow.init(analysis);
			}
			
			private function showDownloadWindow():void {
				if (this.browseParameters != null) {
					var downloadTerms:String = parentApplication.getProperty(parentApplication.PROPERTY_GUEST_DOWNLOAD_TERMS);
					if (parentApplication.isGuestMode() && downloadTerms != null && downloadTerms != '' && (parentApplication.guestEmailAddress == null || parentApplication.guestEmailAddress == '')) {
						var termsWindow:GuestDownloadTermsWindow = GuestDownloadTermsWindow(PopUpManager.createPopUp(parentApplication.mainArea, GuestDownloadTermsWindow, true));
						termsWindow.addEventListener(CloseEvent.CLOSE, checkGuestDownloadTerms);
						PopUpManager.centerPopUp(termsWindow);
					} else {
						showDownloadWindowAfterGuestPrompt();
					}
				}
			}
			
			public function checkGuestDownloadTerms(e:CloseEvent):void {
				if (e.detail == 1) {
					parentApplication.guestEmailAddress = e.target.emailAddress;
					showDownloadWindowAfterGuestPrompt();
				}
			}
			
			public function showDownloadWindowAfterGuestPrompt():void {
				if (this.browseParameters != null) {	  
					downloadWindow = AnalysisDownloadWindow(PopUpManager.createPopUp(parentApplication.theBody, AnalysisDownloadWindow, true));
					downloadWindow.downloadView = this;
					downloadWindow.browseParameters = this.browseParameters;
					downloadWindow.centerWindow();
					downloadWindow.init();
				}
			}
			
			private function showAnalysisFDTUploadWindow():void {
				var analysis:Object = getAnalysisDownloadList.lastResult..Analysis[0];
				uploadWindow = AnalysisUploadWindow(PopUpManager.createPopUp(parentApplication.mainArea, AnalysisUploadWindow, true));
				uploadWindow.addEventListener(CloseEvent.CLOSE, refreshDownloadView);
				PopUpManager.centerPopUp(uploadWindow);
				uploadWindow.init(analysis);
				uploadWindow.uploadFilesStack.selectedIndex = 1;
			} 
			
			public function refreshDownloadView(e:CloseEvent):void {
				var params:Object = new Object();
				params.idAnalysis = e.detail;
				params.includeUploadStagingDir = 'Y';
				getAnalysisDownloadList.send(params);
			}
			
			
			private function dataTrackFileSelected():Boolean {
				var hasDataTrack:Boolean = false;
				for each(var f:Object in getAnalysisDownloadList.lastResult..AnalysisFileDescriptor.(@isSelected == "true")){		
					if (f.@hasDataTrack == 'Y') {
						hasDataTrack = true;
						break
					}
				}
				return hasDataTrack;
			}
			
			public function getDirtyAnalysisFiles():XML{
				var topNodeShallow:XML = new XML("<Analysis/>");
				if(downloadList.length > 0) {
					shallowCopy(downloadList[0] as XML, topNodeShallow);
					recurseGetDirty(downloadList[0], topNodeShallow);					
				}
				return topNodeShallow;
			}
			
			public function getDataTrackAnalysisFiles():XML{
				var topNodeShallow:XML = new XML("<Analysis/>");
				if(downloadList.length > 0) {
					shallowCopy(downloadList[0] as XML, topNodeShallow);
					recurseGetDataTrack(downloadList[0], topNodeShallow);
				}
				return topNodeShallow;
			}
			
			
			private function recurseGetDirty(node:XML, nodeShallow:XML):void {
				for each(var childNode:XML in node.children()) {
					var keep:Boolean = false;					
					if (childNode.@type == 'dir') {
						if (childNode.@dirty == 'Y') {
							keep = true;
						} else {
							var dirtyNodes:XMLList = childNode..AnalysisFileDescriptor.(@dirty == 'Y');
							if (dirtyNodes.length() > 0) {
								keep = true;
							}
						}
					} else if (childNode.@dirty == 'Y') {
						keep = true;
					}
					if (keep) {
						var childNodeShallow:XML = new XML("<AnalysisFileDescriptor/>");
						shallowCopy(childNode, childNodeShallow);
						nodeShallow.appendChild(childNodeShallow);
					}
					recurseGetDirty(childNode, childNodeShallow);
				}
			}
			
			private function recurseGetDataTrack(node:XML, nodeShallow:XML):void {
				for each(var childNode:XML in node.children()) {
					var keep:Boolean = false;					
					if (childNode.@type == 'dir') {
						if (childNode.@isSupportedDataTrack == 'Y') {
							keep = true;
						} else {
							var dirtyNodes:XMLList = childNode..AnalysisFileDescriptor.(@isSupportedDataTrack == 'Y');
							if (dirtyNodes.length() > 0) {
								keep = true;
							}
						}
					} else if (childNode.@isSupportedDataTrack == 'Y') {
						keep = true;
					}
					if (keep) {
						var childNodeShallow:XML = new XML("<AnalysisFileDescriptor/>");
						shallowCopy(childNode, childNodeShallow);
						nodeShallow.appendChild(childNodeShallow);
					}
					recurseGetDataTrack(childNode, childNodeShallow);
				}
			}
			
			private function shallowCopy(source:XML, destination:XML):void {
				for each(var attr:XML in source.attributes()) {
					destination[attr.name()] = attr.toString();
				}
			}
			
			
			public function hasUnregisteredFiles():Boolean {
				var hasUnregisteredFile:Boolean = false;
				for each(var a:Object in getAnalysisDownloadList.lastResult..AnalysisFileDescriptor) {
					if (a.@type != "dir") {
						if (a.@idAnalysisFileString.toString().indexOf("AnalysisFile") == 0) {
							hasUnregisteredFile = true;
							break;
						}
					}
				}
				return hasUnregisteredFile;
			}
			
			public function hasUnregisteredDataTrackFiles():Boolean {
				var hasUnregisteredFile:Boolean = false;
				for each(var a:Object in getAnalysisDownloadList.lastResult..AnalysisFileDescriptor) {
					if (a.@type != "dir" && a.@isSupportedDataTrack == "Y") {
						if (a.@idAnalysisFileString.toString().indexOf("AnalysisFile") == 0) {
							hasUnregisteredFile = true;
							break;
						}
					}
				}
				return hasUnregisteredFile;
			}
			
			
			private function checkEdit(event:AdvancedDataGridEvent):void{
				if ( event.itemRenderer.data.@type == "dir"){
					event.preventDefault();
				} else {
					event.itemRenderer.data.@dirty = 'Y';
					parentDocument.dirty.setDirty();
				}
			}
			
			/************************************************************************
			 * Make URL Links for all files, converts useq to bw/bb
			 *
			 */
			public function createURLLinks(txt:String):void {
				//send to server
				var params:Object = new Object();
				params.idDataTrack = "12345";
				params.idAnalysisFile = txt;
				
				makeLinks.send(params);
			}
			
			//response from server
			private function onMakeLinks(event:ResultEvent):void {
				if (makeLinks.lastResult.name() == "SUCCESS") {
					var txt:String = makeLinks.lastResult.@urlsToLink;
					var alert:Alert = Alert.show(txt, "URL Links:");
					alert.mx_internal::alertForm.mx_internal::textField.htmlText =txt;
				}
				else {
					Alert.show("Please distribute a data track for this file or auto distribute all data tracks " +
						"for this analysis and try again.", "No data track exists");
				}
			}
			
			/************************************************************************
			 * Make URL Links and start bam.iobio.io
			 *
			 */
			public function createIOBIOLinks(txt:String):void {
				
				//send to server
				var params:Object = new Object();
				params.idDataTrack = "12345";
				params.idAnalysisFile = txt;
								
				makeIOBIOLinks.send(params);
			}
			
			//response from server
			private function onMakeIOBIOLinks(event:ResultEvent):void {
				if (makeIOBIOLinks.lastResult.name() == "SUCCESS") {
					var txt:String = parentApplication.bam_iobio_viewer_url + makeIOBIOLinks.lastResult.@urlsToLink;
					if (makeIOBIOLinks.lastResult.@urlsToLink.toLowerCase().indexOf(".vcf.gz")>0) {
						txt = parentApplication.vcf_iobio_viewer_url + makeIOBIOLinks.lastResult.@urlsToLink;
					}
					
					navigateToURL(new URLRequest(txt),"IOBIO");
				} else {
					Alert.show("Please distribute a data track for this file or auto distribute all data tracks " +
						"for this analysis and try again.", "No data track exists");
				}
			}
			
			/************************************************************************
			 * Make IGV Link 
			 *
			 */
			public function createIGVLink():void {
					Alert.show("Creating an IGV data repository containing all user-visible datatracks affiliated with IGV-supported genome builds. " + 
						"If there are unconverted USeq files, this can take a significant amount of time.  When finished, a URL link will be displayed. " +
						"Paste the link into IGV's Data Registry URL field.  If new data tracks are added, a new repository must be created, but the " +
						"link will remain valid.\n\nDo you wish to continue?", "IGV Warning", Alert.YES | Alert.NO, this, onIGVLinkPrompt);
					makeIGVLink.send();
			}
			
			private function onIGVLinkPrompt(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					makeIGVLink.send();
				}
			}
			
			private function onMakeIGVLink(event:ResultEvent):void {
				if (makeIGVLink.lastResult.name() == "SUCCESS") {
					var txt:String = makeIGVLink.lastResult.@igvURL;
					var alert:Alert = Alert.show(txt, "IGV Link:");
					alert.mx_internal::alertForm.mx_internal::textField.htmlText =txt;
				}
				else {
					Alert.show("Please distribute a data track for this file or auto distribute all data tracks " +
						"for this analysis and try again.", "No data track exists");
				}
			}
			
			/************************************************************************
			 * Make UCSC Links 
			 *
			 */
			public function createUCSCLink(txt:String):void {
				var params:Object = new Object();
				params.idDataTrack = "12345";
				params.idAnalysisFile = txt;
				
				makeUCSCLinks.send(params);
			}
			
			private function onMakeUCSCLinks(event:ResultEvent):void {
				if (makeUCSCLinks.lastResult.name() == "SUCCESS") {
					navigateToURL(new URLRequest(makeUCSCLinks.lastResult.@ucscURL1),"UCSC");
					//work around to flex bug
					if (makeUCSCLinks.lastResult.@ucscURL2 != ""){
						var txt:String = "Click to load second track after first completes:<br><br><a href='"+makeUCSCLinks.lastResult.@ucscURL2+"' target='UCSC'><b><u>Load Second Track</u></b></a>";
						var alert:Alert = Alert.show(txt);
						alert.mx_internal::alertForm.mx_internal::textField.htmlText =txt;
					}
					
				}
				else {
					Alert.show("Please distribute a data track for this file or auto distribute all data tracks " +
						"for this analysis and try again.", "No data track exists");
				}
			}
			
			
			
			
		]]>
	</mx:Script>
	
	<mx:XMLListCollection id="downloadList" source="{getAnalysisDownloadList.lastResult.Analysis}"/>
	
	<mx:VBox width="100%" height="100%" paddingBottom="0" paddingLeft="4" paddingRight="4" paddingTop="0" verticalGap="0">
		
		<mx:HBox width="100%" visible="{browseMessage != ''}" includeInLayout="{browseMessage != ''}" horizontalAlign="center" styleName="warningLabel" verticalAlign="middle">
			<mx:Label text="{browseMessage}"/>			
		</mx:HBox>
		<mx:HBox  paddingTop="2" paddingBottom="2" verticalAlign="middle">	
			<mx:HBox id="deleteButtonsContainer"  
					 includeInLayout="{this.uploadButtonsVisible || this.removeFileButtonsVisible}" 
					 visible="{this.uploadButtonsVisible || this.removeFileButtonsVisible}" 
					 horizontalAlign="right" paddingTop="2" paddingBottom="2">
				<mx:LinkButton label="Upload files" 
							   click="showAnalysisUploadWindow()" 
							   visible="{this.uploadButtonsVisible}"
							   includeInLayout="{this.uploadButtonsVisible}"
							   id="linkbutton1" textDecoration="underline" 
							   icon="@Embed(source='../../assets/upload.png')" 
							   textAlign="left"/>
				<mx:LinkButton label="FDT Upload Command Line" 
							   visible="{this.uploadButtonsVisible &amp;&amp; parentApplication.isFDTSupported}"
							   includeInLayout="{this.uploadButtonsVisible &amp;&amp; parentApplication.isFDTSupported}"
							   click="this.startFDTUpload()" 
							   id="fdtUploadCommandLine" textDecoration="underline" icon="@Embed(source='../../assets/upload_large.png')" textAlign="left"/>
				<mx:LinkButton label="FDT Upload files" 
							   visible="{this.uploadButtonsVisible &amp;&amp; parentApplication.isFDTSupported}"
							   includeInLayout="{this.uploadButtonsVisible &amp;&amp; parentApplication.isFDTSupported}"
							   click="showAnalysisFDTUploadWindow()" 
							   id="linkbuttonUploadFDT" textDecoration="underline" icon="@Embed(source='../../assets/upload_large.png')" textAlign="left"/>
				<mx:LinkButton label="Manage files"  
							   toolTip="Add, delete, rename files and folders."
							   visible="{this.uploadButtonsVisible}"
							   includeInLayout="{this.uploadButtonsVisible}"
							   click="showAnalysisOrganizeWindow()" 
							   id="uploadOrganizeLink" 
							   textDecoration="underline" icon="@Embed(source='../../assets/chart_organisation.png')" 
							   textAlign="left"/>
			</mx:HBox>
			<mx:LinkButton label="Download files"  
						   click="showDownloadWindow()" 
						   id="downloadLink" 
						   textDecoration="underline" icon="@Embed(source='../../assets/download.png')" 
						   textAlign="left"/>
		</mx:HBox>
		<mx:AdvancedDataGrid id="downloadTree" width="100%" height="100%" 
							 dropEnabled="false"  
							 displayItemsExpanded="false"
							 iconFunction="parentApplication.getTreeIcon"
							 dragEnabled="true"  
							 dragMoveEnabled="false"  
							 showHeaders="true"  
							 sortExpertMode="true" 
							 allowMultipleSelection="true"
							 sortableColumns="false"
							 borderStyle="solid" 
							 headerWordWrap="false" 
							 resizableColumns="true"
							 editable="true"
							 itemEditBeginning="checkEdit(event)">						
			<mx:dataProvider> 
				<mx:HierarchicalData source="{downloadList}"/>
			</mx:dataProvider>						  
			<mx:columns>
				<mx:AdvancedDataGridColumn dataField="@displayName"  editable="false" headerText="Folder or File" width="215"/> 
				<mx:AdvancedDataGridColumn dataField="@viewURL" headerText="" editable="false" width="25" itemRenderer="views.renderers.LinkButtonViewFile"/>
				<mx:AdvancedDataGridColumn dataField="@fileSizeText" editable="false" headerText="Size" width="25" textAlign="right" /> 
				<mx:AdvancedDataGridColumn dataField="@lastModifyDateDisplay" editable="false" headerText="Modified" width="20"/>
				<mx:AdvancedDataGridColumn dataField="@URLLinkAllowed" headerText="URL" editable="false" width="9" minWidth="9" itemRenderer="views.renderers.LinkButtonURLLink"/>
				<mx:AdvancedDataGridColumn dataField="@UCSCViewer" headerText="UCSC" editable="false" width="12" minWidth="12" itemRenderer="views.renderers.LinkButtonUCSCViewer"/>
				<mx:AdvancedDataGridColumn dataField="@IGVViewer" headerText="IGV" editable="false" width="9" minWidth="9" itemRenderer="views.renderers.LinkButtonIGVViewer"/>
				<mx:AdvancedDataGridColumn dataField="@BAMIOBIOViewer" headerText="IOBIO" editable="false" width="12" minWidth="12" itemRenderer="views.renderers.LinkButtonIOBIOViewer"/>
			</mx:columns>
		</mx:AdvancedDataGrid>
		
		<mx:HBox width="100%" horizontalAlign="left">
			<mx:Label text="{downloadSizeMessage}" fontWeight="normal" fontStyle="normal" />
			<mx:Spacer width="100%"/>
			<mx:Label text="{rowCountMessage}" width="100%" textAlign="right"/>
		</mx:HBox>
		
	</mx:VBox>
	
	
	
	
</mx:Canvas>


