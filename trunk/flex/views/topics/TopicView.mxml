<?xml version="1.0" encoding="utf-8"?>
<mx:VBox  width="100%" height="100%" styleName="panelBox"
		  xmlns:mx="http://www.adobe.com/2006/mxml"     
		  xmlns:views="views.*" 
		  xmlns:util="views.util.*" 
		  xmlns:renderers="views.renderers.*" 
		  showEffect="{parentApplication.fadeIn}" hideEffect="{parentApplication.fadeOut}" xmlns:util1="util.*">
	
	
	<mx:VBox width="100%" verticalGap="2">
		<mx:HBox horizontalGap="0" verticalAlign="middle">
			<mx:Image source="{parentApplication.iconTopic}"/>
			<mx:Label id="titleLabel" styleName="titleLabel" text="{'Topic T' + parentDocument.browseTree.selectedItem.@idTopic + ' - ' + parentDocument.browseTree.selectedItem.@name}" />
			<mx:Spacer width="20"/>
			<mx:LinkButton label="Share web link" fontSize="9" click="{showLinks();}" icon="@Embed(source='../../assets/globe_link.png')" id="shareWebLink" textDecoration="underline" textAlign="left"/>
		</mx:HBox>
	</mx:VBox>
	

	<mx:HTTPService             
		id="updateTopic" 
		url="SaveTopic.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onUpdateTopic(event)"
		fault="parentApplication.onFailHttpRequest('Failed to update topic', event)"
		method="POST"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService>	

	<mx:HTTPService             
		id="getLab" 
		url="GetLab.gx" 
		destination="getLab" 
		resultFormat="e4x"
		result="onGetLab(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get lab', event)"
		method="POST" 
		useProxy="false">
	</mx:HTTPService> 
	
<mx:Script>
<![CDATA[
	import mx.collections.Sort;
	import mx.collections.XMLListCollection;
	import mx.controls.Alert;
	import mx.managers.PopUpManager;
	import mx.rpc.events.ResultEvent;
	
	import views.util.PromptXMLListCollection;
	import views.util.GNomExStringUtil;
	import views.util.WebLinksView;
	
	[Bindable]
	private var possibleInstitutions:PromptXMLListCollection;
	
	[Bindable]
	private var appUsersForLab:XMLListCollection;
	private var appUserSort:Sort;
	
	private var idLab:String;
	private var currentOwnerId:String;
	

	
	public function init():void {
		if (parentDocument.browseTree.selectedItem.@canWrite == "Y") {
			if (this.labStack != null) {
				labStack.selectedIndex = 0;
			}
			radioOwnerVisibility.enabled = true;
			radioMembersVisibility.enabled = true;
			radioPublicVisibility.enabled = true;
			topicName.editable = true;
			descriptionRichText.textArea.editable = true;

		} else {
			if (this.labStack != null) {
				labStack.selectedIndex = 1;
			}
			radioOwnerVisibility.enabled = false;
			radioMembersVisibility.enabled = false;
			radioPublicVisibility.enabled = false;
			topicName.editable = false;
			descriptionRichText.textArea.editable = false;
		}
		
		idLab = parentDocument.browseTree.selectedItem.@idLab;
		labCombo.selectedItem = parentApplication.getLabList.lastResult.Lab.(@idLab == idLab);
		
		currentOwnerId =  parentDocument.browseTree.selectedItem.@idAppUser != null ? parentDocument.browseTree.selectedItem.@idAppUser : "";
		
		var params:Object = new Object();
		params.idLab = parentDocument.browseTree.selectedItem.@idLab;
		getLab.send(params);
		
		this.dirtyTopic.resetDirty();
		
		this.visibilityRadioGroup.selectedValue = parentDocument.browseTree.selectedItem.@codeVisibility;
	}
	
	private function onGetLab(event:ResultEvent):void {			
		if (getLab.lastResult.name() == "OpenLabList") {
			var emptyNode:XML = new XML("<Institution " +
				" display=''" +
				" idInstitution=''"  +
				"/>");
			possibleInstitutions = new PromptXMLListCollection(emptyNode, new XMLListCollection(getLab.lastResult..Lab.(@idLab == parentDocument.browseTree.selectedItem.@idLab).institutions.Institution.(@isActive == 'Y')));
			this.radioInstitutionVisibility.enabled = this.possibleInstitutions.length > 1;
			if (parentDocument.browseTree.selectedItem.@idInstitution != null && parentDocument.browseTree.selectedItem.@idInstitution != '') {
				for each(var inst:Object in possibleInstitutions) {
					if (inst.@idInstitution == parentDocument.browseTree.selectedItem.@idInstitution) {
						this.institutionCombo.selectedItem =  inst;
						break;
					}
				}
			} else {		
				var hasDefault:Boolean = false;
				if(radioInstitutionVisibility.selected && radioInstitutionVisibility.enabled) {
					for each(inst in possibleInstitutions) {
						if (inst.@isDefault == 'Y') {
							this.institutionCombo.selectedItem =  inst;
							hasDefault = true;
							break;
						}
					}	
				} else if(radioInstitutionVisibility.selected && !radioInstitutionVisibility.enabled){
					// Default to Member if institution selected but not enabled
					this.visibilityRadioGroup.selectedValue = 'MEM';					
				}					
				if(!hasDefault) {
					this.institutionCombo.selectedIndex = 0;
				}						
			}
			
			var lab:Object = getLab.lastResult..Lab.(@idLab == idLab);
			emptyNode = <AppUser idAppUser='' displayName=''/>;
			appUsersForLab = new XMLListCollection(lab.members.AppUser.(@isActive=='Y'));
			for each (var mgr:Object in lab.managers.AppUser) {
				if (!appUsersForLab.contains(mgr)) {
					if(mgr.@isActive=='Y') {
						appUsersForLab.addItem(mgr);
					}
									
				}
			}
			appUsersForLab.addItemAt(emptyNode, 0);
			
			appUserSort = new Sort();
			appUserSort.compareFunction = this.sortAppUsers;
			appUsersForLab.sort = appUserSort;
			appUsersForLab.refresh();
			ownerCombo.dataProvider = appUsersForLab;
			ownerCombo.selectedItem = emptyNode;
			for each(var a:Object in appUsersForLab) {
				if (a.@idAppUser == currentOwnerId) {
					ownerCombo.selectedItem = a;
					break;
				}
			}			
		}
		if (parentDocument.browseTree.selectedItem.@canWrite != "Y") {
			this.institutionCombo.enabled = false;
			radioInstitutionVisibility.enabled = false;
		}
	}
	
	private function sortAppUsers(obj1:Object, obj2:Object, fields:Array=null):int {
		if (obj1 == null && obj2 == null) {
			return 0;
		} else if (obj1 == null) {
			return 1;
		} else if (obj2 == null) {
			return -1;
		} else {
			var display1:String = obj1.@displayName;
			var display2:String = obj2.@displayName;
			
			if (display1.toLowerCase() < display2.toLowerCase()) {
				return -1;
			} else if (display1.toLowerCase() > display2.toLowerCase()) {
				return 1;
			} else {
				return 0;
			}
			
		}
	}
	
	public function showLinks():void {
		var webLinksView:WebLinksView = new WebLinksView();
		var topicNumber:String = "?topicNumber=" + parentDocument.browseTree.selectedItem.@idTopic;

		PopUpManager.addPopUp(webLinksView, this, true);
		PopUpManager.centerPopUp(webLinksView);
		webLinksView.setTitleMessage("Topic " + parentDocument.browseTree.selectedItem.@name);
		webLinksView.setUserLink(topicNumber);
	}
	
	private function save():void {
		
		if (labCombo.selectedItem == null) {
			theTab.selectedChild = idInfo;
			labCombo.setFocus();
			Alert.show("Please select a Lab.");
			return;        		
		} 
		if (ownerCombo.selectedItem == null || ownerCombo.selectedIndex == 0) {
			theTab.selectedChild = idInfo;
			ownerCombo.setFocus();
			Alert.show("Please select the topic owner.");
			return;        		
		} 
		var params:Object = new Object();
		params.idTopic      		  = parentDocument.browseTree.selectedItem.@idTopic;
		params.idParentTopic      	  = parentDocument.browseTree.selectedItem.@idParentTopic;
		params.name                   = this.topicName.text;
		params.description            = GNomExStringUtil.cleanRichTextHTML(this.descriptionRichText.htmlText);
		params.idLab                  = labCombo.selectedItem != null ? labCombo.selectedItem.@idLab : "";
		params.idAppUser              = ownerCombo.selectedItem != null ? ownerCombo.selectedItem.@idAppUser : "";
		params.codeVisibility         = this.visibilityRadioGroup.selectedValue != null ? this.visibilityRadioGroup.selectedValue : "";
		if (params.codeVisibility == 'INST') {
			params.idInstitution      = this.institutionCombo.selectedItem != null ? this.institutionCombo.selectedItem.@idInstitution : "";				
		} 		
		updateTopic.send(params);
	}
	
	
	private function onUpdateTopic(event:ResultEvent):void {
		if (updateTopic.lastResult.name() == "SUCCESS") {
			this.dirtyTopic.resetDirty();
			var visibilityMsg:String = updateTopic.lastResult.@visibilityMsg;
			if(visibilityMsg.length > 0) {
				var outMsg:String = visibilityMsg = "A topic may not be given broader visibility than its parent. Since the parent is currently only visible to " 
					+ visibilityMsg + ", visibility for this topic has been set to the same level.";
				if(visibilityMsg.indexOf("owner") < 1) {
					visibilityMsg += " You may still change it to be more restrictive, if desired."
				}
				Alert.show(outMsg,
					"Visibility Restriction");
				parentDocument.refreshTopicsAndSelect(this.parentDocument.browseTree.selectedItem);
			} else {
				parentDocument.treeItemToSelect = this.parentDocument.browseTree.selectedItem;
				parentDocument.refreshTopics();
			}		
		} else {
			Alert.show(updateTopic.lastResult..ACTMESSAGE.@TEXT);
		} 
	}

	private function removeRichTextButtons():void {
		this.descriptionRichText.toolbar.removeChild(descriptionRichText.colorPicker);
		this.descriptionRichText.toolbar.removeChild(descriptionRichText.fontFamilyCombo);
		this.descriptionRichText.toolbar.removeChild(descriptionRichText.fontSizeCombo);
	}
	
	private function labSelected():void {		
		dirtyTopic.setDirty();
		var params:Object = new Object();
		idLab = labCombo.selectedItem != null ? labCombo.selectedItem.@idLab : "";
		if(idLab.length > 0) {
			currentOwnerId = ownerCombo.selectedItem != null ? ownerCombo.selectedItem.@idAppUser : "";
			params.idLab = idLab;
			getLab.send(params);
		}
	}
		
]]>
</mx:Script>	
	
<mx:TabNavigator id="theTab" width="100%" height="100%" tabWidth="130"  styleName="panelBody" dropShadowEnabled="true" dropShadowColor="#E5E5E1">
	<mx:VBox id="idInfo" label="Info" width="100%" height="100%" verticalGap="4" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">				    
		<mx:HBox width="100%" >
			<mx:Label text="Name:" width="120"/>
			<mx:TextInput id="topicName" width="450" text="{parentDocument.browseTree.selectedItem.@name}" change="dirtyTopic.setDirty()" maxChars="2000"/>
		</mx:HBox>
		<mx:HBox width="100%" >
			<mx:Label text="Lab:" width="120" />
			<mx:ViewStack id="labStack" width="100%">
				<mx:HBox horizontalGap="0" paddingLeft="0" paddingRight="0" paddingBottom="0" paddingTop="0" width="100%">
					<renderers:FilterComboBox dataProvider="{parentApplication.submitRequestLabList.source}" 
											  labelField="@name" 
											  prompt="Lab..."
											  width="200"
											  close="labSelected();" 
											  id="labCombo">
					</renderers:FilterComboBox>
					<mx:Label text="Owner:" paddingLeft="8"/>
					<util:ComboBoxDatProvChangeFix width="200" id="ownerCombo" labelField="@displayName" dataProvider="{appUsersForLab}" change="dirtyTopic.setDirty()"></util:ComboBoxDatProvChangeFix>							         			
				</mx:HBox>
				<mx:HBox horizontalGap="0" paddingLeft="0" paddingRight="0" paddingBottom="0" paddingTop="0">
					<mx:Label text="{parentDocument.browseTree.selectedItem.@lab}"/>							         			
					<mx:Label text="Owner:" paddingLeft="8"/>
					<mx:Label text="{parentDocument.browseTree.selectedItem.@appUser}"/>							         			
				</mx:HBox>
			</mx:ViewStack>
		</mx:HBox>		<mx:HBox width="100%" height="100%">
			<mx:Label text="Description:" width="120"/>
			<mx:RichTextEditor  borderStyle="none"  headerHeight="0"  
								id="descriptionRichText" width="100%" 
								htmlText="{parentDocument.browseTree.selectedItem.@description}" 
								showControlBar="{parentDocument.browseTree.selectedItem.@canWrite == 'Y' ? true : false}"
								change="this.dirtyTopic.setDirty()"
								creationComplete="removeRichTextButtons()"
								paddingLeft="0" paddingRight="0" paddingTop="0" 
								roundedBottomCorners="false" paddingBottom="0" 
								borderThicknessRight="0" borderThicknessLeft="0" 
								borderThicknessBottom="0" borderThickness="0" 
								borderThicknessTop="0" height="100%" minHeight="50"/>
		</mx:HBox>
		<mx:HBox width="100%" horizontalGap="0" >
			<mx:Label text="Created by:" width="126"/>
			<mx:Label text="{parentDocument.browseTree.selectedItem.@createdBy + ' ' + parentDocument.browseTree.selectedItem.@createDate}" width="100%"/>
		</mx:HBox>
	</mx:VBox>
		
	<mx:VBox width="100%" height="100%" id="idVisibility" label="Visibility" paddingLeft="4" paddingRight="4" paddingBottom="4" verticalGap="0" paddingTop="0">
		<mx:HBox width="100%" horizontalGap="0" id="hbox1">
			<mx:Text id="labelApplication" text="The level of visibility for this topic:&#xd;"/>
			<mx:RadioButtonGroup id = "radioGroupSeqApp">       	
			</mx:RadioButtonGroup>
		</mx:HBox>
		<mx:HBox paddingLeft="20" horizontalGap="10" width="100%">
			<mx:VBox verticalGap="0">
				<mx:RadioButtonGroup id="visibilityRadioGroup"/>
				<mx:HBox horizontalGap="4" verticalAlign="middle">
					<mx:Image  scaleContent="false" width="16" height="16" source="{parentApplication.iconTopicOwner}"/>
					<mx:RadioButton id="radioOwnerVisibility" value="OWNER" groupName="visibilityRadioGroup"  click="{dirtyTopic.setDirty();}" label="Owner       (the owner and the group manager)"/>								  
				</mx:HBox>
				<mx:HBox horizontalGap="4"  verticalAlign="middle">
					<mx:Image  scaleContent="false" width="16" height="16" source="{parentApplication.iconTopicMember}"/>
					<mx:RadioButton id="radioMembersVisibility" value="MEM" selected="true" groupName="visibilityRadioGroup"  click="{dirtyTopic.setDirty();}" label="Members   (all members of the group)"/>
				</mx:HBox>
				<mx:HBox horizontalGap="4"  verticalAlign="middle">
					<mx:Image scaleContent="false" width="16" height="16" source="{parentApplication.iconTopicInstitution}"/>
					<mx:RadioButton value="INST"  groupName="visibilityRadioGroup"  click="{dirtyTopic.setDirty();}" id="radioInstitutionVisibility" enabled="{possibleInstitutions.length > 0}" label="Institution  (all groups that are part of institution)"/>
					<mx:ComboBox width="210" dataProvider="{this.possibleInstitutions}" id="institutionCombo" labelField="@display"  editable="false" enabled="{visibilityRadioGroup.selectedValue == 'INST'}">			       	
					</mx:ComboBox>					
				</mx:HBox>
				<mx:HBox horizontalGap="4"  verticalAlign="middle">
					<mx:Image  scaleContent="false" width="16" height="16" source="{parentApplication.iconTopicPublic}"/>
					<mx:RadioButton id="radioPublicVisibility" value="PUBLIC" label="Public        (anyone)" groupName="visibilityRadioGroup"  click="{dirtyTopic.setDirty();}"/>
				</mx:HBox>
				
			</mx:VBox>
		</mx:HBox>
	
	</mx:VBox>
</mx:TabNavigator>
<mx:ControlBar horizontalAlign="right" width="100%">
	<util:DirtyNote id="dirtyTopic"/>
	<mx:Button  label="Save" id="saveTopicButton"  click="save()" icon="@Embed(source='../../assets/save.png')"  disabledIcon="@Embed(source='../../assets/save_disable.png')">
		<mx:enabled>{parentDocument.browseTree.selectedItem.@canWrite == 'Y' ? true : false}</mx:enabled>
	</mx:Button>
</mx:ControlBar>

</mx:VBox>
