<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:hci = "hci.components.*"
	xmlns:views = "views.*"
	width="100%" height="100%" creationComplete="init();">

	<mx:HTTPService
		id="getProtocolList"
		url="http://localhost/gnomex/GetProtocolList.gx"
		showBusyCursor="true"
		resultFormat="e4x"
		useProxy="false"
		result="resultHandler(event)">
		<mx:request>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService
		id="getProtocol"
		url="http://localhost/gnomex/GetProtocol.gx"
		showBusyCursor="true"
		resultFormat="e4x"
		useProxy="false"
		result="resultHandler(event)">
		<mx:request>
			
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService
		id="saveProtocol"
		url="http://localhost/gnomex/SaveProtocol.gx"
		showBusyCursor="true"
		method="POST"
		resultFormat="e4x"
		useProxy="false"
		result="resultHandler(event)">
		<mx:request>
			<idProtocol>
				{protocol.getItemAt(0).id}
			</idProtocol>
			<protocolName>
				{protocolName.text}
			</protocolName>
			<codeRequestCategory>
				{codeRequestCategory.selectedItem.@value}
			</codeRequestCategory>
			<protocolDescription>
				{description.text}
			</protocolDescription>
			<protocolUrl>
				{url.text}
			</protocolUrl>
			<isActive>
				{isActive.data}
			</isActive>
			<protocolClassName>
				{browseProtocols.selectedItem.@protocolClassName}
			</protocolClassName>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService
		id="deleteProtocol"
		url="http://localhost/gnomex/DeleteProtocol.gx"
		showBusyCursor="true"
		resultFormat="e4x"
		useProxy="false"
		result="resultHandler(event)">
		<mx:request>
			<idProtocol>
				{protocol.getItemAt(0).id}
			</idProtocol>
			<protocolClassName>
				{browseProtocols.selectedItem.@protocolClassName}
			</protocolClassName>
		</mx:request>
	</mx:HTTPService>
	
	<mx:Script>
		<![CDATA[
			import mx.events.CloseEvent;
			import mx.collections.XMLListCollection;
			import mx.managers.PopUpManagerChildList;
			import views.CreateNewProtocolPopUp;
			import mx.utils.URLUtil;
			import flash.net.navigateToURL;
			import mx.rpc.events.ResultEvent;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			[Bindable]
			public var selectedProtocol:Object;
			
			[Bindable]
			public var fullProtocol:XMLList;
			
			[Bindable]
			public var protocolList:XMLList;
			
			[Bindable]
			public var lastSavedProtocolId:Object = null;
			
			[Bindable]
			public var lastSelectedProtocolClass:Object = null;
			
			[Bindable]
	        [Embed(source="assets/brick.png")]
	        public var iconPage:Class;
			
			[Bindable]
	        [Embed(source="assets/brick_add.png")]
	        public var iconPageAdd:Class;
	        
	        [Bindable]
	        [Embed(source="assets/brick_delete.png")]
	        public var iconPageDelete:Class;
			
			[Bindable]
	        [Embed(source="assets/bricks.png")]
	        public var iconBook:Class;
			
			public var createNewProtocol:views.CreateNewProtocolPopUp;
			
			public var selectedInProtocolTree:String;
			
			[Bindable]
			public var selectedIdx:int;
			
			[Bindable]
            public var open:Object = new Object();
			
			[Bindable]
			public var refreshData:Boolean = false;
			
			public function init():void {
				callGetProtocolList();
			}
			
			public function callGetProtocolList():void {
				var call:Object = getProtocolList.send();
				call.marker = "doneGetProtocolList";
			}
			
			public function callGetProtocol(params:Object):void {
				var call:Object = getProtocol.send(params);
				call.marker = "doneGetProtocol";
			}
			
			public function callSaveProtocol():void {
				var call:Object = saveProtocol.send();
				call.marker = "doneSaveProtocol";
				open = browseProtocols.openItems;
				refreshData = true;
			}
			
			public function onDelete():void {
				Alert.show("Are you sure you want to delete the "+protocol.getItemAt(0).name+" protocol?","Are you sure?",Alert.YES|Alert.NO,null,callDeleteProtocol,null,Alert.YES);
			}
			
			public function callDeleteProtocol(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					var call:Object = deleteProtocol.send();
					call.marker = "doneDeleteProtocol";
				} else {
					return;
				}
			}
			
			public function resultHandler(event:ResultEvent):void {
				var call:Object = event.token;
				if (call.marker == "doneGetProtocolList") {
					protocolList = new XMLList(getProtocolList.lastResult.Protocols);
					initTree();
				} else if (call.marker == "doneGetProtocol") {
					fullProtocol = new XMLList(getProtocol.lastResult);
					showProtocol();
				} else if (call.marker == "doneSaveProtocol") {
					lastSavedProtocolId = saveProtocol.lastResult.@idProtocol;
					callGetProtocolList();
				} else if (call.marker == "doneDeleteProtocol") {
					callGetProtocolList();
					fullProtocol = null;
					protocolViews.selectedChild = blankProtocol;
					bodyPanel.title = "Protocol: ";
				}
				
			}
			
			public function getTreeIcon(item:Object):Class {
				if (item.name() == "Protocol") {
					return this.iconPage;
				}else {
					return this.iconBook;
				}
			}
			
			public function onBrowseProtocols(event:MouseEvent):void {
				if (browseProtocols.selectedItem != null && browseProtocols.selectedItem.name() == 'Protocol') {
					selectedIdx = browseProtocols.selectedIndex;
					bodyPanel.title = "Protocol: " + browseProtocols.selectedItem.@label;
					var params:Object = new Object();
					params.id = browseProtocols.selectedItem.@id;
					params.protocolClassName = browseProtocols.selectedItem.@protocolClassName;
					callGetProtocol(params);
					lastSelectedProtocolClass =  browseProtocols.selectedItem.@protocolClassName;
					deleteProtocolButton.enabled=true;
					saveProtocolButton.enabled=true;
				} else if (browseProtocols.selectedItem != null && browseProtocols.selectedItem.name() == "Protocols") {
					addProtocolButton.enabled=true;
					deleteProtocolButton.enabled=false;
					saveProtocolButton.enabled=false;
					bodyPanel.title = "Protocol: ";
					bodyPanel.titleIcon = null;
					protocolViews.selectedChild = blankProtocol;
				} else {
					addProtocolButton.enabled=false;
					deleteProtocolButton.enabled=false;
					saveProtocolButton.enabled=false;
				}
				
			}
			
			public function openProtocolUrl(event:MouseEvent):void {
				navigateToURL(new URLRequest(url.text),fullProtocol.id.toString());
			}
			
			public function showProtocol():void {
				if (parentApplication.hasPermission("canWriteDictionaries")) {
					protocolViews.selectedChild = editProtocol;
					testForURL();
				} else {
					protocolViews.selectedChild = viewProtocol;
				}
			}
			
			public function testForURL():void {
				if (fullProtocol.url != null && fullProtocol.url != "") {
					viewUrlButton.enabled=true;
				} else {
					viewUrlButton.enabled=false;
				}
			}
			
			public function prepareToAddProtocol():void {
				if (browseProtocols.selectedItem != null) {
					createNewProtocol = new views.CreateNewProtocolPopUp as views.CreateNewProtocolPopUp;
					PopUpManager.addPopUp(createNewProtocol,parentApplication.mainArea,true,PopUpManagerChildList.APPLICATION)
					PopUpManager.centerPopUp(createNewProtocol);
				} else {
					Alert.show("Please select a protocol or protocol group of the type you wish to create");
				}
			}
			
			public function removeCreateProtocolPopUp():void {
				PopUpManager.removePopUp(createNewProtocol);
			}
			
			public function expandProtocols():void {
				browseProtocols.openItems = open;
				browseProtocols.selectedIndex = selectedIdx;
				browseProtocols.validateNow();
			}
			
			public function initTree():void {
				// iteratively expand the tree
				var protocolTypeCount:int = protocols.length - 1;
				for (var i:int = 0;i <= protocolTypeCount;i++) {
					browseProtocols.expandItem(protocols.getItemAt(i),true);
				}
				
				// try to open the tree to a specific node
				if (lastSavedProtocolId != null) {
					var params:Object = new Object();
					params.id = lastSavedProtocolId;
					params.protocolClassName = lastSelectedProtocolClass;
					callGetProtocol(params);
					expandProtocols();
					lastSavedProtocolId = null;
				}
			}
			
			public function renderTree():void{
				/*
                if(refreshData){
                    // Refresh all rows on next update.
                    browseProtocols.invalidateList();
                    refreshData = false;
                    browseProtocols.openItems = open;
                    // Validate and update the properties and layout
                    // of this object and redraw it, if necessary.
                    browseProtocols.validateNow();
                }
				*/
            }
            
            
		]]>
	</mx:Script>
	
	<mx:XMLListCollection id="protocols" source="{protocolList}"/>
	<mx:XMLListCollection id="protocol" source="{fullProtocol}"/>
	
	<mx:HDividedBox right="0" left="0" top="0" bottom="0" backgroundColor="#FFFFFF" backgroundAlpha="0.0">
		<mx:Panel width="220" height="100%" title="Protocol List" layout="absolute">
			<!--mx:Canvas label="Protocols" width="100%" height="100%"-->
				<mx:Tree 
					id="browseProtocols" 
					right="0" left="0" bottom="10" top="20"
					iconFunction="getTreeIcon"
					borderThickness="0" 
					labelField="@label" 
					dataProvider="{protocols}" 
					showRoot="false"
					selectionColor="#FBF5B5" 
					rollOverColor="#CECECE" 
					backgroundAlpha="1"
					click="onBrowseProtocols(event);"
					render="renderTree()"
					>
				</mx:Tree>
				<mx:CheckBox right="0" top="1" bottom="607" textAlign="center" downIcon="@Embed(source='../assets/bullet_toggle_minus.png')">
						<mx:icon>@Embed(source='../assets/bullet_toggle_plus.png')</mx:icon>
				</mx:CheckBox>
				<mx:Label x="135" y="2" text="toggle view" fontSize="9" textAlign="center"/>
			<!--/mx:Canvas-->
			<mx:ControlBar horizontalAlign="left" verticalAlign="middle" x="0" y="924" width="80%" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
				<mx:Button id="addProtocolButton" click="prepareToAddProtocol()" icon="@Embed('../assets/brick_add.png')" toolTip="Add protocol" label="New" width="64" enabled="false" disabledIcon="@Embed(source='../assets/page_add_disable.png')"/>
				<mx:Button id="deleteProtocolButton" click="onDelete()" icon="@Embed('../assets/brick_delete.png')" toolTip="Delete protocol" label="Delete" width="79" enabled="false">
					<mx:disabledIcon>@Embed(source='../assets/page_delete_disable.png')</mx:disabledIcon>
				</mx:Button>
				<mx:Button id="refreshButton0" click="callGetProtocolList()" icon="@Embed(source='../assets/refresh.png')" toolTip="Refresh list" width="30" disabledIcon="@Embed(source='../assets/refresh_disable.png')"/>
			</mx:ControlBar>
		</mx:Panel>
		<mx:Panel id="bodyPanel" height="100%" dropShadowEnabled="true" width="100%" layout="absolute" title="Protocol:" paddingTop="0">
		<mx:ViewStack id="protocolViews" right="0" left="0" top="0" bottom="0">
		<mx:Canvas id="blankProtocol" left="0" right="0" top="0" bottom="0" styleName="form" width="100%" height="100%">
			<mx:Label text="No protocol selected" fontSize="20" color="#A8B3BD" textAlign="right" right="10" top="10" width="308"/>
			<!--mx:PieChart id="piechart1" left="10" top="61" right="10" bottom="10" dataProvider="{protocolList}" >
				<mx:series>
					<mx:PieSeries displayName="Scan Protocols" field="{protocolList.Protocols.(@label='Scan Protocol').children().length}"/>
					<mx:PieSeries displayName="Hyb Protocols" field="{protocolList.Protocols.(@label='Hyb Protocol').children().length}"/>
					<mx:PieSeries displayName="Feature Extraction Protocols" field="{protocolList.Protocols.(@label='Featur Extraction Protocol').children().length}"/>
					<mx:PieSeries displayName="Labeling Protocols" field="{protocolList.Protocols.(@label='Labeling Protocol').children().length}"/>
				</mx:series>
			</mx:PieChart>
			<mx:Legend dataProvider="{piechart1}" x="10" y="61" height="57"/-->
		</mx:Canvas>
		<mx:Canvas id="viewProtocol" left="0" right="0" top="0" bottom="0" styleName="form" width="100%" height="100%">
			<mx:HBox left="10" top="10" right="394" styleName="formDisplay">
				<mx:Label text="Name:" fontWeight="bold"/>
				<mx:Label text="{protocol.getItemAt(0).name}" width="100%"/>
			</mx:HBox>
			<mx:HBox top="10" width="205" right="181" bottom="595" styleName="formDisplay">
				<mx:Label text="Kind of Request:" fontWeight="bold"/>
				<hci:DictionaryLabel
					id="kindDisplay"
					dictValue="@value"
					dictDisplay="@display"
					dictName="hci.gnomex.model.RequestCategory"
					data="{protocol.getItemAt(0).codeRequestCategory}"
					dictProvider="{new XMLList(parentApplication.manageDictionaries.lastResult.Dictionary)}"
					text ="{kindDisplay.getDisplayForValue(protocol.getItemAt(0).codeRequestCategory)}"
					width="100%">
					</hci:DictionaryLabel>
			</mx:HBox>
			<mx:HBox height="26" right="10" top="10" width="163" styleName="formDisplay">
				<mx:Label text="Active:" fontWeight="bold" width="55"/>
				<mx:Label text="{protocol.getItemAt(0).isActive.toString()}" width="51"/>
			</mx:HBox>
			<mx:HBox left="10" top="44" right="121" styleName="formDisplay">
				<mx:Label text="URL:" fontWeight="bold"/>
				<mx:Label text="{protocol.getItemAt(0).url}" width="100%"/>
			</mx:HBox>
			<mx:HBox width="103" height="26" horizontalAlign="center" verticalAlign="middle" right="10" top="44">
				<mx:Button enabled="false" label="View URL" width="100%" disabledIcon="@Embed(source='../assets/page_go_disabled.png')" icon="@Embed(source='../assets/page_go.png')" textAlign="left" click="openProtocolUrl(event)"/>
			</mx:HBox>
			<mx:VBox top="78" bottom="10" left="10" right="10">
				<mx:Label text="Protocol Description:" fontWeight="bold"/>
				<mx:Text text="{protocol.getItemAt(0).description}" height="100%" width="100%"/>
			</mx:VBox>	
		</mx:Canvas>
		<mx:Canvas id="editProtocol" left="0" right="0" top="0" bottom="0" styleName="form" width="100%" height="100%">
			<mx:VBox height="46" left="10" top="10" right="394">
				<mx:Label text="Name:"/>
				<mx:TextInput id="protocolName" text="{protocol.getItemAt(0).name}" width="100%"/>
			</mx:VBox>
			<mx:VBox height="46" top="10" width="265" right="121">
				<mx:Label text="Kind of Request:"/>
				<hci:DictionaryComboBox
					id="codeRequestCategory"
					dataProvider="{parentApplication.manageDictionaries.lastResult.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry}"
					dictValue="@value"
					dictDisplay="@display"
					dictName="hci.gnomex.model.RequestCategory"
					labelField="@display"
					data="{protocol.getItemAt(0).codeRequestCategory}"
					dictProvider="{new XMLList(parentApplication.manageDictionaries.lastResult.Dictionary)}"
					width="100%">
					</hci:DictionaryComboBox>
			</mx:VBox>
			<mx:VBox height="46" right="10" top="10" width="103" horizontalAlign="left" verticalAlign="bottom">
				<hci:CheckBoxYN  id="isActive" data="{protocol.getItemAt(0).isActive.toString()}" label="Active"/>
			</mx:VBox>
			<mx:VBox height="46" left="10" top="64" right="121">
				<mx:Label text="URL:"/>
				<mx:TextInput id="url" text="{protocol.getItemAt(0).url}" width="100%"/>
			</mx:VBox>
			<mx:VBox width="103" height="46" horizontalAlign="center" verticalAlign="bottom" right="10" top="64">
				<mx:Button id="viewUrlButton" enabled="false" label="View URL" width="100%" disabledIcon="@Embed(source='../assets/page_go_disabled.png')" icon="@Embed(source='../assets/page_go.png')" textAlign="left" click="openProtocolUrl(event)"/>
			</mx:VBox>
			<mx:VBox top="118" bottom="10" left="10" right="10">
				<mx:Label text="Protocol Description:"/>
				<mx:TextArea id="description" text="{protocol.getItemAt(0).description}" height="100%" width="100%"/>
			</mx:VBox>	
		</mx:Canvas>
		</mx:ViewStack>
			<mx:ControlBar width="80%" paddingBottom="4" paddingLeft="4" paddingRight="4" horizontalAlign="right" paddingTop="4" x="0" y="655">
				<mx:Button id="saveProtocolButton" label="Save" click="callSaveProtocol();" icon="@Embed(source='../assets/save.png')" toolTip="Save protocol" width="70" enabled="false" disabledIcon="@Embed(source='../assets/save_disable.png')"/>
			</mx:ControlBar>
		</mx:Panel>
		
		
	</mx:HDividedBox>
	
</mx:Canvas>
