<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="500" height="500" 
				xmlns:util="views.util.*"
				title="Edit Experiment Platform Sort Order">
	
	<mx:HTTPService
		id="getExperimentPlatformSortOrderList"
		url="GetExperimentPlatformSortOrderList.gx"
		showBusyCursor="true"
		resultFormat="e4x"
		useProxy="false"
		method="POST"
		result="onGetExperimentPlatformSortOrderList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get sort order list', event)">
	</mx:HTTPService>

	<mx:HTTPService
		id="saveExperimentPlatformSortOrderList"
		url="SaveExperimentPlatformSortOrderList.gx"
		showBusyCursor="true"
		resultFormat="e4x"
		useProxy="false"
		method="POST"
		result="onSaveExperimentPlatformSortOrderList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to save sort order list', event)">
	</mx:HTTPService>

	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;

			private var idCoreFacility:String = null;
			[Bindable]
			public var sortOrderList:ArrayCollection = null;
			
			public function init(idCoreFacility:String):void {
				this.idCoreFacility = idCoreFacility;
				dirty.resetDirty();
				onPromptToRefreshList();
			}

			private function refreshList():void {
				if (dirty.isDirty()) {
					Alert.show("Refreshing will discard your changes.  Do you lose your changes?",
						"Discard Changes",
						(Alert.YES | Alert.NO), this, 
						onPromptToRefreshList,						
						parentApplication.iconWarning);
				} else {
					onPromptToRefreshList();
				}
			}
			private function onPromptToRefreshList(event:CloseEvent = null):void {
				if (event == null || event.detail == Alert.YES) {
					this.enabled = false;
					var params:Object = new Object();
					params.idCoreFacility = idCoreFacility;
					getExperimentPlatformSortOrderList.send(params);
				}
			}
			
			private function onGetExperimentPlatformSortOrderList(event:Event):void {
				var maxSortOrder:int = 0;
				for each (var obj:Object in requestCategories) {
					if (obj.hasOwnProperty("@sortOrduer") && obj.@sortOrder != '') {
						var sortOrder:int = int(obj.@sortOrder);
						if (sortOrder > maxSortOrder) {
							maxSortOrder = sortOrder;
						}
					}
				}
				if (maxSortOrder < 9) {
					maxSortOrder = 9;
				}
				
				sortOrderList = new ArrayCollection();
				for (var i:int = 0; i <= maxSortOrder; i++) {
					sortOrderList.addItem(i.toString());
				}
				this.enabled = true;
			}
			
			private function onFailGetExperimentPlatformSortOrderList(event:Event):void {
				this.enabled = true;
				parentApplication.onFailHttpRequest('Failed to get sort order list', event);
			}
			
			private function closeWindow():void {
				if (dirty.isDirty()) {
					Alert.show("Closing the window will discard your changes.  Do you wish to close the window and lose your changes?",
						"Discard Changes",
						(Alert.YES | Alert.NO), this, 
						onPromptToCloseWindow,						
						parentApplication.iconWarning);
				} else {
					onPromptToCloseWindow();
				}
			}
			
			private function onPromptToCloseWindow(event:CloseEvent = null):void {
				if (event == null || event.detail == Alert.YES) {
					PopUpManager.removePopUp(this);
					callLater(parentApplication.dictionaryManager.reload);
				}
			}
			
			private function compareCategories(obj1:Object, obj2:Object, fields:Array=null):int {
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var s1:int = getSortOrderAsInt(obj1.@sortOrder);
					var s2:int = getSortOrderAsInt(obj2.@sortOrder);
					if (s1 < s2) {
						return -1;
					} else if (s1 > s2) {
						return 1;
					} else {
						var n1:String = obj1.@requestCategory;
						var n2:String = obj2.@requestCategory;
						if (n1 < n2) {
							return -1;
						} else if (n1 > n2) {
							return 1;
						} else {				
							return 0;
						}
					}
				}
			}

			private function getSortOrderAsInt(sortOrder:String):int {
				if (sortOrder == null || sortOrder == "") {
					sortOrder = "0";
				}
				return int(sortOrder);
			}
			
			private function save():void {
				var params:Object = new Object();
				params.requestCategoriesXMLString = "<requestCategories>" + requestCategories.toXMLString() + "</requestCategories>";
				saveExperimentPlatformSortOrderList.send(params);
			}
			
			private function onSaveExperimentPlatformSortOrderList(event:Event):void {
				if (saveExperimentPlatformSortOrderList.lastResult.name() == "SUCCESS") {
					dirty.resetDirty();
					this.refreshList();
					this.systemManager.dispatchEvent(new ExperimentPlatformSortOrderChangedEvent());
				} else {
					mx.controls.Alert.show(saveExperimentPlatformSortOrderList.lastResult..ACTMESSAGE.@TEXT);
				}
			}
		]]>
	</mx:Script>
	<mx:XMLListCollection id="requestCategories" source="{getExperimentPlatformSortOrderList.lastResult..RequestCategory}" sort="{categorySort}"/>
	<mx:Sort id="categorySort" compareFunction="compareCategories" />

	<mx:VBox width="100%" height="100%" verticalGap="0">
		<mx:DataGrid id="sortOrderGrid" 
					 dataProvider="{requestCategories}" 
					 editable="true"
					 width="100%" height="100%" itemEditBegin="dirty.setDirty()" variableRowHeight="true" wordWrap="true" fontSize="11" sortableColumns="false">
			<mx:columns>
				<mx:DataGridColumn headerText="Sort Order"  id="sortOrderCol"  dataField="@sortOrder" width="70" editable="true" editorDataField="text">
					<mx:itemEditor>
						<mx:Component>
							<mx:TextInput restrict="0-9" maxChars="2" editable="true"/>
						</mx:Component>
					</mx:itemEditor>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="Experiment Type"  editable="false" dataField="@requestCategory" />			 
			</mx:columns>
		</mx:DataGrid>
		<mx:ControlBar width="100%" horizontalAlign="left" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
			<mx:Button id="refreshButton" label="Refresh" click="refreshList()"/>
			<mx:Spacer width="100%"/>
			<util:DirtyNote id="dirty" />
			<mx:Button id="saveButton" label="Save"
					   click="{save()}"
					   icon="@Embed('../../assets/action_save.gif')"  disabledIcon="@Embed(source='../../assets/save_disable.png')">
			</mx:Button>
			<mx:Button label="Close"  click="{closeWindow()}"/>
		</mx:ControlBar>
	</mx:VBox>
</mx:TitleWindow>
