<?xml version="1.0" encoding="utf-8"?> 
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				layout="vertical" width="1100" height="548"  creationPolicy="all"
				xmlns:util="views.util.*"  creationComplete="init()"
				xmlns:experimentplatform="views.experimentplatform.*"
				showCloseButton="true" close="{closeWindow()}"
				title="Configure Experiment Platform" titleIcon="@Embed(source='../../assets/page_white_wrench.png')">
	<mx:HTTPService   
		id="getExperimentPlatformList" 
		url="GetExperimentPlatformList.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetExperimentPlatformList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get experiment platform list', event)"
		method="POST" 
		useProxy="false">
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="deleteExperimentPlatform" 
		url="DeleteExperimentPlatform.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		result="onDeleteExperimentPlatform(event)"
		fault="parentApplication.onFailHttpRequest('Failed to delete experiment platform', event)"
		method="POST" 
		useProxy="false">
	</mx:HTTPService>	
	
	<mx:HTTPService  
		id="saveExperimentPlatform" 
		url="SaveExperimentPlatform.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onSaveExperimentPlatform(event)"
		fault="parentApplication.onFailHttpRequest('Failed to save experiment platform', event)"
		method="POST" 
		useProxy="false">
	</mx:HTTPService>
	
	<mx:Script>
		<![CDATA[
			import hci.flex.dictionary.DictionaryEvent;
			import hci.flex.util.DictionaryManager;
			
			import mx.collections.Grouping;
			import mx.collections.GroupingCollection;
			import mx.collections.GroupingField;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridListData;
			import mx.controls.listClasses.BaseListData;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import views.experimentplatform.ExperimentPlatformSortOrderChangedEvent;
			
			[Bindable]
			private var state:ExperimentPlatformState = null;
			
			public var codeRequestCategorySelected:Object = null;
			
			[Bindable]
			public var dictionaryManager:DictionaryManager;

			private function init():void {
				getExperimentPlatformList.send();
				
				dictionaryManager = new DictionaryManager("ManageDictionaries.gx");
				dictionaryManager.call("load", "");
			}
			
			private function closeWindow():void {
				PopUpManager.removePopUp(this);
				callLater(parentApplication.dictionaryManager.reload);
			}
			
			private function onGetExperimentPlatformList(event:ResultEvent): void {
				this.enabled = true;
				if (getExperimentPlatformList.lastResult.name() == "ExperimentPlatformList") {
					platforms.filterFunction = isPlatformVisible;
					platforms.refresh();
					callLater(reselectExperimentPlatform);
				} else {
					mx.controls.Alert.show(getExperimentPlatformList.lastResult..ACTMESSAGE.@TEXT);
				}
			}	
			
			private function reselectExperimentPlatform():void {
				if (codeRequestCategorySelected != null) {
					var found:Boolean = false;
					for each(var ep:Object in getExperimentPlatformList.lastResult.RequestCategory) {
						if (ep.@codeRequestCategory == codeRequestCategorySelected && isPlatformVisible(ep)) {
							this.platformList.selectedItem = ep;
							this.platformList.scrollToIndex(this.platformList.selectedIndex);
							this.onSelectPlatform();
							found = true;
							break;
						}
					}
					if (!found) {
						this.platformList.selectedItem = null;
						onSelectPlatform();
					}
				} else {
					this.platformList.selectedItem = null;
					onSelectPlatform();
				}
			}
			
			private function save():void {
				if(state.requestCategory.@idCoreFacility == ""){
					Alert.show("You must select a core facility");
					return;
				}
				
				// refresh applications -- necessary as appTree update requestCategory.applications.
				var applications:XMLListCollection = new XMLListCollection(state.requestCategory.applications..Application);

				var params:Object = new Object();
				
				params.codeRequestCategory = state.requestCategory.@codeRequestCategory;
				params.requestCategory = state.requestCategory.@requestCategory;
				params.notes = state.requestCategory.@notes;
				params.type = state.requestCategory.@type;
				params.idCoreFacility = state.requestCategory.@idCoreFacility;
				params.sortOrder = state.requestCategory.@sortOrder;
				params.isActive = state.requestCategory.@isActive;
				params.idVendor = state.requestCategory.@idVendor;
				params.isInternal = state.requestCategory.@isInternal;
				params.isExternal = state.requestCategory.@isExternal;
				params.isClinicalResearch = state.requestCategory.@isClinicalResearch;
				params.isOwnerOnly = state.requestCategory.@isOwnerOnly;
				
				//params.icon = this.theIcon.text;
				params.icon = state.requestCategory.@icon;
				
				params.idOrganism = state.requestCategory.@idOrganism;
				params.numberOfChannels = state.requestCategory.@numberOfChannels;
				
				var sampleTypes:XMLListCollection = new XMLListCollection(state.requestCategory.sampleTypes.SampleType);
				params.sampleTypesXMLString = "<sampleTypes>" + sampleTypes.toXMLString() + "</sampleTypes>";
				params.applicationsXMLString = "<applications>" + applications.toXMLString() + "</applications>";
				var sequencingOptions:XMLListCollection = new XMLListCollection(state.requestCategory.sequencingOptions.NumberSequencingCyclesAllowed);
				params.sequencingOptionsXMLString = "<sequencingOptions>" + sequencingOptions.toXMLString() + "</sequencingOptions>";
				
				if (state.isIllumina) {
					// Illumina allows setting of app/request cateogry relationship across multiple request categories.
					var rcAppsList:XMLListCollection = new XMLListCollection();
					for each (var app:XML in applications) {
						for each (var rcApp:XML in app.children()) {
							if (rcApp.name() == "RequestCategoryApplication") {
								var ra:XML = new XML("<RequestCategoryApplication />");
								ra.@isSelected = rcApp.@isSelected;
								ra.@codeRequestCategory = rcApp.@codeRequestCategory;
								ra.@codeApplication = app.@codeApplication;
								ra.@appIsActive = app.@isActive;
								ra.@requestCategoryIsActive = rcApp.@isActive;
								rcAppsList.addItem(ra);
							}
						}
					}
					params.requestCategoryApplicationXMLString = "<requestCategoryApplications>" + rcAppsList.toXMLString() + "</requestCategoryApplications>";
				}
				
				saveExperimentPlatform.send(params);
			}			
			
			private function onSaveExperimentPlatform(event:ResultEvent): void {
				if (saveExperimentPlatform.lastResult.name() == "SUCCESS") {
					afterSuccessfulSave(saveExperimentPlatform.lastResult.@codeRequestCategory);
				} else {
					mx.controls.Alert.show(saveExperimentPlatform.lastResult..ACTMESSAGE.@TEXT);
				}
			}	

			// called from onSaveExperimentPlatform here and in ExperimentPlatformAddWindow
			public function afterSuccessfulSave(savedCodeRequestCategory:String):void {
				this.enabled = false;
				codeRequestCategorySelected = savedCodeRequestCategory;
				parentApplication.dictionaryManager.reload();
				// Must reload dictionary manager in case user changed seqlibprotocol.  Need to get platform list
				// after reload complete so various dropdowns are ok.
				dictionaryManager.reload();
				dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_LOADED, onDictionariesLoadedAfterSave);
			}
			
			public function onDictionariesLoadedAfterSave(event:Event):void {	
				getExperimentPlatformList.send();
				dictionaryManager.removeEventListener(DictionaryEvent.DICTIONARY_LOADED, onDictionariesLoadedAfterSave);
			}		
			
			private function addPlatform():void {
				var addWindow:ExperimentPlatformAddWindow = ExperimentPlatformAddWindow(PopUpManager.createPopUp(mainBody, ExperimentPlatformAddWindow, true));
				PopUpManager.centerPopUp(addWindow);
				addWindow.parentWindow = this;
				addWindow.platformName.setFocus();
				this.theViews.selectedIndex = 0;
				this.theTabs.selectedIndex = 0;
				this.theTabsIllumina.selectedIndex = 0;
			}
			
			private function removePlatform():void {
				if (platformList.selectedItem == null) {
					return;
				}
				Alert.show("Are you sure you want to remove experiment platform " + platformList.selectedItem.@display + "?",
					"Confirm",
					(Alert.YES | Alert.NO), this, 
					onPromptToRemovePlatform,						
					parentApplication.iconWarning);
				
			}
			
			private function onPromptToRemovePlatform(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					removePlatformImpl();
				}
			}
			
			private function removePlatformImpl():void {
				codeRequestCategorySelected = null;
				
				var params:Object = new Object();
				params.codeRequestCategory = platformList.selectedItem.@codeRequestCategory;
				deleteExperimentPlatform.send(params);
			}
			
			private function onDeleteExperimentPlatform(event:ResultEvent): void {
				if (deleteExperimentPlatform.lastResult.name() == "SUCCESS") {
					this.getExperimentPlatformList.send();
				} else {
					mx.controls.Alert.show(deleteExperimentPlatform.lastResult..ACTMESSAGE.@TEXT);
				}
				this.dirty.resetDirty();
			}		
			
			private function onSelectPlatform(event:ExperimentTypeChangedEvent = null):void {
				this.systemManager.removeEventListener(ExperimentTypeChangedEvent.DATA_CHANGED, onSelectPlatform);
				this.systemManager.removeEventListener(ExperimentPlatformSortOrderChangedEvent.DATA_CHANGED, refreshPlatformList);
				if (platformList.selectedItem != null) {
					this.systemManager.addEventListener(ExperimentTypeChangedEvent.DATA_CHANGED, onSelectPlatform);
					this.systemManager.addEventListener(ExperimentPlatformSortOrderChangedEvent.DATA_CHANGED, refreshPlatformList);
					theViews.selectedIndex = 1;
					
					codeRequestCategorySelected = platformList.selectedItem.@codeRequestCategory;
					
					state = new ExperimentPlatformState(platformList.selectedItem, dirty, dictionaryManager);
					if (state.isIllumina || state.isNanoString) {
						tabStack.selectedIndex = 1;
						experimentPlatformIllumina.init(state);
						sampleTypeIllumina.init(state);
						experimentTypeIllumina.init(state);
						illuminaSeq.init(state);
					} else {
						tabStack.selectedIndex = 0;
						experimentPlatform.init(state);
						sampleType.init(state);
						experimentType.init(state);
					}

					// if event is not null it means this was called because they changed the experiment type.
					// don't reset dirty if they changed the experiment type.
					if (event == null) {
						dirty.resetDirty();
					}
				} else {
					theViews.selectedIndex = 0;
					codeRequestCategorySelected = null;
					dirty.resetDirty();
				}
			}
			
			private function disablePlatformSelection(data:Object):Boolean
			{
				return this.dirty.isDirty();
			}
			
			private function promptToDiscardChanges():void {
				if (this.dirty.isDirty()) {
					Alert.show("Your changes have not been saved.  Discard changes?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToDiscardChanges,						
						parentApplication.iconWarning);
				}
			}
			
			private function onPromptToDiscardChanges(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					this.dirty.resetDirty();
					this.getExperimentPlatformList.send();
				}
			}
			
			private function isPlatformVisible(obj:Object):Boolean {
				var v:Boolean = true;
				if (obj != platformList.selectedItem) {
					if (!parentApplication.isCoreFacilityIManage(obj.@idCoreFacility)) {
						v = false;
					} else if (!inactivePlatformsCheckbox.selected && obj.@isActive != 'Y') {
						v = false;
					}
				}
				return v;
			}
			
			private function refreshPlatformList(event:ExperimentPlatformSortOrderChangedEvent = null):void {
				state=null;
				this.platformList.selectedItem=null;
				this.theViews.selectedIndex=0;
				getExperimentPlatformList.send();
			}
			
			private function toggleShowInactivePlatforms():void {
				platforms.refresh();
			}
		]]>
	</mx:Script>
	
	
	
	<mx:XMLListCollection id="platforms"  source="{getExperimentPlatformList.lastResult.RequestCategory}"/>
	<mx:XMLListCollection id="coreFacilities" source="{dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.CoreFacility').DictionaryEntry}"/>
	
	<mx:VBox height="100%" width="100%" id="mainBody" verticalGap="2">
		<mx:HBox width="100%" verticalAlign="middle">
			<mx:LinkButton label="Add Platform" enabled="{parentApplication.isAdminState}" click="addPlatform()"  disabledIcon="@Embed(source='../../assets/add_disable.png')" icon="@Embed(source='../../assets/add.png')" textDecoration="none" fontSize="11"/>
			<mx:LinkButton label="Remove Platform" click="removePlatform()" enabled="{platformList.selectedItem != null &amp;&amp; platformList.selectedItem.@canDelete == 'Y'}"   disabledIcon="@Embed(source='../../assets/delete_disable.png')" icon="@Embed(source='../../assets/delete.png')" textDecoration="none" fontSize="11"/>
			<mx:Spacer width="100%"/>
			<mx:LinkButton label="Refresh" click="refreshPlatformList()" icon="@Embed(source='../../assets/refresh.png')" textDecoration="none" fontSize="11"/>
		</mx:HBox>
		<mx:HDividedBox  horizontalGap="6" width="100%" height="100%" paddingLeft="4" paddingRight="4" backgroundAlpha="0">
			<mx:VBox height="100%" width="200" id="platformListBox" verticalGap="2" styleName="panelBox" paddingLeft="0" paddingRight="0">
				<mx:CheckBox id="inactivePlatformsCheckbox" label="Show Inactive Platforms" paddingLeft="4" change="{toggleShowInactivePlatforms()}" />
				<util:DisabledItemsList id="platformList" width="100%" height="100%" labelField="@requestCategory" dataProvider="{platforms}"  iconFunction="parentApplication.getTreeIcon"
										itemClick="{onSelectPlatform()}" disabledFunction="disablePlatformSelection" click="promptToDiscardChanges()"
										itemRenderer="views.renderers.ExperimentPlatformListNodeRenderer">
				</util:DisabledItemsList>
			</mx:VBox>
			<mx:ViewStack id="theViews" width="100%" height="100%">
				<mx:VBox label="blankView" width="100%" height="100%" 
						 styleName="panelBox" paddingLeft="4" paddingTop="4" 
						 paddingRight="4" paddingBottom="0"/>
				<mx:VBox width="100%" height="100%" 
						 paddingLeft="4" paddingTop="4" paddingRight="4" paddingBottom="0" verticalGap="2" backgroundAlpha="0">
					<mx:ViewStack id="tabStack" width="100%" height="100%" paddingBottom="0" paddingTop="0">
						<mx:TabNavigator  id="theTabs" width="100%" height="100%" styleName="form" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" fontSize="11">
							<experimentplatform:TabExperimentPlatform id="experimentPlatform"/>
							<experimentplatform:TabSampleType id="sampleType"/>
							<experimentplatform:TabExperimentType id="experimentType"/>
						</mx:TabNavigator>
						<mx:TabNavigator  id="theTabsIllumina" width="100%" height="100%" styleName="form" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" fontSize="11">
							<experimentplatform:TabExperimentPlatform id="experimentPlatformIllumina"/>
							<experimentplatform:TabSampleType id="sampleTypeIllumina"/>
							<experimentplatform:TabExperimentTypeIllumina id="experimentTypeIllumina"/>
							<experimentplatform:TabIlluminaSeq id="illuminaSeq"/>
						</mx:TabNavigator>
					</mx:ViewStack>
					<mx:ControlBar width="100%" horizontalAlign="right" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
						<util:DirtyNote id="dirty" />
						<mx:Button id="saveButton" label="Save"
								   click="{save()}"
								   enabled="{platformList.selectedItem.@canUpdate == 'Y' ? true : false}"
								   icon="@Embed('../../assets/action_save.gif')"  disabledIcon="@Embed(source='../../assets/save_disable.png')">
						</mx:Button>
						<mx:Button label="Close"  click="{closeWindow()}"/>
					</mx:ControlBar>
				</mx:VBox>
			</mx:ViewStack>
		</mx:HDividedBox>
	</mx:VBox>
	
</mx:TitleWindow>
