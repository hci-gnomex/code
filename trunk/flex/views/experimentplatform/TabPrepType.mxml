<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" paddingLeft="4" paddingBottom="4" paddingRight="4" paddingTop="4" label="Prep Types" verticalGap="12">
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import views.renderers.ComboBox;
			
			[Bindable]
			private var state:ExperimentPlatformState = null;
			
			[Bindable]
			private var types:XMLListCollection = new XMLListCollection();
			
			public function init(state:ExperimentPlatformState):void {
				this.state = state;
				types.addItem(<Type type='DNA' />);
				types.addItem(<Type type='RNA' />);
				types.addItem(<Type type='BOTH' />);
			}
			
			private function selectAll(objects:XMLListCollection, viewStack:ViewStack):void {
				for each(var o:Object in objects) {
					if (o.@isActive == 'Y') {
						o.@isSelected = 'Y';
					}
				}
				viewStack.selectedIndex = 1;
				state.dirty.setDirty();
			}
			
			private function addPrepType():void {
				var newNode:XML = new XML("<IsolationPrepType " +
					" isActive='Y'" +
					" isNew='Y'" +
					" codeIsolationPrepType=''" +
					" isolationPrepType='" + 'enter prep type here...' + "'" +
					" type='DNA'" +
					" codeRequestCategory='" + state.requestCategory.@codeRequestCategory + "'" +
					" />");
				prepTypes.addItemAt(newNode, 0);
				prepTypeGrid.selectedItem = newNode;
				prepTypeGrid.scrollToIndex(0);
				state.dirty.setDirty();
			}
			
			private function unselectAll(objects:XMLListCollection, viewStack:ViewStack):void {
				for each(var o:Object in objects) {
					o.@isSelected = 'N';
				}
				viewStack.selectedIndex = 0;
				state.dirty.setDirty();
			}
			
			private function removePrepType():void {
				if (prepTypeGrid.selectedItem == null) {
					return;
				}
				Alert.show("Are you sure you want to remove prep type " + prepTypeGrid.selectedItem.@display + "?",
					"Confirm",
					(Alert.YES | Alert.NO), this, 
					onPromptToRemovePrepType,						
					parentApplication.iconWarning);
				
			}
			
			private function onPromptToRemovePrepType(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					removePrepTypeImpl();
				}
			}
			
			private function removePrepTypeImpl():void {
				if (this.prepTypeGrid.selectedItem != null) {
					this.prepTypes.removeItemAt(prepTypes.getItemIndex(prepTypeGrid.selectedItem));
					state.dirty.setDirty();
				}
			}
			
//			public function editPrepTypePricing():void {
//				//showEditPrepTypePricingTypeWindow(prepTypeGrid.selectedItem);
//			}
//			
//			private function showEditPrepTypePricingWindow(app:Object):void {
//				var editWindow:PrepTypePricingWindow = PrepTypePricingWindow(PopUpManager.createPopUp(parentApplication.theBody, PrepTypePricingWindow, true));
//				PopUpManager.centerPopUp(editWindow);
//				editWindow.init(app);
//			}
			

		]]>
	</mx:Script>
	<mx:XMLListCollection id="prepTypes" source="{state.requestCategory.prepTypes.IsolationPrepType}"/>
	
	<mx:VBox width="100%" height="100%" verticalGap="0">
		<mx:HBox verticalAlign="middle">
			<mx:ViewStack id="selectAllStack1" width="80" paddingBottom="0" paddingTop="0">
				<mx:HBox width="100%"  paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0" verticalAlign="middle">
					<mx:LinkButton label="Select all" styleName="formLinkButton" paddingLeft="0" click="selectAll(prepTypes, selectAllStack1)"  paddingTop="0" paddingRight="0" paddingBottom="0"/>
				</mx:HBox>
				<mx:HBox width="100%" paddingBottom="0" paddingTop="0">
					<mx:LinkButton label="Unselect all" styleName="formLinkButton" paddingLeft="0" click="unselectAll(prepTypes, selectAllStack1)"  paddingTop="0" paddingBottom="0"/>
				</mx:HBox>			    	
			</mx:ViewStack>
			<mx:LinkButton label="Add" styleName="linkMenuButton" 
						   click="addPrepType()"
						   enabled="{state.requestCategory.@canUpdate == 'Y' ? true : false}"
						   icon="@Embed(source='../../assets/add.png')" 
						   disabledIcon="@Embed(source='../../assets/add_disable.png')" fontSize="10"/>
			
			<mx:LinkButton label="Remove" styleName="linkMenuButton"
						   click="removePrepType()"
						   enabled="{state.requestCategory.@canUpdate == 'Y' &amp;&amp; prepTypeGrid.selectedItem != null}"
						   icon="@Embed(source='../../assets/delete.png')" 
						   disabledIcon="@Embed(source='../../assets/delete_disable.png')" fontSize="10"/>
			
		</mx:HBox>
		<mx:DataGrid id="prepTypeGrid" 
					 dataProvider="{prepTypes}" 
					 editable="true"
					 width="100%" height="100%" itemEditBegin="state.dirty.setDirty()" variableRowHeight="true" wordWrap="true" fontSize="11">
			<mx:columns>
				<mx:DataGridColumn headerText="Active"  
								   width="20" 
								   editable="false"                        	
								   dataField="@isActive" 
								   editorDataField="isActive"
								   itemRenderer="{views.renderers.CheckBoxRenderer.create(state.dirty)}">			 
				</mx:DataGridColumn>
<!--				<mx:DataGridColumn headerText="Code Prep Type" 
								   itemRenderer="views.renderers.LabelActive"
								   rendererIsEditor="false" id="codePrepTypeCol"
								   dataField="@codeIsolationPrepType" editable="false" >
				</mx:DataGridColumn>-->
				<mx:DataGridColumn headerText="Prep Type"  id="isolationPrepType"  dataField="@isolationPrepType"
								   itemRenderer="views.renderers.LabelActive"
								   width="135" 
								   wordWrap="true"
								   sortable="false" editable="true" rendererIsEditor="false" />
				<mx:DataGridColumn headerText="Extraction Type"  id="extractionType" dataField="@type"
								   itemRenderer="{ComboBox.create(types, '@type', '@type', '@type', null, true, true, false, false)}"
								   wordWrap="true"
								   sortable="false" editable="true" rendererIsEditor="true" >
				</mx:DataGridColumn>
<!--				<mx:DataGridColumn headerText="Edit Pricing" width="70" editable="false">
					<mx:itemRenderer>
						<mx:Component>
							<mx:HBox verticalAlign="top" horizontalGap="0"  horizontalScrollPolicy="off">
								<mx:LinkButton label="Edit" textDecoration="underline" fontSize="9" color="#0000FF" click="outerDocument.editPrepTypePricing()"/>
							</mx:HBox>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>-->
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
</mx:VBox>
