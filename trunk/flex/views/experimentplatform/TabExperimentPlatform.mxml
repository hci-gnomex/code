<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns:util="views.util.*"
		 width="100%" height="100%" label="Experiment Platform" paddingLeft="4" paddingRight="4" paddingTop="10" paddingBottom="4" verticalGap="10">
	
	<mx:Script>
		<![CDATA[
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;

			[Bindable]
			private var state:ExperimentPlatformState = null;
			private var service:ExperimentPlatformService = new ExperimentPlatformService();
			[Bindable]
			private var types:XMLList = null;
			[Bindable]
			private var coreFacilities:XMLListCollection = null;
			[Bindable]
			private var filteredProductTypes:XMLListCollection = null;
			
			public function init(state:ExperimentPlatformState):void {
				this.state = state;
				
				types = state.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategoryType').DictionaryEntry;
				coreFacilities = new XMLListCollection(parentApplication.coreFacilitiesICanManage.copy());
				filteredProductTypes = new XMLListCollection(state.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.ProductType').DictionaryEntry);
				
				var sortDisplay:Sort = new Sort();
				sortDisplay.fields=[new SortField("@sortOrder")];
				
				coreFacilities.sort = sortDisplay;
				coreFacilities.refresh();
				
				vendorCombo.selectedItem = state.dictionaryManager.getEntry('hci.gnomex.model.Vendor', state.requestCategory.@idVendor);
				organismCombo.selectedItem = state.dictionaryManager.getEntry('hci.gnomex.model.OrganismLite',state.requestCategory.@idOrganism);
				typeCombo.selectedItem = state.dictionaryManager.getEntry("hci.gnomex.model.RequestCategoryType", state.requestCategory.@type);
				state.selectedType = typeCombo.selectedItem;
				setIconCombo(state.requestCategory.@icon);
				
				for each (var facility:Object in coreFacilities) {
					if (facility.@idCoreFacility == state.requestCategory.@idCoreFacility) {
						coreFacilityCombo.selectedItem = facility;
						break;
					}
				}
				
				filteredProductTypes.filterFunction = filterProductTypes;
				filteredProductTypes.refresh();
				
				for each (var productType:Object in productTypeCombo.dataProvider) {
					if (productType.@codeProductType == state.requestCategory.@codeProductType) {
						productTypeCombo.selectedItem = productType;
						break;
					}
				}
				
				if (parentApplication.coreFacilitiesICanManage.length() == 1) {
					coreFacilityCombo.enabled = false;
				} else {
					coreFacilityCombo.enabled = true;
				}

				setSecurityText();
				
				hideCoreFacilityComponents();
				
				setChannelLabel();
			}
			
			private function setSecurityText():void {
				securityLabel.text = "";
				if (state.requestCategory.@isClinicalResearch == 'Y') {
					securityLabel.setStyle("styleName", "warningLabelSevere");
					securityLabel.text = "Clinical Security enforced by cc number";
				}
				if (state.requestCategory.@isOwnerOnly == 'Y') {
					securityLabel.setStyle("styleName", "warningLabelSevere");
					if (securityLabel.text != "") {
						securityLabel.text += ", ";
					}
					securityLabel.text += "Owner only visibility enforced for this category";
				}
				if (securityLabel.text == "") {
					securityLabel.setStyle("styleName", "warningLabelMinor");
					securityLabel.text = "Standard Research and Development Security";
				}
				securityLabel.text = "Security Note: " + securityLabel.text;
			}
			
			private function hideCoreFacilityComponents():void {
				hideComponentByProperty(parentApplication.PROPERTY_EXPERIMENT_PLATFORM_HIDE_NOTES, notesHBox);
				hideComponentByProperty(parentApplication.PROPERTY_EXPERIMENT_PLATFORM_HIDE_VENDOR, vendorHBox);
				hideComponentByProperty(parentApplication.PROPERTY_EXPERIMENT_PLATFORM_HIDE_ORGANISM, organismHBox);
			}
			
			private function hideComponentByProperty(propertyName:String, component:UIComponent):void {
				var val:String = 'N';
				if (state.requestCategory.@idCoreFacility != '') {
					val = parentApplication.getCoreFacilityProperty(state.requestCategory.@idCoreFacility, propertyName);
				}
				if (val == 'Y') {
					component.visible = false;
					component.includeInLayout = false;
				} else {
					component.visible = true;
					component.includeInLayout = true;
				}
			}
			
			private function coreFacilityChanged():void {
				if (coreFacilityCombo.selectedItem != null) {
					state.requestCategory.@idCoreFacility = coreFacilityCombo.selectedItem.@idCoreFacility;
				} else {
					state.requestCategory.@idCoreFacility = "";
				}
				state.dirty.setDirty();
				hideCoreFacilityComponents();
				productTypeCombo.selectedItem = null;
				filteredProductTypes.refresh();
				updateProductType();
			}
			
			private function pickType(setDirty:Boolean = true):void {
				if (setDirty) {
					state.dirty.setDirty();
				}
				
				var iconToCheck:String = "";
				if (typeCombo.selectedItem != null && typeCombo.selectedItem.@value != '') {
					iconToCheck = typeCombo.selectedItem.@defaultIcon;
					state.requestCategory.@type = typeCombo.selectedItem.@value;
					state.selectedType = typeCombo.selectedItem;
				} else {
					iconToCheck = "assets/cherrypick.png";				
					state.requestCategory.@type = "";
					state.selectedType = null;
				}
				
				setIconCombo(iconToCheck);

				setChannelLabel();

				this.systemManager.dispatchEvent(new ExperimentTypeChangedEvent());
			}
			
			private function setChannelLabel():void {
				if(state.isIllumina) {
					channelLabel.width = 160;
					channelLabel.text = "Number of Lanes on Flowcell";
					numberOfChannelsStepper.maximum = 8;
				} else {
					channelLabel.width = 120;
					channelLabel.text = "Number of channels";	
					numberOfChannelsStepper.maximum = 2;
				}
			}
			
			private function setIconCombo(icon:String):void {
				iconCombo.selectedIndex = 0;
				if(icon.length > 0) {
					var expIconLst:XMLList = parentApplication.expIcons.item; 
					for(var i:Number = 0; i < expIconLst.length(); i++) {
						if(expIconLst[i].@icon == icon) {
							iconCombo.selectedIndex = i;
							break;
						}
					}					
				}
			}
			
			private function setIsActive():void {
				if (isActiveCheckbox.selected) {
					state.requestCategory.@isActive = 'Y';
				} else {
					state.requestCategory.@isActive = 'N';
				}
				state.dirty.setDirty();
			}
			
			private function vendorChanged():void {
				if (vendorCombo.selectedItem != null) {
					state.requestCategory.@idVendor = vendorCombo.selectedItem.@idVendor;
				} else {
					state.requestCategory.@idVendor = '';
				}
			}
			
			private function iconChanged():void {
				if(iconCombo.selectedIndex > 0) {
					state.requestCategory.@icon = iconCombo.selectedItem.@icon;
				} else {
					state.requestCategory.@icon = "";
				}

			}
			
			private function clickEditSortOrder():void {
				if (state.dirty.isDirty()) {
					Alert.show("Please save changes before editting sort order acros platforms.");
				} else {
					var sortWindow:ExperimentPlatformEditSortOrderWindow = ExperimentPlatformEditSortOrderWindow(PopUpManager.createPopUp(this, ExperimentPlatformEditSortOrderWindow, true));
					PopUpManager.centerPopUp(sortWindow);
					sortWindow.init(state.requestCategory.@idCoreFacility);
				}
			}
			
			private function filterProductTypes(item:Object):Boolean {
				if (coreFacilityCombo.selectedItem != null && item.@idCoreFacility == coreFacilityCombo.selectedItem.@idCoreFacility) {
					return true;
				}
				
				return false;
			}
			
			private function updateProductType():void {
				if (useProductsCheckBox.selected && productTypeCombo.selectedItem != null) {
					state.requestCategory.@codeProductType = productTypeCombo.selectedItem.@value;
					
					noProductsMessage.text = parentApplication.getRequestCategoryProperty(state.requestCategory.@idCoreFacility, state.requestCategory.@codeRequestCategory, parentApplication.PROPERTY_NO_PRODUCTS_MESSAGE);
					state.requestCategory.@noProductsMessage = noProductsMessage.text;
				} else {
					state.requestCategory.@codeProductType = '';
					
					noProductsMessage.text = "";
					state.requestCategory.@noProductsMessage = "";
				}
			}
		]]>
	</mx:Script>
	<mx:HBox width="100%" horizontalGap="1" verticalAlign="middle">
		<mx:Label text="Name" width="100" styleName="formLabel"/>
		<mx:TextInput  id="platformName"  width="400" text="{state.requestCategory.@requestCategory}"  change="{state.requestCategory.@requestCategory=platformName.text;state.dirty.setDirty();}"/>
		<mx:Spacer width="10"/>
		<mx:CheckBox id="isActiveCheckbox" label="Active"  click="{setIsActive()}" selected="{state.requestCategory.@isActive == 'N' ? false : true}"/>
	</mx:HBox>
	
	<mx:HBox width="100%" horizontalGap="0" verticalGap="0" verticalAlign="top" horizontalAlign="left" paddingLeft="0" fontSize="11">
		<mx:Label text="Type" width="100" fontSize="12" styleName="formLabel"/>
		<mx:ComboBox id="typeCombo" dataProvider="{types}" labelField="@display" width="400" change="{pickType()}"/>
		<mx:Spacer width="10"/>
		<mx:CheckBox id="associatedWithAnalysisCheckbox" label="Associated With Analysis?" 
					 click="{state.requestCategory.@associatedWithAnalysis = associatedWithAnalysisCheckbox.selected ? 'Y' : 'N'; state.dirty.setDirty()}"
					 selected="{state.requestCategory.@associatedWithAnalysis == 'Y' ? true : false}" />
	</mx:HBox>

	<mx:HBox width="100%" horizontalGap="1" verticalAlign="middle">
		<mx:Label  text="Code" width="100" styleName="formLabel"/>
		<mx:TextInput id="codeRequestCategoryField"  width="85" backgroundColor="0xffffff" text="{state.requestCategory.@codeRequestCategory}" editable="false"/>
		<mx:Spacer width="50"/>
		<mx:Label text="Icon" styleName="formLabel"/>
		<util:IconComboBox id="iconCombo" dataProvider="{parentApplication.expIcons..item}" labelField="@label" change="{iconChanged()}"  iconFunction="service.getIcon"  x="10" y="10" rowCount="12"/>
	</mx:HBox>

	<mx:HBox width="100%" horizontalGap="1" verticalAlign="middle">
		<mx:Label text="Core Facility" width="100" styleName="formLabel"/>
		<mx:ComboBox width="300"
					 dataProvider="{coreFacilities}"
					 labelField="@display" 
					 close="{coreFacilityChanged();}"
					 id="coreFacilityCombo"/>
	</mx:HBox>
	
	<mx:HBox width="100%" horizontalGap="1" verticalAlign="middle" id="notesHBox">
		<mx:Label text="Notes" width="100" styleName="formLabel"/>
		<mx:TextInput id="notes"  width="100%" text="{state.requestCategory.@notes}"  change="state.requestCategory.@notes = notes.text;state.dirty.setDirty()"/>
	</mx:HBox>
	
	<mx:HBox width="100%" horizontalGap="1" verticalAlign="middle" id="vendorHBox">
		<mx:Label text="Vendor" width="100" styleName="formLabel"/>
		<mx:ComboBox  width="300" 
					  dataProvider="{state.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Vendor').DictionaryEntry}" 
					  labelField="@display"
					  close="{vendorChanged()}"
					  id="vendorCombo"/>
	</mx:HBox>

	<mx:HBox width="100%" verticalAlign="middle" horizontalGap="1">
		<mx:Label text="Available for" width="100" styleName="formLabel"/>
		<mx:VBox width="100%" verticalGap="0">
			<mx:CheckBox id="isInternalCheckbox" label="Internal Experiment Orders" click="{state.requestCategory.@isInternal = isInternalCheckbox.selected ? 'Y' : 'N';state.dirty.setDirty()}" selected="{state.requestCategory.@isInternal == 'Y' ? true : false}" />
			<mx:CheckBox id="isExternalCheckbox" label="Upload of Experiment Data Generated at a Third Party Facility" click="{state.requestCategory.@isExternal = isExternalCheckbox.selected ? 'Y' : 'N';state.dirty.setDirty()}" selected="{state.requestCategory.@isExternal == 'Y' ? true : false}"/>
		</mx:VBox>
	</mx:HBox>
	
	<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle">
		<mx:Label  text="Sort Order" width="100" styleName="formLabel"/>
		<mx:TextInput id="sortOrder"  width="40" text="{state.requestCategory.@sortOrder}" change="state.requestCategory.@sortOrder = sortOrder.text;state.dirty.setDirty()" restrict="0-9" maxChars="2"/>
		<mx:Spacer width="5" />
		<mx:Button id="editSortOrderButton" label="Edit Sort Order" click="{clickEditSortOrder()}" />
		<mx:Spacer width="50"/>
		<mx:HBox visible="{typeCombo.selectedItem != null &amp;&amp; typeCombo.selectedItem.@hasChannels=='Y'}" includeInLayout="{typeCombo.selectedItem != null &amp;&amp; typeCombo.selectedItem.@hasChannels=='Y'}" width="100%" horizontalGap="8" verticalAlign="middle" id="hbox1" >
			<mx:Label id="channelLabel" text="Number of channels" styleName="formLabel"/>
			<mx:NumericStepper id="numberOfChannelsStepper" minimum="1" maximum="8" value="{state.requestCategory.@numberOfChannels}" change="state.requestCategory.@numberOfChannels = numberOfChannelsStepper.value;state.dirty.setDirty()"/>
		</mx:HBox>
	</mx:HBox>
	
	<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle">
		<mx:Label text="Sample Batch Size" width="100" styleName="formLabel"/>
		<mx:TextInput id="sampleBatchSize" width="40" text="{state.requestCategory.@sampleBatchSize}" change="state.requestCategory.@sampleBatchSize = sampleBatchSize.text; state.dirty.setDirty()" restrict="0-9" />
		<mx:Spacer width="10"/>
		<mx:Text text="Sample batch warning message:" width="100" styleName="formLabel" visible="{sampleBatchSize.text != ''}" includeInLayout="{sampleBatchSize.text != ''}"/>
		<mx:TextInput id="customWarningMessage" width="100%" change="state.requestCategory.@customWarningMessage = customWarningMessage.text; state.dirty.setDirty()" 
					  text="{parentApplication.getRequestCategoryProperty(state.requestCategory.@idCoreFacility,state.requestCategory.@codeRequestCategory, parentApplication.PROPERTY_SAMPLE_BATCH_WARNING)}"
					  visible="{sampleBatchSize.text != ''}" includeInLayout="{sampleBatchSize.text != ''}"/>
	</mx:HBox>
	
	<mx:HBox width="100%" verticalAlign="middle" horizontalGap="0" id="organismHBox">
		<mx:Text text="Default Organism" 
				 width="100" visible="{isInternalCheckbox.selected}"  styleName="formLabel"/>
		<mx:ComboBox width="300" id="organismCombo"
					 dataProvider="{state.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.OrganismLite').DictionaryEntry}" 
					 labelField="@display" visible="{isInternalCheckbox.selected}" close="{state.requestCategory.@idOrganism = organismCombo.selectedItem != null ? organismCombo.selectedItem.@value : '';state.dirty.setDirty();}"/>
	</mx:HBox>
	
	<mx:HBox width="100%" verticalAlign="middle" horizontalGap="0">
		<mx:Text text="Uses Products?" width="100" styleName="formLabel"/>
		<mx:CheckBox id="useProductsCheckBox" click="{updateProductType(); state.dirty.setDirty()}" selected="{state.requestCategory.@codeProductType != ''}"/>
		<mx:Spacer width="10"/>
		<mx:ComboBox id="productTypeCombo" dataProvider="{filteredProductTypes}" labelField="@display" visible="{useProductsCheckBox.selected}" includeInLayout="{useProductsCheckBox.selected}" 
					 close="{updateProductType(); state.dirty.setDirty()}" width="277"/>
		<mx:Spacer width="10"/>
		<mx:Text text="No Products Message:" width="70" styleName="formLabel" visible="{useProductsCheckBox.selected}" includeInLayout="{useProductsCheckBox.selected}"/>
		<mx:TextInput id="noProductsMessage" width="100%" change="state.requestCategory.@noProductsMessage = noProductsMessage.text; state.dirty.setDirty()" 
					  text="{parentApplication.getRequestCategoryProperty(state.requestCategory.@idCoreFacility, state.requestCategory.@codeRequestCategory, parentApplication.PROPERTY_NO_PRODUCTS_MESSAGE)}"
					  visible="{useProductsCheckBox.selected}" includeInLayout="{useProductsCheckBox.selected}"/>
	</mx:HBox>

	<mx:Label text="" styleName="warningLabelMinor" width="100%" id="securityLabel"/>
</mx:VBox>
