<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" label="Library Prep" 
		  verticalGap="1" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4">
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.DataGridEvent;
			import mx.managers.PopUpManager;

			[Bindable]
			private var state:ExperimentPlatformState = null;
			
			private var nextNewAppNum:int = 0;
			
			public function init(state:ExperimentPlatformState):void {
				this.state = state;
				nextNewAppNum = 0;
				applications.refresh();
			}
			
			private function addExperimentType():void {
				this.nextNewAppNum++;
				var appCode:String = 'Application' + this.nextNewAppNum.toString();
				var newNode:XML = new XML("<Application " +
					" isSelected='Y'" +
					" codeApplication='" + appCode + "'" +
					" display='" + 'enter experiment type here...' + "'" +
					" idSeqLibProtocols=''" +
					" idLabelingProtocolDefault=''" +
					" idHybProtocolDefault=''" +
					" idScanProtocolDefault=''" +
					" idFeatureExtractionProtocolDefault=''" +
					" isActive='Y'" +
					" hasChipTypes='Y'" +
					" canUpdate='Y' >" +
					" <ChipTypes></ChipTypes> " +
					" </Application>");
				applications.addItemAt(newNode, 0);
				appGrid.selectedItem = newNode;
				appGrid.scrollToIndex(0);
				state.dirty.setDirty();
				showEditExperimentTypeWindow(newNode);
			}
			
			private function removeExperimentType():void {
				var item:Object = null;
				if (appGrid.selectedItem != null) {
					item = appGrid.selectedItem;
				} else {
					return;
				}
				Alert.show("Are you sure you want to remove experiment type " + item.@display + "?",
					"Confirm",
					(Alert.YES | Alert.NO), this, 
					onPromptToRemoveExperimentType,						
					parentApplication.iconWarning);
				
			}
			
			private function onPromptToRemoveExperimentType(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					removeExperimentTypeImpl();
				}
			}
			
			private function removeExperimentTypeImpl():void {
				if (appGrid.selectedItem != null) {
					applications.removeItemAt(applications.getItemIndex(appGrid.selectedItem));
					state.dirty.setDirty();
				}
			}
			
			private function onAppGridItemEditEnd(event:DataGridEvent):void {
				state.dirty.setDirty();
				if (event.dataField == '@isSelected') {
					var it:Object = event.currentTarget.selectedItem;
				}
			}
			
			public function editExperimentType():void {
				showEditExperimentTypeWindow(appGrid.selectedItem);
			}
			
			private function showEditExperimentTypeWindow(app:Object):void {
				var editWindow:QCExperimentTypeDetailWindow = QCExperimentTypeDetailWindow(PopUpManager.createPopUp(parentApplication.theBody, QCExperimentTypeDetailWindow, true));
				PopUpManager.centerPopUp(editWindow);
				editWindow.init(state, app);
			}
			
			private function filterApplications(item:Object):Boolean {
				if (item.@isActive != 'Y') {
					return false;
				}
				return true;
			}	
			
			private function compareApplications(obj1:Object, obj2:Object, fields:Array=null):int {
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var s1:int = getSortOrderAsInt(obj1.@sortOrder);
					var s2:int = getSortOrderAsInt(obj2.@sortOrder);
					if (s1 < s2) {
						return -1;
					} else if (s1 > s2) {
						return 1;
					} else {
						var n1:String = obj1.@display;
						var n2:String = obj2.@display;
						if (n1 < n2) {
							return -1;
						} else if (n1 > n2) {
							return 1;
						} else {				
							return 0;
						}
					}
				}
			}
			
			private function getSortOrderAsInt(sortOrder:String):int {
				if (sortOrder == null || sortOrder == "") {
					sortOrder = "0";
				}
				return int(sortOrder);
			}
		]]>
	</mx:Script>
	<mx:XMLListCollection id="applications" source="{state.requestCategory.applications..Application}" sort="{sortApplications}"  filterFunction="filterApplications"/>
	<mx:Sort id="sortApplications" compareFunction="compareApplications" />

	<mx:HBox verticalAlign="middle">
		<mx:LinkButton label="Add" styleName="linkMenuButton" 
					   enabled="{state.requestCategory.@canUpdate == 'Y' ? true : false}" 
					   icon="@Embed(source='../../assets/add.png')" 
					   disabledIcon="@Embed(source='../../assets/add_disable.png')" click="addExperimentType()" fontSize="10"/>
		<mx:LinkButton label="Remove" styleName="linkMenuButton" 
					   enabled="{state.requestCategory.@canUpdate == 'Y' &amp;&amp; appGrid.selectedItem}"   
					   icon="@Embed(source='../../assets/delete.png')" disabledIcon="@Embed(source='../../assets/delete_disable.png')" 
					   click="removeExperimentType()" fontSize="10"/>
	</mx:HBox>
	<mx:VBox width="100%" height="100%">
		<mx:DataGrid id="appGrid"  horizontalScrollPolicy="auto"
					 dataProvider="{applications}" editable="true" itemEditBegin="onAppGridItemEditEnd(event);"
					 width="100%" height="100%" wordWrap="true" variableRowHeight="true" fontSize="11">
			<mx:columns>
				<mx:DataGridColumn headerText="Active"  
								   width="50"  editable="false"                      	
								   dataField="@isSelected" 
								   editorDataField="selected"
								   wordWrap="true"
								   itemRenderer="{views.renderers.ExperimentPlatformIsSelectedCheckboxRenderer.create(state.dirty, true, null, null)}">			 
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="Sort Order"  id="sortOrderCol"  dataField="@sortOrder" width="45" editable="true" editorDataField="text">
					<mx:itemEditor>
						<mx:Component>
							<mx:TextInput restrict="0-9" maxChars="2" editable="true"/>
						</mx:Component>
					</mx:itemEditor>
					<mx:headerRenderer>
						<mx:Component>
							<mx:VBox verticalGap="0" textAlign="center">
								<mx:Label text="Sort"/>
								<mx:Label text="Order"/>
							</mx:VBox>
						</mx:Component>
					</mx:headerRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="Experiment Type"  
								   itemRenderer="views.renderers.LabelActive"
								   rendererIsEditor="false"  width="400"
								   editable="true" wordWrap="true" dataField="@display" >
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="Has Assays?"  
								   width="90"   
								   editable="false"                      	
								   dataField="@hasChipTypes" 
								   editorDataField="selected" textAlign="center"
								   itemRenderer="{views.renderers.CheckBoxRenderer.create(state.dirty, true)}">			 
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="" width="35" editable="false">
					<mx:itemRenderer>
						<mx:Component>
							<mx:HBox verticalAlign="top" horizontalGap="0"  horizontalScrollPolicy="off">
								<mx:LinkButton label="Edit"  enabled="{data.@canUpdate == 'Y'}"  textDecoration="underline" fontSize="9" click="outerDocument.editExperimentType()" color="#0000FF"/>
							</mx:HBox>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
</mx:VBox>
