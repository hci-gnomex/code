<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="views.util.*"
				layout="vertical" 
				title="Edit Experiment Type" width="650" height="700" paddingTop="4" verticalScrollPolicy="off" paddingRight="4" paddingLeft="4" paddingBottom="4"
				horizontalScrollPolicy="off">
	
	<mx:Script>
		<![CDATA[
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import views.experimentplatform.ExperimentPlatformState;
			import views.renderers.MultiselectPopupCommon;
			
			private var platformTypeCode:String = null;
			private var defaultIcon:String = null;
			
			private var allSeqLibProtocols:XMLList;
			
			[Bindable] 
			private var selectedProtocols:XMLListCollection;
			
			[Bindable]
			private var parentWindow:views.experimentplatform.TabExperimentTypeIllumina = null;
			
			[Bindable]
			private var state:ExperimentPlatformState = null;
			
			[Bindable]
			private var selectedItem:Object;
			
			public function init(parentWindow:views.experimentplatform.TabExperimentTypeIllumina, state:ExperimentPlatformState, selectedItem:Object):void {
				this.parentWindow = parentWindow;
				this.state = state;
				themeCombo.setFocus();
				this.selectedItem = selectedItem;
				
				initValues(selectedItem);
			}
			
			private function initValues(selectedItem:Object):void {
				for each (var t:Object in parentApplication.dictionaryManager.getEntries('hci.gnomex.model.ApplicationTheme')) {
					if (t.@idApplicationTheme == selectedItem.@idApplicationTheme) {
						themeCombo.selectedItem = t;
						break;
					}
				}
				
				experimentTypeName.text = selectedItem.hasOwnProperty("@application") ? selectedItem.@application : "";
				
				sortOrderText.text = selectedItem.hasOwnProperty("@sortOrder") && selectedItem.@sortOrder != null && selectedItem.@sortOrder != ''
					? selectedItem.@sortOrder : '';
				
				this.radioGroupLabPreppedSamples.selectedValue = selectedItem.@onlyForLabPrepped == 'Y' ? 'Y' : 'N';
				
				captureLibDesign.selected = selectedItem.hasOwnProperty("@hasCaptureLibDesign") ? selectedItem.@hasCaptureLibDesign == 'Y' : false;
				
				initSelectedProtocols(selectedItem.hasOwnProperty("@idSeqLibProtocols") ? selectedItem.@idSeqLibProtocols : "");

				setIndexFamilyCombo(this.indexAFamilyComboBox, selectedItem.@idBarcodeSchemeA);
				setIndexFamilyCombo(this.indexBFamilyComboBox, selectedItem.@idBarcodeSchemeB);
				
				setPriceLabel(this.priceInternalLabel, parentApplication.PROPERTY_INTERNAL_PRICE_LABEL, 'Internal Pricing');
				setPriceLabel(this.priceExternalAcademicLabel, parentApplication.PROPERTY_EXTERNAL_ACADEMIC_PRICE_LABEL, 'External Academic Pricing');
				setPriceLabel(this.priceExternalCommercialLabel, parentApplication.PROPERTY_EXTERNAL_COMMERCIAL_PRICE_LABEL, 'External Commercial Pricing');
				
				dirty.resetDirty();
			}
			
			private function initSelectedProtocols(ids:String):void {
				selectedProtocols = new XMLListCollection();
				var values:Array = ids.split(",");
				for each (var id:String in values) {
					if (id.length > 0) {
						// Apparently dictionaryManager has multiple entries for a single key so we need [0]
						selectedProtocols.addItem(state.dictionaryManager.getEntry('hci.gnomex.model.SeqLibProtocol', id)[0]);
					}
				}
			}

			private function setIndexFamilyCombo(combo:ComboBox, idBarcode:String):void {
				for each (var obj:Object in combo.dataProvider) {
					if (obj.@value == idBarcode) {
						combo.selectedItem = obj;
						break;
					}
				}
			}
			
			private function setPriceLabel(label:Label, property:String, defaultLabel:String):void {
				var val:String = parentApplication.getProperty(property);
				if (val == null || val.length == 0) {
					label.text = defaultLabel;
				} else {
					label.text = val;
				}
			}
			
			private function configureStepsClick():void {
				var configureStepsWindow:LibPrepStepsWindow = LibPrepStepsWindow(mx.managers.PopUpManager.createPopUp(this, LibPrepStepsWindow, true));
				configureStepsWindow.init(this.dirty, selectedItem);
				PopUpManager.centerPopUp(configureStepsWindow);
			}
			
			private function editSeqLibProtocol():void {
				if (experimentTypeName.text.length == 0) {
					Alert.show("Please enter a name before editting the protocol");
					return;
				}
				var w:SeqLibProtocolEditWindow  = SeqLibProtocolEditWindow(mx.managers.PopUpManager.createPopUp(parentApplication.theBody, SeqLibProtocolEditWindow, true));
				if (selectedProtocols.length > 0) {
					w.init(this, this.selectedProtocols.getItemAt(0));
				} else {
					w.init(this, null, experimentTypeName.text);
				}
				PopUpManager.centerPopUp(w);
			}

			private function buildProtocolsString():String {
				var retVal:String = "";
				for each(var p:Object in selectedProtocols) {
					if (retVal != "") {
						retVal += ",";
					}
					retVal += p.@idSeqLibProtocol;
				} 
				return retVal;
			}
			
			private function save():void {
				if (themeCombo.selectedItem == null || experimentTypeName.text == null || experimentTypeName.text == '') {
					Alert.show("You must choose a theme and enter a name before saving");
					return;
				}
				
				if (state.requestCategory.@hasPriceSheet == 'Y') {
					var evt:ValidationResultEvent = priceInternalValidator.validate(null, true);
					if (evt.type == ValidationResultEvent.INVALID) {
						Alert.show(evt.message, "Error On " + priceInternalLabel.text, Alert.OK, null, null, parentApplication.iconError);
						return;
					}
					evt = priceExternalAcademicValidator.validate(null, true);
					if (evt.type == ValidationResultEvent.INVALID) {
						Alert.show(evt.message, "Error On " + priceExternalAcademicLabel.text, Alert.OK, null, null, parentApplication.iconError);
						return;
					}
					evt = priceExternalCommercialValidator.validate(null, true);
					if (evt.type == ValidationResultEvent.INVALID) {
						Alert.show(evt.message, "Error On " + priceExternalCommercialLabel.text, Alert.OK, null, null, parentApplication.iconError);
						return;
					}
				}
				
				var originalIdTheme:String = selectedItem.@idApplicationTheme;
				selectedItem.@idApplicationTheme = themeCombo.selectedItem.@idApplicationTheme;
				selectedItem.@isActive = 'Y';
				selectedItem.@application = experimentTypeName.text;
				selectedItem.@display = experimentTypeName.text;
				selectedItem.@sortOrder = sortOrderText.text;
				selectedItem.@onlyForLabPrepped = this.radioGroupLabPreppedSamples.selectedValue == null ? 'N' : this.radioGroupLabPreppedSamples.selectedValue;
				selectedItem.@hasCaptureLibDesign = captureLibDesign.selected ? 'Y' : 'N';
				selectedItem.@idSeqLibProtocols = buildProtocolsString();
				selectedItem.@idBarcodeSchemeA = indexAFamilyComboBox.selectedItem.@value;
				selectedItem.@idBarcodeSchemeB = indexBFamilyComboBox.selectedItem.@value;
				if (state.requestCategory.@hasPriceSheet == 'Y') {
					selectedItem.@unitPriceInternal = this.priceInternalText.text;
					selectedItem.@unitPriceExternalAcademic = this.priceExternalAcademicText.text;
					selectedItem.@unitPriceExternalCommercial = this.priceExternalCommercialText.text;
				}
				
				parentWindow.updateIlluminaExperimentTypeNode(XML(selectedItem), originalIdTheme);
				
				dirty.resetDirty();
				mx.managers.PopUpManager.removePopUp(this);
			}
			
			public function addSeqLibProtocol(params:Object):void {
				var found:Boolean = false;
				var slpToUse:Object;
				for each(var slp:Object in selectedProtocols) {
					if (slp.@idSeqLibProtocol == params.idProtocol) {
						slpToUse = slp;
						found = true;
						break;
					}
				}
				
				if (!found) {
					// should no longer ever happen
					slpToUse = new XML("<DictionaryEntry></DictionaryEntry>");
					selectedProtocols.addItem(slpToUse);
				}
				slpToUse.@idSeqLibProtocol = params.idProtocol;
				slpToUse.@value = params.idProtocol;
				slpToUse.@seqLibProtocol = params.protocolName;
				slpToUse.@display = params.protocolName;
				slpToUse.@description = params.protocolDescription;
				slpToUse.@url = params.protocolUrl;
				slpToUse.@isActive = params.isActive;
				slpToUse.@adapterSequenceThreePrime = params.adapterSequenceThreePrime;
				slpToUse.@adapterSequenceFivePrime = params.adapterSequenceFivePrime;
				this.dirty.setDirty();
			}
			
			private function clickRequestCategory(cb:CheckBox):void {
				for each (var obj:Object in selectedItem..RequestCategoryApplication) {
					if (obj.@requestCategory == cb.label) {
						obj.@isSelected = cb.selected ? 'Y' : 'N';
					}
				}
				dirty.setDirty();
			}
		]]>
	</mx:Script>
	<mx:CurrencyValidator id="priceInternalValidator" source="{this.priceInternalText}" property="text"	precision="2" minValue="0" maxValue="9999.99" required="true"/>
	<mx:CurrencyValidator id="priceExternalAcademicValidator" source="{this.priceExternalAcademicText}" property="text"	precision="2" minValue="0" maxValue="9999.99" required="true"/>
	<mx:CurrencyValidator id="priceExternalCommercialValidator" source="{this.priceExternalCommercialText}" property="text"	precision="2" minValue="0" maxValue="9999.99" required="true"/>

	<mx:VBox width="100%" height="100%" styleName="form" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4">
		<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="4">
			<mx:Text text="Name" styleName="formLabel" width="55"/>
			<mx:TextInput id="experimentTypeName" width="450" backgroundColor="#FFFFFF" borderColor="#898F93" change="dirty.setDirty()" />
			<mx:Spacer width="100%" />
			<mx:Text text="Sort Order" styleName="formLabel"/>
			<mx:TextInput id='sortOrderText' restrict="0-9" maxChars="2" editable="true"/>
		</mx:HBox>

		<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="4">
			<mx:Text text="Theme" styleName="formLabel" width="55"/>
			<mx:ComboBox id="themeCombo" width="200" dataProvider="{parentApplication.dictionaryManager.getEntries('hci.gnomex.model.ApplicationTheme')}"
						 labelField="@display" close="{this.dirty.setDirty();}" />
		</mx:HBox>
		
		<mx:VBox width="100%" verticalGap="2" verticalAlign="top" paddingTop="0">
			<mx:Text text="Experiment Platform Compatability" styleName="formLabel" paddingBottom="0"/>
			<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="0">
				<mx:Spacer width="20"/>
				<mx:VBox width="100%" paddingTop="0" verticalGap="0">
					<mx:Repeater id="requestCategoryRepeater" dataProvider="{selectedItem..RequestCategoryApplication}">
						<mx:CheckBox id="requestCategoryCheckbox" selected="{requestCategoryRepeater.currentItem.@isSelected=='Y'}"
							visible="{requestCategoryRepeater.currentItem.@isActive=='Y'}"
							includeInLayout="{requestCategoryRepeater.currentItem.@isActive=='Y'}" 
							label="{requestCategoryRepeater.currentItem.@requestCategory}"
							click="{clickRequestCategory(CheckBox(event.currentTarget))}" paddingBottom="0" paddingTop="0" />
					</mx:Repeater>
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>
		
		<mx:VBox width="100%" verticalGap="0">
			<mx:Text text="Index Families" styleName="formLabel" paddingBottom="0"/>
			<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="0">
				<mx:Spacer width="20"/>
				<mx:VBox width="100%" paddingTop="0" verticalGap="0">
					<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="0">
						<mx:Label text="Index A Family" />
						<mx:ComboBox id="indexAFamilyComboBox" labelField="@display"
									 dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.OligoBarcodeScheme').DictionaryEntry.(@isActive=='Y')}" />
					</mx:HBox>
					<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="0">
						<mx:Label text="Index B Family" />
						<mx:ComboBox id="indexBFamilyComboBox" labelField="@display"
									 dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.OligoBarcodeScheme').DictionaryEntry.(@isActive=='Y')}" />
					</mx:HBox>
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>
		
		<mx:VBox width="100%" verticalGap="0">
			<mx:Text text="Availability" styleName="formLabel" paddingBottom="0"/>
			<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="0">
				<mx:Spacer width="20"/>
				<mx:VBox width="100%" paddingTop="0" verticalGap="0">
					<mx:RadioButtonGroup id="radioGroupLabPreppedSamples" />
					<mx:RadioButton label="Always Available"  groupName="radioGroupLabPreppedSamples" value="N" click="{dirty.setDirty()}" paddingTop="0" paddingBottom="0" /> 
					<mx:RadioButton label="Only Available when Client performs library prep"  groupName="radioGroupLabPreppedSamples" value="Y" click="{dirty.setDirty()}" paddingTop="0" paddingBottom="0" /> 
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>
		
		<mx:VBox width="100%" verticalGap="0" enabled="{state.requestCategory.@hasPriceSheet == 'Y'}">
			<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="0">
				<mx:Text text="Billing" styleName="formLabel" paddingBottom="0"/>
				<mx:Text text="Please associate the experiment platform with a price sheet." paddingBottom="0" 
						 styleName="warningLabelMinor"
						 visible="{state.requestCategory.@hasPriceSheet != 'Y'}" includeInLayout="{state.requestCategory.@hasPriceSheet != 'Y'}" />
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="0">
				<mx:Spacer width="20"/>
				<mx:VBox width="100%" paddingTop="0" verticalGap="0">
					<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle" paddingTop="0">
						<mx:Label text="$" paddingRight="0" />
						<mx:TextInput id="priceInternalText" text="{selectedItem.@unitPriceInternal == '' ? '0.00' : selectedItem.@unitPriceInternal}" restrict="0-9." paddingLeft="0" change="dirty.setDirty()" />
						<mx:Spacer width="5" />
						<mx:Label id="priceInternalLabel" text="Internal Pricing" />
					</mx:HBox>
					<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle" paddingTop="0">
						<mx:Label text="$" paddingRight="0" />
						<mx:TextInput id="priceExternalAcademicText" text="{selectedItem.@unitPriceExternalAcademic == '' ? '0.00' : selectedItem.@unitPriceExternalAcademic}" restrict="0-9." paddingLeft="0" change="dirty.setDirty()" />
						<mx:Spacer width="5" />
						<mx:Label id="priceExternalAcademicLabel" text="External Academic Pricing" />
					</mx:HBox>
					<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle" paddingTop="0">
						<mx:Label text="$" paddingRight="0" />
						<mx:TextInput id="priceExternalCommercialText" text="{selectedItem.@unitPriceExternalCommercial == '' ? '0.00' : selectedItem.@unitPriceExternalCommercial}" restrict="0-9." paddingLeft="0" change="dirty.setDirty()" />
						<mx:Spacer width="5" />
						<mx:Label id="priceExternalCommercialLabel" text="External Commercial Pricing" />
					</mx:HBox>
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>

		<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="0">
			<mx:Button label="Edit Protocol" styleName="linkMenuButton" click="{editSeqLibProtocol()}" />
			<mx:Spacer width="100" />
			<mx:CheckBox id="captureLibDesign" label="Capture Lib Design" click="{dirty.setDirty()}" /> 
			<mx:Spacer width="100" />
			<mx:LinkButton label="Configure Lib Prep Steps" 
						   click="configureStepsClick()" 
						   textDecoration="underline" 
						   id="configurePrepStepsButton" 
						   paddingLeft="0" textAlign="left" paddingTop="0" />  	        
		</mx:HBox>
	</mx:VBox>
	<mx:ControlBar horizontalAlign="right">
		<util:DirtyNote id="dirty" />
		<mx:Button label="Save" id="saveButton" click="save()" icon="@Embed(source='../../assets/save.png')" 
				   enabled="{themeCombo.selectedItem != null &amp;&amp; experimentTypeName.text.length > 0}" 
				   disabledIcon="@Embed(source='../../assets/save_disable.png')"/>
		<mx:Button label="Cancel" click="{mx.managers.PopUpManager.removePopUp(this)}"/>
	</mx:ControlBar>
	
</mx:TitleWindow>
