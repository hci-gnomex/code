<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"  xmlns:mx="http://www.adobe.com/2006/mxml" 
		 width="100%" height="100%" 
		 xmlns:util="views.util.*"  
		 defaultButton="{lookupButton}" verticalGap="0">
<mx:HBox width="100%" verticalAlign="middle" paddingLeft="2" paddingRight="2" horizontalGap="1">
	<mx:Image source="assets/page.png"/>
	<mx:Label id="titleLabel" styleName="titleLabel" text="Review Orders"/>	
	
	<mx:Spacer width="100%"/>

	<mx:HBox horizontalGap="0"
			 height="100%"
			 verticalAlign="middle"
			 verticalGap="0"
			 width="150" >
		
		<mx:Label text="Order #" />
		
		<mx:TextInput id="requestNoLookupField"
					  fontSize="9"
					  height="19"
					  width="60"
					  change="{setDefaultButton()}" />
		
		<mx:Button id="lookupButton"
				   fontFamily="Arial"
				   height="18"
				   width="30"
				   color="#400040"
				   visible="true"
				   icon="@Embed('../../assets/arrow_right.png')"
				   click="{if (requestNoLookupField.text != '') this.getList()}" />
		
	</mx:HBox>

	<mx:LinkButton textDecoration = "underline"
				   label = "Refresh"
				   click = "{this.getList();}"
				   icon = "@Embed('../../assets/action_refresh.gif')"
				   toolTip = "Refresh order list"  styleName="labelSmall"/>
</mx:HBox>
	 
	
	<mx:HTTPService 
		id="getRequestList" 
		url="GetRequestList.gx"
		resultFormat="e4x"
		result="onGetRequestList(event)"
		showBusyCursor="true"
		fault="parentApplication.onFailHttpRequest('Unable to get order list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="changeRequestStatus" 
		url="ChangeRequestStatus.gx"
		resultFormat="e4x"
		result="onChangeRequestStatus(event)"
		showBusyCursor="true"
		fault="parentApplication.onFailHttpRequest('Unable to save order(s)', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	<mx:HTTPService  
		id="deleteRequest" 
		url="DeleteRequest.gx"
		destination="deleteRequest"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onDeleteRequest(event)"
		fault="parentApplication.onFailHttpRequest('Failed to delete request', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>
	
	<mx:Script> 
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.events.PropertyChangeEvent;
			import mx.rpc.events.ResultEvent;
			import hci.flex.controls.DropdownLabel;
			
			
			// Warning Icon
			[Embed( source = '../../assets/error.png' )]
			[Bindable]
			public var iconWarning:Class;
			
			[Bindable]
			public var parentView:NavOrderView;
			
			public function init():void {
				getList();
			}
			
			private function gridItemClick(event:ListEvent):void {
				
				if ( orderGrid.selectedItem != null ) {
					parentView.selectedRequest = orderGrid.selectedItem;
				}
				
				if ( event.columnIndex == 2 ) {
					parentView.switchToOrderDetailView();
				}
				if ( event.columnIndex != 0 && event.columnIndex != 2 ) {
					orderGrid.selectedIndex = -1;
				}
				
				selectedOrders.refresh();
			}
			
			private function selectionChange( event:ListEvent ):void {
				for each ( var obj:Object in orderGrid ) {
					obj.@isSelected = false;
				}
				for each ( var obj1:Object in orderGrid.selectedItems ) {
					obj1.@isSelected = true;
				}
			}
			
			private function submitAction():void {
				if ( comboBox.selectedItem == null ) {
					return;
				}
				for each ( var req:Object in selectedOrders ) {
					var params:Object = new Object;
					params.idRequest = req.@idRequest;
					params.codeRequestStatus = comboBox.selectedItem.@codeRequestStatus;
					changeRequestStatus.send( params );
				}
			}

			private function onChangeRequestStatus( event:ResultEvent ):void {
				if ( event.result.name() == "SUCCESS" ) {
					this.getList();
					return;
				}
				Alert.show( event.result..ERROR.@message.toString(), "Error saving order(s)" );
				
			}

			public function getList():void {
				getRequestList.send(getOrderParameters());
			}
			
			private function onGetRequestList(event:ResultEvent):void{
				comboBox.selectedIndex = -1;
				if ( getRequestList.lastResult.name() == "RequestList"){
					selectedOrders.refresh();
					return;
				}
				
				Alert.show( event.result..ERROR.@message.toString(), "Error getting orders" );
				
			}
			
			private function getOrderParameters():Object {
				var params:Object = new Object;
				
				params.includeSampleInfo = 'Y';
				
				if ( checkEmptyFilter() ) {
					params.number = 0;
					return params;
				}
				
				params.number = requestNoLookupField.text != null ? requestNoLookupField.text : '' ;
				params.lastWeek = this.createdLastWeekCheckbox.selected ? 'Y' : 'N' ;
				params.lastMonth = this.createdLastMonthCheckbox.selected ? 'Y' : 'N' ;
				params.lastThreeMonths = this.createdLastThreeMonthsCheckbox.selected ? 'Y' : 'N' ;
				params.lastYear = this.createdLastYearCheckbox.selected ? 'Y' : 'N' ;
				
				if ( this.newCheckbox.selected ) {
					params.status = 'NEW' ;
				}
				if ( this.submittedCheckbox.selected ) {
					params.status = 'SUBMITTED' ;
				}
				if ( this.processingCheckbox.selected ) {
					params.status = 'PROCESSING' ;
				}
				if ( this.completeCheckbox.selected ) {
					params.status = 'COMPLETE' ;
				}
				if ( this.failedCheckbox.selected ) {
					params.status = 'FAILED' ;
				}
				
				if ( this.capSeqCheckbox.selected ) {
					params.codeRequestCategory = 'CAPSEQ' ;
				}
				if ( this.fragCheckbox.selected ) {
					params.codeRequestCategory = 'FRAGANAL' ;
				}
				if ( this.mitoCheckbox.selected ) {
					params.codeRequestCategory = 'MITSEQ' ;
				}
				if ( this.cherryCheckbox.selected ) {
					params.codeRequestCategory = 'CHERRYPICK' ;
				}

				return params;
			}
			
			
			private function promptToDelete():void {
				
				var hasRun:Boolean = false
				for each ( var req:Object in selectedOrders ) {
					if ( req.@codeRequestStatus != "NEW" && req.codeReqestStatus != "SUBMITTED" ) {
						hasRun = true;
						break;
					}
				}
				
				if ( hasRun ) {
					Alert.show("One or more of the selected orders has already been added to an instrument run."
							+ " The order(s) cannot be deleted.");
					
				} else {
					Alert.show( "Are you sure you want to delete these orders?", 
						"Confirm Delete", ( Alert.YES | Alert.NO ), this, onPromptToDelete, iconWarning );
				}
				
				
			}
			
			private function onPromptToDelete( event:CloseEvent ):void {
				
				if ( event.detail == Alert.YES ) {
					deleteOrders();
				}
			}
			
			private function deleteOrders():void {
				for each ( var req:Object in selectedOrders ) {
					var params:Object = new Object;
					params.idRequest = req.@idRequest;					
					deleteRequest.send( params );
				}
			}
			
			private function onDeleteRequest(event:ResultEvent): void {
				if (deleteRequest.lastResult.name() == "SUCCESS") {
					getList();
				} else {
					Alert.show(deleteRequest.lastResult..ACTMESSAGE.@TEXT);
				}
			}
			
			private function checkEmptyFilter():Boolean {
				
				if ( requestNoLookupField.text != null ? requestNoLookupField.text : '' ) {
					return false;
				}
				if ( this.createdLastWeekCheckbox.selected ) {
					return false ;
				}
				if ( this.createdLastMonthCheckbox.selected ) {
					return false ;
				}
				if ( this.createdLastThreeMonthsCheckbox.selected ) {
					return false ;
				}
				if ( this.createdLastYearCheckbox.selected ) {
					return false ;
				}
				if ( this.newCheckbox.selected ) {
					return false ;
				}
				if ( this.submittedCheckbox.selected ) {
					return false ;
				}
				if ( this.processingCheckbox.selected ) {
					return false ;
				}
				if ( this.completeCheckbox.selected ) {
					return false ;
				}
				if ( this.failedCheckbox.selected ) {
					return false ;
				}
				if ( this.capSeqCheckbox.selected ) {
					return false;
				}
				if ( this.fragCheckbox.selected ) {
					return false;
				}
				if ( this.mitoCheckbox.selected ) {
					return false;
				}
				if ( this.cherryCheckbox.selected ) {
					return false;
				}
					
				return true;
			}
			
			private function selectedFilterFunc(item:XML):Boolean {
				return item.@isSelected == true;
			}
				 
			
			private function toggleCreateDateCheckboxes(checkBoxNumber:int):void {
				this.requestNoLookupField.text = "";
				
				if (checkBoxNumber == 0) {
					
					this.createdLastWeekCheckbox.selected  = false;
					this.createdLastMonthCheckbox.selected = false;
					this.createdLastThreeMonthsCheckbox.selected = false;
					this.createdLastYearCheckbox.selected  = false;
					
					this.newCheckbox.selected = false;
					this.processingCheckbox.selected = false;
					this.submittedCheckbox.selected  = false;
					this.completeCheckbox.selected = false;
					this.failedCheckbox.selected  = false;
					
				} else if (checkBoxNumber == 1) {
					this.createdLastMonthCheckbox.selected = false;
					this.createdLastThreeMonthsCheckbox.selected = false;
					this.createdLastYearCheckbox.selected  = false;
					
				} else if (checkBoxNumber == 2) {
					this.createdLastWeekCheckbox.selected = false;
					this.createdLastThreeMonthsCheckbox.selected = false;
					this.createdLastYearCheckbox.selected  = false;
					
				} else if (checkBoxNumber == 3) {
					this.createdLastWeekCheckbox.selected  = false;
					this.createdLastMonthCheckbox.selected = false; 
					this.createdLastYearCheckbox.selected  = false;
					
				}  else if (checkBoxNumber == 4) {
					this.createdLastWeekCheckbox.selected  = false;
					this.createdLastMonthCheckbox.selected = false; 
					this.createdLastThreeMonthsCheckbox.selected = false;
					
				}   
			} 		 
			
			private function toggleStatusCheckboxes(checkBoxNumber:int):void {
				this.requestNoLookupField.text = "";
				
				if (checkBoxNumber == 1) {
					this.processingCheckbox.selected = false;
					this.submittedCheckbox.selected  = false;
					this.completeCheckbox.selected = false;
					this.failedCheckbox.selected  = false;
					
				} else if (checkBoxNumber == 2) {
					this.newCheckbox.selected = false;
					this.submittedCheckbox.selected  = false;
					this.completeCheckbox.selected = false;
					this.failedCheckbox.selected  = false;
					
				} else if (checkBoxNumber == 3) {
					this.newCheckbox.selected = false;
					this.processingCheckbox.selected = false;
					this.completeCheckbox.selected = false;
					this.failedCheckbox.selected  = false;
					
				}  else if (checkBoxNumber == 4) {
					this.newCheckbox.selected = false;
					this.processingCheckbox.selected = false;
					this.submittedCheckbox.selected  = false;
					this.failedCheckbox.selected  = false;
					
				}   else if (checkBoxNumber == 5) {
					this.newCheckbox.selected = false;
					this.processingCheckbox.selected = false;
					this.submittedCheckbox.selected  = false;
					this.completeCheckbox.selected = false;
					
				}   
			} 	
			
			private function toggleTypeCheckboxes(checkBoxNumber:int):void {
				this.requestNoLookupField.text = "";
				
				if (checkBoxNumber == 1) {
					this.fragCheckbox.selected = false;
					this.mitoCheckbox.selected  = false;
					this.cherryCheckbox.selected = false;
					
				} else if (checkBoxNumber == 2) {
					this.capSeqCheckbox.selected = false;
					this.mitoCheckbox.selected  = false;
					this.cherryCheckbox.selected = false;
					
				} else if (checkBoxNumber == 3) {
					this.capSeqCheckbox.selected = false;
					this.fragCheckbox.selected = false;
					this.cherryCheckbox.selected = false;
					
				}  else if (checkBoxNumber == 4) {
					this.capSeqCheckbox.selected = false;
					this.fragCheckbox.selected = false;
					this.mitoCheckbox.selected  = false;
					
				}     
			} 	
			
			private function setDefaultButton():void {
				if ( this.requestNoLookupField.text != '' ) {
					
					this.createdLastWeekCheckbox.selected  = false;
					this.createdLastMonthCheckbox.selected = false;
					this.createdLastThreeMonthsCheckbox.selected = false;
					this.createdLastYearCheckbox.selected  = false;
					
					this.newCheckbox.selected = false;
					this.processingCheckbox.selected = false;
					this.submittedCheckbox.selected  = false;
					this.completeCheckbox.selected = false;
					this.failedCheckbox.selected  = false;
					
					this.capSeqCheckbox.selected = false;
					this.fragCheckbox.selected = false;
					this.mitoCheckbox.selected  = false;
					this.cherryCheckbox.selected = false
				}
			}
			
			
			public function sortRequestNumber(item1:Object, item2:Object):int {
				var n1:String  = item1.@requestNumber;
				var n2:String  = item2.@requestNumber;
				
				var number1:Number = -1;
				var number2:Number = -1;
				
				var tokens:Array = n1.split("R");
				if (tokens.length > 0) {
					number1 = tokens[0];	
				} else {
					number1 = Number(n1);
				}
				tokens = n2.split("R");
				if (tokens.length > 0) {
					number2 = tokens[0];	
				} else {
					number2 = Number(n2);
				}
				
				
				if (number1 > number2) {
					return 1;
				} else if (number2 > number1) {
					return -1;
				} else {
					return 0;
				}
			}


			
		]]>
	</mx:Script>    	
	
	<mx:XMLListCollection id = "orderList" source = "{getRequestList.lastResult.Request}" />
	<mx:XMLListCollection id = "selectedOrders" source="{getRequestList.lastResult.Request}" 
						  filterFunction="selectedFilterFunc"/>
	
	<mx:VBox  width="100%" verticalGap="0">
		
		<mx:HBox id = "filterBar"
				 horizontalGap = "20"
				 paddingTop = "0"
				 paddingBottom = "4"
				 paddingLeft = "0"
				 horizontalAlign = "left"
				 verticalAlign = "middle">
			
			<mx:HBox id = "statusCheckboxBar"
					 horizontalGap = "0"
					 height = "100%"
					 verticalAlign = "middle"
					 verticalGap = "0"
					 horizontalAlign = "right"
					 paddingLeft = "5">
				<mx:CheckBox label = "New"
							 id = "newCheckbox"
							 horizontalGap = "0"
							 styleName = "labelSmall"
							 paddingLeft = "2" selected="false">
					<mx:click>
						toggleStatusCheckboxes( 1 );
						this.getList();
					</mx:click>
					
				</mx:CheckBox>
				
				<mx:CheckBox label = "Submitted"
							 id = "submittedCheckbox"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall" selected="true">
					<mx:click>
						toggleStatusCheckboxes( 3 );
						this.getList();
					</mx:click>
					
				</mx:CheckBox>
				
				<mx:CheckBox label = "Processing"
							 id = "processingCheckbox"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleStatusCheckboxes( 2 );
						this.getList();
					</mx:click>
					
				</mx:CheckBox>
				
				<mx:CheckBox label = "Complete"
							 id = "completeCheckbox"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleStatusCheckboxes( 4 );
						this.getList();
					</mx:click>
					
				</mx:CheckBox>
				
				<mx:CheckBox label = "Failed"
							 id = "failedCheckbox"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleStatusCheckboxes( 5 );
						this.getList();
					</mx:click>
					
				</mx:CheckBox>
				
			</mx:HBox>
			
			<mx:VRule height = "20" />

			<mx:HBox id = "typeCheckboxBar"
					 horizontalGap = "0"
					 height = "100%"
					 verticalAlign = "middle"
					 verticalGap = "0"
					 horizontalAlign = "right"
					 paddingLeft = "5"
					 paddingRight = "5">
				
				<mx:CheckBox label = "ABI Seq"
							 id = "capSeqCheckbox"
							 horizontalGap = "0"
							 styleName = "labelSmall"
							 paddingLeft = "2">
					<mx:click>
						toggleTypeCheckboxes( 1 );
						getList();
					</mx:click>
					
				</mx:CheckBox>
				
				<mx:CheckBox label = "Frag Analysis"
							 id = "fragCheckbox"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleTypeCheckboxes( 2 );
						getList();
					</mx:click>
					
				</mx:CheckBox>
				
				<mx:CheckBox label = "Mit Seq"
							 id = "mitoCheckbox"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleTypeCheckboxes( 3 );
						getList();
					</mx:click>
					
				</mx:CheckBox>
				
				<mx:CheckBox label = "Cherry Pick"
							 id = "cherryCheckbox"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleTypeCheckboxes( 4 );
						getList();
					</mx:click>
					
				</mx:CheckBox>
			</mx:HBox>
			
			
			<mx:VRule height = "20" />

			
			<mx:HBox id = "dateCheckboxBar"
					 horizontalGap = "0"
					 height = "100%"
					 verticalAlign = "middle"
					 verticalGap = "0"
					 horizontalAlign = "right"
					 paddingLeft = "5"
					 paddingRight = "5">
				<mx:CheckBox id = "createdLastWeekCheckbox"
							 label = "Created in last week"
							 paddingRight = "0"
							 horizontalGap = "0"
							 paddingLeft = "2"
							 styleName = "labelSmall">
					<mx:click>
						toggleCreateDateCheckboxes( 1 );
						this.getList();
					</mx:click>
					
				</mx:CheckBox>
				
				<mx:CheckBox id = "createdLastMonthCheckbox"
							 label = "month"
							 paddingRight = "0"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleCreateDateCheckboxes( 2 );
						this.getList();
					</mx:click>
					
				</mx:CheckBox>
				
				<mx:CheckBox id = "createdLastThreeMonthsCheckbox"
							 label = "3 months"
							 paddingRight = "0"
							 paddingLeft = "2"
							 horizontalGap = "0"
							 styleName = "labelSmall">
					<mx:click>
						toggleCreateDateCheckboxes( 3 );
						this.getList();
					</mx:click>
					
				</mx:CheckBox>
				
				<mx:CheckBox id = "createdLastYearCheckbox"
							 label = "year"
							 paddingLeft = "2"
							 paddingRight = "0"
							 horizontalGap = "0"
							 styleName = "labelSmall" 
							 visible="false" 
							 includeInLayout="false">
					<mx:click>
						toggleCreateDateCheckboxes( 4 );
						this.getList();
					</mx:click>
					
				</mx:CheckBox>
				
			</mx:HBox>

			
		</mx:HBox>
		
		
		
	</mx:VBox>
	
	
		
		<mx:VBox width = "100%" height = "100%" verticalGap = "1">
			
			<mx:HBox width = "100%" verticalAlign = "bottom">
				<mx:Spacer width = "100%" />
				
			</mx:HBox>
			
			<mx:DataGrid id = "orderGrid"
						 allowMultipleSelection="true"
						 itemClick = "gridItemClick(event)"
						 click="{selectedOrders.refresh()}"
						 change="selectionChange(event)"
						 width = "100%"
						 height = "100%"
						 dataProvider = "{orderList}"
						 sortArrowSkin="mx.skins.ProgrammaticSkin" fontSize="9">
				<mx:columns>
					
					<mx:DataGridColumn id = "checkBoxColumn"
									   textAlign = "center"
									   width = "30"
									   resizable = "false"
									   sortable = "false"
									   editable = "true"
									   rendererIsEditor = "true"
									   dataField = "@isSelected"
									   editorDataField = "selected"
									   itemRenderer = "views.renderers.CheckBoxIsSelectedToggle"
									   headerRenderer = "views.renderers.CheckBoxHeader"
									   draggable="false"/>
					
					<mx:DataGridColumn   minWidth="28" width="85" headerText="#"  sortCompareFunction="sortRequestNumber">
						<mx:itemRenderer>
							<mx:Component >
								<mx:HBox paddingLeft="1" horizontalGap="0"   horizontalScrollPolicy="off">
									<mx:Image id="experimentImage"  
											  source="{data.@icon}" >
									</mx:Image> 
									<mx:Label id="requestNumber" text="{data.@number}">
									</mx:Label>
								</mx:HBox>
							</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn> 

					
					<mx:DataGridColumn dataField = "@name"
									   headerText = "Label"
									   width = "160"
									   textDecoration = "underline"
									   color = "#2017D8"
									   draggable="false">
						<mx:headerRenderer>
							<mx:Component>
								<mx:Label text = "Label" textDecoration = "none" color = "#000000" />
								
							</mx:Component>
							
						</mx:headerRenderer>
						
					</mx:DataGridColumn>
					
					
					<mx:DataGridColumn dataField = "@numberOfSamples" headerText = "Samples" width = "65" />
					
					<mx:DataGridColumn dataField = "@idSampleDropOffLocation" headerText="Drop Off"
									   itemRenderer="{hci.flex.controls.DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleDropOffLocation').DictionaryEntry, '@display', '@value', '@idSampleDropOffLocation')}"/>
					

					<mx:DataGridColumn dataField = "@codeRequestStatus" 
									   headerText = "Status" width = "70"
									   itemRenderer="{hci.flex.controls.DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.RequestStatus').DictionaryEntry, '@display', '@value', '@codeRequestStatus')}"/>
					
					<mx:DataGridColumn dataField = "@codeRequestCategory" 
									   headerText = "Type" width = "80" 
									   itemRenderer="{hci.flex.controls.DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.RequestCategory').DictionaryEntry, '@display', '@value', '@codeRequestCategory')}"/>
					
					<mx:DataGridColumn dataField = "@createDate" headerText = "Created on" width = "80" />
					
					<mx:DataGridColumn dataField="@plateLabel" headerText = "Plate" width="110"/>
					<mx:DataGridColumn dataField="@runLabel" headerText = "Run" width="110"/>
					<mx:DataGridColumn dataField="@idInstrumentRun" headerText = "Run ID" width="70"/>
					
					<mx:DataGridColumn dataField="@ownerName" headerText="Submitter" width="80"/>

					<mx:DataGridColumn dataField = "@labName" headerText = "Lab" width = "110" />

					<mx:DataGridColumn dataField = "@notes" headerText = "Notes" width = "250" />
					
				</mx:columns>
				
			</mx:DataGrid>
			
		</mx:VBox>
	
	
	<mx:ControlBar horizontalAlign = "left" width = "100%" paddingTop="0" paddingBottom="2">
		<mx:Label id = "nSelectedOrders" text="{selectedOrders.length + ' selected'}" />
		
		<mx:ComboBox id = "comboBox" 
					 prompt="- Change Status -" 
					 dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.RequestStatus').DictionaryEntry}"
					 labelField="@codeRequestStatus" />
		
		<mx:LinkButton textDecoration = "underline"
					   label = "Go"
					   icon = "@Embed('../../assets/bullet_go.png')"
					   disabledIcon="@Embed('../../assets/bullet_go_disable.png')"
					   toolTip = "Submit action" 
					   click="{submitAction()}" 
					   enabled="{selectedOrders.length>0}"/>
		
		<mx:LinkButton textDecoration="underline"
					   label="Delete"
					   icon="@Embed('../../assets/delete.png')"
					   toolTip="Delete selected orders"
					   click="{promptToDelete()}" 
					   disabledIcon="@Embed('../../assets/delete_disable.png')"
					   enabled="{selectedOrders.length>0}"/>
		<mx:Spacer width="100%"/>
		
		<mx:Label text = "{'(' + orderList.length + ' orders)'}" fontWeight = "normal" textAlign = "right"  fontStyle="italic"/>
		
		
		
	</mx:ControlBar>
	
</mx:VBox>
