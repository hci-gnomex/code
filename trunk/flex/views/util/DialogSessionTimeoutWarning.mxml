<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" 
				width="580" 
				height="210"
				showCloseButton="false" verticalAlign="middle" 
				horizontalAlign="center" title="{dialogTitle}" 
				backgroundColor="0x4593AD" 
				close="this.closeWindow()">
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.mxml.HTTPService;
			
			[Bindable]
			public var dialogTitle:String = "Session Timeout Warning";
			
			
			[Bindable]
			private var countdownMessage:String;
			
			[Bindable]
			private var keepSession:String;
			
			private var timeLeft : int; 
			private var totalTimeLeft:Number;
			private var elapsedTime:Number;
			
			public static var lastReturnedWarningMessage:String = "";
			
			public static var loginAgainMessage:String = "Click here to log in again";
			
			public static var hasApplicationWarning:Boolean = false;
			
			private var timer : Timer;
			private var timerInterval : int = 1000;
			
			public function closeDialog():void{
				if(this.timer != null)
					timer.stop();
				PopUpManager.removePopUp(this);
			}
			private function closeWindow():void{
				if(this.timer != null)
					timer.stop();
				PopUpManager.removePopUp(this);
			}
			
			public function startSessionCountDown(tf:int):void{
				//AppControl.setThisApplicationVisible(false);
				this.timeLeft = tf;
				this.totalTimeLeft = tf;
				
				this.elapsedTime = 0;
				setCountdownMessage();
				timer = new Timer(timerInterval);
				timer.addEventListener(TimerEvent.TIMER, countDownTimeLeft);
				timer.start();	
			}
			
			private function setCountdownMessage(): void {
				var minutes:int = timeLeft / 60;
				var seconds:int = this.timeLeft - (minutes * 60);
				this.countdownMessage = this.countdownMessage = "Your session will automatically time out in " + minutes + " minutes and " + seconds + " seconds";				
			}
			
			private function countDownTimeLeft(event:TimerEvent):void{ 
				this.timeLeft --; 
				this.elapsedTime ++;
				if (this.timeLeft < 0){
					timer.stop();
					logoutService.send();
					this.countdownMessage = "Your session has timed out";
					this.label = "Your session has timed out";
					this.idInstruction.visible = false;
					this.idQuit.visible = false;
					//this.closeWindow(); 
				}else {
					this.idTimeoutWarning.setProgress(this.elapsedTime, this.totalTimeLeft); 
					setCountdownMessage();
				}
			}
			
			public function keepSessionAlive(whoAndWhy:String, keep:Boolean):void{
				this.timer.stop();
				this.timer = null;
				//AppControl.setThisApplicationVisible(true);
				PopUpManager.removePopUp(this);
				if(	idContinue.label == loginAgainMessage) {
					if(ExternalInterface.available) {
						// Reload the page after logging out.
						ExternalInterface.call("window.location.reload");					
					}
					return;
				}

				keepHttpSession(whoAndWhy, keep, handleKeepSession);
			}
				
			public function keepHttpSession(whoAndWhy:String, keepSession:Boolean, resultHandler:Function):void{
				var service:HTTPService = SessionTimeoutData.createHTTPService("KeepHttpSession.gx");
				if (resultHandler != null) {
					service.addEventListener(ResultEvent.RESULT, resultHandler);					
				}

				var params:Object = new Object();
				params["keepSession"] = (keepSession?"true":"false");
				params["timestamp"] = new Date().getMilliseconds();
				params["whoAndWhy"] = whoAndWhy;
				var call:Object = service.send(params);
			}
			public function handleKeepSession(result:ResultEvent):void{
				var rs:XML = handleResult(result);
				if(rs != null) {
					this.closeDialog();
					SessionTimeoutData.startUserSessionTimer(); 
				}
			}
			public function handleResult(event:ResultEvent):XML{
				CursorManager.removeBusyCursor();
				var error:String = hasServerMessage(event, null);
				if (error == null || error.length <= 0){ 
					try{
						var resultXml:XML = event.result as XML;
						return resultXml;
					} catch (er:Error){
						Alert.show(er.message);
						return null;	
					}
				}
				return null;
			}
			
			private static function hasServerMessage(event:ResultEvent, timer:Timer):String{
				var text:String = "";
				//AppLogger.writeLog("AppUtil: check if there is error message returned");
				if(event == null){
					//AppLogger.writeLog("AppUtil: Result event returned from server is null");
					text = text + "Server returned (event)result for your request is null";
				}
				else{
					try{
						var results:XML = event.result as XML;
						if(results == null){
							text = text + "Server returned result from event for your request is null";
						}else{
							var msg:String = results.descendants("ERROR").attribute("message");
							if(msg != null && msg.length > 0){
								//AppLogger.writeLog("Server Message: " + msg);
								text = text + msg;
							}
						}
					}catch(er:Error){
						//AppLogger.writeLog("AppUtil: Error parsing result");
						text = er.message;
					}
				}
				if(text.length >0  && timer != null){
					timer.stop();
					lastReturnedWarningMessage = text;
				}else{
					lastReturnedWarningMessage = "";
				}
				if (text.length > 0){
					Alert.show(text);
					hasApplicationWarning = true;
				}
				return text;
			}			
						
			public function loggedOut():void {
				idContinue.label = loginAgainMessage;
				this.timer.stop();
			}
			
			public function logout():void {
				this.timer.stop();
				PopUpManager.removePopUp(this);
				parentApplication.logoutService.send();
				
			}
		]]>
	</mx:Script>
	<mx:HTTPService 
		id="logoutService"	    
		url="logout.jsp"
		resultFormat="text"
		result="loggedOut()"
		showBusyCursor="true"
		method="POST"
		useProxy="false" >  
	</mx:HTTPService> 
	<mx:VBox width="100%" height="95%" verticalAlign="middle" horizontalAlign="center">
		<mx:HBox width="95%" horizontalAlign="center" verticalAlign="middle">
			<mx:ProgressBar id="idTimeoutWarning" mode="manual" verticalCenter="true" 
							width="100%" labelPlacement="center"	label="{this.countdownMessage}" barColor="red"/>
		</mx:HBox>
		<mx:Label height="10" />
		<mx:HBox width="95%" horizontalAlign="center" verticalAlign="middle">
			<mx:Text id="idInstruction" width="241" text="Please select one of the options below:" horizontalCenter="true" fontWeight="bold"/>
		</mx:HBox>
		<mx:Label height="5" />
		<mx:HBox width="95%" horizontalAlign="center" verticalAlign="middle">
			<mx:Button id="idContinue" label="Keep application active" 
					   click="this.keepSessionAlive('User choose to continue working at the end of timeout', true)" width="200"/>
		</mx:HBox>
		<mx:Label height="5" />
		<mx:HBox width="95%" horizontalAlign="center" verticalAlign="middle">
			<mx:Button id="idQuit" label="Log out now" 
					   click="logout();" width="200"/>
		</mx:HBox>
	</mx:VBox>	
</mx:TitleWindow>
