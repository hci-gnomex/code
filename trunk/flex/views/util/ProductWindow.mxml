<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				width="840" height="370" 
				 creationComplete="{init()}"
				 xmlns:util="views.util.*" 
				 showCloseButton="true" close="{closeWindow()}"
				title="Products">
	
<mx:HTTPService  
		id="saveProduct" 
		url="SaveProduct.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onSaveProduct(event)"
		fault="parentApplication.onFailHttpRequest('Failed to save Product', event)"
		method="POST" 
		useProxy="false">
</mx:HTTPService>
	
<mx:HTTPService  
		id="deleteProduct" 
		url="DeleteProduct.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onDeleteProduct(event)"
		fault="parentApplication.onFailHttpRequest('Failed to delete Product', event)"
		method="POST" 
		useProxy="false">
</mx:HTTPService>
		
<mx:Script>
	<![CDATA[
		import hci.flex.controls.CheckBox;
		
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.controls.DateField;
		import mx.events.CloseEvent;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		
		import views.product.ProductTypeEditWindow;
		import views.util.DirtyNote;
		
	private var idProduct:Object = null;
	private	var tempArray:Array;	
	
	private function setDirty():void {
		if (saveButton.enabled) {
			dirty.setDirty();
		}
	}
		
	private function closeWindow():void {
		parentApplication.dictionaryManager.reload();
		
		PopUpManager.removePopUp(this);
	}
	
	private function init():void {
		products = new XMLListCollection();
		for each(var c:XML in parentApplication.productList) {
			products.addItem(c.copy());
		}
		products.filterFunction = filterProducts;
		products.refresh();
		parentApplication.removeEventListener(ProductEvent.DATA_REFRESHED,
			onProductRefreshed);		                                  
		parentApplication.addEventListener(ProductEvent.DATA_REFRESHED,   
			onProductRefreshed);
	}
		
	private function initValues():void {
		
		for each (var pt:Object in parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ProductType').DictionaryEntry) {
			if (pt.@codeProductType == productList.selectedItem.@codeProductType) {
				productTypeCombo.selectedItem = pt;
			}
		}
		
	}	
		
	private function onProductRefreshed(event:Event):void{
		products = new XMLListCollection();
		for each(var c:XML in parentApplication.productList) {
			products.addItem(c.copy());
		}
		products.filterFunction = filterProducts;
		products.refresh();
		reselectProduct();
		dirty.resetDirty();
	}
		
	public function selectProduct(idProduct:Object):void {
		this.idProduct = idProduct;
		reselectProduct();
	}
		
	private function reselectProduct():void {
		var found:Boolean = false;
		if (idProduct != null) {
			for each(var o:Object in products) {
				if (o.@idProduct == idProduct) {
					productList.selectedItem = o;
					productList.scrollToIndex(productList.selectedIndex);
					found = true;
					break;
				}
			}
		}
		if (found) {
			theViews.selectedIndex = 1;
			onSelectProduct();
		} else {
			theViews.selectedIndex = 0;
		}
	}
		
	private function onSelectProduct():void {
		if (productList.selectedItem != null) {
			theViews.selectedIndex = 1;
			
			if(productList.selectedItem.@name == "Enter name here.."){
				
			} else{
				theViews.selectedIndex = 1;

				dirty.resetDirty();
			
 				var theDate:String = "";
				tempArray = new Array();
			
							
			}
			initValues();
		}
	}
		

	private function addProduct():void {
		var newNodeNecessary:Boolean = true
		if (products.length > 0) {
			var potentiallyAlreadyEmptyNode:Object = products.getItemAt(0);
			if (potentiallyAlreadyEmptyNode.@idProduct == '' && potentiallyAlreadyEmptyNode.@name == '') {
				newNodeNecessary = false;
			}
		}
		
		if (newNodeNecessary) {
			var newProduct:XML = new XML("<Product " +
				" idProduct=''" +
				" name=''" +
				" isActive='Y'" +
				" codeProductType=''" + 
				" idPrice=''" + 
				" orderQty=''" + 
				" useQty=''" + 
				" catalogNumber=''" +
				" />");
			
			products.addItemAt(newProduct, 0);
			productList.selectedItem = newProduct;
		} else {
			productList.selectedIndex = 0;
		}
		
		productList.scrollToIndex(productList.selectedIndex);
		idProduct = "";
		
		setDirty();
		
		onSelectProduct();
	}
		
	private function removeProduct():void {
		if (productList.selectedItem == null) {
			return;
		}
		idProduct = "";
		
		Alert.show( "Are you sure you want to delete this Product?",
			"Warning",
			(Alert.YES | Alert.CANCEL), this, 
			onPromptDeleteProduct,						
			parentApplication.iconWarning);
	}
	
	private function onPromptDeleteProduct(event:CloseEvent):void {
		if (event.detail==Alert.YES) {
			var params:Object = new Object();
			params.idProduct = productList.selectedItem.@idProduct;
			deleteProduct.send(params);
		}
	}		
	
	private function onDeleteProduct(event:ResultEvent): void {
		if (deleteProduct.lastResult.name() == "SUCCESS") {
			parentApplication.getProductList.send();
			
		} else {
			mx.controls.Alert.show(deleteProduct.lastResult..ACTMESSAGE.@TEXT);
		}
	}
		
	
		
	private function save():void {
		if (productList.selectedItem == null) {
			return;
		}
		
		var params:Object = new Object();
		params.idProduct = productList.selectedItem.@idProduct;
		params.name = productName.text;
		params.isActive = this.isActive.selected ? "Y" : "N";
		params.orderQty = orderQty.text;
		params.useQty = useQty.text; 
		params.catalogNumber = catalogNumber.text;
		params.codeProductType = productTypeCombo.selectedItem.@codeProductType;
		params.unitPriceInternal = priceInternalText.text;
		params.unitPriceExternalAcademic = priceExternalAcademicText.text;
		params.unitPriceExternalCommercial = priceExternalCommercialText.text;
		
		saveProduct.send(params);
		
	}
		
	private function onSaveProduct(event:ResultEvent): void {
		if (saveProduct.lastResult.name() == "SUCCESS") {
			idProduct = saveProduct.lastResult.@idProduct;

			parentApplication.getProductList.send();
		} else {
			mx.controls.Alert.show(saveProduct.lastResult..ACTMESSAGE.@TEXT);
		}

		
	}
		
		private function checkToSave():void{
			if(productName.text == "" )
			{
				Alert.show("Product needs a name.",
					"MISSING FIELDS");
			} else if(productTypeCombo.selectedItem == null )
			{
				Alert.show("Product needs a product type.",
					"MISSING FIELDS");
			}  else {
				save();
			}
			
		}
		
		
		private function onCheckToSave(event:CloseEvent):void{
			if(event.detail == Alert.YES)
				save();
		}
		
		private function showEditWindow():void {
			var productTypeEditWindow:ProductTypeEditWindow = ProductTypeEditWindow(PopUpManager.createPopUp(this, ProductTypeEditWindow, true));
			PopUpManager.centerPopUp(productTypeEditWindow);
		}
		
		private function filterProducts(item:Object):Boolean {
			if (item.@idProduct == '' && item.@name == '' && item.@isActive == 'Y') {
				return true;
			}
			
			if (item.@codeProductType != null && item.@codeProductType != '') {
				for each (var productType:Object in filteredProductTypes) {
					if (productType.@value == item.@codeProductType) {
						return true;
					}
				}
			}
			
			return false;
		}
		
		private function filterProductTypes(item:Object):Boolean {
			if (item.@value != null && item.@value != '') {
				if (parentApplication.coreFacilitiesICanManage != null) {
					for each (var coreFacility:Object in parentApplication.coreFacilitiesICanManage) {
						if (coreFacility.@idCoreFacility == item.@idCoreFacility) {
							return true;
						}
					}
				}
			}
			
			return false;
		}
		
	]]>
</mx:Script>
	
<mx:XMLListCollection id="products"/>
<mx:XMLListCollection id="filteredProductTypes" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.ProductType').DictionaryEntry}" filterFunction="filterProductTypes" />
	
	<mx:StringValidator required="true" source="{productName}" property="text" maxLength="100" requiredFieldError="Product must have a name."/>
	<mx:CurrencyFormatter id="dollarFormatter" currencySymbol="$" precision="2" decimalSeparatorTo="." thousandsSeparatorTo="," useThousandsSeparator="true"/> 
	
	
<mx:VBox width="100%" height="100%" verticalGap="0">
	
	<mx:HBox width="100%" backgroundSize="100%" verticalAlign="middle">
		<mx:LinkButton label="Add Product" styleName="linkMenuButton" click="addProduct()"  disabledIcon="@Embed(source='../../assets/page_add_disable.png')" icon="@Embed(source='../../assets/page_add.png')" fontSize="11"/>
		<mx:LinkButton label="Remove Product" styleName="linkMenuButton" click="removeProduct()" enabled="{productList.selectedItem != null &amp;&amp; productList.selectedItem.@canDelete == 'Y'}"   disabledIcon="@Embed(source='../../assets/page_delete_disable.png')" icon="@Embed(source='../../assets/page_delete.png')" fontSize="11"/>
	</mx:HBox>
	
<mx:HDividedBox height="100%" width="100%" horizontalGap="6" >
  <mx:VBox height="100%" width="200" styleName="panelBox">
		<mx:List id="productList" width="100%" height="100%" labelField="@name" dataProvider="{products}" 
				 itemClick="{onSelectProduct()}">
		</mx:List>
  </mx:VBox>	
  <mx:ViewStack id="theViews"  width="100%" height="100%" creationPolicy="all">
	<mx:VBox width="100%" height="100%" verticalGap="0" styleName="panelBox" paddingLeft="4" paddingTop="4" paddingRight="4" paddingBottom="0"/>		
	<mx:VBox width="100%" height="100%" verticalGap="1" styleName="panelBox" paddingLeft="4" paddingTop="4" paddingRight="4" paddingBottom="0">		
		 <mx:VBox width="100%" height="100%" styleName="form" paddingTop="4" paddingBottom="4" paddingRight="4" paddingLeft="4" verticalGap="6">			 
			 <mx:HBox width="100%" verticalGap="0" verticalAlign="middle">
			  <mx:Label text="Name"  width="100"  styleName="formLabel"/>
			  <mx:TextInput  text="{productList.selectedItem.@name}" change="{setDirty()}" width="100%" id="productName"  maxChars="200" />
			  
			   <mx:CheckBox label="Active" id="isActive"  click="setDirty()"  width="75">
			    <mx:selected>{productList.selectedItem.@isActive == 'Y' ? true : false}</mx:selected>
			   </mx:CheckBox>
			 
			 </mx:HBox>		 
			 <mx:HBox width="100%" verticalGap="0" verticalAlign="middle">
				 <mx:Text text="Product Type"  width="100" styleName="formLabel"/>
				 <mx:ComboBox dataProvider="{filteredProductTypes}" id="productTypeCombo"
							  width="100%" labelField="@description"  change="setDirty()" />
				 <mx:LinkButton id="productTypeEditButton" label="Edit..." click="showEditWindow()" textDecoration="underline" color="#0000FF"  
								visible="{parentApplication.isAdminState || parentApplication.isSuperAdmin}" includeInLayout="{parentApplication.isAdminState || parentApplication.isSuperAdmin}" />
			 </mx:HBox>
			 <mx:HBox width="100%" verticalGap="0" verticalAlign="middle">
			  <mx:Text text="Catalog Number" width="100" styleName="formLabel"/>
			  <mx:TextInput text="{productList.selectedItem.@catalogNumber}" 
			  		  change="{setDirty()}" width="100%" id="catalogNumber" maxChars="100"/>
			 </mx:HBox>
			 <mx:HBox width="100%" verticalGap="0" verticalAlign="middle">
				 <mx:Text text="Order Quantity"  width="100" styleName="formLabel"/>
				 <mx:TextInput text="{productList.selectedItem.@orderQty}" change="{setDirty()}" width="100%" id="orderQty"  maxChars="100"/>
			 </mx:HBox>	
			 <mx:HBox width="100%" verticalGap="0" verticalAlign="middle">
				 <mx:Text text="Use Quantity"  width="100" styleName="formLabel"/>
				 <mx:TextInput text="{productList.selectedItem.@useQty}" change="{setDirty()}" width="100%" id="useQty"  maxChars="100"/>
			 </mx:HBox>	
			 <mx:HBox width="100%" verticalGap="0" verticalAlign="top">
				 <mx:Text text="Pricing" width="80" styleName="formLabel"/>
			 	<mx:VBox width="100%" paddingTop="0" verticalGap="2">
			 		<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle" paddingTop="0">
			 			<mx:Label text="$" paddingRight="0" textAlign="right" width="20" />
			 			<mx:TextInput width="250" id="priceInternalText" text="{productList.selectedItem.@unitPriceInternal == '' ? '0.00' : productList.selectedItem.@unitPriceInternal}" restrict="0-9." paddingLeft="0" change="setDirty()" />
			 			<mx:Spacer width="5" />
			 			<mx:Label id="priceInternalLabel" text="Internal Pricing" />
			 		</mx:HBox>
			 		<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle" paddingTop="0">
			 			<mx:Label text="$" paddingRight="0" textAlign="right" width="20" />
			 			<mx:TextInput width="250" id="priceExternalAcademicText" text="{productList.selectedItem.@unitPriceExternalAcademic == '' ? '0.00' : productList.selectedItem.@unitPriceExternalAcademic}" restrict="0-9." paddingLeft="0" change="setDirty()" />
			 			<mx:Spacer width="5" />
			 			<mx:Label id="priceExternalAcademicLabel" text="External Academic Pricing" />
			 		</mx:HBox>
			 		<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle" paddingTop="0">
			 			<mx:Label text="$" paddingRight="0" textAlign="right" width="20" />
			 			<mx:TextInput width="250" id="priceExternalCommercialText" text="{productList.selectedItem.@unitPriceExternalCommercial == '' ? '0.00' : productList.selectedItem.@unitPriceExternalCommercial}" restrict="0-9." paddingLeft="0" change="setDirty()" />
			 			<mx:Spacer width="5" />
			 			<mx:Label id="priceExternalCommercialLabel" text="External Commercial Pricing" />
					</mx:HBox>
			 	</mx:VBox>
				
			 </mx:HBox>	
		</mx:VBox>
		<mx:ControlBar width="100%" horizontalAlign="right"  paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0">
			<util:DirtyNote id="dirty" />
			<mx:Button id="saveButton" label="Save"  enabled="true"
					   icon="@Embed('../../assets/action_save.gif')" click="checkToSave()" disabledIcon="@Embed(source='../../assets/save_disable.png')">
			</mx:Button>
			<mx:Button label="Close"  click="{closeWindow()}"/>
			
		</mx:ControlBar>
	</mx:VBox>
  </mx:ViewStack>

	
</mx:HDividedBox>
</mx:VBox>
	
</mx:TitleWindow>
