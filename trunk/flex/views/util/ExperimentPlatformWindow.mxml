<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				layout="absolute" width="920" height="558"  creationPolicy="all"
				xmlns:util="views.util.*"  creationComplete="init()"
				showCloseButton="true" close="{closeWindow()}"
				title="Configure Experiment Platform">
	<mx:HTTPService  
		id="getExperimentPlatformList" 
		url="GetExperimentPlatformList.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetExperimentPlatformList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get experiment platform list', event)"
		method="POST" 
		useProxy="false">
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="deleteExperimentPlatform" 
		url="DeleteExperimentPlatform.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		result="onDeleteExperimentPlatform(event)"
		fault="parentApplication.onFailHttpRequest('Failed to delete experiment platform', event)"
		method="POST" 
		useProxy="false">
	</mx:HTTPService>	
	
	<mx:HTTPService  
		id="saveExperimentPlatform" 
		url="SaveExperimentPlatform.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onSaveExperimentPlatform(event)"
		fault="parentApplication.onFailHttpRequest('Failed to save experiment platform', event)"
		method="POST" 
		useProxy="false">
	</mx:HTTPService>
	
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.PropertyChangeEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			
			[Bindable]
			private var requestCategory:Object = null;
			
			public var codeRequestCategorySelected:Object = null;
			
			private function init():void {
				getExperimentPlatformList.send();
				
				this.sequencingOptions.removeEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingSeqOptionChange);
				this.sequencingOptions.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingSeqOptionChange);
				
			}
			
			
			
			private function closeWindow():void {
				PopUpManager.removePopUp(this);
				callLater(parentApplication.dictionaryManager.reload);
			}
			
			
			
			private function onGetExperimentPlatformList(event:ResultEvent): void {
				if (getExperimentPlatformList.lastResult.name() == "ExperimentPlatformList") {
					callLater(reselectExperimentPlatform);
				} else {
					mx.controls.Alert.show(getExperimentPlatformList.lastResult..ACTMESSAGE.@TEXT);
				}
			}	
			
			private function reselectExperimentPlatform():void {
				if (codeRequestCategorySelected != null) {
					var found:Boolean = false;
					for each(var ep:Object in getExperimentPlatformList.lastResult.RequestCategory) {
						if (ep.@codeRequestCategory == codeRequestCategorySelected) {
							this.platformList.selectedItem = ep;
							this.platformList.scrollToIndex(this.platformList.selectedIndex);
							this.onSelectPlatform();
							found = true;
							break;
						}
					}
					if (!found) {
						this.platformList.selectedItem = null;
						onSelectPlatform();
					}
				} else {
					this.platformList.selectedItem = null;
					onSelectPlatform();
				}
			}
			
			private function save():void {
				if(coreFacilities.length >= 2 && coreFacilityCombo.selectedLabel == ""){
					Alert.show("You must select a core facility");
					return;
				}
				
				var params:Object = new Object();
				
				params.codeRequestCategory = this.requestCategory.@codeRequestCategory;
				params.requestCategory = this.platformName.text;
				params.notes = this.notes.text;
				params.type = this.typeRadioGroup.selectedValue != null ? this.typeRadioGroup.selectedValue : '';
				params.idCoreFacility = coreFacilities.getItemAt(coreFacilityCombo.selectedIndex).@idCoreFacility;
				params.sortOrder = this.sortOrder.text;
				params.isActive = this.isActiveCheckbox.selected ? 'Y' : 'N';
				params.idVendor = this.vendorCombo.selectedItem != null ? this.vendorCombo.selectedItem.@value : '';
				params.isInternal = this.isInternalCheckbox.selected ? 'Y' : 'N';
				params.isExternal = this.isExternalCheckbox.selected ? 'Y' : 'N';
				
				//params.icon = this.theIcon.text;
				if(iconCombo.selectedIndex > 0) {
					params.icon = iconCombo.selectedItem.@icon;
				} else {
					params.icon = "";
				}
				
				params.idOrganism = this.organismCombo.selectedItem != null ? this.organismCombo.selectedItem.@value : '';
				params.numberOfChannels = this.numberOfChannelsStepper.value;
				params.isSampleBarcodingOptional = this.barcodingRadioGroup.selectedValue;
				
				params.sampleTypesXMLString = "<sampleTypes>" + this.sampleTypes.toXMLString() + "</sampleTypes>";
				params.applicationsXMLString = "<applications>" + this.applications.toXMLString() + "</applications>";
				params.sequencingOptionsXMLString = "<sequencingOptions>" + this.sequencingOptions.toXMLString() + "</sequencingOptions>";
				
				saveExperimentPlatform.send(params);
			}			
			
			private function pickType():void {
				var iconToCheck:String = "";
				if (this.typeRadioGroup.selectedValue == 'QC') {
					iconToCheck = "assets/chart_line.png";
					dirty.setDirty();
				} else if (this.typeRadioGroup.selectedValue == 'MICROARRAY') {
					iconToCheck = "assets/microarray_small.png";
					dirty.setDirty();
				} else if (this.typeRadioGroup.selectedValue == 'ILLUMINA') {
					iconToCheck = "assets/DNA_diag.png";				
					dirty.setDirty();
				} else if (this.typeRadioGroup.selectedValue == 'CHERRYPICK') {
					iconToCheck = "assets/cherrypick.png";
					dirty.setDirty();
				} else if (this.typeRadioGroup.selectedValue == 'FRAGANAL') {
					iconToCheck = "assets/fraganal.png";				
					dirty.setDirty();
				} else if (this.typeRadioGroup.selectedValue == 'MITSEQ') {
					iconToCheck = "assets/mitseq.png";
					dirty.setDirty();
				} else if (this.typeRadioGroup.selectedValue == 'CAPSEQ') {
					iconToCheck = "assets/dna-helix-icon.png";				
					dirty.setDirty();
				}
				
				if(iconToCheck.length > 0) {
					var expIconLst:XMLList = parentApplication.expIcons.item; 
					iconCombo.selectedIndex = 0;
					for(var i:Number = 0; i < expIconLst.length(); i++) {
						if(expIconLst[i].@icon == iconToCheck) {
							iconCombo.selectedIndex = i;
							break;
						}
					}					
				}

			}
			
			private function onSaveExperimentPlatform(event:ResultEvent): void {
				if (saveExperimentPlatform.lastResult.name() == "SUCCESS") {
					codeRequestCategorySelected = saveExperimentPlatform.lastResult.@codeRequestCategory;
					getExperimentPlatformList.send();
				} else {
					mx.controls.Alert.show(saveExperimentPlatform.lastResult..ACTMESSAGE.@TEXT);
				}
			}	
			private function addPlatform():void {
				
				var addWindow:ExperimentPlatformAddWindow = ExperimentPlatformAddWindow(PopUpManager.createPopUp(mainBody, ExperimentPlatformAddWindow, true));
				PopUpManager.centerPopUp(addWindow);
				addWindow.parentWindow = this;
				addWindow.platformName.setFocus();
				this.theViews.selectedIndex = 1;
				this.theTabs.selectedIndex = 0;
				
				
			}
			
			private function removePlatform():void {
				if (platformList.selectedItem == null) {
					return;
				}
				Alert.show("Are you sure you want to remove experiment platform " + platformList.selectedItem.@display + "?",
					"Confirm",
					(Alert.YES | Alert.NO), this, 
					onPromptToRemovePlatform,						
					parentApplication.iconWarning);
				
			}
			
			private function onPromptToRemovePlatform(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					removePlatformImpl();
				}
			}
			
			private function removePlatformImpl():void {
				codeRequestCategorySelected = null;
				
				var params:Object = new Object();
				params.codeRequestCategory = platformList.selectedItem.@codeRequestCategory;
				deleteExperimentPlatform.send(params);
			}
			
			private function onDeleteExperimentPlatform(event:ResultEvent): void {
				if (deleteExperimentPlatform.lastResult.name() == "SUCCESS") {
					this.getExperimentPlatformList.send();
				} else {
					mx.controls.Alert.show(deleteExperimentPlatform.lastResult..ACTMESSAGE.@TEXT);
				}
				this.dirty.resetDirty();
			}		
			
			private function onSelectPlatform():void {
				if (platformList.selectedItem != null) {
					theViews.selectedIndex = 1;
					
					requestCategory = platformList.selectedItem;
					codeRequestCategorySelected = platformList.selectedItem.@codeRequestCategory;
					
					vendorCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Vendor',requestCategory.@idVendor);
					organismCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.OrganismLite',requestCategory.@idOrganism);
					coreFacilityCombo.selectedItem = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.CoreFacility',requestCategory.@idCoreFacility);
					var expIconLst:XMLList = parentApplication.expIcons.item; 
					iconCombo.selectedIndex = 0;
					for(var i:Number = 0; i < expIconLst.length(); i++) {
						if(expIconLst[i].@icon == requestCategory.@icon) {
							iconCombo.selectedIndex = i;
							break;
						}
					}

					dirty.resetDirty();
					
					if(typeRadioGroup.selectedValue == 'ILLUMINA') {
						channelLabel.width = 160;
						channelLabel.text = "Number of flowcell channels";
						numberOfChannelsStepper.maximum = 8;
					} else {
						channelLabel.width = 120;
						channelLabel.text = "Number of channels";	
						numberOfChannelsStepper.maximum = 2;
					}
					
					showHideAppColumns();
				} else {
					theViews.selectedIndex = 0;
					codeRequestCategorySelected = null;
				}
			}
			
			private function showHideAppColumns():void {
				labelingProtocolCol.visible = typeRadioGroup.selectedValue == 'MICROARRAY' ? true : false; 
				hybProtocolCol.visible = typeRadioGroup.selectedValue == 'MICROARRAY' ? true : false; 
				scanProtocolCol.visible = typeRadioGroup.selectedValue == 'MICROARRAY' ? true : false; 
				feProtocolCol.visible = typeRadioGroup.selectedValue == 'MICROARRAY' ? true : false; 
				
				appGrid.invalidateList();
				appGrid.invalidateDisplayList();
				
				applicationThemeCol.visible = typeRadioGroup.selectedValue == 'ILLUMINA' ? true : false;
				seqLibProtocolCol.visible = typeRadioGroup.selectedValue == 'ILLUMINA' ? true : false; 
				
				appGrid.invalidateList();
				appGrid.invalidateDisplayList();
				
			}
			private function addExperimentType():void {
				var newNode:XML = new XML("<Application " +
					" isSelected='N'" +
					" codeApplication='" + 'Application' + "'" +
					" display='" + 'enter experiment type here...' + "'" +
					" idSeqLibProtocols=''" +
					" idLabelingProtocolDefault=''" +
					" idHybProtocolDefault=''" +
					" idScanProtocolDefault=''" +
					" idFeatureExtractionProtocolDefault=''" +
					" isActive='Y'" +
					" />");
				this.applications.addItemAt(newNode, 0);
				this.appGrid.selectedItem = newNode;
				this.appGrid.scrollToIndex(0);
				this.dirty.setDirty();
				
			}
			
			private function removeExperimentType():void {
				if (appGrid.selectedItem == null) {
					return;
				}
				Alert.show("Are you sure you want to remove experiment type " + appGrid.selectedItem.@display + "?",
					"Confirm",
					(Alert.YES | Alert.NO), this, 
					onPromptToRemoveExperimentType,						
					parentApplication.iconWarning);
				
			}
			
			private function onPromptToRemoveExperimentType(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					removeExperimentTypeImpl();
				}
			}
			
			private function removeExperimentTypeImpl():void {
				if (this.appGrid.selectedItem != null) {
					this.applications.removeItemAt(applications.getItemIndex(appGrid.selectedItem));
					this.dirty.setDirty();
				}
			}
			
			private function addSampleType():void {
				var newNode:XML = new XML("<SampleType " +
					" isSelected='N'" +
					" idSampleType='" + 'SampleType' + "'" +
					" display='" + 'enter sample type here...' + "'" +
					" codeApplications=''" +
					" isActive='Y'" +
					" />");
				this.sampleTypes.addItemAt(newNode, 0);
				this.sampleTypeGrid.selectedItem = newNode;
				this.sampleTypeGrid.scrollToIndex(0);
				this.dirty.setDirty();
				
			}
			
			
			private function removeSampleType():void {
				if (sampleTypeGrid.selectedItem == null) {
					return;
				}
				Alert.show("Are you sure you want to remove sample type " + sampleTypeGrid.selectedItem.@display + "?",
					"Confirm",
					(Alert.YES | Alert.NO), this, 
					onPromptToRemoveSampleType,						
					parentApplication.iconWarning);
				
			}
			
			private function onPromptToRemoveSampleType(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					removeSampleTypeImpl();
				}
			}
			
			private function removeSampleTypeImpl():void {
				if (this.sampleTypeGrid.selectedItem != null) {
					this.sampleTypes.removeItemAt(sampleTypes.getItemIndex(sampleTypeGrid.selectedItem));
					this.dirty.setDirty();
				}
			}
			
			private function addNumberSequencingCycles():void {
				var newNode:XML = new XML("<NumberSequencingCycles " +
					" isSelected='N'" +
					" idNumberSequencingCycles='" + 'NumberSequencingCycles' + "'" +
					" display='" + 'enter number sequencing cycles here...' + "'" +
					" paired='N'" +
					" pairedNote=''" +
					" single='N'" +
					" singleNote=''" +
					" isActive='Y'" +
					" />");
				this.sequencingOptions.addItemAt(newNode, 0);
				this.sequencingOptionGrid.selectedItem = newNode;
				this.sequencingOptionGrid.scrollToIndex(0);
				this.dirty.setDirty();
				
			}
			
			
			
			private function removeNumberSequencingCycles():void {
				if (sequencingOptionGrid.selectedItem == null) {
					return;
				}
				Alert.show("Are you sure you want to remove sequence cycles " + sequencingOptionGrid.selectedItem.@numberSequencingCycles + "?",
					"Confirm",
					(Alert.YES | Alert.NO), this, 
					onPromptToRemoveNumberSequencingCycles,						
					parentApplication.iconWarning);
				
			}
			
			private function onPromptToRemoveNumberSequencingCycles(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					removeNumberSequencingCyclesImpl();
				}
			}
			
			
			private function removeNumberSequencingCyclesImpl():void {
				if (this.sequencingOptionGrid.selectedItem != null) {
					this.sequencingOptions.removeItemAt(sequencingOptions.getItemIndex(sequencingOptionGrid.selectedItem));
					this.dirty.setDirty();
				}
			}
			
			private function calcRowColor(item:Object, rowIndex:int,
										  dataIndex:int, color:uint):uint
			{
				if(item.@isActive != "Y")
					return 0x49FFAD;
				else
					return color;
			}
			
			private function selectAll(objects:XMLListCollection, viewStack:ViewStack):void {
				for each(var o:Object in objects) {
					if (o.@isActive == 'Y') {
						o.@isSelected = 'Y';
					}
				}
				viewStack.selectedIndex = 1;
				this.dirty.setDirty();
			}
			private function unselectAll(objects:XMLListCollection, viewStack:ViewStack):void {
				for each(var o:Object in objects) {
					o.@isSelected = 'N';
				}
				viewStack.selectedIndex = 0;
				this.dirty.setDirty();
			}
			
			private function disablePlatformSelection(data:Object):Boolean
			{
				return this.dirty.isDirty();
			}
			
			private function promptToDiscardChanges():void {
				if (this.dirty.isDirty()) {
					Alert.show("Your changes have not been saved.  Discard changes?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToDiscardChanges,						
						parentApplication.iconWarning);
				}
			}
			
			private function onPromptToDiscardChanges(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					this.dirty.resetDirty();
					this.getExperimentPlatformList.send();
				}
			}
			
			private function underlyingSeqOptionChange(event:CollectionEvent):void {
				var ignore:int = 0;
				if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
					// ignore refresh and resets 
					return;
				}
				
				for each(var e:Object in event.items) {
					if (e is PropertyChangeEvent) {
						var pe:PropertyChangeEvent = PropertyChangeEvent(e);
						
						if (pe.property == "@paired") {
							if (pe.newValue == "Y") {
								this.sequencingOptionGrid.selectedItem.@pairedName = this.sequencingOptionGrid.selectedItem.@numberSequencingCycles + " cycle paired-end reads";
							} else {
								this.sequencingOptionGrid.selectedItem.@pairedName = "";
							}
						}else if (pe.property == "@single") {
							if (pe.newValue == "Y") {
								this.sequencingOptionGrid.selectedItem.@singleName = this.sequencingOptionGrid.selectedItem.@numberSequencingCycles + " cycle single-end reads";
							} else {
								this.sequencingOptionGrid.selectedItem.@singleName = "";
							}
						}         	
					}
				}
			}
			
			private function getIcon(item:Object):Class {
				if(item is XML) {
					// If icon path defined then use it
					var itemIcon:String = item.@icon;
					if(itemIcon != null && itemIcon.length > 0) {
						return IconUtility.getClass(item, itemIcon, 16, 16);
					}
				}				
				//if (this[item.@icon]){
				//	return this[item.@icon];
				//}				
				return null;				
			}	

			
		]]>
	</mx:Script>
	
	
	
	<mx:XMLListCollection id="platforms"  source="{getExperimentPlatformList.lastResult.RequestCategory}"/>
	<mx:XMLListCollection id="sampleTypes" source="{requestCategory.sampleTypes.SampleType}"/>
	<mx:XMLListCollection id="applications" source="{requestCategory.applications.Application}"/>
	<mx:XMLListCollection id="sequencingOptions" source="{requestCategory.sequencingOptions.NumberSequencingCycles}"/>
	<mx:XMLListCollection id="coreFacilities" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.CoreFacility').DictionaryEntry}"/>
	
	<mx:VBox height="100%" width="100%" id="mainBody">
		<mx:HBox width="100%"  backgroundImage="@Embed(source='../../assets/menubar.png')" backgroundSize="100%" verticalAlign="middle" height="30">
			<mx:LinkButton label="Add experiment platform" click="addPlatform()"  disabledIcon="@Embed(source='../../assets/page_add_disable.png')" icon="@Embed(source='../../assets/page_add.png')" textDecoration="underline" color="#FFFFFF"/>
			<mx:LinkButton label="Remove experiment platform" click="removePlatform()" enabled="{platformList.selectedItem != null &amp;&amp; platformList.selectedItem.@canDelete == 'Y'}"   disabledIcon="@Embed(source='../../assets/page_delete_disable.png')" icon="@Embed(source='../../assets/page_delete.png')" textDecoration="underline" color="#FFFFFF"/>
			<mx:LinkButton label="Refresh" click="requestCategory=null;this.platformList.selectedItem=null;this.theViews.selectedIndex=0;getExperimentPlatformList.send()" icon="@Embed(source='../../assets/refresh.png')" textDecoration="underline" color="#FFFFFF" />
		</mx:HBox>
		<mx:HDividedBox width="100%" height="100%" paddingLeft="4" paddingRight="4">
			<util:DisabledItemsList id="platformList" width="200" height="100%" labelField="@requestCategory" dataProvider="{platforms}" 
									itemClick="{onSelectPlatform()}" disabledFunction="disablePlatformSelection" click="promptToDiscardChanges()">
			</util:DisabledItemsList>
			<mx:ViewStack id="theViews" width="100%" height="100%">
				<mx:VBox label="blankView" width="100%" height="100%" 
						 styleName="panelBox" paddingLeft="4" paddingTop="4" 
						 paddingRight="4" paddingBottom="0"/>
				<mx:VBox width="100%" height="100%" styleName="panelBox" 
						 paddingLeft="4" paddingTop="4" paddingRight="4" paddingBottom="0" verticalGap="2">
					<mx:TabNavigator  id="theTabs" width="100%" height="100%" styleName="form" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0">
						<mx:VBox width="100%" height="100%" label="Experiment Platform" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4" verticalGap="8">
							<mx:HBox width="100%" horizontalGap="1" verticalAlign="middle">
								<mx:Label text="Name" width="80"/>
								<mx:TextInput  id="platformName"  width="100%" text="{requestCategory.@requestCategory}"  change="dirty.setDirty()"/>
								<mx:Spacer width="10"/>
								<mx:CheckBox id="isActiveCheckbox" label="Active"  click="{dirty.setDirty()}" selected="{requestCategory.@isActive == 'N' ? false : true}"/>
							</mx:HBox>
							
							<mx:HBox verticalAlign="middle" horizontalGap="1" width="100%">
								<mx:Label  text="Code" width="80"/>
								<mx:TextInput id="codeRequestCategoryField"  width="65" backgroundColor="0xffffff" text="{requestCategory.@codeRequestCategory}" editable="false"/>
							</mx:HBox>
							
							<mx:HBox width="100%" horizontalGap="1" verticalAlign="middle">
								<mx:Label text="Notes" width="80"/>
								<mx:TextInput id="notes"  width="100%" text="{requestCategory.@notes}"  change="dirty.setDirty()"/>
							</mx:HBox>
							
							<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle">
								<mx:Label  text="Sort Order" width="80"/>
								<mx:TextInput id="sortOrder"  width="40" text="{requestCategory.@sortOrder}" change="dirty.setDirty()"/>
							</mx:HBox>
							
							<mx:HBox width="100%" horizontalGap="1" verticalAlign="middle">
								<mx:Label text="Vendor" width="80"/>
								<mx:ComboBox  width="100%" 
											  dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Vendor').DictionaryEntry}" 
											  labelField="@display"
											  close="{this.dirty.setDirty();}"
											  id="vendorCombo"/>
							</mx:HBox>
							<mx:HBox width="100%" horizontalGap="1" verticalAlign="middle">
								<mx:Label text="Core Facility" width="80"/>
								<mx:ComboBox width="100%"
											 dataProvider="{coreFacilities}"
											 labelField="@display" 
											 close="{this.dirty.setDirty();}"
											 id="coreFacilityCombo"/>
							</mx:HBox>
							<mx:HBox width="100%" horizontalGap="8" verticalGap="0" verticalAlign="top" horizontalAlign="left" paddingLeft="0">
								<mx:Label text="Type" width="73"/>
								<mx:RadioButtonGroup  id="typeRadioGroup" selectedValue="{requestCategory.@type}"/>
								<mx:VBox verticalGap="1" paddingLeft="0">
									<mx:RadioButton label="Next generation sequencing" value="ILLUMINA" groupName="typeRadioGroup" click="pickType()"/>
									<mx:RadioButton label="Microarray" value="MICROARRAY" groupName="typeRadioGroup" click="pickType()"/>
									<mx:RadioButton label="Sample quality" value="QC" groupName="typeRadioGroup" click="pickType()"/>
								</mx:VBox>
								<mx:VBox verticalGap="1" paddingLeft="0">
									<mx:RadioButton label="Capillary Sequencing" value="CAPSEQ" groupName="typeRadioGroup" click="pickType()"/>
									<mx:RadioButton label="Mitochondrial D-Loop Sequencing" value="MITSEQ" groupName="typeRadioGroup" click="pickType()"/>
									<mx:RadioButton label="Fragment Analysis Panels" value="FRAGANAL" groupName="typeRadioGroup" click="pickType()"/>
									<mx:RadioButton label="Cherry Picking" value="CHERRYPICK" groupName="typeRadioGroup" click="pickType()"/>
								</mx:VBox>
							</mx:HBox>
							<mx:HBox visible="{typeRadioGroup.selectedValue == 'ILLUMINA' || typeRadioGroup.selectedValue == 'MICROARRAY'}" includeInLayout="{typeRadioGroup.selectedValue == 'ILLUMINA' || typeRadioGroup.selectedValue == 'MICROARRAY'}" width="100%" horizontalGap="8" verticalAlign="middle" id="hbox1" >
								<mx:Label id="channelLabel" text="Number of channels" width="120"/>
								<mx:NumericStepper id="numberOfChannelsStepper" minimum="1" maximum="2" value="{requestCategory.@numberOfChannels}"/>
							</mx:HBox>
							<mx:HBox width="100%" verticalAlign="middle" horizontalGap="1">
								<mx:Label text="Show for" width="80"/>
								<mx:CheckBox id="isInternalCheckbox" label="Internal Experiment Requests" click="{dirty.setDirty()}" selected="{requestCategory.@isInternal == 'Y' ? true : false}" />
								<mx:CheckBox id="isExternalCheckbox" label="External Experiments" click="{dirty.setDirty()}" selected="{requestCategory.@isExternal == 'Y' ? true : false}"/>
								<mx:Spacer width="100%"/>
							</mx:HBox>
							<!--mx:HBox width="100%" horizontalGap="1" verticalAlign="middle">
								<mx:Label text="Icon" width="80"/>
								<mx:TextInput id="theIcon" width="100%" change="{dirty.setDirty()}" text="{requestCategory.@icon}"/>
								<mx:Spacer width="10"/>
							</mx:HBox-->
							<mx:HBox width="100%" horizontalGap="1" verticalAlign="middle">
								<mx:Label text="Icon" width="80"/>
								<util:IconComboBox id="iconCombo" dataProvider="{parentApplication.expIcons..item}" labelField="@label" change="{dirty.setDirty()}"  iconFunction="getIcon"  x="10" y="10" rowCount="12"/>
								<mx:Spacer width="10"/>
							</mx:HBox>
							<mx:HBox width="100%" verticalAlign="middle" horizontalGap="0">
								<mx:Text text="Default Organism" 
										 width="80" visible="{isInternalCheckbox.selected}" />
								<mx:ComboBox width="100%" id="organismCombo"
											 dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.OrganismLite').DictionaryEntry}" 
											 labelField="@display" visible="{isInternalCheckbox.selected}" close="{this.dirty.setDirty();}"/>
							</mx:HBox>
							
							
						</mx:VBox>
						<mx:VBox  width="100%" height="100%" label="Experiment Types"  show="{showHideAppColumns()}" 
								  verticalGap="1" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4">
							<mx:HBox>
								<mx:LinkButton label="Add" styleName="linkMenuButton" 
											   enabled="{platformList.selectedItem.@canUpdate == 'Y' ? true : false}" 
											   icon="@Embed(source='../../assets/add.png')" 
											   disabledIcon="@Embed(source='../../assets/add_disable.png')" click="addExperimentType()"/>
								<mx:LinkButton label="Remove" styleName="linkMenuButton" enabled="{platformList.selectedItem.@canUpdate == 'Y' &amp;&amp; appGrid.selectedItem != null}"   icon="@Embed(source='../../assets/delete.png')" disabledIcon="@Embed(source='../../assets/delete_disable.png')" click="removeExperimentType()"/>
							</mx:HBox>
							<mx:DataGrid id="appGrid"  horizontalScrollPolicy="auto"
										 dataProvider="{applications}" editable="true"
										 width="100%" height="100%"  itemEditBegin="dirty.setDirty()">
								<mx:columns>
									<mx:DataGridColumn headerText=" "  
													   width="20"  editable="false"                      	
													   dataField="@isSelected" 
													   editorDataField="selected"
													   itemRenderer="{views.renderers.CheckBoxRenderer.create(dirty)}">			 
									</mx:DataGridColumn>
									<mx:DataGridColumn headerText="Experiment Type"  
													   itemRenderer="views.renderers.LabelActive"
													   rendererIsEditor="false"
													   width="200"
													   editable="true" dataField="@display" >
									</mx:DataGridColumn>
									<mx:DataGridColumn headerText="Theme"  
													   id="applicationThemeCol"
													   dataField="@idApplicationTheme"  
													   editorDataField="value" 
													   sortable="true" 
													   editable="true" 
													   rendererIsEditor="false"  
													   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ApplicationTheme').DictionaryEntry, '@display', '@value', '@idApplicationTheme')}"                
													   itemEditor="{views.renderers.ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ApplicationTheme').DictionaryEntry, '@display', '@value', '@idApplicationTheme', null, true)}"/>										
									<mx:DataGridColumn headerText="Seq Lib Protocols"   id="seqLibProtocolCol"  width="250"
													   itemRenderer="{views.renderers.MultiselectRendererCommon.create('Seq Lib Protocols', parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SeqLibProtocol').DictionaryEntry.(@value != '' &amp;&amp; @isActive != 'N'))}" 
													   dataField="@idSeqLibProtocols"/>
									<mx:DataGridColumn headerText="Min Insert Size" id="insertSizeMin" dataField="@avgInsertSizeFrom" editable="true"
													   visible="{typeRadioGroup.selectedValue == 'ILLUMINA'}"/>
									<mx:DataGridColumn headerText="Max Insert Size" id="insertSizeMax" dataField="@avgInsertSizeTo" editable="true"
													   visible="{typeRadioGroup.selectedValue == 'ILLUMINA'}"/>
									<mx:DataGridColumn headerText="Capture Lib Design" id="includeCapLibDesign" dataField="@hasCaptureLibDesign" itemRenderer="{views.renderers.CheckBoxRenderer.create(dirty)}"
													   visible="{typeRadioGroup.selectedValue == 'ILLUMINA'}" editorDataField="selected" editable="false"/>
									<mx:DataGridColumn headerText="Labeling Protocol"  id="labelingProtocolCol"  visible="{typeRadioGroup.selectedValue == 'MICROARRAY'}" dataField="idLabelingProtocol"  
													   editorDataField="value" sortable="true" editable="true" rendererIsEditor="false"  
													   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingProtocol').DictionaryEntry, '@display', '@value', '@idLabelingProtocolDefault')}"                
													   itemEditor="{views.renderers.ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LabelingProtocol').DictionaryEntry, '@display', '@value', '@idLabelingProtocolDefault', null, true)}"/>										
									<mx:DataGridColumn headerText="Hyb Protocol"  id="hybProtocolCol" dataField="idHybProtocol" 
													   editorDataField="value" sortable="true" editable="true" rendererIsEditor="false"   
													   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.HybProtocol').DictionaryEntry, '@display', '@value', '@idHybProtocolDefault')}"                
													   itemEditor="{views.renderers.ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.HybProtocol').DictionaryEntry, '@display', '@value', '@idHybProtocolDefault', null, true)}"/>										
									<mx:DataGridColumn headerText="Scan Protocol"  id="scanProtocolCol"  dataField="idScanProtocol"  
													   editorDataField="value" sortable="true" editable="true" rendererIsEditor="false"   
													   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ScanProtocol').DictionaryEntry, '@display', '@value', '@idScanProtocolDefault')}"                
													   itemEditor="{views.renderers.ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ScanProtocol').DictionaryEntry, '@display', '@value', '@idScanProtocolDefault', null, true)}"/>										
									<mx:DataGridColumn headerText="FE Protocol"  id="feProtocolCol"  dataField="idFeatureExtractionProtocol"  
													   editorDataField="value"  
													   sortable="true" editable="true" rendererIsEditor="false"  
													   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.FeatureExtractionProtocol').DictionaryEntry, '@display', '@value', '@idFeatureExtractionProtocolDefault')}"                
													   itemEditor="{views.renderers.ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.FeatureExtractionProtocol').DictionaryEntry, '@display', '@value', '@idFeatureExtractionProtocolDefault', null, true)}"/>										
									<mx:DataGridColumn headerText="Active"  
													   width="45"  
													   editable="false"                      	
													   dataField="@isActive" 
													   editorDataField="selected"
													   itemRenderer="{views.renderers.CheckBoxRenderer.create(dirty)}">			 
									</mx:DataGridColumn>
								</mx:columns>
							</mx:DataGrid>
						</mx:VBox>
						<mx:VBox width="100%"  height="100%" paddingLeft="4" paddingBottom="4" paddingRight="4" paddingTop="4" label="Sample Types" verticalGap="12">
							
							<mx:VBox width="100%" height="100%" verticalGap="0">
								<mx:HBox verticalAlign="middle">
									<mx:ViewStack id="selectAllStack1" width="80" paddingBottom="0" paddingTop="0">
										<mx:HBox width="100%"  paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0" verticalAlign="middle">
											<mx:LinkButton label="Select all" styleName="formLinkButton" paddingLeft="0" click="selectAll(sampleTypes, selectAllStack1)"  paddingTop="0" paddingRight="0" paddingBottom="0"/>
										</mx:HBox>
										<mx:HBox width="100%" paddingBottom="0" paddingTop="0">
											<mx:LinkButton label="Unselect all" styleName="formLinkButton" paddingLeft="0" click="unselectAll(sampleTypes, selectAllStack1)"  paddingTop="0" paddingBottom="0"/>
										</mx:HBox>			    	
									</mx:ViewStack>
									<mx:LinkButton label="Add" styleName="linkMenuButton" 
												   click="addSampleType()"
												   enabled="{platformList.selectedItem.@canUpdate == 'Y' ? true : false}" 
												   icon="@Embed(source='../../assets/add.png')" 
												   disabledIcon="@Embed(source='../../assets/add_disable.png')"/>
									
									<mx:LinkButton label="Remove" styleName="linkMenuButton"
												   click="removeSampleType()"
												   enabled="{platformList.selectedItem.@canUpdate == 'Y' &amp;&amp; sampleTypeGrid.selectedItem != null}"   
												   icon="@Embed(source='../../assets/delete.png')" 
												   disabledIcon="@Embed(source='../../assets/delete_disable.png')"/>
									
								</mx:HBox>
								<mx:DataGrid id="sampleTypeGrid" 
											 dataProvider="{sampleTypes}" 
											 editable="true"
											 width="100%" height="100%" itemEditBegin="dirty.setDirty()">
									<mx:columns>
										<mx:DataGridColumn headerText=" "  
														   width="20" 
														   editable="false"                        	
														   dataField="@isSelected" 
														   editorDataField="selected"
														   itemRenderer="{views.renderers.CheckBoxRenderer.create(dirty)}">			 
										</mx:DataGridColumn>
										<mx:DataGridColumn headerText="Sample Type" 
														   itemRenderer="views.renderers.LabelActive"
														   rendererIsEditor="false"
														   dataField="@display" editable="true" >
										</mx:DataGridColumn>
										<mx:DataGridColumn headerText="Experiment Types"  
														   itemRenderer="{views.renderers.MultiselectRendererCommon.create('Experiment Types', parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Application').DictionaryEntry.(@value != ''))}" 
														   dataField="@codeApplications" >
										</mx:DataGridColumn>
										<mx:DataGridColumn headerText="Active"  
														   width="45"  editable="false"                      	
														   dataField="@isActive" 
														   editorDataField="selected"
														   itemRenderer="{views.renderers.CheckBoxRenderer.create(dirty)}">			 
										</mx:DataGridColumn>
									</mx:columns>
								</mx:DataGrid>
							</mx:VBox>
						</mx:VBox>
						
						<mx:VBox width="100%" enabled="{typeRadioGroup.selectedValue == 'ILLUMINA'}" height="100%" label="Sequencing" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4">
							<mx:VBox width="100%" height="100%" label="Microarray" verticalGap="10">
								<mx:HBox width="100%" verticalAlign="middle" horizontalGap="0">
									<mx:Label text="Sample Index Tags" width="150"/>
									<mx:HBox>
										<mx:RadioButtonGroup id="barcodingRadioGroup"/>
										<mx:RadioButton label="Optional"  value="Y" groupName="barcodingRadioGroup" selected="{requestCategory.@isSampleBarcodingOptional == 'Y' ? true : false}"/>
										<mx:RadioButton label="Required" value="N" groupName="barcodingRadioGroup" selected="{requestCategory.@isSampleBarcodingOptional == 'Y' ? false : true}"/>
									</mx:HBox>
								</mx:HBox>
								<mx:VBox width="100%" verticalGap="0" height="100%">
									<mx:HBox verticalAlign="middle" horizontalGap="0">
										<mx:Label text="Sequencing options" width="150"/>
										
										<mx:LinkButton label="Add" styleName="linkMenuButton" enabled="{platformList.selectedItem.@canUpdate == 'Y' ? true : false}" icon="@Embed(source='../../assets/add.png')" disabledIcon="@Embed(source='../../assets/add_disable.png')" paddingLeft="0" click="addNumberSequencingCycles()"/>
										<mx:LinkButton label="Remove" styleName="linkMenuButton" enabled="{platformList.selectedItem.@canUpdate == 'Y' &amp;&amp; sequencingOptionGrid.selectedItem != null}"   icon="@Embed(source='../../assets/delete.png')" disabledIcon="@Embed(source='../../assets/delete_disable.png')" click="removeNumberSequencingCycles()"/>
										
									</mx:HBox> 
									<mx:DataGrid id="sequencingOptionGrid" editable="true"
												 dataProvider="{sequencingOptions}"
												 width="100%" height="100%"  itemEditBegin="dirty.setDirty()">
										<mx:columns>
											<mx:DataGridColumn headerText="Cycles"   
															   width="50" dataField="@display" 
															   editable="true" >
											</mx:DataGridColumn>
											<mx:DataGridColumn headerText="Single-end"  
															   width="40" 
															   editable="false"                        	
															   dataField="@single" 
															   editorDataField="selected"
															   itemRenderer="{views.renderers.CheckBoxRenderer.create(dirty)}">		
												<mx:headerRenderer>
													<mx:Component>
														<mx:Text width="40" text="Single end"/>
													</mx:Component>
												</mx:headerRenderer>
											</mx:DataGridColumn>
											<mx:DataGridColumn headerText="Name" width="120" dataField="@singleName"  >
											</mx:DataGridColumn>
											<mx:DataGridColumn headerText="Note" width="180" dataField="@singleNote"  >
											</mx:DataGridColumn>
											
											<mx:DataGridColumn headerText="Paired-end"  
															   width="40" 
															   editable="false"                        	
															   dataField="@paired" 
															   editorDataField="selected"
															   itemRenderer="{views.renderers.CheckBoxRenderer.create(dirty)}">			 
												<mx:headerRenderer>
													<mx:Component>
														<mx:Text width="40" text="Paired end"/>
													</mx:Component>
												</mx:headerRenderer>
											</mx:DataGridColumn>
											
											<mx:DataGridColumn headerText="Name" width="120" dataField="@pairedName"  >
											</mx:DataGridColumn>
											<mx:DataGridColumn headerText="Note" width="180" dataField="@pairedNote"  >
											</mx:DataGridColumn>
											
										</mx:columns>
									</mx:DataGrid>
								</mx:VBox>
								
							</mx:VBox>
							
						</mx:VBox>
					</mx:TabNavigator>
					<mx:ControlBar width="100%" horizontalAlign="right" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
						<util:DirtyNote id="dirty" />
						<mx:Button id="saveButton" label="Save"
								   click="{save()}"
								   enabled="{platformList.selectedItem.@canUpdate == 'Y' ? true : false}"
								   icon="@Embed('../../assets/action_save.gif')"  disabledIcon="@Embed(source='../../assets/save_disable.png')">
						</mx:Button>
						<mx:Button label="Close"  click="{closeWindow()}"/>
					</mx:ControlBar>
				</mx:VBox>
			</mx:ViewStack>
		</mx:HDividedBox>
	</mx:VBox>
	
</mx:TitleWindow>
