<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				layout="vertical" height="650" width="810"
				xmlns:views="views.*"
				xmlns:util="views.util.*" 
				showCloseButton="true" 
				close="{closeWindow()}"
				title="Help Edit" 
				backgroundColor="#ffffff"  alpha="1.0" >
	
	<mx:HTTPService  
		id="updateContextSensitiveHelp" 
		url="UpdateContextSensitiveHelp.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onUpdateContextSensitiveHelp(event)"
		fault="parentApplication.onFailHttpRequest('Failed to save help', event)"
		method="POST" 
		useProxy="false">
	</mx:HTTPService>

	<mx:VBox width="100%" height="100%">
		<mx:RichTextEditor  borderStyle="none"  headerHeight="0"  
							id="helpText" width="100%" height="100%"
							showControlBar="true" change="{dirty.setDirty()}"
							creationComplete="removeRichTextButtons();"
							paddingLeft="0" paddingRight="0" paddingTop="0" 
							roundedBottomCorners="false" paddingBottom="0" 
							borderThicknessRight="0" borderThicknessLeft="0" 
							borderThicknessBottom="0" borderThickness="0" 
							borderThicknessTop="0">
		</mx:RichTextEditor>
		<mx:ControlBar width="100%" horizontalAlign="right"  paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0">
			<util:DirtyNote id="dirty" />
			<mx:Button label="Preview" enabled="true" visible="true" id="previewButton" click="preview()" fontWeight="normal"/>
			<mx:Button label="Save" enabled="true" visible="true" id="saveButton" click="save()" fontWeight="normal"/>
			<mx:Button label="Cancel" enabled="true" visible="true" id="cancelButton" click="closeWindow()" fontWeight="normal"/>
		</mx:ControlBar>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import hci.flex.dictionary.DictionaryEvent;
			import hci.flex.util.DictionaryManager;
			import mx.containers.HBox;
			import mx.controls.Alert;
			import mx.controls.richTextEditorClasses.ToolBar;
			import mx.core.UIComponent;
			import mx.core.mx_internal;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;

			import views.util.ContextHelp;
			import views.util.DirtyNote;

			
			[Bindable]
			private var dictionaryManager:DictionaryManager;

			private var helpButton:ContextHelp;
			private var context1:String;
			private var context2:String;
			
			private static var CLASS_NAME:String ='hci.gnomex.model.ContextSensitiveHelp';
			
			private var isNew:Boolean;
			private var helpId:String;
			
			public function init(context1:String, context2:String, helpButton:ContextHelp) : void {
				this.helpButton = helpButton;
				this.context1 = context1;
				this.context2 = context2;
				
				dictionaryManager = parentApplication.dictionaryManager;

				if (context1 == null || context1 == '') {
					Alert.show("Invalid context specified.");
					closeWindow();
				}
				if (context2 == null) {
					context2 = '';
				}
				var helpList:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className==CLASS_NAME).DictionaryEntry.(@value != '' && @context1==context1 && @context2==context2);
				if (helpList.length() > 0) {
					helpText.htmlText = helpList[0].@helpText.toString();
					helpId = helpList[0].@idContextSensitiveHelp.toString();
					isNew = false;
				} else {
					isNew = true;
				}
			}
			
			private function closeWindow():void {
				if (dirty.isDirty()) {
					Alert.show( "Unsaved changes will be discarded.  Proceed anyway?",
						"Warning",
						(Alert.YES | Alert.NO), this, 
						onPromptToClose,						
						parentApplication.iconWarning);
				} else {
					closeImpl();
				}
			}

			private function onPromptToClose(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					closeImpl();
				}
			}

			private function closeImpl():void {
				PopUpManager.removePopUp(this);
			}
			
			private function removeRichTextButtons():void {
				this.helpText.toolbar.removeChild(helpText.fontFamilyCombo);
				/*
				this.helpText.toolbar.removeChild(helpText.colorPicker);
				this.helpText.toolbar.removeChild(helpText.fontSizeCombo);
				this.helpText.toolbar.removeChild(helpText.linkTextInput);
				*/
				// move controls to top
				var displayObj:ToolBar = this.helpText.toolbar;
				this.helpText.toolbar.parent.removeChild(displayObj);
				var hbox:HBox = new HBox();
				hbox.width=helpText.width;

				this.helpText.textArea.maxChars = 5000;
				hbox.addChild(displayObj);
				this.helpText.addChildAt(hbox, 0);
			}
			
			private function preview():void {
				helpButton.showHelpView(helpText.htmlText);
			}
			
			private function save():void {
				var currentDictAction:String = '';
				var formData:Object = new Object();
				
				formData["idContextSensitiveHelp"] = helpId;
				formData["context1"] = context1;
				formData["context2"] = context2;
				formData["helpText"] = helpText.htmlText;
				this.updateContextSensitiveHelp.send(formData);
			}

			public function onUpdateContextSensitiveHelp(event:Event):void {
				if (updateContextSensitiveHelp.lastResult.name() == "SUCCESS") {
					dictionaryManager.call("reload", CLASS_NAME);
					dirty.resetDirty();
					closeWindow();
				} else {
					mx.controls.Alert.show(updateContextSensitiveHelp.lastResult..ACTMESSAGE.@TEXT);
				}
			}
		]]>
	</mx:Script>
</mx:TitleWindow>
