<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="vertical" width="730" height="386" 
	creationPolicy="all"
	xmlns:views="views.*" 
	xmlns:util="views.util.*"
	showCloseButton="true" initialize="this.setupSampleSheetUpload();vsMain.selectedChild=intro;"
	close="{PopUpManager.removePopUp(this)}" 
	title="Upload Sample Sheet" 	 
	borderThickness="4" defaultButton="{selectFileButton}">
    <mx:VBox width="100%" height="100%">
		<mx:ViewStack id="vsMain" width="100%" height="100%">
			<mx:Canvas id="intro" width="100%" height="100%">
				<mx:VBox verticalGap="0" fontSize="10" paddingLeft="8" verticalAlign="top" styleName="form" horizontalAlign="center" paddingRight="8" width="100%" height="100%" paddingTop="8" paddingBottom="8">
					<mx:Text width="100%" height="185">
						<mx:text><![CDATA[This option allows you to upload a tab-delimited text file to populate the corresponding rows and columns of the sample view grid. To prepare the file:
							
  1. Create a spreadsheet containing the columns you wish to populate. You do not need to include all of the columns on the sample view grid - just those to be filled in.
							
  2. To enable auto-matching of the spreadsheet columns to those on the grid you may enter column headings in the first row (make sure to also click "First row contains column headings" below). Auto-matching will take place if the column headings match exactly (case and space sensitive). If headings are not provided or if they do not match then you will need to match them manually using provided dropdown lists of the available columns. 

  3. The columns are of varying data types. It is your responsibility to insure that each column of the spreadsheet is formated in accordance with the applicable field type.
]]></mx:text>
					</mx:Text>
					<mx:LinkButton textDecoration="underline"  label="(Click here for information on data type formats)" click="PopUpManager.centerPopUp(SampleSheetColumnFormats(PopUpManager.createPopUp(this, SampleSheetColumnFormats, true)))"   color="#0000FF" height="31"/>
					<mx:Text width="100%" height="36">
						<mx:text><![CDATA[  4. Once you have completed the spreadsheet it must be saved as a tab delimited text file. When the file is ready, click â€œSelect File to Upload."]]></mx:text>
					</mx:Text>
					<mx:CheckBox id="hasColNames" label="First row contains column headings" height="30"/>
					<mx:Spacer height="10"/>
					<mx:Button label="Select File to Upload" click="clickUploadFileButton()" id="selectFileButton"/>
				</mx:VBox>
			</mx:Canvas>
			<mx:Canvas id="chooseColumns" width="100%" height="100%">
				<mx:VBox fontSize="10" verticalGap="10" paddingLeft="8" verticalAlign="top" styleName="form" horizontalAlign="center" paddingRight="8" width="100%" id="vbox0" height="100%" paddingTop="8" paddingBottom="8">
					<mx:Text text="Please indicate which sample sheet column corresponds to each field. It is not necessary to select a field for a column you do not wish to populate.&#xa;" width="100%"/>
					<mx:DataGrid id="columnSelectionGrid" height="100%" width="100%" dataProvider="{fieldList}" rowHeight="30">
						<mx:columns>
							<mx:DataGridColumn headerText="Field" dataField="@fieldText" editable="false" sortable="false" width="38"/>
							<mx:DataGridColumn headerText="Type" labelFunction="getFieldTypeLabel" dataField="@fieldType" editable="false" sortable="false" width="24"/>
							<mx:DataGridColumn headerText="SampleSheetColumn" width="38"> 
								<mx:itemRenderer> 
									<mx:Component> 
										<util:SampleSheetColumnRenderer />
									</mx:Component> 
								</mx:itemRenderer> 
							</mx:DataGridColumn>							
						</mx:columns>
					</mx:DataGrid>
					<mx:Button label="Populate Fields" click="clickPopulateFieldsButton()"  id="button0"/>
				</mx:VBox>
			</mx:Canvas>
			<mx:Canvas id="reportResults" label="" width="100%" height="100%">
				<mx:VBox fontSize="10" verticalGap="0" paddingLeft="8" verticalAlign="top" styleName="form" horizontalAlign="center" paddingRight="8" width="100%" height="100%" paddingTop="8" paddingBottom="8">
					<mx:Text text="Upload Results:" width="100%"/>
					<mx:TextArea id="reportText" width="100%" height="281" fontFamily="_typewriter" fontSize="11"  backgroundColor="#FFFFFF" verticalScrollPolicy="on"/>
					<mx:Spacer height="10"/>
					<mx:Button label="Done" click="PopUpManager.removePopUp(this)"/>
				</mx:VBox>				
			</mx:Canvas>
		</mx:ViewStack>
		
	</mx:VBox>

	  <mx:HTTPService  
	    id="getSampleSheetUploadURL" 
	    url="UploadSampleSheetURLServlet.gx"
	    resultFormat="e4x"
	    showBusyCursor="true" 
	    result="onGetSampleSheetUploadURL(event)" 
		fault="parentApplication.onFailHttpRequest('Failed to get sample sheet upload URL', event)"
	    method="POST"
	    useProxy="false">
	  </mx:HTTPService>	    	

	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			
			import mx.collections.HierarchicalCollectionView;
			import mx.collections.XMLListCollection;
			import mx.controls.AdvancedDataGrid;
			import mx.controls.Alert;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import views.experiment.TabSamplesView;
			import views.renderers.CheckBoxRenderer;
			import views.renderers.ComboBox;
			import views.renderers.MultiselectRenderer;
			import views.renderers.URLRenderer;
			import views.util.AdvancedDataGridColumnWithType;
			import views.util.AnnotationAdvancedDataGridColumn;
			import views.util.SampleSheetColumnFormats;

			
			private var uploadFR:FileReference;
			public var uploadSampleSheetURL:String;
			private var docTypes:FileFilter;
			private var	sampleSheetXML:XML;	
			private var tabSamplesView:TabSamplesView;

			[Bindable]
			private var fieldList:XMLListCollection = new XMLListCollection();
			
			[Bindable]
			public var sampleSheetColumnList:XMLListCollection = new XMLListCollection();

			
			public function getSSColumnLabel(item:XML, col:DataGridColumn):String {
				var displayText:String = "";
				for each (var node : XML in sampleSheetColumnList){
					if(node.@data == item.@selectedSSColumn) {
						displayText = node.@label;
						break;
					}
				}
				return displayText;
			}			
			//public function init(showCCNumberField:Boolean, isSubmitExperiment:Boolean):void {
			public function init(tabSamplesView:TabSamplesView):void {
				this.tabSamplesView = tabSamplesView;
					
				//add the event handler for the risk level change
				this.addEventListener(SampleSheetColumnEvent.CHANGE, onSampleSheetColumnChange);
			}
			
			//SampleSheetColumnEvent.CHANGE is dispatched by the item renderer
			private function onSampleSheetColumnChange (event:SampleSheetColumnEvent):void {
				//the event contains an object from the DataProdider, find the index based on that
				var dpTargetIndex:int = fieldList.getItemIndex(event.item);
				//after finding the index, change the column within the object inside the fieldList to the new column
				var dpTargetObject:Object = fieldList.getItemAt(dpTargetIndex);
				dpTargetObject.@selectedSSColumn = event.ssColumn;
				//update the fieldList data after the event
				fieldList.refresh();
			}
			
			public function setupSampleSheetUpload():void {
				uploadSampleSheetURL = null;
				getSampleSheetUploadURL.send();		
			}
			
			private function onGetSampleSheetUploadURL(event:ResultEvent):void {
				if (getSampleSheetUploadURL.lastResult.name() == "UploadSampleSheetURL") {
					uploadSampleSheetURL = getSampleSheetUploadURL.lastResult.@url;
				}
			}				
				
			private function clickUploadFileButton():void {
				if(uploadSampleSheetURL != null) {
					docTypes = new FileFilter("Documents (*.txt)", "*.txt"); 
					uploadFR = new FileReference;
					uploadFR.addEventListener(Event.SELECT, uploadSampleSheetSelectHandler); 
					uploadFR.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, uploadSampleSheetCompleteHandler); 
					uploadFR.addEventListener(SecurityErrorEvent.SECURITY_ERROR, uploadSecurityErrorHandler);
					uploadFR.addEventListener(HTTPStatusEvent.HTTP_STATUS, uploadHttpStatusHandler);
					uploadFR.addEventListener(IOErrorEvent.IO_ERROR, uploadIoErrorHandler);
					uploadFR.browse([docTypes]);					
				}
				else {
					Alert.show("Error: the upload URL has not been retrieved.");
				}
			}

			
			private function clickPopulateFieldsButton():void {
				
				reportText.text = formatColumns("Row", "SS Col", "Grid Col", "Status");			
				
				var ssRowList:XMLList = sampleSheetXML.SampleSheetData.Row;
				var ssRowCount:int = 1;
				var sampleGridDataRowsCount:int = 0;
				var sampleGridDataRows:XMLListCollection = null;
				if(this.tabSamplesView.samplesGrid.dataProvider is HierarchicalCollectionView) {
					sampleGridDataRows = XMLListCollection(HierarchicalCollectionView(this.tabSamplesView.samplesGrid.dataProvider).source);					
				} else {
					sampleGridDataRows = XMLListCollection(this.tabSamplesView.samplesGrid.dataProvider);
				}
				for each (var ssRowItem:XML in ssRowList) {				
					if(hasColNames.selected && ssRowCount==1) {
						// Skip row 1 if it consists of column names
						ssRowCount++;
						continue; 
					}				
					for each (var node : XML in fieldList){
						var reportStatus:String = "Success";
						var writeThisField:Boolean = true;
						var thisDataField:String = node.@dataField;
						if(thisDataField.length > 0 && thisDataField.charAt(0) == '@') {
							// Strip off @ if it's there -- not needed for this action
							thisDataField = thisDataField.substr(1);
						}
						var ssColumnForThisField:int = node.@selectedSSColumn;
						ssColumnForThisField--;
						if(ssColumnForThisField >= 0) {
							var ssColList:XMLList = ssRowItem.Column;
							if(ssColumnForThisField >= ssColList.length()) {
								continue;	// Skip this column if it doesn't exist.
							}
							var ssColItem:XML = ssColList[ssColumnForThisField];
							var ssColItemValue:String = ssColItem.@Value;
							if(thisDataField == "label") {
								// Special handling for label field -- expect cy3 or cy5
								if(ssColItemValue.length > 0 && !(ssColItemValue == 'cy3' || ssColItemValue == 'cy5')) {
									writeThisField = false;
									reportStatus = "Label. Incorrect text: " + ssColItemValue;									
								}
							}
							if(node.@fieldType == "URL" || node.@fieldType == "MOPTION") {
								// For these types strip beginning, ending quotation marks if present
								if(ssColItemValue.length > 0 && ssColItemValue.charAt(0) == '"') {
									ssColItemValue = ssColItemValue.substr(1);
								}
								if(ssColItemValue.length > 0 && ssColItemValue.charAt(ssColItemValue.length-1) == '"') {
									ssColItemValue = ssColItemValue.substr(0, ssColItemValue.length-1);
								}
							}
							if(node.@fieldType == "OPTION") {
								var optionFound:Boolean = false;
								// If option field then need to find dropdown value corresponding to the label that has been stored in the spreadsheet
								for each(var col:AdvancedDataGridColumn in tabSamplesView.samplesGrid.columns) {
									if (col.dataField == node.@dataField) {
										var thisItemRenderer:mx.core.ClassFactory = mx.core.ClassFactory(col.itemRenderer);
										if(thisItemRenderer != null) {
											var thisDataProvider:XMLList = thisItemRenderer.properties.dataProvider;
											var thisLabelField:String = thisItemRenderer.properties.labelField;	
											if(thisLabelField.length > 0 && thisLabelField.charAt(0) == '@') {
												// Strip off @ if it's there -- not needed for this action
												thisLabelField = thisLabelField.substr(1);
											}
											var thisValueField:String = thisItemRenderer.properties.valueField;
											if(thisValueField.length > 0 && thisValueField.charAt(0) == '@') {
												// Strip off @ if it's there -- not needed for this action
												thisValueField = thisValueField.substr(1);
											}
											if(thisDataProvider != null) {
												for each (var dataProviderItem:XML in thisDataProvider) {
													if(dataProviderItem.@[thisLabelField] == ssColItemValue) {
														ssColItemValue = dataProviderItem.@[thisValueField];
														optionFound = true;
													}
												}												
											}											
										}
									}
								}
								if (!optionFound) {
									writeThisField = false;
									reportStatus = "Dropdown. No selection found for: " + ssColItemValue;
								}
							}
							if(node.@fieldType == "MOPTION") {
								// If multiple option field then need to find value corresponding
								// to the label(s) that has/have been stored in the spreadsheet
								var params:Array = ssColItemValue.split(",");
								var paramsFoundCnt:int = 0;								
								var options:XMLList = parentDocument.getSampleCharacteristicOptions(node.@dataField.substr(6));
								ssColItemValue = "";
								var notFoundCnt:int = 0;
								for each (var thisParam:String in params) {
									// Loops through one or multiple labels stored in the spreadsheet
									thisParam = trimSpaces(thisParam);
									var mOptionFound:Boolean = false;
									for each (var optionItem:XML in options) {
										// Compares against Multi Select options and matches up with corresponding values
										if(optionItem.@option == thisParam) {
											mOptionFound = true;
											if(paramsFoundCnt > 0) {
												ssColItemValue = ssColItemValue + ",";
											}
											ssColItemValue = ssColItemValue + optionItem.@idSampleCharacteristicOption;
											paramsFoundCnt++;
											break;
										}
									}
									if(!mOptionFound) {
										if(notFoundCnt == 0) {
											reportStatus = "Dropdown (multi). No selection found for: " + thisParam;	
										} else {
											reportStatus += ", " + thisParam;
										}
										notFoundCnt;
									}
								}
								if(paramsFoundCnt == 0) {
									writeThisField = false;
								}
							}
							if(node.@fieldType == "CHECK") {
								if(ssColItemValue != null) {
									if(ssColItemValue.length > 0) {
										if(ssColItemValue != "Y" && ssColItemValue != "N") {
											reportStatus = "Checkbox. Unexpected value: " + ssColItemValue;
											writeThisField = false;
										}
									}
								} else {
									writeThisField = false;
								}
							}
							
							if(writeThisField) {
								sampleGridDataRows[sampleGridDataRowsCount].@[thisDataField] = ssColItemValue;
							}
									
							
							var reportStr:String = "" + sampleGridDataRowsCount + " " 
								+ node.@selectedSSColumn + " " 
								+ node.@fieldText + " "
								+ "(Status)\n";
							reportText.text += formatColumns(""+sampleGridDataRowsCount, node.@selectedSSColumn, node.@fieldText, reportStatus);								
						} 
												
					} // End traverse field list
					sampleGridDataRowsCount++;
					ssRowCount++;  
					if(sampleGridDataRowsCount >= sampleGridDataRows.length) {
						if(ssRowCount <= ssRowList.length()) {
							tabSamplesView.addSample();
						}
					}
				} // End traverse ss row
				sampleGridDataRows.refresh();
				tabSamplesView.checkSamplesCompleteness();
				vsMain.selectedChild=reportResults;
			}
						
			public static function formatColumns(Row:String, SS_Col:String, Grid_Col:String, Status:String):String {
				var output:String = addWhitespace(Row, 5) + addWhitespace(SS_Col, 8)
				                    + addWhitespace(Grid_Col,24) + addWhitespace(Status, 60) + "\n";
				return output;
			}
			
			public static function addWhitespace(inputStr:String, count:int):String {
				var output:String = "";
				if (inputStr != null) {
					if(inputStr.length > count) {
						inputStr = inputStr.substr(0, count-3) + "..";
					}
					output = inputStr;
					if(output.length < count) {
						// Fill in any remaining spaces between end of string and count
						for ( var i:int = 0; i < count-inputStr.length; i++ ) {
							output += " ";
						}
					}
				}
				return output;
			}

			
			public static function trimSpaces( original:String ):String {
				var characters:Array = original.split("");
				
				for ( var i:int = 0; i < characters.length; i++ ) {
					if (characters[i] == ' ') {
						characters.splice( i, 1 );
						i--;
					} else {
						break;
					}
				}
				return characters.join("");
			}
			
			private function uploadSampleSheetSelectHandler(event:Event):void { 
				var request:URLRequest = new URLRequest(uploadSampleSheetURL); 
				request.method = URLRequestMethod.POST; 

				var variables:URLVariables = new URLVariables(); 
				if(hasColNames.selected) {
					variables.hasColumnNames = "1"; 
				} else {
					variables.hasColumnNames = "0"; 
				}
				request.data = variables; 
			
				uploadFR.upload(request); 		
			} 
			
			private function uploadSampleSheetCompleteHandler(event:DataEvent):void { 
				
				if (event.data.indexOf("<SampleSheet>") >= 0) {
					var cols:String = "";
					
					sampleSheetXML = new XML(event.data); 
					
					sampleSheetColumnList = new XMLListCollection(sampleSheetXML.ColumnSelector.ColumnSelectorItem);

					// Build the contents of the columns selection list
					for each(var col:AdvancedDataGridColumn in this.tabSamplesView.samplesGrid.columns) {
						if (col.dataField != null && col.dataField == '@multiplexGroupNumberDisplay') {
							continue;
						}
						if (col.dataField != null && col.dataField == '@codeConcentrationUnit') {
							continue;
						}
						if (col.headerText == "") {
							continue;	// This skips row number column
						}
						if (col.visible && col.dataField != null) {
							var fieldType:String = "TEXT";
							if(col is AnnotationAdvancedDataGridColumn) {
								fieldType = AnnotationAdvancedDataGridColumn(col).characteristicType;
							}
							if(col is AdvancedDataGridColumnWithType) {
								fieldType = AdvancedDataGridColumnWithType(col).characteristicType;
							}
							
							var selectedSSColumn:String = "0";
							
							// If the sample sheet column header exactly matches the sample view column
							// header then select that column in the sample sheet dropdown by default
							for each (var node : XML in sampleSheetColumnList){
								if(node.@label == col.headerText) {
									selectedSSColumn = node.@data;
									break;
								}
							}													
							
							var emptyNode:XML = new XML("<FieldItem " +
								" dataField='" + col.dataField + "' fieldText='" + col.headerText +
								"' fieldType='" + fieldType + "' selectedSSColumn='" + selectedSSColumn + "'/>");
							fieldList.addItem(emptyNode);
						}
					}					
					vsMain.selectedChild=chooseColumns;
					
				} else {
					var errorMessage:String = event.text;
					var removeHTML:RegExp = new RegExp("<[^>]*>", "gi");
					var errorMessageSafe:String = errorMessage.replace(removeHTML, "");
					Alert.show(errorMessageSafe, "Upload Error");
					
				}
			
			} 	
		
			// only called if there is an  error detected by flash player browsing or uploading a file   
			private function uploadIoErrorHandler(event:IOErrorEvent):void{
				mx.controls.Alert.show("File \n" + event.target.name + "\n did not upload.  Please contact GNomEx support.",
					"Upload IO error",0);
			}    
			// only called if a security error detected by flash player such as a sandbox violation
			private function uploadSecurityErrorHandler(event:SecurityErrorEvent):void{
				mx.controls.Alert.show(String(event),"Security Error",0);
			}

			//  after a file upload is complete or attemted the server will return an http status code, code 200 means all is good anything else is bad.
			private function uploadHttpStatusHandler(event:HTTPStatusEvent):void {
				if (event.status == 200){
				} else if (event.status == 900) {
					mx.controls.Alert("File \n" + event.target.name + "\n did not upload. The GNomEx property 'temp_directory' is not specified.  Please contact GNomEx support.");
				} else if (event.status == 901) {
					mx.controls.Alert("File \n" + event.target.name + "\n did not upload. The temp directory is invalid.  Please contact GNomEx support.");
				} else if (event.status == 902) {
					mx.controls.Alert("File \n" + event.target.name + "\n did not upload due to insufficent permissions.  Please contact GNomEx support.");
				} else {
				  	mx.controls.Alert.show("File \n" + event.target.name + "\n did not upload.  Please contact GNomEx support.",
						"HTTP status",0);
				} 
			}
			
			// Label function to display field type.
			//   Types:
			//     CHECK       Checkbox
			//     MOPTION     Dropdown (multi. sel.)
			//     OPTION      Dropdown (single sel.)
			//     TEXT		   Text
			//     URL         URL
			public function getFieldTypeLabel(item:XML, col:DataGridColumn):String {
				var displayText:String = "Text";
				if(item.@fieldType == 'CHECK') {
					displayText = "Checkbox";								
				}
				if(item.@fieldType == 'MOPTION') {
					displayText = "Dropdown (multi. sel.)";								
				}
				if(item.@fieldType == 'OPTION') {
					displayText = "Dropdown (single sel.)";								
				}
				if(item.@fieldType == 'URL') {
					displayText = "URL";								
				}					
				return displayText;
			}			

		]]>
	</mx:Script>
</mx:TitleWindow>
