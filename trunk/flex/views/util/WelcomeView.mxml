<?xml version="1.0" encoding="utf-8"?> 
<mx:Canvas styleName="panelWelcomeBox"  xmlns:mx="http://www.adobe.com/2006/mxml"   
		   xmlns:views="views.*"    
		   xmlns:util="views.util.*"   
		   creationPolicy="all" width="100%" height="100%"  		
		   show="init()"
		   showEffect="{parentApplication.fadeIn}" hideEffect="{parentApplication.fadeOut}" >
	<mx:states> 
		<mx:State name="GuestState">
		</mx:State>
		<mx:State name="BillingAdminState" basedOn="AdminState">
			<mx:SetProperty target="{text1}" name="text" value="{'Welcome ' + parentApplication.userName + '   (billing admin privileges)'}"/>
		</mx:State>
		<mx:State name="AdminState">
			<mx:SetProperty target="{text1}" name="text" value="{'Welcome ' + parentApplication.userName + '   (admin privileges)'}"/>
		</mx:State>
		<mx:State name="UserNonSubmitterState">
			<mx:SetProperty target="{text1}" name="text" value="{'Welcome ' + parentApplication.userName}"/>
			<mx:AddChild relativeTo="{spacer2}" position="before"> 
				<mx:Text text="Restricted access - Please contact support to be added to a lab group"
						 styleName="welcomeUserLabel" id="text3" color="#132A9F" />
			</mx:AddChild>
		</mx:State>
		<mx:State name="UserState">
		</mx:State>
		<mx:State name="ExternalUserState" basedOn="UserState">
		</mx:State>
		<mx:State name="AdminESState" basedOn="AdminState">
		</mx:State>
		<mx:State name="UserESState" basedOn="UserState">
		</mx:State>
		<mx:State name="ExternalUserESState" basedOn="ExternalUserState">
		</mx:State>
		<mx:State name="UserNonSubmitterESState" basedOn="UserNonSubmitterState">
			<mx:SetProperty target="{text1}" name="text" value="{'Welcome ' + parentApplication.userName}"/>
		</mx:State>
		<mx:State name="UnivGuestState" basedOn="UserNonSubmitterState">
			<mx:SetProperty target="{text3}" name="text" value="Restricted - For additional access, please sign up for a GNomEx user account "/>
		</mx:State>
		<mx:State name="UnivGuestESState" basedOn="UserNonSubmitterESState">
			<mx:SetProperty target="{text1}" name="text" value="{'Welcome ' + parentApplication.userName + '   (university guest access)'}"/>
		</mx:State>
		<mx:State name="AdminDNASeqState" basedOn="AdminState">

		</mx:State>
		<mx:State name="AdminSuperState" basedOn="AdminDNASeqState">
			<mx:SetProperty target="{text1}" name="text" value="{'Welcome ' + parentApplication.userName + '   (super admin privileges)'}"/>
		</mx:State>
		<mx:State name="BillingAdminDNASeqState" basedOn="AdminDNASeqState">
			<mx:SetProperty target="{text1}" name="text" value="{'Welcome ' + parentApplication.userName + '   (billing admin privileges)'}"/>
		</mx:State>
	</mx:states>
	<mx:Script>
		<![CDATA[
			import hci.flex.dictionary.DictionaryEditor;
			
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			import views.admin.AlignmentProfileWindow;
			import views.admin.BillingAccountFieldsConfigurationWindow;
			import views.admin.PropertyWindow;
			import views.experiment.ExperimentEditView;
			import views.user.EditBillingAcctWindow;
			
			public function checkDirty():void {
			}
			
			public function init():void {
				checkSecurity();
			}
			
			public function checkSecurity():void {
				if (parentApplication.currentState == "GuestState") {
					if (parentApplication.isUniversityOnlyUser) {
						this.currentState = parentApplication.isExternalDataSharingSite ? "UnivGuestESState" : "UnivGuestState"
					} else {
						this.currentState = "GuestState";
					}
				} else if (parentApplication.isAdminState) {
					if (parentApplication.isExternalDataSharingSite) {
						currentState = "AdminESState";
					} else if (parentApplication.isSuperAdmin) {
						currentState = "AdminSuperState"
					} else if (parentApplication.isCoreDNASeq) {
						currentState = "AdminDNASeqState"
					} else {
						currentState = "AdminState";
					}
				} else if (parentApplication.isBillingAdminState) {
					if (parentApplication.isExternalDataSharingSite) {
						currentState = "AdminESState";
					} else if (parentApplication.isCoreDNASeq) {
						currentState = "BillingAdminDNASeqState"
					} else {
						currentState = "BillingAdminState";
					}
				} else if (parentApplication.currentState == "UserNonSubmitterState")  {
					currentState = parentApplication.isExternalDataSharingSite ? "UserNonSubmitterESState" : "UserNonSubmitterState";						
				} else if (parentApplication.isExternalUser)  {
					currentState = parentApplication.isExternalDataSharingSite ? "ExternalUserESState" : "ExternalUserState";
				} else {
					currentState = parentApplication.isExternalDataSharingSite ? "UserESState" : "UserState";
				}
			}
			
			public function submitRequest():void {
				// If a request is currently loaded then make sure to reinitialze if changing between internal and external
				if(this.parentApplication.submitRequestView.request != null && !this.parentApplication.isInternalExperimentSubmission) {
					this.parentApplication.submitRequestView.startNewRequest();
				}
				this.parentApplication.isInternalExperimentSubmission = true;
				this.parentApplication.theViews.selectedChild = this.parentApplication.submitRequestView;
				// If new experiment then initialize ShowCCNumber checkbox
				this.parentApplication.submitRequestView.showCCNumberColumn = "N";
				
				// reset stuff for clinical research integration
				this.parentApplication.submitRequestView.setDefaultRequestCategory(null, null);
			}
			
			private function reviewOrders():void {
				this.parentApplication.theViews.selectedChild = this.parentApplication.navOrderView;
			}
			
			private function fillPlates( buildState:String ):void {
				this.parentApplication.theViews.selectedChild = this.parentApplication.navPlateView;
				callLater ( function():void {
					parentApplication.navPlateView.removeRun();
					parentApplication.navPlateView.toggleBuildState( buildState );
					parentApplication.navPlateView.switchToNewState();
				});
			}
			
			private function reviewRuns():void {
				this.parentApplication.theViews.selectedChild = this.parentApplication.navRunView;
			}
			
			private function reviewResults():void {
				this.parentApplication.theViews.selectedChild = this.parentApplication.navDataView;
			}
			
			public function submitExternalExperiment():void {
				// If a request is currently loaded then make sure to reinitialze if changing between internal and external
				if(this.parentApplication.submitRequestView.request != null && this.parentApplication.isInternalExperimentSubmission) {
					this.parentApplication.submitRequestView.startNewRequest();
				}
				this.parentApplication.isInternalExperimentSubmission = false;
				this.parentApplication.theViews.selectedChild = this.parentApplication.submitRequestView;
				// If new experiment then initialize ShowCCNumber checkbox
				this.parentApplication.submitRequestView.showCCNumberColumn = "N";
				
				// reset stuff for clinical research integration
				this.parentApplication.submitRequestView.setDefaultRequestCategory(null, null);
			}
			
			private function amendRequest():void {
				this.parentApplication.theViews.selectedChild = this.parentApplication.amendRequestView;
			}
			private function showExperiments():void {
				this.parentApplication.navExperimentView.shortcutToExperimentListTab = true;
				this.parentApplication.theViews.selectedChild = this.parentApplication.navExperimentView;
			}
			private function showExperimentDownloads():void {
				this.parentApplication.navExperimentView.shortcutToDownloadTab = true;
				this.parentApplication.theViews.selectedChild = this.parentApplication.navExperimentView;
			}
			private function showAnalysis():void {
				this.parentApplication.navAnalysisView.shortcutToAnalysisListTab = true;
				this.parentApplication.theViews.selectedChild = this.parentApplication.navAnalysisView;
			}
			private function showDataTracks():void {
				this.parentApplication.theViews.selectedChild = this.parentApplication.navDataTrackView;
			}
			private function showAnalysisDownloads():void {
				this.parentApplication.navAnalysisView.shortcutToDownloadTab = true;
				this.parentApplication.theViews.selectedChild = this.parentApplication.navAnalysisView;
			} 
			private function showProtocols():void {
				this.parentApplication.theViews.selectedChild = this.parentApplication.protocolsView;
			}	
			
			
			private function changePassword():void {
				parentApplication.showChangePasswordAfterLogin();
			}
			
			private function showAdvancedSearch():void {				
				parentApplication.showSearch();
			}
			private function showUserPublicView():void {				
				parentApplication.showUserPublicView();
			}		
			private function showBilling():void {
				this.parentApplication.theViews.selectedChild = this.parentApplication.navBillingView;
			}
			private function showUsersAndGroups():void {
				this.parentApplication.theViews.selectedChild = this.parentApplication.navUsersView;
			}
			public function showWorkAuthForm():void {
				parentApplication.showWorkAuthWindow();
				/*
				var wa:EditBillingAcctWindow = EditBillingAcctWindow(PopUpManager.createPopUp(this, EditBillingAcctWindow, true));
				wa.isEdit = false;
				wa.ba = new XML("<BillingAccount " +
					" idBillingAccount='BillingAccount0'" +
					" accountName=''" +
					" idCoreFacility=''" +
					" expirationDateOther=''" + 
					" startDateOther=''" +
					" accountNumberBus=''" + 
					" accountNumberOrg=''" + 
					" accountNumberFund=''" + 
					" accountNumberActivity=''" + 
					" accountNumberProject=''" +  
					" accountNumberAccount=''" + 
					" accountNumberAu=''" + 
					" accountNumberYear=''" +
					" totalDollarAmountDisplay=''" +
					" shortAcct=''" +
					" custom1=''" +
					" custom2=''" +
					" custom3=''" +
					" isDirty='Y'" +
					" isPO='N'" +
					" submitterEmail='" + parentApplication.getUserEmail() + "'" +
					" isApproved='N'" +
					" isSelectedPeerReviewedFunding='false'" + 
					"/>");
				PopUpManager.centerPopUp(wa);*/
			}			       
			private function showDictionaries():void {
				parentApplication.showDictionaries();				
			}
			private function showBroadcastEmailWindow():void {
				var broadcastEmailWindow:BroadcastEmailWindow = BroadcastEmailWindow(PopUpManager.createPopUp(this, BroadcastEmailWindow, true));
				PopUpManager.centerPopUp(broadcastEmailWindow);
			}			
			
			private function showBillingAccountFields():void {
				var w:BillingAccountFieldsConfigurationWindow = BillingAccountFieldsConfigurationWindow(PopUpManager.createPopUp(this, BillingAccountFieldsConfigurationWindow, true));
				PopUpManager.centerPopUp(w);
			}
			
			private function showPropertyWindow():void {
				var configWindow:PropertyWindow = PropertyWindow(PopUpManager.createPopUp(parentApplication.theBody, PropertyWindow, true));
				PopUpManager.centerPopUp(configWindow);
				
			}
			
			private function showOrganismWindow():void {
				var configWindow:OrganismsWindow = OrganismsWindow(PopUpManager.createPopUp(parentApplication.theBody, OrganismsWindow, true));
				PopUpManager.centerPopUp(configWindow);
				
			}
			
			private function showIScanChipWindow():void {
				var configWindow:IScanChipWindow = IScanChipWindow(PopUpManager.createPopUp(parentApplication.theBody, IScanChipWindow, true));
				PopUpManager.centerPopUp(configWindow);
				
			}
			
			private function showAlignmentProfileWindow():void {
				var apWindow:AlignmentProfileWindow = AlignmentProfileWindow(PopUpManager.createPopUp(parentApplication.theBody, AlignmentProfileWindow, true));
				PopUpManager.centerPopUp(apWindow);				
			}
			
			private function showExperimentPlatformWindow():void {
				var platformWindow:ExperimentPlatformWindow = ExperimentPlatformWindow(PopUpManager.createPopUp(parentApplication.theBody, ExperimentPlatformWindow, true));
				PopUpManager.centerPopUp(platformWindow);
				
			}
			
			private function showUsageWindow():void {
				this.parentApplication.theViews.selectedChild = this.parentApplication.navUsageView;
			}
			
			private function openPurchaseSuppliesLink(event:MouseEvent):void{
				var url:URLRequest = new URLRequest(parentApplication.getProperty(parentApplication.PROPERTY_PURCHASE_SUPPLIES_URL));
				url.method = URLRequestMethod.POST;
				navigateToURL(url, '_blank');
			}
			
		]]> 
	</mx:Script>
	
	<mx:VBox    
		width="100%" height="100%"  
		verticalAlign="top" horizontalAlign="center"  
		paddingRight="6" paddingLeft="6" paddingBottom="4" verticalGap="1" paddingTop="6" id="vbox10">

		<mx:HBox width="100%" paddingTop="4" verticalAlign="middle">
			<mx:Text  text="{'Welcome ' + parentApplication.userName}" styleName="welcomeLabel" left="8" top="8" id="text1"/>
			<mx:Spacer width="100%" id="spacer1"/>
		</mx:HBox>
		<mx:Spacer height="40" id="spacer2"/>
		<mx:VBox width="400" paddingBottom="2" paddingTop="2" id="vbox15" height="80" paddingLeft="2" paddingRight="2">
			<mx:VBox   visible="{parentApplication.bulletin != ''}" backgroundColor="#FDFCA6" backgroundAlpha="1" id="vbox11" width="100%" height="100%" borderStyle="outset" fontSize="11" textDecoration="none" fontStyle="normal" verticalAlign="middle"  horizontalAlign="center" borderColor="#000000" borderThickness="4" paddingTop="0" paddingRight="4" paddingLeft="4" paddingBottom="0">
				<mx:Text text="{parentApplication.bulletin}" fontSize="12" fontStyle="normal"  textAlign="left" height="100%"   id="text4" width="100%"/>  			
			</mx:VBox>
		</mx:VBox>
		<mx:Spacer  height="100%"/>
		<mx:Text text="{'Session started ' + parentApplication.loginDateTime}" styleName="welcomeSessionLabel" width="100%" textAlign="right"/>
	</mx:VBox>
</mx:Canvas>