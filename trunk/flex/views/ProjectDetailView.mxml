<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" styleName="form">

<mx:HTTPService  
    id="saveProject" 
    url="http://localhost/gnomex/SaveProject.gx"
    destination="saveProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onSaveProject(event)"
    fault="onSaveProjectFailed(event)"
    method="POST"
    useProxy="false">
</mx:HTTPService>

<mx:HTTPService  
    id="deleteProject" 
    url="http://localhost/gnomex/DeleteProject.gx"
    destination="deleteProject"
    resultFormat="e4x"
    showBusyCursor="true"
    result="onDeleteProject(event)"
    fault="onDeleteProjectFailed(event)"
    method="POST"
    useProxy="false">
</mx:HTTPService>
  
<mx:Script>
	<![CDATA[
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		
		private var closeWindowAfterSave:Boolean = false;
		public var fromSubmitRequestWindow:Boolean = false;
		
		
		
		public function checkSecurity():void {
			if (parentApplication.navExperimentView.selectedProject == null) {
				return;
			}
			if (parentApplication.navExperimentView.selectedProject.@canUpdateVisibility != "Y") {
				isVisibleToMembers.enabled = false;
				isVisibleToMembersAndCollaborators.enabled = false;
				isVisibleToPublic.enabled = false;
			}else {
				isVisibleToMembers.enabled = true;
				isVisibleToMembersAndCollaborators.enabled = true;
				isVisibleToPublic.enabled = true;
			}
			
			if (parentApplication.navExperimentView.selectedProject.@canUpdate != "Y") {
				projectName.editable = false;
				projectName.enabled = false;
				projectDescription.editable = false;
				projectDescription.enabled = false;
			} else {
				projectName.editable = true;
				projectName.enabled = true;
				projectDescription.editable = true;
				projectDescription.enabled = true;
			}
			if (parentApplication.navExperimentView.selectedProject.@canUpdate == "Y") {
				parentDocument.saveProjectButton.visible = true;
			} else{
				parentDocument.saveProjectButton.visible = false;
			}
			
			if (parentApplication.navExperimentView.selectedProject.@canDelete == "Y") {
				parentApplication.navExperimentView.deleteProjectButton.visible = true;
			} else{
				parentApplication.navExperimentView.deleteProjectButton.visible = false;
			}
		}
		
		public function sortExperimentDesigns(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var ed1:String = obj1.@experimentDesign;
				var ed2:String = obj2.@experimentDesign;
				
				if (ed1 == 'Other') {
					return 1;
				} else if (ed2 == 'Other') {
					return  -1;
				} else {
					if (ed1 < ed2) {
						return -1;
					} else if (ed1 > ed2) {
						return 1;
					} else {
						return 0;
					}
				}			
				
			}
		}
		public function sortExperimentFactors(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var ef1:String = obj1.@experimentFactor;
				var ef2:String = obj2.@experimentFactor;
				if (ef1 == 'Other') {
					return 1;
				} else if (ef2 == 'Other') {
					return  -1;
				} else  {
					if (ef1 < ef2) {
						return -1;
					} else if (ef1 > ef2) {
						return 1;
					} else {
						return 0;
					}
				}				
				
			}
		}
		

		
		public function addProject():void {
			closeWindowAfterSave = true;
			parentApplication.navExperimentView.selectedProject.@idLab = parentDocument.labCombo.selectedItem.@idLab;
			save();
		}
		
		public function save():void {
			parentApplication.navExperimentView.selectedProject.@name = projectName.text;
			parentApplication.navExperimentView.selectedProject.@description = projectDescription.text;
			
			if (isVisibleToMembers.selected) {
				parentApplication.navExperimentView.selectedProject.@codeVisibility = 'MEM';
			} else if (isVisibleToMembersAndCollaborators.selected) {
				parentApplication.navExperimentView.selectedProject.@codeVisibility = 'MEMCOL';
			} else if (isVisibleToPublic.selected) {
				parentApplication.navExperimentView.selectedProject.@codeVisibility = 'PUBLIC';
			} 
			
			var params:Object = new Object();
			params.projectXMLString = parentApplication.navExperimentView.selectedProject.toXMLString();
			params.parseEntries = 'Y';
			saveProject.send(params);
		}
		
		public function promptToDeleteProject():void {
			Alert.show("Delete project " + parentApplication.navExperimentView.selectedProject.@name + "?", 
						null, 
						(Alert.YES | Alert.NO), this, 
						onPromptToDeleteProject);
			
		}
		
		private function onPromptToDeleteProject(event:CloseEvent):void {
            if (event.detail==Alert.YES) {
            	removeProject();
            }
        }

		
		private function removeProject():void {
			var params:Object = new Object();
			params.idProject = parentApplication.navExperimentView.selectedProject.@idProject;
			deleteProject.send(params);
			
		} 
		
		private function onSaveProject(event:ResultEvent):void {
        	if (saveProject.lastResult.name() == "SUCCESS") {
				parentApplication.navExperimentView.selectedIdProject = saveProject.lastResult.@idProject;
				if (fromSubmitRequestWindow) {
					parentApplication.submitRequestView.onProjectAdded(saveProject.lastResult.@idProject);
				}else {
					parentApplication.navExperimentView.getProject.send();
	        		parentApplication.navExperimentView.refreshExperiments();
				}
        		
        		if (closeWindowAfterSave) {
        			parentDocument.closeWindow();
        			closeWindowAfterSave = false;
        		}
        	} else {
        		Alert.show(saveProject.lastResult..ACTMESSAGE.@TEXT);
        	}
			
		}
		
		private function onDeleteProject(event:ResultEvent):void {
        	if (deleteProject.lastResult.name() == "SUCCESS") {
        		parentApplication.navExperimentView.selectedProject = null;
        		parentApplication.navExperimentView.selectedIdProject = null;
        		parentApplication.navExperimentView.refreshExperiments();
        		parentApplication.navExperimentView.theViews.visible = false;
        		parentApplication.navExperimentView.browseView.buttonStack.selectedChild = parentDocument.browseButtonView;
        	} else {
        		Alert.show(deleteProject.lastResult..ACTMESSAGE.@TEXT);
        	}
		}

		
		private function onSaveProjectFailed(event:FaultEvent):void {
			Alert.show("failed to save project " + event.message);
		}
		
		private function onDeleteProjectFailed(event:FaultEvent):void {
			Alert.show("failed to delete project " + event.message);
		}

	]]>
</mx:Script>

	  
	  <mx:XMLListCollection id="experimentDesignEntries" source="{parentApplication.navExperimentView.selectedProject.ExperimentDesignEntries.ExperimentDesignEntry}" 
	  	 sort="{experimentDesignSorter}"/>
	  <mx:Sort id="experimentDesignSorter" compareFunction="sortExperimentDesigns"
	  unique="true"/>
	  
	  <mx:XMLListCollection id="experimentFactorEntries" source="{parentApplication.navExperimentView.selectedProject.ExperimentFactorEntries.ExperimentFactorEntry}" 
	  	 sort="{experimentFactorSorter}"/>
	  <mx:Sort id="experimentFactorSorter" compareFunction="sortExperimentFactors"
	  unique="true"/>
 

	<mx:HDividedBox width="100%" height="100%" horizontalAlign="left" paddingTop="4" paddingRight="4" paddingLeft="4" paddingBottom="4">
		<mx:VBox width="33%" height="100%" verticalGap="10"  >
		    <mx:VBox width="100%" verticalGap="0">
				<mx:Label text="Project name:"/>
				<mx:TextInput id="projectName" width="100%"  
					text="{parentApplication.navExperimentView.selectedProject.@name}">
					<mx:toolTip>(Suggested naming convention: Lab-Species-Experiment title)</mx:toolTip>
				</mx:TextInput>			    	
		    </mx:VBox>
			
			<mx:VBox width="100%" verticalGap="0" height="100%">
				<mx:Label text="Project description:"/>
				<mx:TextArea height="100%" id="projectDescription" width="100%" 
					text="{parentApplication.navExperimentView.selectedProject.@description}"/>			    	
		    </mx:VBox>
		    
		    <mx:VBox width="100%" verticalGap="0">
				<mx:Label text="Visibility to experiment and data:"/>
				<mx:RadioButton id="isVisibleToMembers" label="Visible to members" groupName="radiogroup1" selected="{parentApplication.navExperimentView.selectedProject.@isVisibleToMembers == 'Y'}"/>
				<mx:RadioButton id="isVisibleToMembersAndCollaborators" label="Visible to members and collaborators" groupName="radiogroup1" selected="{parentApplication.navExperimentView.selectedProject.@isVisibleToMembersAndCollaborators == 'Y'}"/>
				<mx:RadioButton id="isVisibleToPublic" label="Visible to everyone (available to public)" groupName="radiogroup1" selected="{parentApplication.navExperimentView.selectedProject.@isVisibleToPublic == 'Y'}"/>
		    </mx:VBox>
		</mx:VBox>

	    <mx:DataGrid id="experimentDesignEntryGrid" width="30%" height="100%" 
	    	dataProvider="{experimentDesignEntries}" 
	    	selectionColor="#FFFFFF" fontSize="9"
 			showHeaders="true" headerHeight="20" variableRowHeight="true">
	        <mx:columns>
	            <mx:DataGridColumn headerText=" " 
	            	width="17" 
	            	editable="true"                        	
	            	dataField="@isSelected" 
	            	editorDataField="selected"
	            	itemRenderer="views.CheckBoxIsSelected" >
	            </mx:DataGridColumn>
	            <mx:DataGridColumn  
	            	headerText="Experiment Design (general intent)"
	            	editable="false" editorDataField="selected" 
	            	dataField="@experimentDesign">
	                <mx:itemRenderer>
	                    <mx:Component >
	                         <mx:HBox>
	                           <mx:Label text="{data.@experimentDesign}">			                           	
	                           </mx:Label>
	                           <mx:TextInput id="edOtherLabel" fontSize="9"
	                           	text="{data.@otherLabel}"
	                           	change="{data.@otherLabel = edOtherLabel.text}" 
	                           	width="{data.@experimentDesign == 'Other' ? 130 : 0}"  
	                           	height="{data.@experimentDesign == 'Other' ? 20 : 0}"  
	                           	visible="{data.@experimentDesign == 'Other' ? true : false}" 
	                           	editable="{data.@experimentDesign == 'Other' ? true : false}">			                           
	                           </mx:TextInput>
	                         	
	                         </mx:HBox>
	                    </mx:Component>
	                </mx:itemRenderer>
                </mx:DataGridColumn>
            </mx:columns>
	    </mx:DataGrid>

	    <mx:DataGrid id="experimentFactorEntryGrid" width="30%" height="100%" dataProvider="{experimentFactorEntries}" selectionColor="#FFFFFF" fontSize="9" showHeaders="true" headerHeight="20" variableRowHeight="true">
	        <mx:columns>
	            <mx:DataGridColumn headerText=" " 
	            	width="17" 
	            	editable="true"                        	
	            	dataField="@isSelected" 
	            	editorDataField="selected" 
	            	itemRenderer="views.CheckBoxIsSelected">
	            </mx:DataGridColumn>
	            <mx:DataGridColumn  
	            	headerText="Factors (differences between samples)" 
	            	editable="false" editorDataField="selected" 
	            	dataField="@experimentFactor">
	                <mx:itemRenderer>
	                    <mx:Component >
	                         <mx:HBox horizontalGap="1">
	                           <mx:Label text="{data.@experimentFactor}">			                           	
	                           </mx:Label>
	                           <mx:TextInput id="efOtherLabel" fontSize="9"
	                           	text="{data.@otherLabel}"
	                           	change="{data.@otherLabel = efOtherLabel.text}" 
	                           	width="{data.@experimentFactor == 'Other' ? 130 : 0}"  
	                           	height="{data.@experimentFactor == 'Other' ? 20 : 0}"  
	                           	visible="{data.@experimentFactor == 'Other' ? true : false}" 
	                           	editable="{data.@experimentFactor == 'Other' ? true : false}">			                           
	                           </mx:TextInput>
	                         	
	                         </mx:HBox>
	                    </mx:Component>
	                </mx:itemRenderer>
                </mx:DataGridColumn>
	        </mx:columns>
	    </mx:DataGrid>


       
   </mx:HDividedBox>
   

	
</mx:Canvas>
