<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				width="393" height="100" 
				creationComplete="{init()}"
				xmlns:util="views.util.*" 
				title="Add New Annotation Option">
	
	<mx:HTTPService  
		id="getProperty" 
		url="GetProperty.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetProperty(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get annotation', event)"
		method="POST" 
		useProxy="false">
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="saveProperty" 
		url="SaveProperty.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onSaveProperty(event)"
		fault="parentApplication.onFailHttpRequest('Failed to save annotation', event)"
		method="POST" 
		useProxy="false">
	</mx:HTTPService>
	
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.CheckBox;
			
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import views.admin.PropertyEvent;
			import views.util.AnnotationOptionAddEvent;
			import views.util.OrganismAddEvent;
			import views.util.OrganismEvent; 
			
			public var idProperty:String = null;
			private var property:Object;
			
			private function closeWindow():void {
				PopUpManager.removePopUp(this);
			}
			
			private function init():void {
				this.enabled = false;
				var params:Object =  new Object();
				params.idProperty = idProperty;
				getProperty.send(params);
			}	
			
			private function onGetProperty(event:ResultEvent): void {
				if (getProperty.lastResult.name() == "PropertyList") {
					property = getProperty.lastResult..Property;
					this.enabled = true;
				} else {
					Alert.show("Unable to retrieve annotation information.");
					closeWindow();
				}
			}	

			private function save():void {
				this.enabled = false;

				var params:Object = new Object();
				params.idProperty = property.@idProperty;
				params.name = property.@name;
				params.isActive = property.@isActive;
				params.isRequired = property.@isRequired;
				params.forSample = property.@forSample;
				params.forDataTrack = property.@forDataTrack;
				params.forAnalysis = property.@forAnalysis;
				params.forRequest = property.@forRequest;
				params.mageOntologyCode = property.@mageOntologyCode;
				params.mageOntologyDefinition = property.@mageOntologyDefinition; 
				params.description = property.@description;
				params.idAppUser = property.@idAppUser;
				params.codePropertyType = property.@codePropertyType;
				params.organismsXMLString = property.organisms;
				params.platformsXMLString = property.platformApplications;
				params.analysisTypesXMLString = property.analysisTypes;

				var options:XMLListCollection = new XMLListCollection(property.options.PropertyOption);
				var sortOrder:int = options.length + 1;
				var newProperty:XML = XML('<PropertyOption idPropertyOption="PropertyOption' + sortOrder.toString() + '" option="' + oName.text + '"isActive="Y" sortOrder="' + sortOrder.toString() + '" />');
				options.addItem(newProperty);
				params.optionsXMLString = "<options>" + options.toXMLString() + "</options>";
				
				saveProperty.send(params);
				
			}
			
			private function onSaveProperty(event:ResultEvent): void {
				if (saveProperty.lastResult.name() == "SUCCESS") {
					parentApplication.getPropertyList.send();
					dispatchEvent(new Event("updateProperties"));
					
					parentApplication.removeEventListener(PropertyEvent.DATA_REFRESHED, onPropertyRefreshed);
					parentApplication.addEventListener(PropertyEvent.DATA_REFRESHED, onPropertyRefreshed);
				} else {
					Alert.show(saveProperty.lastResult..ACTMESSAGE.@TEXT);
					this.enabled = true;
				}
			}
			
			private function onPropertyRefreshed(event:Event):void {
				parentApplication.removeEventListener(PropertyEvent.DATA_REFRESHED, onPropertyRefreshed);
				var nameAdded:String = oName.text;
				dispatchEvent(new AnnotationOptionAddEvent(nameAdded));
				closeWindow();
			}
			
			private function checkToSave():void {
				if (oName.text == null || oName.text == '') {
					Alert.show("Please enter an option name.", "No Name");
					return;
				}
				for each(var o:XML in property.options) {
					if (o.@option.toString().toLowerCase() == oName.text.toLowerCase()) {
						Alert.show("Option name already exists.", "Already Exists");
						return;
					}
				}
				save();
			}
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" height="100%" verticalGap="10">
		<mx:HBox width="100%" verticalGap="0" verticalAlign="middle" horizontalGap="0" paddingRight="0">
			<mx:Label text="Option Name:" />
			<mx:TextInput width="293" id="oName" maxChars="100" />
		</mx:HBox>		 
		<mx:ControlBar width="100%" horizontalAlign="right"  paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0">
			<mx:Button id="saveButton" label="Add Option"  enabled="{oName.text != '' ? true : false}"
					   icon="@Embed('../../assets/action_save.gif')" click="checkToSave()" disabledIcon="@Embed(source='../../assets/save_disable.png')">
			</mx:Button>
			<mx:Button label="Cancel"  click="{closeWindow()}"/>
			
		</mx:ControlBar>
	</mx:VBox>
	
</mx:TitleWindow>
