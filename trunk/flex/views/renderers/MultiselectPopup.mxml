<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical"
				width="180" showCloseButton="true" close="save()" creationComplete="centerMe()"
				 paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4" horizontalScrollPolicy="off">
	
	
	
	<mx:Script>
		
		<![CDATA[
			
			import mx.collections.XMLListCollection;
			import mx.events.ListEvent;
			import mx.managers.FocusManager;
			import mx.managers.PopUpManager;
			
			import views.renderers.CheckBoxRenderer;
			import views.util.AnnotationOptionAddEvent;
			
			
			[Bindable]
			public var options:XMLListCollection;

			public var opener:MultiselectRenderer;
			public var idProperty:String;
			
			private var addOptionOnFly:Boolean;
			
			public function initializeData(title:String, value:String, addOptionOnFly:Boolean, idProperty:String):void {
				this.title = title;
				this.addOptionOnFly = addOptionOnFly;
				this.idProperty = idProperty;
				
				createOptions(value);
			}
			
			private function createOptions(value:String):void {
				var values:Array = new Array();
				values = value.split(",");
				var idx:Object = null;
				
				options = new XMLListCollection();
				var option:XML = null;
				for each(option in opener.getOptions()) {
					var theOption:XML = option.copy();
					var isSelected:Boolean = false;
					if (values != null) {
						for (idx in values) {
							if (values[idx] != null && theOption.@option == values[idx]) {
								isSelected = true;
								break;
							}
						}
					}
					theOption.@isSelected = isSelected ? "Y" : "N";
					theOption.@isCheckboxVisible = "Y";
					options.addItem(theOption);
				}
				
				if (addOptionOnFly) {
					var addOption:XML = new XML("<PropertyOption display='add new option...' value='-1' isSelected='N' isCheckboxVisible='N'/>");
					options.addItem(addOption);
				}
			}	
			
			private function save():void{
				var optionsString:String = getOptionsString(true);
				opener.updateDP(optionsString);
				cancel();
			}
			
			private function getOptionsString(getNames:Boolean = false):String {
				var option:XML = null;
				var optionsString:String = "";
				for each(option in options) {
					if (option.@isSelected == "Y") {
						if (optionsString.length > 0) {
							optionsString += ",";
						}
						if (getNames) {
							optionsString += option.@option;
						} else {
							optionsString += option.@idPropertyOption;
						}
					}
				}
				
				return optionsString;
			}
			
			private function cancel():void{
				PopUpManager.removePopUp(this);
				returnFocus();
			}
			
			private function returnFocus():void{
				opener.setFocus();
				
			}
			
			private function centerMe():void{
				PopUpManager.centerPopUp(this);
				checkboxGrid.setFocus();
			}
			
			private function toggleCheck(event:ListEvent):void {
				if (event.columnIndex == 0) {
					return;
				}
				
				if (checkboxGrid.selectedItem.@value == '-1') {
					addOption();
					return;
				}

				if (checkboxGrid.selectedItem.@isSelected == "Y") {
					checkboxGrid.selectedItem.@isSelected = "N";
				} else {
					checkboxGrid.selectedItem.@isSelected = "Y";
				}
			}
			
			private function addOption():void {
				var w:AddAnnotationOptionWindow = AddAnnotationOptionWindow(PopUpManager.createPopUp(parentApplication.theBody, AddAnnotationOptionWindow, true));
				w.idProperty = this.idProperty;
				PopUpManager.centerPopUp(w);
				
				this.systemManager.removeEventListener(AnnotationOptionAddEvent.ANNOTATION_OPTION_ADD_EVENT, onOptionRefreshed);		                                  
				this.systemManager.addEventListener(AnnotationOptionAddEvent.ANNOTATION_OPTION_ADD_EVENT, onOptionRefreshed);		                                  
			}
			
			private function onOptionRefreshed(event:AnnotationOptionAddEvent):void {
				this.systemManager.removeEventListener(AnnotationOptionAddEvent.ANNOTATION_OPTION_ADD_EVENT, onOptionRefreshed);		                                  
				var value:String = this.getOptionsString(true);
				if (event.nameAdded != null && event.nameAdded != '') {
					if (value.length > 0) {
						value += ",";
					}
					value += event.nameAdded;
				}
				this.createOptions(value);
			}

			private function selectAll(objects:XMLListCollection):void {
				for each(var o:Object in objects) {
					if (o.@isActive == 'Y') {
						o.@isSelected = 'Y';
					}
				}
			}
			private function unselectAll(objects:XMLListCollection):void {
				for each(var o:Object in objects) {
					o.@isSelected = 'N';
				}
			}
			
		]]>
		
	</mx:Script>
	
	 
	<mx:HBox id="selectAllStack" width="160" paddingBottom="0" paddingTop="0">
		<mx:HBox width="100%"  paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0" verticalAlign="middle">
			<mx:LinkButton label="Select all" styleName="formLinkButton" paddingLeft="0" click="selectAll(options)"  paddingTop="0" paddingRight="0" paddingBottom="0"/>
		</mx:HBox>
		<mx:HBox width="100%" paddingBottom="0" paddingTop="0">
			<mx:LinkButton label="Unselect all" styleName="formLinkButton" paddingLeft="0" click="unselectAll(options)"  paddingTop="0" paddingBottom="0"/>
		</mx:HBox>			    	
	</mx:HBox>

	<mx:DataGrid id="checkboxGrid" dataProvider="{options}" 
				 rowCount="{(options.length > 0 ? options.length : 1)}"
				 width="100%"  showHeaders="false"
				 itemClick="toggleCheck(event)">
		<mx:columns>
			<mx:DataGridColumn headerText=" "  
							   width="25" 
							   editable="true"                        	
							   dataField="@isSelected" 
							   editorDataField="selected"
							   itemRenderer="{views.renderers.CheckBoxRenderer.create(null, true, null, null, '@isCheckboxVisible')}" />
			<mx:DataGridColumn headerText="Option">
				<mx:itemRenderer >
					<mx:Component>
						<mx:Label text="{data.@display}" styleName="{data.@value == -1 ? 'formLinkButton' : 'TextInput'}" />
					</mx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
		</mx:columns>
	</mx:DataGrid>
	
	
</mx:TitleWindow>
