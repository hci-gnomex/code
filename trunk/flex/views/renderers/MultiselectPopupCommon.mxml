<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical"
				width="286" height="220" showCloseButton="true" close="save()" creationComplete="centerMe()"
				 paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4">
	
	
	
	<mx:Script>
		
		<![CDATA[
			
			import mx.collections.XMLListCollection;
			import mx.events.ListEvent;
			import mx.managers.FocusManager;
			import mx.managers.PopUpManager;
			import views.renderers.CheckBoxRenderer;
			
			
			[Bindable]
			public var options:XMLListCollection;

			public var opener:Object;
			
			public function initializeData(title:String, value:String, allOptions:XMLList):void {
				this.title = title;
				
				var values:Array = new Array();
				values = value.split(",");
				var idx:Object = null;

				options = new XMLListCollection();
				var option:XML = null;
				for each(option in allOptions) {
					var theOption:XML = option.copy();
					var isSelected:Boolean = false;
					if (values != null) {
						for (idx in values) {
							if (values[idx] != null && theOption.@value == values[idx]) {
								isSelected = true;
								break;
							}
						}
					}
					theOption.@isSelected = isSelected ? "Y" : "N";
					options.addItem(theOption);
				}
			}
			
			
			private function save():void{
				var option:XML = null;
				var optionsString:String = "";
				for each(option in options) {
					if (option.@isSelected == "Y") {
						if (optionsString.length > 0) {
							optionsString += ",";
						}
						optionsString += option.@value;
					}
				}
				(opener as MultiselectRendererCommon).updateDP(optionsString);
				cancel();
			}
			
			private function cancel():void{
				PopUpManager.removePopUp(this);
				returnFocus();
			}
			
			private function returnFocus():void{
				opener.setFocus();
				
			}
			
			private function centerMe():void{
				PopUpManager.centerPopUp(this);
				checkboxGrid.setFocus();
			}
			
			private function toggleCheck(event:ListEvent):void {
				if (event.columnIndex == 0) {
					return;
				}

				if (checkboxGrid.selectedItem.@isSelected == "Y") {
					checkboxGrid.selectedItem.@isSelected = "N";
				} else {
					checkboxGrid.selectedItem.@isSelected = "Y";
				}
			}
			
			private function selectAll(objects:XMLListCollection, viewStack:ViewStack):void {
				for each(var o:Object in objects) {
					if (o.@isActive == 'Y') {
						o.@isSelected = 'Y';
					}
				}
				viewStack.selectedIndex = 1;
			}
			private function unselectAll(objects:XMLListCollection, viewStack:ViewStack):void {
				for each(var o:Object in objects) {
					o.@isSelected = 'N';
				}
				viewStack.selectedIndex = 0;
			}
			
		]]>
		
	</mx:Script>
	
	<mx:ViewStack id="selectAllStack" width="80" paddingBottom="0" paddingTop="0">
		<mx:HBox width="100%"  paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0" verticalAlign="middle">
			<mx:LinkButton label="Select all" styleName="formLinkButton" paddingLeft="0" click="selectAll(options, selectAllStack)"  paddingTop="0" paddingRight="0" paddingBottom="0"/>
		</mx:HBox>
		<mx:HBox width="100%" paddingBottom="0" paddingTop="0">
			<mx:LinkButton label="Unselect all" styleName="formLinkButton" paddingLeft="0" click="unselectAll(options, selectAllStack)"  paddingTop="0" paddingBottom="0"/>
		</mx:HBox>			    	
	</mx:ViewStack>

	 
	
	<mx:DataGrid id="checkboxGrid" dataProvider="{options}" 
				 rowCount="{(options.length > 0 ? options.length - 1 : 1)}"
				 width="100%"  showHeaders="false"
				 itemClick="toggleCheck(event)" height="100%">
		<mx:columns>
			<mx:DataGridColumn headerText=" "  
							   width="25" 
							   editable="true"                        	
							   dataField="@isSelected" 
							   editorDataField="selected"
							   itemRenderer="views.renderers.CheckBoxRenderer">			 
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Option"  dataField="@display" >
			</mx:DataGridColumn>
		</mx:columns>
	</mx:DataGrid>
	
	
</mx:TitleWindow>
