<?xml version="1.0" encoding="utf-8"?>
<mx:Text xmlns:mx="http://www.adobe.com/2006/mxml"
		 implements="mx.controls.listClasses.IDropInListItemRenderer"
		 toolTip="click to Editâ€¦" click="callLater(openPopup)" doubleClickEnabled="true"
		 text="{txt}">
	
	<mx:Script>
		<![CDATA[
			import hci.flex.renderers.RendererFactory;
			
			import mx.controls.AdvancedDataGrid;
			import mx.controls.DataGrid;
			import mx.controls.dataGridClasses.DataGridListData;
			import mx.controls.listClasses.BaseListData;
			import mx.controls.listClasses.ListData;
			import mx.core.IFactory;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			private var _listData:DataGridListData;
			
			[Bindable]
			public var allOptions:XMLList;
			
			[Bindable]
			public var title:String;
			
			[Bindable]
			public var txt:String;
			
			public var isEditable:Boolean = true;			
			
			public var isRequired:Boolean = false;
			
			private var pop:MultiselectPopupCommon;
			
			public static function create(title:String, allOptions:XMLList, isEditable:Boolean=true, isRequired:Boolean=false):IFactory {
				return RendererFactory.create(MultiselectRendererCommon, {title:title, allOptions:allOptions, isEditable:isEditable});
			}		
			override public function set data(value:Object):void {
				super.data = value;
				if (_listData == null) {
					return;
				}
				
				txt = "";
				if (data == null || _listData == null || !data.hasOwnProperty(_listData.dataField) || _listData.dataField == null || _listData.dataField == '') {
					return;
				}
	
				var values:Array = new Array();
				values = data[_listData.dataField].split(",");
				var idx:Object = null;
				
					
				var option:XML = null;
				for each(option in allOptions) {
					var theOption:XML = option.copy();
					var isSelected:Boolean = false;
					if (values != null) {
						for (idx in values) {
							if (values[idx] != null && theOption.@value == values[idx]) {
								isSelected = true;
								break;
							}
						}
					}
					if (isSelected) {
						if (txt.length > 0) {
							txt += ",";
						}
						txt += option.@display;
					}
				}
			}
			
			override public function get data():Object {
				return super.data;
			}
			
			override public function get listData():BaseListData
			{
				return _listData;
			}
			
			override public function set listData(value:BaseListData):void
			{
				_listData = DataGridListData(value);
			}
			
			private function openPopup():void{
				if (!isEditable) {
					return;
				}
				if (_listData == null || _listData.dataField == null || !(data is XML)) {
					return;
				}
				pop= MultiselectPopupCommon(PopUpManager.createPopUp(parentApplication.theBody, MultiselectPopupCommon,true));
				pop.initializeData(title, this.data[_listData.dataField], allOptions);
				pop.opener=this;
			}
			
			public function updateDP(str:String):void{
				if (!isEditable) {
					return;
				}
				if (_listData == null) {
					return;
				}
				
				this.data[_listData.dataField]=str;
				
				if (_listData.owner is DataGrid) {
					var dg:DataGrid=_listData.owner as DataGrid;
					dg.dataProvider.itemUpdated(data);					
				} else if (_listData.owner is AdvancedDataGrid) {
					var adg:AdvancedDataGrid=_listData.owner as AdvancedDataGrid;
					adg.dataProvider.itemUpdated(data);					
				} 
				
				this.invalidateDisplayList();
				this.validateNow();
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
				
				if (data != null && !(data is XML)) {
					return;
				}
				
				if (!isEditable) {
					return;
				}
				
				var g:Graphics = graphics;
				g.clear();
				if (isRequired) {
					g.beginFill(_listData == null ||  _listData.dataField == null || data == null || !data.hasOwnProperty(_listData.dataField) || data[_listData.dataField]  == '' ? RendererFactory.DEFAULT_MISSING_REQUIRED_FIELD_BACKGROUND : 0xffffff );
					if (_listData == null ||  _listData.dataField == null || data == null || !data.hasOwnProperty(_listData.dataField) || data[_listData.dataField]  == '' ) {
						g.lineStyle(RendererFactory.DEFAULT_MISSING_REQUIRED_FIELD_BORDER_THICKNESS,
							RendererFactory.DEFAULT_MISSING_REQUIRED_FIELD_BORDER );          	
					}
					g.drawRect(0,0,unscaledWidth,unscaledHeight);
					g.endFill();
				}
			}

			
		]]>
	</mx:Script>
	
</mx:Text>


