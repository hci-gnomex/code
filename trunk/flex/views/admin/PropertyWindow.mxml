<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				width="928.25757" height="522.1212" 
				 creationComplete="{init()}"
				 xmlns:util="views.util.*" 
				 showCloseButton="true" close="{PopUpManager.removePopUp(this)}"
				title="Configure Sample Annotations">
	
<mx:HTTPService  
		id="saveProperty" 
		url="SaveProperty.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		result="onSaveProperty(event)"
		fault="parentApplication.onFailHttpRequest('Failed to save sample annotation', event)"
		method="POST" 
		useProxy="false">
</mx:HTTPService>
	
<mx:HTTPService  
		id="deleteProperty" 
		url="DeleteProperty.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		result="onDeleteProperty(event)"
		fault="parentApplication.onFailHttpRequest('Failed to delete sample annotation', event)"
		method="POST" 
		useProxy="false">
</mx:HTTPService>
		
<mx:Script>
	<![CDATA[
		import mx.controls.Alert;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		
		import views.admin.PropertyEvent;
		import views.util.DirtyNote;
		
	private var idProperty:Object = null;
		
	private function setDirty():void {
		if (saveButton.enabled) {
			dirty.setDirty();
		}
	}
	
	private function init():void {
		properties = new XMLListCollection();
		for each(var sc:XML in parentApplication.propertyList) {
			properties.addItem(sc.copy());
		}
		this.showAnalysisAnnotations.selected = true;
		this.showDataTrackAnnotations.selected = true;
		this.showSampleAnnotations.selected = true;
		parentApplication.removeEventListener(PropertyEvent.DATA_REFRESHED,
			onPropertyRefreshed);		                                  
		parentApplication.addEventListener(PropertyEvent.DATA_REFRESHED,   
			onPropertyRefreshed);
		
	}	
			
	private function onPropertyRefreshed(event:Event):void{
		properties = new XMLListCollection();
		for each(var sc:XML in parentApplication.propertyList) {
			if ((this.showSampleAnnotations.selected && sc.@forSample == "Y")
				|| (this.showDataTrackAnnotations.selected && sc.@forDataTrack == "Y")
				|| (this.showAnalysisAnnotations.selected && sc.@forAnalysis == "Y")) {
				
				properties.addItem(sc.copy());
			}
		}
		reselectCharacteristic();
		dirty.resetDirty();
	}	
		
	private function reselectCharacteristic():void {
		var found:Boolean = false;
		if (idProperty != null) {
			for each(var sc:Object in properties) {
				if (sc.@idProperty == idProperty) {
					propertyList.selectedItem = sc;
					propertyList.scrollToIndex(propertyList.selectedIndex);
					found = true;
					break;
				}
			}
		}
		if (found) {
			theViews.selectedIndex = 1;
		} else {
			theViews.selectedIndex = 0;
		}
	}
		
	private function onSelectProperty():void {
		if (propertyList.selectedItem != null) {
			theViews.selectedIndex = 1;
			
			organismCombo.selectedItem = null;
			platformCombo.selectedItem = null;

			setOwnerCombo();

			dirty.resetDirty();
		}
	}
		
	private function setOwnerCombo():void {
		this.ownerCombo.selectedItem = null;
		this.ownerCombo.enabled = true;
		for each(var user:XML in parentApplication.promptedAppUserList) {
			if (user.@idAppUser == propertyList.selectedItem.@idAppUser) {
				this.ownerCombo.selectedItem = user;
				break;
			}
		}
		this.ownerCombo.enabled = parentApplication.hasPermission("canWriteDictionaries") ? true : false;
	}
		
	private function addOption():void {
		var newOption:XML = new XML("<PropertyOption " +
			" idPropertyOption='PropertyOption" + options.length + "'" +
			" option='enter option here..'" +
			" isActive='Y'" +
			" sortOrder='" + (options.length + 1) + "'" +
			" />");
		options.addItem(newOption);
		setDirty();
	}

	private function removeOption():void {
		if (this.optionGrid.selectedItem != null) {
			options.removeItemAt(options.getItemIndex(optionGrid.selectedItem));
			setDirty();
		}
	}
		 
	private function addOrganism():void {
		if (organismCombo.selectedItem != null && organismCombo.selectedItem.@value != '') {
			organisms.addItem(organismCombo.selectedItem);
			setDirty();			
		}
	}
	
	private function removeOrganism():void {
		if (this.organismsGrid.selectedItem != null) {
			organisms.removeItemAt(organisms.getItemIndex(organismsGrid.selectedItem));
			setDirty();
		}
	}

		
	private function addPlatform():void {
		if (platformCombo.selectedItem != null && platformCombo.selectedItem.@value != '') {
			platforms.addItem(platformCombo.selectedItem);
			setDirty();			
		}
	}
	
	private function removePlatform():void {
		if (this.platformsGrid.selectedItem != null) {
			platforms.removeItemAt(platforms.getItemIndex(platformsGrid.selectedItem));
			setDirty();
		}
	}

	private function addProperty():void {
		var newCharacteristic:XML = new XML("<Property " +
			" idProperty=''" +
			" name='enter name here..'" +
			" isActive='Y'" +
			" canUpdate='Y'"  +
			" canDelete='Y'" + 
			" canRead='Y'" +
			" mageOntologyCode=''" + 
			" mageOntologyDefinition=''" + 
			" description=''" + 
			" idAppUser='" + (parentApplication.hasPermission("canWriteDictionaries") ? '' : parentApplication.getIdAppUser()) + "'" +
			" codePropertyType='TEXT'" +
			" forAnalysis='" + (this.showAnalysisAnnotations.selected ? "Y" : "N") + "'" +
			" forDataTrack='" + (this.showDataTrackAnnotations.selected ? "Y" : "N") + "'" +
			" forSample='" + (this.showSampleAnnotations.selected ? "Y" : "N") + "'" +
			" />");
		properties.addItemAt(newCharacteristic, 0);
		 
		
		propertyList.selectedItem = newCharacteristic;
		propertyList.scrollToIndex(propertyList.selectedIndex);
		idProperty = "";
		
		setOwnerCombo();
		
		setDirty();

		this.onSelectProperty()
	}
		
	private function removeProperty():void {
		if (propertyList.selectedItem == null) {
			return;
		}
		idProperty = "";
		
		var params:Object = new Object();
		params.idProperty = propertyList.selectedItem.@idProperty;
		deleteProperty.send(params);
	}
		
	private function onDeleteProperty(event:ResultEvent): void {
		if (deleteProperty.lastResult.name() == "SUCCESS") {
			parentApplication.getPropertyList.send();
			
		} else {
			mx.controls.Alert.show(deleteProperty.lastResult..ACTMESSAGE.@TEXT);
		}
	}
		
		
	private function save():void {
		if (propertyList.selectedItem == null) {
			return;
		}
		
		if(scName.text.toLowerCase() == "description") {
			mx.controls.Alert.show("'Description' is a reserved word. Please select a different name for the annotation.");
			return;
		}
		
		if (!this.sample.selected && !this.dataTrack.selected && !this.analysis.selected) {
			mx.controls.Alert.show("Please choose object the annotation applies to.");
			this.sample.setFocus();
			return;
		}
		
		var params:Object = new Object();
		params.idProperty = propertyList.selectedItem.@idProperty;
		params.name = scName.text;
		params.isActive = this.isActive.selected ? "Y" : "N";
		params.isRequired = this.isRequired.selected ? "Y" : "N";
		params.forSample = this.sample.selected ? "Y" : "N";
		params.forDataTrack = this.dataTrack.selected ? "Y" : "N";
		params.forAnalysis = this.analysis.selected ? "Y" : "N";
		params.mageOntologyCode = mageOntologyCode.text;
		params.mageOntologyDefinition = mageOntologyDefinition.text; 
		params.description = description.text; 
		if (parentApplication.hasPermission("canWriteDictionaries")) {
			params.idAppUser = this.ownerCombo.selectedItem != null ? this.ownerCombo.selectedItem.@idAppUser : "";			
		} else {
			params.idAppUser = parentApplication.getIdAppUser();
		}
		params.codePropertyType = this.characteristicTypeRadioGroup.selectedValue;
		params.optionsXMLString = "<options>" + this.options.toXMLString() + "</options>";
		params.organismsXMLString = "<organisms>" + this.organisms.toXMLString() + "</organisms>";
		params.platformsXMLString = "<platforms>" + this.platforms.toXMLString() + "</platforms>";
		
		saveProperty.send(params);
		
	}
		
	private function onSaveProperty(event:ResultEvent): void {
		if (saveProperty.lastResult.name() == "SUCCESS") {
			idProperty = saveProperty.lastResult.@idProperty;

			parentApplication.getPropertyList.send();
		} else {
			mx.controls.Alert.show(saveProperty.lastResult..ACTMESSAGE.@TEXT);
		}
	}				
		
	]]>
</mx:Script>
	
<mx:XMLListCollection id="properties"/>
<mx:XMLListCollection id="options" source="{propertyList.selectedItem.options.PropertyOption}"/>
<mx:XMLListCollection id="organisms" source="{propertyList.selectedItem.organisms.Organism}"/>
<mx:XMLListCollection id="platforms" source="{propertyList.selectedItem.platforms.RequestCategory}"/>
<mx:VBox width="100%" height="100%" verticalGap="0">
	
	<mx:HBox width="100%" backgroundImage="@Embed(source='../../assets/filterBar.png')">
		<mx:LinkButton label="Add annotation" styleName="linkMenuButton" click="addProperty()"  disabledIcon="@Embed(source='../../assets/page_add_disable.png')" icon="@Embed(source='../../assets/page_add.png')"/>
		<mx:LinkButton label="Remove annotation" styleName="linkMenuButton" click="removeProperty()" enabled="{propertyList.selectedItem != null &amp;&amp; propertyList.selectedItem.@canDelete == 'Y'}"   disabledIcon="@Embed(source='../../assets/page_delete_disable.png')" icon="@Embed(source='../../assets/page_delete.png')"/>
		<mx:Label text="Show Annotations For:" />
		<mx:CheckBox label="Sample" id="showSampleAnnotations" click="onPropertyRefreshed(null)" selected="true"/>
		<mx:CheckBox label="DataTrack" id="showDataTrackAnnotations" click="onPropertyRefreshed(null)" selected="true"/>
		<mx:CheckBox label="Analysis" id="showAnalysisAnnotations" click="onPropertyRefreshed(null)" selected="true"/>
	</mx:HBox>
	
<mx:HDividedBox height="100%" width="100%" >
  <mx:VBox height="100%" width="200" styleName="panelBox">
		<mx:List id="propertyList" width="100%" height="100%" labelField="@name" dataProvider="{properties}" 
				 itemClick="{onSelectProperty()}">
		</mx:List>
  </mx:VBox>	
  <mx:ViewStack id="theViews"  width="100%" height="100%" creationPolicy="all">
	<mx:VBox width="100%" height="100%" verticalGap="0" styleName="panelBox" paddingLeft="4" paddingTop="4" paddingRight="4" paddingBottom="0"/>		
	<mx:VBox width="100%" height="100%" verticalGap="1" styleName="panelBox" paddingLeft="4" paddingTop="4" paddingRight="4" paddingBottom="0">		
		 <mx:VBox width="100%" height="100%" styleName="form" paddingTop="4" paddingBottom="4" paddingRight="4" paddingLeft="4" verticalGap="4">			 
			 <mx:HBox width="100%" verticalGap="0">
			  <mx:Label text="Name:" width="80"/>
			  <mx:TextInput text="{propertyList.selectedItem.@name}" change="{setDirty()}" width="100%" id="scName"  maxChars="100"/>
			  <mx:HBox >
			   <mx:CheckBox label="Active" id="isActive"  click="setDirty()">
			    <mx:selected>{propertyList.selectedItem.@isActive == 'Y' ? true : false}</mx:selected>
			   </mx:CheckBox>
			   <mx:Spacer width="80"/>
			  </mx:HBox>
			 </mx:HBox>
			 <mx:HBox width="100%" verticalGap="0">
			 	<mx:Text text="Description:" width="80"/>
			 	<mx:TextArea text="{propertyList.selectedItem.@description}" change="{setDirty()}" width="100%" id="description"  maxChars="100"/>
				 <mx:VBox borderStyle="solid" paddingLeft="2">
					 <mx:Text text="Annotation Applies To:"/>
					 <mx:HBox>
						 <mx:CheckBox label="Sample" id="sample" click="setDirty()">
							 <mx:selected>{propertyList.selectedItem.@forSample == 'Y' ? true : false}</mx:selected>
						 </mx:CheckBox>
						 <mx:CheckBox label="Data Track" id="dataTrack" click="setDirty()">
							 <mx:selected>{propertyList.selectedItem.@forDataTrack == 'Y' ? true : false}</mx:selected>
						 </mx:CheckBox>
						 <mx:CheckBox label="Analysis" id="analysis" click="setDirty()">
							 <mx:selected>{propertyList.selectedItem.@forAnalysis == 'Y' ? true : false}</mx:selected>
						 </mx:CheckBox>
					 </mx:HBox>
				 </mx:VBox>
			 </mx:HBox>
			 <mx:HBox width="100%" verticalGap="0">
				 <mx:Text text="Only show annotation for these organisms:" width="80"/>
				 <mx:VBox   verticalGap="1" height="100%"  width="100%">
				 	   <mx:HBox horizontalAlign="left" horizontalGap="6">
				 	    <mx:ComboBox width="170" dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.OrganismLite').DictionaryEntry}" id="organismCombo" labelField="@display" >			       	
				 	    </mx:ComboBox>
				 	   	   <mx:Button click="addOrganism()" icon="@Embed(source='../../assets/add.png')" disabledIcon="@Embed(source='../../assets/add_disable.png')" width="25">
				 	   	   	   <mx:enabled>{propertyList.selectedItem.@canUpdate == 'Y' &amp;&amp; organismCombo.selectedItem != null &amp;&amp; organismCombo.selectedIndex > 0 ? true : false}</mx:enabled>
				 	   	   </mx:Button>
				 	   	   <mx:Button click="removeOrganism()" icon="@Embed(source='../../assets/delete.png')" 
									  disabledIcon="@Embed(source='../../assets/delete_disable.png')" 
									  enabled="{propertyList.selectedItem.@canUpdate == 'Y' &amp;&amp; organismsGrid.selectedItem != null}" width="25"/>
				 	   </mx:HBox>
				  <mx:DataGrid id="organismsGrid" showHeaders="false" dataProvider="{organisms}" width="100%" height="65">
				         <mx:columns>
				             <mx:DataGridColumn dataField="@display" headerText="Name"/>
				         </mx:columns>
				  </mx:DataGrid>			   	
				 </mx:VBox>
				 
				 <mx:Text text="Only show annotation for these platforms:" width="65"/>
				 <mx:VBox   verticalGap="1" height="100%"  width="100%">
					 <mx:HBox horizontalAlign="left" horizontalGap="6">
						 <mx:ComboBox width="170" dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry}" id="platformCombo" labelField="@display" >			       	
						 </mx:ComboBox>
						 <mx:Button click="addPlatform()" icon="@Embed(source='../../assets/add.png')" disabledIcon="@Embed(source='../../assets/add_disable.png')" width="25">
							 <mx:enabled>{propertyList.selectedItem.@canUpdate == 'Y' &amp;&amp; platformCombo.selectedItem != null &amp;&amp; platformCombo.selectedIndex > 0 ? true : false}</mx:enabled>
						 </mx:Button>
						 <mx:Button click="removePlatform()" icon="@Embed(source='../../assets/delete.png')" 
									disabledIcon="@Embed(source='../../assets/delete_disable.png')" 
									enabled="{propertyList.selectedItem.@canUpdate == 'Y' &amp;&amp; platformsGrid.selectedItem != null}" width="25"/>
					 </mx:HBox>
					 <mx:DataGrid id="platformsGrid" showHeaders="false" dataProvider="{platforms}" width="100%" height="65">
						 <mx:columns>
							 <mx:DataGridColumn dataField="@display" headerText="Name"/>
						 </mx:columns>
					 </mx:DataGrid>			   	
				 </mx:VBox>
			 </mx:HBox>
			 
			 <mx:HBox >
				 <mx:Spacer width="80"/>
				 <mx:CheckBox label="Required (Annotation must be filled in)" id="isRequired"  click="setDirty()">
					 <mx:selected>{propertyList.selectedItem.@isRequired == 'Y' ? true : false}</mx:selected>
				 </mx:CheckBox>
				 <mx:Spacer width="80"/>
			 </mx:HBox>
			 <mx:HBox width="100%" verticalGap="0">
			  <mx:Label text="Type:" width="80"/>
			  <mx:VBox verticalGap="0">
			   <mx:RadioButtonGroup id="characteristicTypeRadioGroup"  selectedValue="{propertyList.selectedItem.@codePropertyType}">
			   </mx:RadioButtonGroup>
			   <mx:RadioButton label="Text"  groupName="characteristicTypeRadioGroup" value="TEXT" paddingTop="0" paddingBottom="0"  click="setDirty()" />
			   <mx:RadioButton label="URL"  groupName="characteristicTypeRadioGroup" value="URL" paddingBottom="0" paddingTop="0"  click="setDirty()" />
			   <mx:RadioButton label="Checkbox"  groupName="characteristicTypeRadioGroup" value="CHECK" paddingTop="0" paddingBottom="0"  click="setDirty()" />
			   <mx:RadioButton label="Dropdown (single selection)"  groupName="characteristicTypeRadioGroup" value="OPTION" paddingBottom="0" paddingTop="0"  click="setDirty()" />
			   <mx:RadioButton label="Dropdown (multiple selection)"  groupName="characteristicTypeRadioGroup" value="MOPTION" paddingBottom="0" paddingTop="0" click="setDirty()" />
			  </mx:VBox>
			  <mx:HBox width="100%"  visible="{characteristicTypeRadioGroup.selectedValue == 'OPTION' || characteristicTypeRadioGroup.selectedValue == 'MOPTION'}" verticalGap="0" height="100%">
			   <mx:VBox verticalGap="0" height="100%" width="100%">
			    <mx:HBox>
			     <mx:LinkButton label="Add option" styleName="linkMenuButton" click="addOption()"   enabled="{propertyList.selectedItem.@canUpdate == 'Y' ? true : false}" icon="@Embed(source='../../assets/add.png')" disabledIcon="@Embed(source='../../assets/add_disable.png')"/>
			     <mx:LinkButton label="Remove option" styleName="linkMenuButton" click="removeOption()" enabled="{propertyList.selectedItem.@canUpdate == 'Y' &amp;&amp; optionGrid.selectedItem != null}"   icon="@Embed(source='../../assets/delete.png')" disabledIcon="@Embed(source='../../assets/delete_disable.png')"/>
			    </mx:HBox>
			    <mx:DataGrid id="optionGrid" dataProvider="{options}" editable="{propertyList.selectedItem.@canUpdate == 'Y' ? true : false}"  height="110" width="100%" showHeaders="true" >
			     <mx:columns>
			      <mx:DataGridColumn headerText="Option" width="120" dataField="@option"/>
			      <mx:DataGridColumn headerText="Order"  width="25" dataField="@sortOrder"/>
			      <mx:DataGridColumn headerText="Active"  width="25" dataField="@isActive"/>
			     </mx:columns>
			    </mx:DataGrid>
			   </mx:VBox>
			  </mx:HBox>
			 </mx:HBox> 
			 <mx:HBox width="100%" verticalGap="0">
			  <mx:Text text="Mage Ontology Code:" width="80"/>
			  <mx:TextInput text="{propertyList.selectedItem.@mageOntologyCode}" change="{setDirty()}" width="192" id="mageOntologyCode"  maxChars="100"/>
			  <mx:Text text="Mage Ontology Definition:" width="65"/>
			  <mx:TextArea text="{propertyList.selectedItem.@mageOntologyDefinition}" change="{setDirty()}" width="100%" id="mageOntologyDefinition"  maxChars="100"/>
			 </mx:HBox>
			 <mx:HBox width="100%" >
			  <mx:Label text="Owner:" width="80"/>
			  <mx:ComboBox width="100%" id="ownerCombo" change="{setDirty()}"  labelField="@displayName" dataProvider="{parentApplication.promptedAppUserList}" ></mx:ComboBox>							         			
			 </mx:HBox>
		</mx:VBox>
		<mx:ControlBar width="100%" horizontalAlign="right"  paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0">
			<util:DirtyNote id="dirty" />
			<mx:Button id="saveButton" label="Save"  enabled="{propertyList.selectedItem.@canUpdate == 'Y' ? true : false}"
					   icon="@Embed('../../assets/action_save.gif')" click="save()" disabledIcon="@Embed(source='../../assets/save_disable.png')">
			</mx:Button>
			<mx:Button label="Close"  click="{PopUpManager.removePopUp(this)}"/>
			
		</mx:ControlBar>
	</mx:VBox>
  </mx:ViewStack>

	
</mx:HDividedBox>
</mx:VBox>
	
</mx:TitleWindow>
