<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				width="969" height="506"
				 creationComplete="{init()}"
				 xmlns:util="views.util.*" 
				 showCloseButton="true" close="{PopUpManager.removePopUp(this);}"
				title="Configure Annotations" paddingLeft="0" paddingBottom="0" paddingRight="0" paddingTop="0">
	
<mx:HTTPService  
	id="getPropertyList" 
	url="GetPropertyList.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onGetPropertyList(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get annotation list', event)"
	method="POST" 
	useProxy="false">
	<mx:request xmlns="">
		<showOptions>Y</showOptions>
	</mx:request>
</mx:HTTPService>
	
	
<mx:HTTPService  
	id="getProperty" 
	url="GetProperty.gx"
	resultFormat="e4x"
	showBusyCursor="true"
	result="onGetProperty(event)"
	fault="parentApplication.onFailHttpRequest('Failed to get annotation', event)"
	method="POST" 
	useProxy="false">
</mx:HTTPService>
	
<mx:HTTPService  
		id="saveProperty" 
		url="SaveProperty.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onSaveProperty(event)"
		fault="parentApplication.onFailHttpRequest('Failed to save annotation', event)"
		method="POST" 
		useProxy="false">
</mx:HTTPService>
	
<mx:HTTPService  
		id="deleteProperty" 
		url="DeleteProperty.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onDeleteProperty(event)"
		fault="parentApplication.onFailHttpRequest('Failed to delete annotation', event)"
		method="POST" 
		useProxy="false">
</mx:HTTPService>
		 
<mx:Script>
	<![CDATA[
		import flash.events.MouseEvent;
		import flash.geom.Point;
		
		import hci.flex.controls.DropdownLabel;
		
		import mx.collections.Sort;
		import mx.controls.Alert;
		import mx.controls.Label;
		import mx.events.CloseEvent;
		import mx.events.FlexEvent;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		import mx.utils.StringUtil;
		
		import views.admin.PropertyEvent;
		import views.util.DeleteAnnotation;
		import views.util.DirtyNote;
		
		private var idProperty:Object = null;
		
		[Bindable]
		private var property:Object;
		
		[Bindable]
		public var filteredAppList:XMLListCollection;
		
		private var filteredAppListSorter:Sort;
		
		private var removePropertyClick:Point;
		
		private var deletePropertyParams:Object
			
		private function setDirty():void {
			if (saveButton.enabled) {
				dirty.setDirty();
			}
		}
		
		private function init():void {
			getPropertyList.send();
			parentApplication.removeEventListener(PropertyEvent.DATA_REFRESHED,
				onPropertyRefreshed);		                                  
			parentApplication.addEventListener(PropertyEvent.DATA_REFRESHED,   
				onPropertyRefreshed);
			
			// We use this technique xml.copy() to prevent duplication of applications 
			// that somehow happens when we add services, then submit request or vice versa
			filteredAppList = new XMLListCollection();
			filteredAppListSorter = new Sort();
			filteredAppListSorter.compareFunction = this.sortApplication;
			filteredAppList.sort = filteredAppListSorter;	
			filteredAppList.filterFunction = filterApplication;
			filteredAppList.refresh();
		}	
		
		private function onGetPropertyList(event:ResultEvent):void {
			this.onPropertyRefreshed(null);
		}
				
		public function onPropertyRefreshed(event:Event):void {
			properties.filterFunction = filterByAnnotations;
			properties.refresh();
			reselectProperty();
			dirty.resetDirty();
		}
		
		private function filterByAnnotations(item:Object):Boolean{
			var criteria:Object = radioButtonGroupTarget.selectedValue;
			
			if(criteria == null || criteria == ""){
				return true;
			}
			else if(criteria == "samples" && item.@forSample == "Y"){
				return true;
			}
			else if(criteria == "analysis" && item.@forAnalysis == "Y"){
				return true;
			}
			else if(criteria == "dataTracks" && item.@forDataTrack == "Y"){
				return true;
			}
			else{
				return false;
			}
		}
			
		private function reselectProperty():void {
			var found:Boolean = false;
			if (idProperty != null) {
				for each(var sc:Object in properties) {
					if (sc.@idProperty == idProperty) {
						propertyList.selectedItem = sc;
						found = true;
						break;
					}
				}
			}
			if (found) {
				theViews.selectedIndex = 1;
				this.onSelectProperty();
				callLater(scrollToCurrent);
			} else {
				theViews.selectedIndex = 0;
			}
		}
		
		private function scrollToCurrent():void {
			propertyList.scrollToIndex(propertyList.selectedIndex);
		}
			
		private function onSelectProperty():void {
			if (propertyList.selectedItem != null) {
				if (propertyList.selectedItem.name() == "Option") {
					theViews.selectedIndex = 0;
				} else {
					theViews.selectedIndex = 1;
					var params:Object =  new Object();
					params.idProperty = propertyList.selectedItem.@idProperty;
					getProperty.send(params);
				}
			}
		}
			
		private function setOwnerCombo():void {
			this.ownerCombo.selectedItem = null;
			this.ownerCombo.enabled = true;
			for each(var user:XML in parentApplication.promptedAppUserList) {
				if (user.@idAppUser == property.@idAppUser) {
					this.ownerCombo.selectedItem = user;
					break;
				}
			}
			this.ownerCombo.enabled = parentApplication.hasPermission("canWriteDictionaries") ? true : false;
		}
			
		private function addOption():void {
			var newOption:XML = new XML("<PropertyOption " +
				" idPropertyOption='PropertyOption" + options.length + "'" +
				" option='enter option here..'" +
				" isActive='Y'" +
				" sortOrder='" + (options.length + 1) + "'" +
				" />");
			options.addItem(newOption);
			setDirty();
		}
		
		private function addBlank():void {
			if(options.length == 0) {
				var newOption:XML = new XML("<PropertyOption " +
					" idPropertyOption='PropertyOption0'" +
					" option=''" +
					" isActive='Y'" +
					" sortOrder='1'" +
					" />");
				options.addItem(newOption);				
			}
		}

	
		private function removeOption():void {
			if (this.optionGrid.selectedItem != null) {
				options.removeItemAt(options.getItemIndex(optionGrid.selectedItem));
				setDirty();
			}
		}
			 
		private function addOrganism():void {
			if (organismCombo.selectedItem != null && organismCombo.selectedItem.@value != '') {
				organisms.addItem(organismCombo.selectedItem);
				setDirty();			
			}
		}
		
		private function removeOrganism():void {
			if (this.organismsGrid.selectedItem != null) {
				organisms.removeItemAt(organisms.getItemIndex(organismsGrid.selectedItem));
				setDirty();
			}
		}
	
			
		private function addPlatform():void {
			if (platformCombo.selectedItem != null && platformCombo.selectedIndex > 0) {
				var codeRequestCategory:String = platformCombo.selectedItem.@codeRequestCategory;
				var codeApplication:String = "";
				var applicationDisplay:String = "";
				if (applicationCombo.selectedItem != null && applicationCombo.selectedIndex > 0) {
					codeApplication = applicationCombo.selectedItem.@codeApplication;
					applicationDisplay = applicationCombo.selectedItem.@application;		
				}
				for each(var pa:XML in platformApplications) {
					if(pa.@codeRequestCategory == codeRequestCategory && pa.@codeApplication == codeApplication) {
						Alert.show('This item is already on the list.');
						return;
					}
				}				
				
				var newPlatformApplication:XML = new XML("<PlatformApplication" +
					" idProperty='" + property.@idProperty + "'" +
					" codeRequestCategory='" + codeRequestCategory  + "'" +
					" display='" + platformCombo.selectedItem.@display  + "'" +
					" codeApplication='" + codeApplication  + "'" +
					" applicationDisplay='" + applicationDisplay  + "'" +
					" />");
				platformApplications.addItem(newPlatformApplication);
				setDirty();			
			}
		}
		
		private function removePlatform():void {
			if (this.platformsGrid.selectedItem != null) {
				platformApplications.removeItemAt(platformApplications.getItemIndex(platformsGrid.selectedItem));
				setDirty();
			}
		}
		
		private function addAnalysisType():void {
			if (analysisTypeCombo.selectedItem != null && analysisTypeCombo.selectedItem.@value != '') {
				analysisTypes.addItem(analysisTypeCombo.selectedItem);
				setDirty();			
			}
		}
		
		private function removeAnalysisType():void {
			if (this.analysisTypesGrid.selectedItem != null) {
				analysisTypes.removeItemAt(analysisTypes.getItemIndex(analysisTypesGrid.selectedItem));
				setDirty();
			}
		}
			
		private function addProperty():void {
			theViews.selectedIndex = 0;
			
			var params:Object = new Object();
			params.idProperty = '';
			params.name = 'enter name here..';
			params.isActive = 'Y';
			params.isRequired = 'N';
			params.forSample =  "Y";
			params.forAnalysis = "N";
			params.forDataTrack = "N";
			if (parentApplication.hasPermission("canWriteDictionaries")) {
				params.idAppUser = '';			
			} else {
				params.idAppUser = parentApplication.getIdAppUser();
			}
			params.codePropertyType = 'TEXT';
			params.optionsXMLString = "<options>"  + "</options>";
			params.organismsXMLString = "<organisms>"  + "</organisms>";
			params.platformsXMLString = "<platformApplications>"  + "</platformApplications>";
			params.analysisTypesXMLString = "<analysisTypes>" + "</analysisTypes>";
			
			saveProperty.send(params);
		}
			
		public function removeProperty(event:MouseEvent, deleteAll:String):void {
			if (propertyList.selectedItem == null) {
				return;
			}
			idProperty = "";
			
			removePropertyClick = new Point(event.localX, event.localY);
			removePropertyClick = event.target.localToGlobal(removePropertyClick);
			
			
			deletePropertyParams = new Object();
			deletePropertyParams.idProperty = propertyList.selectedItem.@idProperty;
			deletePropertyParams.deleteAll = deleteAll;
			
			if(deleteAll == "N") {
				Alert.show("Are you sure you want to remove annotation '" + propertyList.selectedItem.@name + "'?",
					"Confirm",
					(Alert.YES | Alert.NO), this, 
					onPromptToRemoveProperty,						
					parentApplication.iconWarning);				
			} else {
				deleteProperty.send(deletePropertyParams);
			}

		}
		
		private function onPromptToRemoveProperty(event:CloseEvent):void {
			if (event.detail == Alert.YES) {
				deleteProperty.send(deletePropertyParams);
			}
		}		
		
		private function onDeleteProperty(event:ResultEvent): void {
			if (deleteProperty.lastResult.name() == "SUCCESS") {
				parentApplication.getPropertyList.send();
				
			} else if (deleteProperty.lastResult.name() == "NONBLANKVALUES") {
				idProperty = deleteProperty.lastResult.@idProperty;
				parentApplication.getPropertyList.send();
				dispatchEvent(new Event("updateProperties"));				
				var deleteAnnotation:DeleteAnnotation = DeleteAnnotation(PopUpManager.createPopUp(this, DeleteAnnotation, false));
				deleteAnnotation.x = removePropertyClick.x - (deleteAnnotation.width/2);		
				deleteAnnotation.y = removePropertyClick.y;
				deleteAnnotation.init(this);
			} else {
				Alert.show(deleteProperty.lastResult..ACTMESSAGE.@TEXT);
			}
		}
			
			
		private function save():void {
			if (propertyList.selectedItem == null) {
				return;
			}
			
			scName.text = StringUtil.trim(scName.text);
			var propertyName:String = scName.text.toLowerCase();
			
			if(propertyName == "description") {
				Alert.show("'Description' is a reserved word. Please select a different name for the annotation.");
				return;
			}
			
			if(propertyName == "sample name") {
				Alert.show("'Sample Name' is a reserved term. Please select a different name for the annotation.");
				return;
			}
			
			if(propertyName == "organism") {
				Alert.show("'Organism' is a reserved word. Please select a different name for the annotation.");
				return;
			}
			
			if (!this.sample.selected && !this.dataTrack.selected && !this.analysis.selected) {
				Alert.show("Please choose object the annotation applies to.");
				this.sample.setFocus();
				return;
			}
			
			for each(var sc:Object in properties) {
				var thisPropName:String = StringUtil.trim(sc.@name);
				thisPropName = thisPropName.toLowerCase();
				if(propertyList.selectedItem != sc && propertyName == thisPropName) {
					Alert.show('"' + scName.text + '" has been used as the name for a previously defined annotation. Please choose another name.');
					return;
				}
			}
			
			var params:Object = new Object();
			params.idProperty = property.@idProperty;
			params.name = scName.text;
			params.isActive = this.isActive.selected ? "Y" : "N";
			params.isRequired = this.isRequired.selected ? "Y" : "N";
			params.forSample = this.sample.selected ? "Y" : "N";
			params.forDataTrack = this.dataTrack.selected ? "Y" : "N";
			params.forAnalysis = this.analysis.selected ? "Y" : "N";
			params.mageOntologyCode = mageOntologyCode.text;
			params.mageOntologyDefinition = mageOntologyDefinition.text; 
			params.description = description.text; 
			if (parentApplication.hasPermission("canWriteDictionaries")) {
				params.idAppUser = this.ownerCombo.selectedItem != null ? this.ownerCombo.selectedItem.@idAppUser : "";			
			} else {
				params.idAppUser = parentApplication.getIdAppUser();
			}
			params.codePropertyType = this.characteristicTypeRadioGroup.selectedValue;
			params.optionsXMLString = "<options>" + this.options.toXMLString() + "</options>";
			params.organismsXMLString = "<organisms>" + this.organisms.toXMLString() + "</organisms>";
			params.platformsXMLString = "<platformApplications>" + this.platformApplications.toXMLString() + "</platformApplications>";
			params.analysisTypesXMLString = "<analysisTypes>" + this.analysisTypes.toXMLString() + "</analysisTypes>";
			
			saveProperty.send(params);
			
		}
		
		private function onGetProperty(event:ResultEvent): void {
			if (getProperty.lastResult.name() == "PropertyList") {
				property = getProperty.lastResult..Property;
				organismCombo.selectedItem = null;
				platformCombo.selectedItem = null;
				analysisTypeCombo.selectedItem = null;
				
				setOwnerCombo();
				
				dirty.resetDirty();

			} else {
				Alert.show(saveProperty.lastResult..ACTMESSAGE.@TEXT);
			}
		}	
		
			
		private function onSaveProperty(event:ResultEvent): void {
			if (saveProperty.lastResult.name() == "SUCCESS") {
				idProperty = saveProperty.lastResult.@idProperty;
				parentApplication.getPropertyList.send();
				dispatchEvent(new Event("updateProperties"));
				getPropertyList.send();
			} else {
				Alert.show(saveProperty.lastResult..ACTMESSAGE.@TEXT);
			}
		}	
			
		private function filterApplication(item:Object):Boolean {
			var doesMatchRequestCategory:Boolean = false;
			if (platformCombo.selectedItem != null && platformCombo.selectedItem.@value != '') {
				var codeRequestCategory:String = platformCombo.selectedItem.@value;
				if (item.@value == "") {
					// Leave blank item on the list
					return true;
				} 
				
				if (item.@isActive == 'N') {
					return false;
				}
				
				var theApplications:XMLList = parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategoryApplication').DictionaryEntry.(@value != '' && @codeApplication == item.@value.toString());
				for each (var xref:Object in theApplications) {
					if (xref.@codeRequestCategory.toString() == codeRequestCategory) {
						doesMatchRequestCategory = true;
						break;
					}
				}
			}
			
			
			return doesMatchRequestCategory;
		}
		
		// Sort application by sortOrder field
		private function sortApplication(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var app1:String = obj1.@application;
				var app2:String = obj2.@application;
				
				app1 = app1.toLowerCase();
				app2 = app2.toLowerCase();
				
				if (app1 < app2) {
					return -1;
				} else if (app1 > app2) {
					return 1;
				} else {
					return 0;
				}
			}			
		}
		
		public function sortPlatformApplications(obj1:Object, obj2:Object, fields:Array=null):int {
			if (obj1 == null && obj2 == null) {
				return 0;
			} else if (obj1 == null) {
				return 1;
			} else if (obj2 == null) {
				return -1;
			} else {
				var ed1:String = obj1.@display;
				var ed2:String = obj2.@display;			

				if (ed1 < ed2) {
					return -1;
				} else if (ed1 > ed2) {
					return 1;
				} else {
					ed1 = obj1.@applicationDisplay;
					ed2 = obj2.@applicationDisplay;					
					if (ed1 < ed2) {
						return -1;
					} else if (ed1 > ed2) {
						return 1;
					} else {				
						return 0;
					}
				}
			}
		}
		
		private function refreshApplicationFilter():void {
			filteredAppList.filterFunction = filterApplication;
			filteredAppList.refresh();
		}
		
		private function refresh(event:Event):void{
			radioButtonGroupTarget.selection = null;
			radioButtonGroupTarget.selectedValue = null;
			init();
		}
		public function getTreeIcon(item:Object):Class {
			return null;
		}
		
			
	]]>
</mx:Script>
	
<mx:XMLListCollection id="properties" source="{getPropertyList.lastResult..Property}"/>
<mx:XMLListCollection id="options" source="{property.options.PropertyOption}"/>
<mx:XMLListCollection id="organisms" source="{property.organisms.Organism}"/>
<mx:XMLListCollection id="platformApplications" source="{property.platformApplications.PlatformApplication}" sort="{platformApplicationSorter}"/>
<mx:Sort id="platformApplicationSorter" compareFunction="sortPlatformApplications" unique="true"/>	
<mx:XMLListCollection id="analysisTypes" source="{property.analysisTypes.AnalysisType}"/>
<mx:VBox width="100%" height="100%" verticalGap="0"  paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0">

<mx:HBox width="100%" paddingBottom="6" verticalAlign="middle" backgroundSize="100%" backgroundImage="@Embed(source='../../assets/filterBarGrey.png')"  paddingLeft="2" paddingRight="2" paddingTop="6">
	<mx:LinkButton label="Add" click="addProperty()"  disabledIcon="@Embed(source='../../assets/page_add_disable.png')" icon="@Embed(source='../../assets/page_add.png')"  fontSize="11" textDecoration="underline"/>
	<mx:LinkButton label="Remove" styleName="linkMenuButton" mouseUp="removeProperty(event, 'N')" enabled="{propertyList.selectedItem != null &amp;&amp; propertyList.selectedItem.@canDelete == 'Y'}"   disabledIcon="@Embed(source='../../assets/page_delete_disable.png')" icon="@Embed(source='../../assets/page_delete.png')" fontSize="11" textDecoration="underline"/>
	<mx:Spacer width="100%"/>
	<mx:VRule height = "20" />
	<mx:Spacer width="100%"/>
	<mx:Text text="Show Annotations for" />
	<mx:RadioButtonGroup id="radioButtonGroupTarget" itemClick="onPropertyRefreshed(null)"/>
	<mx:RadioButton label="Samples" value="samples" group="{radioButtonGroupTarget}" id="showSampleAnnotations" fontSize="10"/>
	<mx:RadioButton label="Analysis" value="analysis" group="{radioButtonGroupTarget}" id="showAnalysisAnnotations" fontSize="10"/>
	<mx:RadioButton label="Data Tracks" value="dataTracks" group="{radioButtonGroupTarget}" id="showDataTrackAnnotations"  fontSize="10"/>
	<mx:Spacer width="100%"/>
	<mx:VRule height="20"/>
	<mx:Spacer width="100%"/>
	<mx:LinkButton label="Refresh" icon="@Embed(source='../../assets/refresh.png')" click="refresh(event)"/>
</mx:HBox>
	 
	
<mx:HDividedBox height="100%" width="100%"  horizontalGap="6" paddingLeft="4" paddingBottom="4" paddingRight="4" paddingTop="4">
  <mx:VBox height="100%" width="410">
		<mx:AdvancedDataGrid id="propertyList" width="100%" height="100%" labelField="@name" 
				 itemClick="{onSelectProperty()}" wordWrap="true" variableRowHeight="true"  
				 groupItemRenderer="views.renderers.PropertyGroupedItem"
				 iconFunction="getTreeIcon">
			<mx:dataProvider> 
				<mx:HierarchicalData source="{properties}"/>
			</mx:dataProvider>						  
			<mx:columns>
				<mx:AdvancedDataGridColumn dataField="@name" width="180" headerText="Annotation"  wordWrap="true" >
					<mx:itemRenderer >
						<mx:Component>
							<mx:HBox horizontalScrollPolicy="off" verticalGap="0" >
								<mx:Label text="{data.@name}" 
										  fontWeight="{data.@isActive == 'Y' &amp;&amp; data.@isRequired == 'Y' ? 'bold' : 'normal'}"  
										  fontStyle="{data.@isActive == 'N' || data.@isRequired == 'Y'  ? 'italic' : 'normal'}"
										  color="{data.@isActive == 'N' ? 0x647478 : 0x000000}">			                           	
								</mx:Label>
							</mx:HBox>
						</mx:Component>
					</mx:itemRenderer>
					
				</mx:AdvancedDataGridColumn>
				<mx:AdvancedDataGridColumn dataField="@appliesToOrganism" width="80" headerText="Organism" wordWrap="true"/>
				<mx:AdvancedDataGridColumn dataField="@appliesToAnalysisType" width="80" visible="{showAnalysisAnnotations.selected}" headerText="Analysis Type" wordWrap="true"/>
				<mx:AdvancedDataGridColumn dataField="@appliesToPlatform" width="150" visible="{showSampleAnnotations.selected}" headerText="Platform" wordWrap="true"/>
			</mx:columns>
		</mx:AdvancedDataGrid>
  </mx:VBox>	
  <mx:ViewStack id="theViews"  width="100%" height="100%" creationPolicy="all">
	<mx:VBox width="100%" height="100%" verticalGap="0" paddingLeft="4" paddingTop="4" paddingRight="4" paddingBottom="0" backgroundColor="#FFFFFF"/>		
		<mx:VBox width="100%" height="100%" verticalGap="1" styleName="panelBox" paddingLeft="4" paddingTop="4" paddingRight="4" paddingBottom="0">		
			<mx:TabNavigator tabWidth="140" width="100%" height="100%">
				<mx:VBox  label="Annotation" width="100%" height="100%" styleName="form" paddingTop="4" paddingBottom="4" paddingRight="4" paddingLeft="4" verticalGap="10" borderStyle="none">			 
					<mx:HBox width="100%" verticalGap="0">
						<mx:Label text="Name" width="90"/>
						<mx:TextInput text="{property.@name}" change="{setDirty()}" width="100%" id="scName"  maxChars="50"/>
						<mx:HBox >
							<mx:CheckBox label="Active" id="isActive"  click="setDirty()">
								<mx:selected>{property.@isActive == 'Y' ? true : false}</mx:selected>
							</mx:CheckBox>
							<mx:Spacer width="80"/>
						</mx:HBox>
					</mx:HBox>
					<mx:HBox height="20" width="100%"  verticalAlign="middle">
						<mx:HBox verticalAlign="middle">
							<mx:Text text="Annotates" width="90"/>
							<mx:HBox>
								<mx:CheckBox label="Sample" id="sample" click="setDirty()">
									<mx:selected>{property.@forSample == 'Y' ? true : false}</mx:selected>
								</mx:CheckBox>
								<mx:CheckBox label="Data Track" id="dataTrack" click="setDirty()">
									<mx:selected>{property.@forDataTrack == 'Y' ? true : false}</mx:selected>
								</mx:CheckBox>
								<mx:CheckBox label="Analysis" id="analysis" click="setDirty()">
									<mx:selected>{property.@forAnalysis == 'Y' ? true : false}</mx:selected>
								</mx:CheckBox>
							</mx:HBox>
						</mx:HBox>
					</mx:HBox>
					<mx:HBox width="100%"  verticalAlign="middle">
						<mx:Label text="Required" width="90"/>
						<mx:CheckBox label="(Annotation must be filled in)" id="isRequired"  click="setDirty()">
							<mx:selected>{property.@isRequired == 'Y' ? true : false}</mx:selected>
						</mx:CheckBox>
					</mx:HBox>
					<mx:HBox width="100%" verticalGap="0" height="65">
						<mx:Text text="Description" width="90"/>
						<mx:TextArea text="{property.@description}" change="{setDirty()}" width="100%" height="65" id="description"  maxChars="2000"/>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Label text="Owner" width="90"/>
						<mx:ComboBox width="200" id="ownerCombo" change="{setDirty()}"  labelField="@displayName" dataProvider="{parentApplication.promptedAppUserList}" ></mx:ComboBox>
					</mx:HBox>
					<mx:HBox width="100%" verticalGap="0" height="100%" verticalAlign="top">
						<mx:Label text="Type" width="90"/>
						<mx:VBox verticalGap="1" height="100%" paddingTop="10">
							<mx:RadioButtonGroup id="characteristicTypeRadioGroup"  selectedValue="{property.@codePropertyType}">
							</mx:RadioButtonGroup>
							<mx:RadioButton label="Text"  groupName="characteristicTypeRadioGroup" value="TEXT" paddingTop="0" paddingBottom="0"  click="setDirty()" />
							<mx:RadioButton label="URL"  groupName="characteristicTypeRadioGroup" value="URL" paddingBottom="0" paddingTop="0"  click="setDirty()" />
							<mx:RadioButton label="Checkbox"  groupName="characteristicTypeRadioGroup" value="CHECK" paddingTop="0" paddingBottom="0"  click="setDirty()" />
							<mx:RadioButton label="Dropdown (single selection)"  groupName="characteristicTypeRadioGroup" value="OPTION" paddingBottom="0" paddingTop="0"  click="addBlank();setDirty()" />
							<mx:RadioButton label="Dropdown (multiple selection)"  groupName="characteristicTypeRadioGroup" value="MOPTION" paddingBottom="0" paddingTop="0" click="setDirty()" />
						</mx:VBox>
						<mx:HBox width="100%"  visible="{characteristicTypeRadioGroup.selectedValue == 'OPTION' || characteristicTypeRadioGroup.selectedValue == 'MOPTION'}" verticalGap="0" height="100%">
							<mx:VBox verticalGap="0" height="100%" width="100%">
								<mx:HBox>
									<mx:LinkButton label="Add option" styleName="linkMenuButton" click="addOption()"   enabled="{propertyList.selectedItem.@canUpdate == 'Y' ? true : false}" icon="@Embed(source='../../assets/add.png')" disabledIcon="@Embed(source='../../assets/add_disable.png')"/>
									<mx:LinkButton label="Remove option" styleName="linkMenuButton" click="removeOption()" enabled="{propertyList.selectedItem.@canUpdate == 'Y' &amp;&amp; optionGrid.selectedItem != null}"   icon="@Embed(source='../../assets/delete.png')" disabledIcon="@Embed(source='../../assets/delete_disable.png')"/>
								</mx:HBox>
								<mx:DataGrid id="optionGrid" dataProvider="{options}" editable="{propertyList.selectedItem.@canUpdate == 'Y' ? true : false}" width="100%" showHeaders="true"  height="100%">
									<mx:columns>
										<mx:DataGridColumn headerText="Option" width="120" dataField="@option"/>
										<mx:DataGridColumn headerText="Order"  width="25" dataField="@sortOrder"/>
										<mx:DataGridColumn headerText="Active"  width="25" dataField="@isActive"/>
									</mx:columns>
								</mx:DataGrid>
							</mx:VBox>
						</mx:HBox>
					</mx:HBox> 
				</mx:VBox>
				<mx:VBox label="Applies To" width="100%" height="100%" verticalGap="15" paddingLeft="4" paddingRight="4" paddingBottom="4">
					<mx:VBox   verticalGap="1" height="100%"  width="100%">
						<mx:Text text="Only show for these platforms/applications:" width="100%"/>
						<mx:HBox horizontalAlign="left" horizontalGap="2">
							<mx:ComboBox width="225" dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry}" id="platformCombo" labelField="@display" prompt="Select platform" change="refreshApplicationFilter();" >			       	
							</mx:ComboBox>
							<mx:ComboBox width="170" dataProvider="{filteredAppList}" id="applicationCombo" labelField="@application" prompt="Application (optional)" >			       	
							</mx:ComboBox>
							<mx:Button click="addPlatform()" icon="@Embed(source='../../assets/add.png')" disabledIcon="@Embed(source='../../assets/add_disable.png')" width="25">
								<mx:enabled>{propertyList.selectedItem.@canUpdate == 'Y' &amp;&amp; platformCombo.selectedItem != null &amp;&amp; platformCombo.selectedIndex > 0 ? true : false}</mx:enabled>
							</mx:Button>
							<mx:Button click="removePlatform()" icon="@Embed(source='../../assets/delete.png')" 
									   disabledIcon="@Embed(source='../../assets/delete_disable.png')" 
									   enabled="{propertyList.selectedItem.@canUpdate == 'Y' &amp;&amp; platformsGrid.selectedItem != null}" width="25"/>
						</mx:HBox>
						<mx:DataGrid id="platformsGrid" showHeaders="false" dataProvider="{platformApplications}" width="100%" height="100%">
							<mx:columns>
								<mx:DataGridColumn dataField="@display"/>
								<mx:DataGridColumn dataField="@applicationDisplay"/>
								<!--mx:DataGridColumn headerText="Application"  
								id="applicationCol"
								dataField="@codeApplication"  
								editorDataField="value" 
								sortable="true" 
								editable="true" 
								rendererIsEditor="false"  
								itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Application').DictionaryEntry, '@display', '@value', '@codeApplication')}"                
								itemEditor="{views.renderers.ComboBox.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Application').DictionaryEntry, '@display', '@value', '@codeApplication', null, true)}"/-->															 
							</mx:columns>
						</mx:DataGrid>			   	
					</mx:VBox>
					<mx:VBox width="100%" height="100%" verticalGap="0">
						<mx:VBox   verticalGap="1" height="100%"  width="100%">
							<mx:Text text="Only show for these organisms:" width="100%"/>
							<mx:HBox horizontalAlign="left" horizontalGap="2">
								<mx:ComboBox width="265" dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.OrganismLite').DictionaryEntry}" id="organismCombo" labelField="@display" >			       	
								</mx:ComboBox>
								<mx:Button click="addOrganism()" icon="@Embed(source='../../assets/add.png')" disabledIcon="@Embed(source='../../assets/add_disable.png')" width="25">
									<mx:enabled>{propertyList.selectedItem.@canUpdate == 'Y' &amp;&amp; organismCombo.selectedItem != null &amp;&amp; organismCombo.selectedIndex > 0 ? true : false}</mx:enabled>
								</mx:Button>
								<mx:Button click="removeOrganism()" icon="@Embed(source='../../assets/delete.png')" 
										   disabledIcon="@Embed(source='../../assets/delete_disable.png')" 
										   enabled="{propertyList.selectedItem.@canUpdate == 'Y' &amp;&amp; organismsGrid.selectedItem != null}" width="25"/>
							</mx:HBox>
							<mx:DataGrid id="organismsGrid" showHeaders="false" dataProvider="{organisms}" width="100%" height="100%">
								<mx:columns>
									<mx:DataGridColumn dataField="@display" headerText="Name"/>
								</mx:columns>
							</mx:DataGrid>			   	
						</mx:VBox>
					</mx:VBox>
						<mx:VBox   verticalGap="1" height="100%"  width="100%">
							<mx:Label text="Only show for these analysis types:" width="100%"/>
								<mx:HBox horizontalAlign="left" horizontalGap="2">
									<mx:ComboBox width="265" dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.AnalysisType').DictionaryEntry}" id="analysisTypeCombo" labelField="@display" >			       	
									</mx:ComboBox>
									<mx:Button click="addAnalysisType()" icon="@Embed(source='../../assets/add.png')" disabledIcon="@Embed(source='../../assets/add_disable.png')" width="25">
										<mx:enabled>{propertyList.selectedItem.@canUpdate == 'Y' &amp;&amp; analysisTypeCombo.selectedItem != null &amp;&amp; analysisTypeCombo.selectedIndex > 0 ? true : false}</mx:enabled>
									</mx:Button>
									<mx:Button click="removeAnalysisType()" icon="@Embed(source='../../assets/delete.png')" 
											   disabledIcon="@Embed(source='../../assets/delete_disable.png')" 
											   enabled="{propertyList.selectedItem.@canUpdate == 'Y' &amp;&amp; analysisTypesGrid.selectedItem != null}" width="25"/>
								</mx:HBox>
								<mx:DataGrid id="analysisTypesGrid" showHeaders="false" dataProvider="{analysisTypes}" width="100%" height="100%">
									<mx:columns>
										<mx:DataGridColumn dataField="@display" headerText="Name"/>
									</mx:columns>
								</mx:DataGrid>			   	
						</mx:VBox>				 
					
				</mx:VBox>
				<mx:VBox width="100%" height="100%" label="Mage Ontology" paddingLeft="4" paddingRight="4" paddingBottom="4">
					<mx:HBox width="100%" verticalGap="0">
						<mx:Text text="Mage Ontology Code:" width="80"/>
						<mx:TextInput text="{property.@mageOntologyCode}" change="{setDirty()}" width="192" id="mageOntologyCode"  maxChars="100"/>
						<mx:Text text="Mage Ontology Definition:" width="65"/>
						<mx:TextArea text="{property.@mageOntologyDefinition}" change="{setDirty()}" width="100%" id="mageOntologyDefinition"  maxChars="100"/>
					</mx:HBox>
					
				</mx:VBox>
				</mx:TabNavigator>
			<mx:ControlBar width="100%" horizontalAlign="right"  paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0">
				<util:DirtyNote id="dirty" />
				<mx:Button id="saveButton" label="Save"  enabled="{property.@canUpdate == 'Y' ? true : false}"
						   icon="@Embed('../../assets/action_save.gif')" click="save()" disabledIcon="@Embed(source='../../assets/save_disable.png')">
				</mx:Button>
				<mx:Button label="Close"  click="{PopUpManager.removePopUp(this);}"/>
				
			</mx:ControlBar>
		</mx:VBox>
	  
	  <mx:VBox width="100%" height="100%" verticalGap="0" paddingLeft="4" paddingTop="4" paddingRight="4" paddingBottom="0" backgroundColor="#FFFFFF">		
		  <mx:HBox width="100%" verticalGap="0" >
			  <mx:Text text="Option" width="90"/>
			  <mx:Text text="{propertyList.selectedItem.@option}" width="100%"   />
		  </mx:HBox>

	  
	  </mx:VBox>

  </mx:ViewStack>

	
</mx:HDividedBox>
</mx:VBox>
	
</mx:TitleWindow>
