<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				width="746" height="380" 
				creationComplete="{init()}"
				xmlns:views="*.views" 
				xmlns:util="views.util.*" 
				showCloseButton="true" close="{PopUpManager.removePopUp(this)}"
				title="Configure Billing Account Fields">
	
	<mx:HTTPService  
		id="saveBillingAccountFieldsConfiguration" 
		url="SaveBillingAccountFieldsConfiguration.gx"
		resultFormat="e4x"
		showBusyCursor="false"
		result="onSaveBillingAccountFieldsConfiguration(event)"
		fault="parentApplication.onFailHttpRequest('Failed to save billing account configuration', event)"
		method="POST" 
		useProxy="false">
	</mx:HTTPService>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.validators.ValidationResult;
			
			import views.renderers.CheckBoxRenderer;
			import views.util.DirtyNote;
			
			[Bindable]
			private var internalFields:XMLListCollection;
			[Bindable]
			private var otherFields:XMLListCollection;
			
			private function init():void {
				internalFields = new XMLListCollection(parentApplication.internalAccountFieldsConfigurationList.copy());
				otherFields = new XMLListCollection(parentApplication.otherAccountFieldsConfigurationList.copy());
			}	
			
			private function refresh():void {
				init();
				this.internalFields.refresh();
				this.otherFields.refresh();
				dirty.resetDirty();
			}
			
			private function save():void {
				for each (var i:Object in internalFields) {
					var sortResult:ValidationResultEvent = sortOrderValidator.validate(i.@sortOrder);
					if (sortResult.type == ValidationResultEvent.INVALID) {
						Alert.show(sortResult.message, "Error", Alert.OK, null, null, parentApplication.iconError);
						return;
					}
					var minResult:ValidationResultEvent = rangeValidator.validate(i.@minLength);
					if (minResult.type == ValidationResultEvent.INVALID) {
						Alert.show(minResult.message, "Error", Alert.OK, null, null, parentApplication.iconError);
						return;
					}
					var maxResult:ValidationResultEvent = rangeValidator.validate(i.@maxLength);
					if (maxResult.type == ValidationResultEvent.INVALID) {
						Alert.show(maxResult.message, "Error", Alert.OK, null, null, parentApplication.iconError);
						return;
					}
				}
				
				var params:Object = new Object();
				params.internalFields = "<internalFields>" + this.internalFields.toXMLString() + "</internalFields>";
				params.otherFields = "<otherFields>" + this.otherFields.toXMLString() + "</otherFields>";
				
				saveBillingAccountFieldsConfiguration.send(params);
			}
			
			private function onSaveBillingAccountFieldsConfiguration(event:ResultEvent): void {
				if (saveBillingAccountFieldsConfiguration.lastResult.name() == "SUCCESS") {
					parentApplication.getAccountFieldsConfiguration.send();
					this.dirty.resetDirty();
				} else {
					mx.controls.Alert.show(saveBillingAccountFieldsConfiguration.lastResult..ACTMESSAGE.@TEXT);
				}
			}
		]]>
	</mx:Script>
	<mx:NumberValidator id="sortOrderValidator"
						lowerThanMinError="Sort order must be between 0 and 9."
						exceedsMaxError="Sort order must be between 0 and 9."
						invalidCharError="Sort order must be an integer."
						domain="int"
						minValue="0"
						maxValue="9"/>
	<mx:NumberValidator id="rangeValidator"
						lowerThanMinError="Min/Max range must be between 1 and 20."
						exceedsMaxError="Min/Max range must be between 1 and 20."
						invalidCharError="Min/Max range must be an integer."
						domain="int"
						minValue="1"
						maxValue="20"/>

	<mx:VBox width="100%" height="100%" styleName="formTabBody"  paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4" verticalGap="0">
		<mx:TabBar dataProvider="{accountConfigurationViews}" 
				   useHandCursor="true" paddingBottom="0" paddingTop="2" height="25" styleName="formTabBar">
		</mx:TabBar>
		<mx:ViewStack id="accountConfigurationViews"  paddingTop="0" width="100%" height="100%"  paddingLeft="0">
			<mx:VBox id="internalFieldsView" width="100%" height="100%" 
					 label="Internal Fields" paddingLeft="4" paddingBottom="4" paddingRight="4" paddingTop="4">
				<mx:DataGrid  id="internalFieldsList" 
							  dataProvider="{internalFields}"  
							  itemFocusOut="dirty.setDirty()"
							  sortableColumns="false"
							  width="100%" height="100%" editable="true">
					<mx:columns>
						<mx:DataGridColumn headerText="Field" width="15" dataField="@fieldName" editable="false"/>
						<mx:DataGridColumn headerText="Include?" width="15" dataField="@include" 
										   itemRenderer="{views.renderers.CheckBoxRenderer.create(dirty)}"
										   editable="false"
										   editorDataField="selected"/>
						<mx:DataGridColumn id="sortOrder" headerText="Order" width="10" dataField="@sortOrder"/>
						<mx:DataGridColumn headerText="Display Name" width="20" dataField="@displayName"/>
						<mx:DataGridColumn headerText="Required?" width="15" dataField="@isRequired" 
										   itemRenderer="{views.renderers.CheckBoxRenderer.create(dirty)}"
										   editable="false"
										   editorDataField="selected"/>
						<mx:DataGridColumn headerText="Numeric?" width="15" dataField="@isNumber" 
										   itemRenderer="{views.renderers.CheckBoxRenderer.create(dirty)}"
										   editable="false"
										   editorDataField="selected"/>
						<mx:DataGridColumn headerText="Min. Length" width="20" dataField="@minLength"/>
						<mx:DataGridColumn headerText="Max. Length" width="20" dataField="@maxLength"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
			<mx:VBox id="otherFieldsView" width="100%" height="100%" 
					 label="Other Fields" paddingLeft="4" paddingBottom="4" paddingRight="4" paddingTop="4">
				<mx:DataGrid  id="otherFieldsList" 
							  dataProvider="{otherFields}"  
							  itemFocusOut="dirty.setDirty()"
							  sortableColumns="false"
							  width="100%" height="100%" editable="true">
					<mx:columns>
						<mx:DataGridColumn headerText="Field" width="50" dataField="@fieldName" editable="false"/>
						<mx:DataGridColumn headerText="Include?" width="10" dataField="@include" 
										   itemRenderer="{views.renderers.CheckBoxRenderer.create(dirty)}"
										   editable="false"
										   editorDataField="selected"/>
						<mx:DataGridColumn headerText="Required?" width="10" dataField="@isRequired" 
										   itemRenderer="{views.renderers.CheckBoxRenderer.create(dirty)}"
										   editable="false"
										   editorDataField="selected"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
		</mx:ViewStack>
		<mx:ControlBar width="508" horizontalAlign="right"  paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0">
			<util:DirtyNote id="dirty" />
			<mx:Button label="Refresh"  click="{refresh()}"/>
			<mx:Button id="saveButton" label="Save"
					   icon="@Embed('../../assets/action_save.gif')" click="save()" disabledIcon="@Embed(source='../../assets/save_disable.png')">
			</mx:Button>
			<mx:Button label="Close"  click="{PopUpManager.removePopUp(this)}"/>
		</mx:ControlBar>
	</mx:VBox>
	
</mx:TitleWindow>
