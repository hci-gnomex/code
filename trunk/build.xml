<project name="gnomex" default="all" basedir="./">

  <!-- ============================================== -->
	<!--                                                -->
	<!-- Initialization                                 -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="init">

    	<!-- General config -->
        <tstamp />
        <property environment="env" />
        <property file="${basedir}/build.properties" />
    	

        <!-- Directories -->
       	<mkdir dir="${build.dir}" />
       	<mkdir dir="${build.class.dir}" />
       	<mkdir dir="${dist.dir}" />

		<!-- Paths -->
        <path id="project.class.path">
          <fileset dir="${lib.hcienv.dir}"          includes="*.jar" />
          <fileset dir="${lib.dir}" 				includes="*.jar" />
          <fileset dir="${lib.orion.dir}" 		    includes="*.jar" />
          <fileset dir="${orion.dir}" 			    includes="*.jar" />
        </path>
		
        <path id="project.tomcat.class.path">
            <fileset dir="${lib.dir}" 				    includes="*.jar" />
            <fileset dir="${lib.tomcat.dir}" 		    includes="*.jar" />
        	<fileset dir="${lib.tomcat.common.dir}"     includes="*.jar" />
        	<fileset dir="${lib.openejb.dir}" 		    includes="*.jar" />
        </path>		
		
		<!-- Up to date check on flex app -->
		<uptodate property="flexUpToDate" targetfile="${build.dir}/${flexapp.name}.swf">
		    	<srcfiles dir="${flexapp.dir}">
	  	    	<include name="**/*.as"/>
	    	  	<include name="**/*.mxml"/>
	    		</srcfiles>
	  	</uptodate>
		


	</target>





	<!-- ============================================== -->
	<!--                                                -->
	<!-- All                                            -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="all">
		<antcall target="clean" />
		<antcall target="compile" />
		<antcall target="jar" />
		<antcall target="clientjar"/>
		<antcall target="flex"/>
		<antcall target="war" />
		<antcall target="ear" />
		<antcall target="deploy" />
	</target>

	<!-- ============================================== -->
	<!--                                                -->
	<!-- All (tomcat)                                   -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="all-tomcat">
		<antcall target="clean" />
		<antcall target="compile-tomcat" />
		<antcall target="jar-tomcat" />
		<antcall target="clientjar"/>
		<antcall target="flex"/>
		<antcall target="war-tomcat" />
		<antcall target="deploy-tomcat" />
	</target>




	<!-- ============================================== -->
	<!--                                                -->
	<!-- Clean                                          -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="clean" depends="init">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Cleaning                                             +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>


		<delete>
			<fileset dir="${build.dir}" />
		</delete>
	</target>









	<!-- ============================================== -->
	<!--                                                -->
	<!-- Compile                                        -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="compile" depends="init">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Compiling                                            +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>

      	<javac
            destdir="${build.class.dir}"
            debug="${compiler.debug}"
            deprecation="${compiler.deprecation}"
            compiler="${compiler.type}"
            classpathref="project.class.path">

            <src path="${src.dir}" />
      		<exclude name="**/fdt/**"/>      		
      		<exclude name="**/tomcat/**"/>      		
		    <exclude name="**/*Tomcat**"/>      		
        </javac>
	</target>

	
	<!--                                                -->
	<!-- Compile client                                 -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="compile-client" depends="init">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Compiling (client)                                   +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>

      	<javac
            destdir="${build.class.dir}"
            debug="${compiler.debug}"
            deprecation="${compiler.deprecation}"
            compiler="${compiler.type}"
            classpathref="project.class.path">

            <src path="${src.dir}" />
      		<include name="**/httpclient/**"/>      		
        </javac>
	</target>
	
	<!-- ============================================== -->
	<!--                                                -->
	<!-- Compile                                        -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="compile-tomcat" depends="init">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Compiling (tomcat)                                   +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>

      	<javac
            destdir="${build.class.dir}"
            debug="${compiler.debug}"
            deprecation="${compiler.deprecation}"
            compiler="${compiler.type}"
            classpathref="project.tomcat.class.path">

            <src path="${src.dir}"/>
            <exclude name="**/fdt/**"/>      		
          	<exclude name="**/security/SecurityManager**"/>      		
        </javac>
	</target>




	<!-- ============================================== -->
	<!--                                                -->
	<!-- Jar                                            -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="jar" depends="init, compile">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Building jar files                                   +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>
		<delete>
			<fileset dir="${dist.dir}" includes="${jar.name}" />
		</delete>

      	<jar basedir="${build.class.dir}"
             excludes="**"
             jarfile="${dist.dir}/${jar.name}">

            <fileset dir="${build.class.dir}">
            	<exclude name="hci/gnomex/httpclient/*.class" />
            	<exclude name="hci/gnomex/daemon/FDTFileDaemon.class" />
            	<include name="**/*.class" />
            	<include name="**/*.properties" />
            </fileset>

			<manifest>
			  <attribute name="class-path" value="log4j.jar"/>
					<section name="gnomex">
	  	      <attribute name="Built-By" value="${user.name}"/>
  	  	    <attribute name="Implementation-Version" value="${gnomex_version}"/>
					</section>
    		</manifest>

            <metainf dir="${metainf.dir}/jar" includes="*.xml" />
        </jar>
		

	</target>
	
	<!-- ============================================== -->
	<!--                                                -->
	<!-- Jar                                            -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="jar-tomcat" depends="init, compile-tomcat">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Building jar files  (tomcat)                         +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>
		<delete>
			<fileset dir="${dist.dir}" includes="${jar.name}" />
		</delete>

      	<jar basedir="${build.class.dir}"
             excludes="**"
             jarfile="${dist.dir}/${jar.name}">

            <fileset dir="${build.class.dir}">
            	<exclude name="hci/gnomex/httpclient/*.class" />
            	<exclude name="hci/gnomex/daemon/FDTFileDaemon.class" />
            	<exclude name="hci/gnomex/utility/CachedSessionFactory.class" />
            	<exclude name="hci/gnomex/utility/CachedGuestSessionFactory.class" />
            	<include name="**/*.class" />
            	<include name="**/*.properties" />
            </fileset>

			<manifest>
			  <attribute name="class-path" value="log4j.jar"/>
					<section name="gnomex">
	  	      <attribute name="Built-By" value="${user.name}"/>
  	  	    <attribute name="Implementation-Version" value="${gnomex_version}"/>
					</section>
    		</manifest>

            <metainf dir="${metainf.dir}/jar" includes="ejb-jar.xml" />
        </jar>
		

	</target>

	
	<!-- ============================================== -->
	<!--                                                -->
	<!-- Client Jar                                     -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="clientjar" depends="init, compile-client">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Building jar files                                   +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>
		<delete>
			<fileset dir="${dist.dir}" includes="${clientjar.name}" />
		</delete>

      	<jar basedir="${build.class.dir}"
             excludes="**"
             jarfile="${dist.dir}/${clientjar.name}">

            <fileset dir="${build.class.dir}">
            	<include name="hci/gnomex/httpclient/*.class" />
            </fileset>

			<manifest>
				<section name="gnomexClient">
	    	      <attribute name="Built-By" value="${user.name}"/>
  	  	          <attribute name="Implementation-Version" value="${gnomex_version}"/>
				</section>
    		</manifest>

            <metainf dir="${metainf.dir}/jar" excludes="*.xml" />
        </jar>
		

	</target>
	

	<!-- ============================================== -->
	<!--                                                -->
	<!-- Realm Jar                                     -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="realmjar" depends="init, compile-tomcat">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Building realm jar file                              +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>
		<delete>
			<fileset dir="${dist.dir}" includes="${realmjar.name}" />
		</delete>

      	<jar basedir="${build.class.dir}"
             excludes="**"
             jarfile="${dist.dir}/${realmjar.name}">

            <fileset dir="${build.class.dir}">
            	<include name="hci/gnomex/security/EncrypterService.class" />
            	<include name="hci/gnomex/security/tomcat/*Realm.class" />
            </fileset>

			<manifest>
				<section name="gnomexRealm">
	    	      <attribute name="Built-By" value="${user.name}"/>
  	  	          <attribute name="Implementation-Version" value="${gnomex_version}"/>
				</section>
    		</manifest>

            <metainf dir="${metainf.dir}/jar" excludes="*.xml" />
        </jar>
		

	</target>

	<!-- ============================================== -->
	<!--                                                -->
	<!-- Flex                                           -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="flex" depends="init" unless="flexUpToDate" description="Compile Flex application">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Compiling flex app                                   +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>		
		<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar"/> 		
		<mxmlc file="${flexapp.dir}/${flexapp.name}.mxml" 
			output="${build.dir}/${flexapp.name}.swf">
	        <load-config filename="${FLEX_HOME}/frameworks/flex-config.xml"/>
	        <source-path path-element="${FLEX_HOME}/frameworks"/>
      		<source-path path-element="${hciflex.dir}"/>
			    <compiler.debug>true</compiler.debug>			
		</mxmlc>
		<html-wrapper 
		      title="${flexapp.title}"
		      file="${flexapp.name}.html"
		      width="100%"
		      height="100%"
		      application="${flexapp.name}"
		      swf="${flexapp.name}"
		      version-major="9"
		      version-minor="0"
		      version-revision="28"
		      history="false"
		      template="express-installation"
		      output="${build.dir}"/>
		
		<!--  Create gnomexFlex.jsp with parameters -->
		<copy file="${build.dir}/${flexapp.name}.html" tofile="${build.dir}/${flexapp.name}.jsp"/>
		<copy file="${build.dir}/${flexapp.name}.html" tofile="${build.dir}/${flexapp.guest.name}.jsp"/>
	    <replace file="${build.dir}/${flexapp.name}.jsp"
	                         token="&lt;html lang=&quot;en&quot;&gt;"
	                         value="&lt;%@ include file=&quot;requireSecureRemote.jsp&quot; %&gt;${line.separator}&lt;html lang=&quot;en&quot;&gt;"/>
		<replace file="${build.dir}/${flexapp.name}.jsp"
    											 token="&quot;src&quot;, &quot;${flexapp.name}&quot;,"
		                       value="&quot;src&quot;, &quot;${flexapp.name}&quot;,${line.separator}      &quot;FlashVars&quot;, &quot;isGuest=&lt;%=request.getParameter(&quot;isGuest&quot;)%&gt;&amp;launchWindow=&lt;%=request.getParameter(&quot;launchWindow&quot;)%&gt;&amp;requestNumber=&lt;%=request.getParameter(&quot;requestNumber&quot;)%&gt;&amp;analysisNumber=&lt;%=request.getParameter(&quot;analysisNumber&quot;)%&gt;&amp;idLab=&lt;%=request.getParameter(&quot;idLab&quot;)%&gt;&amp;idAppUser=&lt;%=request.getParameter(&quot;idAppUser&quot;)%&gt;&quot;,"/>
		<!--  Create gnomexGuestFlex.jsp - hardcoded isGuest parameters -->
		<copy file="${build.dir}/${flexapp.name}.html" tofile="${build.dir}/${flexapp.guest.name}.jsp"/>
	    <replace file="${build.dir}/${flexapp.guest.name}.jsp"
	                         token="&lt;html lang=&quot;en&quot;&gt;"
	                         value="&lt;%@ include file=&quot;requireSecureRemote.jsp&quot; %&gt;${line.separator}&lt;html lang=&quot;en&quot;&gt;"/>
		<replace file="${build.dir}/${flexapp.guest.name}.jsp"
    						   token="&quot;src&quot;, &quot;${flexapp.name}&quot;,"
		                       value="&quot;src&quot;, &quot;${flexapp.name}&quot;,${line.separator}      &quot;FlashVars&quot;, &quot;isGuest=Y&amp;launchWindow=&lt;%=request.getParameter(&quot;launchWindow&quot;)%&gt;&amp;requestNumber=&lt;%=request.getParameter(&quot;requestNumber&quot;)%&gt;&amp;analysisNumber=&lt;%=request.getParameter(&quot;analysisNumber&quot;)%&gt;&amp;idLab=&lt;%=request.getParameter(&quot;idLab&quot;)%&gt;&amp;idAppUser=&lt;%=request.getParameter(&quot;idAppUser&quot;)%&gt;&quot;,"/>
		<!-- Copy the image files in the assets directory -->
		<copy todir="${build.dir}/assets" overwrite="true">
					<fileset dir="${flexapp.dir}/assets">
						<include name="*.*" />
					</fileset>
		</copy> 	
	</target>	
	

	<!-- ============================================== -->
	<!--                                                -->
	<!-- War                                            -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="war" depends="init, compile, flex">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Building war files                                   +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>
		<delete>
			<fileset dir="${dist.dir}" includes="${war.name}" />
		</delete>

		<!-- Need to edit login.jsp to remove action="j_security_check" for Orion only -->
		<copy todir="${dist.dir}/orion" file="${webroot.dir}/login.jsp"/>
		<replace file="${dist.dir}/orion/login.jsp"
				     token="action=&quot;j_security_check&quot;"
      	     value="">
		</replace>
		<copy todir="${dist.dir}/orion" file="${webroot.dir}/login_failed.jsp"/>
		<replace file="${dist.dir}/orion/login_failed.jsp"
				     token="action=&quot;j_security_check&quot;"
      	     value="">
		</replace>			
		
		<!-- Need to edit all jsps with ${param.XXX} notation.  Doesn't work with Orion -->
		<replaceregexp  file="${dist.dir}/orion/login.jsp"
			     match="value=&quot;(.*)param(.*)&quot;"
		         replace="">
		</replaceregexp>
		<copy todir="${dist.dir}/orion" file="${webroot.dir}/login_failed.jsp"/>
		<replaceregexp  file="${dist.dir}/orion/login_failed.jsp"
	             byline="true"
			     match="value=&quot;(.*)param(.*)&quot;"
		         replace="">
		</replaceregexp>
		<copy todir="${dist.dir}/orion" file="${webroot.dir}/change_password.jsp"/>
		<replaceregexp  file="${dist.dir}/orion/change_password.jsp"
   	             byline="true"
			     match="value=&quot;(.*)param(.*)&quot;"
		         replace="">
		</replaceregexp>
		<copy todir="${dist.dir}/orion" file="${webroot.dir}/reset_password.jsp"/>
		<replaceregexp  file="${dist.dir}/orion/reset_password.jsp"
		         byline="true"
			     match="value=&quot;(.*)param(.*)&quot;"
		         replace="">
		</replaceregexp>
		<copy todir="${dist.dir}/orion" file="${webroot.dir}/register_user.jsp"/>
		<replaceregexp  file="${dist.dir}/orion/register_user.jsp"
			     byline="true"
			     match="value=&quot;(.*)param(.*)&quot;"
		         replace="">
		</replaceregexp>
		
		<war destfile="${dist.dir}/${war.name}" webxml="${webroot.dir}/WEB-INF/web.xml">
			<fileset dir="${webroot.dir}">
				<include name="**/*.*" />
				<exclude name="login.jsp"/>
				<exclude name="login_failed.jsp"/>
				<exclude name="change_password.jsp"/>
				<exclude name="reset_password.jsp"/>
				<exclude name="register_user.jsp"/>
			</fileset>
			<fileset dir="${dist.dir}/orion">
				<include name="login.jsp"/>
				<include name="login_failed.jsp"/>
				<include name="change_password.jsp"/>
				<include name="reset_password.jsp"/>
				<include name="register_user.jsp"/>
			</fileset>
			<fileset dir="${build.dir}">
				<include name="*.swf" />
				<include name="*.html" />
				<include name="*.jsp" />
				<include name="*.js" />
				<include name="assets/*.*" />
			</fileset>
		    <fileset dir="${basedir}"		 	    includes="UCSCExecutables/**" />

	  </war>
		
	  <delete  dir="${dist.dir}/orion" /> 
	</target>

	

	<!-- ============================================== -->
	<!--                                                -->
	<!-- War                                            -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="war-tomcat" depends="init, jar-tomcat, flex">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Building war files  (tomcat)                         +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>
		<delete>
			<fileset dir="${dist.dir}" includes="${war.name}" />
		</delete>
		
		<!-- Use UNIX eol convention for .sh files -->
		<fixcrlf srcdir="${basedir}/scripts" includes="*.sh"
		         eol="lf" eof="remove" />	
		
		<!-- Use the tomcat versions of these jsps -->
		<copy todir="${dist.dir}/tomcat" file="${webroot.dir}/tomcat/getHTML.jsp"/>
		<copy todir="${dist.dir}/tomcat" file="${webroot.dir}/tomcat/getXML.jsp"/>
		
		<!-- Use the tomcat version of the script files -->
		<copy todir="${dist.dir}/tomcat/scripts">
		    <fileset dir="${basedir}/scripts/">
			    <include name="*.*" />
			</fileset>
		</copy>
		<copy todir="${dist.dir}/tomcat/scripts" overwrite="true">
		    <fileset dir="${basedir}/scripts/tomcat/">
			    <include name="*.*" />
			</fileset>
		</copy>

		<war destfile="${dist.dir}/${war.name}" webxml="${webroot.dir}/WEB-INF/tomcat/web.xml">
			 <metainf dir="${metainf.dir}"          includes="context.xml"/>
			 <lib dir="${lib.dir}"                  includes="*.jar"/>
			 <lib dir="${dist.dir}"                 includes="${jar.name}"/>
			 <classes dir="${lib.dir}"              includes="persistence.xml"/> 
			 <classes dir="${lib.dir}"              includes="*.tomcat.cfg.xml"/> 
			 <classes dir="${lib.dir}"              includes="*.properties"/> 
		     <classes dir="${src.dir}"			    includes="Dictionaries.xml"/>
		     <classes dir="${src.dir}"			    includes="SchemaGNomEx.hbm.xml" />
		     <fileset dir="${webroot.dir}">
				<include name="**/*.*" />
			 	<exclude name="WEB-INF/**"/>
				<exclude name="tomcat/**" />
			 	<exclude name="getXML.jsp"/>
			 	<exclude name="getHTML.jsp"/>
		 	 </fileset>
		     <fileset dir="${basedir}">
				<include name="UCSCExecutables/**" />
		     </fileset>
			 <fileset dir="${dist.dir}/tomcat">
				<include name="*.jsp" />
		 	 </fileset>
			<fileset dir="${dist.dir}/tomcat">
				<include name="scripts/*.*" />
			</fileset>						
			<fileset dir="${build.dir}">
				<include name="*.swf" />
				<include name="*.html" />
				<include name="*.jsp" />
				<include name="*.js" />
				<include name="assets/*.*" />
			</fileset>		
	  </war>
	  
	  <delete  dir="${dist.dir}/tomcat" />

	</target>
	
	
	
	<!-- ============================================== -->
	<!--                                                -->
	<!-- check-for-libenv                               -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="-check-for-libenv">
	    <available file="${lib.env.dir}"  type="dir" property="libenv.present"/>
	</target>
	
	<target name="-cleanlib">
		<delete dir="${dist.dir}/lib"/>
	</target>

	<!-- ============================================== -->
	<!--                                                -->
	<!-- Copy jar files from lib                        -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="-copylib" depends="-cleanlib, -copylibenv">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Copying jar files in lib                            +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>		

		<copy todir="${dist.dir}/lib">
		    <fileset dir="${lib.dir}">
			    <include name="**" />
			</fileset>
		</copy>
	</target>

	<!-- ============================================== -->
	<!--                                                -->
	<!-- Copy jar files from libEnv (if dir exists)     -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="-copylibenv" depends="-check-for-libenv" if="libenv.present">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Copying jar files in libEnv                         +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>		
		
		<copy todir="${dist.dir}/lib">
		    <fileset dir="${lib.env.dir}">
			    <include name="**" />
			</fileset>
		</copy>
	</target>



	<!-- ============================================== -->
	<!--                                                -->
	<!-- ear                                            -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="ear" depends="init, jar, war, -copylib">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Building ear files                                   +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>

		<delete>
			<fileset dir="${dist.dir}" includes="${ear.name}" />
		</delete>
		
		<!-- Use UNIX eol convention for .sh files -->
		<fixcrlf srcdir="${basedir}/scripts" includes="*.sh"
		         eol="lf" eof="remove" />		

		<ear destfile="${dist.dir}/${ear.name}"
			 appxml="${metainf.dir}/ear/application.xml">

          <fileset dir="${dist.dir}"		 	includes="lib/*.*" />
          <fileset dir="${dist.dir}"	        includes="${jar.name}" />
          <fileset dir="${dist.dir}"		    includes="${war.name}" />
          <fileset dir="${src.dir}"             includes="*.hbm.xml" />
          <fileset dir="${basedir}/scripts">
      	      <exclude name="httpclient*.cmd" />
      	      <exclude name="httpclient*.sh" />
              <include name="*.cmd" />
              <include name="*.sh" />
          </fileset>
          <fileset dir="${src.dir}"			    includes="Dictionaries.xml" />

          <metainf dir="${metainf.dir}/ear" includes="*.xml" />
        </ear>
	</target>





	<!-- ============================================== -->
	<!--                                                -->
	<!-- deploy                                         -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="deploy" depends="init">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Deploying                                            +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>
		<copy file="${dist.dir}/${ear.name}" todir="${orion.dir}/applications"/>
	</target>

	<!-- ============================================== -->
	<!--                                                -->
	<!-- deploy                                         -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="deploy-tomcat" depends="init">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Deploying (tomcat)                                   +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>
		<copy file="${dist.dir}/${war.name}" todir="${tomcat.dir}/webapps"/>
		<delete  dir="${tomcat.dir}/webapps/${app.name}" />
		<copy file="${dist.dir}/${realmjar.name}" todir="${lib.tomcat.server.dir}"/>
	</target>


	<!-- ============================================== -->
	<!--                                                -->
	<!-- release-opensource                             -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="release-opensource" depends="init">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Releasing open source                               +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>
		<!-- Delete all files in opensource directory -->
		<delete includeEmptyDirs="true">
			<fileset dir="${opensource.dir}">
			  <exclude name=".svn/**"/>
			  <exclude name="**/.svn/**"/>
			  <exclude name="fdt/**"/>
			  <exclude name="fdtHCI/**"/>
			  <exclude name="fdtLib/**"/>
		      <include name="*/**"/>
		      <exclude name=".project"/>
			  <exclude name=".classpath"/>
			  <exclude name=".actionScriptProperties"/>
			  <exclude name=".flexProperties"/>
			</fileset>
        </delete>
		
		
		<!-- Copy README_INSTALL.txt and stick in actual version number into document -->				
		<copy todir="${opensource.dir}" file="${basedir}/README_INSTALL.txt"/>
		<replace file="${opensource.dir}/README_INSTALL.txt"
					     token="$VERSION"
	      	     value="${gnomex_version}">
		</replace>

		<copy todir="${opensource.dir}" file="${basedir}/README_INSTALL_TOMCAT.txt"/>
		<replace file="${opensource.dir}/README_INSTALL_TOMCAT.txt"
					     token="$VERSION"
	      	     value="${gnomex_version}">
		</replace>

		<!-- Use UNIX eol convention for README_INSTALL.txt file -->
		<fixcrlf srcdir="${opensource.dir}" includes="README_INSTALL.txt"
		         eol="lf" eof="remove" />		
		<fixcrlf srcdir="${opensource.dir}" includes="README_INSTALL_TOMCAT.txt"
		         eol="lf" eof="remove" />		

		<!-- Copy README_UPGRADE.txt and stick in actual version number into document -->				
		<copy todir="${opensource.dir}" file="${basedir}/README_UPGRADE.txt"/>
		<replace file="${opensource.dir}/README_UPGRADE.txt"
					     token="$VERSION"
	      	     value="${gnomex_version}">
		</replace>

		<!-- Use UNIX eol convention for README_UPGRADE.txt file -->
		<fixcrlf srcdir="${opensource.dir}" includes="README_UPGRADE.txt"
		         eol="lf" eof="remove" />		

		<!-- Copy LICENSE.txt  -->				
		<copy todir="${opensource.dir}" file="${basedir}/LICENSE.txt"/>

		<!-- Use UNIX eol convention for LICENCE.txt file -->
		<fixcrlf srcdir="${opensource.dir}" includes="LICENSE.txt"
		         eol="lf" eof="remove" />		

		

		<!-- Copy gnomex source, leaving out hci installation specific files -->
	  <copy todir="${opensource.dir}">
	  	 <fileset dir="${basedir}">
		      <include name="build.properties"/>
		      <include name="build.xml"/>
		      <include name="*.sh"/>
		      <include name="*.cmd"/>
	  	 	  <include name="sql/**"/>
	  	 	  <include name="scripts/**"/>
	  	 	  <include name="doc/**"/>
		      <include name="flex/**"/>
		      <include name="src/**"/>
		      <include name="lib/**"/>
		      <include name="UCSCExecutables/**"/>
		      <exclude name="META-INF/context.xml"/>
		      <include name="META-INF/context_opensource.xml"/>
		      <include name="META-INF/**"/>
		      <include name="defaultroot/**"/>
		      <exclude name="defaultroot/doc/**"/>	  	
		      <exclude name="**/CVS"/>
		      <exclude name="**/.cvsignore"/>
 	          <exclude name="**/Thumbs.db"/>
	          <exclude name="**/.settings/**"/>
		      <exclude name="**/SecurityManager.java"/>
		      <exclude name="**/SecurityManagerLocal.java"/>
		      <exclude name="**/GNomExLDAPRealm.java"/>
	  	 	</fileset>
	  </copy>

	    <!-- Use the opensource version of the context file -->
		<move file="${opensource.dir}/META-INF/context_opensource.xml"  tofile="${opensource.dir}/META-INF/context.xml"/> 

		<!-- We only copy the gnomex/defaultroot/docs that start with blank or example_sample_sheet in the file name -->	
		<copy todir="${opensource.dir}/defaultroot/doc">
	    <fileset dir="${basedir}/defaultroot/doc">
	      <include name="**/blank*.*"/>
		  <include name="**/example_sample_sheet*.*"/>
	    </fileset>
	  </copy>
		

		<!-- Change realm name in web.xml from hciEnv to gnomex.  -->
		<replace file="${opensource.dir}/defaultroot/WEB-INF/web.xml"
				     token="&lt;realm-name&gt;hciEnv&lt;/realm-name&gt;"
      	     value="&lt;realm-name&gt;gnomex&lt;/realm-name&gt;">
		</replace>
		<replace file="${opensource.dir}/defaultroot/WEB-INF/tomcat/web.xml"
				     token="&lt;realm-name&gt;hciEnv&lt;/realm-name&gt;"
      	     value="&lt;realm-name&gt;gnomex&lt;/realm-name&gt;">
		</replace>
		
		<!-- Change build path (orion) to include libEnv -->
		<replaceregexp  file="${opensource.dir}/build.xml"
				     match="&lt;fileset(.*)dir=&quot;(.*)lib.hcienv.dir}(.*)"
		         replace="&lt;fileset dir=&quot;&#36;\{lib.env.dir\}&quot;\/&gt;">
		</replaceregexp>

		
		<!-- Remove all references to hciEnv and hciFlex in build files and scripts -->
		<replaceregexp  file="${opensource.dir}/build.properties"
				     match="hcienv\.dir=(.*)"
		         replace="">
		</replaceregexp>
		<replaceregexp  file="${opensource.dir}/build.properties"
				     match="hciflex\.dir=(.*)"
		         replace="">
		</replaceregexp>
		<replaceregexp  file="${opensource.dir}/build.xml"
			       match="&lt;source-path\s+path-element=&quot;(.*)hciflex.dir(.*)"
		         replace="">
		</replaceregexp>		
		<replaceregexp  file="${opensource.dir}/scripts/index_gnomex.sh"
			       match="HIBERNATE_HOME=\$ORION_HOME/applications/hciEnv"
             replace="HIBERNATE_HOME=$$ORION_HOME/applications/gnomex">
		</replaceregexp>
		<replaceregexp  file="${opensource.dir}/scripts/index_gnomex.cmd"
			       match="HIBERNATE_HOME=\%ORION_HOME\%\\applications\\hciEnv"
             replace="HIBERNATE_HOME=\%ORION_HOME\%\\\\applications\\\\gnomex">
		</replaceregexp>
		
		<!-- Use UNIX eol convention for .sh files -->
		<fixcrlf srcdir="${opensource.dir}/scripts" includes="*.sh"
		         eol="lf" eof="remove" />		

		<!-- Get rid of proxy and change to MySQL jdbc driver in hibernate.cfg.xml files -->
		<replace dir="${opensource.dir}/lib"
		         token="&lt;property name=&quot;connection.provider_class&quot;&gt;com.opensourceconnections.msjdbcproxy.HibernateProvider&lt;/property&gt;"
		         value="">
			<include name="hibernate*.cfg.xml"/>
		</replace>
		<replace dir="${opensource.dir}/lib"
				     token="SQLServerDialect"
		         value="MySQLDialect">
			<include name="hibernate*.cfg.xml"/>
		</replace>

		<!-- Create a special lite version of altio_cod.jar from hciEnv/lib,
		     omitting util classes (CODPanel, CODWindow) -->
		<unzip src="${hcienv.dir}/lib/altio_cod.jar"
		       dest="${opensource.dir}/dist/altio_cod_lite">
		    <patternset>
  	        <include name="**/META-INF/*.*"/>
		        <include name="**/*.class"/>
		        <exclude name="**/util/*.class"/>
		    </patternset>
		</unzip>
	  <jar destfile="${opensource.dir}/lib/altio_cod_lite.jar" basedir="${opensource.dir}/dist/altio_cod_lite"/>
	  <delete dir="${opensource.dir}/dist/altio_cod_lite"/>
		
		<!-- Copy flex files normally in hciFlex2 directly to gnomex/flex -->
	  <copy todir="${opensource.dir}/flex">
	    <fileset dir="${hciflex.dir}">
	      <include name="assets/**"/>
	      <include name="hci/**"/>
	      <exclude name="hci/**/cod/**"/>
	      <exclude name="**/CVS"/>
	      <exclude name="**/.cvsignore"/>
	      <exclude name="**/Thumbs.db"/>
	    </fileset>
	  </copy>
		
		

		<!-- Make an orion specific release -->
		<subant target="-release-opensource-orion">
			   <property name="basedir" value="${basedir}"/>
			   <property name="dist.dir" value="${opensource.dir}/dist"/>
			   <property name="metainf.dir" value="${opensource.dir}/META-INF"/>
			   <property name="lib.dir" value="${opensource.dir}/lib"/>
			   <property name="src.dir" value="${opensource.dir}/src"/>
			   <fileset dir="${opensource.dir}" includes="build.xml"/>			
		</subant>


		<!-- Make a tomcat specific release -->
		<subant target="-release-opensource-tomcat">
			   <property name="basedir" value="${basedir}"/>
			   <property name="dist.dir" value="${opensource.dir}/dist"/>
			   <property name="metainf.dir" value="${opensource.dir}/META-INF"/>
			   <property name="lib.dir" value="${opensource.dir}/lib"/>
			   <property name="src.dir" value="${opensource.dir}/src"/>
			   <fileset dir="${opensource.dir}" includes="build.xml"/>			
		</subant>
		
		<!-- Get rid of local directory properties in build.properties.  Set back to default -->
		<replace file="${opensource.dir}/build.properties"
				     token="c:/orion"
		         value="/path/to/orion">
		</replace>
		<replace file="${opensource.dir}/build.properties"
				     token="c:/flex_sdk"
		         value="/path/to/flex_sdk">
		</replace>
		<replace file="${opensource.dir}/build.properties"
				     token="C:/apache-tomcat-5.5.31"
		         value="/path/to/tomcat">
		</replace>
		

	</target>
	
	

	<!-- ============================================== -->
	<!--                                                -->
	<!-- release-opensource-orion                       -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="-release-opensource-orion" depends="init">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Releasing open source  (orion)                       +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>
		

		  <!-- Copy jar files normally in hciEnv directly to gnomex/libEnv -->
		  <copy todir="${opensource.dir}/libEnv">
		    <fileset dir="${hcienv.dir}/lib">
		      <include name="antlr-2.7.6rc1.jar"/>
		      <include name="asm.jar"/>
		      <include name="asm-attrs.jar"/>
		      <include name="cglib-2.1.3.jar"/>
			  <include name="ehcache-1.1.jar"/>
		      <include name="hibernate3.jar"/>
		      <include name="Hibernate3Utils.jar"/>
		      <include name="HCIDictionary.jar"/>
		      <include name="HCIReport.jar"/>
		      <exclude name="**/CVS"/>
		      <exclude name="**/.cvsignore"/>
		      <exclude name="**/Thumbs.db"/>
		    </fileset>
		  </copy>
			
	    <!-- Set the default security manager in orion-application.xml to SecurityManagerGNomEx -->
	    <replaceregexp  file="${opensource.dir}/META-INF/ear/orion-application.xml"
						       match="&lt;user-manager\s+class=&quot;(.*)hci.gnomex.security.SecurityManager&quot;(.*)&gt;"
	                 replace="&lt;user-manager class=&quot;hci.gnomex.security.SecurityManagerGNomEx&quot;&gt;"
				           byline="true">
	    </replaceregexp>

			

		<!-- Delete the build dir and the gnomex jars so that we rebuild all classes for the tomcat version -->
		<delete dir="${opensource.dir}/dist/build.ant"/>
		<delete dir="${opensource.dir}/dist/lib"/>
		<delete file="${opensource.dir}/dist/${jar.name}"/>
		<delete file="${opensource.dir}/dist/secure/${jar.name}"/>

			<!-- By default, gnomex will run unsecure (http: instead of https).
			     Change the Constants.java file so that the front controller
			     will not reject unsecure (http:) requests. -->
			<replaceregexp  file="${opensource.dir}/src/hci/gnomex/constants/Constants.java"
					     match="REQUIRE_SECURE_REMOTE\s+=\s+true;"
			         replace="REQUIRE_SECURE_REMOTE           = false;">
			</replaceregexp>
			
			<!-- Build ear, allowing http (nonsecure) connections -->
			<subant target="ear">
				<property name="dist.dir" value="${opensource.dir}/dist"/>
			    <property name="basedir" value="${opensource.dir}"/>
				<property name="metainf.dir" value="${opensource.dir}/META-INF"/>
				<property name="lib.dir" value="${opensource.dir}/lib"/>
				<property name="src.dir" value="${opensource.dir}/src"/>
			    <fileset dir="${opensource.dir}" includes="build.xml"/>
			</subant>

			<subant target="clientjar">
				<property name="dist.dir" value="${opensource.dir}/dist"/>
			    <property name="basedir" value="${opensource.dir}"/>
				<property name="metainf.dir" value="${opensource.dir}/META-INF"/>
				<property name="lib.dir" value="${opensource.dir}/lib"/>
				<property name="src.dir" value="${opensource.dir}/src"/>
			    <fileset dir="${opensource.dir}" includes="build.xml"/>
			</subant>

			<!-- Compile GNomex to run secure (https) only-->
			<replaceregexp  file="${opensource.dir}/src/hci/gnomex/constants/Constants.java"
					     match="REQUIRE_SECURE_REMOTE\s+=\s+false;"
			         replace="REQUIRE_SECURE_REMOTE           = true;">
			</replaceregexp>

			<!-- Build ear again, this time allowing https (secure) connections -->
			<subant target="ear">
				<property name="dist.dir" value="${opensource.dir}/dist/secure"/>
				<property name="basedir" value="${opensource.dir}"/>
				<property name="metainf.dir" value="${opensource.dir}/META-INF"/>
				<property name="lib.dir" value="${opensource.dir}/lib"/>
				<property name="src.dir" value="${opensource.dir}/src"/>
				<fileset dir="${opensource.dir}" includes="build.xml"/>
			</subant>
		
		
		
		
		
		<!-- Copy over the jars required in orion/lib -->
		<copy todir="${opensource.dir}/dist/server/orion">
	     <fileset dir="${orion.dir}">
	      <include name="lib/commons*.jar"/>
	      <include name="lib/dom4j*.jar"/>
	      <include name="lib/hci_*.jar"/>
	      <include name="lib/Hibernate3*.jar"/>
	      <include name="lib/hsql*.jar"/>
	      <include name="lib/dom4j*.jar"/>
	      <include name="lib/jaas*.jar"/>
		  <include name="lib/jcs*.jar"/>
		  <include name="lib/jdom*.jar"/>
	      <include name="lib/jta*.jar"/>
	      <include name="lib/jtds*.jar"/>
		  <include name="lib/log4j*.jar"/>
		  <include name="lib/mysql*.jar"/>
		  <include name="lib/naming-common.jar"/>
		  <include name="lib/rowset*.jar"/>
	      <exclude name="**/CVS"/>
	      <exclude name="**/.cvsignore"/>
	    </fileset>
	  </copy>
		
	  <!-- Copy example orion config files -->
      <mkdir dir="${opensource.dir}/dist/server/orion/config" />
	  <copy todir="${opensource.dir}/dist/server/orion/config">
	    <fileset dir="${basedir}/orion_config">
	      <include name="*/**"/>
	      <exclude name="**/CVS"/>
	      <exclude name="**/.cvsignore"/>
	    </fileset>
	  </copy>
		
		<!-- Change name of db user accounts from orion data sources example -->
		<replace file="${opensource.dir}/dist/server/orion/config/data-sources.xml"
				     token="SysGNomEx"
		         value="gnomex">
		</replace>
		<replace file="${opensource.dir}/dist/server/orion/config/data-sources.xml"
				     token="GuestGNomEx"
		         value="gnomexGuest">
		</replace>		
		
		<!-- Change to use MySSQL jdbc driver in orion data sources example -->
		<replace file="${opensource.dir}/dist/server/orion/config/data-sources.xml"
				     token="connection-driver=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;"
		         value="connection-driver=&quot;com.mysql.jdbc.Driver&quot;">
		</replace>
		<replace file="${opensource.dir}/dist/server/orion/config/data-sources.xml"
				     token="url=&quot;jdbc:sqlserver://db_server_goes_here:1433;databaseName=GNomEx;SelectMethod=cursor&quot;"
		         value="url=&quot;jdbc:mysql://localhost:3306/gnomex&quot;">
		</replace>
		
		<!-- Get rid of hciEnv web app in orion server.xml -->
		<replaceregexp  file="${opensource.dir}/dist/server/orion/config/server.xml"
					       match="&lt;application\s+name=&quot;hciEnv&quot;(.*)"
				         replace="">
		</replaceregexp>
		<replaceregexp  file="${opensource.dir}/dist/server/orion/config/server.xml"
					       match="parent=&quot;hciEnv&quot;"
				         replace="">
		</replaceregexp>
		
		<!-- Comment out gnomex and ssl in orion secure-web-site.xml since
		     default configuration will assume gnomex is run unsecure (http:) -->
		<replaceregexp  file="${opensource.dir}/dist/server/orion/config/secure-web-site.xml"
					       match="&lt;ssl-config(.*)&gt;"
				         replace="&lt;\!\-\-    &lt;ssl-config\1&gt;    \-\-&gt;"
			           byline="true">
		</replaceregexp>
		<replaceregexp  file="${opensource.dir}/dist/server/orion/config/secure-web-site.xml"
					       match="&lt;web-app\s+application=&quot;gnomex&quot;(.*)&gt;"
				         replace="&lt;\!\-\-    &lt;web-app\1application=&quot;gnomex&quot;\1&gt;    \-\-&gt;"
			           byline="true">
		</replaceregexp>
		
		<!-- Comment out the reference to security-web-site.xml in server.xml -->
		<replaceregexp  file="${opensource.dir}/dist/server/orion/config/server.xml"
							       match="&lt;web-site\s+path=&quot;(.*)secure-web-site.xml&quot;(.*)&gt;"
						         replace="&lt;\!\-\-    &lt;web-site\1path=&quot;\1secure-web-site.xml&quot;\1&gt;    \-\-&gt;"
					           byline="true">
		</replaceregexp>

		
		<!-- Create the zip file -->
     	<mkdir dir="${opensource.dir}/release/" />
		<zip destfile="${opensource.dir}/release/${opensource.orion.name}.zip" >
			<zipfileset dir="${opensource.dir}/dist" includes="gnomex.ear" prefix="${opensource.name}/gnomex/dist"/>
			<zipfileset dir="${opensource.dir}/dist" includes="gnomex_client.jar" prefix="${opensource.name}/gnomex/dist"/>
			<zipfileset dir="${opensource.dir}/dist/secure" includes="gnomex.ear" prefix="${opensource.name}/gnomex/dist/secure"/>
			<zipfileset dir="${opensource.dir}/doc" includes="*/**" prefix="${opensource.name}/gnomex/doc"/>
			<zipfileset dir="${opensource.dir}/sql" includes="*/**" prefix="${opensource.name}/gnomex/sql"/>
			<zipfileset dir="${opensource.dir}/scripts" includes="*.*" prefix="${opensource.name}/gnomex/scripts"/>
			<zipfileset dir="${opensource.dir}/dist/server/orion" prefix="${opensource.name}/orion"/>
			<zipfileset dir="${opensource.dir}" includes="LICENSE.txt" prefix="${opensource.name}"/>
			<zipfileset dir="${opensource.dir}" includes="README_INSTALL.txt" prefix="${opensource.name}"/>
			<zipfileset dir="${opensource.dir}" includes="README_UPGRADE.txt" prefix="${opensource.name}"/>
		</zip>
		
	</target>

	<!-- ============================================== -->
	<!--                                                -->
	<!-- check-for-tomcat                               -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="-check-for-tomcat">
	    <available file="${tomcat.dir}"  type="dir" property="tomcat.present"/>
	</target>

	<!-- ============================================== -->
	<!--                                                -->
	<!-- release-opensource-tomcat                       -->
	<!--                                                -->
	<!-- ============================================== -->
	<target name="-release-opensource-tomcat" depends="init,-check-for-tomcat" if="tomcat.present">
		<echo>+ ===================================================== +</echo>
		<echo>+                                                       +</echo>
		<echo>+  Releasing open source  (tomcat)                      +</echo>
		<echo>+                                                       +</echo>
		<echo>+ ===================================================== +</echo>
			
		<!-- By default, gnomex will run unsecure (http: instead of https).
		     Change the Constants.java file so that the front controller
		     will not reject unsecure (http:) requests. -->
		<replaceregexp  file="${opensource.dir}/src/hci/gnomex/constants/Constants.java"
				     match="REQUIRE_SECURE_REMOTE\s+=\s+true;"
		         replace="REQUIRE_SECURE_REMOTE           = false;">
		</replaceregexp>
			
		<!-- Delete the build dir and the gnomex jars so that we rebuild all classes for the tomcat version -->
		<delete dir="${opensource.dir}/dist/build.ant"/>
		<delete dir="${opensource.dir}/dist/lib"/>
		<delete file="${opensource.dir}/dist/${jar.name}"/>
		<delete file="${opensource.dir}/dist/secure/${jar.name}"/>
		
		<!-- Build ear again, this time allowing http (nonsecure) connections -->
		<subant target="war-tomcat">
			<property name="dist.dir" value="${opensource.dir}/dist"/>
			<property name="webroot.dir" value="${opensource.dir}/defaultroot"/>
		    <property name="basedir" value="${opensource.dir}"/>
			<property name="metainf.dir" value="${opensource.dir}/META-INF"/>
			<property name="lib.dir" value="${opensource.dir}/lib"/>
			<property name="src.dir" value="${opensource.dir}/src"/>
		    <fileset dir="${opensource.dir}" includes="build.xml"/>
		</subant>

		<subant target="clientjar">
			<property name="dist.dir" value="${opensource.dir}/dist"/>
		    <property name="basedir" value="${opensource.dir}"/>
			<property name="metainf.dir" value="${opensource.dir}/META-INF"/>
			<property name="lib.dir" value="${opensource.dir}/lib"/>
			<property name="src.dir" value="${opensource.dir}/src"/>
		    <fileset dir="${opensource.dir}" includes="build.xml"/>
		</subant>

	    <subant target="realmjar">
			<property name="dist.dir" value="${opensource.dir}/dist"/>
		    <property name="basedir" value="${opensource.dir}"/>
			<property name="metainf.dir" value="${opensource.dir}/META-INF"/>
			<property name="lib.dir" value="${opensource.dir}/lib"/>
			<property name="src.dir" value="${opensource.dir}/src"/>
		    <fileset dir="${opensource.dir}" includes="build.xml"/>
	    </subant>

	    <!-- Compile GNomex to run secure (https) only-->
		<replaceregexp  file="${opensource.dir}/src/hci/gnomex/constants/Constants.java"
				     match="REQUIRE_SECURE_REMOTE\s+=\s+false;"
		         replace="REQUIRE_SECURE_REMOTE           = true;">
		</replaceregexp>

		<!-- Build ear again, this time allowing https (secure) connections -->
		<subant target="war-tomcat">
		    <property name="dist.dir" value="${opensource.dir}/dist/secure"/>
			<property name="webroot.dir" value="${opensource.dir}/defaultroot"/>
		    <property name="basedir" value="${opensource.dir}"/>
			<property name="metainf.dir" value="${opensource.dir}/META-INF"/>
			<property name="lib.dir" value="${opensource.dir}/lib"/>
			<property name="src.dir" value="${opensource.dir}/src"/>
		    <fileset dir="${opensource.dir}" includes="build.xml"/>
		</subant>
		
		<!-- Copy over the jars required in tomcat/common/lib -->
		<copy todir="${opensource.dir}/dist/server/tomcat/common/lib">
	       <fileset dir="${lib.tomcat.common.dir}">
	        <include name="*.jar"/>
	      </fileset>
	    </copy>
		
	  <!-- Copy example tomcat config files -->
      <mkdir dir="${opensource.dir}/dist/server/tomcat/conf" />
	  <copy todir="${opensource.dir}/dist/server/tomcat/conf">
	    <fileset dir="${basedir}/tomcat_config">
	      <include name="*/**"/>
	      <exclude name="**/CVS"/>
	      <exclude name="**/.cvsignore"/>
	    </fileset>
	  </copy>
		
		<!-- Change name of db user accounts for openejb.xml -->
		<replace file="${opensource.dir}/dist/server/tomcat/conf/openejb.xml"
			  token="SysGNomEx"
		      value="gnomex">
		</replace>
		<replace file="${opensource.dir}/dist/server/tomcat/conf/openejb.xml"
			  token="GuestGNomEx"
		      value="gnomexGuest">
		</replace>		

		
		<!-- Change to use MySSQL jdbc driver in openejb.xml -->
		<replace file="${opensource.dir}/dist/server/tomcat/conf/openejb.xml"
				  token="com.microsoft.sqlserver.jdbc.SQLServerDriver"
		         value="com.mysql.jdbc.Driver">
		</replace>
		<replace file="${opensource.dir}/dist/server/tomcat/conf/openejb.xml"
				     token="jdbc:sqlserver://db_server_goes_here:1433;databaseName=GNomEx;SelectMethod=cursor"
		         value="jdbc:mysql://localhost:3306/gnomex">
		</replace>
		
		
		<!-- Use the tomcat version of the script files -->
		<copy todir="${opensource.dir}/dist/tomcat/scripts">
		    <fileset dir="${basedir}/scripts/">
			    <include name="*.*" />
			</fileset>
		</copy>
		<copy todir="${opensource.dir}/dist/tomcat/scripts" overwrite="true">
		    <fileset dir="${basedir}/scripts/tomcat/">
			    <include name="*.*" />
			</fileset>
		</copy>

		<!-- Use the tomcat version of the README_INSTALL -->
		<copy todir="${opensource.dir}/dist/tomcat">
		    <fileset dir="${opensource.dir}">
			    <include name="README_INSTALL_TOMCAT.txt" />
			</fileset>
		</copy>
		<move file="${opensource.dir}/dist/tomcat/README_INSTALL_TOMCAT.txt"  tofile="${opensource.dir}/dist/tomcat/README_INSTALL.txt"/> 
			
		<!-- Create the zip file -->
     	<mkdir dir="${opensource.dir}/release/" />
		<zip destfile="${opensource.dir}/release/${opensource.tomcat.name}.zip" >
			<zipfileset dir="${opensource.dir}/dist" includes="gnomex.war" prefix="${opensource.name}/gnomex/dist"/>
			<zipfileset dir="${opensource.dir}/dist" includes="gnomex_client.jar" prefix="${opensource.name}/gnomex/dist"/>
			<zipfileset dir="${opensource.dir}/dist" includes="gnomex_realm.jar" prefix="${opensource.name}/gnomex/dist"/>
			<zipfileset dir="${opensource.dir}/dist/secure" includes="gnomex.war" prefix="${opensource.name}/gnomex/dist/secure"/>
			<zipfileset dir="${opensource.dir}/doc" includes="*/**" prefix="${opensource.name}/gnomex/doc"/>
			<zipfileset dir="${opensource.dir}/sql" includes="*/**" prefix="${opensource.name}/gnomex/sql"/>
			<zipfileset dir="${opensource.dir}/dist/tomcat/scripts" includes="*.*" prefix="${opensource.name}/gnomex/scripts"/>
			<zipfileset dir="${opensource.dir}/dist/server/tomcat" prefix="${opensource.name}/tomcat"/>
			<zipfileset dir="${opensource.dir}" includes="LICENSE.txt" prefix="${opensource.name}"/>
			<zipfileset dir="${opensource.dir}/dist/tomcat" includes="README_INSTALL.txt" prefix="${opensource.name}"/>
			<zipfileset dir="${opensource.dir}" includes="README_UPGRADE.txt" prefix="${opensource.name}"/>
		</zip>

		<delete dir="${opensource.dir}/dist/tomcat"/>
		
	</target>

</project>
