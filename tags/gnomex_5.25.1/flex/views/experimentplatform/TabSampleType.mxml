<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" paddingLeft="4" paddingBottom="4" paddingRight="4" paddingTop="4" label="Sample Types" verticalGap="12">
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import views.experimentplatform.ExperimentPlatformState;
			
			[Bindable]
			private var state:ExperimentPlatformState = null;
			
			public function init(state:ExperimentPlatformState):void {
				this.state = state;
			}

			private function selectAll(objects:XMLListCollection, viewStack:ViewStack):void {
				for each(var o:Object in objects) {
					if (o.@isActive == 'Y') {
						o.@isSelected = 'Y';
					}
				}
				viewStack.selectedIndex = 1;
				state.dirty.setDirty();
			}
			
			private function unselectAll(objects:XMLListCollection, viewStack:ViewStack):void {
				for each(var o:Object in objects) {
					o.@isSelected = 'N';
				}
				viewStack.selectedIndex = 0;
				state.dirty.setDirty();
			}
			
			private function addSampleType():void {
				var newNode:XML = new XML("<SampleType " +
					" isSelected='N'" +
					" idSampleType='" + 'SampleType' + "'" +
					" display='" + 'enter sample type here...' + "'" +
					" isActive='Y'" +
					" codeNucleotideType='DNA'" +
					" sortOrder='99'" +
					" notes=''" +
					" />");
				sampleTypes.addItemAt(newNode, 0);
				sampleTypeGrid.selectedItem = newNode;
				sampleTypeGrid.scrollToIndex(0);
				state.dirty.setDirty();
			}
			
			private function removeSampleType():void {
				if (sampleTypeGrid.selectedItem == null) {
					return;
				}
				Alert.show("Are you sure you want to remove sample type " + sampleTypeGrid.selectedItem.@display + "?",
					"Confirm",
					(Alert.YES | Alert.NO), this, 
					onPromptToRemoveSampleType,						
					parentApplication.iconWarning);
				
			}
			
			private function onPromptToRemoveSampleType(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					removeSampleTypeImpl();
				}
			}
			
			private function removeSampleTypeImpl():void {
				if (this.sampleTypeGrid.selectedItem != null) {
					this.sampleTypes.removeItemAt(sampleTypes.getItemIndex(sampleTypeGrid.selectedItem));
					state.dirty.setDirty();
				}
			}
			
			private function compareSampleTypes(obj1:Object, obj2:Object, fields:Array=null):int {
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var c1:String = obj1.@codeNucleotideType;
					var c2:String = obj2.@codeNucleotideType;
					if (c1 < c2) {
						return -1;
					} else if (c1 > c2) {
						return 1;
					} else {
						var s1:int = getSortOrderAsInt(obj1.@sortOrder);
						var s2:int = getSortOrderAsInt(obj2.@sortOrder);
						if (s1 < s2) {
							return -1;
						} else if (s1 > s2) {
							return 1;
						} else {
							var n1:String = obj1.@display;
							var n2:String = obj2.@display;
							if (n1 < n2) {
								return -1;
							} else if (n1 > n2) {
								return 1;
							} else {				
								return 0;
							}
						}
					}
				}
			}
			
			private function getSortOrderAsInt(sortOrder:String):int {
				if (sortOrder == null || sortOrder == "") {
					sortOrder = "0";
				}
				return int(sortOrder);
			}
			
			public function editSampleTypeOption():void {
				showEditSampleTypeWindow(sampleTypeGrid.selectedItem);
			}
			
			private function showEditSampleTypeWindow(app:Object):void {
				var editWindow:SampleTypeDetailWindow = SampleTypeDetailWindow(PopUpManager.createPopUp(parentApplication.theBody, SampleTypeDetailWindow, true));
				PopUpManager.centerPopUp(editWindow);
				editWindow.init(state, app);
			}
		]]>
	</mx:Script>
	<mx:XMLListCollection id="sampleTypes" source="{state.requestCategory.sampleTypes.SampleType}" sort="{sortSampleTypes}"/>
	<mx:Sort id="sortSampleTypes" compareFunction="compareSampleTypes" />

	<mx:VBox width="100%" height="100%" verticalGap="0">
		<mx:HBox verticalAlign="middle">
			<mx:ViewStack id="selectAllStack1" width="80" paddingBottom="0" paddingTop="0">
				<mx:HBox width="100%"  paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0" verticalAlign="middle">
					<mx:LinkButton label="Select all" styleName="formLinkButton" paddingLeft="0" click="selectAll(sampleTypes, selectAllStack1)"  paddingTop="0" paddingRight="0" paddingBottom="0"/>
				</mx:HBox>
				<mx:HBox width="100%" paddingBottom="0" paddingTop="0">
					<mx:LinkButton label="Unselect all" styleName="formLinkButton" paddingLeft="0" click="unselectAll(sampleTypes, selectAllStack1)"  paddingTop="0" paddingBottom="0"/>
				</mx:HBox>			    	
			</mx:ViewStack>
			<mx:LinkButton label="Add" styleName="linkMenuButton" 
						   click="addSampleType()"
						   enabled="{state.requestCategory.@canUpdate == 'Y' ? true : false}" 
						   icon="@Embed(source='../../assets/add.png')" 
						   disabledIcon="@Embed(source='../../assets/add_disable.png')" fontSize="10"/>
			
			<mx:LinkButton label="Remove" styleName="linkMenuButton"
						   click="removeSampleType()"
						   enabled="{state.requestCategory.@canUpdate == 'Y' &amp;&amp; sampleTypeGrid.selectedItem != null}"   
						   icon="@Embed(source='../../assets/delete.png')" 
						   disabledIcon="@Embed(source='../../assets/delete_disable.png')" fontSize="10"/>
			
		</mx:HBox>
		<mx:DataGrid id="sampleTypeGrid" 
					 dataProvider="{sampleTypes}" 
					 editable="true"
					 width="100%" height="100%" itemEditBegin="state.dirty.setDirty()" variableRowHeight="true" wordWrap="true" fontSize="11">
			<mx:columns>
				<mx:DataGridColumn headerText="Active"  
								   width="20" 
								   editable="false"                        	
								   dataField="@isSelected" 
								   editorDataField="selected"
								   itemRenderer="{views.renderers.CheckBoxRenderer.create(state.dirty)}">			 
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="Sample Type" 
								   itemRenderer="views.renderers.LabelActive"
								   rendererIsEditor="false"
								   dataField="@display" editable="true" >
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="Sample Category"  id="nucleotideTypeCol"  dataField="@codeNucleotideType"  
								   width="135"
								   editorDataField="value"  
								   wordWrap="true"
								   sortable="false" editable="true" rendererIsEditor="false"  
								   itemRenderer="{DropdownLabel.getFactory(state.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NucleotideType').DictionaryEntry.(@value != ''), '@display', '@value', '@codeNucleotideType')}"                
								   itemEditor="{views.renderers.ComboBox.create(state.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NucleotideType').DictionaryEntry.(@value != ''), '@display', '@value', '@codeNucleotideType', null, true)}"/>
				<mx:DataGridColumn headerText="Sort Order"  id="sortOrderCol"  dataField="@sortOrder" width="70" editable="true" editorDataField="text">
					<mx:itemEditor>
						<mx:Component>
							<mx:TextInput restrict="0-9" maxChars="2" editable="true"/>
						</mx:Component>
					</mx:itemEditor>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="" width="35" editable="false">
					<mx:itemRenderer>
						<mx:Component>
							<mx:HBox verticalAlign="top" horizontalGap="0"  horizontalScrollPolicy="off">
								<mx:LinkButton label="Edit" textDecoration="underline" fontSize="9" click="outerDocument.editSampleTypeOption()" color="#0000FF"/>
							</mx:HBox>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
</mx:VBox>
