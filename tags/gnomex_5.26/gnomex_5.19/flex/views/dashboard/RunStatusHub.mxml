<?xml version="1.0" encoding="utf-8"?>
<!-- <mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" -->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:db="views.dashboard.*"
		   width="550" height="440" backgroundAlpha="1"
		   cornerRadius="12" initialize="init()"
		   horizontalScrollPolicy="off"
		   verticalScrollPolicy="auto">   

	<mx:HTTPService 
		id="metrixInterface" 
		url="MetrixServerInterface.gx"
		resultFormat="e4x"
		destination="MetrixServerInterface"
		showBusyCursor="true"
		result="onGetMetrixInterface(event)"
		fault="parentApplication.onFailHttpRequest('Unable to get metrix interface result', event)"
		useProxy="false">
		
	</mx:HTTPService>

	<mx:XMLListCollection id="MIList" source="{metrixInterface.lastResult.Summary}"/> 

<mx:Script>
	<![CDATA[
		
		// Imports
		import flash.events.TimerEvent;
		import flash.utils.Timer;
		
		import mx.collections.ArrayCollection;
		import mx.collections.Sort;
		import mx.collections.SortField;
		import mx.collections.XMLListCollection;
		import mx.controls.Alert;
		import mx.controls.ProgressBar;
		import mx.events.CloseEvent;
		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;
		import mx.events.DragEvent;
		import mx.events.FlexEvent;
		import mx.events.ListEvent;
		import mx.managers.DragManager;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		import mx.utils.ObjectUtil;
		
		// Variables
		[Bindable]
		private var conStatus:Boolean = false;
				
		[Bindable]
		public var activeRuns:String = "0";
		
		[Bindable]
		private var finishedRuns:String = "0";
		
		[Bindable]
		private var haltedRuns:String = "0";
		
		[Bindable]
		private var turnRuns:String = "0";
		
		[Bindable]
		private var refreshTimer:Timer = new Timer(600000);
		
		public function init():void {
			// Retrieve initial SummaryCollection from MetrixServer using controller.
			checkSecurity();
			// Only retrieve data when user is a superAdmin.
			if(currentState == "AdminState"){
				for each (var facility:XML in parentApplication.coreFacilitiesICanManage) {
					if(parentApplication.getCoreFacilityProperty(facility.@idCoreFacility, parentApplication.PROPERTY_SHOW_METRIX_DASHBOARD) == 'Y'){
						metrixInterface.send();
						conStatus = false;
						break;
					}
				}
			}
		}
		
		public function checkSecurity():void {
			if (parentApplication.hasPermission("canReceiveAdminNotification")) {
				currentState = "AdminState";
			} else if (parentApplication.hasPermission("canReceiveBillingNotification")) {
				currentState = "BillingState"; 
			} else if (parentApplication.hasPermission("canReceiveWorkflowNotification")){
				currentState = "WorkflowState";
			} else {
				currentState = "UserState";
			}
		}
		
		public function refreshData(e:TimerEvent):void{
			metrixInterface.send();
			refreshTimer.removeEventListener(TimerEvent.TIMER, refreshData);
		}		
		
		private function onGetMetrixInterface(event:ResultEvent):void {
			if(event.result.name() == "SummaryCollection"){
				conStatus = true;
				failText.visible = false;
				RSTbox.includeInLayout = true;
				RSTbox.visible = true;
				if(MIList.length == 0){
					emptyNote.visible = true;
					emptyText.visible = true;
					emptyNote.includeInLayout = true;
					emptyText.includeInLayout = true;
					refreshTimer.delay = 60000;
				}else{
					emptyNote.visible = false;
					emptyText.visible = false;
					emptyNote.includeInLayout = false;
					emptyText.includeInLayout = false;
					refreshTimer.delay = 600000;
				}
				
				// Set counts for global status counters
				// activeRuns
				if(metrixInterface.lastResult.@active != ""){
					activeRuns = metrixInterface.lastResult.@active;
				}
				
				// finishedRuns
				if(metrixInterface.lastResult.@finished != ""){
					finishedRuns = metrixInterface.lastResult.@finished;
				}
				
				// haltedRuns
				if(metrixInterface.lastResult.@error != ""){
					haltedRuns = metrixInterface.lastResult.@error;
				}
				
				// turnRuns
				if(metrixInterface.lastResult.@turn != ""){
					turnRuns = metrixInterface.lastResult.@turn;
				}
				
				// Set timer -- Polling with dynamic interval.
				refreshTimer.addEventListener(TimerEvent.TIMER, refreshData);
				refreshTimer.start();
			} else {
				RSTbox.includeInLayout = false;
				RSTbox.visible = false;
				emptyText.visible = false;
				emptyNote.visible = false;
				failText.visible = true;
			}
		}
	]]>
</mx:Script>
	<mx:states>
		<mx:State name="AdminState"/>
		<mx:State name="BillingState"/>
		<mx:State name="WorkflowState" />
		<mx:State name="UserState"/>
	</mx:states>
	<mx:VBox width="100%" height="100%">
		<mx:HBox width="497" height="32" horizontalAlign="center" paddingTop="0">
			<mx:Label id="mainTitle" height="24" fontSize="18" text="Sequencer Status"/>
		</mx:HBox>
		<mx:HRule width="100%"/>
		<mx:HBox id="overViewBar"  width="100%" >
			<mx:LinkButton id="overViewButton" fontWeight="bold" textDecoration="underline" label="Overview" click="parentApplication.theViews.selectedChild = parentApplication.sequencerOverview"/>
		</mx:HBox>
		<mx:VBox verticalGap="3" label="Recent" width="90%" height="100%" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4" backgroundAlpha="1" fontSize="10">
			<mx:HBox id="RSTbox" verticalGap="0" visible="false" includeInLayout="{!emptyNote.includeInLayout}" horizontalGap="0" verticalAlign="middle">
				<db:RunStatusTab id="runStatusTab" filterState="0" />
			</mx:HBox>
			<mx:VBox id="emptyNote"  height="200" width="351" visible="true" includeInLayout="{!RSTbox.includeInLayout}" verticalAlign="middle" fontSize="12" fontWeight="bold">
				<mx:Spacer id="emptySpace" width="100%" />
				<mx:Text id="emptyText" selectable="false" visible="false" text="No Active Runs" paddingLeft="180"/>
				<mx:Text id="failText" selectable="false" visible="false" text="Error Connecting to server" fontStyle="italic" paddingLeft="160"/>
			</mx:VBox>
		</mx:VBox>
	</mx:VBox>
</mx:Canvas>
