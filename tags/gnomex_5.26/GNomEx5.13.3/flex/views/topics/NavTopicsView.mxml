<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"     
		   label="Data Tracks" width="100%" height="100%" 
		   xmlns:views="views.*"
		   xmlns:analysis="views.analysis.*"
		   xmlns:experiment="views.experiment.*"
		   xmlns:datatrack="views.datatrack.*"
		   xmlns:topics="views.topics.*"
		   xmlns:util="views.util.*"
		   xmlns:renderers="views.renderers.*"
		   creationPolicy="all"  show="init()"
		   cornerRadius="10"  backgroundAlpha="0">
	<mx:states>
		<mx:State name="AdminState">
			<mx:SetStyle target="{vbox2}" name="borderStyle" value="none"/>
			<mx:SetStyle target="{topBar}" name="paddingRight" value="4"/>
			<mx:SetStyle target="{topBar}" name="paddingLeft" value="4"/>
		</mx:State>
		<mx:State name="UserState">
		</mx:State>
		<mx:State name="GuestState">
		</mx:State>
	</mx:states>

	<mx:HTTPService  
		id="getTopicList" 
		url="GetTopicList.gx"
		destination="getTopicList"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetTopicList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get topic list', event)"
		method="POST" 
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService>
		
	<mx:HTTPService             
		id="moveOrCopyTopic" 
		url="MoveOrCopyTopic.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onMoveOrCopyTopic(event)"
		fault="parentApplication.onFailHttpRequest('Failed to move topic', event)"
		method="POST"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService>	
	
	<mx:HTTPService             
		id="deleteTopic" 
		url="DeleteTopic.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onDeleteTopic(event)"
		fault="parentApplication.onFailHttpRequest('Failed to remove topic', event)"
		method="POST"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService>
		
	<mx:HTTPService  
		id="unlinkItemFromTopic" 
		url="UnlinkItemFromTopic.gx"
		destination="unlinkItemFromTopic"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onUnlinkItemFromTopic(event)"
		fault="parentApplication.onFailHttpRequest('Failed to unlink item from topic', event)"
		method="POST" 
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="addItemToTopic" 
		url="AddItemToTopic.gx"
		destination="addItemToTopic"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onAddItemToTopic(event)"
		fault="parentApplication.onFailHttpRequest('Failed to add item to topic', event)"
		method="POST" 
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService>	
	
	<mx:HTTPService  
		id="getRequest" 
		url="GetRequest.gx"
		destination="getRequest"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetRequest(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get request', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>

	<mx:HTTPService  
		id="getAnalysis" 
		url="GetAnalysis.gx"
		destination="getAnalysis"
		resultFormat="e4x"
		showBusyCursor="false"
		result="onGetAnalysis(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get analysis', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>
	
	<mx:HTTPService             
		id="makeUCSCLinks" 
		url="MakeDataTrackUCSCLinks.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onMakeUCSCLinks(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get UCSC link URLs', event)"
		method="POST"
		useProxy="false">
		<mx:request>
			<idDataTrack>{browseTree.selectedItem.@idDataTrack}</idDataTrack>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService
		id="destroyLinks"
		url="DestroyExistingLinks.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onDestroyLinks(event)"
		fault="parentApplication.onFailHttpRequest('Failed to destroy Links',event)"
		method="POST"
		useProxy="false">
		<mx:request>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService             
		id="makeIGVLink" 
		url="MakeDataTrackIGVLink.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onMakeIGVLink(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get IGV link URL', event)"
		method="POST"
		useProxy="false">
		<mx:request>
			
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService             
		id="makeLinks" 
		url="MakeDataTrackLinks.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onMakeLinks(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get link URLs', event)"
		method="POST"
		useProxy="false">
		<mx:request>
			<idDataTrack>{browseTree.selectedItem.@idDataTrack}</idDataTrack>
		</mx:request>
	</mx:HTTPService> 

<mx:Script>
<![CDATA[
	import flash.events.TimerEvent;
	import flash.utils.Timer;
	
	import mx.collections.ArrayCollection;
	import mx.collections.XMLListCollection;
	import mx.controls.Alert;
	import mx.controls.Menu;
	import mx.controls.ToolTip;
	import mx.core.DragSource;
	import mx.events.CloseEvent;
	import mx.events.DragEvent;
	import mx.events.ListEvent;
	import mx.events.MenuEvent;
	import mx.managers.DragManager;
	import mx.managers.PopUpManager;
	import mx.managers.ToolTipManager;
	import mx.rpc.events.ResultEvent;
	
	import views.renderers.TreeNodeRenderer;
	
	private static var alertButtonWidthDefault:Number = Alert.buttonWidth;
	
	private var refreshDictionaries:Boolean = false;
	
	public var topicNumber:String = "";

	public var isInitialized:Boolean = false;
	public var treatAsTopicClick:Boolean = false;
	
	public var dataTrackNumber:String = "";
	
	private var lastTreeItem:ListEvent;
	
	public var treeItemToSelect:Object = null; 
	
	public var refreshItem:Object = null; 
	
	[Bindable]
	public var selectedIdProject:String = null;
	
	public var selectedIdRequest:Object;
	
	public var selectedIdLab:String;
	
	[Bindable]
	public var selectedExperiment:Object; 
	
	public var selectedIdAnalysis:Object;
	
	[Bindable]
	public var selectedAnalysis:Object;
	
	[Bindable]
	private var dataTrackCountLabel:String = "";
	[Bindable]
	private var allowExpandAll:Boolean = true;
	
	private var hitCount:int = 0;
	private var firstHitItem:XML = null;
	private var currentIndex:int = 0;
	private var hitToolTip:ToolTip = null;
	
	private var reassignIsMove:Boolean = false;
	
	private var itemToRemove:Object = null;
	private var itemToSelect:XML;
	//private var itemsToRemove:Array = new Array();
	
	private var dragParams:ArrayCollection = null;
	private var dropNode:Object = null;
	
	public function checkDirty():void {
	}

	
	public function init():void {
		refreshTopics();
		checkSecurity();	
		isInitialized = true;
	}
	
	private function checkSecurity():void {
		currentState = "";
		if (parentApplication.hasPermission("canWriteAnyObject")) {
			currentState = "AdminState";
		} else if (parentApplication.currentState == "GuestState" || !parentApplication.hasPermission("canSubmitRequests")) {
			// Users who don't belong to a lab treated same as guests
			currentState = "GuestState";
		} else {
			this.currentState = "UserState";
		}
	}
	
	private function onGetTopicList(event:ResultEvent): void {
		if (getTopicList.lastResult.name() != "TopicList") {
			Alert.show(getTopicList.lastResult..ACTMESSAGE.@TEXT);
			browseTree.visible = false;
			return;
		}
		browseTree.visible = true;
		
		// If we are looking up a topic by number, get the tree item to select
		if (this.topicNumber != "") {
			var dt:Object = getTopicList.lastResult.Folder..Topic.(@idTopic == topicNumber);			
			if (dt is XMLList && dt.length() > 0) {
				treeItemToSelect = dt[0];
			} else {
				treeItemToSelect = dt;
			}
			topicNumber = "";
			cbAlwaysExpandTree.selected = false;
		}
		
		callLater(expandAppropriateNodes);  	
	}
	
	private function selectEmphasizedNode(node:Object):Boolean {
		if (node.@emphasize == 'Y') {
			treeItemToSelect = node;
			return true;
		} else {
			var found:Boolean = false;
			for each(var child:Object in node.children()) {
				found = selectEmphasizedNode(child);
				if (found) {
					break;
				}
			}
			return found;
		}
	}
	
	private function expandAppropriateNodes():void {
		itemToSelect = getItemToSelect();
		var topic:Object; 
		if (allowExpandAll && cbAlwaysExpandTree.selected) {
			// If the user has check the 'Expand tree' checkbox,
			// just expand all nodes
			this.expandAllNodes();
			browseTree.validateNow();
			callLater(selectTreeItem);					
		} else if (itemToSelect != null && (
				itemToSelect.name() == "Topic" 
				|| itemToSelect.name() == "Request"
				|| itemToSelect.name() == "Analysis"
				|| itemToSelect.name() == "DataTrack")) {		
			expandParents(itemToSelect);
			browseTree.validateNow();
			callLater(selectTreeItem);
		} else {
			// If not looking for specific item then expand to first level of topics
			//browseTree.expandChildrenOf(getTopicList.lastResult, true);
			var node:XMLList = getTopicList.lastResult.Folder;
			browseTree.expandItem(node[0], true);
			for each(topic in getTopicList.lastResult.Folder.Topic) {
			//	browseTree.expandItem(topic, true);
				expandAllCategoryNodes(topic)
			}
			//callLater(selectTreeItem);
		}
		
	}
	
	private function expandAllCategoryNodes(node:Object):void {
		for each(var category:Object in node.Category) {
			browseTree.expandItem(category, true);					
		}
		for each(var topic:Object in node.Topic) {
			expandAllCategoryNodes(topic)
		}		
		
	}
	
	private function expandParents(node:XML):void {
		if (node && !browseTree.isItemOpen(node)) {
			browseTree.expandItem(node, true);
			expandParents(node.parent());
		}
	}
	
	private function selectTreeItem():void {
		if (itemToSelect != null) {
			browseTree.selectedItem = itemToSelect;
			var idx:int = browseTree.getItemIndex(itemToSelect);
			browseTree.scrollToIndex(idx);
		} else {
			browseTree.selectedItem = null;
		}
		// Automatically expand all category nodes.
		var items:XMLList = getTopicList.lastResult.Folder..Category;
		for each(var category:Object in items) {
			browseTree.expandItem(category, true);
		}
		if(treatAsTopicClick) {
			treatAsTopicClick = false;
			onTreeClick();
		}
	}
	
	private function getItemToSelect():XML {
		if (treeItemToSelect == null) {
			return null;
		} 
		if (treeItemToSelect is XMLList && treeItemToSelect.length() == 0) {
			return null;	
		}
		if (treeItemToSelect is XMLList && treeItemToSelect.length() > 0) {
			treeItemToSelect = treeItemToSelect[0];
		}
		
		var item:XMLList = null;
		if (treeItemToSelect.name() == "Topic") {
			item = getTopicList.lastResult.Folder..Topic.(@idTopic == treeItemToSelect.@idTopic);
		} else if (treeItemToSelect.name() == "DataTrack") {
			item = getTopicList.lastResult.Folder..DataTrack.(@idDataTrack == treeItemToSelect.@idDataTrack && @idTopic == treeItemToSelect.@idTopic);
		} else if (treeItemToSelect.name() == "Analysis") {
			item = getTopicList.lastResult.Folder..Analysis.(@idAnalysis== treeItemToSelect.@idAnalysis && @idTopic == treeItemToSelect.@idTopic);
		} else if (treeItemToSelect.name() == "Request") {
			item = getTopicList.lastResult.Folder..Request.(@idRequest == treeItemToSelect.@idRequest && @idTopic == treeItemToSelect.@idTopic);
		} 
		if (item != null && item.length() > 0) {
			return XML(item[0]);				
		} else {
			return null;
		}
		
	}
	
	private function findTopic(topicList:XMLList):XMLList {
		var item:XMLList = topicList.(@idTopic == treeItemToSelect.@idTopic);
		if (item == null || item.length() == 0) {
			var childList:XMLList = topicList.Topic;
			if (childList != null && childList.length() > 0) {
				item = findTopic(childList);
			}
		}
		return item;
	}
	
	private function findRequest(requestList:XMLList):XMLList {
		var item:XMLList = requestList.(@idRequest == treeItemToSelect.@idRequest && @idTopic == treeItemToSelect.@idTopic);
		if (item == null || item.length() == 0) {
			var childList:XMLList = requestList.Topic.Category.Request;
			if (childList != null && childList.length() > 0) {
				item = findRequest(childList);
			}
		}
		return item;
	}
	
	private function findAnalysis(analysisList:XMLList):XMLList {
		var item:XMLList = analysisList.(@idAnalysis == treeItemToSelect.@idAnalysis && @idTopic == treeItemToSelect.@idTopic);
		if (item == null || item.length() == 0) {
			var childList:XMLList = analysisList..Analysis;
			if (childList != null && childList.length() > 0) {
				item = findAnalysis(childList);
			}
		}
		return item;
	}
	
	
	private function findDataTrack(dataTrackList:XMLList):XMLList {
		var item:XMLList = dataTrackList.(@idDataTrack == treeItemToSelect.@idDataTrack && @idTopic == treeItemToSelect.@idTopic);
		if (item == null || item.length() == 0) {
			var childList:XMLList = dataTrackList.Topic.Category.DataTrack;
			if (childList != null && childList.length() > 0) {
				item = findDataTrack(childList);
			}
		}
		return item;
	}
	

	public function onTreeClick():void {
		this.treeItemToSelect = this.browseTree.selectedItem;
		if (topicView.dirtyTopic != null) {
			topicView.dirtyTopic.resetDirty();
		}
		this.selectView();
	}
	
	private function onTreeDoubleClick():void {
		if ((this.browseTree.selectedItem.name() == "Request" && this.browseTree.selectedItem.@label.toString().indexOf("(Restricted Visibility)") > -1)
			|| ((this.browseTree.selectedItem.name() == "Analysis" || this.browseTree.selectedItem.name() == "DataTrack")  
				&& this.browseTree.selectedItem.@number.toString().indexOf("(Restricted Visibility)") > -1)) {
			return;
		}

		if(this.browseTree.selectedItem.name() == "Request") {
			parentApplication.showExperimentById(browseTree.selectedItem.@idRequest);
		} else if (this.browseTree.selectedItem.name() == "Analysis") {
			parentApplication.showAnalysisForNumber(browseTree.selectedItem.@number);
		} else if (this.browseTree.selectedItem.name() == "DataTrack") {
			parentApplication.showDataTrackForNumber(browseTree.selectedItem.@number);
		}
	}
	
	public function selectView():void {
		if (this.browseTree.selectedItem == null 
			|| this.browseTree.selectedItem.name() == "Folder"
			|| this.browseTree.selectedItem.name() == "Category"
			|| (this.browseTree.selectedItem.name() == "Request" && this.browseTree.selectedItem.@label.toString().indexOf("(Restricted Visibility)") > -1)
			|| ((this.browseTree.selectedItem.name() == "Analysis" || this.browseTree.selectedItem.name() == "DataTrack")  
				&& this.browseTree.selectedItem.@number.toString().indexOf("(Restricted Visibility)") > -1 )) {
			this.mainViewStack.selectedChild = this.blankView;
			return;
		}
		
		if (this.browseTree.selectedItem.name() == "Topic") {
			removeButton.label = 'Delete'; 			
		} else {
			removeButton.label = 'Remove link';   			
		}
             
		if (this.browseTree.selectedItem.name() == "Topic") {			
			if(this.mainViewStack.selectedChild.id == "topicView") {
				topicViewShow();
			} else {
				this.mainViewStack.selectedChild = this.topicView;
			}	
		} else if (this.browseTree.selectedItem.name() == "DataTrack") {
			if(this.mainViewStack.selectedChild.id == "dataTrackView") {
				dataTrackViewShow();
			} else {
				this.mainViewStack.selectedChild = this.dataTrackView;
			}			                
		} else if (this.browseTree.selectedItem.name() == "Request") {
			if(this.mainViewStack.selectedChild.id == "experimentViews") {
				experimentViewShow();
			} else {
				mainViewStack.selectedChild = experimentViews; 
			}			
		} else if (this.browseTree.selectedItem.name() == "Analysis") {
			if(this.mainViewStack.selectedChild.id == "analysisViews") {
				analysisViewShow();
			} else {
				this.mainViewStack.selectedChild = this.analysisViews; 
			}				 
		}
	}
	
	private function dataTrackViewShow():void {		
		var parms1:Object = new Object();
		parms1.idDataTrack = this.browseTree.selectedItem.@idDataTrack;
		dataTrackView.getDataTrack.send(parms1);
		dataTrackView.downloadButton.visible = true;
		dataTrackView.downloadButton.includeInLayout = true;
	}
	
	private function topicViewShow():void {
		this.topicView.init();
	}
	
	private function experimentViewShow():void {
		// These are needed by experimentDetailView
		selectedIdLab = null;
		selectedIdProject = null;
		selectedIdRequest = browseTree.selectedItem.@idRequest;			
		var params:Object = new Object();
		params.idRequest = this.browseTree.selectedItem.@idRequest;
		getRequest.send(params);
		
		var viewTitle:String = (browseTree.selectedItem.@isExternal == 'Y' ? 'View External Experiment ' :  'View Experiment ') + browseTree.selectedItem.@requestNumber;
		experimentDetailView.titleLabel.text = viewTitle;
		experimentDetailView.navBackButton.visible = false;
		experimentDetailView.navBackButton.includeInLayout = false;
		
		var editTitle:String = (browseTree.selectedItem.@isExternal == 'Y' ? 'Edit External Experiment ' :  'Edit Experiment ')+ browseTree.selectedItem.@requestNumber;
		if (experimentEditView != null && experimentEditView.titleLabel != null) {
			experimentEditView.titleLabel.text = editTitle;
		}	
		experimentViews.selectedChild = experimentDetailView;
	}
	
	private function analysisViewShow():void {
		analysisDetailView.titleLabel.text = "Analysis " + browseTree.selectedItem.@number;
		selectedIdAnalysis = browseTree.selectedItem.@idAnalysis;
		var parms:Object = new Object();
		parms.idAnalysis = selectedIdAnalysis; 
		getAnalysis.send(parms);
		selectedIdLab = browseTree.selectedItem.@idLab;
		analysisViews.selectedChild = this.analysisDetailView;  		
	}
	
	private function onGetRequest(event:ResultEvent):void {
		selectedExperiment = getRequest.lastResult.Request.(@idRequest == this.browseTree.selectedItem.@idRequest);
		experimentDetailView.titleLabel.text = (browseTree.selectedItem.@isExternal == 'Y' ? 'External Experiment ' :  'Experiment ') + browseTree.selectedItem.@requestNumber;
		callLater(postOnGetRequest);	
	}
	
	private function postOnGetRequest():void {
		experimentDetailView.detail.setupForm(selectedExperiment);	
	}
	
	private function onGetAnalysis(event:ResultEvent):void {
		if (getAnalysis.lastResult.name() == "SUCCESS") {
			Alert.show("Analysis not found");
			return;
		}
		if (getAnalysis.lastResult.name() != "OpenAnalysisList") {
			Alert.show(getAnalysis.lastResult..ACTMESSAGE.@TEXT);
			return;
		}
	
		if (selectedIdAnalysis != null) {
			selectedAnalysis = getAnalysis.lastResult.Analysis.(@idAnalysis == selectedIdAnalysis);			
		} 				
		analysisDetailView.setupForm(this.selectedAnalysis);	
	}
	
	private function collapseAllNodes():void {
		
		browseTree.expandItem(getTopicList.lastResult, false);
		for each(var folder:Object in getTopicList.lastResult.Folder.Topic) {
			browseTree.expandItem(folder, false);
		}
		browseTree.validateNow();
	}
	
	public function expandAllNodes():void
	{
		for each(var topic:Object in getTopicList.lastResult.Folder.Topic) {
			browseTree.expandChildrenOf(topic,true);
		}
		browseTree.validateNow();
		treeContainer.validateNow();
	}	
	

	public function getTreeIcon(item:Object):Class {
		if (item.name() == "Topic") {		
			if (item.@codeVisibility == "MEM") {
				return parentApplication.iconTopicMember;
			} else if (item.@codeVisibility == "MEMCOL") {
				return parentApplication.iconTopicMember;
			} else if (item.@codeVisibility == "OWNER") {
				return parentApplication.iconTopicOwner;
			} else if (item.@codeVisibility == "INST") {
				return parentApplication.iconTopicInstitution;
			} else {
				return parentApplication.iconTopicPublic;
			}			
		} else if (item.name() == "Request") {
			return parentApplication.getTreeIcon(item);
		} else if (item.name() == "Analysis") {
			return parentApplication.getTreeIcon(item);
		} else if (item.name() == "DataTrack") {
			return parentApplication.getDataTrackTreeIcon(item);
		} else if (item.name() == "Category") {
			return null;
		}
		return parentApplication.iconFolder;
	}     
	
	public function refreshTopicsAndSelect(itemToSelect:XML):void {
		treeItemToSelect = itemToSelect;
		refreshTopics();
		treatAsTopicClick = true;
	}

	public function refreshTopics():void {
		var parms:Object = new Object();
		
		getTopicList.send(parms);
	}
	
	private function promptToRemoveSelectedItems():void {
		itemToRemove = browseTree.selectedItem;
		if(itemToRemove == null) {
			return;
		}

		if (itemToRemove.name() == "Topic") {
			this.promptToRemoveTopic();
		} else {
			this.promptToUnlinkItemFromTopic();
		}		
	}
   
	private function promptToRemoveTopic():void {
		if (itemToRemove.children() != null && itemToRemove.children().length() > 0) {
			Alert.show("Deleting topic " + itemToRemove.@label +
				" will also remove all descendant topics and links to experiments, analyses, and data tracks.\n\n" +
				"Are you sure you want to delete the topic and all of its contents?\n",
				"Warning", 
				(Alert.YES | Alert.NO), this, 
				onPromptToRemoveTopic);      			
		} else {
			Alert.show("Delete topic '" + itemToRemove.@label + "'?",
				"Confirm", 
				(Alert.YES | Alert.NO), this, 
				onPromptToRemoveTopic);     
		}
	}
	
	private function onPromptToRemoveTopic(event:CloseEvent):void {
		if (event.detail==Alert.YES) {
			
			removeTopic();
		}
	}
	
	private function removeTopic():void {
		// After the delete operation has finished,
		// select either the next sibling, or if no more children,
		// the parent node.
		if (itemToRemove.childIndex() == 0) {
			this.treeItemToSelect = itemToRemove.parent();
		} else {
			var idx:int = browseTree.selectedItem.childIndex() - 1;
			this.treeItemToSelect = itemToRemove.parent().children()[idx];
		}
		
		
		// Delete the Topic
		var params:Object = new Object();
		params.idTopic = itemToRemove.@idTopic;
		deleteTopic.send(params);
	}
	
	private function onDeleteTopic(event:ResultEvent):void {
		if (deleteTopic.lastResult.name() == "SUCCESS") {
			topicView.dirtyTopic.resetDirty();
			refreshTopics();			
		} else {
			Alert.show(deleteTopic.lastResult..ACTMESSAGE.@TEXT);
		}
	}
      
	private function promptToUnlinkItemFromTopic():void {
		var message:String = "";
		// If the dataTrack is referenced under multiple dataTrack
		// groupings, just unlink it.  If the dataTrack is refererenced
		// under only one dataTrack grouping, delete the dataTrack.
		var dataTrack:Object = dataTrackView.getDataTrack.lastResult;
		
		var itemType:String = "data track";
		var itemNumber:String = itemToRemove.@number;
		
		if(itemToRemove.name() == "Request") {
			itemType = "request";
			itemNumber = itemToRemove.@requestNumber;
		} else if (itemToRemove.name() == "Analysis") {
			itemType = "analysis";
		} 
		
		message = "Remove link to " + itemType + " " + itemNumber + 
				" under topic " + itemToRemove.parent().parent().@label + "?";

		Alert.show(message,
			"Confirm", 
			(Alert.YES | Alert.NO), this, 
			onPromptToUnlinkItemFromTopic);     
	}
	
	private function onPromptToUnlinkItemFromTopic(event:CloseEvent):void {
		if (event.detail==Alert.YES) {
			unlinkItem();
		}
	}
	
	private function unlinkItem():void {
		// After the delete operation has finished,
		// select either the next sibling, or if no more children,
		// the parent node.
		if (itemToRemove.childIndex() == 0) {
			this.treeItemToSelect = itemToRemove.parent().parent();
		} else {
			var idx:int = itemToRemove.childIndex() - 1;
			this.treeItemToSelect = itemToRemove.parent().children()[idx];
		} 
		
		// Unlink the item
		var params:Object = new Object();
		if(itemToRemove.name() == "Request") {
			params.idRequest = itemToRemove.@idRequest;
		} else if (itemToRemove.name() == "Analysis") {
			params.idAnalysis = itemToRemove.@idAnalysis;
		} else {
			params.idDataTrack = itemToRemove.@idDataTrack;
		} 

		if (itemToRemove.parent().parent().name() == "Topic") {
			params.idTopic = itemToRemove.parent().parent().@idTopic;
		}
		unlinkItemFromTopic.send(params);		
	}
	
	private function onMoveOrCopyTopic(event:ResultEvent):void {
		if (moveOrCopyTopic.lastResult.name() == "SUCCESS") {
			if (topicView.dirtyTopic != null) {
				topicView.dirtyTopic.resetDirty();
			}
			
			treeItemToSelect = new XML("<Topic " +
				"idTopic='" + moveOrCopyTopic.lastResult.@idTopic + "' " +
				"/>");
			
			if (dragParams.length > 0) {
				this.performMoveOrCopy();
			} else {
				refreshTopics();			
			}
			
		} else {
			Alert.show(moveOrCopyTopic.lastResult..ACTMESSAGE.@TEXT);
		}
	}
	
	private function onUnlinkItemFromTopic(event:ResultEvent):void {	
		if (unlinkItemFromTopic.lastResult.name() == "SUCCESS") {
			topicView.dirtyTopic.resetDirty();
			refreshTopics();			
		} else {
			Alert.show(unlinkItemFromTopic.lastResult..ACTMESSAGE.@TEXT);
		}	
	}
	
	private function onAddItemToTopic(event:ResultEvent):void {
		if (addItemToTopic.lastResult.name() == "SUCCESS") {
			if (topicView.dirtyTopic != null) {
				topicView.dirtyTopic.resetDirty();
			}		
			treeItemToSelect = new XML("<Topic " +
				"idTopic='" + addItemToTopic.lastResult.@idTopic + "' " +
				"/>");
			refreshTopics();			
		} else {
			Alert.show(addItemToTopic.lastResult..ACTMESSAGE.@TEXT);
		}
	}

	private function onDragDrop( event:DragEvent ) : void
	{
		
		var ds:DragSource = event.dragSource;
		var withinTopics:Boolean;
		var action:String;
		var sourceId:String = "";
		
		if(event.dragInitiator is Tree) {
			sourceId = Tree(event.dragInitiator).id;
		}
		
		if(sourceId == "browseTree") {
			withinTopics = true;
			action = "move";
		} else if(sourceId == 'expBrowseTree' || sourceId == 'anBrowseTree' || sourceId == 'dtBrowseTree') {
			withinTopics = false;
			action = "link"
		} else {
			Alert.show('Object dragged from illegal source');
			event.preventDefault();
			event.target.hideDropFeedback(event);
			DragManager.showFeedback(DragManager.NONE);		
			return;
		}
		
		// retrieve the data associated with the "items" format. This will be the data that
		// the dragInitiator has copied into the DragSource.
		var items:Array = ds.dataForFormat("treeItems") as Array;
		
		// Determine the drop node
		browseTree.selectedIndex = this.browseTree.calculateDropIndex(event);
		dropNode = browseTree.selectedItem as XML;
		
		// If the drop node is an experiment, analysis, data track, or category go up to next topic level
		// and make it the drop target
		if (dropNode.name() == "Request" || dropNode.name() == "Analysis" || dropNode.name() == "DataTrack") {
			dropNode = dropNode.parent().parent();
		} else if(dropNode.name() == "Category") {
			dropNode = dropNode.parent();
		}
		
		
		// retrieve the data associated with the "items" format. This will be the data that
		// the dragInitiator has copied into the DragSource.
		var itemCnt:int = 0;
		dragParams = new ArrayCollection();
		var params:Object = new Object();
		//for each(var dragItem:Object in ds.dataForFormat("treeItems") as Array) {
		for each(var dragItem:Object in items) {
			var keep:Boolean = true;
			if (dragItem.name() == "Request") {
				params.name = "Request";
				//params.idRequest = dragItem.@idRequest;
				params["idRequest" + itemCnt] = dragItem.@idRequest;
				if (withinTopics && dragItem.parent().parent().name() == "Topic") {
					params.idTopicOld = dragItem.parent().parent().@idTopic;
				}
				if (dropNode.name() == "Topic") {
					params.idTopic = dropNode.@idTopic;
				}
				// Ignore operation if user dragged to its own parent
				if (withinTopics && dragItem.parent().parent() == dropNode) {
					keep = false;
				}
				
				// Ignore operation if dragging request to the root folder node
				if (dropNode.name() == "Folder") {
					keep = false;
				}
				
				if (keep) {
					dragParams.addItem(params);
					itemCnt++;
				}
			} else if (dragItem.name() == "Analysis") {
				params.name = "Analysis";
				//params.idAnalysis = dragItem.@idAnalysis;
				params["idAnalysis" + itemCnt] = dragItem.@idAnalysis;
				if (withinTopics && dragItem.parent().parent().name() == "Topic") {
					params.idTopicOld = dragItem.parent().parent().@idTopic;
				}
				if (dropNode.name() == "Topic") {
					params.idTopic = dropNode.@idTopic;
				}
				// Ignore operation if user dragged to its own parent
				if (withinTopics && dragItem.parent().parent() == dropNode) {
					keep = false;
				}
				
				// Ignore operation if dragging analysis to the root folder node
				if (dropNode.name() == "Folder") {
					keep = false;
				}
				
				if (keep) {
					dragParams.addItem(params);
					itemCnt++;
				}
			} else if (dragItem.name() == "DataTrack") {
				params.name = "DataTrack";
				//params.idDataTrack = dragItem.@idDataTrack;
				params["idDataTrack" + itemCnt] = dragItem.@idDataTrack;
				if (withinTopics && dragItem.parent().parent().name() == "Topic") {
					params.idTopicOld = dragItem.parent().parent().@idTopic;
				}
				if (dropNode.name() == "Topic") {
					params.idTopic = dropNode.@idTopic;
				}
				// Ignore operation if user dragged to its own parent
				if (withinTopics && dragItem.parent().parent() == dropNode) {
					keep = false;
				}
				
				// Ignore operation if dragging data track to the root folder node
				if (dropNode.name() == "Folder") {
					keep = false;
				}
				
				if (keep) {
					dragParams.addItem(params);
					itemCnt++;
				}
			} else if (dragItem.name() == "Topic") {
				params.name = "Topic";
				params.idTopic = dragItem.@idTopic;
				
				if (dropNode.name() == "Topic") {
					params.idParentTopicNew = dropNode.@idTopic;
				}
				
				// Ignore operation if user dragged to its own parent
				if (dragItem.parent() == dropNode) {
					keep = false;
				}
				// Ignore operation if item is dragged back to itself
				if (dragItem == dropNode) {
					keep = false;
				}

				if (dragItem == dropNode) {
					keep = false;
				}
				// Disallow operation if user does not have write
				// permissions on dataTrack grouping
				if (dragItem.@canWrite != "Y") {
					Alert.show("Insufficient permissions to move topic " + dragItem.@label + ".");
					event.preventDefault();
					event.target.hideDropFeedback(event);
					DragManager.showFeedback(DragManager.NONE);		   	
					return;
				}
				if (keep) {
					dragParams.addItem(params);			       		
				}								
			}
		}
			
		event.preventDefault();
		event.target.hideDropFeedback(event);
		DragManager.showFeedback(DragManager.NONE);		
		
		// Reassign dragged dataTrack or dataTrack grouping to
		// new parent 
		if (dropNode != null && dragParams.length > 0) {
			if(withinTopics) {
				promptToMoveOrCopy();				
			} else {
				addItemToTopic.send(params);
			}
		}		
		return;       
	} 
	
	private function promptToMoveOrCopy():void {
		reassignIsMove = true;
		Alert.yesLabel = "Move";
		Alert.noLabel = "Copy";
		Alert.buttonWidth = 100;
		
		var destination:String = "Do you want to move or copy this branch to the top level of the tree?";
		if(dropNode != null) {
			destination = "Do you want to move or copy items to " + dropNode.@label + "?";
		}
		
		Alert.show(destination, "", 
			(Alert.YES | Alert.NO | Alert.CANCEL), this, 
			onPromptToMoveOrCopy);     
		
	}
	
	private function onPromptToMoveOrCopy(event:CloseEvent):void {
		if (event.detail==Alert.YES) {
			reassignIsMove = true;
			this.performMoveOrCopy();
		} else if (event.detail==Alert.NO) {
			reassignIsMove = false;
			this.performMoveOrCopy();
		} 
		Alert.yesLabel = "Yes";
		Alert.noLabel = "No";
		Alert.buttonWidth = alertButtonWidthDefault;
	}        
	
	
	private function performMoveOrCopy():void {
		if (dragParams.length == 0) {
			return;
		}
		var params:Object = dragParams[0];
		params.isMove = reassignIsMove ? "Y" : "N";
		if (params.name == "Request" || params.name == "Analysis" || params.name == "DataTrack") {
			dragParams.removeItemAt(0);
			addItemToTopic.send(params);			
		} else if (params.name == "Topic") {
			dragParams.removeItemAt(0);
			moveOrCopyTopic.send(params);
		} 	
	}
	
	public function setLastTreeItem(event:ListEvent):void
	{
		lastTreeItem = event;
	}
	
	private function newTopic():void {
		var addTopicWindow:TopicAddWindow = TopicAddWindow(PopUpManager.createPopUp(parentApplication.mainArea, TopicAddWindow, true));
		PopUpManager.centerPopUp(addTopicWindow);
		var parentObj:Object = null;
		if(browseTree.selectedItem != null) {
			// If tree item selected then find the level at which to add the topic
			var currentNode:Object = browseTree.selectedItem;	
			var avoidInfinite:int = 0;
			while(currentNode.name() != 'Topic' && currentNode.name() != 'Folder' && currentNode != null && avoidInfinite < 100) {
				currentNode = currentNode.parent();
				avoidInfinite++;
			}
			if(currentNode.name() == 'Topic') {
				parentObj = currentNode;
			}
		}

		addTopicWindow.init(parentObj, this);
		addTopicWindow.topicName.setFocus();
	}
	
	private function expandTree():void {
		browseTree.selectedItem=null;
		if (cbAlwaysExpandTree.selected) {
			expandAppropriateNodes();
		}	else {
			this.collapseAllNodes();
			expandAppropriateNodes();  
		}
	}
	
	public function getTreeLabel(item:Object):String {
		var retValue:String = "";
		if (item.name() == "Analysis") { 
			retValue = item.@number;
			if(retValue.toString().indexOf("(Restricted Visibility)") > -1 ) {
				retValue;
			}
			return retValue;
		} else if (item.name() == "DataTrack") {
			retValue = item.@number;
			if(retValue.toString().indexOf("(Restricted Visibility)") > -1 ) {
				retValue = retValue + addToLabel(item.@label) + addToLabel(parentApplication.getLabName(item, 0)) + addToLabel(item.@createDate);
			}
			return retValue;
		} else {
			return item.@label;
		}
	}
	
	public function addToLabel(label:String): String {
		if(label.length > 0) {
			return (" - " + label);
		}
		return label;
	}
	
	/************************************************************************
	 * Make UCSC Links 
	 *
	 */
	public function createUCSCLink():void {
		if (dataTrackView.getDataTrack.lastResult..Dir.@ucscLinkFile == 'convert') {
			Alert.show("Patience! Converting useq to bw/bb format.");
		}
		makeUCSCLinks.send();
	}
	
	private function onMakeUCSCLinks(event:ResultEvent):void {
		if (makeUCSCLinks.lastResult.name() == "SUCCESS") {
			navigateToURL(new URLRequest(makeUCSCLinks.lastResult.@ucscURL1),"UCSC");
			//work around to flex bug
			if (makeUCSCLinks.lastResult.@ucscURL2 != ""){
				var txt:String = "Click to load second track after first completes:<br><br><a href='"+makeUCSCLinks.lastResult.@ucscURL2+"' target='UCSC'><b><u>Load Second Track</u></b></a>";
				var alert:Alert = Alert.show(txt);
				alert.mx_internal::alertForm.mx_internal::textField.htmlText =txt;
			}
			
		}
		else {
			//this should never happen
			Alert.show(makeUCSCLinks.lastResult.toXMLString(), "Error! Failed to convert UCSC link, contact site admin!");
		}
	}
	
	public function removeLinks():void {
		destroyLinks.send();
	}
	
	private function onDestroyLinks(event:ResultEvent):void {
		if (destroyLinks.lastResult.name() == "SUCCESS") {
			Alert.show("All Links Destroyed");
		} else {
			Alert.show(destroyLinks.lastResult.toXMLString(), "Error! Failed to delete links, contact site admin!");
		}
		
	}
	
	/************************************************************************
	 * Make IGV Link 
	 *
	 */
	public function createIGVLink():void {
		if (dataTrackView.getDataTrack.lastResult..Dir.@ucscLinkFile == 'convert') {
			Alert.show("Creating an IGV data repository containing all user-visible datatracks affiliated with IGV-supported genome builds. " + 
				"If there are unconverted USeq files, this can take a significant amount of time.  When finished, a URL link will be displayed. " +
				"Paste the link into IGV's Data Registry URL field.  If new data tracks are added, a new repository must be created, but the " +
				"link will remain valid.\n\nDo you wish to continue?", "IGV Warning", Alert.YES | Alert.NO, this, onIGVLinkPrompt);
		} else {
			makeIGVLink.send();
		}
	}
	
	private function onIGVLinkPrompt(event:CloseEvent):void {
		if (event.detail == Alert.YES) {
			makeIGVLink.send();
		}
	}
	
	private function onMakeIGVLink(event:ResultEvent):void {
		if (makeIGVLink.lastResult.name() == "SUCCESS") {
			var txt:String = makeIGVLink.lastResult.@igvURL;
			var alert:Alert = Alert.show(txt, "IGV Link:");
			alert.mx_internal::alertForm.mx_internal::textField.htmlText =txt;
		}
		else {
			//this should never happen
			Alert.show(makeIGVLink.lastResult.toXMLString(), "Error! Failed to make IGV link, contact site admin!");
		}
	}
	
	/************************************************************************
	 * Make URL Links for all files, converts useq to bw/bb
	 *
	 */
	public function createURLLinks():void {
		if (dataTrackView.getDataTrack.lastResult.@ucscLinkFile == 'convert') {
			Alert.show("Patience! Converting useq to bw/bb format.");
		}
		//send to server
		makeLinks.send();
	}
	
	//response from server
	private function onMakeLinks(event:ResultEvent):void {
		if (makeLinks.lastResult.name() == "SUCCESS") {
			var txt:String = makeLinks.lastResult.@urlsToLink;
			var alert:Alert = Alert.show(txt, "URL Links:");
			alert.mx_internal::alertForm.mx_internal::textField.htmlText =txt;
			//paste to clipboard, doesn't work on all browsers
			//System.setClipboard(txt);
		}
		else {
			//this should never happen
			Alert.show(makeLinks.lastResult.toXMLString(), "Error! Failed to fetch URL links, contact site admin!");
		}
	}


]]>
</mx:Script>
	
<mx:VBox width="100%" height="100%" id="vbox1" verticalGap="2">
	<mx:VBox styleName="panelBox" width="100%" 
			 verticalGap="10" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" borderStyle="outset" dropShadowEnabled="false" id="vbox2">

			<mx:HBox width="100%" verticalAlign="middle" paddingTop="4" paddingBottom="4"
					 id="topBar" horizontalGap="10" paddingLeft="4" paddingRight="4" >
				<mx:Text text="Topics" styleName="titleLabel" width="80"/>
				<mx:LinkButton   label="New topic" 
								 enabled="{currentState != 'GuestState'}"
								 visible="{currentState != 'GuestState'}"
								 includeInLayout="{currentState != 'GuestState'}"
								 toolTip="New topic" 
								 click="{newTopic()}" 
								 id="linkbutton1"  textAlign="left" 
								 disabledIcon="@Embed(source='../../assets/topic_tag_new_disable.png')" 
								 icon="@Embed(source='../../assets/topic_tag_new.png')" />
				<mx:LinkButton   label="Delete"
								 enabled="{currentState != 'GuestState' &amp;&amp; browseTree.selectedItem != null  &amp;&amp; browseTree.selectedItem.name() != 'Folder'  &amp;&amp; browseTree.selectedItem.name() != 'Category'}"
								 visible="{currentState != 'GuestState'}"
								 includeInLayout="{currentState != 'GuestState'}"
								 toolTip="Remove link between topic and experiment, analysis, or datatrack" 
								 click="{promptToRemoveSelectedItems()}" 
								 id="removeButton"  textAlign="left" 
								 disabledIcon="@Embed(source='../../assets/cross_disable.png')" 
								 icon="@Embed(source='../../assets/cross.png')" />
				<mx:LinkButton   label="Link to data"
								 enabled="true"
								 visible="{currentState != 'GuestState'}"
								 includeInLayout="{currentState != 'GuestState'}"
								 toolTip="Link experiments, analysis, or data tracks" 
								 click="{this.mainViewStack.selectedChild = this.topicLinkView}" 
								 id="linkToDataButton"  textAlign="left" 
								 disabledIcon="@Embed(source='../../assets/link_disable.png')" 
								 icon="@Embed(source='../../assets/link.png')" />
				<mx:Spacer width="100%"/>
				<mx:LinkButton 	 label="Refresh" 
								 icon="@Embed(source='../../assets/action_refresh.gif')" 
								 click="refreshTopics()" 
								 textDecoration="none" 
								 paddingRight="0" 
								 id="linkbutton2" 
								 paddingLeft="0"/>

			</mx:HBox>
    </mx:VBox>
	
	<mx:HDividedBox height="100%" width="100%" id="hdividedbox1">
		<mx:VBox styleName="panelBox"   width="320" height="100%" id="navPanel" >
			<mx:VBox id="navContainer" width="100%" height="100%" verticalGap="0" paddingTop="0" label="Data Tracks">
				<mx:VBox id="treeContainer"   width="100%" height="100%" paddingLeft="2" verticalGap="0" >
					
					<mx:Tree width="100%" height="100%" 
							 dataProvider="{getTopicList.lastResult}" 
							 showRoot="false" 
							 id="browseTree" 
							 itemRollOver="setLastTreeItem(event)"
							 click="onTreeClick();"
							 doubleClickEnabled="true" 
							 doubleClick="onTreeDoubleClick();"
							 borderStyle="none"
							 labelField="@label"
							 labelFunction="getTreeLabel"
							 dragEnabled="{currentState != 'GuestState'}" 
							 dropEnabled="{currentState != 'GuestState'}" 
							 dragMoveEnabled="true"
							 dragDrop="onDragDrop(event);" 
							 itemRenderer="views.renderers.TreeNodeRenderer"
							 iconFunction="getTreeIcon" backgroundAlpha="1" ></mx:Tree>
					
				</mx:VBox>
				
			</mx:VBox>
			<mx:ControlBar width="100%" verticalAlign="bottom">				
				<mx:CheckBox id="cbAlwaysExpandTree" label="Expand"  					
					click="expandTree()" 
					enabled="{this.allowExpandAll}"
					styleName="menuLabelSmall" />
				<mx:Spacer width="100%"/>
				<mx:Label text="{dataTrackCountLabel}" styleName="menuLabelSmall" />
			</mx:ControlBar>
		</mx:VBox>
		
		 
		<mx:ViewStack id="mainViewStack" width="100%" height="100%" creationPolicy="auto">
			<mx:VBox id="blankView" width="100%" height="100%" styleName="panelBox"/>			    	
			
			<datatrack:DataTrackView id="dataTrackView" width="100%" height="100%" creationPolicy="all" creationComplete="dataTrackViewShow();">
			</datatrack:DataTrackView>
			
			<topics:TopicView id="topicView" width="100%" height="100%" creationPolicy="all" creationComplete="topicViewShow();">
			</topics:TopicView>
			
			<topics:TopicLinkView id="topicLinkView" width="100%" height="100%" creationPolicy="all">
			</topics:TopicLinkView>
	
			<mx:ViewStack id="experimentViews" creationPolicy="all" visible="true" width="100%" height="100%" creationComplete="experimentViewShow();">
				
				<experiment:ExperimentDetailPanel id="experimentDetailView" width="100%" height="100%">
				</experiment:ExperimentDetailPanel>
				
				<experiment:ExperimentEditView id="experimentEditView" width="100%" height="100%">
				</experiment:ExperimentEditView>
				
			</mx:ViewStack>
			
		
			<mx:ViewStack creationPolicy="all" id="analysisViews" visible="true" width="100%" height="100%" creationComplete="analysisViewShow();">			
				
				<analysis:AnalysisDetailView id="analysisDetailView" width="100%" height="100%">
				</analysis:AnalysisDetailView>
				
				<analysis:AnalysisEditView id="analysisEditView" width="100%" height="100%">
				</analysis:AnalysisEditView>
				
				
			</mx:ViewStack>			
		</mx:ViewStack>

    </mx:HDividedBox>	

	
</mx:VBox>
	
</mx:Canvas>
