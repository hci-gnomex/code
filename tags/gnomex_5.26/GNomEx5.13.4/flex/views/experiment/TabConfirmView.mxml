<?xml version="1.0" encoding="utf-8"?>
<exp:TabConfirmBase xmlns:mx="http://www.adobe.com/2006/mxml" 
	label="Confirm" width="100%"  
	height="100%"    horizontalScrollPolicy="off"
	enabled="false"
	show="init()" xmlns:exp="views.experiment.*" xmlns:util="views.util.*"> 
	
	
	
<mx:Script>	
	<![CDATA[
		import hci.flex.controls.ComboBox;
		import hci.flex.controls.DropdownLabel;
		
		import mx.collections.Grouping;
		import mx.collections.GroupingCollection;
		import mx.collections.GroupingField;
		
		import views.util.AnnotationDataGridColumn;
		
		[Bindable]
		private var longDescriptionRowCount:int = 0;
		
		override public function setupView():void {
	        this.parentDocument.samplesView.initializeBarcoding();
			parentDocument.getEstimatedBilling();
			parentDocument.getMultiplexLanes();
			
			this.ccNumber.visible = parentDocument.samplesView.getShowCCNumber(); 

			if(parentDocument.request.@captureLibDesignId != "" && parentDocument.requestCategory.@isIlluminaType == 'Y'){
				capLibDesignBox.visible = true;
				capLibDesignBox.includeInLayout = true;
				avgInsertSizeBox.includeInLayout = false;
				avgInsertSizeBox.visible = false;
				capLibLabel.text = parentDocument.request.@captureLibDesignId;
			}
			else if(parentDocument.request.@meanInsertSizeRequested != "" && parentDocument.requestCategory.@isIlluminaType == 'Y'){
				avgInsertSizeBox.visible = true;
				avgInsertSizeBox.includeInLayout = true;
				capLibDesignBox.includeInLayout = false;
				capLibDesignBox.visible = false;
				avgInsertSizeLabel.text = parentDocument.request.@meanInsertSizeRequested + " bp";
				
			}
			else{
				capLibDesignBox.includeInLayout = false;
				capLibDesignBox.visible = false;
				avgInsertSizeBox.includeInLayout = false;
				avgInsertSizeBox.visible = false;
			}
			
			submitterName.text = parentDocument.getSubmitterName();
			this.expDescriptArea.htmlText = parentDocument.saveDescription;
			this.experimentName.text = parentDocument.request.@name;
			this.seqNotes.text = parentDocument.request.@corePrepInstructions != null ? parentDocument.request.@corePrepInstructions : '';
			this.bioNotes.text = parentDocument.request.@analysisInstructions != null ? parentDocument.request.@analysisInstructions : '';
			
			longDescriptionRowCount = 0;
			for each (var s:Object in parentDocument.samples) {
				if (s.@description.toString().length > 30) {
					var count:Number = s.@description.toString().length / 30;
					longDescriptionRowCount += Math.round(count);
				}
			}
			
			if (this.parentDocument.isSolexaState()) {
				if (this.confirmContainer.contains(this.hybsConfirmContainer)) {
					this.confirmContainer.removeChild(this.hybsConfirmContainer);
				}
				if (parentApplication.submitInternalExperiment()) {
					if (parentDocument.showSampleMultiplexGroup()) {
						if (!this.confirmContainer.contains(this.lanesConfirmContainer)) {
							this.confirmContainer.addChild(this.lanesConfirmContainer);
						}
						if (this.confirmContainer.contains(this.lanesConfirmFlatContainer)) {
							this.confirmContainer.removeChild(this.lanesConfirmFlatContainer);
						}
					} else {
						if (!this.confirmContainer.contains(this.lanesConfirmFlatContainer)) {
							this.confirmContainer.addChild(this.lanesConfirmFlatContainer);
						}
						if (this.confirmContainer.contains(this.lanesConfirmContainer)) {
							this.confirmContainer.removeChild(this.lanesConfirmContainer);
						}
					}					
				} else {
					if (this.confirmContainer.contains(this.lanesConfirmContainer)) {
						this.confirmContainer.removeChild(this.lanesConfirmContainer);
					}
					if (this.confirmContainer.contains(this.lanesConfirmFlatContainer)) {
						this.confirmContainer.removeChild(this.lanesConfirmFlatContainer);
					}
				}
	
			} else {
				if (this.parentDocument.isMicroarrayState()) {
					if (!this.confirmContainer.contains(this.hybsConfirmContainer)) {
						this.confirmContainer.addChild(this.hybsConfirmContainer);
					}					
				} else {
					if (this.confirmContainer.contains(this.hybsConfirmContainer)) {
						this.confirmContainer.removeChild(this.hybsConfirmContainer);
					}					
				}
				if (this.confirmContainer.contains(this.lanesConfirmContainer)) {
					this.confirmContainer.removeChild(this.lanesConfirmContainer);
				}
				if (this.confirmContainer.contains(this.lanesConfirmFlatContainer)) {
					this.confirmContainer.removeChild(this.lanesConfirmFlatContainer);
				}				
				if (parentDocument.isCapSeqState()) {
					this.sampleDropOffLocationVbox.visible = true;
				} else {
					this.sampleDropOffLocationVbox.visible = false;	
				}
				this.vbox4.visible = !parentDocument.isSequencingState() && !parentDocument.isSequenomState() && !parentDocument.isClinicalSequenomState();
				this.vbox3.visible = !parentDocument.isSequenomState() && !parentDocument.isClinicalSequenomState();
				this.vbox4.includeInLayout = !parentDocument.isSequencingState() && !parentDocument.isSequenomState() && !parentDocument.isClinicalSequenomState();
				this.vbox3.includeInLayout = !parentDocument.isSequenomState() && !parentDocument.isClinicalSequenomState();
				this.expDescriptBox.includeInLayout = !parentDocument.isClinicalSequenomState();
				this.expDescriptBox.visible = !parentDocument.isClinicalSequenomState();
				if (parentDocument.isMitSeqState()) {
					this.primerVbox.visible = true;
					this.primer.text = parentDocument.sampleSetupView.getSamplePrimerList();
				} else {
					this.primerVbox.visible = false;	
				}
			}
			this.confirmContainer.validateNow();
			
		} 

		override public function showHideColumns():void {
			this.filteredSamples.removeAll();
			for each(var sample:Object in parentDocument.samples) {
				if (sample.@name != null && sample.@name != '') {
					this.filteredSamples.addItem(sample);
				}
			}
			
			this.label1.text = 'Samples (' + filteredSamples.length + ')';
			
			// Edit buttons shown
			if (parentDocument.isSequencingState()) {
				this.parentDocument.submitButton.label = 'Save';
				this.parentDocument.submitButton.enabled = true;
				this.parentDocument.agreeCheckbox.selected = true;
				this.parentDocument.agreeBox.includeInLayout = false;
				this.parentDocument.agreeBox.visible = false;
				
			} else {
				this.parentDocument.submitButton.label = 'Submit';
				this.parentDocument.agreeBox.visible = true;
				this.parentDocument.agreeBox.includeInLayout = true;
				this.parentDocument.agreeCheckbox.selected = false;
			}		
			
			// Edit columns shown
			this.sampleTypeColumn.visible = true;
			this.sampleNameColumn.visible = true;
			
			concentrationCol.visible = parentApplication.isInternalExperimentSubmission
									   && !parentDocument.isSequencingState()
									   && !parentDocument.isSequenomState()  
									   && !parentDocument.isClinicalSequenomState();
			
			wellNameCol.visible = false;
			if (parentDocument.samplesView.hasPlates()) {
				wellNameCol.visible = true;
				plateNameCol.visible = true;
			}
			if (parentDocument.isFragAnalState() || parentDocument.isMitSeqState()) {
				wellNameCol.visible = true;
			}
			containerTypeCol.visible = parentDocument.isCapSeqState() || parentDocument.isSequenomState() ? true : false;
			
			// set all assay columns to not visible.
			for each(var colRemove:DataGridColumn in samplesGridConfirm.columns) {
				if (colRemove.dataField != null && colRemove.dataField.substr(0, 9) == "@hasAssay") {
					colRemove.visible = false;
				}
			}
			
			// reset selected ones to visible -- creating them if necessary.
			if (parentDocument.isFragAnalState()) {
				if (parentDocument.selectedAssaysCollection.length > 0) {
					for (var x:int = 0; x < parentDocument.assayCollection.length; x++) {
						var assayObject:Object = parentDocument.assayCollection.getItemAt(x);
						if (parentDocument.isAssaySelected(assayObject)) {
							var dataField:String = parentDocument.getAssayDataField(x);
							var exists:Boolean = false;
							var assayCol:DataGridColumn = null;
							for each(var colSearch:DataGridColumn in samplesGridConfirm.columns) {
								if (colSearch.dataField != null && colSearch.dataField == dataField) {
									assayCol = colSearch;
									exists = true;
									break;
								}
							}
							if (exists) {
								assayCol.visible = true;
							} else {
								var newCol:DataGridColumn = new DataGridColumn();
								newCol.dataField = dataField;
								newCol.headerText = assayObject.@display;
								newCol.width = 60;
								newCol.resizable = false;
								newCol.visible = true;
								newCol.editable = false;
								newCol.labelFunction = blankNLabelFunction;
								var newColumns:Array = new Array();
								var pushed:Boolean = false;
								for each (var col0:DataGridColumn in samplesGridConfirm.columns) {
									if (!pushed && col0.dataField != null && (col0.dataField == "@description" || (col0.dataField.substr(0, 9) == "@hasAssay" && col0.dataField > newCol.dataField))) {
										newColumns.push(newCol);
										pushed = true;
									}
									newColumns.push(col0);
								}
								samplesGridConfirm.columns = newColumns;
								this.samplesGridConfirm.validateNow();
							}
						}
					}
					
				}
			}
			
			if (parentDocument.isCherryPickState()) {
				this.sourcePlate.visible = true;
				this.sourceWell.visible = true;
				this.destinationWell.visible = true;
			} else {
				this.sourcePlate.visible = false;
				this.sourceWell.visible = false;
				this.destinationWell.visible = false;
			}
			
			if (parentDocument.isSequencingState() || parentDocument.isSequenomState() || parentDocument.isClinicalSequenomState()) {
				concentrationUnitConfirmColumn.visible = false;
				sampleOrganismConfirmColumn.visible = false;
				otherOrganismCol.visible = false;
				chipTypeConfirmColumn.visible = false; 
				otherSamplePrepMethodConfirmCol.visible = false;
				preppedByCoreCol.visible = false;
				seqLibProtocolConfirmCol.visible = false;
				this.numberOfSequencingCyclesCol.visible = false;
				this.seqRunTypeCol.visible = false;
				this.sampleRowNumberCol.visible = true;
				this.sampleTypeColumn.visible = true;
				this.descriptionColumn.visible = false;
				if ( parentDocument.isCapSeqState() ) {
					this.descriptionColumn.visible = true;
				} else if ( parentDocument.isClinicalSequenomState() ) {
					this.sampleNameColumn.visible = false;
				} else if ( parentDocument.isIScanState() ) {
					this.sampleTypeColumn.visible = false;
				}
				
			} else if (parentDocument.isSolexaState()) {
				concentrationUnitConfirmColumn.visible = parentApplication.submitInternalExperiment();
				sampleOrganismConfirmColumn.visible = true;
				chipTypeConfirmColumn.visible = false; 
				
				preppedByCoreCol.visible = parentApplication.submitInternalExperiment();
				otherSamplePrepMethodConfirmCol.visible = parentApplication.submitInternalExperiment();
				
				this.numberOfSequencingCyclesCol.visible = parentApplication.submitInternalExperiment();
				this.seqRunTypeCol.visible = parentApplication.submitInternalExperiment();
				
				this.barcodeColumn.visible = parentDocument.showSampleBarcodes();
				this.barcodeColumnB.visible = parentDocument.showSampleBarcodesB();
				this.customBarcodeColumn.visible = parentDocument.showSampleCustomBarcodes();
				
				this.sampleRowNumberCol.visible = false;
				
				if (!parentApplication.submitInternalExperiment()) {
					seqLibProtocolConfirmCol.visible = false;
				} else if (!parentDocument.isEditState() &&
				    parentDocument.sampleSetupView.currentState == "SolexaSetupState") {
					seqLibProtocolConfirmCol.visible = false;
				} else {
					seqLibProtocolConfirmCol.visible = true;
				}
			} else if (parentDocument.currentState == 'QCState') {
				concentrationUnitConfirmColumn.visible = true;
				sampleOrganismConfirmColumn.visible = false;
				otherOrganismCol.visible = false;
				chipTypeConfirmColumn.visible = true; 
				otherSamplePrepMethodConfirmCol.visible = true;
				preppedByCoreCol.visible = false;
				seqLibProtocolConfirmCol.visible = false;
				this.numberOfSequencingCyclesCol.visible = false;
				this.seqRunTypeCol.visible = false;
				this.sampleRowNumberCol.visible = false;

			} else {
				concentrationUnitConfirmColumn.visible = parentApplication.submitInternalExperiment();
				sampleOrganismConfirmColumn.visible = true;
				otherOrganismCol.visible = false;
				chipTypeConfirmColumn.visible = false; 
				otherSamplePrepMethodConfirmCol.visible = true;
				preppedByCoreCol.visible = false;
				seqLibProtocolConfirmCol.visible = false;
				this.numberOfSequencingCyclesCol.visible = false;
				this.seqRunTypeCol.visible = false;
				this.sampleRowNumberCol.visible = false;

			}
			// Hide the annotation columns 
			if (parentDocument.currentState == 'QCState' || 
				parentDocument.isSequencingState() || 
				parentDocument.isSequenomState() || parentDocument.isClinicalSequenomState()) {
				// Make all annotation columns invisible
				for each(var col:DataGridColumn in this.samplesGridConfirm.columns) {
					if (col is views.util.AnnotationDataGridColumn) {
						col.visible = false;
					}
				} 
			}
			
			// externals never show organism column in sample
			if (parentDocument.request!=null && parentDocument.request.@isExternal == "Y") {
				this.sampleOrganismConfirmColumn.visible = false;
			}
			otherOrganismCol.visible = false;
  						 
        }
		
		
		public function getSamplesConfirmGridRowNumber(item:Object,col:int):String
		{
			if (filteredSamples!= null) {
				var x:int = filteredSamples.getItemIndex(item) + 1;
				return String(x);     		
			} else {
				return "";
			}
		}
		
		override public function setBarcodeColVisibility(visibility:Boolean):void {
			this.barcodeColumn.visible = false;
		}
		
		
		override public function setChannel2ColVisibility(visibility:Boolean):void {
			this.channel2SampleConfirmColumn.visible = false;
		}
		
		override public function getSamplesGrid():DataGrid {
			return this.samplesGridConfirm;
		}
		
		override public function setBillingGridRowCount(rowCount:int):void{
			this.billingConfirmGrid.rowCount = rowCount;
			this.billingConfirmGrid.validateNow();
		}
		
	]]>
	
</mx:Script>
	
	<mx:XMLListCollection id="filteredSamples" />
	
	<mx:VBox id="confirmHeaderContainer"  width="100%" backgroundAlpha="0.0" verticalGap="0" paddingRight="25"  >
		<mx:VBox   width="100%"  backgroundAlpha="0.0" verticalGap="0" paddingBottom="5" paddingLeft="5" paddingTop="0" id="confirmContainer" >
			<mx:HBox width="100%" horizontalGap="4">
				<mx:VBox height="100%" verticalGap="0" width="170" horizontalScrollPolicy="off">
					<mx:Label text="Experiment" textDecoration="none" height="16" styleName="formLabel" />
					<mx:Text text="{parentDocument.requestCategoryName}" id="requestKindLabel" width="140"/>
					<mx:Text text="{parentDocument.applicationName}" id="appLabel" width="140" visible="{!parentDocument.isSequencingState()}"/>
					<mx:Text text="{parentDocument.sampleSetupView.sequenomApplicationDesc!=null ? parentDocument.sampleSetupView.sequenomApplicationDesc.text:''}" 
							 id="appLabel0" width="140" />
					<mx:HBox verticalGap="0" horizontalGap="0" verticalAlign="middle" id="hbox5" >
						<mx:Label text="Core to extract DNA:" textAlign="left" id="label0" 
								  visible="{(parentDocument.isSequenomState()||parentDocument.isClinicalSequenomState())&amp;&amp;parentDocument.sampleSetupView.coreToExtractDNACheckBox!=null}"/>
						<mx:Text  text="{parentDocument.sampleSetupView.coreToExtractDNACheckBox.selected ? 'Yes' : 'No'}" 
								  visible="{(parentDocument.isSequenomState()||parentDocument.isClinicalSequenomState())&amp;&amp;parentDocument.sampleSetupView.coreToExtractDNACheckBox!=null}" />
					</mx:HBox>
				</mx:VBox>
				<mx:VBox height="100%" verticalGap="0" width="140" horizontalScrollPolicy="off">
					<mx:Label text="Lab" styleName="formLabel" height="16"/>
					<mx:Text text="{parentDocument.isAmendState() ? parentDocument.labCombo.selectedItem.@name : parentDocument.setupView.labCombo.selectedItem.@name}" width="140" id="text2"/>
					<mx:Label text="Submitter" styleName="formLabel" height="16"/>
					<mx:Text  id="submitterName" width="140" />
				</mx:VBox> 
				<mx:VBox height="100%" verticalGap="0" width="180" horizontalScrollPolicy="off">
					<mx:Label text="Project" styleName="formLabel"  height="16"/>
					<mx:Text text="{parentDocument.isAmendState() ? parentDocument.request.@projectName : parentDocument.setupView.projectCombo.selectedItem.@name}" width="200"  height="100%" id="text1"/>
				</mx:VBox>
				<mx:VBox height="100%" verticalGap="0" id="vbox2" width="240" horizontalScrollPolicy="off">
					<mx:Label text="Billing Account" styleName="formLabel" height="16"/>
					<mx:Text text="{parentDocument.isAmendState() ? parentDocument.request.@billingAccountName : parentDocument.setupView.billingAccountCombo.selectedItem.@accountName}" width="250"/>
					<mx:Text text="{parentDocument.isAmendState() ? parentDocument.request.@billingAccountNumber : parentDocument.setupView.billingAccountCombo.selectedItem.@accountNumber}" width="250"/>
				</mx:VBox>
				<mx:TextArea styleName="instructionBox" width="284" wordWrap="true" id="textarea1" height="100" editable="false">
					  <mx:htmlText><![CDATA[1.  Please confirm the information below. Click the<br>     Back button or a tab to modify the request.<br>2.  Agree to estimated charges by clicking the <br>    "I authorize" checkbox.<br>3.  Approve the work request by clicking the Submit<br>    button.]]></mx:htmlText>
				</mx:TextArea>
			</mx:HBox>
				<mx:VBox width="100%" verticalGap="0" id="billingContainer">
				    <mx:HBox width="100%" id="chargesHeaderBox">
				    <mx:Label text="{'Estimated Charges ' + parentDocument.createBillingItems.lastResult.Request.@invoicePrice}" id="label2" styleName="formLabel" paddingTop="4"/>								    	
				    </mx:HBox>
					<mx:VBox width="100%" id="vbox1">
						<mx:DataGrid id="billingConfirmGrid"   showHeaders="false"  horizontalScrollPolicy="off"
							editable="false" dataProvider="{parentDocument.createBillingItems.lastResult..BillingItem}"  
							backgroundAlpha="0"  horizontalGridLines="false" verticalGridLines="false"  variableRowHeight="true" selectable="false" 
							sortableColumns="false" fontSize="11"  borderStyle="none" >
							<mx:rowCount>{parentDocument.createBillingItems.lastResult..BillingItem.length() + 1}</mx:rowCount>
							<mx:columns>
							   				<mx:DataGridColumn  headerText="Price Category" dataField="@category" editable="false" width="200">
							   				     <mx:itemRenderer>
							   				         <mx:Component>
							   				         <mx:Text text="{data.@category}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
							   				         </mx:Component>
							   				     </mx:itemRenderer>
							   				</mx:DataGridColumn>
							   				<mx:DataGridColumn headerText="Description" dataField="@description" editable="false" width="270">
							   				     <mx:itemRenderer>
							   				         <mx:Component>
							   				         <mx:Text text="{data.@description}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
							   				         </mx:Component>
							   				     </mx:itemRenderer>
							   				</mx:DataGridColumn>
							   				<mx:DataGridColumn headerText="Qty" dataField="@qty" editable="false" textAlign="right" width="50" >
							   				  <mx:itemRenderer>
							   				         <mx:Component>
							   				         <mx:Text  textAlign="right" text="{data.@qty}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
							   				         </mx:Component>
							   				     </mx:itemRenderer>
							   				</mx:DataGridColumn>
							   				<mx:DataGridColumn headerText=""   textAlign="center" editable="false" width="10" > 
							   				  <mx:itemRenderer>
							   				         <mx:Component>
							   				         <mx:Text  textAlign="center" text="X" styleName="{data.@other == 'Y' ?'other':'normal'}" />
							   				         </mx:Component>
							   				     </mx:itemRenderer>
							   				</mx:DataGridColumn>
							   				<mx:DataGridColumn headerText="Unit price" dataField="@unitPrice"  textAlign="right" editable="false" width="65" > 
							   				  <mx:itemRenderer>
							   				         <mx:Component>
							   				         <mx:Text  textAlign="right" text="{data.@unitPrice}" styleName="{data.@other == 'Y' ?'other':'normal'}" />
							   				         </mx:Component>
							   				     </mx:itemRenderer>
							   				</mx:DataGridColumn>
							   				<mx:DataGridColumn headerText=""   textAlign="left" editable="false" width="10" > 
							   				  <mx:itemRenderer>
							   				         <mx:Component>
							   				         <mx:Text  textAlign="left" text="=" styleName="{data.@other == 'Y' ?'other':'normal'}" />
							   				         </mx:Component>
							   				     </mx:itemRenderer>
							   				</mx:DataGridColumn>
							   				<mx:DataGridColumn headerText="Total price" dataField="@invoicePrice" textAlign="right" width="105" editable="false" >
							   				  <mx:itemRenderer>
							   				         <mx:Component>
							   				         <mx:Text text="{data.@invoicePrice}"  textAlign="right" styleName="{data.@other == 'Y' ?'other':'normal'}" />
							   				         </mx:Component>
							   				     </mx:itemRenderer> 
							   				</mx:DataGridColumn>
							   			</mx:columns>
						</mx:DataGrid>
					</mx:VBox>
					
				</mx:VBox> 
			<mx:VBox width ="100%" id="expDescriptBox" verticalGap="0" paddingTop="4">
				<mx:HBox id="nameDropOffHBox">
					<mx:VBox id="experimentNameVbox">
						<mx:Label text="Experiment Name" styleName="formLabel" height="16"/>
						<mx:Label id="experimentName" width="200" alpha="0.8"  text="{parentDocument.isAmendState() ? parentDocument.request.@name
								  : ''}"/>
					</mx:VBox>
					<mx:VBox id="capLibDesignBox" visible="false" includeInLayout="false">
						<mx:Label text="Capture Library Design Id" styleName="formLabel" height="16"/>
						<mx:Label id="capLibLabel" alpha="0.8" text=""/>
					</mx:VBox>
					<mx:VBox id="avgInsertSizeBox" visible="false" includeInLayout="false">
						<mx:Label text="Requested Mean Insert Size" styleName="formLabel" height="16"/>
						<mx:Label id="avgInsertSizeLabel" alpha="0.8" text=""/>
					</mx:VBox>
					<mx:VBox id="sampleDropOffLocationVbox" visible="false">
						<mx:Label text="Sample Drop Off Location" styleName="formLabel" height="16"/>
						<mx:Label id="sampleDropOffLocation" width="200" alpha="0.8"  text="{parentDocument.sampleSetupView.sampleDropOffLocationCombo.selectedItem.@display}"/>
					</mx:VBox>
					<mx:VBox id="primerVbox" visible="false">
						<mx:Label text="Sample Primers" styleName="formLabel" height="16"/>
						<mx:Label id="primer" alpha="0.8"  text=""/>
					</mx:VBox>
				</mx:HBox>
				<mx:Label text="Experiment Description" styleName="formLabel" paddingTop="5"/>
				<util:TextAreaWorkaround  width="100%" editable="false" id="expDescriptArea" 
										  verticalScrollPolicy="auto" backgroundColor="#FFFFFF"
										  htmlText="{parentDocument.request.@description}" borderColor="#E3E6E8"/>
				
				<mx:HBox width="100%" paddingTop="4">
					<mx:VBox width="50%" id="vbox3" verticalGap="0"   paddingTop="2">
						<mx:Label text ="Note for Core Facility" styleName="formLabel"/>
						<util:TextAreaWorkaround width="100%" editable="false" id="seqNotes" 
												 backgroundColor="#FFFFFF"
												 text="{parentDocument.isAmendState() ? parentDocument.request.@corePrepInstructions : ''}" borderColor="#E3E6E8"/>
					</mx:VBox>
					<mx:VBox id="vbox4" width = "50%" verticalGap="0"   paddingTop="2">
						<mx:Label text="Note for Bioinformatics Group" styleName="formLabel"/>
						<util:TextAreaWorkaround width="100%" editable="false"  id="bioNotes" backgroundAlpha="0.8" 
												 backgroundColor="#FFFFFF"
												 text="{parentDocument.isAmendState() ? parentDocument.request.@analysisInstructions : ''}" borderColor="#E3E6E8"/>
					</mx:VBox>
				</mx:HBox>
			</mx:VBox>

			 
			<mx:VBox verticalGap="0" width="100%" id="samplesConfirmContainer" paddingTop="4">
				<mx:Label text="{'Samples (' + filteredSamples.length + ')'}" id="label1" styleName="formLabel"/>
				<mx:DataGrid width="100%" id="samplesGridConfirm"  editable="false" dataProvider="{filteredSamples}" 
					backgroundAlpha="0" borderStyle="solid"  horizontalScrollPolicy="off" rowCount="{filteredSamples.length + longDescriptionRowCount + 1}"
					sortableColumns="false" alpha="0.8" fontSize="11" variableRowHeight="true" selectable="false" >
					<mx:columns>
						<mx:DataGridColumn id="sampleRowNumberCol" visible="true" editable="false" headerText=""  width="40" resizable="false" labelFunction="getSamplesConfirmGridRowNumber"/>
						<mx:DataGridColumn id="containerTypeCol" visible="false" headerText="Container" width="80" dataField="@containerType"/>
						<mx:DataGridColumn id="plateNameCol" visible="false" headerText="Plate" width="80" dataField="@plateName"/>
						<mx:DataGridColumn id="wellNameCol" visible="false" editable="false" headerText="Well"  width="40" resizable="false" dataField="@wellName"/>
						<mx:DataGridColumn headerText="Sample Name" id="sampleNameColumn" width="100" dataField="@name">				    
						</mx:DataGridColumn>
						
						<mx:DataGridColumn id="hasAssay1" visible="false" editable="false" headerText="Assay 1?" width="100" resizable="false" dataField="@hasAssay1">
						</mx:DataGridColumn>
						<mx:DataGridColumn id="hasAssay2" visible="false" editable="false" headerText="Assay 2?" width="100" resizable="false" dataField="@hasAssay2">
						</mx:DataGridColumn>
						<mx:DataGridColumn id="hasAssay3" visible="false" editable="false" headerText="Assay 3?" width="100" resizable="false" dataField="@hasAssay3">
						</mx:DataGridColumn>
						<mx:DataGridColumn id="hasAssay4" visible="false" editable="false" headerText="Assay 4?" width="100" resizable="false" dataField="@hasAssay4">
						</mx:DataGridColumn>
						
						<mx:DataGridColumn id="sourcePlate" visible="false" editable="false" headerText="Source Plate" width="150" resizable="false" dataField="@sourcePlate">
						</mx:DataGridColumn>
						<mx:DataGridColumn id="sourceWell" visible="false" editable="false" headerText="Source Well" width="75" resizable="false" dataField="@sourceWell">
						</mx:DataGridColumn>
						<mx:DataGridColumn id="destinationWell" visible="false" editable="false" headerText="Destination Well" width="75" resizable="false" dataField="@destinationWell">
						</mx:DataGridColumn>

						<mx:DataGridColumn id="concentrationCol" visible="true" headerText="Conc." width="65" dataField="@concentration"/>
		                <mx:DataGridColumn id="concentrationUnitConfirmColumn" headerText="Unit"  width="60" 
	                  	  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.ConcentrationUnit').DictionaryEntry, '@display', '@value', '@codeConcentrationUnit')}"/>
	                    <mx:DataGridColumn id="ccNumber" headerText="CC Number" dataField="@ccNumber" visible="false" width="60"/>

		                <mx:DataGridColumn id="multiplexGroupNumberColumn" headerText="Multiplex #" dataField="@multipexGroupNumber" editable="false" visible="false"
							width="58">
							<mx:headerRenderer>
								<mx:Component>
									<mx:VBox  horizontalScrollPolicy="off" verticalGap="0">
										<mx:Label text="Mutiplex"/>
										<mx:Label text="in group"/>
									</mx:VBox>
								</mx:Component>
							</mx:headerRenderer>
					    </mx:DataGridColumn>

	                    <mx:DataGridColumn id="barcodeColumn"  headerText="Index Tag A" width="130" dataField="@idOlogiBarcode" 
	                      editorDataField="value" sortable="false" editable="false" rendererIsEditor="true" 
	                      visible="false"
 	                      itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OligoBarcode').DictionaryEntry, '@display', '@value', '@idOligoBarcode')}" />
						
						<mx:DataGridColumn id="barcodeColumnB"  headerText="Index Tag B" width="130" dataField="@idOlogiBarcodeB" 
										   editorDataField="value" sortable="false" editable="false" rendererIsEditor="true" 
										   visible="false"
										   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OligoBarcode').DictionaryEntry, '@display', '@value', '@idOligoBarcodeB')}" />
						
						<mx:DataGridColumn headerText="Description" id="descriptionColumn" width="200" dataField="@description" wordWrap="true"/>
						
		                <mx:DataGridColumn id="customBarcodeColumn" headerText="Index Tag" dataField="@barcodeSequence" editable="false" visible="false"
							width="58">
					    </mx:DataGridColumn>
						
  					    <mx:DataGridColumn id="preppedByCoreCol" headerText="Core to prep lib?"   visible="{true}" width="104"  dataField="@seqPrepByCore" editable="false"/>
			            <mx:DataGridColumn headerText="Seq Lib Protocol" id="seqLibProtocolConfirmCol" width="160" 
	                  	  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqLibProtocol').DictionaryEntry, '@display', '@value', '@idSeqLibProtocol')}"/>
						<mx:DataGridColumn id="otherSamplePrepMethodConfirmCol" headerText="Nucl. acid extraction method" width="200" dataField="@otherSamplePrepMethod"/>
			            <mx:DataGridColumn id="sampleTypeColumn" headerText="Sample Type"  width="130"
	                  	  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType')}"/>
			            <mx:DataGridColumn headerText="Organism" id="sampleOrganismConfirmColumn" width="100" 
	                  	  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.OrganismLite').DictionaryEntry, '@display', '@value', '@idOrganism')}"/>
						<mx:DataGridColumn id="otherOrganismCol" headerText="Organism (other)" width="140" dataField="@otherOrganism"/>
		                <mx:DataGridColumn id="chipTypeConfirmColumn" headerText="Chip Type"  width="130" 
	                  	  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@codeBioanalyzerChipType')}"/>
					</mx:columns>
				</mx:DataGrid>
				
			</mx:VBox>
			
			<mx:VBox width="100%" verticalGap="0" id="hybsConfirmContainer" paddingTop="4" 
					 includeInLayout="{!parentDocument.isSequencingState()&amp;&amp;!parentDocument.isSequenomState()&amp;&amp;!parentDocument.isClinicalSequenomState()}"
					 visible="{!parentDocument.isSequencingState()&amp;&amp;!parentDocument.isSequenomState()&amp;&amp;!parentDocument.isClinicalSequenomState()}">
				<mx:Label text="{'Hybridizations (' + parentDocument.hybs.length + ')'}" id="label3" styleName="formLabel"/>
				<mx:DataGrid width="100%" id="hybsGridConfirm" rowCount="{parentDocument.hybs.length}"
					editable="false" dataProvider="{parentDocument.hybs}"  
					backgroundAlpha="0" borderStyle="solid" 
					sortableColumns="false" alpha="0.8" fontSize="11" >
					<mx:columns>
					    <mx:DataGridColumn editable="false" headerText="Cy3 Sample (green)"  width="122" labelFunction="parentDocument.getSampleChannel1Name"/>
					    <mx:DataGridColumn id="channel2SampleConfirmColumn" editable="false" headerText="Cy5 Sample (red)"  width="122" labelFunction="parentDocument.getSampleChannel2Name"/>
					     <mx:DataGridColumn headerText="Slide"  width="182" 
	                  	  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SlideDesign').DictionaryEntry, '@display', '@value', '@idSlideDesign')}"/>
					     <mx:DataGridColumn headerText="Slide Source"  width="52" 
	                  	  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SlideSource').DictionaryEntry, '@display', '@value', '@codeSlideSource')}"/>
					</mx:columns>
				</mx:DataGrid>
				 
			</mx:VBox>
            <mx:VBox  id="lanesConfirmContainer"  verticalGap="0" width="100%"  paddingTop="4" >
			  <mx:Label id="laneGridLabel" text="{'Sequencing setup ' + ' (' + parentDocument.multiplexLanes.length + ' lanes)'}" styleName="formLabel"/>
					<mx:AdvancedDataGrid width="100%"  id="lanesConfirmGrid" 
						rollOverColor="#C0C0C0" 
						editable="false"
						allowMultipleSelection="false" 
						horizontalScrollPolicy="off" 
						sortableColumns="false"
						sortExpertMode="true"  
						iconFunction="getEmptyTreeIcon"
						defaultLeafIcon="{null}" 
						rowCount="{parentDocument.lanes.length + parentDocument.multiplexLanes.length + 2}"
						displayItemsExpanded="true"  
						selectionColor="#FFFFB9" 
						alpha="0.8" fontSize="11">
						<mx:dataProvider>   
      						<mx:HierarchicalData source="{parentDocument.multiplexLanes}"/> 
    					</mx:dataProvider> 						
					<mx:columns>
					    <mx:AdvancedDataGridColumn  headerText=""  width="20" id="multiplexGroupNumberCol" dataField="@number" editable="false" />
					    <mx:AdvancedDataGridColumn  headerText="Sample"  width="100" dataField="@sampleName" editable="false"/>
			            <mx:AdvancedDataGridColumn  width="200" id="seqRunTypeCol" headerText="Seq Run Type"  dataField="@idSeqRunType" 						             						             
                  		  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry, '@display', '@value','@idSeqRunType', true)}"/>
			            <mx:AdvancedDataGridColumn width="65" id="numberOfSequencingCyclesCol" headerText="# Cycles"    editable="false" dataField="@idNumberSequencingCycles" 						             						             
                  		  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry, '@display', '@value', '@idNumberSequencingCycles', true)}"/>
			            <mx:AdvancedDataGridColumn headerText="Genome Build (align to)" dataField="@idGenomeBuildAlignTo" width="150" 
                  		  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.GenomeBuildLite').DictionaryEntry, '@display', '@value', '@idGenomeBuildAlignTo')}"/>
					</mx:columns>
					</mx:AdvancedDataGrid>
              	
				
			</mx:VBox>	
            <mx:VBox  id="lanesConfirmFlatContainer"  verticalGap="0" width="100%"  paddingTop="4" >
				  <mx:Label  text="{'Sequencing setup (' + parentDocument.lanes.length + ' lanes)'}" styleName="formLabel" paddingTop="10" id="label4"/>
					<mx:DataGrid width="100%"  
						rollOverColor="#C0C0C0" 
						editable="false"
						allowMultipleSelection="false" 
						horizontalScrollPolicy="off" 
						sortableColumns="false"
						rowCount="{parentDocument.lanes.length}"
						selectionColor="#FFFFB9" 
						alpha="0.8" fontSize="11"
						dataProvider="{parentDocument.lanes}">
					<mx:columns>
					    <mx:DataGridColumn  headerText="Sample"  width="222" labelFunction="parentDocument.getLaneSampleName" editable="false"/>
			            <mx:DataGridColumn  width="200"  headerText="Seq Run Type"  editable="false" dataField="@idSeqRunType" 						             						             
                  		  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SeqRunType').DictionaryEntry, '@display', '@value','@idSeqRunType', true)}"/>
			            <mx:DataGridColumn width="65" headerText="# Cycles"    editable="false" dataField="@idNumberSequencingCycles" 						             						             
                  		  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.NumberSequencingCycles').DictionaryEntry, '@display', '@value', '@idNumberSequencingCycles', true)}"/>
			            <mx:DataGridColumn headerText="Genome Build (align to)" dataField="@idGenomeBuildAlignTo" width="150" 
                  		  itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.GenomeBuildLite').DictionaryEntry, '@display', '@value', '@idGenomeBuildAlignTo')}"/>
					</mx:columns>
					</mx:DataGrid>
			</mx:VBox>
 </mx:VBox>
 </mx:VBox>
	
	<exp:states>
		<mx:State name="BillingExceedState" >
			<mx:AddChild relativeTo="{chargesHeaderBox}" position="lastChild">
				<mx:HBox borderStyle="none" id="hbox1" paddingBottom="2" >
					<mx:Text text="{'Total charges exceed balance remaining on billing account by ' + parentDocument.createBillingItems.lastResult.Request.@exceededDollarAmount + '. Experiment request cannot be submitted.'}" styleName="warningLabelSevere"/>			    	
				</mx:HBox>
			</mx:AddChild>
			<mx:SetStyle target="{chargesHeaderBox}" name="verticalAlign" value="bottom"/>
		</mx:State>
		<mx:State name="ExternalExperimentState">
			<mx:RemoveChild target="{vbox2}"/>
			<mx:SetProperty target="{text1}" name="width" value="300"/>
			<mx:SetProperty target="{text2}" name="width" value="200"/>
			<mx:SetProperty target="{requestKindLabel}" name="width" value="160"/>
			<mx:SetProperty target="{appLabel}" name="width" value="160"/>
			<mx:SetProperty target="{textarea1}" name="htmlText">
				<mx:value><![CDATA[1.  Please confirm that all information has been<br>     correctly entered. Modifications can be made by<br>     clicking the Back button or by clicking on a tab.<br>2.  Submit the experiment information by<br>      clicking the Submit button.]]></mx:value>
			</mx:SetProperty>
			<mx:RemoveChild target="{billingContainer}"/>
			<mx:SetProperty target="{label1}" name="text" value="{'Samples (' + parentDocument.samples.length + ' )'}"/>
			<mx:SetProperty target="{laneGridLabel}" name="text" value="{'Sequencing Lanes' + ' (' + parentDocument.multiplexLanes.length + ' )'}"/>
			<mx:SetProperty target="{label4}" name="text" value="{'Sequencing lanes (' + parentDocument.lanes.length + ' )'}"/>
			<mx:SetStyle target="{hybsGridConfirm}" />
			
		</mx:State>
		<mx:State name="DNASeqCoreState">
			<mx:SetProperty target="{textarea1}" name="htmlText" value="1.  Please confirm the information below. Click the&lt;br&gt;     Back button or a tab to modify the request.&lt;br&gt;2. Click save button."/>
			<mx:SetProperty target="{textarea1}" name="height" value="50"/>
		</mx:State>
	</exp:states>
</exp:TabConfirmBase>
