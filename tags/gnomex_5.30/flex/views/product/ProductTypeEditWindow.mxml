<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:util="views.util.*"
				title="Product Type Editor"
				creationComplete="{init()}"
				showCloseButton="true" close="{close()}"
				width="815" height="350">
	
	<mx:Script>
		<![CDATA[
			import hci.flex.dictionary.DictionaryEvent;
			import hci.flex.util.DictionaryManager;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import views.util.DirtyEvent;
			import views.util.ProductWindow;
			
			[Bindable]
			private var dictionaryManager:DictionaryManager;
			[Bindable]
			private var selectedProductType:Object = null;
			[Bindable]
			private var canDeleteSelectedProductType:Boolean = false;
			[Bindable]
			private var changeDetected:Boolean = false;
			[Bindable]
			private var showFields:Boolean = false;
			[Bindable]
			private var saveMode:String = null;
			private var previousItemCode:String = null;
			
			private static const SAVE_MODE_UPDATE:String = "update";
			private static const SAVE_MODE_INSERT:String = "insert";
			
			private function init():void {
				dictionaryManager = parentApplication.dictionaryManager;
				
				dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_ENTRY_ADDED, handleDictionaryEvent);
				dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_ENTRY_SAVED, handleDictionaryEvent);
				dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_ENTRY_DELETED, handleDictionaryEvent);
				dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_LOADED, handleDictionaryEvent);
				
				dirty.addEventListener(DirtyEvent.NOW_DIRTY, handleDirtyEvent);
				dirty.addEventListener(DirtyEvent.NOW_CLEAN, handleDirtyEvent);
				
				resetFields();
			}
			
			public function close():void {
				dictionaryManager.removeEventListener(DictionaryEvent.DICTIONARY_ENTRY_ADDED, handleDictionaryEvent);
				dictionaryManager.removeEventListener(DictionaryEvent.DICTIONARY_ENTRY_SAVED, handleDictionaryEvent);
				dictionaryManager.removeEventListener(DictionaryEvent.DICTIONARY_ENTRY_DELETED, handleDictionaryEvent);
				dictionaryManager.removeEventListener(DictionaryEvent.DICTIONARY_LOADED, handleDictionaryEvent);
				
				dirty.removeEventListener(DirtyEvent.NOW_DIRTY, handleDirtyEvent);
				dirty.removeEventListener(DirtyEvent.NOW_CLEAN, handleDirtyEvent);
				
				PopUpManager.removePopUp(this);
			}
			
			private function onProductTypeSelect():void {
				if (productTypeList.selectedItem != null) {
					if (selectedProductType == null || (selectedProductType != null && selectedProductType != productTypeList.selectedItem)) {
						dirty.resetDirty();
					}
					selectedProductType = productTypeList.selectedItem;
					populateFields();
					showFields = true;
					determineCanDeleteSelectedProductType();
					saveMode = SAVE_MODE_UPDATE;
				}
			}
			
			private function addProductType():void {
				productTypeList.selectedIndex = -1;
				selectedProductType = null;
				resetFields();
				showFields = true;
				dirty.setDirty();
				canDeleteSelectedProductType = false;
				saveMode = SAVE_MODE_INSERT;
			}
			
			private function removeProductType():void {
				if (selectedProductType != null && canDeleteSelectedProductType) {
					Alert.show("Are you sure you want to delete " + selectedProductType.@display + "?", "Notice", (Alert.YES | Alert.NO), this, confirmDelete);
				}
			}
			
			private function confirmDelete(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					var fieldData:Object = collectFieldData();
					fieldData["action"] = 'delete';
					fieldData["className"] = 'hci.gnomex.model.ProductType';
					previousItemCode = null;
					dictionaryManager.callWithParameters(fieldData);
				}
			}
			
			private function validateAndSave():void {
				var validated:Boolean = false;
				var errorMessage:String = "Please specify:";
				if (coreFacilityCombo.selectedItem == null || coreFacilityCombo.selectedIndex == -1) {
					errorMessage = errorMessage + " the core facility,";
				} 
				if (descriptionText.text == null || StringUtil.trim(descriptionText.text) == '') {
					errorMessage = errorMessage + " the description,";
				}
				if (codeProductTypeText.text == null || StringUtil.trim(codeProductTypeText.text) == '') {
					errorMessage = errorMessage + " the code product type,";
				}
				if (errorMessage == 'Please specify:') {
					validated = true;
				}
				
				if (validated) {
					var fieldData:Object = collectFieldData();
					if (saveMode == SAVE_MODE_UPDATE) {
						fieldData["action"] = 'save';
					} else if (saveMode == SAVE_MODE_INSERT) {
						fieldData["action"] = 'add';
					}
					fieldData["className"] = 'hci.gnomex.model.ProductType';
					previousItemCode = codeProductTypeText.text;
					dictionaryManager.callWithParameters(fieldData);
				} else {
					Alert.show(errorMessage, "Error", Alert.OK, this);
				}
			}
			
			private function collectFieldData():Object {
				var fieldData:Object = new Object();
				
				fieldData["value"] = descriptionText.text;
				fieldData["display"] = codeProductTypeText.text;
				fieldData["idCoreFacility"] = (coreFacilityCombo.selectedIndex == -1) ? ("") : (coreFacilityCombo.selectedItem.@idCoreFacility); 
				fieldData["idVendor"] = (vendorCombo.selectedIndex == -1) ? ("") : (vendorCombo.selectedItem.@idVendor);
				fieldData["idPriceCategory"] = (priceCategoryCombo.selectedIndex == -1) ? ("") : (priceCategoryCombo.selectedItem.@idPriceCategory);
				fieldData["description"] = descriptionText.text;
				fieldData["codeProductType"] = codeProductTypeText.text;
				
				return fieldData;
			}
			
			private function populateFields():void {
				resetFields();
				if (selectedProductType != null) {
					if (selectedProductType.@idCoreFacility != null && selectedProductType.@idCoreFacility != '') {
						for each (var coreFacility:Object in coreFacilityCombo.dataProvider) {
							if (coreFacility.@idCoreFacility == selectedProductType.@idCoreFacility) {
								coreFacilityCombo.selectedItem = coreFacility;
								break;
							}
						}
					}
					if (selectedProductType.@idVendor != null && selectedProductType.@idVendor != '') {
						for each (var vendor:Object in vendorCombo.dataProvider) {
							if (vendor.@idVendor == selectedProductType.@idVendor) {
								vendorCombo.selectedItem = vendor;
								break;
							}
						}
					}
					if (selectedProductType.@idPriceCategory != null && selectedProductType.@idPriceCategory != '') {
						for each (var priceCategory:Object in priceCategoryCombo.dataProvider) {
							if (priceCategory.@idPriceCategory == selectedProductType.@idPriceCategory) {
								priceCategoryCombo.selectedItem = priceCategory;
								break;
							}
						}
					}
					if (selectedProductType.@description != null && selectedProductType.@description != '') {
						descriptionText.text = selectedProductType.@description;
					}
					if (selectedProductType.@codeProductType != null && selectedProductType.@codeProductType != '') {
						codeProductTypeText.text = selectedProductType.@codeProductType;
					}
				}
			}
			
			private function resetFields():void {
				coreFacilityCombo.selectedIndex = -1;
				vendorCombo.selectedIndex = -1;
				priceCategoryCombo.selectedIndex = -1;
				descriptionText.text = '';
				codeProductTypeText.text = '';
			}
			
			private function determineCanDeleteSelectedProductType():void {
				if (selectedProductType != null && selectedProductType.@canDelete != null) {
					canDeleteSelectedProductType = selectedProductType.@canDelete == 'Y';
				} else {
					canDeleteSelectedProductType = false;
				}
			}
			
			private function filterProductTypes(item:Object):Boolean {
				if (item.@value != null && item.@value != '') {
					if (parentApplication.coreFacilitiesICanManage != null) {
						for each (var coreFacility:Object in parentApplication.coreFacilitiesICanManage) {
							if (coreFacility.@idCoreFacility == item.@idCoreFacility) {
								return true;
							}
						}
					}
				}
				
				return false;
			}
			
			private function filterVendors(item:Object):Boolean {
				if (item.@isActive != null && item.@isActive == 'Y') {
					return true;
				}
				
				return false;
			}
			
			private function filterPriceCategories(item:Object):Boolean {
				if (item.@isActive != null && item.@isActive == 'Y') {
					return true;
				}
				
				return false;
			}
			
			private function handleDirtyEvent(event:DirtyEvent):void {
				if (event.type == DirtyEvent.NOW_DIRTY) {
					changeDetected = true;
				} else if (event.type == DirtyEvent.NOW_CLEAN) {
					changeDetected = false;
				}
			}
			
			private function handleDictionaryEvent(event:Event):void {
				if (event.type == DictionaryEvent.DICTIONARY_ENTRY_ADDED) {
					dictionaryManager.call("reload", "");
					dirty.resetDirty();
				} else if (event.type == DictionaryEvent.DICTIONARY_ENTRY_SAVED) {
					dictionaryManager.call("reload", "");
					dirty.resetDirty();
				} else if (event.type == DictionaryEvent.DICTIONARY_ENTRY_DELETED) {
					dictionaryManager.call("reload", "");
					dirty.resetDirty();
				} else if (event.type == DictionaryEvent.DICTIONARY_LOADED) {
					if (filteredProductTypes != null) {
						filteredProductTypes.refresh();
						callLater(selectItemInTree);
					}
				}
			}
			
			private function selectItemInTree():void {
				saveMode = null;
				showFields = false;
				if (previousItemCode != null && productTypeList != null && productTypeList.dataProvider != null) {
					for each (var productType:Object in productTypeList.dataProvider) {
						if (productType.@codeProductType == previousItemCode) {
							productTypeList.selectedItem = productType;
							onProductTypeSelect();
							break;
						}
					}
				} else {
					if (productTypeList != null) {
						productTypeList.selectedIndex = -1;
					}
					resetFields();
				}
			}
			
		]]>
	</mx:Script>
	
	<mx:XMLListCollection id="filteredProductTypes" source="{dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.ProductType').DictionaryEntry}" filterFunction="filterProductTypes" />
	<mx:XMLListCollection id="myCoreFacilities" source="{parentApplication.coreFacilitiesICanManage}" />
	<mx:XMLListCollection id="vendors" source="{dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.Vendor').DictionaryEntry}" filterFunction="filterVendors" />
	<mx:XMLListCollection id="priceCategories" source="{dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.PriceCategoryLite').DictionaryEntry}" filterFunction="filterPriceCategories" />
	
	<mx:VBox height="100%" width="100%">
		
		<mx:HBox width="100%" backgroundSize="100%" verticalAlign="middle">
			
			<mx:LinkButton label="Add Product Type" click="{addProductType()}" 
						   styleName="linkMenuButton" icon="@Embed(source='../../assets/page_add.png')" disabledIcon="@Embed(source='../../assets/page_add_disable.png')" fontSize="11" />
			
			<mx:LinkButton label="Remove Product Type" click="{removeProductType()}" enabled="{canDeleteSelectedProductType}"
						   styleName="linkMenuButton" icon="@Embed(source='../../assets/page_delete.png')" disabledIcon="@Embed(source='../../assets/page_delete_disable.png')" fontSize="11" />
			
		</mx:HBox>
		
		<mx:HDividedBox height="100%" width="100%" horizontalGap="6">
			
			<mx:VBox height="100%" width="50%" paddingTop="2" paddingRight="2" paddingBottom="2" paddingLeft="2">
				
				<mx:List id="productTypeList" dataProvider="{filteredProductTypes}" labelField="@display" itemClick="{onProductTypeSelect()}" height="100%" width="100%" />
				
			</mx:VBox>
			
			<mx:VBox id="fieldsBox" visible="{showFields}" styleName="form" height="100%" width="100%" verticalGap="1" paddingTop="2" paddingRight="2" paddingBottom="2" paddingLeft="2">
				
				<mx:Label text="General - Core Facility" width="100%" />
				<mx:ComboBox id="coreFacilityCombo" dataProvider="{myCoreFacilities}" labelField="@display" change="{dirty.setDirty()}" width="100%" />
				
				<mx:Label text="General - Vendor" width="100%" />
				<mx:ComboBox id="vendorCombo" dataProvider="{vendors}" labelField="@display" change="{dirty.setDirty()}" width="100%" />
				
				<mx:Label text="Price Category" width="100%" />
				<mx:ComboBox id="priceCategoryCombo" dataProvider="{priceCategories}" labelField="@display" change="{dirty.setDirty()}" width="100%" />
				
				<mx:Label text="Description" width="100%" />
				<mx:TextInput id="descriptionText" change="{dirty.setDirty()}" width="100%" />
				
				<mx:Label text="Code Product Type" width="100%" />
				<mx:TextInput id="codeProductTypeText" editable="{saveMode == SAVE_MODE_INSERT}" change="{dirty.setDirty()}" width="100%" />
				
				<mx:ControlBar horizontalAlign="right" height="100%" width="100%" paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0">
					<util:DirtyNote id="dirty" />
					<mx:Button id="saveButton" label="Save" click="{validateAndSave()}" enabled="{changeDetected}"
							   icon="@Embed('../../assets/action_save.gif')" disabledIcon="@Embed(source='../../assets/save_disable.png')" />
					<mx:Button label="Close" click="{close()}" />
				</mx:ControlBar>
				
			</mx:VBox>
			
		</mx:HDividedBox>
		
	</mx:VBox>
	
</mx:TitleWindow>
