<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"  label="Sample Quality"  
	xmlns:mx="http://www.adobe.com/2006/mxml"  
	xmlns:views="views.*" 
	xmlns:util="views.util.*"
	xmlns:renderers="views.renderers.*"
	width="100%" height="100%" >
<mx:HBox verticalAlign="middle">
	<mx:Image source="{parentApplication.iconQC}"/>
	<mx:Label id="titleLabel" styleName="titleLabel" text="Sample Quality" />
</mx:HBox> 
	
	<mx:HTTPService 
    id="getWorkListQC" 
    url="GetWorkItemList.gx"
    resultFormat="e4x"
    destination="getWorkListQC"
    showBusyCursor="true"
    result="onGetWorkList(event)"
    fault="parentApplication.onFailHttpRequest('Unable to get work list', event)"
    useProxy="false">
    <mx:request>
        <codeStepNext>QC</codeStepNext>
    </mx:request>
    </mx:HTTPService >
    
    <mx:HTTPService 
    id="saveWorkItemQC" 
    url="SaveCombinedWorkItemQualityControl.gx"
    resultFormat="e4x"
    destination="saveWorkItemQualityControl"
    showBusyCursor="true"
    result="onSaveWorkItemQualityControl(event)"
    fault="parentApplication.onFailHttpRequest('Unable to save work list', event)"
    method="POST"
    useProxy="false">
    <mx:request>
        <workItemXMLString>{dirtyWorkItems.toXMLString()}</workItemXMLString>
    </mx:request>
    </mx:HTTPService >
    
    <mx:XMLListCollection id="workList" source="{getWorkListQC.lastResult.WorkItem}"/>
    
	<mx:XMLListCollection id="filteredAppList" source="{parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Application').DictionaryEntry}" filterFunction="filterAppList" />


    <mx:Script>
        <![CDATA[
			import hci.flex.controls.DropdownLabel;
			import hci.flex.controls.Label;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.NumberValidator;
			
			import views.renderers.ComboBoxWorkflowStatus;
        
        [Bindable]
        private var requestNumberCount:String;
        
        [Bindable]
        private var inputNumber:String;
        
        [Bindable]
        private var dirtyWorkItems:XMLListCollection;
        
        [Bindable]
        private var requestNumbers:ArrayCollection;
			
		[Bindable]
		private var cores:ArrayCollection;
			
		private var worklistFilterType:String = "";
        
		private var coreFacilityAppMap:Dictionary;
			
		[Bindable]
		private var selectedIdCoreFacility:String = null;

		public var VALIDATION_WARNING:String              = "Warning";
		public var VALIDATION_ERROR:String                = "Error";
		public var VALIDATION_SUCCESS:String              = "NoWarningsOrErrors";
			
        private function refreshWorkList():void {
        	dirty.resetDirty();
        	getWorkListQC.send();
			setWorklistFilter("", "Combined Sample Quality");
        }
			
		public function setWorklistFilter(filterType:String, windowTitle:String):void {
			titleLabel.text = windowTitle;
			worklistFilterType = filterType;
			workList.filterFunction = filterWorkListByExpType;
			var sort:Sort = new Sort();
			sort.compareFunction = this.sortSampleNumber;
			workList.sort = sort;
			requestNumberCombo.selectedIndex = 0;
			workList.refresh();
			refreshRequestNumbers();
		}
 
		private function underlyingWorkItemDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets to work list
			} else {
				dirty.setDirty();
				this.workList.filterFunction = null;
			}
		}
		private function getGridRowNumber(item:Object,col:int):String
        {
        	if (workList!= null) {
	           var x:int = workList.getItemIndex(item) + 1;
	           return String(x);     		
        	} else {
        		return "";
        	}
        }
                
        public function onEdit():void {
        	workList.filterFunction = null;
	    	workListGrid.selectedItem.@isDirty = "Y";
        }
        
        private function validate():String {
        	var errorMessage:String = "";
			var warningMessage:String = "";
        	var dirtyItems:XMLList = getWorkListQC.lastResult.WorkItem.(@isDirty == 'Y');        	
    		
    		var nv:NumberValidator = new NumberValidator();
	    	nv.domain = "real";
	    	nv.required = false;
	    	nv.minValue = "0";
	    	nv.maxValue = "99999";
	    	nv.precision = 3;
	    	nv.allowNegative = false;
	    	nv.exceedsMaxError = "exceeds max.";
	    	nv.invalidCharError = "contains invalid characters.";
	    	nv.negativeError = "cannot be negative.";
	    	nv.precisionError = "has too many digits beyond the decimal point";
        	
        	var item:Object = null;
        	var vr:ValidationResultEvent  = null;
        	for each (item in dirtyItems) {
		    	vr = nv.validate(item.@qualCalcConcentration);
		    	if (vr.type == ValidationResultEvent.INVALID) {
					errorMessage += "\nConcentration " + item.@qualCalcConcentration + " " + vr.message;
		    		break;
		    	}
	    	} 
	    	
	    	nv.maxValue = "9";
	    	nv.precision = 2;
	    	for each (item in dirtyItems) {
		    	vr = nv.validate(item.@qual260nmTo230nmRatio);
		    	if (vr.type == ValidationResultEvent.INVALID) {
					errorMessage += "\n260/230 " + item.@qual260nmTo230nmRatio + " " + vr.message;
		    		break;
		    	}
	    	} 
	    	for each (item in dirtyItems) {
		    	vr = nv.validate(item.@qual260nmTo280nmRatio);
		    	if (vr.type == ValidationResultEvent.INVALID) {
					errorMessage += "\n260/280 " + item.@qual260nmTo280nmRatio + " " + vr.message;
		    		break;
		    	}
	    	} 

	    	nv.maxValue = "9";
	    	nv.precision = 1;
	    	for each (item in dirtyItems) {
		    	vr = nv.validate(item.@qual28sTo18sRibosomalRatio);
		    	if (vr.type == ValidationResultEvent.INVALID) {
					errorMessage += "\n28s/18s " + item.@qual28sTo18sRibosomalRatio + " " + vr.message;
		    		break;
		    	}
	    	} 	  
	    	
			for each (item in dirtyItems) {
				if (item.@qualStatus == 'Completed' || item.@qualStatus == 'Terminated') {
					if (item.@qualCodeApplication == null || item.@qualCodeApplication == '') {
						warningMessage += "\n" + item.@sampleNumber + " is completed or terminated and does not have a QC Type specified.";
					} else {
						if (parentApplication.applicationHasChipTypes(item.@qualCodeApplication)) {
							if (item.@qualCodeBioanalyzerChipType == null || item.@qualCodeBioanalyzerChipType == '') {
								warningMessage += "\n" + item.@sampleNumber + " is completed or terminated and does not have a QC Assay specified.";
							} else {
								var code:String = parentApplication.getCodeApplicationForBioanalyzerChipType(item.@qualCodeBioanalyzerChipType);
								if (code != item.@qualCodeApplication.toString()) {
									errorMessage += "\nQC Assay " 
										+ parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.BioanalyzerChipType", item.@qualCodeBioanalyzerChipType) 
										+ " is not valid for QC Type " 
										+ parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.Application", item.@qualCodeApplication)
										+ " on sample " + item.@sampleNumber + ".";
								}
							}
						}
					}
				}
			}
	    	  	
	    	if (errorMessage != "") {
	    		Alert.show(errorMessage);
	    		return VALIDATION_ERROR;
			} else if (warningMessage != "") {
				warningMessage += "\nDo you wish to continue?";
				Alert.show(warningMessage, "Warning", (Alert.YES | Alert.NO), null, onPromptForWarning);
				return VALIDATION_WARNING;
	    	} else {
	    		return VALIDATION_SUCCESS;
	    	}
        }
        
		private function onPromptForWarning(event:CloseEvent):void {
			if (event.detail == Alert.YES) {
				saveForReal();
			}
		}
		private function save():void {
			if (validate() == "NoWarningsOrErrors") {
				saveForReal();
			}
		}
			
        private function saveForReal():void {
        	var dirtyItems:XMLList = getWorkListQC.lastResult.WorkItem.(@isDirty == 'Y');        	
        	dirtyWorkItems = new XMLListCollection(dirtyItems);
        	saveWorkItemQC.send();
        }
        
        private function onGetWorkList(event:ResultEvent):void {
        	if (event.result.name() == "WorkItemList") {
    	    	refreshRequestNumbers();
	        	workList.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingWorkItemDataChange);
        	} else {
        		Alert.show(event.result..ERROR.@message.toString(), "Error getting work list");
        	} 
       	}
        
        private function onSaveWorkItemQualityControl(event:ResultEvent):void {
        	if (saveWorkItemQC.lastResult.name() == "WorkItemList" || saveWorkItemQC.lastResult.name() == "SUCCESS" ) {
        		dirty.resetDirty();
        		this.getWorkListQC.send();
        	} else {
        		Alert.show(saveWorkItemQC.lastResult..ACTMESSAGE.@TEXT);
        	}
        }
        

        private function refreshRequestNumbers():void {
        	requestNumbers = new ArrayCollection();
			cores = new ArrayCollection;
			var blankItem:Object = new Object();
			blankItem.data = "";
			blankItem.label = "";
        	requestNumbers.addItem(blankItem);
			coreFacilityAppMap = new Dictionary();
			workList.filterFunction = null;
			workList.refresh();
        	var foundSelectedIdCoreFacility:Boolean = false;
        	for(var x:Number = 0; x < workList.length; x++) {
        		var item:Object = workList.getItemAt(x, 0);
        		
        		var found:Boolean = false;
				for(var j:Number = 0; j < cores.length; j++) {
					if (cores.getItemAt(j).data == item.@idCoreFacility) {
						found = true;
						break;
					}
				}
				if (found == false) {
					addCoreFacilityObject(item.@idCoreFacility);
					if (selectedIdCoreFacility == null) {
						selectedIdCoreFacility= item.@idCoreFacility;
						foundSelectedIdCoreFacility = true;
					}
					if (!foundSelectedIdCoreFacility && selectedIdCoreFacility == item.@idCoreFacility) {
						foundSelectedIdCoreFacility = true;
					}
				}

				if (filterWorkListByExpType(item)) {
					found = false;
					for(var i:Number = 0; i < requestNumbers.length; i++) {
						if (requestNumbers.getItemAt(i).label == item.@requestNumber) {
							found = true;
							break;
						}
					}
					if (found == false) {
						var newItem:Object = new Object();
						newItem.data = item.@requestNumber;
						newItem.label = item.@requestNumber;
						requestNumbers.addItem(newItem);
					}
				}
        	}
        	requestNumberCount = (requestNumbers.length - 1) + " requests in work list.";
			requestNumberCombo.dataProvider = requestNumbers;
			requestNumberCombo.dropdown.dataProvider = requestNumbers;
			
			if (!foundSelectedIdCoreFacility && selectedIdCoreFacility != null) {
				addCoreFacilityObject(selectedIdCoreFacility);
			}
			coreCombo.dataProvider = cores;
			coreCombo.dropdown.dataProvider = cores;
			
			if (cores.length > 1) {
				coreCombo.visible = true;
				coreCombo.includeInLayout = true;
				for each(var c:Object in cores) {
					if (c.data == selectedIdCoreFacility) {
						coreCombo.selectedItem = c;
						break;
					}
				}
			} else {
				coreCombo.visible = false;
				coreCombo.includeInLayout = false;
				if (cores.length == 1) {
					coreCombo.selectedItem = cores[0];
				}
			}
			
			var hide260230:String = parentApplication.getCoreFacilityProperty(selectedIdCoreFacility, parentApplication.PROPERTY_HIDE_260_230_QC_WORKFLOW);
			if (hide260230 != null && hide260230 == "Y") {
				this.qual260230col.visible = false;
			} else {
				this.qual260230col.visible = true;
			}

			workList.filterFunction = filterWorkListByExpType;
			workList.refresh()
			refreshAppList();
        }
        
		private function addCoreFacilityObject(idCoreFacility:String):Object {
			var newItem:Object = new Object();
			newItem.data = idCoreFacility;
			newItem.label = parentApplication.getCoreFacilityName(idCoreFacility);
			cores.addItem(newItem);
			var appCodes:ArrayCollection = parentApplication.getQCAppCodesForCore(idCoreFacility);
			coreFacilityAppMap[idCoreFacility] = appCodes;
			return newItem
		}
			
		private function refreshAppList():void {
			filteredAppList.filterFunction = filterAppList;
			filteredAppList.refresh();
			qcTypeCol.itemEditor = views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(filteredAppList, '@display', '@value', '@qualCodeApplication', true).newInstance(), 'idRequest');
		}
			
        private function filterWorkList(item:Object):Boolean {
        	var keep:Boolean = true;
        	if (requestNumberCombo.selectedItem != null && requestNumberCombo.selectedItem.label != "") {
        		keep = false;
        		if (item.@requestNumber == requestNumberCombo.selectedItem.label) {
        			keep = true;
        		}
        	} else {
				if (selectedIdCoreFacility != null && selectedIdCoreFacility != "") {
					keep = false;
					if (item.@idCoreFacility == selectedIdCoreFacility) {
						keep = true;
					}
				}				
			}        	
        	return keep;
        }

		private function filterWorkListByExpType(item:Object):Boolean {
			var keep:Boolean = true;
			if (!filterWorkList(item)) {
				keep = false;
			} else {
				if(worklistFilterType.length > 0) {
					keep = false;
					if (worklistFilterType == 'MICROARRAY') {
						if (item.@codeStepNext == 'QC' && item.@requestCategoryType != 'QC') {
							keep = true;
						}
					} else if (worklistFilterType == 'QC') {
						if (item.@codeStepNext == 'QC' && item.@requestCategoryType == 'QC') {
							keep = true;
						}
					} else if (worklistFilterType == 'NANO') {
						if (item.@codeStepNext == 'QC' && item.@requestCategoryType == 'NANOSTRING') {
							keep = true;
						}
					} else if (item.@codeStepNext == worklistFilterType) {
						keep = true;
					}				
				}
			}
			return keep;
		}
			
		private function sortSampleNumber(item1:Object, item2:Object, fields:Array=null):int {
			var n1:String  = item1.@sampleNumber;
			var n2:String  = item2.@sampleNumber;
			
			var parts:Array = n1.split("X");
			var num1:String = parts[0];
			var rem1:String = parts[1];
			var firstChar1:String = num1.substr(0,1);
			if ("0123456789".indexOf(firstChar1) >= 0) {
				firstChar1 = "0";
			} else {
				num1 = num1.substr(1);
			}

			parts = n2.split("X");
			var num2:String = parts[0];
			var rem2:String = parts[1];
			var firstChar2:String = num2.substr(0,1);
			if ("0123456789".indexOf(firstChar2) >= 0) {
				firstChar2 = "0";
			} else {
				num2 = num2.substr(1);
			}

			var comp:int = stringCompare(firstChar1, firstChar2);

			if (comp == 0) {
				var number1:Number = Number(num1);
				var number2:Number = Number(num2);
				if (number1 > number2) {
					comp = 1;
				} else if (number2 > number1) {
					comp = -1;
				}
			}
			
			if (comp == 0) {
				var remNum1:Number = Number(rem1);
				var remNum2:Number = Number(rem2);
				if (remNum1 > remNum2) {
					comp = 1
				} else if (remNum2 > remNum1) {
					comp = -1;
				}
			}
			
			return comp;
		}
			
		private static function stringCompare(s1:String, s2:String):int {
			if (s1 > s2) {
				return 1;
			} else if (s2 > s1) {
				return -1;
			} else {
				return 0;
			}
		}
			
		public function getQCAssay(item:Object):String
		{
			return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.BioanalyzerChipType", item.@codeBioanalyzerChipType);
		}
		
		private function filterAppList(item:Object):Boolean {
			var retVal:Boolean = false;
			if (item.@value == "") {
				retVal = true;
			} else {
				if (item.@isActive == 'Y' && selectedIdCoreFacility != null) {
					var appCodes:ArrayCollection = ArrayCollection(coreFacilityAppMap[selectedIdCoreFacility]);
					if (appCodes != null) {
						for each(var c:String in appCodes) {
							if (item.@codeApplication.toString() == c) {
								retVal = true;
								break;
							}
						}
					}
				}
			}			
			return retVal;
		}
        ]]>
    </mx:Script> 
    
   
    <mx:VBox verticalGap="2" width="100%" height="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
            <mx:HBox width="100%" horizontalAlign="left" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" verticalAlign="bottom">
            	<mx:HBox  verticalAlign="middle">
	            	<mx:Label text="Request #"/>
	            	<mx:ComboBox id="requestNumberCombo" 
	            		dataProvider="{requestNumbers}" 
	            		change="workList.filterFunction = filterWorkListByExpType;workList.refresh()"  
	            		width="90">
	            	</mx:ComboBox>
					<mx:ComboBox id="coreCombo" visible="{cores.length&gt;1}" includeInLayout="{cores.length&gt;1}"
								 dataProvider="{cores}"
								 change="selectedIdCoreFacility=coreCombo.selectedItem.data;refreshRequestNumbers();"
								 width="200">
					</mx:ComboBox>
            		
            	</mx:HBox>
            	<mx:Spacer width="100%"/>
                <mx:Label text="{requestNumberCount}"/>
            </mx:HBox>
        	
		<mx:VBox width="100%" height="100%" verticalGap="0">
	
			<util:DataGridAlternatingGroup height="100%" id="workListGrid"  width="100%" dataProvider="{workList}" editable="true" itemEditEnd="onEdit()">
				<util:columns>
					<mx:DataGridColumn editable="false" headerText=""   width="5" labelFunction="getGridRowNumber"/>
	                <mx:DataGridColumn editable="false" headerText="Sample #" width="12" dataField="@sampleNumber" sortCompareFunction="sortSampleNumber"/>
					<mx:DataGridColumn editable="false" headerText="Sample Type" width="20" dataField="@sampleType"/>
					<mx:DataGridColumn editable="false" headerText="Client"  width="20" dataField="@appUserName" />
					<mx:DataGridColumn headerText="QC Type"  width="20" dataField="@qualCodeApplication" id="qcTypeCol"
									   editorDataField="value"
									   rendererIsEditor="false"
									   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Application').DictionaryEntry, '@display', '@value', '@qualCodeApplication')}" 
									   sortable="false"
									   itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(filteredAppList, '@display', '@value', '@qualCodeApplication', true).newInstance(), 'idRequest')}"/>			                
					<mx:DataGridColumn id="qcAssayCol" 
									   visible="true" 
									   headerText="QC Assay" 
									   width="40" 
									   dataField="@qualCodeBioanalyzerChipType"
									   editorDataField="value"
									   sortable="false" 
									   rendererIsEditor="false" 
									   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.BioanalyzerChipType').DictionaryEntry, '@display', '@value', '@qualCodeBioanalyzerChipType')}"
									   itemEditor="{views.renderers.GridColumnFillButton.create(views.renderers.ComboBoxBioanalyzerChipType.getFactory(parentApplication).newInstance(), 'idRequest')}">
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="Conc. ng/uL" width="10" dataField="@qualCalcConcentration"
									   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), 'idRequest')}" editorDataField="value">
						<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle">
							    <mx:Label text="Conc."/>
							    <mx:Label text="ng/uL"/>
							</mx:VBox>
						</mx:Component>
						</mx:headerRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="260/230" width="15" dataField="@qual260nmTo230nmRatio" id="qual260230col"
									   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), 'idRequest')}" editorDataField="value"/>
					<mx:DataGridColumn headerText="RIN#" width="15" dataField="@qualRINNumber"
									   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), 'idRequest')}" editorDataField="value"/>
	                <mx:DataGridColumn headerText="Status"  width="20" dataField="@qualStatus" 
	                	editorDataField="value"
	                   rendererIsEditor="false"
	                   itemRenderer="mx.controls.Label" 
					   sortable="false"
 	                   itemEditor="{views.renderers.GridColumnFillButton.create(ComboBoxWorkflowStatus.create('@qualStatus').newInstance(), 'idRequest')}"/>			                
				</util:columns>
		</util:DataGridAlternatingGroup>
			
		</mx:VBox>
	  	
	  </mx:VBox>
					
 <mx:ControlBar width="100%">
 	            	<mx:LinkButton textDecoration="underline" label="Refresh"  icon="@Embed('../../assets/action_refresh.gif')" 
 	            		click="refreshWorkList();" toolTip="Refresh worklist"/>
	 	            <mx:HBox width="100%" horizontalAlign="right">
	 	            	<util:DirtyNote id="dirty"/>
	 	            	<mx:Button label="Save" click="save()" icon="@Embed('../../assets/action_save.gif')">
		            	</mx:Button>
	 	            </mx:HBox>

 </mx:ControlBar>						

</mx:VBox>
