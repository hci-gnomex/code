<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"  xmlns:mx="http://www.adobe.com/2006/mxml" 
		 width="100%" height="100%" 
		 backgroundAlpha="0"
		 xmlns:renderers="views.renderers.*"
		 xmlns:util="views.util.*"  
		 verticalGap="3">
		
	
	<mx:HTTPService 
		id="getRequestList" 
		url="GetRequestList.gx"
		resultFormat="e4x"
		result="onGetRequestList(event)"
		showBusyCursor="true"
		fault="parentApplication.onFailHttpRequest('Unable to get order list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	<mx:HTTPService 
		id="changeRequestStatus" 
		url="ChangeRequestStatus.gx"
		resultFormat="e4x"
		result="onChangeRequestStatus(event)"
		showBusyCursor="true"
		fault="parentApplication.onFailHttpRequest('Unable to save order(s)', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	<mx:HTTPService  
		id="deleteRequest" 
		url="DeleteRequest.gx"
		destination="deleteRequest"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onDeleteRequest(event)"
		fault="parentApplication.onFailHttpRequest('Failed to delete request', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>
	
	<mx:Script> 
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			
			import mx.controls.Alert;
			import mx.core.ScrollPolicy;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.events.PropertyChangeEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import views.util.EmailWindowForRequests;
			import views.util.PromptXMLListCollection;
			
			
			// Warning Icon
			[Embed( source = '../../assets/error.png' )]
			[Bindable]
			public var iconWarning:Class;
			
			[Bindable]
			public var parentView:NavOrderView;
			
			[Bindable]
			public var promptedMyCoreFacilities:PromptXMLListCollection;
			
			public function init():void {
				var emptyNode:XML = <CoreFacility displayName = '' idCoreFacility='' value='' label=''/>;
				promptedMyCoreFacilities = new PromptXMLListCollection(emptyNode, new XMLListCollection(parentApplication.coreFacilitiesICanManage));

				getList();
			}
			
			public function viewOrder(event:MouseEvent):void {
				parentView.selectedRequest = orderGrid.selectedItem;
				parentDocument.switchToOrderDetailView();
			}
			
			public function editOrder(event:MouseEvent):void {
				parentView.selectedRequest = orderGrid.selectedItem;
				parentDocument.switchToOrderEditView();
			}
			private function gridItemClick(event:ListEvent):void {
				
				if ( orderGrid.selectedItem != null ) {
					parentView.selectedRequest = orderGrid.selectedItem;
				}
				
				if ( event.columnIndex != 0  ) {
					orderGrid.selectedIndex = -1;
				}
				
				if ( event.columnIndex == 0 && orderGrid.selectedItems.length > 1 ) {
					for each ( var obj1:Object in orderGrid.selectedItems ) {
						obj1.@isSelected = true;
					}
				}
				
				selectedOrders.refresh();
			}
			
			
			private function submitAction():void {
				if ( comboBox.selectedItem == null ) {
					return;
				}
				for each ( var req:Object in selectedOrders ) {
					var params:Object = new Object;
					params.idRequest = req.@idRequest;
					params.codeRequestStatus = comboBox.selectedItem.@codeRequestStatus;
					changeRequestStatus.send( params );
				}
			}

			private function onChangeRequestStatus( event:ResultEvent ):void {
				if ( event.result.name() == "SUCCESS" ) {
					this.getList();
					return;
				}
				Alert.show( event.result..ERROR.@message.toString(), "Error saving order(s)" );
				
			}

			public function getList():void {
				getRequestList.send(getOrderParameters());
			}
			
			private function onGetRequestList(event:ResultEvent):void{
				comboBox.selectedIndex = -1;
				if ( getRequestList.lastResult.name() == "RequestList"){
					selectedOrders.refresh();
					return;
				}
				
				Alert.show( event.result..ERROR.@message.toString(), "Error getting orders" );
				
			}
			
			private function getOrderParameters():Object {
				var params:Object = new Object;
				
				params.includeSampleInfo = 'Y';
				
				if ( checkEmptyFilter() ) {
					params.number = 0;
					return params;
				}
				
				if ( this.pickDateRangeButton.fromDate != null && this.pickDateRangeButton.toDate != null ) {
					params.createDateFrom = dateFormatter.format( this.pickDateRangeButton.fromDate );
					params.createDateTo = dateFormatter.format( this.pickDateRangeButton.toDate );
				}
				
				params.number = requestNoLookupField.text != null ? requestNoLookupField.text : '' ;
								
				if ( this.newCheckbox.selected ) {
					params.status = 'NEW' ;
				}
				if ( this.submittedCheckbox.selected ) {
					params.status = 'SUBMITTED' ;
				}
				if ( this.processingCheckbox.selected ) {
					params.status = 'PROCESSING' ;
				}
				if ( this.completeCheckbox.selected ) {
					params.status = 'COMPLETE' ;
				}
				if ( this.failedCheckbox.selected ) {
					params.status = 'FAILED' ;
				}
				if (this.redoCheckbox.selected) {
					params.hasRedo = 'Y';
				}
				
				if ( requestCategoryRadioGroup != null && requestCategoryRadioGroup.selectedValue != null && requestCategoryRadioGroup.selectedValue != ''){
					params.codeRequestCategory = requestCategoryRadioGroup.selectedValue;
				}
				
				if ( coreFacilityCombo != null && coreFacilityCombo.selectedItem != null ) {
					params.idCoreFacility = coreFacilityCombo.selectedItem.@value;
				} 

				return params;
			}
			
			
			private function promptToDelete():void {
				
				var hasRun:Boolean = false
				for each ( var req:Object in selectedOrders ) {
					if ( req.@codeRequestStatus != "NEW" && req.@codeRequestStatus != "SUBMITTED" ) {
						hasRun = true;
						break;
					}
				}
				
				if ( hasRun ) {
					Alert.show("One or more of the selected orders has already been added to an instrument run."
							+ " The order(s) cannot be deleted.");
					
				} else {
					Alert.show( "Are you sure you want to delete these orders?", 
						"Confirm Delete", ( Alert.YES | Alert.NO ), this, onPromptToDelete, iconWarning );
				}
				
				
			}
			
			private function onPromptToDelete( event:CloseEvent ):void {
				
				if ( event.detail == Alert.YES ) {
					deleteOrders();
				}
			}
						
			private function deleteOrders():void {
				var params:Object = new Object;
				params.requestsToDeleteXMLString = "<requests>" +  selectedOrders.toXMLString() + "</requests>";
				deleteRequest.send(params);
			}
			
			private function onDeleteRequest(event:ResultEvent): void {
				if (deleteRequest.lastResult.name() == "SUCCESS") {
					getList();
				} else {
					Alert.show(deleteRequest.lastResult..ACTMESSAGE.@TEXT);
				}
			}
			
			private function checkEmptyFilter():Boolean {
				
				if ( requestNoLookupField.text != null ? requestNoLookupField.text : '' ) {
					return false;
				}
				if ( this.pickDateRangeButton.fromDate != null && this.pickDateRangeButton.toDate != null ) {
					return false;
				}
				if ( this.newCheckbox.selected ) {
					return false ;
				}
				if ( this.submittedCheckbox.selected ) {
					return false ;
				}
				if ( this.processingCheckbox.selected ) {
					return false ;
				}
				if ( this.completeCheckbox.selected ) {
					return false ;
				}
				if ( this.failedCheckbox.selected ) {
					return false ;
				}
				if ( this.redoCheckbox.selected) {
					return false ;
				}
				if ( requestCategoryRadioGroup != null && requestCategoryRadioGroup.selectedValue != null && requestCategoryRadioGroup.selectedValue != ''){
					return false;
				}
				if ( this.coreFacilityCombo != null && this.coreFacilityCombo.selectedItem != null) {
					return false;
				}
				return true;
			}
			
			private function selectedFilterFunc(item:XML):Boolean {
				return item.@isSelected == true;
			}
				
			private function clearCheckBoxes():void {
				this.newCheckbox.selected = false;
				this.processingCheckbox.selected = false;
				this.submittedCheckbox.selected  = false;
				this.completeCheckbox.selected = false;
				this.failedCheckbox.selected  = false;
				
				this.pickDateRangeButton.resetRange();
				
				this.redoCheckbox.selected = false;
			}
			
			private function toggleStatusCheckboxes(checkBoxNumber:int):void {
				this.requestNoLookupField.text = "";
				
				if (checkBoxNumber == 1) {
					this.processingCheckbox.selected = false;
					this.submittedCheckbox.selected  = false;
					this.completeCheckbox.selected = false;
					this.failedCheckbox.selected  = false;
					
				} else if (checkBoxNumber == 2) {
					this.newCheckbox.selected = false;
					this.submittedCheckbox.selected  = false;
					this.completeCheckbox.selected = false;
					this.failedCheckbox.selected  = false;
					
				} else if (checkBoxNumber == 3) {
					this.newCheckbox.selected = false;
					this.processingCheckbox.selected = false;
					this.completeCheckbox.selected = false;
					this.failedCheckbox.selected  = false;
					
				}  else if (checkBoxNumber == 4) {
					this.newCheckbox.selected = false;
					this.processingCheckbox.selected = false;
					this.submittedCheckbox.selected  = false;
					this.failedCheckbox.selected  = false;
					
				}   else if (checkBoxNumber == 5) {
					this.newCheckbox.selected = false;
					this.processingCheckbox.selected = false;
					this.submittedCheckbox.selected  = false;
					this.completeCheckbox.selected = false;
					
				}   
			} 	
			
			
			
			private function setDefaultButton():void {
				if ( this.requestNoLookupField.text != '' ) {
					
					this.pickDateRangeButton.resetRange();
					
					this.newCheckbox.selected = false;
					this.processingCheckbox.selected = false;
					this.submittedCheckbox.selected  = false;
					this.completeCheckbox.selected = false;
					this.failedCheckbox.selected  = false;
					
					
				}
			}
			
			
			public function sortRequestNumber(item1:Object, item2:Object):int {
				var n1:String  = item1.@requestNumber;
				var n2:String  = item2.@requestNumber;
				
				var number1:Number = -1;
				var number2:Number = -1;
				
				var tokens:Array = n1.split("R");
				if (tokens.length > 0) {
					number1 = tokens[0];	
				} else {
					number1 = Number(n1);
				}
				tokens = n2.split("R");
				if (tokens.length > 0) {
					number2 = tokens[0];	
				} else {
					number2 = Number(n2);
				}
				
				
				if (number1 > number2) {
					return 1;
				} else if (number2 > number1) {
					return -1;
				} else {
					return 0;
				}
			}

			private function requestNoLookupFieldEntered():void {
				if (requestNoLookupField.text != '') {
					this.clearCheckBoxes();
					this.getList();
				} 
			}
			
			private function showEmailWindow():void{
				var emailWindow:EmailWindowForRequests = EmailWindowForRequests(PopUpManager.createPopUp(this, EmailWindowForRequests, true));
				emailWindow.selectedRequests = this.selectedOrders;
				PopUpManager.centerPopUp(emailWindow);
				this.setFocus();
				
			}
			
			private function sortRequestCategory(obj1:Object, obj2:Object, fields:Array=null):int {
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var idCore1:Number = obj1.@idCoreFacility == "" ? 999 : obj1.@idCoreFacility
					var idCore2:Number = obj2.@idCoreFacility == "" ? 999 : obj2.@idCoreFacility
					
					var sortOrder1:Number = obj1.@sortOrder == "" ? 999 : obj1.@sortOrder;
					var sortOrder2:Number = obj2.@sortOrder == "" ? 999 : obj2.@sortOrder;
					
					var display1:String = obj1.@display;
					var display2:String = obj2.@display;
					
					if (idCore1 < idCore2) {
						return -1;
					} else if (idCore1 > idCore2) {
						return 1;
					} else {
						if (sortOrder1 < sortOrder2) {
							return -1;
						} else if (sortOrder1 > sortOrder2) {
							return 1;
						} else {
							if (display1 < display2) {
								return -1;
							} else if (display1 > display2) {
								return 1;
							} else {
								return 0;
							}
						}
					}
					
				}
			}			
			
			private function filterRequestCategory(item:Object):Boolean {
				var keep:Boolean = false;
				if (item.@idCoreFacility != null ) {
					if ( parentApplication.coreFacilitiesICanManage.length() > 1 && (coreFacilityCombo.selectedItem == null || coreFacilityCombo.selectedItem.@value == '') ) {
						keep = false;
					} else if ( coreFacilityCombo.selectedItem != null && coreFacilityCombo.selectedItem.@value != null && coreFacilityCombo.selectedItem.@value != '' ) {
						if (item.@idCoreFacility == coreFacilityCombo.selectedItem.@value){
							keep = true;
						}
					} else if (parentApplication.isCoreFacilityIManage(item.@idCoreFacility)) {
						keep = true;
					}
					
				}
				return keep;
				
			}
			
			private var currentSelectedValue:String = null;
			
			private function radioClick(event:MouseEvent):void {
				if ( event.currentTarget.value == currentSelectedValue ) {
					requestCategoryRadioGroup.selectedValue = null;
					currentSelectedValue = null;
					event.stopImmediatePropagation();
				} else { 
					currentSelectedValue = event.currentTarget.value;
				}
				getList();
			}
			
		]]>
	</mx:Script>    	
	
	<mx:XMLListCollection id="requestCategories"   sort="{requestCategorySorter}" filterFunction="filterRequestCategory"
						  source="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry.(@isActive == 'Y' &amp;&amp; @value != '' &amp;&amp; @isInternal == 'Y')}"/>
	<mx:Sort id="requestCategorySorter" compareFunction="sortRequestCategory"/>	
	<mx:XMLListCollection id = "orderList" source = "{getRequestList.lastResult.Request}" />
	<mx:XMLListCollection id = "selectedOrders" source="{getRequestList.lastResult.Request}" 
						  filterFunction="selectedFilterFunc"/>
	
	<mx:DateFormatter id="dateFormatter" formatString="MM/DD/YYYY"/>
	
	<mx:VBox width="100%" styleName="panelBox"   backgroundSize="100%" id="vbox2">
		<mx:VBox width="100%">
			<mx:HBox width="100%" verticalAlign="middle" paddingLeft="2" paddingRight="2" horizontalGap="5">
				<mx:HBox horizontalGap="0" width="90" verticalAlign="middle">
					<mx:Image source="assets/review.png"/>
					<mx:Label id="titleLabel" styleName="titleLabel" text="Orders" />			
				</mx:HBox>
				
				<mx:HBox id = "statusCheckboxBar"
						 horizontalGap = "0"
						 height = "100%"
						 verticalAlign = "middle"
						 verticalGap = "0"
						 horizontalAlign = "right">
					<mx:CheckBox label = "New"
								 id = "newCheckbox"
								 horizontalGap = "0"
								 styleName = "labelSmall"
								 selected="false">
						<mx:click>
							toggleStatusCheckboxes( 1 );
							this.getList();
						</mx:click>
						
					</mx:CheckBox>
					
					<mx:CheckBox label = "Submitted"
								 id = "submittedCheckbox"
								 paddingLeft = "2"
								 horizontalGap = "0"
								 styleName = "labelSmall" selected="true">
						<mx:click>
							toggleStatusCheckboxes( 3 );
							this.getList();
						</mx:click>
						
					</mx:CheckBox>
					
					<mx:CheckBox label = "Processing"
								 id = "processingCheckbox"
								 paddingLeft = "2"
								 horizontalGap = "0"
								 styleName = "labelSmall">
						<mx:click>
							toggleStatusCheckboxes( 2 );
							this.getList();
						</mx:click>
					</mx:CheckBox>
					
					
					<mx:CheckBox label = "Complete"
								 id = "completeCheckbox"
								 paddingLeft = "2"
								 horizontalGap = "0"
								 styleName = "labelSmall">
						<mx:click>
							toggleStatusCheckboxes( 4 );
							this.getList();
						</mx:click>
						
					</mx:CheckBox>
					
					<mx:CheckBox label = "Failed"
								 id = "failedCheckbox"
								 paddingLeft = "2"
								 paddingRight="5"
								 horizontalGap = "0"
								 styleName = "labelSmall">
						<mx:click>
							toggleStatusCheckboxes( 5 );
							this.getList();
						</mx:click>
						
					</mx:CheckBox>
					
					<mx:VRule height = "20" />
					
					<mx:CheckBox label = "Redos"
								 id = "redoCheckbox"
								 paddingLeft="5"
								 horizontalGap = "0"						
								 styleName = "labelSmall">
						<mx:click>
							this.requestNoLookupField.text = "";this.getList();
						</mx:click>
					</mx:CheckBox>
					
				</mx:HBox>
				
				
				<mx:VRule height = "20" />
				
				<mx:HBox height = "100%"
						 verticalAlign = "middle">
					<renderers:LinkButtonDateRangeMenu id="pickDateRangeButton" toolTip="Click 'Refresh' after selecting a date range to update the results." />
					
				</mx:HBox>
				
				<mx:VRule height = "20" />
				<mx:HBox horizontalGap="0"
						 height="100%"
						 verticalAlign="middle"
						 verticalGap="0">
					
					<mx:Label text="Order #" id="orderNumberLabel" />
					
					<mx:TextInput id="requestNoLookupField"
								  fontSize="9"
								  height="19"
								  width="60"
								  enter="{requestNoLookupFieldEntered()}" />
					
					
				</mx:HBox>
				<mx:Spacer width="100%" id="spacer1"/>
				
				<mx:LinkButton textDecoration = "underline"
							   label = "Refresh"
							   click = "{this.getList();}"
							   icon = "@Embed('../../assets/action_refresh.gif')"
							   toolTip = "Refresh order list"  styleName="labelSmall" id="linkbutton1"/>
			</mx:HBox>
			
		</mx:VBox>
		
		
		
		<mx:VBox  width="100%" id="vbox1">
			
			<mx:HBox id = "filterBar"
					 horizontalGap = "5"
					 paddingTop = "0"
					 paddingBottom = "4"
					 paddingLeft = "95"
					 horizontalAlign = "left"
					 verticalAlign = "middle">
				
					
					<mx:HBox horizontalGap="8" paddingRight="5"
							 includeInLayout="{parentApplication.coreFacilitiesICanManage.length() > 1}" 
							 visible="{parentApplication.coreFacilitiesICanManage.length() > 1}" >
						
						<mx:ComboBox id="coreFacilityCombo" width="175" dataProvider="{promptedMyCoreFacilities}"
									 labelField="@display" prompt="Core facility..." 
									 fontSize="10" paddingRight="3"
									 visible="{!parentApplication.isExternalDataSharingSite}" 
									 includeInLayout="{!parentApplication.isExternalDataSharingSite}">
							<mx:change>requestCategoryRadioGroup.selectedValue = null;this.requestNoLookupField.text = "";getList();requestCategories.refresh();</mx:change>
						</mx:ComboBox>
						
						<mx:VRule height = "20"  />
					</mx:HBox>
					
					<mx:RadioButtonGroup id = "requestCategoryRadioGroup" />     
					<mx:Repeater id="requestCategoryRepeater" dataProvider="{requestCategories}">
						
							<mx:RadioButton id="radioRequestCategory" groupName="requestCategoryRadioGroup"
											label="{requestCategoryRepeater.currentItem.@display}" 
											value="{requestCategoryRepeater.currentItem.@value}" 
											fontSize="11" paddingRight="5" horizontalGap="1" 
											click="radioClick(event)" />
						
					</mx:Repeater>
					
				<mx:RadioButton id="nullSelection" groupName="requestCategoryRadioGroup" visible="false" width="0" /> 
			</mx:HBox>
			
		</mx:VBox>
		
	</mx:VBox>
	
	
	<mx:VBox width = "100%" height = "100%" verticalGap = "1" styleName="panelBox">
		
		<mx:VBox width = "100%" height = "100%">
			
			<mx:DataGrid id = "orderGrid" minWidth="0" horizontalScrollPolicy="{ScrollPolicy.AUTO}"
						 wordWrap="true"
						 variableRowHeight="true"
						 allowMultipleSelection="true"
						 itemClick = "gridItemClick(event)"
						 click="{selectedOrders.refresh()}"
						 width = "100%"
						 height = "100%"
						 dataProvider = "{orderList}"
						 sortArrowSkin="mx.skins.ProgrammaticSkin" fontSize="9">
				<mx:columns>
					
					<mx:DataGridColumn id = "checkBoxColumn"
									   textAlign = "center"
									   width = "30"
									   resizable = "false"
									   sortable = "false"
									   editable = "true"
									   rendererIsEditor = "true"
									   dataField = "@isSelected"
									   editorDataField = "selected"
									   itemRenderer = "views.renderers.CheckBoxIsSelectedToggle"
									   headerRenderer = "views.renderers.CheckBoxHeader"
									   draggable="false"/>
					
					<mx:DataGridColumn  width="60" headerText="#"  sortCompareFunction="sortRequestNumber">
						<mx:itemRenderer>
							<mx:Component >
								<mx:HBox paddingLeft="1" horizontalGap="0"   horizontalScrollPolicy="off">
									<mx:Image id="experimentImage"  
											  source="{data.@icon}" >
									</mx:Image> 
									<mx:Label id="requestNumber" text="{data.@number}">
									</mx:Label>
								</mx:HBox>
							</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn> 
					
					
					<mx:DataGridColumn dataField = "@name"
									   headerText = "Name"
									   draggable="false">
					</mx:DataGridColumn>
					
					<mx:DataGridColumn headerText="Action" width="85" editable="false">
						<mx:itemRenderer>
							<mx:Component>
								<mx:HBox verticalAlign="top" horizontalGap="0"  horizontalScrollPolicy="off">
									<mx:LinkButton label="View"  textDecoration="underline" click="outerDocument.viewOrder(event)" fontSize="9" color="#0000FF"/>
									<mx:LinkButton label="Edit"  enabled="{data.@canUpdate == 'Y'}"  textDecoration="underline" fontSize="9" click="outerDocument.editOrder(event)" color="#0000FF"/>
								</mx:HBox>
							</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					
					
					<mx:DataGridColumn dataField = "@numberOfSamples" headerText = "Samples" width = "55" />
					
					<mx:DataGridColumn dataField = "@idSampleDropOffLocation" headerText="Drop Off" width="65"
									   visible="{(coreFacilityCombo.selectedItem != null &amp;&amp; coreFacilityCombo.selectedItem.@value != null &amp;&amp; (coreFacilityCombo.selectedItem.@value == '2'||coreFacilityCombo.selectedItem.@value == '4') )||
									   parentApplication.isCoreFacilityIManage(2) || parentApplication.isCoreFacilityIManage(4)}"
									   itemRenderer="{hci.flex.controls.DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleDropOffLocation').DictionaryEntry, '@display', '@value', '@idSampleDropOffLocation')}" id="datagridcolumn1"/>
					
					<mx:DataGridColumn dataField = "@codeRequestStatus" 
									   headerText = "Status" width = "70"
									   itemRenderer="{hci.flex.controls.DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.RequestStatus').DictionaryEntry, '@display', '@value', '@codeRequestStatus')}"/>
					
					<mx:DataGridColumn dataField = "@codeRequestCategory" 
									   headerText = "Type" width = "130" 
									   itemRenderer="{hci.flex.controls.DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.RequestCategory').DictionaryEntry, '@display', '@value', '@codeRequestCategory')}"/>
					
					<mx:DataGridColumn dataField = "@createDate" headerText = "Submitted on" width = "105" />
					<mx:DataGridColumn dataField = "@container" headerText = "Container" width = "60" />
					<mx:DataGridColumn dataField="@plateLabel" wordWrap="true" headerText = "Plate" width="110" 
									   visible="{(coreFacilityCombo.selectedItem != null &amp;&amp; coreFacilityCombo.selectedItem.@value != null &amp;&amp; coreFacilityCombo.selectedItem.@value == '2') ||
									   (parentApplication.coreFacilitiesICanManage.length() == 1 &amp;&amp; parentApplication.isCoreFacilityIManage(2))}"/>
					<mx:DataGridColumn dataField="@runLabel" headerText = "Run" width="110" 
									   visible="{(coreFacilityCombo.selectedItem != null &amp;&amp; coreFacilityCombo.selectedItem.@value != null &amp;&amp; coreFacilityCombo.selectedItem.@value == '2') ||
									   (parentApplication.coreFacilitiesICanManage.length() == 1 &amp;&amp; parentApplication.isCoreFacilityIManage(2))}"/>
					<mx:DataGridColumn dataField="@idInstrumentRun" headerText = "Run ID" width="50" 
									   visible="{(coreFacilityCombo.selectedItem != null &amp;&amp; coreFacilityCombo.selectedItem.@value != null &amp;&amp; coreFacilityCombo.selectedItem.@value == '2') ||
									   (parentApplication.coreFacilitiesICanManage.length() == 1 &amp;&amp; parentApplication.isCoreFacilityIManage(2))}"/>
					<mx:DataGridColumn dataField="@ownerName" headerText="Submitter" width="100"/>
					<mx:DataGridColumn dataField = "@labName" headerText = "Lab" width = "130" />
					<mx:DataGridColumn dataField = "@corePrepInstructions" headerText = "Notes for core"   
									   visible="{(coreFacilityCombo.selectedItem != null &amp;&amp; coreFacilityCombo.selectedItem.@value != null &amp;&amp; coreFacilityCombo.selectedItem.@value == '2') ||
									   (parentApplication.coreFacilitiesICanManage.length() == 1 &amp;&amp; parentApplication.isCoreFacilityIManage(2))}"/>
					
				</mx:columns>
				
			</mx:DataGrid>
			
		</mx:VBox>
		
		
		<mx:ControlBar horizontalAlign = "left" width = "100%" paddingTop="0" paddingBottom="2">
			<mx:Label id = "nSelectedOrders" text="{selectedOrders.length + ' selected'}" />
			
			<mx:ComboBox id = "comboBox" 
						 prompt="- Change Status -" 
						 dataProvider="{parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.RequestStatus').DictionaryEntry}"
						 labelField="@codeRequestStatus" />
			
			<mx:LinkButton textDecoration = "underline"
						   label = "Go"
						   icon = "@Embed('../../assets/bullet_go.png')"
						   disabledIcon="@Embed('../../assets/bullet_go_disable.png')"
						   toolTip = "Submit action" 
						   click="{submitAction()}" 
						   enabled="{selectedOrders.length>0}"/>
			
			<mx:LinkButton textDecoration="underline"
						   label="Delete"
						   icon="@Embed('../../assets/delete.png')"
						   toolTip="Delete selected orders"
						   click="{promptToDelete()}" 
						   disabledIcon="@Embed('../../assets/delete_disable.png')"
						   enabled="{selectedOrders.length>0}"/>
			
			<mx:LinkButton textDecoration="underline"
						   label="Email"
						   icon="@Embed('../../assets/email_go.png')"
						   toolTip="Email GNomEx users"
						   click="{showEmailWindow()}" 
						   disabledIcon="@Embed('../../assets/email_go_disable.png')"
						   enabled="{selectedOrders.length>0}"/>
			<mx:Spacer width="100%"/>
			
			<mx:Label text = "{'(' + orderList.length + ' orders)'}" fontWeight = "normal" textAlign = "right"  fontStyle="italic"/>
			
			
			
		</mx:ControlBar>
		
	</mx:VBox>
</mx:VBox>
