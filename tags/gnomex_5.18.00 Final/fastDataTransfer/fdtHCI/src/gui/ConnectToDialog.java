/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConnectTo.java
 *
 * Created on Nov 26, 2010, 3:07:15 AM
 */

package gui;

import java.awt.Dimension;
import java.awt.Point;

/**
 *
 * @author Shobhit
 */
public class ConnectToDialog extends javax.swing.JFrame {

    /**
	 * 
	 */
    private String serverName;
    private long portNum;
    private String fileName;
    private boolean isUpload;
    private String destDir;
    private boolean isDirectory;

    public boolean isIsDirectory() {
        return isDirectory;
    }

    public void setIsDirectory(boolean isDirectory) {
        this.isDirectory = isDirectory;
    }

    public String getDestDir() {
        return destDir;
    }

    public void setDestDir(String destDir) {
        this.destDir = destDir;
    }
    private static FdtGUI guiInstance = FdtGUI.getFdtGUIInstance();
    
    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    public boolean getIsUpload() {
        return isUpload;
    }

    public void setIsUpload(boolean isUpload) {
        this.isUpload = isUpload;
    }

    public long getPortNum() {
        return portNum;
    }

    public void setPortNum(long portNum) {
        this.portNum = portNum;
    }

    public String getServerName() {
        return serverName;
    }

    public void setServerName(String serverName) {
        this.serverName = serverName;
    }
    /** Creates new form ConnectTo */
    public ConnectToDialog() {
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        textFieldPort = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        buttonConnect = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        radioButtonUpload = new javax.swing.JRadioButton();
        radioButtonDownload = new javax.swing.JRadioButton();
        labelDestDir = new javax.swing.JLabel();
        checkBoxIsDirectory = new javax.swing.JCheckBox();
        comboBoxServer = new javax.swing.JComboBox();
        comboBoxDestinationDir = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Enter Server Details");
        setForeground(java.awt.Color.black);

        jLabel1.setText("Server");

        textFieldPort.setText("54321");

        jLabel2.setText("Port");

        buttonConnect.setText("Connect");
        buttonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConnectActionPerformed(evt);
            }
        });

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        radioButtonUpload.setText("Upload");
        radioButtonUpload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radioButtonUploadMouseClicked(evt);
            }
        });

        radioButtonDownload.setText("Download");
        radioButtonDownload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radioButtonDownloadMouseClicked(evt);
            }
        });

        labelDestDir.setText("Destination Dir");

        checkBoxIsDirectory.setText("Is Directory");

        comboBoxServer.setEditable(true);
        comboBoxServer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        comboBoxDestinationDir.setEditable(true);
        comboBoxDestinationDir.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(labelDestDir, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(comboBoxDestinationDir, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(comboBoxServer, 0, 185, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(layout.createSequentialGroup()
                        .add(68, 68, 68)
                        .add(buttonConnect)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonCancel)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 74, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(checkBoxIsDirectory)
                            .add(layout.createSequentialGroup()
                                .add(jLabel2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(textFieldPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(9, 9, 9))))
            .add(layout.createSequentialGroup()
                .add(50, 50, 50)
                .add(radioButtonUpload)
                .add(140, 140, 140)
                .add(radioButtonDownload)
                .addContainerGap(163, Short.MAX_VALUE))
        );

        layout.linkSize(new java.awt.Component[] {buttonConnect, textFieldPort}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.linkSize(new java.awt.Component[] {jLabel1, labelDestDir}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(39, 39, 39)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(textFieldPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2)
                    .add(comboBoxServer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(54, 54, 54)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(labelDestDir)
                        .add(comboBoxDestinationDir, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(checkBoxIsDirectory))
                .add(40, 40, 40)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(radioButtonUpload)
                    .add(radioButtonDownload))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 39, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buttonCancel)
                    .add(buttonConnect))
                .add(35, 35, 35))
        );

        pack();
    }// </editor-fold>                        

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void buttonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConnectActionPerformed
        
        String server=(String)comboBoxServer.getSelectedItem();
        String port=textFieldPort.getText();
        String destDir= (String)comboBoxDestinationDir.getSelectedItem();
        if(!radioButtonUpload.isSelected() && !radioButtonDownload.isSelected())
        {
              String message = "Please select option to Upload or Download";
                ShowMessageDialog.showErrorDialog(message, "Error");

        }
        else if(server==null || server.equals(""))
        {

            String message = "Please enter a server address to connect to";
            ShowMessageDialog.showErrorDialog(message, "Error");
        }

        else if(port == null || port.equals(""))
        {
            String message = "Please enter a port number to connect to";
            ShowMessageDialog.showErrorDialog(message, "Error");
        }
        else if(destDir == null || destDir.equals(""))
        {
            String message = "Please enter a "+ labelDestDir.getText()+" to transfer";
            ShowMessageDialog.showErrorDialog(message, "Error");
        }
        else
        {
            if(radioButtonUpload.isSelected())
                setIsUpload(true);
            else
            {
                setIsUpload(false);
                if(checkBoxIsDirectory.isSelected())
                {
                    setIsDirectory(true);
                }
                else
                    setIsDirectory(false);
            }
            setServerName(server);
            setPortNum(Long.parseLong(port.trim()));
            setDestDir(destDir);
            guiInstance.setIsUpload(getIsUpload());
            guiInstance.setPortNum(getPortNum());
            guiInstance.setServerName(getServerName());
            guiInstance.setDestinationDir(getDestDir());
            guiInstance.setIsDirectory(isDirectory);
            this.dispose();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_buttonConnectActionPerformed

    private void radioButtonUploadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radioButtonUploadMouseClicked
        labelDestDir.setText("Destination Path");
        checkBoxIsDirectory.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_radioButtonUploadMouseClicked

    private void radioButtonDownloadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radioButtonDownloadMouseClicked
        labelDestDir.setText("Source Path");
        checkBoxIsDirectory.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_radioButtonDownloadMouseClicked

    /**
    * @param args the command line arguments
    */
public ConnectToDialog(javax.swing.JFrame parent) {
        try {
            initComponents();
            setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            Dimension dlgSize = getPreferredSize();
            Dimension frmSize = parent.getSize();
            Point loc = parent.getLocation();
            setLocation((frmSize.width - dlgSize.width) / 2 + loc.x, (frmSize.height - dlgSize.height) / 2 + loc.y);
            buttonGroup1.add(radioButtonUpload);
            buttonGroup1.add(radioButtonDownload);
            pack();
        } catch (Exception exception) {
        }
    }


   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonConnect;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox checkBoxIsDirectory;
    private javax.swing.JComboBox comboBoxDestinationDir;
    private javax.swing.JComboBox comboBoxServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel labelDestDir;
    private javax.swing.JRadioButton radioButtonDownload;
    private javax.swing.JRadioButton radioButtonUpload;
    private javax.swing.JTextField textFieldPort;
    // End of variables declaration//GEN-END:variables

}
