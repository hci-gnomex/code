<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:views="views.*" xmlns:util="views.util.*" label="Files">
	
	
	<mx:HTTPService  
		id="cacheFileDownloadList" 
		url="CacheFileDownloadList.gx"
		destination="cacheFileDownloadList"
		resultFormat="e4x"
		showBusyCursor="false"
		result="onCacheFileDownloadList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get cache file download list', event)"
		method="POST"
		useProxy="false">
		<mx:request>
			<fileDescriptorXMLString>{selectedFileList.toXMLString()}</fileDescriptorXMLString>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="cacheFDTFileDownloadList" 
		url="CacheFileDownloadList.gx"
		destination="cacheFileDownloadList"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onCacheFDTFileDownloadList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get cache file download list', event)"
		method="POST"
		useProxy="false">
		<mx:request>
			<fileDescriptorXMLString>{selectedFileList.toXMLString()}</fileDescriptorXMLString>
		</mx:request>
	</mx:HTTPService>
	
	
	<mx:HTTPService  
		id="getRequestDownloadList" 
		url="GetRequestDownloadList.gx"
		destination="getRequestDownloadList"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetRequestDownloadList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get request download list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >	
	
	
	<mx:Script>
		<![CDATA[
			import flash.display.Sprite;
			import flash.net.FileReference;
			import flash.net.URLRequest;
			import flash.net.URLRequestMethod;
			import flash.net.URLVariables;
			
			import hci.flex.controls.CheckBox;
			
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.events.PropertyChangeEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import views.experiment.DownloadProgressView;
			import views.renderers.CheckBoxGroupedItem;
			import views.util.FileUtil;
			import views.util.GuestDownloadTermsWindow;
			
			private var downloadWindow:ExperimentDownloadWindow;
			
			[Bindable]
			public var uploadButtonsVisible:Boolean = false;
			
			[Bindable]
			public var removeFileButtonsVisible:Boolean = false;
			
			[Bindable]
			public var rowCountMessage:String = new String();
						
			[Bindable]
			private var _request:Object;
			
			[Bindable]
			public var browseMessage:String = new String();
			
			public var browseParameters:Object;
			
			[Bindable]
			public var selectedFileList:XMLListCollection;
			
			private var estimatedDownloadSize:Number;
			
			private const DOWNLOAD_FILES_URL:String    = "DownloadFileServlet.gx"; 
			private const SUGGESTED_LOCAL_FILENAME:String = "gnomex-data";  
			
			[Bindable]
			public var resultKeys:String;
			
			private var filesExceedingMaxMessage:String = "";
			
			public static const   ALERT_BUTTON_WIDTH:int = Alert.buttonWidth;
			
			private var dateFormatter:DateFormatter = new DateFormatter();
			
			public function set request(value:Object):void {
				_request = value;
				dispatchEvent(new Event("requestChanged"));
			}
			
			public function get request():Object {
				return _request;
			}

			private function onGetRequestDownloadList(event:ResultEvent): void {
				if (getRequestDownloadList.lastResult.name() != "RequestDownloadList") {
					Alert.show(getRequestDownloadList.lastResult..ACTMESSAGE.@TEXT);
					return; 
				}    	 
				this.downloadTree.visible = true;
				setFileCount();
				sortDownloadList(this.downloadList);
				callLater(expandNodes);
				parentDocument.filterList();
							
			}
			
			private function sortDownloadList(theList:XMLListCollection):void{
				var sort:Sort = new Sort();
				sort.fields = [new SortField("@displayName", true)];
				theList.sort = sort;
				theList.refresh();
				for each(var child:XML in theList){
					if(child.children().length() > 0){
						var childList:XMLListCollection = new XMLListCollection(child.children());
						sortDownloadList(childList);
						child.setChildren(childList.copy());
					}
					
				}
				theList.refresh();
			}
			 
			private function expandNodes():void {
				if(downloadList.length > 0) {
					downloadTree.expandItem(downloadList.getItemAt(0),true); 
				}	
			}
			
			private function expandAllNodes():void {
				for each (var item3:Object in getRequestDownloadList.lastResult..FileDescriptor.(@type == "dir")) {
					downloadTree.expandItem(item3, false);
				}
			}
						
			
			public function downloadExpandedFiles(selectedFiles:XMLList):void {      	
				selectedFileList = new XMLListCollection(selectedFiles);
				
				filesExceedingMaxMessage = "";
				if (selectedFileList.length == 0) {
					Alert.show("Please select the files to download.");
				} else {
					estimatedDownloadSize = 0;
					for each (var item:Object in selectedFileList) {
						var size:Number = FileUtil.getEstimatedCompressedSize(item);
						if (size > parentApplication.MAX_DOWNLOAD_SIZE) {
							if (filesExceedingMaxMessage.length > 0) {
								filesExceedingMaxMessage += ", ";
							}
							filesExceedingMaxMessage += item.@displayName;
						}
						estimatedDownloadSize += size;
					}
					
					var call:Object = cacheFileDownloadList.send();
					call.marker = estimatedDownloadSize;    		
				}
			}
			
			
			private function getDownloadName(item:Object, col:int):String {
				var empty:String = item.name() == "Request" && item.hasOwnProperty("@isEmpty") && item.@isEmpty == "Y" ? " (no downloads)" : "";
				if (item.name() == "RequestDownload") {
					if (item.hasOwnProperty("@itemNumber") && item.@itemNumber != '') {
						var results:String = item.hasOwnProperty("@results") && item.@results != '' ? " - " + item.@results : '';
						return item.@itemNumber + results + empty;
					} else {
						return item.@results + empty;
					}
				} else {
					return item.@displayName + empty;
				} 
			}
			
			public function setFileCount():void {
				rowCountMessage = getRequestDownloadList.lastResult..FileDescriptor.(@type != 'dir').length() + " file(s)";    	
			}
			
			
			private function onCacheFileDownloadList(event:ResultEvent):void {
				var call:Object = event.token;
				var message:String = "";
				var title:String = "";
				var estimatedSize:Number = call.marker;
				if (filesExceedingMaxMessage != "") {
					message = "The following files exceed the " + parentApplication.MAX_DOWNLOAD_SIZE_DISPLAY + " maximum:\n" + this.filesExceedingMaxMessage + ".\n\n";
					if (parentApplication.isFDTSupported) {
						message += "Do you want to be download using FDT instead?";
					} else {
						message += "Do you want to be directed to the browser page for downloading large files individually?";
					}
					title = "Download file exceeds maximum size"; 
					Alert.show( message,
						title,
						(Alert.OK | Alert.NO), parentApplication.theBody, 
						onAlternateDownloadFiles,						
						parentApplication.iconWarning);
					
				} else if (estimatedSize >= parentApplication.MAX_DOWNLOAD_SIZE) {
					message =  
						"The total download size (" + FileUtil.getFileSizeText(call.marker) + ") exceeds the " + parentApplication.MAX_DOWNLOAD_SIZE_DISPLAY + " maximum.\n\n"
					if (parentApplication.isFDTSupported) {
						message += "Please choose FDT Download instead";
					} else {
						message += "You must unselect some files or click on the 'Download large files' link to download files individually."; 
					}
					title = "Total download size exceeds maximum size"; 
					Alert.show( message, title);
					
				} else {
					message = "Ready to download approximately " + FileUtil.getFileSizeText(call.marker) + " of data.  Proceed?";
					Alert.show( message,
						title,
						(Alert.YES | Alert.NO), parentApplication.theBody, 
						onDownloadFiles,						
						parentApplication.iconWarning);
				}
				
				
			}
						
			private function onDownloadFiles(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					var parms:URLVariables = new URLVariables();
					parms.mode =  "zip";
					if (parentApplication.guestEmailAddress != null) {
						parms.emailAddress = parentApplication.guestEmailAddress;
					}
					var progressWindow:DownloadProgressView = new DownloadProgressView();
					progressWindow.init(parentApplication.theBody, this.DOWNLOAD_FILES_URL, parms, downloadWindow.downloadExpandedFilesButton, estimatedDownloadSize, this.SUGGESTED_LOCAL_FILENAME);		
				}
			}    
			
			private function onAlternateDownloadFiles(event:CloseEvent):void {
				if (event.detail==Alert.OK) {
					if (parentApplication.isFDTSupported) {
						this.downloadFilesUsingFDT(selectedFileList.source);
					} else {
						this.showAlternateDownloadPage(selectedFileList.source);	
					}
				} 		
			}
			
			public function selectDownload(requestNumber:String):void {
				var pos:int = -1;
				for each(var r:Object in downloadList) {
					if (r.@requestNumber == requestNumber) {
						downloadTree.selectedItem = r;
						break;
					}
					pos++;
					for each(var rd:Object in r.RequestDownload) {
						pos++;
						for each(var fd:Object in rd.FileDescriptor) {
							pos++;
						}
					}
				}
				
				if (pos >= 0) {
					downloadTree.scrollToIndex(pos);
				}
			}
			
			public function downloadFilesUsingFDT(selectedFiles:XMLList):void {
				selectedFileList = new XMLListCollection(selectedFiles);					
				
				if (selectedFileList.length == 0) {
					mx.controls.Alert.show("Please select the files to download.");
				} else {
					cacheFDTFileDownloadList.send();
				}
			}
			
			private function onCacheFDTFileDownloadList(event:ResultEvent):void {
				// We have cached the selected analysis files
				// Now call the URL to start the FDT app using webstart
				showFastDataTransferDownloadPage();
			}
			
			public function showFastDataTransferDownloadPage():void {
				var url:URLRequest = new URLRequest('FastDataTransferDownloadExpServlet.gx');	
				url.contentType = "text/xml";
				url.method = URLRequestMethod.GET;
				var parms:URLVariables = new URLVariables();
				if (parentApplication.guestEmailAddress != null) {
					parms.emailAddress = parentApplication.guestEmailAddress;
				}
				url.data = parms;
				navigateToURL(url, '_self');						
			}
			
			public function showAlternateDownloadPage(selectedFiles:XMLList):void {
				// Sort by request number to avoid duplicates
				var filesCollection:XMLListCollection = new XMLListCollection(selectedFiles);
				var sortByNum:Sort = new Sort();
				sortByNum.fields = [new SortField("requestNumber")];
				filesCollection.sort = sortByNum;
				filesCollection.refresh();
				
				var requestNumbers:String = "";
				var previous:String = "";
				for each(var dl:Object in filesCollection.source) {
					var currentNum:String = dl.@requestNumber;
					if ( currentNum != previous ) {
						if (requestNumbers.length > 0) {
							requestNumbers += ":"
						}
						requestNumbers += currentNum;
					}
					previous = currentNum;
				}
				if (requestNumbers.length > 0) {
					var url1:URLRequest = new URLRequest('ShowRequestDownloadForm' + 
						(parentDocument.parentApplication.isGuestMode() ? 'ForGuest' : '') +   
						'.gx?requestNumbers=' + 
						requestNumbers);
					navigateToURL(url1, '_blank');	
				}
				
			}
			
			
			private function showExperimentUploadWindow():void {
				var idRequest:String = getRequestDownloadList.lastResult..Request[0].@idRequest;
				var requestNumber:String = getRequestDownloadList.lastResult..Request[0].@requestNumber;
				if (idRequest != null && idRequest != "") {
					ExperimentEditView.showExperimentUploadWindow(parentApplication.theBody, request, new ExperimentEditView, this);
				}
			}
			
			private function showExperimentOrganizeWindow():void {
				var idRequest:String = getRequestDownloadList.lastResult..Request[0].@idRequest;
				var requestNumber:String = getRequestDownloadList.lastResult..Request[0].@requestNumber;
				if (idRequest != null && idRequest != "") {
					ExperimentEditView.showExperimentOrganizeWindow(parentApplication.theBody, request, new ExperimentEditView, this);		 
				}
			}
			
			private function showLinkSamplesWindow():void{
				var idRequest:String = getRequestDownloadList.lastResult..Request[0].@idRequest;
				var requestNumber:String = getRequestDownloadList.lastResult..Request[0].@requestNumber;
				if (idRequest != null && idRequest != "") {
					ExperimentEditView.showLinkSamplesWindow(parentApplication.theBody, request, new ExperimentEditView, this);		 
				}
				
			}
			
			public function showDownloadWindow():void {
				if (this.browseParameters != null) {
					var downloadTerms:String = parentApplication.getProperty(parentApplication.PROPERTY_GUEST_DOWNLOAD_TERMS);
					if (parentApplication.isGuestMode() && downloadTerms != null && downloadTerms != '' && (parentApplication.guestEmailAddress == null || parentApplication.guestEmailAddress == '')) {
						var termsWindow:GuestDownloadTermsWindow = GuestDownloadTermsWindow(PopUpManager.createPopUp(parentApplication.mainArea, GuestDownloadTermsWindow, true));
						termsWindow.addEventListener(CloseEvent.CLOSE, checkGuestDownloadTerms);
						PopUpManager.centerPopUp(termsWindow);
					} else {
						showDownloadWindowAfterGuestPrompt();
					}
				}
			}
			
			public function checkGuestDownloadTerms(e:CloseEvent):void {
				if (e.detail == 1) {
					parentApplication.guestEmailAddress = e.target.emailAddress;
					showDownloadWindowAfterGuestPrompt();
				}
			}

			public function showDownloadWindowAfterGuestPrompt():void {
				if (this.browseParameters != null) {	  
					downloadWindow = ExperimentDownloadWindow(PopUpManager.createPopUp(parentApplication.theBody, ExperimentDownloadWindow, true));
					downloadWindow.downloadView = this;
					downloadWindow.browseParameters = this.browseParameters;
					PopUpManager.centerPopUp(downloadWindow);
					downloadWindow.init();
				}
			}
			
			private function showExperimentFDTUploadWindow():void {
				var idRequest:String = getRequestDownloadList.lastResult..Request[0].@idRequest;
				var requestNumber:String = getRequestDownloadList.lastResult..Request[0].@requestNumber;
				if (idRequest != null && idRequest != "") {
					ExperimentEditView.showExperimentUploadFDTWindow(parentApplication.theBody, request);		 
				}
			}
			
			[Bindable(event="requestChanged")]
			public function isClinicalResearchRequest():Boolean {
				if (this.request != null) {
					var requestCategory:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory',this.request.@codeRequestCategory);
					if (requestCategory.hasOwnProperty("@isClinicalResearch") && requestCategory.@isClinicalResearch == "Y") {
						return true;
					}
				}
				return false;
			}
		]]>
	</mx:Script>
	
	<mx:XMLListCollection id="downloadList" source="{getRequestDownloadList.lastResult.Request}"/>
	
	<mx:VBox width="100%" height="100%" paddingBottom="0" paddingLeft="4" paddingRight="4" paddingTop="0" verticalGap="0">
		
		<mx:HBox width="100%" visible="{browseMessage != ''}" includeInLayout="{browseMessage != ''}" horizontalAlign="center" styleName="warningLabel" verticalAlign="middle">
			<mx:Label text="{browseMessage}"/>			
		</mx:HBox>
		
		<mx:HBox  paddingTop="2" paddingBottom="2" verticalAlign="middle">	
			<mx:HBox includeInLayout="{this.removeFileButtonsVisible || this.uploadButtonsVisible}" 
					 visible="{this.removeFileButtonsVisible || this.uploadButtonsVisible}" 
					 horizontalAlign="right" paddingTop="2" paddingBottom="2">
				<mx:LinkButton label="Upload files" 
							   click="showExperimentUploadWindow()" 
							   id="linkbutton1" textDecoration="underline" icon="@Embed(source='../../assets/upload.png')" 
							   textAlign="left"/>
				<mx:LinkButton label="FDT Upload files" 
							   visible="{parentApplication.isFDTSupported &amp;&amp; !isClinicalResearchRequest()}"
							   includeInLayout="{parentApplication.isFDTSupported &amp;&amp; !isClinicalResearchRequest()}"
							   click="showExperimentFDTUploadWindow()" 
							   id="linkbuttonUploadFDT" textDecoration="underline" icon="@Embed(source='../../assets/upload_large.png')" textAlign="left"/>
				<mx:LinkButton label="Manage files"  
							   click="showExperimentOrganizeWindow()" 
							   toolTip="Add, delete, rename files and folders."
							   id="uploadOrganizeLink" 
							   textDecoration="underline" icon="@Embed(source='../../assets/chart_organisation.png')" 
							   textAlign="left"/>
			</mx:HBox>
			<mx:LinkButton label="Download files"  
						   click="showDownloadWindow()" 
						   id="downloadLink" 
						   textDecoration="underline" icon="@Embed(source='../../assets/download.png')" 
						   textAlign="left"
						   includeInLayout="{this.downloadTree.visible}" 
						   visible="{this.downloadTree.visible}"/>
			
		</mx:HBox>
		<mx:Spacer height="6" includeInLayout="{!this.uploadButtonsVisible &amp;&amp; !this.removeFileButtonsVisible}" visible="{!this.uploadButtonsVisible &amp;&amp; !this.removeFileButtonsVisible}"/>
		<mx:AdvancedDataGrid id="downloadTree" width="100%" height="100%" 
							 dropEnabled="false"  
							 displayItemsExpanded="false"
							 iconFunction="parentApplication.getTreeIcon"
							 dragEnabled="false" 
							 dragMoveEnabled="false"  
							 showHeaders="true"   
							 sortExpertMode="true" 
							 sortableColumns="false"
							 borderStyle="solid" 
							 headerWordWrap="false" 
							 allowMultipleSelection="true"
							 resizableColumns="true">						
			<mx:dataProvider> 
				<mx:HierarchicalData source="{downloadList}"/>
			</mx:dataProvider>						  
			<mx:columns>
				<mx:AdvancedDataGridColumn dataField="@displayName"  labelFunction="getDownloadName"  headerText="Folder or File" width="250"/> 
				<mx:AdvancedDataGridColumn dataField="@viewURL" headerText="" width="25" itemRenderer="views.renderers.LinkButtonViewFile"/>
				<mx:AdvancedDataGridColumn dataField="@info" headerText="Info" width="80"/>
				<mx:AdvancedDataGridColumn dataField="@linkedSampleNumber" headerText="Linked Sample" width="100"/>
				<mx:AdvancedDataGridColumn dataField="@fileSizeText"  headerText="Size" width="40" textAlign="right" /> 
				<mx:AdvancedDataGridColumn dataField="@lastModifyDateDisplay"  headerText="Modified" width="50"/> 
			</mx:columns>
		</mx:AdvancedDataGrid>
		<mx:HBox width="100%" horizontalAlign="left">
			<mx:Label text="{rowCountMessage}" />
		</mx:HBox>
		
	</mx:VBox>
	
	
	
	
</mx:Canvas>


