<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="views.util.*"
				implements="views.renderers.MultiselectRendererCommonInterface"
				layout="vertical" 
				title="Edit Experiment Type" width="650" height="430" paddingTop="4" verticalScrollPolicy="off" paddingRight="4" paddingLeft="4" paddingBottom="4"
				horizontalScrollPolicy="off">
	
	<mx:HTTPService
		id="deleteProtocol"
		url="DeleteProtocol.gx"
		showBusyCursor="true"
		resultFormat="e4x"
		useProxy="false"
		method="POST"
		result="onDeleteProtocol(event)"
		fault="parentApplication.onFailHttpRequest('Failed to delete protocol', event)">
	</mx:HTTPService>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import views.renderers.MultiselectPopupCommon;
			
			private var platformTypeCode:String = null;
			private var defaultIcon:String = null;
			
			private var allSeqLibProtocols:XMLList;
			
			[Bindable] 
			private var selectedProtocols:XMLListCollection;
			
			[Bindable]
			private var parentWindow:views.util.ExperimentPlatformWindow = null;
			
			private var selectedItem:Object;
			
			private var MULTI_SEQ_LIB_PROTOCOL:String = "seqLibProtocol";
			private var MULTI_REQUEST_CATEGORY:String = "requestCategory";
			private var multiSelectOpened:String = "";
			
			public function init(parentWindow:views.util.ExperimentPlatformWindow, selectedItem:Object):void {
				this.parentWindow = parentWindow;
				themeCombo.setFocus();
				var test:XMLList = parentWindow.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SeqLibProtocol').DictionaryEntry;
				allSeqLibProtocols = parentWindow.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.SeqLibProtocol').DictionaryEntry.(@value != '' && @isActive != 'N');
				this.selectedItem = selectedItem;
				
				initValues(selectedItem);
			}
			
			private function initValues(selectedItem:Object):void {
				for each (var t:Object in parentApplication.dictionaryManager.getEntries('hci.gnomex.model.ApplicationTheme')) {
					if (t.@idApplicationTheme == selectedItem.@idApplicationTheme) {
						themeCombo.selectedItem = t;
						break;
					}
				}

				isActiveCheckBox.selected = (selectedItem.@isActive == 'Y');
				
				experimentTypeName.text = selectedItem.hasOwnProperty("@application") ? selectedItem.@application : "";
				
				sortOrderCombo.selectedIndex = selectedItem.hasOwnProperty("@sortOrder") && selectedItem.@sortOrder != null && selectedItem.@sortOrder != ''
					? int (selectedItem.@sortOrder) : 0;
				
				includeInSelectedPlatform.selected = selectedItem.hasOwnProperty("@isSelected") ? selectedItem.@isSelected == 'Y' : false;
				includeInSelectedPlatformChanged();
				
				this.radioGroupLabPreppedSamples.selectedValue = selectedItem.@onlyForLabPrepped == 'Y' ? 'Y' : 'N';
				
				captureLibDesign.selected = selectedItem.hasOwnProperty("@hasCaptureLibDesign") ? selectedItem.@hasCaptureLibDesign == 'Y' : false;
				
				initSelectedProtocols(selectedItem.hasOwnProperty("@idSeqLibProtocols") ? selectedItem.@idSeqLibProtocols : "");

				setPlatformText();
				
				dirty.resetDirty();
			}
			
			private function setPlatformText():void {
				var txt:String = "";
				for each(var p:XML in selectedItem..RequestCategoryApplication) {
					if (p.@isSelected == 'Y') {
						if (p.@codeRequestCategory == parentWindow.requestCategory.@codeRequestCategory) {
							if (txt.length > 0) {
								txt = ", " + txt;
							}
							txt = p.@requestCategory.toString() + txt;
						} else {
							if (txt.length > 0) {
								txt += ", ";
							}
							txt += p.@requestCategory.toString();
						}
					}
				}
				
				this.platforms.htmlText = txt;
			}
			
			private function initSelectedProtocols(ids:String):void {
				selectedProtocols = new XMLListCollection();
				var values:Array = ids.split(",");
				for each (var id:String in values) {
					// Apparently dictionaryManager has multiple entries for a single key so we need [0]
					selectedProtocols.addItem(parentWindow.dictionaryManager.getEntry('hci.gnomex.model.SeqLibProtocol', id)[0]);
				}
			}
			
			private function setSelectedRequestCategories(ids:String):void {
				var values:Array = ids.split(",");
				var anyFound:Boolean = false;
				selectedItem.@isSelected = "N";
				for each (var node:XML in selectedItem..RequestCategoryApplication) {
					var found:Boolean = false;
					for each (var id:String in values) {
						if (id == node.@codeRequestCategory) {
							found = true;
							anyFound = true;
							if (id == parentWindow.requestCategory.@codeRequestCategory) {
								selectedItem.@isSelected = "Y";
							}
							break;
						}
					}
					if (found) {
						node.@isSelected = "Y";
					} else {
						node.@isSelected = "N";
					}
				}
				setPlatformText();
				if (anyFound) {
					isActiveCheckBox.selected = true;
				}
				
				dirty.setDirty();
			}

			private function configureStepsClick():void {
				var configureStepsWindow:LibPrepStepsWindow = LibPrepStepsWindow(mx.managers.PopUpManager.createPopUp(this, LibPrepStepsWindow, true));
				configureStepsWindow.init(this.dirty, selectedItem);
				PopUpManager.centerPopUp(configureStepsWindow);
			}
			
			private function addNewSeqLibProtocol():void {
				var w:SeqLibProtocolEditWindow  = SeqLibProtocolEditWindow(mx.managers.PopUpManager.createPopUp(parentApplication.theBody, SeqLibProtocolEditWindow, true));
				w.init(this, null);
				PopUpManager.centerPopUp(w);
			}
			
			private function editSeqLibProtocol():void {
				var w:SeqLibProtocolEditWindow  = SeqLibProtocolEditWindow(mx.managers.PopUpManager.createPopUp(parentApplication.theBody, SeqLibProtocolEditWindow, true));
				w.init(this, seqLibProtocolGrid.selectedItem);
				PopUpManager.centerPopUp(w);
			}
			
			private function addExistingSeqLibProtocol():void {
				// Note that MultiselectPopupCommon will call updatedp function at end.  Should change to event.
				this.multiSelectOpened = this.MULTI_SEQ_LIB_PROTOCOL;
				var protocols:String = buildProtocolsString();
				var pop:MultiselectPopupCommon = MultiselectPopupCommon(PopUpManager.createPopUp(parentApplication.theBody, MultiselectPopupCommon,true));
				pop.initializeData("Select Protocols", protocols, allSeqLibProtocols);
				pop.opener=this;
				dirty.setDirty();
			}
			
			public function updateDP(str:String):void{
				if (this.multiSelectOpened == this.MULTI_SEQ_LIB_PROTOCOL) {
					initSelectedProtocols(str);
				} else if (this.multiSelectOpened == this.MULTI_REQUEST_CATEGORY) {
					setSelectedRequestCategories(str);
				} 
			}

			private function buildProtocolsString():String {
				var retVal:String = "";
				for each(var p:Object in selectedProtocols) {
					if (retVal != "") {
						retVal += ",";
					}
					retVal += p.@idSeqLibProtocol;
				} 
				return retVal;
			}
			
			private function removeSeqLibProtocol():void {
				if (seqLibProtocolGrid.selectedItem == null) {
					return;
				}
				Alert.okLabel = "Delete";
				Alert.yesLabel = "Unlink";
				Alert.buttonWidth = 80;
				Alert.show("Do you wish to unlink '" + seqLibProtocolGrid.selectedItem.@display + "' from '" + selectedItem.@application + "', delete '" + seqLibProtocolGrid.selectedItem.@display + "' from the database and all linked experiment types or cancel?",
					"Confirm",
					(Alert.OK | Alert.YES | Alert.CANCEL), this, 
					onPromptToRemoveSeqLibProtocol,						
					parentApplication.iconWarning);
				
			}
			
			private function onPromptToRemoveSeqLibProtocol(event:CloseEvent):void {
				parentApplication.resetAlertButtons();
				if (event.detail == Alert.YES) {
					removeSeqLibProtocolImpl();
				} else if (event.detail == Alert.OK) {
					deleteSeqLibProtocol();
				}
			}
			
			private function removeSeqLibProtocolImpl():void {
				if (this.seqLibProtocolGrid.selectedItem != null) {
					this.selectedProtocols.removeItemAt(selectedProtocols.getItemIndex(seqLibProtocolGrid.selectedItem));
					this.dirty.setDirty();
				}
			}
			
			private function deleteSeqLibProtocol():void {
				if (this.seqLibProtocolGrid.selectedItem != null) {
					var params:Object = new Object();
					params.idProtocol = seqLibProtocolGrid.selectedItem.@idSeqLibProtocol;
					params.protocolClassName = 'hci.gnomex.model.SeqLibProtocol';
					this.deleteProtocol.send(params);
				}
			}
			
			private function onDeleteProtocol(event:ResultEvent):void {
				if (deleteProtocol.lastResult.name() == "SUCCESS") {
					removeSeqLibProtocolImpl();
				} else {
					mx.controls.Alert.show(deleteProtocol.lastResult..ACTMESSAGE.@TEXT);
				}
			}
			
			private function save():void {
				if (themeCombo.selectedItem == null || experimentTypeName.text == null || experimentTypeName.text == '') {
					Alert.show("You must choose a theme and enter a name before saving");
					return;
				}
				var originalIdTheme:String = selectedItem.@idApplicationTheme;
				selectedItem.@idApplicationTheme = themeCombo.selectedItem.@idApplicationTheme;
				selectedItem.@isActive = isActiveCheckBox.selected ? 'Y' : 'N';
				selectedItem.@application = experimentTypeName.text;
				selectedItem.@display = experimentTypeName.text;
				selectedItem.@sortOrder = sortOrderCombo.selectedItem == null ? '0' : sortOrderCombo.selectedItem;
				// isSelected is set in updateDP function
				selectedItem.@onlyForLabPrepped = this.radioGroupLabPreppedSamples.selectedValue == null ? 'N' : this.radioGroupLabPreppedSamples.selectedValue;
				selectedItem.@hasCaptureLibDesign = captureLibDesign.selected ? 'Y' : 'N';
				selectedItem.@idSeqLibProtocols = buildProtocolsString();
				
				parentWindow.updateIlluminaExperimentTypeNode(XML(selectedItem), originalIdTheme);
				
				dirty.resetDirty();
				mx.managers.PopUpManager.removePopUp(this);
			}
			
			public function addSeqLibProtocol(params:Object):void {
				var found:Boolean = false;
				var slpToUse:Object;
				for each(var slp:Object in selectedProtocols) {
					if (slp.@idSeqLibProtocol == params.idProtocol) {
						slpToUse = slp;
						found = true;
						break;
					}
				}
				
				if (!found) {
					slpToUse = new XML("<DictionaryEntry></DictionaryEntry>");
					selectedProtocols.addItem(slpToUse);
				}
				slpToUse.@idSeqLibProtocol = params.idProtocol;
				slpToUse.@value = params.idProtocol;
				slpToUse.@seqLibProtocol = params.protocolName;
				slpToUse.@display = params.protocolName;
				slpToUse.@description = params.protocolDescription;
				slpToUse.@url = params.protocolUrl;
				slpToUse.@isActive = params.isActive;
				slpToUse.@adapterSequenceThreePrime = params.adapterSequenceThreePrime;
				slpToUse.@adapterSequenceFivePrime = params.adapterSequenceFivePrime;
				this.dirty.setDirty();
			}
			
			private function includeInSelectedPlatformChanged():void {
				if (includeInSelectedPlatform.selected) {
					isActiveCheckBox.selected = true;
				}
				
				dirty.setDirty();
			}
			
			private function buildRequestCategoriesString():String {
				var ids:String = "";
				for each(var p:XML in selectedItem..RequestCategoryApplication) {
					if (p.@isSelected == 'Y') {
						if (ids.length > 0) {
							ids += ",";
						}
						ids += p.@codeRequestCategory.toString();
					}
				}
				
				return ids;
			}
			
			private function includeInSelectedPlatformClick():void {
				// Note that MultiselectPopupCommon will call updatedp function at end.  Should change to event.
				this.multiSelectOpened = this.MULTI_REQUEST_CATEGORY;
				var categories:String = buildRequestCategoriesString();
				var pop:MultiselectPopupCommon = MultiselectPopupCommon(PopUpManager.createPopUp(parentApplication.theBody, MultiselectPopupCommon, true));
				var allActiveCategories:XMLList = new XMLList();
				for each (var cat:XML in selectedItem..RequestCategoryApplication) {
					if (cat.@isActive == 'Y') {
						allActiveCategories += cat;
					}
				} 
				pop.initializeData("Select Platforms", categories, allActiveCategories);
				pop.opener=this;
			}
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%" styleName="form" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4">
		<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="4">
			<mx:Text text="Theme" styleName="formLabel" width="55"/>
			<mx:ComboBox id="themeCombo" width="200" dataProvider="{parentApplication.dictionaryManager.getEntries('hci.gnomex.model.ApplicationTheme')}"
						 labelField="@display" close="{this.dirty.setDirty();}" />
			<mx:Spacer width="100%" />
			<mx:CheckBox id="isActiveCheckBox" label="Active" enabled="true" click="{dirty.setDirty()}" toolTip="Cannot inactivate experiment type when it is associated with platforms"/> 
		</mx:HBox>
		
		<mx:HBox width="100%">
			<mx:RadioButtonGroup id="radioGroupLabPreppedSamples" />
			<mx:RadioButton label="Available when Core Facility preps library"  groupName="radioGroupLabPreppedSamples" value="N" click="{dirty.setDirty()}" /> 
			<mx:RadioButton label="Available when Client preps library"  groupName="radioGroupLabPreppedSamples" value="Y" click="{dirty.setDirty()}" /> 
		</mx:HBox>

		<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="4">
			<mx:Text text="Name" styleName="formLabel" width="55"/>
			<mx:TextInput id="experimentTypeName" width="450" backgroundColor="#FFFFFF" borderColor="#898F93" change="dirty.setDirty()" />
			<mx:Spacer width="100%" />
			<mx:Text text="Sort Order" styleName="formLabel"/>
			<mx:ComboBox id="sortOrderCombo" width="60" close="{this.dirty.setDirty();}" >
				<mx:Array>
					<mx:String >0</mx:String>
					<mx:String >1</mx:String>
					<mx:String >2</mx:String>
					<mx:String >3</mx:String>
					<mx:String >4</mx:String>
					<mx:String >5</mx:String>
					<mx:String >6</mx:String>
					<mx:String >7</mx:String>
					<mx:String >8</mx:String>
					<mx:String >9</mx:String>
				</mx:Array>
			</mx:ComboBox>
		</mx:HBox>
		
		<mx:HBox width="100%" horizontalGap="2" verticalAlign="top" paddingTop="0">
			<!--<mx:CheckBox id="includeInSelectedPlatform" label="Include In Selected Platform" click="{includeInSelectedPlatformChanged()}" width="100%" />-->
			<mx:LinkButton id="includeInSelectedPlatform" label="Platforms" click="includeInSelectedPlatformClick()" textDecoration="underline"
						   styleName="formLabel" textAlign="left" paddingTop="0" paddingLeft="0" paddingRight="0" width="55"/>
			<mx:HBox width="100%" verticalScrollPolicy="auto" height="40" paddingTop="0" paddingBottom="0" >
				<mx:Text width="100%" id="platforms" fontSize="12" />
			</mx:HBox>
		</mx:HBox>
		
		<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="0">
			<mx:CheckBox id="captureLibDesign" label="Capture Lib Design" click="{dirty.setDirty()}" /> 
			<mx:Spacer width="100%" />
			<mx:LinkButton label="Configure Lib Prep Steps" 
						   click="configureStepsClick()" 
						   textDecoration="underline" 
						   id="configurePrepStepsButton" 
						   paddingLeft="0" textAlign="left" paddingTop="0" />  	        
		</mx:HBox>
		
		<mx:VBox width="100%" height="100%" styleName="form" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0">
			<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="4" paddingBottom="0">
				<mx:Text text="Sequence Lib Protocols" styleName="formLabel"/>
				<mx:Spacer width="20" />
				<mx:LinkButton label="Add New" styleName="linkMenuButton" 
							   click="addNewSeqLibProtocol()"
							   enabled="{parentWindow.platformList.selectedItem.@canUpdate == 'Y' ? true : false}" 
							   icon="@Embed(source='../../assets/add.png')" 
							   disabledIcon="@Embed(source='../../assets/add_disable.png')" fontSize="10"/>
				
				<mx:LinkButton label="Add Existing" styleName="linkMenuButton" 
							   click="addExistingSeqLibProtocol()"
							   enabled="{parentWindow.platformList.selectedItem.@canUpdate == 'Y' ? true : false}" 
							   icon="@Embed(source='../../assets/add.png')" 
							   disabledIcon="@Embed(source='../../assets/add_disable.png')" fontSize="10"/>
				
				<mx:LinkButton label="Remove" styleName="linkMenuButton"
							   click="removeSeqLibProtocol()"
							   enabled="{parentWindow.platformList.selectedItem.@canUpdate == 'Y' &amp;&amp; seqLibProtocolGrid.selectedItem != null}"   
							   icon="@Embed(source='../../assets/delete.png')" 
							   disabledIcon="@Embed(source='../../assets/delete_disable.png')" fontSize="10"/>
				<mx:Text text="Double click protocol to edit." styleName="linkMenuButton" fontStyle="normal" fontSize="10" color="#2863C6" fontWeight="normal"/>
			</mx:HBox>
			<mx:HBox width="100%" height="100%" horizontalGap="2" verticalAlign="middle" paddingTop="4">
				<mx:DataGrid id="seqLibProtocolGrid"  horizontalScrollPolicy="auto"
							 dataProvider="{selectedProtocols}" editable="false"
							 width="100%" height="100%"  wordWrap="true" variableRowHeight="true" fontSize="11"
							 doubleClickEnabled="true" doubleClick="{editSeqLibProtocol()}">
					<mx:columns>
						<mx:DataGridColumn headerText="Seq Lib Protocol"  id="seqLibProtocolCol" dataField="@display" 
										   sortable="true" editable="false"   
										   wordWrap="true" />
					</mx:columns>
				</mx:DataGrid>
			</mx:HBox>
		</mx:VBox>
	</mx:VBox>
	<mx:ControlBar horizontalAlign="right">
		<util:DirtyNote id="dirty" />
		<mx:Button label="Save" id="saveButton" click="save()" icon="@Embed(source='../../assets/save.png')" 
				   enabled="{themeCombo.selectedItem != null &amp;&amp; experimentTypeName.text.length > 0}" 
				   disabledIcon="@Embed(source='../../assets/save_disable.png')"/>
		<mx:Button label="Cancel" click="{mx.managers.PopUpManager.removePopUp(this)}"/>
	</mx:ControlBar>
	
</mx:TitleWindow>
