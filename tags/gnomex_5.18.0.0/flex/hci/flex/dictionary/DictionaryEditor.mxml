<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:hci = "hci.components.*"
	layout="absolute" 
	left="0" right="0" top="0" bottom="0" 
	
	showCloseButton="true"
	close="onClose()" 
	
	creationComplete="initializeData()" 
	width="900" 
	height="500" 
	title="Dictionary Editor" 
	 fontWeight="normal">
	 

	
	
	<mx:Script>
		<![CDATA[
			import hci.flex.util.DictionaryManager;
			import hci.flex.controls.*;
			import mx.events.CloseEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
		
			import mx.containers.HDividedBox;
			import mx.containers.VDividedBox;
			import mx.collections.SortField;
			import mx.collections.Sort;
			import flash.net.navigateToURL;
			import mx.managers.CursorManager;
			import mx.binding.utils.BindingUtils;
			import mx.containers.VBox;
			import mx.core.EdgeMetrics;
			import mx.controls.Label;
			import mx.controls.TextArea;
			import mx.messaging.management.Attribute;
			import mx.controls.DataGrid;
			import mx.controls.DateField;
			import mx.events.ListEvent;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.charts.series.ColumnSet;
			import mx.collections.XMLListCollection;
			import mx.rpc.events.ResultEvent;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.controls.Alert;
			import hci.flex.dictionary.DictionaryEvent;
			import mx.collections.ICollectionView;

			[Bindable]
			private var dictionaryManager:DictionaryManager;
			
			public var selectedDictClassName:String = null;

			[Bindable]			
			public var selectedDictDisplayName:String = "";
			private var lastSelectedDictionary:Object = null;

			public var selectedDictionary:Object = null;
			private var nearestNeighbor:Object = null;
			
			private var selectedDictionaryEntry:Object = null;
			private var selectedDictionaryIndex:int = 0;

			public var refreshView:String = "no";
		
		
			private var fullDictionaryList:XMLListCollection; 
			
			[Bindable]
			public var dictionaryEntries:XMLListCollection = null;
			
			[Bindable]
			public var secAdvisor:XMLList = null;
			
			public var currentDictAction:String = null;
			public var saveMode:String = "update";
			

			public function initializeData():void {
				dictionaryManager = parentApplication.dictionaryManager;
				  
				dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_LOADED, onDictionaryLoaded);
				dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_METADATA_LOADED, onDictionaryMetadataLoaded);
				dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_ENTRY_SAVED, onDictionarySaved); 
				
				initDictionaryTree();

				if (selectedDictClassName != null) {
					dictionaryEntries.refresh();
					showDictionaryEntriesForSelectedDict();
    			}
				
				var initializedEvent:Event = new Event(DictionaryEvent.DICTIONARY_WINDOW_INITIALIZED);
	        	dispatchEvent(initializedEvent);
			}
			
			public function loadDictionaries():void {
				currentDictAction = "load";
				dictionaryManager.call(currentDictAction, "");
			}
			
			public function reloadDictionaries():void {
				currentDictAction = "reload";
				dictionaryManager.call(currentDictAction, "");
				
			}
			
			public function onDictionaryLoaded(event:Event):void {
				initDictionaryTree();
				if (selectedDictClassName != null) {
					dictionaryEntries.refresh();
					showDictionaryEntriesForSelectedDict();
            	}
				callLater(this.reselectTree);				
			}
	       
	        public function onDictionaryMetadataLoaded(event:Event):void {
				showDictionaryEntriesForSelectedDict();
            	callLater(this.reselectTree);
            	
            	if (this.selectedDictionaryEntry != null) {
            		// Now show the form for the selected dictionary entry
					del.enabled=enableDelete();
					clearEditor();
					saveMode='update';
					currentDictAction='edit';
					buildEditorWindowForDictionaryEntry(selectedDictionaryEntry);
            	}
            	
            	// Dispatch event that meta data has been loaded
            	var selectEvent:Event = new Event(DictionaryEvent.DICTIONARY_WINDOW_DICTIONARY_SELECTED);
		        dispatchEvent(selectEvent);
			}
			public function onDictionarySaved(event:Event):void {
				this.reloadDictionaries();
			}
		

		   public function reselectTree():void {
            	if (selectedDictionary != null) {
					var itemValue:String;
            		for each(var item:Object in treeDictionary.dataProvider) {
            			if (item.@className == selectedDictionary.@className) {
            				treeDictionary.selectedItem = item;
 				           	treeDictionary.scrollToIndex(treeDictionary.selectedIndex);
            				treeDictionary.expandChildrenOf(treeDictionary.selectedItem, true);
            				selectedDictionary = item;
            				if(selectedDictionaryEntry != null) {
            					//treeDictionary.selectedIndex = selectedDictionaryIndex;
            					//if(treeDictionary.selectedIndex>= 0) {
	            				//	treeDictionary.scrollToIndex(treeDictionary.selectedIndex);
	            				//	this.onSelectDictionary();            						
            					//}
								for each(dictItem in selectedDictionary.DictionaryEntry) {
									itemValue = dictItem.@value;
									if(itemValue.length > 0 && itemValue==selectedDictionaryEntry.@value) {
										treeDictionary.selectedItem = dictItem;
										treeDictionary.scrollToIndex(treeDictionary.selectedIndex);
										this.onSelectDictionary();												
									}
								}								
            				} else {
            					if(currentDictAction == 'add' && lastSelectedDictionary != null) {
            						// Compare dictionary branch before and after the change
            						// and point to the first new item found
	             					for each(var dictItem:Object in selectedDictionary.DictionaryEntry) {
	             						itemValue = dictItem.@value;
	             						if(itemValue.length > 0) {
	             							var itemValueFound:Boolean = false;
	             							for each(var lastDictItem:Object in lastSelectedDictionary.DictionaryEntry) {
	             								if(itemValue == lastDictItem.@value) {
	             									itemValueFound = true;
	             								}
	             								
	             							}
	             							if(!itemValueFound) {
				            					treeDictionary.selectedItem = dictItem;
				            					treeDictionary.scrollToIndex(treeDictionary.selectedIndex);
				            					this.onSelectDictionary();
	             								break;
	             							}
	             							
	             						}	             						
	             					}
	             					lastSelectedDictionary = null;
            					} else {
            						if(currentDictAction == 'delete' && nearestNeighbor != 0) {
										for each(dictItem in selectedDictionary.DictionaryEntry) {
											itemValue = dictItem.@value;
											if(itemValue.length > 0 && itemValue==nearestNeighbor.@value) {
												treeDictionary.selectedItem = dictItem;
												treeDictionary.scrollToIndex(treeDictionary.selectedIndex);
												this.onSelectDictionary();												
											}
										}			
            						}
            					}
            				}
            				break;
            			}
            		}
            	}		   	
		   }
		   
	       
	       public function handleError(error:Error):void {
	           Alert.show(error.message,error.name);               
	        }
	       
	       	               
	      	public function initDictionaryTree():void {
	        	fullDictionaryList = dictionaryManager.getEditableDictionaries();
	        	var item:Object = null;
	        	
	        	// sort by displayName
	        	var sortDisplay:Sort = new Sort();
	       		sortDisplay.fields=[new SortField("@displayName")];
	       		fullDictionaryList.sort = sortDisplay;
	       		fullDictionaryList.refresh(); 
	        	
				treeDictionary.dataProvider = fullDictionaryList;
				
			
	      	}
	      	
	      	public function selectDictionary(dictionaryClassName:String):void {
	      		for each(var dict:Object in fullDictionaryList) {
	      			if (dict.@className == dictionaryClassName) {
	      				this.selectedDictionary = dict;
	      				this.selectedDictionaryEntry = null;
	      				treeDictionary.selectedItem = dict;
	      				
	      				currentDictAction='metadata';
		  				refreshView='no';
	  					getMetaDataForSelectedDictionary(treeDictionary.selectedItem);  
	  					treeDictionary.expandChildrenOf(treeDictionary.selectedItem, true);
	  				
	  					break;
	      			}
	      		}
	       }
	       
	       public function selectDictionaryEntry(item:Object):void {
				
		   		for each (var dictionary:Object in treeDictionary.dataProvider) {
		   			if (dictionary.@className == this.selectedDictClassName) {
		   				for each(var dictionaryEntry:Object in dictionary.DictionaryEntry) {
				   			if (dictionaryEntry.@value == item.@value) {
								treeDictionary.selectedItem = dictionaryEntry;
								this.onSelectDictionary();
		   					}
		   				}
		   			}
		   		}	       	
		   		
		   		
		   		
	       }
	       
	       private function getMetaDataForSelectedDictionary(dictionary:Object):void {
	       		clearEditor();
	       		clearDictGrid();
	       		if (refreshView == "yes" || (dictionary.@className == null || dictionary.@className == "")) {
	       			selectedDictClassName = null;
	       			selectedDictDisplayName = "";
	       			add.enabled = false;
	       			del.enabled = false;
	       			return;
	       		} else {
	       			selectedDictDisplayName = dictionary.@displayName;
		       		selectedDictClassName = dictionary.@className;
		       		selectedDictionary = dictionary;		       		

		       		dictionaryManager.call(currentDictAction, selectedDictClassName);
		       		add.enabled = true;
		       		save.visible = true;
		       		save.enabled = false;
	       		}
	       }
	       

	       
	       // Looks up the data for the grid based on the combobox selection
	        public function showDictionaryEntriesForSelectedDict():void {
	        	
	        	// enable add button
	        	add.enabled = true;
	        	
	        	dictionaryEntries = new XMLListCollection(dictionaryManager.getEntriesExcludeBlank(selectedDictClassName));
				
	        	// look up and assign columns
	        	var unOrderedCols:Array = null;
	        	var dgc:DataGridColumn = null;
	        	
	        	unOrderedCols = new Array();
	        	var spliceAt:int = 0;
	        	for each(var field:XML in dictionaryManager.getDictionaryMetaDataFields()) {
	        		var isFilter:Boolean = false;
        			dgc = new DataGridColumn(field.@id); 
        			dgc.dataField = "@"+field.@id;
        			dgc.headerText = field.@caption;
        			
					// set the label function
					if (field.@isFilter == "Y" && field.@className != "YN") {
						dgc.labelFunction = getDisplayForValue;
					}
	        		
	        		if (field.@visible == "N") {
	        			dgc.visible = false;
	        		}
	        		if (isFilter == true) {
	        			unOrderedCols.splice(spliceAt,0,dgc);
	        			spliceAt++;
	        		} else {
	        			unOrderedCols.push(dgc);
	        		}
	        	}
	        	
	        	var orderedCols:Array = new Array();
	        	var isActiveCol:DataGridColumn = null;
	        	
	        	for (var c:int=0;c<unOrderedCols.length;c++) {
	        		if (unOrderedCols[c].headerText != "Active ?") {
	        			orderedCols.push(unOrderedCols[c]);
	        		} else {
	        			isActiveCol = unOrderedCols[c];
	        		}
	        	}
	        	if (isActiveCol != null) {
	        		orderedCols.push(isActiveCol);
	        	}
	        	
	        	dataGridDictionary.columns = orderedCols;
				dataGridDictionary.dataProvider = dictionaryEntries;
	        }
	        
	        public function getDisplayForValue(item:Object, column:DataGridColumn):String {
	        	var filter:XMLList = dictionaryManager.getFilter(selectedDictClassName, column.dataField);
	        	var attrs:XMLList = item.attributes();
	        	return dictionaryManager.getEntryDisplay(filter.@filterClass.toString(), item[column.dataField].valueOf());
	        }
	        
	        public function clearEditor():void{
	        	dgEditor.removeAllChildren();
	        	save.enabled = false;
	        	save.visible = true;
	        }
	        
	        public function clearDictGrid():void {
	        	var clearCols:Array = new Array();
	        	dataGridDictionary.columns = new Array();
	        }
	        
	        public function buildEditorWindow(event:MouseEvent):void {
	        	
	        	// don't continue if no dcitionary selected
	        	if (selectedDictClassName == null || selectedDictClassName == " " ) {
	        		return;
	        	}

				// don't continue if there is not row to edit 
				if (currentDictAction == "edit" && event.currentTarget.selectedItem == null) {
					return;
				}
	        	
	        	buildEditorWindowForDictionaryEntry(dataGridDictionary.selectedItem);

	        	
	        }
	        
	        private function buildEditorWindowForDictionaryEntry(dictionaryEntry:Object):void {
	        	// update the UI
	        	clearEditor();
	        	if (currentDictAction == "add") {
	        		del.enabled = false;
	        	} 
	        	if (currentDictAction == "add" || dictionaryEntry.@canUpdate == "Y") {
	        		save.enabled = true;
	        	} else {
	        		save.enabled = false;
	        	}
	        	
	        	var xml:XML = new XML();
	        	if (currentDictAction == 'edit') {
	        		xml = new XML(dictionaryEntry);
	        	}
	        	
	        	var attrs:XMLList = xml.attributes();
	        	
	        	var children:Array = dgEditor.getChildren();
	        	var fCount:int = 0;
	        	var isActiveVb:VBox = null;
	        	for each(var item:Object in dictionaryManager.getDictionaryMetaDataFields()) {
	        		var vb:VBox = null;
	        			
        			if (item.@isFilter == "Y" && item.@visible == "Y" && item.@dataType != "isActive") {
		        			vb = buildComponent(item,xml);
		        			children.splice(fCount,0,vb);
	        		} else if(item.@isFilter == "N") {
						if(item.@visible == "Y" && item.@dataType != "isActive") {
		        			vb = buildComponent(item,xml);
		        			children.push(vb);
		        		} else if (item.@visible == "Y" && item.@dataType == "isActive"){
		        			isActiveVb = buildComponent(item,xml);
		        		} else if (item.@visible == "N"){
		        			vb = buildComponent(item,xml);
		        			vb.visible = false;
		        			vb.includeInLayout = false;
		        			children.push(vb);
		        		}
	        		}
	        		fCount++;
	        	}
	        	
	        	// add the isActive control to the end
	        	if (isActiveVb != null) {
	        		children.push(isActiveVb);
	        	}
	        	for each (var vbox1:VBox in children) {
	        		dgEditor.addChild(vbox1);
	        	}	        	
				
				// Kludge to fix textinput fields being disabled.
				callLater(checkFieldEditable);
	        }
	        
			// Kludge to fix textinput fields being set to not editable.
			private function checkFieldEditable():void {
				var editor:Array = dgEditor.getChildren();
				for each (var field:XML in dictionaryManager.getDictionaryMetaDataFields()) {
					var vb:Object = dgEditor.getChildByName("vb_"+field.@id);
					var item:Object = vb.getChildByName(field.@id);
					if (item is hci.flex.controls.TextInput) {
						TextInput(item).editable = true;
					}
				}
			}
			
	        public function buildComponent(item:Object,selection:XML):VBox {
	        	var l:mx.controls.Label = null;
	        	var vb:VBox = new VBox();
        		vb.setStyle("verticalGap",1);
        		vb.id = "vb_"+item.@id;
        		vb.name = vb.id;
        		vb.percentWidth = 100;
        		l = new mx.controls.Label();
        		l.text = item.@caption;
        		l.id = "label_"+item.@id;
        		vb.addChild(l);
        		
        		var dataTemp:String = "";
        		if (selection.name() == "DictionaryEntry") {
        			dataTemp = selection.attribute(item.@id).valueOf();
        		}
        		 
        		
        		if (item.@dataType == "text") {
        			if (item.@length < 50) {
		        		var ti:TextInput = new TextInput();
		        		ti.id = item.@id;
		        		ti.name = ti.id
		        		ti.percentWidth = 100;
		        		vb.addChild(ti);
						ti.data = dataTemp;		
						ti.enabled = true;
						ti.editable = true;
        			} else {
		        		var ta:TextArea = new TextArea();
		        		ta.id = item.@id;
		        		ta.name = ta.id
		        		ta.percentWidth = 100;
		        		vb.addChild(ta);
						ta.data = dataTemp;
        			}
        		} else if (item.@dataType == "comboBox") {
					var cb:ComboBox = new ComboBox();
					cb.id = item.@id; 
					cb.name = cb.id;
					cb.setStyle("cornerRadius",2);  
					cb.dataProvider = dictionaryManager.getEntries(item.@className);
					cb.value = dataTemp;
					if (currentDictAction == "add") {
						cb.selectedIndex = 0;
					}
					cb.percentWidth = 100;
					vb.addChild(cb);
        		} else if (item.@dataType == "isActive") {
        			var isActive:ComboBoxYN = new ComboBoxYN();
        			isActive.appendBlankRow=false;
        			isActive.id = item.@id;
        			isActive.name = isActive.id;
					isActive.setStyle("cornerRadius",2);
					if (currentDictAction=="add") {
        				isActive.value = "Y";
        			} else {
        				isActive.value = dataTemp;
        			}
					vb.addChild(isActive);
        		} else if (item.@dataType == "YN") {
        			var yn:ComboBoxYN = new ComboBoxYN();
        			yn.id = item.@id;
        			yn.name = yn.id;    
					yn.setStyle("cornerRadius",2);
        			yn.value = dataTemp;
					vb.addChild(yn);
        		} else if (item.@dataType == "date") {
        			var dateComponent:DateField = new DateField();
        			var today:Date = new Date();
        			if (dataTemp == null || dataTemp == "") {
        				dataTemp = today.toDateString();
        			}
        			dateComponent.id = item.@id;
        			dateComponent.name = dateComponent.id;
					dateComponent.setStyle("cornerRadius",2);
        			dateComponent.data = dataTemp;
					vb.addChild(dateComponent);
        		}
        		return vb;
	        }
	        
	        private function saveDictionaryForm(event:Event, formData:Object):void {
	        	// dynamically process form and save it.
	        	if (formData != null) {
	        		if (saveMode == "update") {
		        		currentDictAction='save';
		        		formData["action"] = currentDictAction;
		        		formData["className"] = selectedDictClassName;
		        		clearEditor();
		        		dictionaryManager.callWithParameters(formData);
	        		}  else if (saveMode == "insert") {
	        			currentDictAction='add';
	        			lastSelectedDictionary = selectedDictionary;
		        		formData["action"] = currentDictAction;
		        		formData["className"] = selectedDictClassName;
		        		clearEditor();
		        		dictionaryManager.callWithParameters(formData);
	        		}
	        	}
	        }
	        
	        private function deleteDictionaryEntry(event:Event):void {
	        	if (treeDictionary.selectedItem == null || treeDictionary.selectedItem.name() != "DictionaryEntry") {
	        		Alert.show("Please select a dictionary item from the grid before pressing the delete button","Item not selected");
	        		return;
	        	} else {
	        		
	        		// Find the nearest neighbor of this item which is either the previous sibling
	        		// or the next sibling if a previous one doesn't exist. The nearest neighbor
	        		// (if there is one) will be selected once the item has been deleted.
	        		var selectedItemSeen:Boolean = false;
	        		var parent:XML = XML(treeDictionary.selectedItem).parent();
					nearestNeighbor = null;
	        		var isFollowingItem:Boolean = false;
	        		if (parent != null) {
	             		for each(var dictItem:Object in selectedDictionary.DictionaryEntry) {
							if(dictItem.@value == "") {
								continue; // Blank item not used
							}
	             			if(dictItem.@value == treeDictionary.selectedItem.@value) {
	             				selectedItemSeen = true;
	             			} else {
		             			if(!selectedItemSeen) {
		             				nearestNeighbor = dictItem;
		             			} else {
		             				if(nearestNeighbor == null) {
		             					isFollowingItem = true;
		             					nearestNeighbor = dictItem;
		             				}
		             				
		             			}	             				
	             			}
	             		}	        			
	        		}	
	        		selectedDictionaryEntry = null;		// Don't need selected item since it's being deleted    
 		
	        		
	        		var entryData:Object = new Object();
	        		
	        		var item:XML = new XML(treeDictionary.selectedItem);
	        		for each (var field:XML in dictionaryManager.getDictionaryMetaDataFields()) {
	        			entryData[field.@id.valueOf()] = item.attribute(field.@id);
	        		}
	        		entryData["action"] = currentDictAction;
	        		entryData["className"] = selectedDictClassName;
	        		
	        		dictionaryManager.callWithParameters(entryData);

	        	}
	        	clearEditor();
	        }
	        
	        private function collectFormData():Object {
	        	var formData:Object = new Object();
	        	
	        	// work the the dict meta data and the data in dgEditor and build an ArrayCollection to saved
	        	var value:Object = null;
	        	var vbName:String = null;
	        	var editor:Array = dgEditor.getChildren();
	        	for each (var field:XML in dictionaryManager.getDictionaryMetaDataFields()) {
	        		var vb:Object = dgEditor.getChildByName("vb_"+field.@id);
	        		var item:Object = vb.getChildByName(field.@id);
	        		if (item is hci.flex.controls.ComboBox) {
	        			if (item.selectedIndex == -1) {
	        				formData[field.@id.valueOf()] = "";
	        			} else {
	        				formData[field.@id.valueOf()] = ComboBox(item).value;
	        			}
	        		} else if (item is hci.flex.controls.ComboBoxYN) {
	        			if (item.selectedIndex == -1) {
	        				formData[field.@id.valueOf()] = "Y";
	        			} else {
	        				formData[field.@id.valueOf()] =ComboBoxYN(item).value;
	        			}
	        		}else {
	        			formData[field.@id.valueOf()] = item.text;
	        		}
	        	}
	        	
	        	return formData;
	        }
	        
	        private function enableDelete():Boolean {
	        	var enable:Boolean = false;
	        	if (treeDictionary.selectedIndex != -1 && 
	        	    treeDictionary.selectedItem != null &&
	        	    treeDictionary.selectedItem.name() == "DictionaryEntry" && 
	        	    treeDictionary.selectedItem.@canDelete == "Y") {
	        		enable = true;
	        	}
	        	return enable;
	        }
	         
	       private function onCancel():void {
	       		clearEditor();
	       		save.enabled=false;
	       }
	       
	       private function onClose():void {
	       		dictionaryManager.removeEventListener(DictionaryEvent.DICTIONARY_LOADED, onDictionaryLoaded);
				dictionaryManager.removeEventListener(DictionaryEvent.DICTIONARY_METADATA_LOADED, onDictionaryMetadataLoaded);
				dictionaryManager.removeEventListener(DictionaryEvent.DICTIONARY_ENTRY_SAVED, onDictionarySaved); 

		       	PopUpManager.removePopUp(this);
	       }
	       
	       private function onSelectDictionary():void {
	       		if (treeDictionary.selectedItem == null) {
	       			selectedDictionaryEntry = null; 
	       			add.enabled = false;
	       			del.enabled = false;
	       			return;
	       		}
	       	
	  			if (treeDictionary.selectedItem.name() == "Dictionary") {
	  				
	  				theViews.selectedIndex = 0;
	  				selectedDictionaryEntry = null;
	  				// Select this dictionary
		  			currentDictAction='metadata';
		  			refreshView='no';
	  				getMetaDataForSelectedDictionary(treeDictionary.selectedItem);  
	  				treeDictionary.expandChildrenOf(treeDictionary.selectedItem, true);
	       			del.enabled = false;	  				   	
	  			} else if (treeDictionary.selectedItem.name() == "DictionaryEntry") {
	  				theViews.selectedIndex = 1;
	  				// Keep track of dictionary entry.  This will
	  				// be re-selected after the meta data is refreshed.
	  				selectedDictionaryEntry = treeDictionary.selectedItem;
	  				selectedDictionaryIndex = treeDictionary.selectedIndex;
	  				
	  				// If this isn't the selected dictionary, select it
	  				if (selectedDictClassName != treeDictionary.selectedItem.parent().@className) {
			  			currentDictAction='metadata';
			  			refreshView='no';
	  					getMetaDataForSelectedDictionary(treeDictionary.selectedItem.parent());     			
	  				} else {
	  					// Otherwise, select load the form the selected dictionary
						del.enabled=enableDelete();
						clearEditor();
						saveMode='update';
						currentDictAction='edit';
						buildEditorWindowForDictionaryEntry(selectedDictionaryEntry);

	  				}
	  				
	  				
	  			}
	       }
	       /**
			 * This is the filter function passed to the FilteredTreeDataDescriptor.
			 * It is responsible for determining which child nodes are displayed in
			 * the tree.
			 */
			private function filterTree(node:Object):ICollectionView
			{
				return new XMLListCollection(node.DictionaryEntry.(@value != ''));
			}
			
			private function getTreeLabel(item:Object):String {
				if (item.name() == "Dictionary") {
					return item.@displayName;
				} else {
					return item.@display;
				}
			}

	       
	       
		]]>
	</mx:Script>
	
				
				<mx:HDividedBox id="mainBox"  width="100%" height="100%">				        
				        <mx:VBox height="100%" width="300" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4" borderStyle="none"  verticalGap="2">
					        	<mx:HBox width="100%" height="22">
									<mx:Label text="Dictionaries" width="100%" fontWeight="normal"/>
									<mx:Button id="add" icon="@Embed('../../../assets/add.png')" disabledIcon="@Embed(source='../../../assets/add_disable.png')" color="#008000" fontSize="10" width="23" cornerRadius="2" enabled="false" click="selectedDictionaryEntry=null;theViews.selectedIndex=1;saveMode='insert';currentDictAction='add';buildEditorWindow(event);" toolTip="Add"/>
									<mx:Button id="del"  icon="@Embed(source='../../../assets/delete.png')" disabledIcon="@Embed(source='../../../assets/delete_disable.png')" color="#ff0000" fontSize="10" width="23" cornerRadius="2" enabled="false" click="currentDictAction='delete';deleteDictionaryEntry(event);" toolTip="Delete"/>
					        	</mx:HBox>
				        	 
								<mx:Tree id="treeDictionary" width="100%" height="100%"
								    labelFunction="getTreeLabel"
								   dataDescriptor="{new hci.flex.util.FilteredTreeDataDescriptor(filterTree)}"
								    itemClick="onSelectDictionary()"
								     />
								
						        	
					    </mx:VBox>
				        <mx:VBox  height="100%" width="100%"   borderStyle="none" paddingBottom="4" paddingRight="4" paddingLeft="4" paddingTop="4">
				            <mx:Label text="{selectedDictDisplayName}" width="100%" fontWeight="normal"/>
					        <mx:ViewStack id="theViews" width="100%" height="100%" >
					        	<mx:VBox height="100%" width="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
									<mx:DataGrid id="dataGridDictionary" doubleClickEnabled="true" 
											click="{selectDictionaryEntry(dataGridDictionary.selectedItem)}" 
											height="100%" width="100%"> 
									</mx:DataGrid>
		
						        </mx:VBox>
						        
						       <mx:VBox id="dgEditor" 
								        verticalGap="8"  
								        horizontalGap="10"
								       width="100%"  height="100%"  paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4" backgroundColor="#FFFFFF">
								</mx:VBox>

									
					        </mx:ViewStack>
				        </mx:VBox>

						
				</mx:HDividedBox>
							<mx:ControlBar width="100%"  horizontalAlign="left">
									<mx:LinkButton id="reload"  label="Refresh" icon="@Embed('../../../assets/refresh.png')" disabledIcon="@Embed('../../../assets/refresh_disable.png')"  enabled="true" click="reloadDictionaries();" toolTip="Reload" fontWeight="normal" textDecoration="underline"/>
									<mx:Spacer width="100%"/>
									<mx:Text id="mode"   height="18" textAlign="right" width="100%"/>
									<mx:Button label="Save" id="save" cornerRadius="2" enabled="false" click="saveDictionaryForm(event,collectFormData())"  icon="@Embed(source='../../../assets/save.png')" disabledIcon="@Embed(source='../../../assets/save_disable.png')" toolTip="Save"/>
									<mx:Button label="Close" id="close" toolTip="Close" click="onClose()"/>
					        </mx:ControlBar>

		

</mx:TitleWindow>
