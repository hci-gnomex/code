<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="Annotations"  xmlns:mx="http://www.adobe.com/2006/mxml" 
		   xmlns:util="views.util.*" show="{this.init()}"
		   width="100%" height="100%" enabled="false">
	
	<mx:HTTPService  
		id="saveProperty" 
		url="SaveProperty.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onSaveProperty(event)"
		fault="parentApplication.onFailHttpRequest('Failed to save annotation', event)"
		method="POST" 
		useProxy="false">
	</mx:HTTPService>

	<mx:states>
		<mx:State name="EditState">
		</mx:State>
		<mx:State name="ExternalState">
			<mx:SetProperty target="{text1}" name="label" value="Check the sample annotations that apply"/>
		</mx:State>
	</mx:states>
	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			import hci.flex.controls.TextInput;
			import hci.flex.dictionary.DictionaryEditor;
			import hci.flex.dictionary.DictionaryEvent;
			
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.controls.dataGridClasses.DataGridItemRenderer;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			import views.admin.PropertyEvent;
			import views.admin.PropertyWindow;
			import views.renderers.CheckBoxRenderer;
			import views.renderers.ComboBox;
			import views.renderers.MultiselectRenderer;
			import views.renderers.URLRenderer;
			import views.util.AnnotationAdvancedDataGridColumn;
			import views.util.AnnotationDataGridColumn;
			
			private var dictionaryEditor:DictionaryEditor; 
			
			public var ignoreToggle:Boolean = false;
			
			private var addingAnnotation:Boolean = false;
			
			private function init():void {
				if (parentDocument != null) {
					parentDocument.propertyEntries.refresh();
				}
			}
			
			public function checkSecurity():void {
				if (parentDocument == null) {
					return;
				}
				if (parentDocument.isEditState() && parentDocument.request.@isExternal == 'Y') {
					currentState = "ExternalState";
				} else if (parentDocument.isEditState()  && parentDocument.request.@isExternal != 'Y') {
					currentState = "EditState";
				} else if (parentApplication.submitInternalExperiment()) {
					currentState = "";
				} else {
					currentState = "ExternalState";
				}
				
			}
				
			public function selectAnnotation(dataField:String):void {
				if (dataField.substr(0, 6) == '@ANNOT') {
					var idProperty:String = dataField.substr(6);
					if (parentDocument != null) {
						for each(var node:XML in parentDocument.propertyEntries) {
							if (node.@idProperty == idProperty) {
								node.@isSelected = true;
							}
						}
					}
				}
			}
			
			
			private function toggleSampleAnnotationCheck(event:ListEvent):void {
				if (event.columnIndex == 0) {
					parentDocument.dirty.setDirty();
					return;
				}
				parentDocument.dirty.setDirty();
				
				
				// We don't want the typing in the the text field for "Other" to be treated
				// as a toggle off
				var sc:Object = parentApplication.getSampleProperty(sampleAnnotationGrid.selectedItem.@idProperty);
				if (sc == null || sc.@name.toString() == "Other") {
					if (ignoreToggle) {
						return;					
					}
				}
				
				if (sampleAnnotationGrid.selectedItem.@isRequired == "true") {
					// Don't toggle a required field.
					return;		
				}

				if (sampleAnnotationGrid.selectedItem.@isSelected == "true") {
					sampleAnnotationGrid.selectedItem.@isSelected = "false";
				} else {
					sampleAnnotationGrid.selectedItem.@isSelected = "true";
				}
			}
			
			//
			// Configure properties
			//
			private function editPropertyDictionary():void {
				var configWindow:PropertyWindow = PropertyWindow(PopUpManager.createPopUp(parentApplication.theBody, PropertyWindow, true));
				configWindow.showSampleAnnotations.selected = true;
				configWindow.showAnalysisAnnotations.selected = false;
				configWindow.showDataTrackAnnotations.selected = false;
				configWindow.onPropertyRefreshed(null);
				configWindow.idCoreFacilitySelected = parentDocument.coreFacility.@idCoreFacility;
				PopUpManager.centerPopUp(configWindow);

				
				parentApplication.removeEventListener(PropertyEvent.DATA_REFRESHED,
					onPropertyRefreshed);		                                  
				parentApplication.addEventListener(PropertyEvent.DATA_REFRESHED,   
					onPropertyRefreshed);
				
				
			}
			
			
			public function onPropertyRefreshed(event:Event):void{

				if (parentDocument == null || parentDocument.request == null) {
					parentApplication.removeEventListener(PropertyEvent.DATA_REFRESHED,
						onPropertyRefreshed);
					return;
				}
				parentDocument.propertyEntries.refresh();
				
				this.checkForRemovedAnnotations();   
				this.checkForNewAnnotations(addingAnnotation);
				
				if (addingAnnotation) {
					addingAnnotation = false;
					this.enabled = true;
				}				  		
			}	
			
			
			private function checkForNewAnnotations(doSelect:Boolean):void {
				var sc:XML;
				var annotation:Object;
				var exists:Boolean = false;
				var selectedName:String = "";
				for each(sc in parentApplication.propertyList) {
					exists = false; 
					
					for each(annotation in parentDocument.request.PropertyEntries.PropertyEntry) {
						if (sc.@value == annotation.@idProperty) {
							exists = true;
							if (sc.@name != annotation.@name) {
								annotation.@name = sc.@name;
							}
							break;
						}      				
					}
					if (!exists && sc.@forSample == 'Y') {
						
						var node:XML = new XML("<PropertyEntry/>");
						node.@idProperty = sc.@value;
						node.@name = sc.@display; 
						node.@otherLabel = "";
						if (doSelect) {
							node.@isSelected = "true";
							selectedName = sc.@display;
						} else {
							node.@isSelected = "false";
						}
						
						parentDocument.propertyEntries.addItem(node);
						
					}
				}
				parentDocument.propertyEntries.refresh();
				if (selectedName.length > 0) {
					selectAndScrollToName(selectedName);
				}
			}
			
			
			private function checkForRemovedAnnotations():void {
				var annotation:Object;
				var exists:Boolean = false;
				for each(annotation in parentDocument.propertyEntries) {
					exists = false;
					for each(var sc:XML in parentApplication.propertyList) {
						if (sc.@value == annotation.@idProperty || annotation.@idProperty == "-1") {
							exists = true;
							break;
						}      				 
					}
					if (!exists) {
						// Remove the sample characteristic entry
						parentDocument.propertyEntries.removeItemAt(parentDocument.propertyEntries.getItemIndex(annotation));
					}
				}
				
				// Hide the existing annotation columns that don't have a corresponding sample characteristic entry
				for each(var property:Object in parentApplication.propertyList) {
					exists = false;
					for each(var sce:XML in parentDocument.propertyEntries) {
						if (sce.@value == property.@idProperty) {
							exists = true;
							break;
						}      				 
					}
					
				}
				
			}
			
			public function changeOtherHeaderLabelAndToggle(data:Object):void {
				if (data.@otherLabel == '' ) {
					data.@isSelected = false;	
				} else {
					data.@isSelected = true;
				}		
				changeOtherHeaderLabel(data);
				
			}
			
			public function changeOtherHeaderLabel(data:Object):void {
				
				parentDocument.request.@otherLabel = data.@otherLabel;
				
			}
			
			public function createToolTip(event:ListEvent):void{
				createAnnotationList();
				var description:String = "";
				for each (var temp:XML in properties){
					if(temp.@name == sampleAnnotationGrid.dataProvider[event.rowIndex].@name){
						description = temp.@description;
						break;
					}
				}
				sampleAnnotationGrid.toolTip = description;
	
			}
			private function createAnnotationList():void {
				properties = new XMLListCollection();
				for each(var sc:XML in parentApplication.propertyList) {
					properties.addItem(sc.copy());
				}
			}
			
			public function deleteToolTip(obj:Object):void{
				sampleAnnotationGrid.toolTip = null;
			}
			
			private function addNewAnnotation():void {
				if (newAnnotationName.text == null || newAnnotationName.text.length == 0 || newAnnotationName.text == PropertyWindow.NAME_FIELD_DEFAULT) {
					Alert.show('Please enter name of new annotation in the text box before pressing Add Annotation');
					return;
				}
				
				for each(var sc:Object in parentApplication.propertyList) {
					if (sc.@idCoreFacility == parentDocument.coreFacility.@idCoreFacility) {
						var thisPropName:String = StringUtil.trim(sc.@name);
						thisPropName = thisPropName.toLowerCase();
						if(newAnnotationName.text.toLowerCase() == thisPropName) {
							Alert.show('"' + newAnnotationName.text + '" has been used as the name for a previously defined annotation. Please choose another name.');
							return;
						}
					}
				}
				
				var found:Boolean = selectAndScrollToName(newAnnotationName.text);
				
				if (!found) {
					this.enabled = false;
					addingAnnotation = true;
					var params:Object = new Object();
					params.idProperty = '';
					params.name = newAnnotationName.text;
					params.isActive = 'Y';
					params.isRequired = 'N';
					params.forAnalysis = "N";
					params.forDataTrack = "N";
					params.forRequest = "N";
					params.forSample = "Y";
					params.idCoreFacility = parentDocument.coreFacility.@idCoreFacility;
					if (parentApplication.hasPermission("canWriteDictionaries")) {
						params.idAppUser = '';			
					} else {
						params.idAppUser = parentApplication.getIdAppUser();
					}
					params.codePropertyType = 'TEXT';
					params.optionsXMLString = "<options>"  + "</options>";
					params.organismsXMLString = "<organisms>"  + "</organisms>";
					params.platformsXMLString = "<platformApplications>"  + "</platformApplications>";
					params.analysisTypesXMLString = "<analysisTypes>" + "</analysisTypes>";
					
					saveProperty.send(params);
				}
				
				newAnnotationName.text = PropertyWindow.NAME_FIELD_DEFAULT;
			}
			
			private function onSaveProperty(event:ResultEvent): void {
				if (saveProperty.lastResult.name() == "SUCCESS") {
					parentApplication.removeEventListener(PropertyEvent.DATA_REFRESHED,
						onPropertyRefreshed);		                                  
					parentApplication.addEventListener(PropertyEvent.DATA_REFRESHED,   
						onPropertyRefreshed);
					parentApplication.dictionaryManager.call("reload", "");
					parentApplication.getPropertyList.send();
				} else {
					this.enabled = true;
					addingAnnotation = false;
					Alert.show(saveProperty.lastResult..ACTMESSAGE.@TEXT);
				}
			}	
			
			private function selectAndScrollToName(name:String):Boolean {
				var found:Boolean = false;
				var idx:int = 0;
				for each (var a:Object in parentDocument.propertyEntries) {
					if (a.@name.toString().toLowerCase() == name.toLocaleLowerCase()) {
						found = true;
						a.@isSelected = 'true';
						sampleAnnotationGrid.scrollToIndex(idx);
						break;
					}
					idx++;
				}
				
				return found;
			}
		]]>
	</mx:Script>
	
	<mx:XMLListCollection id="properties"/>
	
	<mx:VBox width="100%" height="100%">
		<mx:HBox width="100%" height="100%" horizontalGap="0">
			<mx:VBox height="100%" verticalGap="1">
				<mx:HBox>
					<util:ContextHelp context1="annotationTabHelp" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Annotation Help"
									  label="(1) Check sample characteristics" labelPlacement="left" id="text1" width="300"/>
				</mx:HBox>
				<mx:HBox width="100%" height="100%">
					<mx:VBox width="100%" height="100%" verticalGap="0">
						<mx:DataGrid id="sampleAnnotationGrid" height="100%"
									 dataProvider="{parentDocument.propertyEntries}" 
									 showHeaders="false" headerHeight="20" variableRowHeight="true" width="100%" itemClick="toggleSampleAnnotationCheck(event)" rowHeight="20" itemRollOver="createToolTip(event)" itemRollOut="deleteToolTip(event)" >
							<mx:columns>
								<mx:DataGridColumn headerText=" " 
												   width="20" 
												   editable="true"                        	
												   dataField="@isSelected" 
												   editorDataField="selected"
												   itemRenderer="views.renderers.CheckBoxIsSelectedProperty">
								</mx:DataGridColumn>
								<mx:DataGridColumn  
									headerText="Sample annotations"
									editable="false" editorDataField="selected" 
									dataField="@name" >
									<mx:itemRenderer>
										<mx:Component >
											<mx:HBox horizontalScrollPolicy="off">
												<mx:Label text="{data.@name}" fontWeight="{data.hasOwnProperty('@isRequired') &amp;&amp; data.@isRequired == 'true' ? 'bold' : 'normal'}">			                           	
												</mx:Label>
												<mx:TextInput id="scOtherLabel" fontSize="9"
															  text="{data.@otherLabel}"
															  focusIn="{parentDocument.ignoreToggle = true}"
															  focusOut="{parentDocument.ignoreToggle = false}"
															  change="{parentDocument.ignoreToggle = true;data.@otherLabel = scOtherLabel.text;parentDocument.changeOtherHeaderLabelAndToggle(data)}" 
															  width="{data.@name == 'Other' ? 130 : 0}"  
															  height="{data.@name == 'Other' ? 20 : 0}"  
															  visible="{data.@name == 'Other' ? true : false}" 
															  editable="{data.@name == 'Other' ? true : false}">			                           
												</mx:TextInput>
												
											</mx:HBox>
										</mx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
							</mx:columns>
						</mx:DataGrid>
					</mx:VBox>
				</mx:HBox>
			</mx:VBox>
		</mx:HBox>
		
		<mx:HBox width="100%">
			<mx:TextInput id="newAnnotationName" text="{PropertyWindow.NAME_FIELD_DEFAULT}" width="250"
					 focusIn="{newAnnotationName.text == PropertyWindow.NAME_FIELD_DEFAULT ? newAnnotationName.text = '' : newAnnotationName.text = newAnnotationName.text}"
					 focusOut="{newAnnotationName.text == '' ? newAnnotationName.text = PropertyWindow.NAME_FIELD_DEFAULT : newAnnotationName.text = newAnnotationName.text}"/>
			<mx:Button id="newAnnotationNameButton" click="addNewAnnotation()" label="Add Annotation"/>
			<util:ContextHelp context1="annotationTabAddHelp" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Add Annotation Help"
							  label="" labelPlacement="left" id="annotationTabAddHelp"/>
			<mx:Spacer width="40"/>
			<mx:LinkButton label="Edit annotations ..." textDecoration="underline" styleName="blueLinkButton" click="editPropertyDictionary()" id="editSampleAnnotationButton">		  	
			</mx:LinkButton>						
		</mx:HBox>
		
	</mx:VBox>
	
</mx:Canvas>
