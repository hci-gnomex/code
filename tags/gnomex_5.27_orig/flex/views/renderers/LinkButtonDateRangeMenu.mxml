<?xml version="1.0" encoding="utf-8"?>
<mx:LinkButton xmlns:mx="http://www.adobe.com/2006/mxml" initialize="init()"
	label="{this.fromDate == null || this.toDate == null ? 'Filter by date' : dateFormatter.format(this.fromDate) + ' - ' + dateFormatter.format(this.toDate)}" 
	click="clickLink(event)" textDecoration="underline" textAlign="center" >
	<mx:Metadata>
		[Event(type="views.util.DateSetEvent", name="dateSet")]
	</mx:Metadata>
    <mx:Script> 
    <![CDATA[   
		import mx.collections.*;
		import mx.controls.Button;
		import mx.controls.Menu;
		import mx.events.CloseEvent;
		import mx.events.MenuEvent;
		import mx.managers.PopUpManager;
		import mx.utils.ObjectUtil;
		
		import views.util.DateSetEvent;
		import views.util.PickDateRangeView;
              
		[Bindable]
		private var pickDateRangeWindow:PickDateRangeView = new PickDateRangeView();
        
		private var _fromDate:Date;
		private var _toDate:Date;
		
		private var _previousFromDate:Date;
		private var _previousToDate:Date;
		
		public var today:Date = new Date();
				
		[Bindable]
		public var menubarXML:XML = <menubar>
										<menuitem label="last week" data="7"/>
										<menuitem label="last 30 days" data="30"/>
										<menuitem label="last 90 days" data="90"/>
										<menuitem label="last year" data="365"/>
										<menuitem label="from year..."/>
										<menuitem label="" type="separator"/>  
										<menuitem label="custom dates"/>
										<menuitem label="clear filter"/>	
									</menubar>;
		
		private function init():void{
			// Add past years to menu	
			var year:Number = today.fullYear;
			while ( year > 2008 ) {
				var yearXML:XML = menubarXML.menuitem.(@label == "from year...")[0];
				yearXML.appendChild( new XML("<menuitem label='"+ year +"' data='year' />") );
				year--;
			}  
			pickDateRangeWindow.dateRangeMenu = this;
		}
		
		// Create the date range menu
		private function clickLink(event:MouseEvent):void{ 
			
			var dateRangeMenu:Menu = Menu.createMenu(this,menubarXML,false);
			dateRangeMenu.addEventListener(MenuEvent.ITEM_CLICK, onMenuClick);
			dateRangeMenu.labelField = "@label";
			
			var globalPoint:Point = this.contentToGlobal(new Point(this.x, this.y));
			dateRangeMenu.show(globalPoint.x+15, globalPoint.y+25);
			
		} 
		
		// Menu actions
		private function onMenuClick(event:MenuEvent):void {
			
			var item:XML = event.item as XML;
			if (item.@label == 'custom dates') {
				pickCustomRange();
			} else if (item.@label == 'clear filter') {
				resetRange();
				determineIfDateChanged();
			} else if ( item.@data != null ) {
				if ( item.@data == 'year' ) {
					this.setYearRange( Number(item.@label) );
				} else {
					this.setRange( Number(item.@data) );
				}
				determineIfDateChanged();
			} 
		}
		
		private function setYearRange(year:int):void
		{
			updateToDate(new Date(year, 11, 31));
			updateFromDate(new Date(year, 0, 1));
		}
		
		private function setRange(interval:int):void
		{
			updateToDate(today);
			updateFromDate(new Date(today.fullYear, today.month, today.date - interval));
		}
		
		public function resetRange():void {
			updateFromDate(null);
			updateToDate(null);
		}
		
		// Pick a custom date range
		private function pickCustomRange():void 
		{
			PopUpManager.addPopUp(pickDateRangeWindow, this, false);
			PopUpManager.centerPopUp(pickDateRangeWindow);
		}
		
		public function selectRangeNonMenu(dayInterval:Number, fireEvent:Boolean):void {
			setRange(dayInterval);
			if (fireEvent) {
				determineIfDateChanged();
			}
		}
		
		// Update current and previous from date
		public function updateFromDate(value:Date):void {
			previousFromDate = fromDate;
			fromDate = value;
		}
		
		// Update current and previous to date
		public function updateToDate(value:Date):void {
			previousToDate = toDate;
			toDate = value;
		}
		
		// Determine if date changed and if so, dispatch a date set event
		public function determineIfDateChanged():void {
			if ((previousFromDate == null && fromDate != null) ||
				(previousToDate == null && toDate != null) ||
				(previousFromDate != null && fromDate == null) ||
				(previousToDate != null && toDate == null) ||
				(previousFromDate != null && fromDate != null && ObjectUtil.dateCompare(previousFromDate, fromDate) != 0) ||
				(previousToDate != null && toDate != null && ObjectUtil.dateCompare(previousToDate, toDate) != 0)) {
				
				dispatchEvent(new DateSetEvent(DateSetEvent.DATE_SET));
			}
		}
		
		// Getters and Setters for from and to dates
		[Bindable]
		public function get fromDate():Date
		{
			return _fromDate;
		}
		public function set fromDate(value:Date):void
		{
			_fromDate = value;
		}
		
		[Bindable]
		public function get toDate():Date
		{
			return _toDate;
		}
		public function set toDate(value:Date):void
		{
			_toDate = value;
		}
		
		// Getters and Setters for previous from and to dates
		[Bindable]
		public function get previousFromDate():Date
		{
			return _previousFromDate;
		}
		public function set previousFromDate(value:Date):void
		{
			_previousFromDate = value;
		}
		
		[Bindable]
		public function get previousToDate():Date
		{
			return _previousToDate;
		}
		public function set previousToDate(value:Date):void
		{
			_previousToDate = value;
		}		
		
	]]> 
	</mx:Script> 
	
	<mx:DateFormatter id="dateFormatter" formatString="MM/DD/YYYY"/>
	
	
</mx:LinkButton> 
