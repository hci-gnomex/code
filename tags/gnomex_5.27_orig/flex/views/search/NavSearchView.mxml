<?xml version="1.0" encoding="utf-8"?> 
<util:ResizableTitleWindow   
	xmlns:mx="http://www.adobe.com/2006/mxml"   
	xmlns:views="views.*"  
	xmlns:util="views.util.*"  
	xmlns:search="views.search.*" 
	showCloseButton="true"
	close="{PopUpManager.removePopUp(this)}"
	title="Advanced Search"  defaultButton="{searchButton}"
	creationPolicy="all" show="init()" 
	width="850" height="460" icon="@Embed('../../assets/magnifier.png')">

    <mx:HTTPService 
    id="getSlideProductList" 
    url="GetSlideProductList.gx"
    showBusyCursor="true"
    resultFormat="e4x"
    result="onGetSlideProductList(event)"
	fault="parentApplication.onFailHttpRequest('Failed to slide product list', event)"
    destination="getSlideProductList"
    useProxy="false">
    <mx:request>
    </mx:request>
    </mx:HTTPService >
    

    
	<mx:Script>
    <![CDATA[ 
		import hci.flex.controls.DropdownLabel;
		
		import mx.collections.ArrayCollection;
		import mx.containers.ViewStack;
		import mx.controls.Alert;
		import mx.events.ItemClickEvent;
		import mx.managers.CursorManager;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		
		[Embed(source='../../assets/application_side_contract.png')]
		private const shrinkIcon:Class;
		[Embed(source='../../assets/application_side_expand.png')]
		private const restoreIcon:Class;
		
		[Bindable]
		private var searchResultsLinkBarProvider:ArrayCollection;  
		
		[Bindable]
		private var searchResultsTreeLinkBarProvider:ArrayCollection;  
		
		[Bindable]
		private var globalHitLabel:String = "All Results";
    	[Bindable] 
    	private var experimentHitLabel:String = "Experiments";
    	[Bindable] 
    	private var analysisHitLabel:String = "Analysis";
    	[Bindable] 
    	private var protocolHitLabel:String = "Protocols";
		[Bindable] 
		private var dataTrackHitLabel:String = "Data Tracks";
		[Bindable] 
		private var topicHitLabel:String = "Topics";
        
        [Bindable]
        public var simpleSearchText:String = null;
        
        [Bindable] 
		public var filteredSlideProductList:XMLListCollection;
		
		public var isInitialized:Boolean = false;

        
		public function checkDirty():void {
		}
		
		public function init():void {
			this.searchView.scopeSearch();
			this.searchView.checkSecurity();
			
			setResultsLinkBars("Global");
			
			if (!isInitialized) {
				this.getSlideProductList.send();
			} else {
				if (simpleSearchText != null) {
					performSimpleSearch(simpleSearchText);
				}
			}
		}

		public function setResultsLinkBars(scope:String):void {
			
			// Build linkbar data providers containing items user allowed to see
			searchResultsLinkBarProvider = new ArrayCollection();
			searchResultsTreeLinkBarProvider = new ArrayCollection();
			
			if (scope == "Global") {
				searchResultsLinkBarProvider.addItem(globalHitLabel);
			}
			
			if (scope == "Global" || scope == "ExperimentOnly") {
				searchResultsLinkBarProvider.addItem(experimentHitLabel);
				searchResultsTreeLinkBarProvider.addItem(experimentHitLabel);
			}
				
			if (parentApplication.showBioinformaticsLinks && (scope == "Global" || scope == "AnalysisOnly")) {
				searchResultsLinkBarProvider.addItem(analysisHitLabel);
				searchResultsTreeLinkBarProvider.addItem(analysisHitLabel);				
			}
			
			if (scope == "Global" || scope == "ProtocolOnly") {
				searchResultsLinkBarProvider.addItem(protocolHitLabel);
				searchResultsTreeLinkBarProvider.addItem(protocolHitLabel);				
			}
			
			if (parentApplication.showBioinformaticsLinks && (scope == "Global" || scope == "DatatrackOnly")) {
				searchResultsLinkBarProvider.addItem(dataTrackHitLabel);
				searchResultsTreeLinkBarProvider.addItem(dataTrackHitLabel);				
			}
			
			if (parentApplication.isTopicsSupported && parentApplication.showBioinformaticsLinks && (scope == "Global" || scope == "TopicOnly")) {
				searchResultsLinkBarProvider.addItem(topicHitLabel);
				searchResultsTreeLinkBarProvider.addItem(topicHitLabel);				
			}
			
			searchResultsLinkBar.dataProvider = searchResultsLinkBarProvider;
			searchResultsTreeLinkBar.dataProvider = searchResultsTreeLinkBarProvider;
		}
		
		// Perform initialization after slide product list is returned
		private function initImpl():void {
            if (!isInitialized) {
				this.searchView.initializeData();
			}
			if (simpleSearchText != null) {
				performSimpleSearch(simpleSearchText);
			}
			this.searchView.scopeSearch();
		}
		
        private function onGetSlideProductList(event:ResultEvent):void {
        	var emptyNode:XML = <SlideProduct idSlideProduct='' name='' label=''/>;
        	
        	filteredSlideProductList = new XMLListCollection(getSlideProductList.lastResult.SlideProduct);
        	filteredSlideProductList.addItemAt(emptyNode, 0);
            
            // Delay initialization until after slide product list is returned.
			initImpl();
        }		
		
		public function performSimpleSearch(searchText:String): void {
			var params:Object = new Object();
			params.text1 = searchText;
			this.searchView.text1.text = searchText;
			this.searchView.buildSearchCriteriaDisplay();
        	this.searchView.searchGNomEx.send(params);
        }

		        
        private function getGridRowNumber(item:Object,col:int):String
        {
           var x:int = searchList.getItemIndex(item) + 1;
           return String(x);
        }
        
        public function setResultsCount():void {
			
			var globalOffset:int = 0; 
			for(var i:int=0; i < searchResultsLinkBarProvider.length; i++) {
				var currentString:String = String(searchResultsLinkBarProvider.getItemAt(i));
				var newString:String = "";
				if(currentString.indexOf(globalHitLabel) != -1) {
					newString = globalHitLabel + " (" + searchGlobalList.length + " hits)";
					searchResultsLinkBarProvider.setItemAt(newString, i);
					globalOffset = -1; // Global doesn't appear in tree view, so if it's included need to offset tree view.
				}
				if(currentString.indexOf(experimentHitLabel) != -1) {
					newString = experimentHitLabel + " (" + searchList.length + " hits)";
					searchResultsLinkBarProvider.setItemAt(newString, i);
					searchResultsTreeLinkBarProvider.setItemAt(newString, i+globalOffset);
				}
				if(currentString.indexOf(analysisHitLabel) != -1) {
					newString = analysisHitLabel + " (" + searchAnalysisList.length + " hits)";
					searchResultsLinkBarProvider.setItemAt(newString, i);
					searchResultsTreeLinkBarProvider.setItemAt(newString, i+globalOffset);
				}
				if(currentString.indexOf(protocolHitLabel) != -1) {
					newString = protocolHitLabel + " (" + searchProtocolList.length + " hits)";
					searchResultsLinkBarProvider.setItemAt(newString, i);
					searchResultsTreeLinkBarProvider.setItemAt(newString, i+globalOffset);
				}
				if(currentString.indexOf(dataTrackHitLabel) != -1) {
					newString = dataTrackHitLabel + " (" + searchDataTrackList.length + " hits)";
					searchResultsLinkBarProvider.setItemAt(newString, i);
					searchResultsTreeLinkBarProvider.setItemAt(newString, i+globalOffset);
				}
				if(currentString.indexOf(topicHitLabel) != -1) {
					newString = topicHitLabel + " (" + searchTopicList.length + " hits)";
					searchResultsLinkBarProvider.setItemAt(newString, i);
					searchResultsTreeLinkBarProvider.setItemAt(newString, i+globalOffset);
				}
			}

        	this.searchResultsView.enabled = true;

        }
        
        private function onExperimentRowSelected():void  {
			if (resultsGrid.selectedItem.hasOwnProperty("@requestNumber") && resultsGrid.selectedItem.@requestNumber != null && resultsGrid.selectedItem.@requestNumber != '') {
	        	parentApplication.showExperiment(resultsGrid.selectedItem.@requestNumber, false);
			} else {
				parentApplication.showProjectFolder(resultsGrid.selectedItem.@idProject, resultsGrid.selectedItem.@idLab);
			}
			shrinkWindow();
        }
		
		private function restoreWindow():void {
			this.windowRestore.play();	
		}
		
		private function shrinkWindow():void {
			this.windowShrink.play();
		}
		
        private function onExperimentNodeSelected():void  {
        	if (resultsTree.selectedItem.name() == "RequestNode") {
	        	parentApplication.showExperiment(resultsTree.selectedItem.@requestNumber, false);    		
				shrinkWindow();
        	}
        }
        
        private function onAnalysisRowSelected():void  {
        	parentApplication.showAnalysis(this.resultAnalysisGrid.selectedItem.@idAnalysis,
        								   this.resultAnalysisGrid.selectedItem.@number, 
        								   this.resultAnalysisGrid.selectedItem.@idLab);
			shrinkWindow();
        }
        
                
        private function onAnalysisNodeSelected():void  {
        	if (resultsAnalysisTree.selectedItem.name() == "AnalysisNode") {
	        	parentApplication.showAnalysis(this.resultsAnalysisTree.selectedItem.@idAnalysis, 
	        	                               this.resultsAnalysisTree.selectedItem.@number,
	        	                               this.resultsAnalysisTree.selectedItem.@idLab);    		
				shrinkWindow();
        	}
        }
		
		private function onDataTrackRowSelected():void  {
			parentApplication.showDataTrackForNumber(this.resultDataTrackGrid.selectedItem.@fileName);
			shrinkWindow();
		}
		
		private function onTopicRowSelected():void  {
			parentApplication.showTopicForNumber(this.resultTopicGrid.selectedItem.@idTopic);
			shrinkWindow();
		}
		
		
		private function onDataTrackNodeSelected():void  {
			if (resultsDataTrackTree.selectedItem.name() == "DataTrack") {
				parentApplication.showDataTrackForNumber(this.resultsDataTrackTree.selectedItem.@number);
				shrinkWindow();
			}
		}
		
		private function onTopicNodeSelected():void  {
			if (resultsTopicTree.selectedItem.name() == "LabTopic") {
				parentApplication.showTopicForNumber(this.resultsTopicTree.selectedItem.@idTopic);
				shrinkWindow();
			}
		}
		
		
        private function onProtocolRowSelected():void  {
        	parentApplication.showProtocol(resultsProtocolGrid.selectedItem.@idProtocol, 
        	                               this.resultsProtocolGrid.selectedItem.@className);
			shrinkWindow();
        }
        
                
        private function onProtocolNodeSelected():void  {
        	if (resultsProtocolTree.selectedItem.name() == "Protocol") {
	        	parentApplication.showProtocol(resultsProtocolTree.selectedItem.@idProtocol, 
	        	                               resultsProtocolTree.selectedItem.@className);    		
				shrinkWindow();
        	}
        }
		
		private function onGlobalRowSelected():void  {
			if (resultsGlobalGrid.selectedItem != null) {
				if (resultsGlobalGrid.selectedItem.@objectType == "globalObjectTypeProjectFolder") {
					parentApplication.showProjectFolder(resultsGlobalGrid.selectedItem.@idProject, resultsGlobalGrid.selectedItem.@idLab);
				} else if (resultsGlobalGrid.selectedItem.@objectType == "globalObjectTypeProtocol") {
					parentApplication.showProtocol(resultsGlobalGrid.selectedItem.@id, 
						resultsGlobalGrid.selectedItem.@className);    		
				} else if (resultsGlobalGrid.selectedItem.@objectType == "globalObjectTypeAnalysis") {
					parentApplication.showAnalysis(this.resultsGlobalGrid.selectedItem.@id, 
						this.resultsGlobalGrid.selectedItem.@number,
						this.resultsGlobalGrid.selectedItem.@idLab);    		
				} else if (resultsGlobalGrid.selectedItem.@objectType == "globalObjectTypeDataTrack") {
					parentApplication.showDataTrackForNumber(this.resultsGlobalGrid.selectedItem.@number);
				} else if (resultsGlobalGrid.selectedItem.@objectType == "globalObjectTypeTopic") {
					parentApplication.showTopicForNumber(this.resultsGlobalGrid.selectedItem.@id);
				} else {
					// must be request.
					parentApplication.showExperiment(resultsGlobalGrid.selectedItem.@number, false);    		
				}
				shrinkWindow();
			}
		}
        
	    public function expandAllNodes():void
  		{   
  			resultsTree.openItems = searchView.searchGNomEx.lastResult..Project;  			
  			for each(var p:Object in searchView.searchGNomEx.lastResult.ProjectRequestList) {
  				resultsTree.expandItem(p, true);
  			}
			for each(var lab:Object in searchView.searchGNomEx.lastResult..Lab) {
  				resultsTree.expandItem(lab, true);
  			}	 
  			resultsProtocolTree.openItems = searchView.searchGNomEx.lastResult.ProtocolList;

  			this.resultsAnalysisTree.openItems = searchView.searchGNomEx.lastResult..AnalysisGroup;
  			for each(var ag:Object in searchView.searchGNomEx.lastResult.AnalysisGroupList) {
  				resultsAnalysisTree.expandItem(ag, true);
  			}
			for each(var l:Object in searchView.searchGNomEx.lastResult..Lab) {
  				resultsAnalysisTree.expandItem(l, true);
  			}	 

			this.resultsDataTrackTree.openItems = searchView.searchGNomEx.lastResult..DataTrackFolder;
			for each(var dtf:Object in searchView.searchGNomEx.lastResult.DataTrackFolderList) {
				resultsDataTrackTree.expandItem(dtf, true);
			}
			for each(var dtLab:Object in searchView.searchGNomEx.lastResult..Lab) {
				resultsDataTrackTree.expandItem(dtLab, true);
			}	 

		}
  		

  		
  		private function collapseAllNodes():void {
  			resultsTree.openItems = [];
			resultsAnalysisTree.openItems = [];
  			resultsProtocolTree.openItems = [];
			resultsDataTrackTree.openItems = [];

 		}

	  	public function getTreeLabel(item:Object):String {
	  		if (item.name() == "ProjectRequestList") {
	  			return "Experiment hits";
	  		} else if (item.name() == "ProtocolList") {
	  			return "Protocol hits";
	  		} else if (item.name() == "AnalysisGroupList") {
	  			return "Analysis hits";
			} else if (item.name() == "DataTrackFolderList") {
				return "Data Track hits";
			} else if (item.name() == "LabTopicList") {
				return "Topic hits";
	  		}else {
	  			return item.@label;
	  		}
	  	}
	  	
	  	public function getOwnerName(item:Object,col:DataGridColumn):String {
	  		return item.@ownerFirstName + " " + item.@ownerLastName;
	  	}
		
		private function toggleResultTreeView():void {
			if (showTree.selected) {
				this.searchResultsViewStack.selectedChild = this.searchResultsTreeView;
				buttonStack.selectedChild = resultButtonView;

				if (searchList.length > 0) { 
					this.resultsTreeViewStack.selectedIndex = 0;
				} else if (parentApplication.showBioinformaticsLinks && this.searchAnalysisList.length > 0) {
					this.resultsTreeViewStack.selectedIndex = 1;
				} else if (this.searchProtocolList.length > 0) {
					this.resultsTreeViewStack.selectedIndex = 2;
				} else if (parentApplication.showBioinformaticsLinks && this.searchDataTrackList.length > 0) {
					this.resultsTreeViewStack.selectedIndex = 3;
				} else if (parentApplication.showBioinformaticsLinks && parentApplication.isTopicsSupported && this.searchTopicList.length > 0) {
					this.resultsTreeViewStack.selectedIndex = 4;
				} else {
					this.resultsTreeViewStack.selectedIndex = getIndexFromLabel(this.searchResultsTreeLinkBarProvider[0], true);
				} 
			} else {
				this.searchResultsViewStack.selectedChild = this.searchResultsGridView;
				buttonStack.selectedChild = resultButtonView;
				
				if (searchGlobalList.length > 0) {
					resultsViewStack.selectedIndex = 0;
				} else if (searchList.length > 0) { 
					resultsViewStack.selectedIndex = 1;	
				} else if (parentApplication.showBioinformaticsLinks && this.searchAnalysisList.length > 0) {
					resultsViewStack.selectedIndex = 2;
				} else if (this.searchProtocolList.length > 0) {
					resultsViewStack.selectedIndex = 3;
				} else if (parentApplication.showBioinformaticsLinks && this.searchDataTrackList.length > 0) {
					this.resultsViewStack.selectedIndex = 4;
				} else if (parentApplication.showBioinformaticsLinks && parentApplication.isTopicsSupported && this.searchTopicList.length > 0) {
					this.resultsViewStack.selectedIndex = 5;
				} else {
					resultsViewStack.selectedIndex = getIndexFromLabel(this.searchResultsLinkBarProvider[0], false);
				}		
			}
		}
		
		private function setSelectedLinkBarLabel():void {
			if (searchList.length > 0) { 
				selectCorrespondingLinkBarLabel(searchResultsLinkBar, experimentHitLabel);
				selectCorrespondingLinkBarLabel(searchResultsTreeLinkBar, experimentHitLabel);
			} else if (parentApplication.showBioinformaticsLinks && this.searchAnalysisList.length > 0) {
				selectCorrespondingLinkBarLabel(searchResultsLinkBar, analysisHitLabel);
				selectCorrespondingLinkBarLabel(searchResultsTreeLinkBar, analysisHitLabel);
			} else if (this.searchProtocolList.length > 0) {
				selectCorrespondingLinkBarLabel(searchResultsLinkBar, protocolHitLabel);
				selectCorrespondingLinkBarLabel(searchResultsTreeLinkBar, protocolHitLabel);
			} else if (parentApplication.showBioinformaticsLinks && this.searchDataTrackList.length > 0) {
				selectCorrespondingLinkBarLabel(searchResultsLinkBar, dataTrackHitLabel);
				selectCorrespondingLinkBarLabel(searchResultsTreeLinkBar, dataTrackHitLabel);
			} else if (parentApplication.showBioinformaticsLinks && parentApplication.isTopicsSupported && this.searchTopicList.length > 0) {
				selectCorrespondingLinkBarLabel(searchResultsLinkBar, topicHitLabel);
				selectCorrespondingLinkBarLabel(searchResultsTreeLinkBar, topicHitLabel);
			} else {
				selectCorrespondingLinkBarLabel(searchResultsLinkBar, experimentHitLabel);
				selectCorrespondingLinkBarLabel(searchResultsTreeLinkBar, experimentHitLabel);
			} 
			if (searchGlobalList.length > 0) {
				selectCorrespondingLinkBarLabel(searchResultsLinkBar, globalHitLabel);
			}
		}
		
 		public function onViewSwitch():void {

			if (searchViews.selectedChild == searchView ) {
				restoreWindow();
				buttonStack.selectedChild = searchButtonView;
				buttonStack.visible = true;
				buttonStack.selectedChild = searchButtonView;
				buttonStackTop.selectedChild = searchTopButtonView;
			} else if (searchViews.selectedChild == searchResultsView) {
				buttonStack.visible = true;
				showTree.selected = false;
				toggleResultTreeView();
				buttonStackTop.selectedChild = resultTopButtonView;
				callLater(setSelectedLinkBarLabel);
			} 
		}
		
		private function searchResultsLinkBarClick(event:ItemClickEvent):void {
			resultsViewStack.selectedIndex = getIndexFromLabel(event.label, false);
			selectSelectedLinkbarColor(LinkBar(event.target), event.index);
		}
		
		private function searchResultsTreeLinkBarClick(event:ItemClickEvent):void {
			resultsTreeViewStack.selectedIndex = getIndexFromLabel(event.label, true);
			selectSelectedLinkbarColor(LinkBar(event.target), event.index);
		}
		
		private function getIndexFromLabel(label:String, isTree:Boolean):int {
			var idx:int = 0;
			if (label.indexOf(globalHitLabel) != -1) {
				idx = 0;
			}
			if (label.indexOf(experimentHitLabel) != -1) {
				idx = 1;
			}
			if(label.indexOf(analysisHitLabel) != -1) {
				idx = 2;
			}
			if(label.indexOf(protocolHitLabel) != -1) {
				idx = 3;
			}
			if(label.indexOf(dataTrackHitLabel) != -1) {
				idx = 4;
			}
			if(label.indexOf(topicHitLabel) != -1) {
				idx = 5;
			}
			if (isTree && idx > 0) {
				idx = idx -1;
			}
			
			return idx;
		}
		
		private function selectSelectedLinkbarColor(linkbar:LinkBar, index:int):void {
			for(var i:int=0; i<linkbar.numChildren; i++){      
				var curItem:LinkButton = LinkButton(linkbar.getChildAt(i));
				if(i == index) {
					curItem.setStyle("color", 0x0000FF);
				} else {
					curItem.setStyle("color", 0x000000); 
				}   
			}			
		}
		
		private function selectCorrespondingLinkBarLabel(linkbar:LinkBar, label:String):void {
			var provider:ArrayCollection = linkbar.dataProvider as ArrayCollection;
			for(var i:int=0; i < provider.length; i++) {
				var currentString:String = String(provider.getItemAt(i));
				if(currentString.indexOf(label) != -1) {
					selectSelectedLinkbarColor(linkbar, i);
				}
			}
		}
		
		public function sortObjectType(item1:Object, item2:Object):int {
			var o1:String  = item1.@objectTypeDisplay;
			var o2:String  = item2.@objectTypeDisplay;
			
			if (o1 > o2) {
				return 1
			} else if (o2 > o1) {
				return -1;
			} else {
				return 0;
			}
		}
		
		public function sortRank(item1:Object, item2:Object):int {
			var s1:String  = item1.@searchRank;
			var s2:String  = item2.@searchRank;
			
			var n1:Number = new Number(s1);
			var n2:Number = new Number(s2);
			
			if (n1 > n2) {
				return 1
			} else if (n2 > n1) {
				return -1;
			} else {
				return 0;
			}
		}
		
		public function sortScore(item1:Object, item2:Object):int {
			var s1:String = item1.@searchScore;
			var s2:String = item2.@searchScore;
			
			var n1:Number = -1;
			var n2:Number = -1;
			
			var tokens:Array = s1.split("%");
			if (tokens.length > 0) {
				n1 = Number(tokens[0]);	
			}
			tokens = s2.split("%");
			if (tokens.length > 0) {
				n2 = Number(tokens[0]);	
			}

			if (n1 > n2) {
				return 1
			} else if (n2 > n1) {
				return -1;
			} else {
				return 0;
			}
		}
    ]]>
    </mx:Script>
	<mx:Resize widthTo="200" id="windowShrink" target="{this}" />
	<mx:Resize widthTo="850" id="windowRestore" target="{this}" />
    
    <mx:XMLListCollection id="searchList" source="{searchView.searchGNomEx.lastResult.RequestList.Request}"/>
    <mx:XMLListCollection id="searchProtocolList" source="{searchView.searchGNomEx.lastResult.ProtocolList.Protocol}"/>
    <mx:XMLListCollection id="searchAnalysisList" source="{searchView.searchGNomEx.lastResult.AnalysisList.Analysis}"/>
	<mx:XMLListCollection id="searchDataTrackList" source="{searchView.searchGNomEx.lastResult.DataTrackList.DataTrack}"/>
	<mx:XMLListCollection id="searchTopicList" source="{searchView.searchGNomEx.lastResult.TopicList.Topic}"/>
	<mx:XMLListCollection id="searchGlobalList" source="{searchView.searchGNomEx.lastResult.GlobalList.Global}"/>
<mx:VBox width="100%" height="100%" paddingLeft="0" paddingRight="0" paddingBottom="0"  verticalGap="0" paddingTop="0" backgroundColor="#FEFEFE" backgroundAlpha="0.5">


<mx:VBox width="100%" verticalGap="0" height="100%" >
	<mx:HBox  verticalAlign="bottom" width="100%" horizontalAlign="left" paddingTop="0" horizontalGap="0">
        <mx:TabBar dataProvider="{searchViews}" 
        	itemClick="onViewSwitch()"  
        	creationPolicy="all"
        	useHandCursor="true"  styleName="formTabBar">
        </mx:TabBar>
        <mx:Spacer width="140"/>
        <mx:HBox width="100%" horizontalAlign="right">
            <mx:ViewStack width="100%"  id="buttonStackTop" >
                <mx:HBox  horizontalAlign="right" width="100%" id="searchTopButtonView" verticalAlign="top">
		        	<mx:Button visible="false">
		        	</mx:Button>
                </mx:HBox>
                <mx:HBox width="100%" horizontalAlign="right" id="resultTopButtonView" horizontalGap="20" verticalAlign="middle">
					<mx:CheckBox id="showTree"  label="Tree view" change="toggleResultTreeView()"/>
				    <mx:Label text="Criteria used in search" textDecoration="underline" toolTip="{searchView.searchCriteriaDisplay}" ></mx:Label>
                </mx:HBox>
                <mx:HBox width="100%" horizontalAlign="right" id="resultTreeTopButtonView" >
	                <mx:HBox width="100%" horizontalAlign="right"  horizontalGap="20">
					    <mx:Label text="Criteria used in search" textDecoration="underline" toolTip="{searchView.searchGNomEx.lastResult.@search}" ></mx:Label>
                    </mx:HBox>
                </mx:HBox>

        	</mx:ViewStack>
        	
        </mx:HBox>

     </mx:HBox>
	

	<mx:ViewStack  id="searchViews" width="100%" height="100%" 
			 creationPolicy="all"  styleName="formTabBody" cornerRadius="0" selectedIndex="0">
	
		<search:SearchView id="searchView" label="New search" width="100%" height="100%"  >
		</search:SearchView>
		
		<mx:VBox id="searchResultsView" label="Search Results" styleName="form" enabled="false" width="100%" height="100%" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
			<mx:ViewStack  id="searchResultsViewStack" width="100%" height="100%">
				

				<mx:VBox id="searchResultsGridView"  label="Results"   width="100%" height="100%" paddingTop="4" paddingLeft="4" paddingRight="4" paddingBottom="4">
					<mx:HBox>
						<mx:LinkBar id="searchResultsLinkBar" styleName="formLinkBar" itemClick="searchResultsLinkBarClick(event)" textRollOverColor="#0000FF"/>
					</mx:HBox>
					
					<mx:ViewStack id="resultsViewStack" width="100%" height="100%" >
						<mx:VBox id="resultsGlobalView" label="{globalHitLabel}" width="100%" height="100%" left="4" right="4" top="4" bottom="4" verticalGap="0">
							<mx:VBox id="listGlobalView" width="100%" height="100%">
								<mx:DataGrid  dataProvider="{searchGlobalList}"  width="100%" height="100%"  id="resultsGlobalGrid" doubleClickEnabled="true"  doubleClick="onGlobalRowSelected()" fontSize="10">
									<mx:columns>
										<mx:DataGridColumn headerText="" width="6" dataField="@objectType" sortCompareFunction="sortObjectType">
											<mx:itemRenderer>
												<mx:Component >
													<mx:HBox  horizontalGap="0"   horizontalScrollPolicy="off">
														<mx:Image id="image" toolTip="{data.@objectTypeDisplay}" source="{data.@icon}" >
														</mx:Image> 
													</mx:HBox>
												</mx:Component>
											</mx:itemRenderer>
										</mx:DataGridColumn>
										<mx:DataGridColumn headerText="Rank" width="18" dataField="@searchRank" sortCompareFunction="sortRank"/>
										<mx:DataGridColumn headerText="Score" width="18" dataField="@searchScore" sortCompareFunction="sortScore"/>
										<mx:DataGridColumn headerText="Number" width="25" dataField="@number"/>
										<mx:DataGridColumn headerText="Name" width="120" dataField="@name"/>
										<mx:DataGridColumn headerText="Group" width="80" dataField="@labName"/>
										<mx:DataGridColumn headerText="Visibility"  width="30" dataField="@codeVisibility"
														   editable="false" 
														   rendererIsEditor="true" 
														   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Visibility').DictionaryEntry, '@display', '@value', '@codeVisibility')}"/>
									</mx:columns>
								</mx:DataGrid>
							</mx:VBox>
						</mx:VBox>

						<mx:VBox  id="resultsExperimentView" label="{experimentHitLabel}" width="100%" height="100%" left="4" right="4" top="4" bottom="4" verticalGap="0">
							<mx:VBox id="listView" width="100%" height="100%">
								<mx:DataGrid  dataProvider="{searchList}"  width="100%" height="100%" doubleClick="onExperimentRowSelected()" id="resultsGrid" doubleClickEnabled="true">
									<mx:columns>
										<mx:DataGridColumn headerText="Rank" width="20" dataField="@searchRank" sortCompareFunction="sortRank"/>
										<mx:DataGridColumn headerText="Score" width="25" dataField="@searchScore" sortCompareFunction="sortScore"/>
										<mx:DataGridColumn headerText="Group" width="50" dataField="@labName"/>
										<mx:DataGridColumn headerText="Project" width="50" dataField="@projectName"/>
										<mx:DataGridColumn headerText="Category" width="50" dataField="@codeRequestCategory" 
														   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.RequestCategory').DictionaryEntry, '@display', '@value', '@codeRequestCategory')}"/>                 			       	
										<mx:DataGridColumn headerText="Request Date" width="37" dataField="@requestCreateDate"/>
										<mx:DataGridColumn headerText="Request #" width="35" dataField="@requestNumber"/>
										<mx:DataGridColumn headerText="Visibility"  width="30" dataField="@codeVisibility" 
														   editable="false" 
														   rendererIsEditor="true" 
														   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Visibility').DictionaryEntry, '@display', '@value', '@codeVisibility')}"/>
										<mx:DataGridColumn headerText="Microarray" width="170" dataField="@slideProductName"/>
									</mx:columns>
								</mx:DataGrid>
							</mx:VBox>
						</mx:VBox>
						
						<mx:VBox id="resultsAnalysisView" label="{analysisHitLabel}" width="100%" height="100%" left="4" right="4" top="4" bottom="4" verticalGap="0">
							<mx:VBox id="listAnalysisView" width="100%" height="100%">
								<mx:DataGrid  dataProvider="{searchAnalysisList}"  width="100%" height="100%"  id="resultAnalysisGrid" doubleClickEnabled="true"  doubleClick="onAnalysisRowSelected()">
									<mx:columns>
										<mx:DataGridColumn headerText="Rank" width="20" dataField="@searchRank" sortCompareFunction="sortRank"/>
										<mx:DataGridColumn headerText="Score" width="25" dataField="@searchScore" sortCompareFunction="sortScore"/>
										<mx:DataGridColumn headerText="Group" width="60" dataField="@labName"/>
										<mx:DataGridColumn headerText="Analysis Group" width="70" dataField="@analysisGroupName"/>
										<mx:DataGridColumn headerText="Analysis Number" width="50" dataField="@number"/>
										<mx:DataGridColumn headerText="Analysis Name" width="70" dataField="@name"/>
										<mx:DataGridColumn headerText="Organism" width="50" dataField="@organism"/>
										<mx:DataGridColumn headerText="Type" width="50" dataField="@analysisType"/>
										<mx:DataGridColumn headerText="Protocol" width="50" dataField="@analysisProtocol"/>
										<mx:DataGridColumn headerText="Submitted by" width="60" labelFunction="getOwnerName"/>
										<mx:DataGridColumn headerText="Submit date" width="50" dataField="@createDate"/>
										<mx:DataGridColumn headerText="Visibility"  width="30" dataField="@codeVisibility" 
														   editable="false" 
														   rendererIsEditor="true" 
														   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Visibility').DictionaryEntry, '@display', '@value', '@codeVisibility')}"/>
									</mx:columns>
								</mx:DataGrid>
							</mx:VBox>
						</mx:VBox>
						
						<mx:VBox id="resultsProtocolView" label="{protocolHitLabel}" width="100%" height="100%" left="4" right="4" top="4" bottom="4" verticalGap="0">
							<mx:VBox id="listProtocolView" width="100%" height="100%">
								<mx:DataGrid  dataProvider="{searchProtocolList}"  width="100%" height="100%"  id="resultsProtocolGrid" doubleClickEnabled="true" doubleClick="onProtocolRowSelected()">
									<mx:columns>
										<mx:DataGridColumn headerText="Rank" width="20" dataField="@searchRank" sortCompareFunction="sortRank"/>
										<mx:DataGridColumn headerText="Score" width="25" dataField="@searchScore" sortCompareFunction="sortScore"/>
										<mx:DataGridColumn headerText="type" width="50" dataField="@protocolType"/>
										<mx:DataGridColumn headerText="Name" width="250" dataField="@name"/>
									</mx:columns>
								</mx:DataGrid>
							</mx:VBox>
						</mx:VBox>
						
						<mx:VBox id="resultsDataTrackView" label="{dataTrackHitLabel}" width="100%" height="100%" left="4" right="4" top="4" bottom="4" verticalGap="0">
							<mx:VBox id="listDataTrackView" width="100%" height="100%">
								<mx:DataGrid  dataProvider="{searchDataTrackList}"  width="100%" height="100%"  id="resultDataTrackGrid" doubleClickEnabled="true"  doubleClick="onDataTrackRowSelected()">
									<mx:columns>
										<mx:DataGridColumn headerText="Rank" width="20" dataField="@searchRank" sortCompareFunction="sortRank"/>
										<mx:DataGridColumn headerText="Score" width="25" dataField="@searchScore" sortCompareFunction="sortScore"/>
										<mx:DataGridColumn headerText="Group" width="60" dataField="@labName"/>
										<mx:DataGridColumn headerText="Data Track Folder" width="70" dataField="@dataTrackFolderName"/>
										<mx:DataGridColumn headerText="Data Track #" width="50" dataField="@fileName"/>
										<mx:DataGridColumn headerText="Data Track Name" width="70" dataField="@name"/>
										<mx:DataGridColumn headerText="Submitted by" width="60" labelFunction="getOwnerName"/>
										<mx:DataGridColumn headerText="Submit date" width="50" dataField="@createDate"/>
										<mx:DataGridColumn headerText="Visibility"  width="30" dataField="@codeVisibility" 
														   editable="false" 
														   rendererIsEditor="true" 
														   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Visibility').DictionaryEntry, '@display', '@value', '@codeVisibility')}"/>
									</mx:columns>
								</mx:DataGrid>
							</mx:VBox>
						</mx:VBox>
						
						<mx:VBox id="resultsTopicView" label="{topicHitLabel}" width="100%" height="100%" left="4" right="4" top="4" bottom="4" verticalGap="0" visible="{parentApplication.isTopicsSupported}">
							<mx:VBox id="listTopicView" width="100%" height="100%">
								<mx:DataGrid  dataProvider="{searchTopicList}"  width="100%" height="100%"  id="resultTopicGrid" doubleClickEnabled="true"  doubleClick="onTopicRowSelected()">
									<mx:columns>
										<mx:DataGridColumn headerText="Rank" width="20" dataField="@searchRank" sortCompareFunction="sortRank"/>
										<mx:DataGridColumn headerText="Score" width="25" dataField="@searchScore" sortCompareFunction="sortScore"/>
										<mx:DataGridColumn headerText="Group" width="60" dataField="@labName"/>
										<mx:DataGridColumn headerText="Topic Name" width="70" dataField="@name"/>
										<mx:DataGridColumn headerText="Visibility"  width="30" dataField="@codeVisibility" 
														   editable="false" 
														   rendererIsEditor="true" 
														   itemRenderer="{DropdownLabel.getFactory(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.Visibility').DictionaryEntry, '@display', '@value', '@codeVisibility')}"/>
									</mx:columns>
								</mx:DataGrid>
							</mx:VBox>
						</mx:VBox>
						
					</mx:ViewStack>
				</mx:VBox>

				
				
				<mx:VBox id="searchResultsTreeView"  
						 label="Results (tree)" 
						 width="100%" height="100%" paddingTop="4" paddingLeft="4" paddingRight="4" paddingBottom="4"  >
					<mx:HBox width="100%" paddingBottom="0" verticalAlign="bottom">
						<mx:LinkBar id="searchResultsTreeLinkBar" styleName="formLinkBar" itemClick="searchResultsTreeLinkBarClick(event)" textRollOverColor="#0000FF"/>
						<mx:HBox  width="100%" horizontalAlign="right" verticalAlign="bottom" paddingBottom="0">
							<mx:LinkButton  label="Expand tree"  useHandCursor="true" click="expandAllNodes()" id="expand" toggle="true" paddingBottom="0" textDecoration="underline"/>		   
							<mx:LinkButton  label="Collapse tree" click="collapseAllNodes()"  useHandCursor="true" selected="true" id="collapse" toggle="false" paddingBottom="0" textDecoration="underline"/>
						</mx:HBox>
					</mx:HBox>
					<mx:ViewStack id="resultsTreeViewStack" width="100%" height="100%" >
						<mx:VBox id="resultsExperimentTreeView"  label="{experimentHitLabel}"  width="100%" height="100%" left="4" right="4" top="4" bottom="4" verticalGap="0">
							<mx:VBox id="treeView" width="100%" height="100%">
								<mx:Tree id="resultsTree" width="100%" height="100%" 
										 dataProvider="{searchView.searchGNomEx.lastResult.ProjectRequestList}"
										 labelField="@label" 
										 doubleClickEnabled="true" doubleClick="onExperimentNodeSelected()"
										 iconFunction="parentApplication.getTreeIcon"
										 labelFunction="getTreeLabel"
										 showRoot="true" >
								</mx:Tree>
							</mx:VBox>
						</mx:VBox>
						
						<mx:VBox id="resultsAnalysisTreeView" label="{analysisHitLabel}"  width="100%" height="100%" left="4" right="4" top="4" bottom="4" verticalGap="0">
							<mx:VBox id="treeAnalysisView" width="100%" height="100%">
								<mx:Tree id="resultsAnalysisTree" width="100%" height="100%" 
										 dataProvider="{searchView.searchGNomEx.lastResult.AnalysisGroupList}"
										 labelField="@label" 
										 doubleClickEnabled="true" doubleClick="onAnalysisNodeSelected()"
										 iconFunction="parentApplication.getTreeIcon"
										 labelFunction="getTreeLabel"
										 showRoot="true" >
								</mx:Tree>
							</mx:VBox>
						</mx:VBox>
						
						<mx:VBox id="resultsProtocolTreeView" label="{protocolHitLabel}"  width="100%" height="100%" left="4" right="4" top="4" bottom="4" verticalGap="0">
							<mx:VBox id="treeProtocolView" width="100%" height="100%">
								<mx:Tree id="resultsProtocolTree" width="100%" height="100%" 
										 dataProvider="{searchView.searchGNomEx.lastResult.ProtocolList}"
										 labelField="@label" 
										 doubleClickEnabled="true" doubleClick="onProtocolNodeSelected()"
										 iconFunction="parentApplication.getTreeIcon"
										 labelFunction="getTreeLabel"
										 showRoot="true" >
								</mx:Tree>
							</mx:VBox>
						</mx:VBox>
						
						<mx:VBox id="resultsDataTrackTreeView" label="{dataTrackHitLabel}"  width="100%" height="100%" left="4" right="4" top="4" bottom="4" verticalGap="0">
							<mx:VBox id="treeDataTrackView" width="100%" height="100%">
								<mx:Tree id="resultsDataTrackTree" width="100%" height="100%" 
										 dataProvider="{searchView.searchGNomEx.lastResult.DataTrackFolderList}"
										 labelField="@label" 
										 doubleClickEnabled="true" doubleClick="onDataTrackNodeSelected()"
										 iconFunction="parentApplication.getDataTrackTreeIcon"
										 labelFunction="getTreeLabel"
										 showRoot="true" >
								</mx:Tree>
							</mx:VBox>
						</mx:VBox>
						<mx:VBox id="resultsTopicTreeView" label="{topicHitLabel}"  width="100%" height="100%" left="4" right="4" top="4" bottom="4" verticalGap="0" >
							<mx:VBox id="treeTopicView" width="100%" height="100%">
								<mx:Tree id="resultsTopicTree" width="100%" height="100%" 
										 dataProvider="{searchView.searchGNomEx.lastResult.LabTopicList}"
										 labelField="@label" 
										 doubleClickEnabled="true" doubleClick="onTopicNodeSelected()"
										 iconFunction="parentApplication.getTopicTreeIcon"
										 labelFunction="getTreeLabel"
										 showRoot="true" >
								</mx:Tree>
							</mx:VBox>
						</mx:VBox>
					</mx:ViewStack>
				</mx:VBox>

				
			</mx:ViewStack>
			
			
			
			
		</mx:VBox>
		
	</mx:ViewStack>


</mx:VBox>
        
		            	
    </mx:VBox>

				<mx:ControlBar width="100%" >
	                <mx:ViewStack width="100%" id="buttonStack" >
	                    <mx:HBox  horizontalAlign="left" width="100%" id="searchButtonView" verticalAlign="top">
				        	<mx:Button label="Search" click="searchView.callSearchIndex()"  icon="@Embed('../../assets/magnifier.png')" id="searchButton">
				        	</mx:Button>
				        	<mx:Button label="Clear"  click="searchView.clearForm()">
				        	</mx:Button>
	                    </mx:HBox>
	                    <mx:HBox width="100%" horizontalAlign="left" id="resultButtonView" horizontalGap="20">
							
	                    </mx:HBox>
                	</mx:ViewStack>
					
				</mx:ControlBar>
    
</util:ResizableTitleWindow>
