<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="views.util.*"
				layout="vertical" 
				title="Edit QC Assay" width="740" height="600" paddingTop="4" paddingRight="4" paddingLeft="4" paddingBottom="4"
				horizontalScrollPolicy="off">
	
	<mx:Script>
		<![CDATA[
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.DataGridEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import views.experimentplatform.ExperimentPlatformState;
			
			private var platformTypeCode:String = null;
			private var defaultIcon:String = null;
			
			[Bindable]
			private var state:ExperimentPlatformState = null;
			
			[Bindable]
			private var selectedItem:Object;
			
			public function init(state:ExperimentPlatformState, selectedItem:Object):void {
				this.state = state;
				this.selectedItem = selectedItem;
				
				nameCol.width = 250;
				var hideBufferStrength:String = parentApplication.getCoreFacilityProperty(state.requestCategory.@idCoreFacility, parentApplication.PROPERTY_QC_ASSAY_HIDE_BUFFER_STRENGTH);
				if (hideBufferStrength != null && hideBufferStrength == "Y") {
					this.maxSampleBufferStrengthCol.visible = false;
					nameCol.width += 50;
				} else {
					this.maxSampleBufferStrengthCol.visible = true;
				}
				var hideWellsPerChip:String = parentApplication.getCoreFacilityProperty(state.requestCategory.@idCoreFacility, parentApplication.PROPERTY_QC_ASSAY_HIDE_WELLS_PER_CHIP);
				if (hideWellsPerChip != null && hideWellsPerChip == "Y") {
					this.sampleWellsPerChipCol.visible = false;
					nameCol.width += 50;
				} else {
					this.sampleWellsPerChipCol.visible = true;
				}
				
				initValues(selectedItem);
			}
			
			private function initValues(selectedItem:Object):void {
				experimentTypeName.text = selectedItem.hasOwnProperty("@application") ? selectedItem.@application : "";
				
				sortOrderText.text = selectedItem.hasOwnProperty("@sortOrder") && selectedItem.@sortOrder != null && selectedItem.@sortOrder != ''
					? selectedItem.@sortOrder : '';
				
				setPriceLabel(this.priceInternalLabel, parentApplication.PROPERTY_INTERNAL_PRICE_LABEL, 'Internal Pricing');
				setPriceLabel(this.priceExternalAcademicLabel, parentApplication.PROPERTY_EXTERNAL_ACADEMIC_PRICE_LABEL, 'External Academic Pricing');
				setPriceLabel(this.priceExternalCommercialLabel, parentApplication.PROPERTY_EXTERNAL_COMMERCIAL_PRICE_LABEL, 'External Commercial Pricing');
				
				dirty.resetDirty();
			}
			
			private function setPriceLabel(label:Label, property:String, defaultLabel:String):void {
				var val:String = parentApplication.getProperty(property);
				if (val == null || val.length == 0) {
					label.text = defaultLabel;
				} else {
					label.text = val;
				}
			}
			
			private function haveApplicationPricing():Boolean {
				return state.requestCategory.@canEnterPrices == 'Y' && selectedItem.@hasChipTypes != 'Y';
			}
			
			private function save():void {
				if (haveApplicationPricing()) {
					var evt:ValidationResultEvent = priceInternalValidator.validate(null, true);
					if (evt.type == ValidationResultEvent.INVALID) {
						Alert.show(evt.message, "Error On " + priceInternalLabel.text, Alert.OK, null, null, parentApplication.iconError);
						return;
					}
					evt = priceExternalAcademicValidator.validate(null, true);
					if (evt.type == ValidationResultEvent.INVALID) {
						Alert.show(evt.message, "Error On " + priceExternalAcademicLabel.text, Alert.OK, null, null, parentApplication.iconError);
						return;
					}
					evt = priceExternalCommercialValidator.validate(null, true);
					if (evt.type == ValidationResultEvent.INVALID) {
						Alert.show(evt.message, "Error On " + priceExternalCommercialLabel.text, Alert.OK, null, null, parentApplication.iconError);
						return;
					}
				}
				
				var originalIdTheme:String = selectedItem.@idApplicationTheme;
				selectedItem.@isActive = 'Y';
				selectedItem.@application = experimentTypeName.text;
				selectedItem.@display = experimentTypeName.text;
				selectedItem.@sortOrder = sortOrderText.text;
				if (haveApplicationPricing()) {
					selectedItem.@unitPriceInternal = this.priceInternalText.text;
					selectedItem.@unitPriceExternalAcademic = this.priceExternalAcademicText.text;
					selectedItem.@unitPriceExternalCommercial = this.priceExternalCommercialText.text;
				}
				
				if (dirty.isDirty()) {
					state.dirty.setDirty();
				}
				dirty.resetDirty();
				mx.managers.PopUpManager.removePopUp(this);
			}
			
			private function clickHasAssays():void {
				if (hasChipTypesCheckBox.selected) {
					selectedItem.@hasChipTypes = 'Y';
					priceVBox.visible = false;
					priceVBox.includeInLayout = false;
					chipTypesVBox.visible = true;
					chipTypesVBox.includeInLayout = true;
				} else {
					selectedItem.@hasChipTypes = 'N';
					priceVBox.visible = true;
					priceVBox.includeInLayout = true;
					chipTypesVBox.visible = false;
					chipTypesVBox.includeInLayout = false;
				}
				dirty.setDirty();
			}
			
			private function onAppGridItemEditEnd(event:DataGridEvent):void {
				state.dirty.setDirty();
			}
			
			public function editChipType():void {
				showEditChipTypeWindow(chipGrid.selectedItem);
			}
			
			private function showEditChipTypeWindow(chip:Object):void {
				var editWindow:QCChipTypeDetailWindow = QCChipTypeDetailWindow(PopUpManager.createPopUp(parentApplication.theBody, QCChipTypeDetailWindow, true));
				PopUpManager.centerPopUp(editWindow);
				editWindow.init(state, chip, dirty);
			}
			
			private function addChipType():void {
				var newNode:XML = new XML("<BioAnalyzerChipType " +
					" isSelected='Y'" +
					" codeBioanalyzerChipType='NewBioanalyzerChipType'" +
					" display=''" +
					" bioanalyzerChipType=''" +
					" concentrationRange=''" +
					" maxSampleBufferStrength=''" +
					" sampleWellsPerChip=''" +
					" codeApplication='" + selectedItem.@codeApplication + "'" +
					" isActive='Y'" +
					" canUpdate='Y'" +
					" />");
				chipTypes.addItemAt(newNode, 0);
				chipGrid.selectedItem = newNode;
				chipGrid.scrollToIndex(0);
				state.dirty.setDirty();
				showEditChipTypeWindow(newNode);
			}
			
			private function removeChipType():void {
				var item:Object = null;
				if (chipGrid.selectedItem != null) {
					item = chipGrid.selectedItem;
				} else {
					return;
				}
				Alert.show("Are you sure you want to remove assay " + item.@display + "?",
					"Confirm",
					(Alert.YES | Alert.NO), this, 
					onPromptToRemoveChipType,						
					parentApplication.iconWarning);
				
			}
			
			private function onPromptToRemoveChipType(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					removeChipTypeImpl();
				}
			}
			
			private function removeChipTypeImpl():void {
				if (chipGrid.selectedItem != null) {
					chipTypes.removeItemAt(chipTypes.getItemIndex(chipGrid.selectedItem));
					state.dirty.setDirty();
					this.dirty.setDirty();
				}
			}
		]]>
	</mx:Script>
	<mx:CurrencyValidator id="priceInternalValidator" source="{this.priceInternalText}" property="text"	precision="2" minValue="0" maxValue="99999.99" required="false"/>
	<mx:CurrencyValidator id="priceExternalAcademicValidator" source="{this.priceExternalAcademicText}" property="text"	precision="2" minValue="0" maxValue="99999.99" required="false"/>
	<mx:CurrencyValidator id="priceExternalCommercialValidator" source="{this.priceExternalCommercialText}" property="text"	precision="2" minValue="0" maxValue="99999.99" required="false"/>
	<mx:XMLListCollection id="chipTypes" source="{selectedItem.ChipTypes.children()}"/>

	<mx:VBox width="100%" height="100%" styleName="form" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4" verticalGap="10">
		<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="4">
			<mx:Text text="QC Experiment Type" styleName="formLabel" width="120"/>
			<mx:TextInput id="experimentTypeName" width="400" backgroundColor="#FFFFFF" borderColor="#898F93" change="dirty.setDirty()" />
			<mx:Spacer width="100%" />
			<mx:Text text="Sort Order" styleName="formLabel"/>
			<mx:TextInput id='sortOrderText' restrict="0-9" maxChars="2" editable="true"/>
		</mx:HBox>
		
		<mx:VBox width="100%" verticalGap="2" verticalAlign="top" paddingTop="0">
			<mx:CheckBox id="hasChipTypesCheckBox" selected="{selectedItem.@hasChipTypes=='Y'}"
				label="Has Assays"
				click="{clickHasAssays()}" paddingBottom="0" paddingTop="0" />
		</mx:VBox>
		
		<mx:VBox width="100%" verticalGap="0" horizontalGap="0" visible="{selectedItem.@hasChipTypes!='Y'}" includeInLayout="{selectedItem.@hasChipTypes!='Y'}" id="priceVBox">
			<mx:HBox width="100%" horizontalGap="2" verticalAlign="middle" paddingTop="0" visible="{state.requestCategory.@canEnterPrices != 'Y'}" includeInLayout="{state.requestCategory.@canEnterPrices != 'Y'}">
				<util:ContextHelp context1="ExperimentPlatformQCPricingHelp" showEdit="{parentApplication.isSuperAdmin}" title="Pricing Help"
								  label="Why can't I edit Prices?" labelPlacement="right" id="coreFacilityNoteLabel"/>
			</mx:HBox>
			<mx:HBox width="100%" horizontalGap="0" verticalAlign="top" paddingTop="0" enabled="{state.requestCategory.@canEnterPrices == 'Y'}">
				<mx:Text text="Billing" styleName="formLabel" paddingBottom="0" width="80"/>
				<mx:VBox width="100%" paddingTop="0" verticalGap="0" paddingLeft="0">
					<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle" paddingTop="0" paddingLeft="0">
						<mx:Label text="$" paddingRight="0" paddingLeft="0" textAlign="right" width="20" />
						<mx:TextInput id="priceInternalText" text="{selectedItem.@unitPriceInternal == '' ? '0.00' : selectedItem.@unitPriceInternal}" restrict="0-9." paddingLeft="0" change="dirty.setDirty()" />
						<mx:Spacer width="5" />
						<mx:Label id="priceInternalLabel" text="Internal Pricing" />
					</mx:HBox>
					<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle" paddingTop="0" paddingLeft="0">
						<mx:Label text="$" paddingRight="0" paddingLeft="0" textAlign="right" width="20" />
						<mx:TextInput id="priceExternalAcademicText" text="{selectedItem.@unitPriceExternalAcademic == '' ? '0.00' : selectedItem.@unitPriceExternalAcademic}" restrict="0-9." paddingLeft="0" change="dirty.setDirty()" />
						<mx:Spacer width="5" />
						<mx:Label id="priceExternalAcademicLabel" text="External Academic Pricing" />
					</mx:HBox>
					<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle" paddingTop="0" paddingLeft="0">
						<mx:Label text="$" paddingRight="0" paddingLeft="0" textAlign="right" width="20" />
						<mx:TextInput id="priceExternalCommercialText" text="{selectedItem.@unitPriceExternalCommercial == '' ? '0.00' : selectedItem.@unitPriceExternalCommercial}" restrict="0-9." paddingLeft="0" change="dirty.setDirty()" />
						<mx:Spacer width="5" />
						<mx:Label id="priceExternalCommercialLabel" text="External Commercial Pricing" />
					</mx:HBox>
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>
		
		<mx:VBox width="100%" height="100%" verticalGap="0" horizontalGap="0" visible="{selectedItem.@hasChipTypes=='Y'}" includeInLayout="{selectedItem.@hasChipTypes=='Y'}" id="chipTypesVBox">
			<mx:HBox verticalAlign="middle">
				<util:ContextHelp context1="QCAssayConfigurationHelp" showEdit="{parentApplication.isSuperAdmin}" title="QC Assay Help"
								  label="Assays" labelPlacement="right" id="QCAssayLabel"/>
				<mx:Spacer width="20" />
				<mx:LinkButton label="Add" styleName="linkMenuButton" 
							   enabled="{state.requestCategory.@canUpdate == 'Y' ? true : false}" 
							   icon="@Embed(source='../../assets/add.png')" 
							   disabledIcon="@Embed(source='../../assets/add_disable.png')" click="addChipType()" fontSize="10"/>
				<mx:LinkButton label="Remove" styleName="linkMenuButton" 
							   enabled="{state.requestCategory.@canUpdate == 'Y' &amp;&amp; chipGrid.selectedItem}"   
							   icon="@Embed(source='../../assets/delete.png')" disabledIcon="@Embed(source='../../assets/delete_disable.png')" 
							   click="removeChipType()" fontSize="10"/>
			</mx:HBox>
			<mx:DataGrid id="chipGrid"  horizontalScrollPolicy="auto"
						 dataProvider="{chipTypes}" editable="true" itemEditBegin="onAppGridItemEditEnd(event);"
						 width="100%" height="100%" wordWrap="true" variableRowHeight="true" fontSize="11">
				<mx:columns>
					<mx:DataGridColumn headerText="Name" id="nameCol"
									   itemRenderer="views.renderers.LabelActive"
									   rendererIsEditor="false"  width="250"
									   editable="true" wordWrap="true" dataField="@bioanalyzerChipType" >
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="Conc. Range"  
									   itemRenderer="views.renderers.LabelActive"
									   rendererIsEditor="false"  width="100"
									   editable="true" wordWrap="true" dataField="@concentrationRange" >
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="Max Sample Buf. Str." id="maxSampleBufferStrengthCol"
									   itemRenderer="views.renderers.LabelActive"
									   rendererIsEditor="false"  width="150"
									   editable="true" wordWrap="true" dataField="@maxSampleBufferStrength" >
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="Wells" id="sampleWellsPerChipCol"
									   itemRenderer="views.renderers.LabelActive"
									   rendererIsEditor="false"  width="50"
									   editable="true" wordWrap="true" dataField="@sampleWellsPerChip" >
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="Pricing"  
									   width="120"   
									   editable="false"                      	
									   dataField="@unitPriceDisplay" 
									   editorDataField="selected" textAlign="center" />
					<mx:DataGridColumn headerText="" width="35" editable="false">
						<mx:itemRenderer>
							<mx:Component>
								<mx:HBox verticalAlign="top" horizontalGap="0"  horizontalScrollPolicy="off">
									<mx:LinkButton label="Edit"  enabled="{data.@canUpdate == 'Y'}"  textDecoration="underline" fontSize="9" click="outerDocument.editChipType()" color="#0000FF"/>
								</mx:HBox>
							</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</mx:columns>
			</mx:DataGrid>
		</mx:VBox>
	</mx:VBox>
	<mx:ControlBar horizontalAlign="right">
		<mx:Spacer width="100%" />
		<util:DirtyNote id="dirty" />
		<mx:Button label="Apply" id="saveButton" click="save()" icon="@Embed(source='../../assets/save.png')" 
				   enabled="{experimentTypeName.text.length > 0}" 
				   disabledIcon="@Embed(source='../../assets/save_disable.png')"/>
		<mx:Button label="Cancel" click="{mx.managers.PopUpManager.removePopUp(this)}"/>
	</mx:ControlBar>
	
</mx:TitleWindow>
