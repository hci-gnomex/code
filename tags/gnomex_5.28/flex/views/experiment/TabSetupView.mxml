<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="Setup"
		   width="100%" height="100%"
		   xmlns:views="*.views"  horizontalScrollPolicy="off" show="{this.verticalScrollPosition = 0}"
		   xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:renderers="views.renderers.*" xmlns:util="views.util.*" xmlns:util1="util.*" xmlns:topic="views.topics.*">
	<mx:states>
		<mx:State name="AdminState">
			<mx:AddChild relativeTo="{labAndInstructionBox}" position="after">
				<mx:HBox id="appUserContainer" width="100%" horizontalGap="0">
					<util:ContextHelp context1="experimentOwnerName" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Name"
									  label="(3) Verify your name." labelPlacement="left" id="experimentOwnerName" width="200"/>
					<mx:ComboBox dataProvider="{appUsers}" 
								 selectedIndex="-1" labelField="@displayName" 
								 id="appUserCombo" width="380">
						<mx:change>{idAppUser = appUserCombo.selectedItem.@idAppUser;checkSetupCompleteness();userSelected()}</mx:change>
					</mx:ComboBox>
				</mx:HBox>
			</mx:AddChild>
			<mx:SetProperty target="{text1}" name="label" value="(4) Pick the account to be billed."/>
			<mx:SetProperty target="{label11}" name="label" value="(1) Select a service."/>
			<mx:SetProperty target="{projectLabel}" name="label"> 
				<mx:value>(5) Select a project folder for organizing experiments.</mx:value>
			</mx:SetProperty>
			<mx:SetStyle target="{label1}" name="paddingTop"/>
			<mx:SetProperty target="{nameLabel}" name="label" value="{nameLabel.label.replace('(5)','(6)')}"/>
			<mx:SetProperty target="{descriptionLabel}" name="label" value="{descriptionLabel.label.replace('(6)','(7)')}"/>
		</mx:State>
		<mx:State name="ExternalExperimentState">
			<mx:RemoveChild target="{this.nameDescriptionHBox}" />
			<mx:SetProperty target="{experimentHelp}" name="context1" value="experimentExternalSetupHelp" />
			<mx:RemoveChild target="{hbox5}"/>
			<mx:RemoveChild target="{accountBox}"/>
			<mx:SetProperty target="{label11}" name="label" value="Experiment platform"/>
			<mx:SetProperty target="{label12}" name="width" value="200"/>
			<mx:SetProperty target="{label11}" name="width" value="200"/>
			<mx:SetProperty target="{projectLabel}" name="width" value="200"/>
			<mx:SetStyle target="{vbox1}" name="verticalGap" value="8"/>
			<mx:SetProperty target="{projectLabel}" name="label" value="Project folder for organizing experiments"/>
			<mx:RemoveChild target="{label1}"/>
			<mx:AddChild relativeTo="{vbox1}" position="lastChild" target="{label1}"/>
			<mx:SetProperty target="{label12}" name="label" value="Lab group"/>
			<mx:SetStyle target="{label1}" name="paddingTop"/>
			<mx:AddChild relativeTo="{vbox1}" position="lastChild">
				<mx:VBox>
					<mx:visible>{parentDocument.filteredAppList.length>0}</mx:visible>
					<mx:HBox width="100%" horizontalGap="0" id="hbox1" verticalAlign="top">
						<util:ContextHelp context1="experimentType" context2="{parentDocument.coreFacility.@idCoreFacility}" context3="{parentDocument.requestType}" 
										  showEdit="{parentApplication.isAdminState}" title="Experiment Type Help"
										  label="Experiment Type" labelPlacement="left" id="labelApplication" width="200"/>
						<mx:RadioButtonGroup id = "radioGroupApp">       	
						</mx:RadioButtonGroup>
						<mx:Tile  verticalGap="0"  width="100%">
							<mx:Repeater id="appRepeater" dataProvider="{parentDocument.filteredAppList}">
								<mx:RadioButton id="radioApp" groupName="radioGroupApp" 
												label="{appRepeater.currentItem.@display}" 
												value="{appRepeater.currentItem.@value}" 
												click="{pickApp()}" fontSize="11" paddingTop="0" paddingBottom="0"
												width="250" />							
							</mx:Repeater>
						</mx:Tile>
					</mx:HBox>
				</mx:VBox>
			</mx:AddChild>
			<mx:RemoveChild target="{vbox4}"/>
			<mx:SetProperty target="{projectCombo}" name="width" value="345"/>
			<mx:SetStyle target="{editProjectButton}" name="paddingRight" value="0"/>
			<mx:SetProperty target="{requestCategoryRepeater}" name="dataProvider" value="{requestCategoriesExternal}"/>
			<mx:AddChild relativeTo="{projectHBox}" position="after">
				<mx:HBox width="100%" horizontalGap="0" id="hboxTopic" verticalAlign="top" paddingLeft="0">
					<topic:TopicLinkBar id="linkToTopicBar" automaticLinking="false"
										toolTip="Link this experiment to a topic"
										mainButtonWidth="200" comboBoxWidth="380"/>			
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{label1}" position="before">
				<mx:HBox width="100%" horizontalGap="0" id="hboxOrg" verticalAlign="top">
					<util:ContextHelp context1="experimentOrganism" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Organism Help"
									  label="Organism" labelPlacement="left" id="labelOrg" width="200"/>
					<mx:ComboBox labelField="@display" selectedIndex="-1"  id="sampleOrganismCombo" close="pickOrganism()" change="pickOrganism()">							
						<mx:dataProvider>{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.OrganismLite').DictionaryEntry.(@isActive != 'N' || @value == '')}</mx:dataProvider>
						<mx:width>{sampleOrganismCombo.selectedItem != null &amp;&amp; sampleOrganismCombo.selectedItem.@display == 'Other' ? 75 : 250}</mx:width>
					</mx:ComboBox>
					<mx:Label text="Please specify" paddingLeft="6">
						<mx:visible>{sampleOrganismCombo.selectedItem != null &amp;&amp; sampleOrganismCombo.selectedItem.@display == 'Other'}</mx:visible>
					</mx:Label>
					<mx:TextInput width="500" id="otherOrganism" change="{pickOrganism();checkSetupCompleteness();}" maxChars="200">
						<mx:visible>{sampleOrganismCombo.selectedItem != null &amp;&amp; sampleOrganismCombo.selectedItem.@display == 'Other'}</mx:visible>
					</mx:TextInput>				
				</mx:HBox>
			</mx:AddChild>		  
		</mx:State>
		<mx:State name="AdminExternalExperimentState" basedOn="AdminState">
			<mx:SetProperty target="{experimentHelp}" name="context1" value="experimentExternalSetupHelp" />
			<mx:RemoveChild target="{this.nameDescriptionHBox}" />
			<mx:RemoveChild target="{hbox5}"/>
			<mx:RemoveChild target="{accountBox}"/>
			<mx:SetStyle target="{vbox1}" name="verticalGap" value="8"/>
			<mx:SetProperty target="{label11}" name="label" value="Experiment Platform"/>
			<mx:SetProperty target="{projectLabel}" name="label" value="Project folder for organizing experiments"/>
			<mx:RemoveChild target="{label1}"/>
			<mx:AddChild relativeTo="{vbox1}" position="lastChild" target="{label1}"/>
			<mx:SetProperty target="{label12}" name="label" value="Lab group"/>
			<mx:SetProperty target="{experimentOwnerName}" name="label" value="Submitter"/>
			<mx:SetStyle target="{label1}" name="verticalAlign" value="middle"/>
			<mx:SetStyle target="{appUserContainer}" name="verticalAlign" value="middle"/>
			<mx:AddChild relativeTo="{vbox1}" position="lastChild">
				<mx:VBox>
					<mx:visible>{parentDocument.filteredAppList.length>0}</mx:visible>
					<mx:HBox width="100%" horizontalGap="0" id="hbox0" verticalAlign="top">
						<util:ContextHelp context1="experimentType" context2="{parentDocument.coreFacility.@idCoreFacility}" context3="{parentDocument.requestType}" 
										  showEdit="{parentApplication.isAdminState}" title="Experiment Type Help"
										  label="Experiment Type" labelPlacement="left" id="labelApplication0" width="160"/>
						<mx:RadioButtonGroup id = "radioGroupAppAdmin">       	
						</mx:RadioButtonGroup>
						<mx:Tile height="100%" direction="vertical" verticalGap="0" width="100%"  >
							<mx:Repeater id="appRepeaterAdmin" dataProvider="{parentDocument.filteredAppList}">
								<mx:RadioButton id="radioAppAdmin" groupName="radioGroupAppAdmin"  
												label="{appRepeaterAdmin.currentItem.@display}" 
												value="{appRepeaterAdmin.currentItem.@value}" 
												click="{pickApp()}" fontSize="11" paddingTop="0" paddingBottom="0"
												width="250"/>							
							</mx:Repeater> 
						</mx:Tile> 
					</mx:HBox> 
				</mx:VBox>
			</mx:AddChild>
			<mx:RemoveChild target="{vbox4}"/>
			<mx:AddChild relativeTo="{hbox2}" position="lastChild">
				
			</mx:AddChild>
			<mx:SetProperty target="{requestCategoryRepeater}" name="dataProvider" value="{requestCategoriesExternal}"/>
			<mx:SetProperty target="{label12}" name="width" value="160"/>
			<mx:SetProperty target="{experimentOwnerName}" name="width" value="160"/>
			<mx:SetProperty target="{projectLabel}" name="width" value="160"/>
			<mx:SetProperty target="{label11}" name="width" value="160"/>
			<mx:AddChild relativeTo="{projectHBox}" position="after">
				<mx:HBox width="100%" horizontalGap="0" id="hboxTopicAdmin" verticalAlign="top" paddingLeft="0">
					<topic:TopicLinkBar id="linkToTopicBarAdmin" automaticLinking="false"
										toolTip="Link this experiment to a topic"
										mainButtonWidth="160" comboBoxWidth="380"/>			
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{label1}" position="before">
				<mx:HBox width="100%" horizontalGap="0" id="hboxOrg1" verticalAlign="top">
					<util:ContextHelp context1="experimentOrganism" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Organism Help"
									  label="Organism" labelPlacement="left" id="labelOrg1" width="160"/>
					<mx:ComboBox labelField="@display"  id="sampleOrganismCombo1" selectedIndex="-1" close="pickOrganism()" change="pickOrganism()">							
						<mx:dataProvider>{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.OrganismLite').DictionaryEntry.(@isActive != 'N' || @value == '')}</mx:dataProvider>
						<mx:width>{sampleOrganismCombo1.selectedItem != null &amp;&amp; sampleOrganismCombo1.selectedItem.@display == 'Other' ? 75 : 250}</mx:width>
					</mx:ComboBox>
					<mx:Label text="Please specify" paddingLeft="6">
						<mx:visible>{sampleOrganismCombo1.selectedItem != null &amp;&amp; sampleOrganismCombo1.selectedItem.@display == 'Other'}</mx:visible>
					</mx:Label>
					<mx:TextInput width="500" id="otherOrganism1" change="{pickOrganism();checkSetupCompleteness();}" maxChars="200">
						<mx:visible>{sampleOrganismCombo1.selectedItem != null &amp;&amp; sampleOrganismCombo1.selectedItem.@display == 'Other'}</mx:visible>
					</mx:TextInput>				
				</mx:HBox>
			</mx:AddChild>
			<mx:SetStyle target="{label1}" name="paddingTop"/>
		</mx:State>	   
		<mx:State name="AdminExternalMicroarrayState" basedOn="AdminExternalExperimentState">
			<mx:AddChild relativeTo="{vbox1}" position="lastChild">
				<mx:HBox width="100%" horizontalGap="0">
					<util:ContextHelp context1="experimentMicroarraySlide" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Microarray Slide Help"
									  label="Microarray slide" labelPlacement="left" id="labelMicroarraySlide" width="160"/>
					<mx:ComboBox labelField="@display" width="420" id="slideProductComboAdmin" change="{pickSlideProduct(slideProductComboAdmin)}"  close="{pickSlideProduct(slideProductComboAdmin)}"   >							
						<mx:dataProvider>{parentDocument.filteredSlideProductList}</mx:dataProvider>
					</mx:ComboBox>
					<mx:LinkButton  id="newSimple" label="New..." click="showNewSimpleSlideWindow()" textDecoration="underline" styleName="formLinkButton" paddingLeft="0" enabled="{parentDocument.requestCategory.@codeRequestCategory != ''}"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:SetProperty target="{requestCategoryRepeater}" name="dataProvider" value="{requestCategoriesExternal}"/>
			<mx:SetProperty target="{labelOrg1}" name="width" value="160"/>
			
		</mx:State>
		<mx:State name="ExternalMicroarrayState" basedOn="ExternalExperimentState">
			<mx:AddChild relativeTo="{vbox1}" position="lastChild">
				<mx:HBox width="100%" horizontalGap="0">
					<util:ContextHelp context1="experimentMicroarraySlide" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Microarray Slide Help"
									  label="Microarray slide" labelPlacement="left" id="labelMicroarraySlide1" width="160"/>
					<mx:ComboBox labelField="@display" width="420" id="slideProductCombo"    change="{pickSlideProduct(slideProductCombo)}" close="{pickSlideProduct(slideProductCombo)}"    >							
						<mx:dataProvider>{parentDocument.filteredSlideProductList}</mx:dataProvider>
					</mx:ComboBox>
					<mx:LinkButton  id="newSimple1" label="New..." click="showNewSimpleSlideWindow()" textDecoration="underline" styleName="formLinkButton" paddingLeft="0" enabled="{parentDocument.requestCategory.@codeRequestCategory != ''}"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:SetProperty target="{label12}" name="width" value="160"/>
			<mx:SetProperty target="{projectLabel}" name="width" value="160"/>
			<mx:SetProperty target="{label11}" name="width" value="160"/>
			<mx:SetProperty target="{labelApplication}" name="width" value="160"/>
			<mx:SetProperty target="{projectCombo}" name="width" value="380"/>
			<mx:SetProperty target="{labelOrg}" name="width" value="160"/>
			
		</mx:State>
	</mx:states>
	
	
	
	<mx:HTTPService  
		id="getLab" 
		url="GetLab.gx"
		destination="getLab"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetLab(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get group', event)"
		method="POST"
		useProxy="false">
		<mx:request>
			<idLab>{this.labCombo.selectedItem.@idLab}</idLab>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="getNewProject" 
		url="GetProject.gx"
		destination="getProject"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetNewProject(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get new project', event)"
		method="POST"
		useProxy="false">
		<mx:request>
			<idProject>0</idProject>    	
			<idLab>{labCombo.selectedItem.@idLab}</idLab>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="getProject" 
		url="GetProject.gx"
		destination="getProject"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetProject(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get project', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="getProjectForEdit" 
		url="GetProject.gx"
		destination="getProjectForEdit"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetProjectForEdit(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get project to edit', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="getProjectRequestList" 
		url="GetProjectRequestList.gx"
		destination="getProjectRequestList"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetProjectRequestList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get project request list', event)"
		method="POST"
		useProxy="false">
		<mx:request>
			<idLab>{labCombo.selectedItem.@idLab}</idLab> 
			<showSamples>N</showSamples>
			<showCategory>N</showCategory>
			<showMyLabsAlways>N</showMyLabsAlways>
			<listKind>ProjectRequestCloneList</listKind>
		</mx:request>
	</mx:HTTPService>
	
	<mx:Script>

		<![CDATA[
			import hci.flex.dictionary.DictionaryEvent;
			
			import mx.collections.Sort;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.ComboBase;
			import mx.controls.RadioButton;
			import mx.controls.richTextEditorClasses.ToolBar;
			import mx.graphics.RadialGradient;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import views.experiment.ProjectDetailWindow;
			import views.experiment.RequestCloneWindow;
			import views.slide.SimpleSlideConfigWindow;
			import views.util.GNomExStringUtil;
			import views.util.PromptXMLListCollection;
			
			[Bindable]
			private var requestCategory:Object;
			
			private var codeRequestCategory:String;
			
			[Bindable]
			private var lab:Object = null;
			
			
			private var firstClick:Boolean = true;
			private var isValidRange:Boolean = true;
			
			private var request:String = "";
			
			private var experimentApplication:Object = "";
			
			public var idAppUser:Object = '';
			
			public var projectDetailWindow:ProjectDetailWindow;
			public var selectedIdProject:Object;
			
			private var requestCloneWindow:RequestCloneWindow; 
			
			private var saveCodeRequestCategory:Object = null;
			
			public function init():void {
				checkSecurity();
				setVisibility();
			}
			
			public function checkSecurity():void {
				if (parentApplication.hasPermission("canWriteAnyObject")) {
					if (parentApplication.submitInternalExperiment()) {
						this.currentState = "AdminState";
					} else {
						if (parentDocument.isMicroarrayState()) {
							this.currentState = "AdminExternalMicroarrayState";
							getSlideProductCombo().selectedIndex = 0;
						} else {
							this.currentState = "AdminExternalExperimentState";
						}
					}
					idAppUser = this.appUserCombo.selectedItem != null && this.appUserCombo.selectedItem.@idAppUser != '' ? this.appUserCombo.selectedItem.@idAppUser : '';
				} else if(parentApplication.hasPermission('canSubmitForOtherCores') && parentApplication.coreFacilitiesICanSubmitTo.contains(parentDocument.coreFacility)){
					this.currentState = "AdminState";
					idAppUser = this.appUserCombo.selectedItem != null && this.appUserCombo.selectedItem.@idAppUser != '' ? this.appUserCombo.selectedItem.@idAppUser : '';
				} else {
					if (parentApplication.submitInternalExperiment()) {
						this.currentState = "";				
					} else {
						if (parentDocument.isMicroarrayState()) {
							this.currentState = "ExternalMicroarrayState";
							getSlideProductCombo().selectedIndex = 0;
						} else {
							this.currentState = "ExternalExperimentState";
						}
					}
					idAppUser = parentApplication.getIdAppUser();
				}	
				if (parentDocument != null) {
					parentDocument.getSubmitterName();				
				}		
				this.workAuthInstructions.htmlText = parentApplication.getProperty(parentApplication.PROPERTY_WORKAUTH_INSTRUCTIONS);		
				
				refreshRequestCategories();
				if (parentDocument != null) {
					this.checkSetupCompleteness();
				}
				setOrganismValidatorSource();
				
				parentDocument.filteredLabList.refresh();
			}
			
			private function refreshRequestCategories():void {
				if (requestTypeGroup.selectedValue != null) {
					this.saveCodeRequestCategory = requestTypeGroup.selectedValue;
				}
				requestCategories.refresh();
				if (this.saveCodeRequestCategory != null) {
					callLater(resetRequestTypeGroup);
				}
			}
			
			private function resetRequestTypeGroup():void {
				if(saveCodeRequestCategory != null) {
					requestTypeGroup.selectedValue = saveCodeRequestCategory;
					saveCodeRequestCategory = null;
					if (parentDocument != null) {
						checkSetupCompleteness();
					}
				}
			}
			
			private function setVisibility():void {
				var visible:Boolean = true;
				if (this.requestTypeGroup.selectedValue == null) {
					visible = false || !parentApplication.submitInternalExperiment();
				}
				this.labAndInstructionBox.visible = visible;
				this.labAndInstructionBox.includeInLayout = visible;
				if (this.labCombo.selectedIndex < 0) {
					visible = false || !parentApplication.submitInternalExperiment();
				}
				if (appUserContainer != null && this.contains(this.appUserContainer)) {
					appUserContainer.visible = visible;
					appUserContainer.includeInLayout = visible;
					if (appUserCombo.selectedItem == null || appUserCombo.selectedItem.@idAppUser == '') {
						visible = false || !parentApplication.submitInternalExperiment();
					}
				}
				this.accountBox.visible = visible;
				this.accountBox.includeInLayout = visible;
				this.workAuthLink1.label = parentApplication.getCoreFacilityProperty(getRequestCategory().@idCoreFacility, parentApplication.PROPERTY_REQUEST_WORK_AUTH_LINK_TEXT);
				if (this.billingAccountCombo.selectedIndex < 0 || this.billingAccountCombo.selectedItem.@accountNameAndNumber == '') {
					visible = false || !parentApplication.submitInternalExperiment();
				}
				this.projectHBox.visible = visible;
				this.projectHBox.includeInLayout = visible;
				this.nameDescriptionHBox.visible = visible;
				this.nameDescriptionHBox.includeInLayout = visible;
				
			}
			private function setOrganismValidatorSource():void{
				if(this.currentState == "AdminExternalExperimentState" || this.currentState == "ExternalExperimentState"){
					this.organsimValidator.source = this.sampleOrganismCombo1;
				} else if(this.currentState == "ExternalExperimentState"){
					this.organsimValidator.source = this.sampleOrganismCombo;
				}
			}
			
			public function selectDefaultLab():void {
				if (labCombo.dataProvider.length == 1) {
					labCombo.selectedIndex = 0;
					getLab.send();							
				} else {
					labCombo.selectedIndex = -1;
					billingAccountCombo.selectedIndex = -1;
					this.billingAccountValidator.validate();
					lab = null;
				}
			}
			
			public function getRequestCategory():Object {
				var code:Object = requestTypeGroup.selectedValue;
				// Special code for CLINSEQ request from BST.
				if(parentDocument != null){
					if (code == null && parentDocument.defaultCodeRequestCategory != null) {
						code = parentDocument.defaultCodeRequestCategory;
					}
				}
				requestCategory= parentApplication.dictionaryManager.getEntry('hci.gnomex.model.RequestCategory', code);
				codeRequestCategory = requestCategory.@codeRequestCategory;
				return requestCategory;			 
			}
			
			
			
			private function showNewProjectWindow():void {
				if (idAppUser == '' || idAppUser == null) {
					Alert.show('Please select the user submitting the request'); 
				} else {
					getNewProject.send();
				}		
			}
			private function filterBillingAccount(item:Object):Boolean {
				if (item.@isActive == 'N') {
					return false;
				}
				
				if (item.@isApproved == 'N') {
					return false;
				}
				
				var cat:Object = getRequestCategory();
				if (cat == null || cat.@idCoreFacility.toString() == '') {
					return false;
				}
				if (idAppUser == null || idAppUser.toString() == '') {
					return false;
				}
				
				if (item.@idCoreFacility != '') {
					if (item.@idCoreFacility.toString() != cat.@idCoreFacility.toString()) {
						return false;
					} 
				}
				
				if (item.@acctUsers != '') {
					var ids:Array = item.@acctUsers.toString().split(",");
					var found:Boolean = false;
					for each(var id:String in ids) {
						if (id == idAppUser.toString()) {
							found = true;
							break;
						}
					}
					if (!found) {
						return false;
					}
				}
				return true;
			}
			private function showEditProjectWindow():void {
				selectedIdProject = this.projectCombo.selectedItem.@idProject;
				var params:Object = new Object();
				params.idProject = this.projectCombo.selectedItem.@idProject;
				params.idLab = labCombo.selectedItem.@idLab;
				getProjectForEdit.send(params);			
			}
			
			private function onGetNewProject(event:ResultEvent):void {
				if (getNewProject.lastResult.name() == "OpenProjectList") {
					parentApplication.navExperimentView.selectedProject = getNewProject.lastResult.Project.(@idProject == 0);
					parentApplication.navExperimentView.selectedProject.@idAppUser = idAppUser;
					parentApplication.navExperimentView.selectedProject.@idLab = this.labCombo.selectedItem.@idLab;
					
					this.projectDetailWindow = ProjectDetailWindow(PopUpManager.createPopUp(this.parentApplication.theBody, ProjectDetailWindow, true));
					this.projectDetailWindow.projectDetailView.fromSubmitRequestWindow = true;
					this.projectDetailWindow.projectDetailView.experimentDesignEntries.refresh();
					this.projectDetailWindow.projectDetailView.experimentFactorEntries.refresh();
					this.projectDetailWindow.projectDetailView.setupDataListeners();
					
					this.projectDetailWindow.labCombo.selectedItem = this.labCombo.selectedItem;
					this.projectDetailWindow.labCombo.enabled = false;
					
					PopUpManager.centerPopUp(this.projectDetailWindow);		
					
				} else {
					mx.controls.Alert.show(getNewProject.lastResult..ACTMESSAGE.@TEXT, "Get new project failed");
				}
			}
			
			private function onGetProjectForEdit(event:ResultEvent):void {
				if (getProjectForEdit.lastResult.name() == "OpenProjectList") {
					parentApplication.navExperimentView.selectedProject = getProjectForEdit.lastResult.Project.(@idProject == projectCombo.selectedItem.@idProject);
					
					this.projectDetailWindow = ProjectDetailWindow(PopUpManager.createPopUp(parentApplication.theBody, ProjectDetailWindow, true));
					this.projectDetailWindow.title = "Edit Project";
					this.projectDetailWindow.projectDetailView.fromSubmitRequestWindow = true;
					this.projectDetailWindow.projectDetailView.experimentDesignEntries.refresh();
					this.projectDetailWindow.projectDetailView.experimentFactorEntries.refresh();
					this.projectDetailWindow.projectDetailView.setupDataListeners();
					
					this.projectDetailWindow.labCombo.selectedItem = this.labCombo.selectedItem;
					this.projectDetailWindow.labCombo.enabled = false;
					
					PopUpManager.centerPopUp(this.projectDetailWindow);		
					
				} else {
					mx.controls.Alert.show(getNewProject.lastResult..ACTMESSAGE.@TEXT, "Get project for edit failed");
				}
				
			}
			
			
			private function onGetProject(event:ResultEvent):void {
				var newProject:Object = getProject.lastResult..Project.(@idProject == selectedIdProject);
				
				// If this is an existing project we just editted, remove the old one from the dropdown.
				//  We will add the refreshed one below.
				var existingProject:Object = null;
				var x:int = 0;
				for each(var project:Object in parentDocument.filteredProjectList) {
					if (project.@idProject == newProject.@idProject) {
						parentDocument.filteredProjectList.removeItemAt(x);
						parentDocument.filteredProjectList.refresh();
						break;
					}
					x++;
				}
				
				parentDocument.filteredProjectList.addItem(newProject);
				parentDocument.filteredProjectList.refresh();
				this.projectCombo.selectedItem = newProject;
				checkSetupCompleteness();
			}
			
			public function onProjectAdded(idProject:Object):void {
				selectedIdProject = idProject;
				var params:Object = new Object();
				params.idProject = idProject;
				params.idLab = labCombo.selectedItem.@idLab;
				getProject.send(params);
			}
			
			
			
			
			private function getMembersOfLab():void {			
				if (this.labCombo.selectedItem != null && this.labCombo.selectedItem.@idLab != null) {
					if (currentState == "AdminState" || currentState == "AdminExternalExperimentState") {
						idAppUser = null;
					}
					this.enabled = false;
					getLab.send();				
				} else {
					lab = null;
				}
			}
			
			private function onGetLab(event:ResultEvent):void {		
				this.enabled = true;
				lab = getLab.lastResult..Lab.(@idLab == labCombo.selectedItem.@idLab);
				
				if (parentDocument != null && !parentDocument.isAmendState()) {
					parentDocument.filteredProjectList.refresh();       	
				}
				
				selectDefaultUserProject();
				
				setNameDescriptionLabels();
				
				if (parentDocument != null && parentDocument.defaultCodeRequestCategory != null) {
					requestTypeGroup.selectedValue = parentDocument.defaultCodeRequestCategory;
					callLater(parentDocument.setRequestCategoryName);
					callLater(highlightRequestCategory);
					refreshBillingAccounts();
				} else if (parentDocument != null) {
					parentDocument.labSelected(lab);
					callLater(setVisibility);
				}
				
				this.checkSetupCompleteness();
			}
			
			private function setNameDescriptionLabels():void {
				if (parentApplication.submitInternalExperiment()) {
					if (parentApplication.requireExperimentDescriptionAndName(this.getRequestCategory().@idCoreFacility, this.getRequestCategory().@codeRequestCategory)) {
						nameLabel.label = nameLabel.label.replace("optional","required");
						descriptionLabel.label = descriptionLabel.label.replace("optional","required");
					} else {
						nameLabel.label = nameLabel.label.replace("required","optional");
						descriptionLabel.label = descriptionLabel.label.replace("required","optional");
					}
				}
			}
			
			private function refreshBillingAccounts():void {
				billingAccounts.refresh();
				if (billingAccounts.length == 1) {
					this.billingAccountCombo.selectedIndex = 0;	        	
				} 
				setVisibility();
			}
			
			private function selectDefaultUserProject():void {
				if (parentDocument == null) {
					return;
				}
				// Default the project dropdown to the the project owned by the user
				if (idAppUser != null) {
					for each(var project:Object in parentDocument.filteredProjectList) {
						if (project.@idAppUser.toString() == idAppUser.toString()) {
							this.projectCombo.selectedItem = project;
							break;
						}
					}
				}
				
			}
			
			private function sortAppUsers(obj1:Object, obj2:Object, fields:Array=null):int {
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var display1:String = obj1.@displayName;
					var display2:String = obj2.@displayName;
					
					if (display1 < display2) {
						return -1;
					} else if (display1 > display2) {
						return 1;
					} else {
						return 0;
					}
					
				}
			}			
			
			private function sortRequestCategory(obj1:Object, obj2:Object, fields:Array=null):int {
				if (obj1 == null && obj2 == null) {
					return 0;
				} else if (obj1 == null) {
					return 1;
				} else if (obj2 == null) {
					return -1;
				} else {
					var idCore1:Number = obj1.@idCoreFacility == "" ? 999 : obj1.@idCoreFacility
					var idCore2:Number = obj2.@idCoreFacility == "" ? 999 : obj2.@idCoreFacility
					
					var sortOrder1:Number = obj1.@sortOrder == "" ? 999 : obj1.@sortOrder;
					var sortOrder2:Number = obj2.@sortOrder == "" ? 999 : obj2.@sortOrder;
					
					var display1:String = obj1.@display;
					var display2:String = obj2.@display;
					
					if (idCore1 < idCore2) {
						return -1;
					} else if (idCore1 > idCore2) {
						return 1;
					} else {
						if (sortOrder1 < sortOrder2) {
							return -1;
						} else if (sortOrder1 > sortOrder2) {
							return 1;
						} else {
							if (display1 < display2) {
								return -1;
							} else if (display1 > display2) {
								return 1;
							} else {
								return 0;
							}
						}
					}
					
				}
			}			
			
			public function getSlideProductCombo():mx.controls.ComboBox {
				var theSlideProductCombo:mx.controls.ComboBox = null;
				if (currentState.indexOf("AdminExternal") == 0) {
					if (currentState.indexOf("Microarray") > 0) {
						theSlideProductCombo = slideProductComboAdmin;
					}
				} else if (currentState.indexOf("External") == 0) {
					if (currentState.indexOf("Microarray") > 0) {
						theSlideProductCombo = slideProductCombo;
					}
				}	
				return theSlideProductCombo;
			}
			
			public function getApp():Object {
				if (currentState.indexOf("AdminExternal") == 0) {
					return this.radioGroupAppAdmin.selectedValue;
				} else if (currentState.indexOf("External") == 0) {
					return this.radioGroupApp.selectedValue;
				} else {
					return "";
				}
			}
			
			public function checkSetupCompleteness():void {
				var isComplete:Boolean = false;
				if (parentDocument == null) {
					return;
				}
				
				if (parentDocument.request != null && parentDocument.request.@idRequest != '0') {
					isComplete = true;
				} else if (idAppUser != null &&  idAppUser != '' &&
					this.requestTypeGroup.selectedValue != null &&
					this.labCombo.selectedItem != null && this.labCombo.selectedItem.@idLab != '' &&
					this.projectCombo.selectedItem != null && this.projectCombo.selectedItem.@idProject != '' && isValidRange) {
					
					// For internal experiments, make sure billing account selected.  Also description and name if property is set.
					if (parentApplication.submitInternalExperiment()) {
						setNameDescriptionLabels();
						//Clinical Sequenome won't have the coreFacility set in experimentEdit view.
							if (!parentApplication.requireExperimentDescriptionAndName(this.requestCategory.@idCoreFacility, this.getRequestCategory().@codeRequestCategory)
								|| (this.experimentName.text != "" && this.overallDescript.text != "")) { 
								if (this.billingAccountCombo.selectedItem != null) {
									isComplete = true;
								}
							}
					} else {
						// For external experiments, check the app radio button group and optionally the microarray slide
						if (parentDocument.filteredAppList.length == 0 || (this.getApp() != '' && getApp() != null)){
							if (hasOrganism()) {
								if (currentState.indexOf("Microarray") > 0) {
									if (getSlideProductCombo().selectedItem != null && getSlideProductCombo().selectedItem.@idSlideProduct != '') {
										isComplete = true;
									}
								} else {
									isComplete = true;
								}
								
							}
						}
					}
				} 
				
				if (parentDocument.isSolexaState()) {
					if (parentDocument.theTab.contains(parentDocument.annotationView)) {
						if(parentDocument.notesView.currentState != "ExternalExperimentState") {
							parentDocument.annotationView.enabled = isComplete;
						} else {
							if(parentDocument.notesView.experimentName.text != "" && parentDocument.notesView.overallDescript.text != "" && isComplete){
								parentDocument.annotationView.enabled = true;
							}
							else{
								parentDocument.annotationView.enabled = false;
							}
						}				
						parentDocument.notesView.enabled = isComplete;
					}  
					if (parentApplication.submitInternalExperiment()) {
						parentDocument.sampleSetupView.enabled = isComplete;
						parentDocument.notesView.enabled = isComplete;
					} else {
						if(parentDocument.notesView.currentState != "ExternalExperimentState") {
							parentDocument.samplesView.enabled = isComplete;
						} else {
							// TDS - Obsolete code?  Experiment name and notes moved from TabSetupView
							// to TabNotes view....  We need to do some cleanup on this
							// code or revamp this design to have separate classes
							// for the major types of experiments.
							if(parentDocument.notesView.experimentName.text != "" && parentDocument.notesView.overallDescript.text != "" && isComplete){
								parentDocument.samplesView.enabled = true;
							}
							else{
								parentDocument.samplesView.enabled = false;
							}
						}						
						parentDocument.notesView.enabled = isComplete;
						
						// TDS - This appears to be dead code.  parentApplication.submitInternalExperiment
						// can't be true because the outer 'else' statement is invoked when 
						// parent.submitInternalExperiment is false.  I don't have the nerve
						// to remove it right now, so I will just do the least courageous thing
						// and comment on it here.  This is yet another example of 
						// why it is time to break apart these different experiment types
						// into entirely separate classes.
						if (isComplete && parentApplication.submitInternalExperiment()) {
							parentDocument.samplesView.initializeSamplesGrid();
							parentDocument.notesView.enabled = isComplete;
						}
					}
					parentDocument.enableNextButtons();
					
				} else {
					if (parentDocument.theTab.contains(parentDocument.annotationView)) {
						if(parentDocument.notesView.currentState != "ExternalExperimentState") {
							parentDocument.annotationView.enabled = isComplete;
						} else {
							if(parentDocument.notesView.experimentName.text != "" && parentDocument.notesView.overallDescript.text != "" && isComplete){
								parentDocument.annotationView.enabled = true;
							}
							else{
								parentDocument.annotationView.enabled = false;
							}
						}	
						parentDocument.notesView.enabled = isComplete;
					}        			
					if (parentApplication.submitInternalExperiment()) {
						parentDocument.sampleSetupView.enabled = isComplete;
						parentDocument.notesView.enabled = isComplete;
					} else {
						if(parentDocument.notesView.currentState != "ExternalExperimentState") {
							parentDocument.samplesView.enabled = isComplete;
						} else {
							if(parentDocument.notesView.experimentName.text != "" && parentDocument.notesView.overallDescript.text != "" && isComplete){
								parentDocument.samplesView.enabled = true;
							}
							else{
								parentDocument.samplesView.enabled = false;
							}
						}
						parentDocument.notesView.enabled = isComplete;
						if (isComplete && parentApplication.submitInternalExperiment()) {
							parentDocument.samplesView.initializeSamplesGrid();
							parentDocument.notesView.enabled = isComplete;
						}
					}
					parentDocument.enableNextButtons();
				}
				
				if (parentDocument.theTab.contains(parentDocument.propertiesView)) {
					parentDocument.propertiesView.enabled = isComplete;
				}
				
				callLater(postSetupCompleteness, [isComplete]);
				
			}
			
			private function hasOrganism():Boolean {
				if (currentState == 'AdminExternalExperimentState' || currentState == 'AdminExternalMicroarrayState') {
					return (this.sampleOrganismCombo1 != null && this.sampleOrganismCombo1.selectedItem != null && this.sampleOrganismCombo1.selectedItem.@value != '') ||
						(this.sampleOrganismCombo1 != null && this.sampleOrganismCombo1.selectedItem != null && this.sampleOrganismCombo1.selectedItem.@display == 'Other' && this.otherOrganism1.text != '');				
				} else if (currentState == 'ExternalExperimentState' || currentState == 'ExternalMicroarrayState') {
					return (this.sampleOrganismCombo != null && this.sampleOrganismCombo.selectedItem != null && this.sampleOrganismCombo.selectedItem.@value != '') ||
						(this.sampleOrganismCombo != null && this.sampleOrganismCombo.selectedItem != null && this.sampleOrganismCombo.selectedItem.@display == 'Other' && this.otherOrganism.text != '');				
				} else {
					return false;
				}
			}
			
			public function getIdOrganism():Object {
				if (currentState == 'AdminExternalExperimentState' || currentState == 'AdminExternalMicroarrayState') {
					return this.sampleOrganismCombo1 != null && this.sampleOrganismCombo1.selectedItem != null ? this.sampleOrganismCombo1.selectedItem.@value : '';				
				} else if (currentState == 'ExternalExperimentState' || currentState == 'ExternalMicroarrayState') {
					return this.sampleOrganismCombo != null && this.sampleOrganismCombo.selectedItem != null ? this.sampleOrganismCombo.selectedItem.@value : '';				
				} else {
					return '';
				}
			}
			
			public function getDisplayOrganism():Object {
				if (currentState == 'AdminExternalExperimentState' || currentState == 'AdminExternalMicroarrayState') {
					return this.sampleOrganismCombo1 != null && this.sampleOrganismCombo1.selectedItem != null ? this.sampleOrganismCombo1.selectedItem.@display : '';				
				} else if (currentState == 'ExternalExperimentState' || currentState == 'ExternalMicroarrayState') {
					return this.sampleOrganismCombo != null && this.sampleOrganismCombo.selectedItem != null ? this.sampleOrganismCombo.selectedItem.@display : '';				
				} else {
					return '';
				}
			}
			
			public function getOtherOrganism():String {
				var otherOrganism:String = "";
				if (currentState == 'AdminExternalExperimentState' || currentState == 'AdminExternalMicroarrayState') {
					if (this.sampleOrganismCombo1 != null && this.sampleOrganismCombo1.selectedItem != null && this.sampleOrganismCombo1.selectedItem.@display == 'Other') {
						otherOrganism = this.otherOrganism1.text;
					}				
				} else if (currentState == 'ExternalExperimentState' || currentState == 'ExternalMicroarrayState') {
					if (this.sampleOrganismCombo != null && this.sampleOrganismCombo.selectedItem != null && this.sampleOrganismCombo.selectedItem.@display == 'Other') {
						otherOrganism = this.otherOrganism.text;
					}				
				}
				
				return otherOrganism;
			}
			
			private function postSetupCompleteness(isComplete:Boolean):void {
				if (parentDocument == null) {
					return;
				}
				
				if(requestTypeGroup.numRadioButtons > 0){
					noServicesText.includeInLayout = false;
					noServicesText.visible = false;
					this.selectLabText.visible = false;
					this.selectLabText.includeInLayout = false;
				} else if (this.lab == null) {
					noServicesText.includeInLayout = false;
					noServicesText.visible = false;
					this.selectLabText.visible = true;
					this.selectLabText.includeInLayout = true;
				} else {
					noServicesText.includeInLayout = true;
					noServicesText.visible = true;
					this.selectLabText.visible = false;
					this.selectLabText.includeInLayout = false;
				}
				
				if (!isComplete) {
					if (parentDocument.isSolexaState() && parentApplication.submitInternalExperiment() && parentDocument.theTab.contains(parentDocument.sampleSetupView)) {
						parentDocument.sampleSetupView.enabled = false;
					}
					parentDocument.samplesView.enabled = false;
					if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
						parentDocument.hybSetupView.enabled = false;
					} 
					if (parentDocument.theTab.contains(parentDocument.hybsView)) {
						parentDocument.hybsView.enabled = false;
					} 
					if (parentDocument.theTab.contains(parentDocument.confirmView)) {
						parentDocument.confirmView.enabled = false;
					}
				} else {
					setClinicalSequenomSamples();
					
					if (parentDocument.isSolexaState() && parentApplication.submitInternalExperiment()) {
						if (parentDocument.theTab.contains(parentDocument.sampleSetupView)) {
							parentDocument.sampleSetupView.enabled = true;
							parentDocument.sampleSetupView.checkSampleSetupCompleteness();
						}
					}
					if (parentApplication.submitInternalExperiment()) {
						if (parentDocument.theTab.contains(parentDocument.sampleSetupView)) {
							parentDocument.sampleSetupView.checkSampleSetupCompleteness();
						}
					}
					parentDocument.samplesView.checkSamplesCompleteness();
					if (parentApplication.submitInternalExperiment()) {
						if (parentDocument.theTab.contains(parentDocument.hybSetupView)) {
							parentDocument.hybSetupView.checkHybSetupCompleteness();
						}
					}
					if (parentDocument.theTab.contains(parentDocument.hybsView)) {
						parentDocument.hybsView.checkHybsCompleteness();
					}
				}
				
			}
			
			private function setClinicalSequenomSamples():void {
				if (parentDocument.requestCategory.@type == parentApplication.TYPE_CLINICAL_SEQUENOM && parentDocument.ccNumberList != null) {
					// add samples for cc numbers passed in by BST
					parentDocument.samples.removeAll();
					for (var sampleIdx:int = 0; sampleIdx < parentDocument.ccNumberList.length; sampleIdx++) {
						var ccNumber:String = parentDocument.ccNumberList[sampleIdx];
						var sampleId:String = "Sample" + sampleIdx;
						var emptyNode:XML = new XML("<Sample " +
							" idSample='" + sampleId + "'" +
							" name='" + ccNumber + "' description='' " +
							" canChangeSampleName='Y'" +
							" ccNumber='" + ccNumber + "'" +
							"/>");
						parentDocument.samples.addItem(emptyNode);
					}
					if (parentDocument.theTab.contains(parentDocument.sampleSetupView)) {
						parentDocument.sampleSetupView.numberOfSamples.text = parentDocument.samples.length;
					}
				}
			}
			
			private function onGetProjectRequestList(event:ResultEvent):void {
				this.requestCloneWindow = RequestCloneWindow(PopUpManager.createPopUp(this, RequestCloneWindow, true));
				PopUpManager.centerPopUp(requestCloneWindow);
				requestCloneWindow.expandAllNodes();
			}
			
			
			private function showNewWorkAuthForm():void {
				var newAuth:ChooseWorkAuthorizationTypeWindow = ChooseWorkAuthorizationTypeWindow(PopUpManager.createPopUp(this, ChooseWorkAuthorizationTypeWindow, true));
				newAuth.init(lab, parentDocument.coreFacility);
				PopUpManager.centerPopUp(newAuth);
			}
			
			public function getAppUserName():String {
				var submitterName:String = "";
				for each(var u:Object in appUsers) {
					if (u.@idAppUser == idAppUser) {
						submitterName = u.@displayName;
						break;	
					}
				}
				return submitterName;			
			}
			
			private function highlightRequestCategory():void {
				for(var i:int = 0; i < radioRequestCategory.length; i++){
					if(radioRequestCategory[i].value[0] == requestCategory[0].@value){
						radioRequestCategory[i].selected = true;
						radioRequestCategory[i].setStyle("fontWeight", "bold");
						request = requestCategory[0].@value;
					}
					else
						radioRequestCategory[i].setStyle("fontWeight", "normal");
					
				}
				
				//Put a check here to make sure we are dealing with microArray request.  This is the start of the process of filtering the microarray dropdown.
				//The timeout is needed because sometimes flex will start performing the filter function before the data is in the slideproduct list from the parentapplication.
				//Placed a timeout in to insure that no null pointers were thrown.
				if(firstClick && currentState != null && currentState.indexOf("Microarray") > 0){
					setTimeout(updateFilteredSlideProduct, 5000);
					firstClick = false;
				}
				else if(currentState != null && currentState.indexOf("Microarray") > 0) {
					updateFilteredSlideProduct();
				}
				
			}
			
			private function pickSlideProduct(slideProductCombo:ComboBox):void {
				parentDocument.hybsView.initializeHybsGrid();
				parentDocument.initializeSlideDesigns(slideProductCombo);
				parentDocument.hybsView.propagateSlideDesign(slideProductCombo);
				parentDocument.hybsView.assignSlideNumbers(slideProductCombo);
				checkSetupCompleteness();			
			}
			
			private function pickApp():void {
				var application:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.Application', getApp());
				if (application != null && application is XMLList) {
					this.parentDocument.applicationName = application[0].@display;
					
				} 
				else {
					this.parentDocument.applicationName = application.@display;
				}
				
				experimentApplication = application[0].@value;
				
				this.parentDocument.applicationSelected(application[0].@value);
				checkSetupCompleteness();
				
				if (currentState.indexOf("Microarray") > 0) {
					getSlideProductCombo().selectedIndex = 0;
					parentDocument.filteredSlideProductList.refresh();
					updateFilteredSlideProduct();
				}
				
				checkSetupCompleteness();
			}
			
			private function showNewSimpleSlideWindow():void{
				var slideWindow:SimpleSlideConfigWindow = SimpleSlideConfigWindow(mx.managers.PopUpManager.createPopUp(this, SimpleSlideConfigWindow, true));
				mx.managers.PopUpManager.centerPopUp(slideWindow);
				slideWindow.tabSetupView = this;
				slideWindow.codeRequestCategory = requestCategory.@codeRequestCategory;
				slideWindow.selectedAppValue = getApp();
				slideWindow.init();
				this.setFocus();
				
			}
			
			public function refreshFilteredSlideList():void{
				parentDocument.getSlideProductList.send();
				updateFilteredSlideProduct();
			}
			
			private function pickOrganism():void {
				
				// Clear other organism if non 'Other' selected
				if (this.getDisplayOrganism() != 'Other') {
					parentDocument.samplesView.propagateOtherOrganism("");
				}			
				
				parentDocument.request.@idOrganismSampleDefault = getIdOrganism();
				
				parentDocument.samplesView.initializeSamplesGrid();
				parentDocument.samplesView.propagateOrganism(this.getIdOrganism());
				if (this.getDisplayOrganism() == 'Other') {
					parentDocument.samplesView.propagateOtherOrganism(this.getOtherOrganism());
				}
				
				if (parentDocument.annotationView != null && parentDocument.theTab.contains(parentDocument.annotationView)) {
					parentDocument.annotationView.onPropertyRefreshed(null);
				}
				
				checkSetupCompleteness();
				
				
				if(requestTypeGroup.selectedValue != null){
					updateFilteredSlideProduct();
				}
			} 
			
			private function updateFilteredSlideProduct():void{
				if (parentDocument.filteredSlideProductList != null) {
					parentDocument.filteredSlideProductList.filterFunction = parentDocument.filterSlideProduct
					parentDocument.filteredSlideProductList.refresh();
					if (currentState.indexOf("AdminExternal") == 0) {
						if (currentState.indexOf("Microarray") > 0) {
							slideProductComboAdmin.dataProvider = parentDocument.filteredSlideProductList;
							slideProductComboAdmin.dropdown.dataProvider = parentDocument.filteredSlideProductList;
						}
					} else if (currentState.indexOf("External") == 0) {
						if (currentState.indexOf("Microarray") > 0) {
							slideProductCombo.dataProvider = parentDocument.filteredSlideProductList;
							slideProductCombo.dropdown.dataProvider = parentDocument.filteredSlideProductList;
						}
					}	
				}
			}
			
			
			private function filterRequestCategory(item:Object):Boolean {
				var keep:Boolean = false;
				if (parentDocument != null && parentDocument.defaultCodeRequestCategory != null) {
					if (item.@codeRequestCategory == parentDocument.defaultCodeRequestCategory) {
						keep = true;
					}
					// Note we don't show clinical research categories for manual submission.  
				} else if (item.@isClinicalResearch == null || item.@isClinicalResearch != 'Y') {
					if (item.@idCoreFacility == null) {
						// If a request category is not associated with a core facility,
						// don't show it
						keep = false;
					} else if (parentDocument != null && parentDocument.coreFacility != null) {
						// Should always get here if not clinical research.
						if (item.@idCoreFacility == parentDocument.coreFacility.@idCoreFacility) {
							keep = true;
						}
					} else if (lab == null) {
						keep = false;
					} else {
						// filter by the lab's core facility
						for each(var cf:Object in lab..CoreFacility) {
							if (cf.@idCoreFacility == item.@idCoreFacility) {
								keep = true;
								break;
							}
						}
					}
				}
				return keep;
				
			}
			
			private function userSelected():void {
				if (appUserCombo.selectedItem != null) {
					idAppUser = appUserCombo.selectedItem.@idAppUser;
					selectDefaultUserProject();
					refreshBillingAccounts();
					
					setVisibility();
					
					checkSetupCompleteness();
				}
			}
			
			private function onRequestCategoryChange():void {
				parentDocument.setRequestCategoryName();
				highlightRequestCategory();
				parentApplication.dictionaryManager.removeEventListener(DictionaryEvent.DICTIONARY_LOADED, onDictionaryRequestCategoryRefreshed);
				parentApplication.dictionaryManager.addEventListener(DictionaryEvent.DICTIONARY_LOADED, onDictionaryRequestCategoryRefreshed);
			}
			
			private function onDictionaryRequestCategoryRefreshed(event:Event):void {
				this.requestTypeGroup.selectedValue = this.requestCategory.@codeRequestCategory;
			}
			
			private function propagateDescript(e:FocusEvent):void {
				if (parentDocument.request != null) {
					parentDocument.request.@description = "";  // Description will be saved differently to avoid problems sending with XML encoding.
				}
				parentDocument.saveDescription = GNomExStringUtil.cleanRichTextHTML(overallDescript.htmlText);
				checkSetupCompleteness();
			}
			
			private function propagateName():void {
				if (parentDocument.request != null) {
					parentDocument.request.@name = experimentName.text;
				}
			}
			
			private function removeRichTextButtons():void {
				this.overallDescript.toolbar.removeChild(overallDescript.colorPicker);
				this.overallDescript.toolbar.removeChild(overallDescript.fontFamilyCombo);
				this.overallDescript.toolbar.removeChild(overallDescript.fontSizeCombo);
				this.overallDescript.toolbar.removeChild(overallDescript.linkTextInput);
				// move controls to top
				var displayObj:ToolBar = this.overallDescript.toolbar;
				this.overallDescript.toolbar.parent.removeChild(displayObj);
				var hbox:HBox = new HBox();
				hbox.width=overallDescript.width;
				//hbox.setStyle("horizontalAlign", "right");
				//var spacer:Spacer = new Spacer();
				//spacer.percentWidth = 100;
				//hbox.addChild(spacer);
				this.overallDescript.textArea.maxChars = 5000;
				hbox.addChild(displayObj);
				this.overallDescript.addChildAt(hbox, 0);
			}
			
			private function scrollOnFocus(evt:FocusEvent):void {
				var topCurrentPosition:Number = vbox1.verticalScrollPosition;
				var bottomCurrentPosition:Number = vbox1.verticalScrollPosition + vbox1.height;
				var currentChild:DisplayObject = DisplayObject(evt.target);
				
				// Determine position of top of object we are looking at.
				var objTopPosition:Number = 0;
				for each (var obj:DisplayObject in vbox1.getChildren()) {
					if (obj == evt.target) {
						break;
					}
					objTopPosition += obj.height;
				}
				var objBottomPosition:Number = objTopPosition + currentChild.height;
				
				
				if (currentChild.height < vbox1.height) {
					if (objTopPosition < topCurrentPosition || objBottomPosition > bottomCurrentPosition) {
						callLater(scrollToPosition, [objTopPosition]);
					}
				} else {
					if (objTopPosition < topCurrentPosition) {
						callLater(scrollToPosition, [objTopPosition]);
					}
				}
			}
			
			private function scrollToPosition(position:Number):void {
				vbox1.verticalScrollPosition = position;
			}
			
			private function onLabSelected():void {
				parentDocument.setIdLab();
				if (projectCombo != null) projectCombo.selectedIndex = -1;
				if (this.sampleOrganismCombo != null) this.sampleOrganismCombo.selectedIndex = -1;
				if (this.sampleOrganismCombo1 != null) this.sampleOrganismCombo1.selectedIndex = -1;
				getMembersOfLab();
			}
			
		]]>
	</mx:Script>
	<mx:XMLListCollection id="billingAccounts"  source="{lab.approvedBillingAccounts.BillingAccount}"  filterFunction="filterBillingAccount"/>
	
	<mx:XMLListCollection id="appUsers"   source="{getLab.lastResult..Lab.activeSubmitters.AppUser}"/>
	
	<mx:XMLListCollection id="requestCategories"   sort="{requestCategorySorter}" filterFunction="filterRequestCategory"
						  source="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry.(@isActive == 'Y' &amp;&amp; @value != '' &amp;&amp; @isInternal == 'Y')}"/>
	<mx:XMLListCollection id="requestCategoriesExternal"   sort="{requestCategorySorter}"
						  source="{parentApplication.dictionaryManager.xml.Dictionary.(@className == 'hci.gnomex.model.RequestCategory').DictionaryEntry.(@isActive == 'Y' &amp;&amp; @value != '' &amp;&amp; @isExternal == 'Y')}"/>
	<mx:Sort id="requestCategorySorter" compareFunction="sortRequestCategory"/>	
	
	<mx:NumberValidator id="labValidator"
						source="{this.labCombo}"
						lowerThanMinError="This field is required."
						property="selectedIndex"
						minValue="0" /> 
	<mx:NumberValidator id="appUserValidator"
						source="{this.appUserCombo}"
						lowerThanMinError="This field is required."
						property="selectedIndex"
						minValue="1" /> 
	<mx:NumberValidator id="billingAccountValidator"
						source="{this.billingAccountCombo}"
						lowerThanMinError="This field is required."         
						property="selectedIndex"
						minValue="0"  />         
	<mx:NumberValidator id="projectValidator"
						source="{this.projectCombo}"
						lowerThanMinError="This field is required."
						property="selectedIndex"
						minValue="0" />
	<mx:NumberValidator id="organsimValidator"
						source="{this.sampleOrganismCombo1}"
						lowerThanMinError="This field is required."
						property="selectedIndex"
						minValue="0" /> 
	
	
	
	<mx:VBox width="100%" height="100%" verticalGap="10" paddingTop="0" id="vbox1" enabled="true" verticalScrollPolicy="auto">
		<mx:HBox width="100%" horizontalGap="0" id="label1" verticalAlign="top" paddingTop="2">
			<util:ContextHelp context1="experimentType" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Service Category Help"
							  labelPlacement="left" id="label11" width="200" label="(1) Select a service category."/>
			<mx:VBox id="requestTypeBox" horizontalGap="8" verticalGap="0" styleName="requiredBox" paddingLeft="2" paddingTop="1" paddingRight="4" paddingBottom="0" width="610" verticalAlign="bottom">
				<mx:RadioButtonGroup id="requestTypeGroup" change="{refreshBillingAccounts()}" />
				<mx:Repeater id="requestCategoryRepeater" dataProvider="{requestCategories}">
					<mx:HBox  paddingRight="2" paddingBottom="0" paddingTop="0" width="100%" verticalAlign="middle">
						<mx:HBox horizontalAlign="center" paddingBottom="0" paddingTop="0">
							<mx:Image 						    	
								source="{requestCategoryRepeater.currentItem.@icon}"/>						
						</mx:HBox> 
						<mx:RadioButton id="radioRequestCategory" groupName="requestTypeGroup" 
										label="{requestCategoryRepeater.currentItem.@display}" 
										value="{requestCategoryRepeater.currentItem.@value}" 
										paddingBottom="0" paddingTop="0" fontSize="11"
										click="onRequestCategoryChange();checkSetupCompleteness()"  width="206"/>							
						<mx:Text text="{requestCategoryRepeater.currentItem.@notes}" width="100%" id="text5" fontSize="10"/>
					</mx:HBox>
				</mx:Repeater>
				<mx:Label id="noServicesText" text="No experiment platforms are associated with this lab. Please contact customer support." includeInLayout="false" visible="false" />
				<mx:Label id="selectLabText" text="Please select a laboratory." includeInLayout="false" visible="false" />
			</mx:VBox>
			<mx:VBox  horizontalAlign="center" id="vbox4">
				<util:ContextHelp context1="experimentInternalSetupHelp" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Experiment Help" label="Click for Instructions" id="experimentHelp"
								  hideLabelIfNoHelp="true"/>
			</mx:VBox>  
		</mx:HBox>
		<mx:HBox width="100%" id="labAndInstructionBox">
			<mx:VBox verticalGap="4" id="vBox5">
				<mx:HBox horizontalGap="0" verticalAlign="top" id="selectLabBox">
					<util:ContextHelp context1="experimentLab" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Lab Help"
									  labelPlacement="left" id="label12" width="200" label="(2) Verify your lab group."/>
					<renderers:FilterComboBox dataProvider="{parentDocument.filteredLabList}" 
											  labelField="@name" 
											  prompt="Select a lab..."
											  width="380"
											  close="onLabSelected();" 
											  id="labCombo">
					</renderers:FilterComboBox>
				</mx:HBox>
				
			</mx:VBox>
		</mx:HBox>	
		<mx:VBox id="accountBox" width="100%" verticalGap="0" paddingTop="0" paddingBottom="0"> 
			<mx:HBox width="100%" horizontalGap="0"  verticalAlign="top" id="hbox5" paddingBottom="0" paddingTop="0">
				<util:ContextHelp context1="experimentBillingAccount" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Billing Account Help"
								  labelPlacement="left" id="text1" width="200" label="(3) Select a billing account."/>
				<mx:HBox verticalAlign="middle" id="hbox3" horizontalGap="1" paddingBottom="0" paddingTop="0">
					<mx:ComboBox labelField="@accountNameAndNumber" width="380" id="billingAccountCombo" prompt=" " change="checkSetupCompleteness(); setVisibility();" selectedIndex="-1" close="checkSetupCompleteness(); setVisibility();">
						<mx:dataProvider>{billingAccounts}</mx:dataProvider>
					</mx:ComboBox>
					<mx:VBox height="100%" verticalGap="0" paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="4" id="vbox3" width="425">
						<mx:Text id="workAuthInstructions" fontStyle="italic" fontSize="10"  textAlign="left" width="100%">
						</mx:Text>
						
						<mx:HBox horizontalGap="2" width="100%" paddingTop="0" paddingBottom="0" id="hbox4">
							<mx:LinkButton  label="New Billing Account"  styleName="formLinkButton" id="workAuthLink1" fontSize="10" paddingTop="0" textAlign="left" paddingLeft="0"> 
								<mx:click>showNewWorkAuthForm()</mx:click>
							</mx:LinkButton>
						</mx:HBox>
					</mx:VBox>
				</mx:HBox>
				
			</mx:HBox>
			
		</mx:VBox>
		<mx:HBox width="100%" horizontalGap="0" verticalAlign="top" id="projectHBox" paddingTop="0" paddingBottom="0">
			<util:ContextHelp context1="projectFolder" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Project Folder Help"
							  label="(4) Select a project folder" labelPlacement="left" id="projectLabel" width="200"/>
			<mx:HBox verticalGap="2" horizontalGap="4">
				<mx:HBox  height="100%" width="100%" horizontalAlign="right" verticalAlign="middle" horizontalGap="2" id="hbox2">
					<mx:ComboBox dataProvider="{parentDocument.filteredProjectList}" labelField="@name" width="380" id="projectCombo" change="{checkSetupCompleteness()}" close="{checkSetupCompleteness()}">
					</mx:ComboBox>
					<mx:LinkButton  id="editProjectButton" label="Edit..." click="showEditProjectWindow()" textDecoration="underline" styleName="formLinkButton">
						<mx:enabled>{projectCombo.selectedItem != null &amp;&amp; projectCombo.selectedItem.@idProject != &quot;&quot;}</mx:enabled>
					</mx:LinkButton>
					<mx:LinkButton  id="newSlide" label="New..." click="showNewProjectWindow()" textDecoration="underline" styleName="formLinkButton" paddingLeft="0">
					</mx:LinkButton>
				</mx:HBox>					
			</mx:HBox>
		</mx:HBox>
		<mx:VBox id="nameDescriptionHBox" width="100%" paddingBottom="0" paddingLeft="0" paddingTop="0" paddingRight="0">
			<mx:HBox id="nameHBox" verticalGap="2" horizontalGap="0" paddingTop="0" paddingBottom="0">
				<util:ContextHelp context1="experimentName" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Description Help"
								  labelPlacement="left" id="nameLabel" width="200" label="(5) Experiment Name. (optional)"/>
				<mx:TextInput id="experimentName" focusOut="{propagateName();checkSetupCompleteness()}" text="{parentDocument.request == null ? '' : parentDocument.request.@name}"  
							  width="380" maxChars="200" focusIn="scrollOnFocus(event);" paddingLeft="0" keyUp="checkSetupCompleteness()"/>
				<mx:Spacer width="10"/>
			</mx:HBox>	
			<mx:VBox id="descriptionVBox" width="100%" paddingRight="20" paddingTop="0">
				<util:ContextHelp context1="experimentDescription" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="Description Help"
								  labelPlacement="left" id="descriptionLabel" width="500" label="(6) Experiment Description. (optional)"/>
				<mx:RichTextEditor  borderStyle="none"  headerHeight="0"  
									id="overallDescript" width="900" minWidth="900"
									htmlText="{parentDocument.request == null ? '' : parentDocument.request.@description}" 
									showControlBar="true"
									change="parentDocument.dirty.setDirty();"
									creationComplete="removeRichTextButtons(); this.addEventListener(FocusEvent.FOCUS_OUT,propagateDescript); this.addEventListener(FocusEvent.FOCUS_IN, scrollOnFocus); "
									paddingLeft="0" paddingRight="0" paddingTop="0" 
									roundedBottomCorners="false" paddingBottom="0" 
									borderThicknessRight="0" borderThicknessLeft="0" 
									borderThicknessBottom="0" borderThickness="0" 
									borderThicknessTop="0" height="100%" minHeight="25" keyUp="checkSetupCompleteness()">
				</mx:RichTextEditor>
			</mx:VBox>
		</mx:VBox>
	</mx:VBox>
	
</mx:Canvas>
